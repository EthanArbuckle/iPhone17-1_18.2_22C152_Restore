void sub_256FBD258(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FBD260);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_256FBD2F4(char a1, char a2)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  if (a2 == 3)
  {
    LOBYTE(v129[0]) = a1;
    uint64_t v3 = mlx_array_from_data((uint64_t)v129, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
    if (v3)
    {
      type metadata accessor for MLXArray();
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = v3;
      return v4;
    }
    goto LABEL_101;
  }
  char v126 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C8);
  uint64_t v5 = MEMORY[0x263F8E498];
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v128 = 0;
    memset(v127, 0, sizeof(v127));
    sub_256FB11E8((uint64_t)v127, &qword_269FDC8E8);
    uint64_t v130 = v5;
    unint64_t result = sub_256FC9990();
    unint64_t v125 = result;
    unint64_t v131 = result;
    LOBYTE(v129[0]) = a1;
    switch(v8)
    {
      case 1:
        goto LABEL_26;
      case 2:
        v55 = __swift_project_boxed_opaque_existential_1(v129, v5);
        uint64_t v56 = *(void *)(v5 - 8);
        uint64_t v57 = *(void *)(v56 + 64);
        MEMORY[0x270FA5388](v55);
        v12 = (char *)&v119 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v56 + 16))(v12);
        if (sub_25704AD40())
        {
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          v124 = &v119;
          MEMORY[0x270FA5388](AssociatedTypeWitness);
          swift_getAssociatedConformanceWitness();
          uint64_t v59 = sub_25704B210();
          MEMORY[0x270FA5388](v59);
          sub_25704B1C0();
          char v60 = sub_25704A6E0();
          v61 = *(char **)(v56 + 8);
          ((void (*)(char *, void))v61)((char *)&v119 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E498]);
          if ((v60 & 1) == 0) {
            goto LABEL_34;
          }
        }
        else
        {
          v61 = *(char **)(v56 + 8);
        }
        int v81 = *v12;
        ((void (*)(char *, void))v61)(v12, MEMORY[0x263F8E498]);
        LODWORD(v127[0]) = v81;
        uint64_t v27 = mlx_array_from_data((uint64_t)v127, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
        if (v27) {
          goto LABEL_95;
        }
        __break(1u);
LABEL_51:
        v17 = *(void (**)(char *, void))(v27 + 8);
        v17(v61, MEMORY[0x263F8E498]);
        goto LABEL_94;
      case 3:
        goto LABEL_103;
      case 4:
        v26 = __swift_project_boxed_opaque_existential_1(v129, v5);
        v124 = &v119;
        uint64_t v27 = *(void *)(v5 - 8);
        v11 = *(char **)(v27 + 64);
        MEMORY[0x270FA5388](v26);
        v12 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        v28 = *(void (**)(char *))(v27 + 16);
        v28(v12);
        uint64_t v29 = sub_25704AD40();
        char v30 = v29;
        MEMORY[0x270FA5388](v29);
        ((void (*)(char *, char *, void))v28)(v12, v12, MEMORY[0x263F8E498]);
        if ((v30 & 1) == 0)
        {
          v17 = *(void (**)(char *, void))(v27 + 8);
          v17(v12, MEMORY[0x263F8E498]);
          goto LABEL_92;
        }
        v123 = &v119;
        uint64_t v31 = sub_25704AD30();
        v17 = *(void (**)(char *, void))(v27 + 8);
        uint64_t v32 = ((uint64_t (*)(char *, void))v17)(v12, MEMORY[0x263F8E498]);
        if (v31 <= 32) {
          goto LABEL_92;
        }
        v122 = &v119;
        MEMORY[0x270FA5388](v32);
        v19 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, char *, void))v28)(v19, v12, MEMORY[0x263F8E498]);
        LODWORD(v127[0]) = 0x80000000;
        if ((sub_25704AD40() & 1) == 0) {
          goto LABEL_56;
        }
        uint64_t v33 = sub_25704AD30();
        if (v33 < 32) {
          goto LABEL_73;
        }
        goto LABEL_67;
      case 5:
        v70 = __swift_project_boxed_opaque_existential_1(v129, v5);
        v124 = &v119;
        uint64_t v27 = *(void *)(v5 - 8);
        v11 = *(char **)(v27 + 64);
        MEMORY[0x270FA5388](v70);
        v12 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        v71 = *(void (**)(char *))(v27 + 16);
        v71(v12);
        uint64_t v72 = sub_25704AD40();
        char v73 = v72;
        MEMORY[0x270FA5388](v72);
        v61 = v12;
        ((void (*)(char *, char *, void))v71)(v12, v12, MEMORY[0x263F8E498]);
        if ((v73 & 1) == 0) {
          goto LABEL_51;
        }
        v123 = &v119;
        uint64_t v74 = sub_25704AD30();
        v17 = *(void (**)(char *, void))(v27 + 8);
        uint64_t v75 = ((uint64_t (*)(char *, void))v17)(v12, MEMORY[0x263F8E498]);
        if (v74 <= 64) {
          goto LABEL_94;
        }
        v122 = &v119;
        MEMORY[0x270FA5388](v75);
        v19 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, char *, void))v71)(v19, v12, MEMORY[0x263F8E498]);
        *(void *)&v127[0] = 0x8000000000000000;
        if (sub_25704AD40())
        {
          uint64_t v76 = sub_25704AD30();
          if (v76 < 64) {
            goto LABEL_81;
          }
        }
        else
        {
          char v88 = sub_25704AD40();
          uint64_t v76 = sub_25704AD30();
          BOOL v90 = __OFSUB__(v76, 64);
          BOOL v89 = v76 - 64 < 0;
          if ((v88 & 1) == 0) {
            goto LABEL_79;
          }
          if (v76 <= 64)
          {
            v112 = *(uint64_t **)(*(void *)(v125 + 24) + 16);
            uint64_t v113 = swift_getAssociatedTypeWitness();
            uint64_t v119 = (uint64_t)&v119;
            MEMORY[0x270FA5388](v113);
            v115 = (char *)&v119 - v114;
            v121 = v112;
            swift_getAssociatedConformanceWitness();
            v120 = (uint64_t *)v115;
            uint64_t v116 = sub_25704B210();
            MEMORY[0x270FA5388](v116);
            sub_25704B1C0();
            LOBYTE(v112) = sub_25704A6D0();
            uint64_t v117 = ((uint64_t (*)(char *, void))v17)((char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E498]);
            MEMORY[0x270FA5388](v117);
            v11 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, char *, void))(v27 + 32))(v11, v19, MEMORY[0x263F8E498]);
            if (v112) {
              goto LABEL_100;
            }
            v19 = *(char **)&v127[0];
            uint64_t v27 = sub_25704AD20();
            v17(v11, MEMORY[0x263F8E498]);
            if (v27 < (uint64_t)v19) {
              goto LABEL_82;
            }
LABEL_94:
            uint64_t v118 = *v12;
            v17(v12, MEMORY[0x263F8E498]);
            *(void *)&v127[0] = v118;
            unint64_t result = mlx_array_from_data((uint64_t)v127, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
            uint64_t v27 = result;
            if (!result) {
              goto LABEL_104;
            }
            goto LABEL_95;
          }
        }
        MEMORY[0x270FA5388](v76);
        v11 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_256FC993C();
        sub_25704AD10();
        uint64_t v27 = sub_25704A6D0();
        uint64_t v95 = MEMORY[0x263F8E498];
        v17(v11, MEMORY[0x263F8E498]);
        v17(v19, v95);
        if (v27) {
          goto LABEL_82;
        }
        goto LABEL_94;
      case 6:
        v77 = __swift_project_boxed_opaque_existential_1(v129, v5);
        uint64_t v78 = *(void *)(v5 - 8);
        MEMORY[0x270FA5388](v77);
        v80 = (char *)&v119 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v78 + 16))(v80);
        if (sub_25704AD40()) {
          sub_25704AD20();
        }
        (*(void (**)(char *, void))(v78 + 8))(v80, MEMORY[0x263F8E498]);
        mlx_array_from_float();
      default:
        v9 = __swift_project_boxed_opaque_existential_1(v129, v5);
        v124 = &v119;
        uint64_t v10 = *(void *)(v5 - 8);
        v11 = *(char **)(v10 + 64);
        MEMORY[0x270FA5388](v9);
        v12 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        v13 = *(void (**)(char *))(v10 + 16);
        v13(v12);
        uint64_t v14 = sub_25704AD40();
        char v15 = v14;
        MEMORY[0x270FA5388](v14);
        ((void (*)(char *, char *, void))v13)(v12, v12, MEMORY[0x263F8E498]);
        if ((v15 & 1) == 0)
        {
          v17 = *(void (**)(char *, void))(v10 + 8);
          v17(v12, MEMORY[0x263F8E498]);
          goto LABEL_93;
        }
        v123 = &v119;
        uint64_t v16 = sub_25704AD30();
        v17 = *(void (**)(char *, void))(v10 + 8);
        uint64_t v18 = ((uint64_t (*)(char *, void))v17)(v12, MEMORY[0x263F8E498]);
        if (v16 <= 64) {
          goto LABEL_93;
        }
        v122 = &v119;
        MEMORY[0x270FA5388](v18);
        v19 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, char *, void))v13)(v19, v12, MEMORY[0x263F8E498]);
        *(void *)&v127[0] = 0x8000000000000000;
        if (sub_25704AD40())
        {
          uint64_t v20 = sub_25704AD30();
          if (v20 < 64) {
            goto LABEL_77;
          }
        }
        else
        {
          char v85 = sub_25704AD40();
          uint64_t v20 = sub_25704AD30();
          BOOL v87 = __OFSUB__(v20, 64);
          BOOL v86 = v20 - 64 < 0;
          if ((v85 & 1) == 0) {
            goto LABEL_75;
          }
          if (v20 <= 64)
          {
            v105 = *(uint64_t **)(*(void *)(v125 + 24) + 16);
            uint64_t v106 = swift_getAssociatedTypeWitness();
            uint64_t v119 = (uint64_t)&v119;
            MEMORY[0x270FA5388](v106);
            v108 = (char *)&v119 - v107;
            v121 = v105;
            swift_getAssociatedConformanceWitness();
            v120 = (uint64_t *)v108;
            uint64_t v109 = sub_25704B210();
            MEMORY[0x270FA5388](v109);
            sub_25704B1C0();
            LOBYTE(v105) = sub_25704A6D0();
            uint64_t v110 = ((uint64_t (*)(char *, void))v17)((char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E498]);
            MEMORY[0x270FA5388](v110);
            v11 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, char *, void))(v10 + 32))(v11, v19, MEMORY[0x263F8E498]);
            if (v105)
            {
LABEL_99:
              v17(v11, MEMORY[0x263F8E498]);
              __break(1u);
LABEL_100:
              v17(v11, MEMORY[0x263F8E498]);
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              *(void *)&v127[0] = 0;
              *((void *)&v127[0] + 1) = 0xE000000000000000;
              sub_25704ADF0();
              sub_25704B340();
              sub_25704A850();
              swift_bridgeObjectRelease();
              sub_25704A850();
              sub_25704A850();
              sub_25704A850();
              unint64_t result = sub_25704AFD0();
              goto LABEL_103;
            }
            v19 = *(char **)&v127[0];
            uint64_t v111 = sub_25704AD20();
            v17(v11, MEMORY[0x263F8E498]);
            BOOL v90 = __OFSUB__(v111, v19);
            BOOL v89 = v111 - (uint64_t)v19 < 0;
            if (v111 < (uint64_t)v19) {
              goto LABEL_78;
            }
            goto LABEL_93;
          }
        }
        MEMORY[0x270FA5388](v20);
        v11 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_256FC9A38();
        sub_25704AD10();
        char v91 = sub_25704A6D0();
        uint64_t v92 = MEMORY[0x263F8E498];
        v17(v11, MEMORY[0x263F8E498]);
        v17(v19, v92);
        if (v91) {
          goto LABEL_78;
        }
        goto LABEL_93;
    }
  }
  unint64_t result = sub_256FA81EC(v127, (uint64_t)v129);
  switch(v7)
  {
    case 1:
      uint64_t v34 = v130;
      v35 = __swift_project_boxed_opaque_existential_1(v129, v130);
      uint64_t v36 = *(void *)(v34 - 8);
      MEMORY[0x270FA5388](v35);
      v38 = (char *)&v119 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v36 + 16))(v38);
      sub_256FC9C30();
      sub_25704AF70();
      if (BYTE1(v127[0])) {
        goto LABEL_102;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v34);
      uint64_t v27 = mlx_array_from_data((uint64_t)v127, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
      if (v27) {
        goto LABEL_95;
      }
      __break(1u);
LABEL_23:
      uint64_t v39 = v130;
      v40 = __swift_project_boxed_opaque_existential_1(v129, v130);
      uint64_t v41 = *(void *)(v39 - 8);
      MEMORY[0x270FA5388](v40);
      v43 = (char *)&v119 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v41 + 16))(v43);
      sub_256FC9BDC();
      uint64_t v5 = MEMORY[0x263F8E8F8];
      sub_25704AF70();
      if (BYTE4(v127[0])) {
        goto LABEL_102;
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v39);
      uint64_t v27 = mlx_array_from_data((uint64_t)v127, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
      if (v27) {
        goto LABEL_95;
      }
      __break(1u);
      break;
    case 2:
      goto LABEL_23;
    case 3:
      goto LABEL_103;
    case 4:
      uint64_t v21 = v130;
      v22 = __swift_project_boxed_opaque_existential_1(v129, v130);
      uint64_t v23 = *(void *)(v21 - 8);
      MEMORY[0x270FA5388](v22);
      v25 = (char *)&v119 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v23 + 16))(v25);
      sub_256FC9B34();
      sub_25704AF70();
      if ((BYTE4(v127[0]) & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v21);
        mlx_array_from_int();
      }
      goto LABEL_102;
    case 5:
      uint64_t v62 = v130;
      v63 = __swift_project_boxed_opaque_existential_1(v129, v130);
      uint64_t v64 = *(void *)(v62 - 8);
      MEMORY[0x270FA5388](v63);
      v66 = (char *)&v119 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v64 + 16))(v66);
      sub_256FC9AE0();
      sub_25704AF70();
      if (BYTE8(v127[0])) {
        goto LABEL_102;
      }
      (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v62);
      uint64_t v27 = mlx_array_from_data((uint64_t)v127, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
      if (!v27)
      {
        __break(1u);
LABEL_38:
        v67 = __swift_project_boxed_opaque_existential_1(v129, v130);
        MEMORY[0x270FA5388](v67);
        (*(void (**)(char *))(v69 + 16))((char *)&v119 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0));
        sub_256FC9A8C();
        sub_25704A580();
        mlx_array_from_float();
      }
      goto LABEL_95;
    case 6:
      goto LABEL_38;
    default:
      __swift_project_boxed_opaque_existential_1(v129, v130);
      sub_25704A6A0();
      mlx_array_from_BOOL();
  }
LABEL_26:
  v44 = __swift_project_boxed_opaque_existential_1(v129, v5);
  v123 = &v119;
  uint64_t v45 = *(void *)(v5 - 8);
  v19 = *(char **)(v45 + 64);
  MEMORY[0x270FA5388](v44);
  v12 = (char *)&v119 - ((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = *(uint64_t **)(v45 + 16);
  ((void (*)(char *))v124)(v12);
  uint64_t v46 = sub_25704AD40();
  if ((v46 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v47 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v47);
  swift_getAssociatedConformanceWitness();
  uint64_t v48 = sub_25704B210();
  MEMORY[0x270FA5388](v48);
  sub_25704B1C0();
  char v49 = sub_25704A6E0();
  uint64_t v46 = (*(uint64_t (**)(char *, void))(v45 + 8))((char *)&v119 - ((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E498]);
  if (v49)
  {
LABEL_28:
    v122 = &v119;
    MEMORY[0x270FA5388](v46);
    v11 = (char *)&v119 - ((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    ((void (*)(char *, char *, void))v124)(v11, v11, MEMORY[0x263F8E498]);
    if (sub_25704AD40())
    {
      uint64_t v50 = swift_getAssociatedTypeWitness();
      v121 = &v119;
      MEMORY[0x270FA5388](v50);
      swift_getAssociatedConformanceWitness();
      uint64_t v51 = sub_25704B210();
      v120 = &v119;
      MEMORY[0x270FA5388](v51);
      sub_25704B1C0();
      char v52 = sub_25704A6C0();
      v17 = *(void (**)(char *, void))(v45 + 8);
      uint64_t v53 = MEMORY[0x263F8E498];
      uint64_t v54 = ((uint64_t (*)(char *, void))v17)((char *)&v119 - ((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E498]);
      MEMORY[0x270FA5388](v54);
      v19 = (char *)&v119 - ((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, char *, uint64_t))v124)(v19, v11, v53);
      if (v52) {
        sub_25704AD20();
      }
      v17(v19, MEMORY[0x263F8E498]);
    }
    else
    {
      v17 = *(void (**)(char *, void))(v45 + 8);
    }
    uint64_t v82 = MEMORY[0x263F8E498];
    v17(v11, MEMORY[0x263F8E498]);
    char v83 = *v12;
    v17(v12, v82);
    LOBYTE(v127[0]) = v83;
    uint64_t v27 = mlx_array_from_data((uint64_t)v127, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
    if (!v27)
    {
      __break(1u);
LABEL_56:
      char v84 = sub_25704AD40();
      uint64_t v33 = sub_25704AD30();
      if (v84)
      {
        if (v33 <= 32) {
          goto LABEL_83;
        }
LABEL_67:
        MEMORY[0x270FA5388](v33);
        v11 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_256FAB5EC();
        sub_25704AD10();
        char v93 = sub_25704A6D0();
        uint64_t v94 = MEMORY[0x263F8E498];
        v17(v11, MEMORY[0x263F8E498]);
        v17(v19, v94);
        if (v93) {
          goto LABEL_74;
        }
        goto LABEL_92;
      }
      if (v33 >= 32)
      {
        v17(v19, MEMORY[0x263F8E498]);
        goto LABEL_92;
      }
LABEL_73:
      int v96 = sub_25704AD20();
      v17(v19, MEMORY[0x263F8E498]);
      BOOL v87 = __OFSUB__(v127[0], v96);
      BOOL v86 = LODWORD(v127[0]) - v96 < 0;
      if (SLODWORD(v127[0]) <= v96)
      {
LABEL_92:
        v17(v12, MEMORY[0x263F8E498]);
        mlx_array_from_int();
      }
LABEL_74:
      while (1)
      {
        __break(1u);
LABEL_75:
        if (v86 == v87) {
          break;
        }
LABEL_77:
        uint64_t v97 = sub_25704AD20();
        v17(v19, MEMORY[0x263F8E498]);
        BOOL v90 = __OFSUB__(v97, *(void *)&v127[0]);
        BOOL v89 = v97 - *(void *)&v127[0] < 0;
        if (v97 >= *(uint64_t *)&v127[0]) {
          goto LABEL_93;
        }
LABEL_78:
        __break(1u);
LABEL_79:
        if (v89 == v90)
        {
          v17(v19, MEMORY[0x263F8E498]);
          goto LABEL_94;
        }
LABEL_81:
        uint64_t v27 = sub_25704AD20();
        v17(v19, MEMORY[0x263F8E498]);
        if (v27 >= *(uint64_t *)&v127[0]) {
          goto LABEL_94;
        }
LABEL_82:
        __break(1u);
LABEL_83:
        v98 = *(uint64_t **)(*(void *)(v125 + 24) + 16);
        uint64_t v99 = swift_getAssociatedTypeWitness();
        uint64_t v119 = (uint64_t)&v119;
        MEMORY[0x270FA5388](v99);
        v101 = (char *)&v119 - v100;
        v121 = v98;
        swift_getAssociatedConformanceWitness();
        v120 = (uint64_t *)v101;
        uint64_t v102 = sub_25704B210();
        MEMORY[0x270FA5388](v102);
        sub_25704B1C0();
        LOBYTE(v98) = sub_25704A6D0();
        uint64_t v103 = ((uint64_t (*)(char *, void))v17)((char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E498]);
        MEMORY[0x270FA5388](v103);
        v11 = (char *)&v119 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, char *, void))(v27 + 32))(v11, v19, MEMORY[0x263F8E498]);
        if (v98)
        {
          v17(v11, MEMORY[0x263F8E498]);
          __break(1u);
          goto LABEL_99;
        }
        v19 = (char *)LODWORD(v127[0]);
        int v104 = sub_25704AD20();
        v17(v11, MEMORY[0x263F8E498]);
        BOOL v87 = __OFSUB__(v19, v104);
        BOOL v86 = (int)v19 - v104 < 0;
        if ((int)v19 <= v104) {
          goto LABEL_92;
        }
      }
      v17(v19, MEMORY[0x263F8E498]);
LABEL_93:
      v17(v12, MEMORY[0x263F8E498]);
      mlx_array_from_BOOL();
    }
LABEL_95:
    type metadata accessor for MLXArray();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v27;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v129);
    return v4;
  }
LABEL_34:
  unint64_t result = sub_25704AFC0();
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

void sub_256FBF864(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FBF86CLL);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_256FBF908(uint64_t a1, char a2)
{
  uint64_t v171 = *MEMORY[0x263EF8340];
  if (a2 != 5)
  {
    uint64_t v165 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C8);
    uint64_t v5 = (void *)MEMORY[0x263F8E5C0];
    if (swift_dynamicCast())
    {
      unint64_t result = sub_256FA81EC(v166, (uint64_t)v168);
      switch(v7)
      {
        case 1:
          uint64_t v38 = (uint64_t)v169;
          uint64_t v39 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          uint64_t v40 = *(void *)(v38 - 8);
          MEMORY[0x270FA5388](v39);
          uint64_t v42 = (char *)&v156 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v40 + 16))(v42);
          sub_256FC9C30();
          sub_25704AF70();
          if (BYTE1(v166[0])) {
            goto LABEL_117;
          }
          (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v38);
          uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
          if (v28) {
            goto LABEL_104;
          }
          __break(1u);
LABEL_24:
          uint64_t v43 = (uint64_t)v169;
          v44 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          uint64_t v45 = *(void *)(v43 - 8);
          MEMORY[0x270FA5388](v44);
          uint64_t v47 = (char *)&v156 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v45 + 16))(v47);
          sub_256FC9BDC();
          uint64_t v5 = (void *)MEMORY[0x263F8E8F8];
          sub_25704AF70();
          if (BYTE4(v166[0])) {
            goto LABEL_117;
          }
          (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v43);
          uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
          if (v28) {
            goto LABEL_104;
          }
          __break(1u);
          break;
        case 2:
          goto LABEL_24;
        case 3:
          uint64_t v23 = (uint64_t)v169;
          uint64_t v24 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          uint64_t v25 = *(void *)(v23 - 8);
          MEMORY[0x270FA5388](v24);
          uint64_t v27 = (char *)&v156 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v25 + 16))(v27);
          sub_256FC9B88();
          uint64_t v5 = (void *)MEMORY[0x263F8E498];
          sub_25704AF70();
          if (BYTE1(v166[0])) {
            goto LABEL_117;
          }
          (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v23);
          uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
          if (v28) {
            goto LABEL_104;
          }
          __break(1u);
          goto LABEL_16;
        case 4:
          uint64_t v84 = (uint64_t)v169;
          char v85 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          uint64_t v86 = *(void *)(v84 - 8);
          MEMORY[0x270FA5388](v85);
          char v88 = (char *)&v156 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v86 + 16))(v88);
          sub_256FC9B34();
          sub_25704AF70();
          if ((BYTE4(v166[0]) & 1) == 0)
          {
            (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v84);
            mlx_array_from_int();
          }
          goto LABEL_117;
        case 5:
          goto LABEL_118;
        case 6:
          goto LABEL_37;
        default:
          __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          sub_25704A6A0();
          mlx_array_from_BOOL();
      }
LABEL_27:
      uint64_t v48 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
      v163 = &v156;
      uint64_t v49 = *(v5 - 1);
      uint64_t v50 = *(void *)(v49 + 64);
      MEMORY[0x270FA5388](v48);
      uint64_t v51 = (uint64_t *)((char *)&v156 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
      char v52 = *(void (**)(uint64_t *))(v49 + 16);
      v52(v51);
      uint64_t v53 = sub_25704AD40();
      if ((v53 & 1) == 0) {
        goto LABEL_121;
      }
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v162 = &v156;
      MEMORY[0x270FA5388](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v55 = sub_25704B210();
      MEMORY[0x270FA5388](v55);
      sub_25704B1C0();
      char v56 = sub_25704A6E0();
      uint64_t v53 = (*(uint64_t (**)(char *, void))(v49 + 8))((char *)&v156 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
      if (v56)
      {
LABEL_121:
        MEMORY[0x270FA5388](v53);
        unint64_t v57 = (v50 + 15) & 0xFFFFFFFFFFFFFFF0;
        ((void (*)(char *, char *, void))v52)((char *)&v156 - v57, (char *)&v156 - v57, MEMORY[0x263F8E5C0]);
        LOBYTE(v166[0]) = -1;
        uint64_t v58 = sub_25704AD40();
        MEMORY[0x270FA5388](v58);
        sub_256FC99E4();
        sub_25704AD10();
        char v59 = sub_25704A6D0();
        uint64_t v5 = *(void **)(v49 + 8);
        ((void (*)(char *, void))v5)((char *)&v156 - v57, MEMORY[0x263F8E5C0]);
        if ((v59 & 1) == 0)
        {
          uint64_t v60 = MEMORY[0x263F8E5C0];
          ((void (*)(char *, void))v5)((char *)&v156 - v57, MEMORY[0x263F8E5C0]);
          uint64_t v61 = *v51;
          ((void (*)(uint64_t *, uint64_t))v5)(v51, v60);
          LOBYTE(v166[0]) = v61;
          uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
          if (v28)
          {
LABEL_104:
            type metadata accessor for MLXArray();
            uint64_t v4 = swift_allocObject();
            *(void *)(v4 + 16) = v28;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v168);
            return v4;
          }
          __break(1u);
LABEL_32:
          uint64_t v62 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
          v163 = &v156;
          uint64_t v63 = *(v5 - 1);
          uint64_t v64 = *(void *)(v63 + 64);
          MEMORY[0x270FA5388](v62);
          uint64_t v65 = (uint64_t *)((char *)&v156 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
          v66 = *(void (**)(uint64_t *))(v63 + 16);
          v66(v65);
          uint64_t v67 = sub_25704AD40();
          if ((v67 & 1) == 0) {
            goto LABEL_122;
          }
          uint64_t v68 = swift_getAssociatedTypeWitness();
          v162 = &v156;
          MEMORY[0x270FA5388](v68);
          swift_getAssociatedConformanceWitness();
          uint64_t v69 = sub_25704B210();
          MEMORY[0x270FA5388](v69);
          sub_25704B1C0();
          char v70 = sub_25704A6E0();
          uint64_t v67 = (*(uint64_t (**)(char *, void))(v63 + 8))((char *)&v156 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
          if (v70)
          {
LABEL_122:
            MEMORY[0x270FA5388](v67);
            unint64_t v71 = (v64 + 15) & 0xFFFFFFFFFFFFFFF0;
            ((void (*)(char *, char *, void))v66)((char *)&v156 - v71, (char *)&v156 - v71, MEMORY[0x263F8E5C0]);
            LODWORD(v166[0]) = -1;
            uint64_t v72 = sub_25704AD40();
            MEMORY[0x270FA5388](v72);
            sub_256FC98E8();
            sub_25704AD10();
            char v73 = sub_25704A6D0();
            uint64_t v74 = *(void (**)(char *, uint64_t))(v63 + 8);
            v74((char *)&v156 - v71, MEMORY[0x263F8E5C0]);
            if ((v73 & 1) == 0)
            {
              uint64_t v75 = MEMORY[0x263F8E5C0];
              v74((char *)&v156 - v71, MEMORY[0x263F8E5C0]);
              uint64_t v76 = *v65;
              v74((char *)v65, v75);
              LODWORD(v166[0]) = v76;
              uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
              if (!v28)
              {
                __break(1u);
LABEL_37:
                v77 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
                MEMORY[0x270FA5388](v77);
                (*(void (**)(char *))(v79 + 16))((char *)&v156 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0));
                sub_256FC9A8C();
                sub_25704A580();
                mlx_array_from_float();
              }
              goto LABEL_104;
            }
          }
        }
      }
LABEL_108:
      unint64_t result = sub_25704AFC0();
      goto LABEL_118;
    }
    uint64_t v167 = 0;
    memset(v166, 0, sizeof(v166));
    sub_256FB11E8((uint64_t)v166, &qword_269FDC8E8);
    v169 = (void (*)(void, void))v5;
    unint64_t result = sub_256FC993C();
    unint64_t v164 = result;
    unint64_t v170 = result;
    v168[0] = a1;
    switch(v8)
    {
      case 1:
        goto LABEL_27;
      case 2:
        goto LABEL_32;
      case 3:
LABEL_16:
        uint64_t v29 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
        v162 = &v156;
        uint64_t v30 = *(v5 - 1);
        v11 = *(char **)(v30 + 64);
        MEMORY[0x270FA5388](v29);
        unint64_t v31 = (unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v14 = (char *)&v156 - v31;
        v163 = (uint64_t *)v30;
        uint64_t v32 = *(void (**)(void))(v30 + 16);
        v13 = (char *)(v30 + 16);
        char v15 = v32;
        v32((char *)&v156 - v31);
        uint64_t v33 = sub_25704AD40();
        char v34 = v33;
        v161 = &v156;
        MEMORY[0x270FA5388](v33);
        ((void (*)(char *, char *, void))v32)((char *)&v156 - v31, (char *)&v156 - v31, MEMORY[0x263F8E5C0]);
        if ((v34 & 1) == 0)
        {
          uint64_t v10 = v163[1];
          uint64_t v36 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - v31, MEMORY[0x263F8E5C0]);
          goto LABEL_92;
        }
        uint64_t v35 = sub_25704AD30();
        v19 = (uint64_t (*)(char *, uint64_t))(v163 + 1);
        uint64_t v10 = v163[1];
        uint64_t v36 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - v31, MEMORY[0x263F8E5C0]);
        if (v35 <= 8) {
          goto LABEL_92;
        }
        v160 = &v156;
        MEMORY[0x270FA5388](v36);
        uint64_t v21 = (uint64_t)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(uint64_t, char *, void))v15)(v21, (char *)&v156 - v31, MEMORY[0x263F8E5C0]);
        LOBYTE(v166[0]) = 0x80;
        if (sub_25704AD40())
        {
          uint64_t v37 = sub_25704AD30();
          if (v37 < 8)
          {
            while (1)
            {
              char v109 = sub_25704AD20();
              uint64_t v36 = ((uint64_t (*)(uint64_t, void))v10)(v21, MEMORY[0x263F8E5C0]);
              BOOL v104 = __OFSUB__(SLOBYTE(v166[0]), v109);
              BOOL v103 = SLOBYTE(v166[0]) - v109 < 0;
              if (SLOBYTE(v166[0]) <= v109) {
                goto LABEL_92;
              }
LABEL_73:
              __break(1u);
LABEL_74:
              if (v103 == v104) {
                goto LABEL_98;
              }
LABEL_76:
              int v110 = sub_25704AD20();
              uint64_t v96 = ((uint64_t (*)(uint64_t, void))v10)(v21, MEMORY[0x263F8E5C0]);
              if (SLODWORD(v166[0]) <= v110) {
                goto LABEL_99;
              }
LABEL_77:
              __break(1u);
LABEL_78:
              uint64_t v111 = *(void *)(*(void *)(v164 + 24) + 16);
              uint64_t v112 = swift_getAssociatedTypeWitness();
              v157 = &v156;
              MEMORY[0x270FA5388](v112);
              uint64_t v114 = (char *)&v156 - v113;
              uint64_t v159 = v111;
              swift_getAssociatedConformanceWitness();
              v158 = v114;
              uint64_t v115 = sub_25704B210();
              MEMORY[0x270FA5388](v115);
              sub_25704B1C0();
              LOBYTE(v111) = sub_25704A6D0();
              uint64_t v116 = v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
              MEMORY[0x270FA5388](v116);
              uint64_t v117 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, uint64_t, void))(v10 + 32))(v117, v21, MEMORY[0x263F8E5C0]);
              if (v111) {
                break;
              }
              uint64_t v21 = *(void *)&v166[0];
              uint64_t v118 = sub_25704AD20();
              v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
              BOOL v101 = __OFSUB__(v118, v21);
              BOOL v100 = v118 - v21 < 0;
              if (v118 >= v21) {
                goto LABEL_87;
              }
LABEL_69:
              __break(1u);
LABEL_70:
              if (v100 == v101)
              {
                uint64_t v36 = ((uint64_t (*)(uint64_t, void))v10)(v21, MEMORY[0x263F8E5C0]);
                goto LABEL_92;
              }
            }
            v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
            __break(1u);
LABEL_114:
            ((void (*)(char *, void))v10)(v117, MEMORY[0x263F8E5C0]);
            __break(1u);
LABEL_115:
            ((void (*)(char *, void))v10)(v117, MEMORY[0x263F8E5C0]);
            __break(1u);
            goto LABEL_116;
          }
        }
        else
        {
          char v99 = sub_25704AD40();
          uint64_t v37 = sub_25704AD30();
          BOOL v101 = __OFSUB__(v37, 8);
          BOOL v100 = v37 - 8 < 0;
          if ((v99 & 1) == 0) {
            goto LABEL_70;
          }
          if (v37 <= 8)
          {
            uint64_t v119 = *(void *)(*(void *)(v164 + 24) + 16);
            uint64_t v120 = swift_getAssociatedTypeWitness();
            v157 = &v156;
            MEMORY[0x270FA5388](v120);
            v122 = (char *)&v156 - v121;
            uint64_t v159 = v119;
            swift_getAssociatedConformanceWitness();
            v158 = v122;
            uint64_t v123 = sub_25704B210();
            MEMORY[0x270FA5388](v123);
            sub_25704B1C0();
            LOBYTE(v119) = sub_25704A6D0();
            uint64_t v124 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
            MEMORY[0x270FA5388](v124);
            uint64_t v117 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
            ((void (*)(char *, char *, void))v163[4])(v117, v117, MEMORY[0x263F8E5C0]);
            if (v119) {
              goto LABEL_114;
            }
            uint64_t v21 = SLOBYTE(v166[0]);
            char v125 = sub_25704AD20();
            uint64_t v36 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
            BOOL v104 = __OFSUB__(v21, v125);
            BOOL v103 = (int)v21 - v125 < 0;
            if ((int)v21 > v125) {
              goto LABEL_73;
            }
            goto LABEL_92;
          }
        }
        MEMORY[0x270FA5388](v37);
        sub_256FC9990();
        sub_25704AD10();
        LODWORD(v159) = sub_25704A6D0();
        uint64_t v106 = MEMORY[0x263F8E5C0];
        ((void (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
        uint64_t v36 = ((uint64_t (*)(char *, uint64_t))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v106);
        if (v159) {
          goto LABEL_73;
        }
LABEL_92:
        MEMORY[0x270FA5388](v36);
        uint64_t v21 = (uint64_t)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v140 = MEMORY[0x263F8E5C0];
        ((void (*)(uint64_t, char *, void))v15)(v21, v14, MEMORY[0x263F8E5C0]);
        LOBYTE(v166[0]) = 127;
        uint64_t v141 = sub_25704AD40();
        if (v141)
        {
          MEMORY[0x270FA5388](v141);
          v11 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
          sub_256FC9990();
          sub_25704AD10();
          char v142 = sub_25704A6D0();
          unint64_t v143 = (unint64_t)(v163 + 1);
          uint64_t v144 = MEMORY[0x263F8E5C0];
          ((void (*)(char *, void))v10)(v11, MEMORY[0x263F8E5C0]);
          ((void (*)(uint64_t, uint64_t))v10)(v21, v144);
        }
        else
        {
          LOBYTE(v165) = 127;
          MEMORY[0x270FA5388](v141);
          v145 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v146 = ((uint64_t (*)(char *, char *, uint64_t))v163[4])(v145, v145, v140);
          uint64_t v21 = (uint64_t)&v156;
          MEMORY[0x270FA5388](v146);
          v11 = v145;
          sub_256FC9990();
          sub_25704AD10();
          char v142 = sub_25704A6D0();
          unint64_t v143 = (unint64_t)(v163 + 1);
          uint64_t v147 = MEMORY[0x263F8E5C0];
          ((void (*)(char *, void))v10)(v145, MEMORY[0x263F8E5C0]);
          ((void (*)(char *, uint64_t))v10)(v145, v147);
        }
        if ((v142 & 1) == 0)
        {
          char v15 = (void (*)(void))(v143 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          uint64_t v148 = *(void *)v14;
          ((void (*)(char *, void))v10)(v14, MEMORY[0x263F8E5C0]);
          LOBYTE(v166[0]) = v148;
          uint64_t v28 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
          if (v28) {
            goto LABEL_104;
          }
          __break(1u);
LABEL_98:
          uint64_t v96 = ((uint64_t (*)(uint64_t, void))v10)(v21, MEMORY[0x263F8E5C0]);
          goto LABEL_99;
        }
        __break(1u);
        goto LABEL_107;
      case 4:
        BOOL v89 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
        v162 = &v156;
        uint64_t v90 = *(v5 - 1);
        v11 = *(char **)(v90 + 64);
        MEMORY[0x270FA5388](v89);
        unint64_t v91 = (unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v14 = (char *)&v156 - v91;
        v163 = (uint64_t *)v90;
        uint64_t v92 = *(void (**)(void))(v90 + 16);
        v13 = (char *)(v90 + 16);
        char v15 = v92;
        v92((char *)&v156 - v91);
        uint64_t v93 = sub_25704AD40();
        char v94 = v93;
        v161 = &v156;
        MEMORY[0x270FA5388](v93);
        ((void (*)(char *, char *, void))v92)((char *)&v156 - v91, (char *)&v156 - v91, MEMORY[0x263F8E5C0]);
        if ((v94 & 1) == 0)
        {
          uint64_t v10 = v163[1];
          uint64_t v96 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - v91, MEMORY[0x263F8E5C0]);
          goto LABEL_99;
        }
        uint64_t v95 = sub_25704AD30();
        v19 = (uint64_t (*)(char *, uint64_t))(v163 + 1);
        uint64_t v10 = v163[1];
        uint64_t v96 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - v91, MEMORY[0x263F8E5C0]);
        if (v95 <= 32) {
          goto LABEL_99;
        }
        v160 = &v156;
        MEMORY[0x270FA5388](v96);
        uint64_t v21 = (uint64_t)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(uint64_t, char *, void))v15)(v21, (char *)&v156 - v91, MEMORY[0x263F8E5C0]);
        LODWORD(v166[0]) = 0x80000000;
        if (sub_25704AD40())
        {
          uint64_t v97 = sub_25704AD30();
          if (v97 < 32) {
            goto LABEL_76;
          }
        }
        else
        {
          char v102 = sub_25704AD40();
          uint64_t v97 = sub_25704AD30();
          BOOL v104 = __OFSUB__(v97, 32);
          BOOL v103 = v97 - 32 < 0;
          if ((v102 & 1) == 0) {
            goto LABEL_74;
          }
          if (v97 <= 32)
          {
            uint64_t v126 = *(void *)(*(void *)(v164 + 24) + 16);
            uint64_t v127 = swift_getAssociatedTypeWitness();
            v157 = &v156;
            MEMORY[0x270FA5388](v127);
            v129 = (char *)&v156 - v128;
            uint64_t v159 = v126;
            swift_getAssociatedConformanceWitness();
            v158 = v129;
            uint64_t v130 = sub_25704B210();
            MEMORY[0x270FA5388](v130);
            sub_25704B1C0();
            LOBYTE(v126) = sub_25704A6D0();
            uint64_t v131 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
            MEMORY[0x270FA5388](v131);
            uint64_t v117 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
            ((void (*)(char *, char *, void))v163[4])(v117, v117, MEMORY[0x263F8E5C0]);
            if (v126) {
              goto LABEL_115;
            }
            uint64_t v21 = LODWORD(v166[0]);
            int v132 = sub_25704AD20();
            uint64_t v96 = ((uint64_t (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
            if ((int)v21 > v132) {
              goto LABEL_77;
            }
LABEL_99:
            MEMORY[0x270FA5388](v96);
            uint64_t v149 = MEMORY[0x263F8E5C0];
            ((void (*)(char *, char *, void))v15)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14, MEMORY[0x263F8E5C0]);
            LODWORD(v166[0]) = 0x7FFFFFFF;
            uint64_t v150 = sub_25704AD40();
            if (v150)
            {
              MEMORY[0x270FA5388](v150);
              sub_256FAB5EC();
              sub_25704AD10();
              char v151 = sub_25704A6D0();
              uint64_t v152 = MEMORY[0x263F8E5C0];
              ((void (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
              ((void (*)(char *, uint64_t))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v152);
            }
            else
            {
              LODWORD(v165) = 0x7FFFFFFF;
              MEMORY[0x270FA5388](v150);
              v153 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v154 = ((uint64_t (*)(char *, char *, uint64_t))v163[4])(v153, v153, v149);
              MEMORY[0x270FA5388](v154);
              sub_256FAB5EC();
              sub_25704AD10();
              char v151 = sub_25704A6D0();
              uint64_t v155 = MEMORY[0x263F8E5C0];
              ((void (*)(char *, void))v10)(v153, MEMORY[0x263F8E5C0]);
              ((void (*)(char *, uint64_t))v10)(v153, v155);
            }
            if ((v151 & 1) == 0)
            {
              ((void (*)(char *, void))v10)(v14, MEMORY[0x263F8E5C0]);
              mlx_array_from_int();
            }
LABEL_107:
            __break(1u);
            goto LABEL_108;
          }
        }
        MEMORY[0x270FA5388](v97);
        sub_256FAB5EC();
        sub_25704AD10();
        LODWORD(v159) = sub_25704A6D0();
        uint64_t v107 = MEMORY[0x263F8E5C0];
        ((void (*)(char *, void))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
        uint64_t v96 = ((uint64_t (*)(char *, uint64_t))v10)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v107);
        if (v159) {
          goto LABEL_77;
        }
        goto LABEL_99;
      case 5:
        goto LABEL_118;
      case 6:
        v80 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
        uint64_t v81 = *(v5 - 1);
        MEMORY[0x270FA5388](v80);
        char v83 = (char *)&v156 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v81 + 16))(v83);
        if (sub_25704AD40()) {
          sub_25704AD20();
        }
        (*(void (**)(char *, void))(v81 + 8))(v83, MEMORY[0x263F8E5C0]);
        mlx_array_from_float();
      default:
        v9 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v5);
        v163 = &v156;
        uint64_t v10 = *(v5 - 1);
        v11 = *(char **)(v10 + 64);
        MEMORY[0x270FA5388](v9);
        unint64_t v12 = (unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        v13 = (char *)&v156 - v12;
        uint64_t v14 = (char *)(v10 + 16);
        char v15 = *(void (**)(void))(v10 + 16);
        v15((char *)&v156 - v12);
        uint64_t v16 = sub_25704AD40();
        char v17 = v16;
        v162 = &v156;
        MEMORY[0x270FA5388](v16);
        ((void (*)(char *, char *, void))v15)((char *)&v156 - v12, (char *)&v156 - v12, MEMORY[0x263F8E5C0]);
        if ((v17 & 1) == 0)
        {
          v19 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
          v19((char *)&v156 - v12, MEMORY[0x263F8E5C0]);
          goto LABEL_87;
        }
        uint64_t v18 = sub_25704AD30();
        v19 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
        uint64_t v20 = v19((char *)&v156 - v12, MEMORY[0x263F8E5C0]);
        if (v18 <= 64) {
          goto LABEL_87;
        }
        v160 = &v156;
        v161 = (uint64_t *)(v10 + 8);
        MEMORY[0x270FA5388](v20);
        uint64_t v21 = (uint64_t)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(uint64_t, char *, void))v15)(v21, (char *)&v156 - v12, MEMORY[0x263F8E5C0]);
        *(void *)&v166[0] = 0x8000000000000000;
        if (sub_25704AD40())
        {
          uint64_t v22 = sub_25704AD30();
          if (v22 < 64)
          {
LABEL_68:
            uint64_t v108 = sub_25704AD20();
            v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
            BOOL v101 = __OFSUB__(v108, *(void *)&v166[0]);
            BOOL v100 = v108 - *(void *)&v166[0] < 0;
            if (v108 < *(uint64_t *)&v166[0]) {
              goto LABEL_69;
            }
LABEL_87:
            uint64_t v133 = sub_25704AD40();
            if ((v133 & 1) == 0)
            {
              v161 = &v156;
              MEMORY[0x270FA5388](v133);
              uint64_t v134 = MEMORY[0x263F8E5C0];
              ((void (*)(char *, char *, void))v15)((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13, MEMORY[0x263F8E5C0]);
              uint64_t v135 = sub_25704AD40();
              if (v135)
              {
                sub_25704AD20();
                v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
              }
              else
              {
                *(void *)&v166[0] = 0x7FFFFFFFFFFFFFFFLL;
                MEMORY[0x270FA5388](v135);
                v136 = (char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
                uint64_t v137 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v136, v136, v134);
                MEMORY[0x270FA5388](v137);
                sub_256FC9A38();
                sub_25704AD10();
                char v138 = sub_25704A6D0();
                uint64_t v139 = MEMORY[0x263F8E5C0];
                v19(v136, MEMORY[0x263F8E5C0]);
                v19(v136, v139);
                if (v138) {
                  __break(1u);
                }
              }
            }
            v19(v13, MEMORY[0x263F8E5C0]);
            mlx_array_from_BOOL();
          }
        }
        else
        {
          char v98 = sub_25704AD40();
          uint64_t v22 = sub_25704AD30();
          if ((v98 & 1) == 0)
          {
            if (v22 >= 64)
            {
              v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
              goto LABEL_87;
            }
            goto LABEL_68;
          }
          if (v22 <= 64) {
            goto LABEL_78;
          }
        }
        MEMORY[0x270FA5388](v22);
        sub_256FC9A38();
        sub_25704AD10();
        LODWORD(v159) = sub_25704A6D0();
        uint64_t v105 = MEMORY[0x263F8E5C0];
        v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E5C0]);
        v19((char *)&v156 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v105);
        if (v159) {
          goto LABEL_69;
        }
        goto LABEL_87;
    }
  }
  v168[0] = a1;
  uint64_t v3 = mlx_array_from_data((uint64_t)v168, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
  if (v3)
  {
    type metadata accessor for MLXArray();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    return v4;
  }
LABEL_116:
  __break(1u);
LABEL_117:
  *(void *)&v166[0] = 0;
  *((void *)&v166[0] + 1) = 0xE000000000000000;
  sub_25704ADF0();
  sub_25704B340();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  sub_25704A850();
  sub_25704A850();
  unint64_t result = sub_25704AFD0();
LABEL_118:
  __break(1u);
  __break(1u);
  return result;
}

void sub_256FC254C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FC2554);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_256FC25F0(char a1, char a2)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  if (a2 == 1)
  {
    LOBYTE(v154[0]) = a1;
    uint64_t v5 = mlx_array_from_data((uint64_t)v154, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
    if (v5)
    {
      type metadata accessor for MLXArray();
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v5;
      return v6;
    }
    goto LABEL_119;
  }
  char v151 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C8);
  uint64_t v7 = MEMORY[0x263F8E778];
  if (swift_dynamicCast())
  {
    unint64_t result = sub_256FA81EC(v152, (uint64_t)v154);
    switch(v9)
    {
      case 1:
        goto LABEL_121;
      case 2:
        uint64_t v23 = v155;
        uint64_t v24 = __swift_project_boxed_opaque_existential_1(v154, v155);
        uint64_t v25 = *(void *)(v23 - 8);
        MEMORY[0x270FA5388](v24);
        uint64_t v27 = (char *)v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v25 + 16))(v27);
        sub_256FC9BDC();
        sub_25704AF70();
        if (BYTE4(v152[0])) {
          goto LABEL_120;
        }
        (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v23);
        uint64_t v10 = mlx_array_from_data((uint64_t)v152, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
        if (v10) {
          goto LABEL_112;
        }
        __break(1u);
LABEL_16:
        uint64_t v28 = v155;
        uint64_t v29 = __swift_project_boxed_opaque_existential_1(v154, v155);
        uint64_t v30 = *(void *)(v28 - 8);
        MEMORY[0x270FA5388](v29);
        uint64_t v32 = (char *)v143 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v30 + 16))(v32);
        sub_256FC9B34();
        sub_25704AF70();
        if ((BYTE4(v152[0]) & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v28);
          mlx_array_from_int();
        }
        goto LABEL_120;
      case 3:
        uint64_t v48 = v155;
        uint64_t v49 = __swift_project_boxed_opaque_existential_1(v154, v155);
        uint64_t v50 = *(void *)(v48 - 8);
        MEMORY[0x270FA5388](v49);
        char v52 = (char *)v143 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v50 + 16))(v52);
        sub_256FC9B88();
        uint64_t v7 = MEMORY[0x263F8E498];
        sub_25704AF70();
        if (BYTE1(v152[0])) {
          goto LABEL_120;
        }
        (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v48);
        uint64_t v10 = mlx_array_from_data((uint64_t)v152, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
        if (v10) {
          goto LABEL_112;
        }
        __break(1u);
        goto LABEL_29;
      case 4:
        goto LABEL_16;
      case 5:
        uint64_t v60 = v155;
        uint64_t v61 = __swift_project_boxed_opaque_existential_1(v154, v155);
        uint64_t v62 = *(void *)(v60 - 8);
        MEMORY[0x270FA5388](v61);
        uint64_t v64 = (char *)v143 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v62 + 16))(v64);
        sub_256FC9AE0();
        sub_25704AF70();
        if (BYTE8(v152[0])) {
          goto LABEL_120;
        }
        (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v60);
        uint64_t v10 = mlx_array_from_data((uint64_t)v152, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
        if (!v10)
        {
          __break(1u);
LABEL_37:
          uint64_t v65 = __swift_project_boxed_opaque_existential_1(v154, v155);
          MEMORY[0x270FA5388](v65);
          (*(void (**)(char *))(v67 + 16))((char *)v143 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0));
          sub_256FC9A8C();
          sub_25704A580();
          mlx_array_from_float();
        }
        goto LABEL_112;
      case 6:
        goto LABEL_37;
      default:
        __swift_project_boxed_opaque_existential_1(v154, v155);
        sub_25704A6A0();
        mlx_array_from_BOOL();
    }
  }
  uint64_t v153 = 0;
  memset(v152, 0, sizeof(v152));
  sub_256FB11E8((uint64_t)v152, &qword_269FDC8E8);
  uint64_t v155 = v7;
  unint64_t result = sub_256FC99E4();
  unint64_t v156 = result;
  LOBYTE(v154[0]) = a1;
  uint64_t v10 = result;
  switch(v11)
  {
    case 1:
      goto LABEL_121;
    case 2:
      uint64_t v33 = __swift_project_boxed_opaque_existential_1(v154, v7);
      uint64_t v34 = *(void *)(v7 - 8);
      uint64_t v21 = *(char **)(v34 + 64);
      MEMORY[0x270FA5388](v33);
      uint64_t v14 = (unsigned __int8 *)v143 - ((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(unsigned __int8 *))(v34 + 16))(v14);
      if ((sub_25704AD40() & 1) == 0)
      {
        v80 = *(char **)(v34 + 8);
        uint64_t v38 = v34 + 8;
        uint64_t v37 = v80;
        goto LABEL_48;
      }
      v2 = *(char **)(*(void *)(v10 + 24) + 16);
      uint64_t AssociatedTypeWitness = (void (*)(char *))swift_getAssociatedTypeWitness();
      uint64_t v150 = v143;
      MEMORY[0x270FA5388](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v35 = sub_25704B210();
      MEMORY[0x270FA5388](v35);
      uint64_t v21 = (char *)v143 - ((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_25704B1C0();
      char v36 = sub_25704A6E0();
      uint64_t v39 = *(char **)(v34 + 8);
      uint64_t v38 = v34 + 8;
      uint64_t v37 = v39;
      ((void (*)(char *, void))v39)(v21, MEMORY[0x263F8E778]);
      if (v36)
      {
LABEL_48:
        uint64_t v19 = v38 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        int v81 = *v14;
        ((void (*)(unsigned __int8 *, void))v37)(v14, MEMORY[0x263F8E778]);
        LODWORD(v152[0]) = v81;
        uint64_t v10 = mlx_array_from_data((uint64_t)v152, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
        if (v10) {
          goto LABEL_112;
        }
        __break(1u);
LABEL_50:
        uint64_t v13 = *(void *)(v19 + 8);
        ((void (*)(char *, void))v13)(v37, MEMORY[0x263F8E778]);
        goto LABEL_103;
      }
      unint64_t result = sub_25704AFC0();
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      return result;
    case 3:
LABEL_29:
      uint64_t v53 = __swift_project_boxed_opaque_existential_1(v154, v7);
      uint64_t v150 = v143;
      uint64_t v19 = *(void *)(v7 - 8);
      v2 = *(char **)(v19 + 64);
      MEMORY[0x270FA5388](v53);
      unint64_t v54 = (unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v21 = (char *)v143 - v54;
      uint64_t v14 = (unsigned __int8 *)(v19 + 16);
      uint64_t AssociatedTypeWitness = *(void (**)(char *))(v19 + 16);
      AssociatedTypeWitness((char *)v143 - v54);
      uint64_t v55 = sub_25704AD40();
      char v56 = v55;
      uint64_t v149 = v143;
      MEMORY[0x270FA5388](v55);
      uint64_t v37 = (char *)v143 - v54;
      ((void (*)(char *, char *, void))AssociatedTypeWitness)((char *)v143 - v54, (char *)v143 - v54, MEMORY[0x263F8E778]);
      if ((v56 & 1) == 0) {
        goto LABEL_50;
      }
      uint64_t v57 = sub_25704AD30();
      uint64_t v13 = *(void *)(v19 + 8);
      uint64_t v58 = ((uint64_t (*)(char *, void))v13)((char *)v143 - v54, MEMORY[0x263F8E778]);
      if (v57 <= 8) {
        goto LABEL_103;
      }
      uint64_t v147 = v143;
      uint64_t v148 = (char *)(v19 + 8);
      MEMORY[0x270FA5388](v58);
      uint64_t v41 = (uint64_t)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(uint64_t, char *, void))AssociatedTypeWitness)(v41, (char *)v143 - v54, MEMORY[0x263F8E778]);
      LOBYTE(v152[0]) = 0x80;
      if (sub_25704AD40())
      {
        uint64_t v59 = sub_25704AD30();
        if (v59 < 8)
        {
          while (1)
          {
            char v101 = sub_25704AD20();
            ((void (*)(uint64_t, void))v13)(v41, MEMORY[0x263F8E778]);
            BOOL v87 = __OFSUB__(SLOBYTE(v152[0]), v101);
            BOOL v86 = SLOBYTE(v152[0]) - v101 < 0;
            if (SLOBYTE(v152[0]) <= v101) {
              goto LABEL_103;
            }
LABEL_81:
            __break(1u);
LABEL_82:
            if (v86 == v87) {
              goto LABEL_109;
            }
LABEL_84:
            uint64_t v102 = sub_25704AD20();
            ((void (*)(char *, void))AssociatedTypeWitness)(v21, MEMORY[0x263F8E778]);
            BOOL v90 = __OFSUB__(v102, *(void *)&v152[0]);
            BOOL v89 = v102 - *(void *)&v152[0] < 0;
            if (v102 >= *(uint64_t *)&v152[0]) {
              goto LABEL_110;
            }
LABEL_85:
            __break(1u);
LABEL_86:
            if (v89 == v90)
            {
              ((void (*)(char *, void))AssociatedTypeWitness)(v21, MEMORY[0x263F8E778]);
              goto LABEL_111;
            }
LABEL_88:
            uint64_t v10 = sub_25704AD20();
            ((void (*)(char *, void))AssociatedTypeWitness)(v21, MEMORY[0x263F8E778]);
            if (v10 >= *(uint64_t *)&v152[0]) {
              goto LABEL_111;
            }
LABEL_89:
            __break(1u);
LABEL_90:
            BOOL v103 = *(void **)(*(void *)(v10 + 24) + 16);
            uint64_t v104 = swift_getAssociatedTypeWitness();
            uint64_t v144 = v143;
            MEMORY[0x270FA5388](v104);
            uint64_t v106 = (char *)v143 - v105;
            uint64_t v146 = v103;
            swift_getAssociatedConformanceWitness();
            v145 = v106;
            uint64_t v107 = sub_25704B210();
            uint64_t v108 = (char *)v143;
            MEMORY[0x270FA5388](v107);
            sub_25704B1C0();
            LOBYTE(v103) = sub_25704A6D0();
            uint64_t v109 = ((uint64_t (*)(char *, void))AssociatedTypeWitness)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E778]);
            uint64_t v41 = (uint64_t)v143;
            MEMORY[0x270FA5388](v109);
            v2 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
            int v110 = *(void (**)(char *, char *, void))(v13 + 32);
            v13 += 32;
            v110(v2, v21, MEMORY[0x263F8E778]);
            if (v103) {
              break;
            }
            uint64_t v21 = (char *)LODWORD(v152[0]);
            int v111 = sub_25704AD20();
            ((void (*)(char *, void))AssociatedTypeWitness)(v2, MEMORY[0x263F8E778]);
            BOOL v84 = __OFSUB__(v21, v111);
            BOOL v83 = (int)v21 - v111 < 0;
            if ((int)v21 <= v111) {
              goto LABEL_102;
            }
LABEL_77:
            __break(1u);
LABEL_78:
            if (v83 == v84)
            {
              ((void (*)(uint64_t, void))v13)(v41, MEMORY[0x263F8E778]);
              goto LABEL_103;
            }
          }
          ((void (*)(char *, void))AssociatedTypeWitness)(v2, MEMORY[0x263F8E778]);
          __break(1u);
          goto LABEL_116;
        }
      }
      else
      {
        char v82 = sub_25704AD40();
        uint64_t v59 = sub_25704AD30();
        BOOL v84 = __OFSUB__(v59, 8);
        BOOL v83 = v59 - 8 < 0;
        if ((v82 & 1) == 0) {
          goto LABEL_78;
        }
        if (v59 <= 8)
        {
          uint64_t v146 = *(void **)(*(void *)(v10 + 24) + 16);
          uint64_t v112 = swift_getAssociatedTypeWitness();
          uint64_t v144 = v143;
          MEMORY[0x270FA5388](v112);
          uint64_t v114 = (char *)v143 - v113;
          swift_getAssociatedConformanceWitness();
          v145 = v114;
          uint64_t v115 = sub_25704B210();
          v143[1] = v143;
          MEMORY[0x270FA5388](v115);
          sub_25704B1C0();
          LOBYTE(v114) = sub_25704A6D0();
          uint64_t v116 = ((uint64_t (*)(char *, void))v13)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E778]);
          uint64_t v146 = v143;
          MEMORY[0x270FA5388](v116);
          uint64_t v108 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, char *, void))(v19 + 32))(v108, v108, MEMORY[0x263F8E778]);
          if (v114)
          {
LABEL_116:
            ((void (*)(char *, void))v13)(v108, MEMORY[0x263F8E778]);
            __break(1u);
            goto LABEL_117;
          }
          int v117 = SLOBYTE(v152[0]);
          char v118 = sub_25704AD20();
          ((void (*)(char *, void))v13)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E778]);
          BOOL v87 = __OFSUB__(v117, v118);
          BOOL v86 = v117 - v118 < 0;
          if (v117 > v118) {
            goto LABEL_81;
          }
LABEL_103:
          uint64_t v134 = sub_25704AD40();
          if ((v134 & 1) == 0)
          {
            uint64_t v148 = (char *)v143;
            MEMORY[0x270FA5388](v134);
            uint64_t v135 = MEMORY[0x263F8E778];
            ((void (*)(char *, char *, void))AssociatedTypeWitness)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), v21, MEMORY[0x263F8E778]);
            uint64_t v136 = sub_25704AD40();
            if (v136)
            {
              sub_25704AD20();
              ((void (*)(char *, void))v13)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E778]);
            }
            else
            {
              uint64_t v14 = (unsigned __int8 *)v143;
              LOBYTE(v152[0]) = 127;
              MEMORY[0x270FA5388](v136);
              uint64_t v137 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v138 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v137, v137, v135);
              MEMORY[0x270FA5388](v138);
              sub_256FC9990();
              sub_25704AD10();
              char v139 = sub_25704A6D0();
              uint64_t AssociatedTypeWitness = (void (*)(char *))(v19 + 8);
              uint64_t v140 = MEMORY[0x263F8E778];
              ((void (*)(char *, void))v13)(v137, MEMORY[0x263F8E778]);
              ((void (*)(char *, uint64_t))v13)(v137, v140);
              if (v139) {
                __break(1u);
              }
            }
          }
          char v141 = *v21;
          ((void (*)(char *, void))v13)(v21, MEMORY[0x263F8E778]);
          LOBYTE(v152[0]) = v141;
          uint64_t v10 = mlx_array_from_data((uint64_t)v152, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
          if (!v10)
          {
            __break(1u);
LABEL_109:
            ((void (*)(char *, void))AssociatedTypeWitness)(v21, MEMORY[0x263F8E778]);
LABEL_110:
            ((void (*)(unsigned __int8 *, void))AssociatedTypeWitness)(v14, MEMORY[0x263F8E778]);
            mlx_array_from_BOOL();
          }
LABEL_112:
          type metadata accessor for MLXArray();
          uint64_t v6 = swift_allocObject();
          *(void *)(v6 + 16) = v10;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v154);
          return v6;
        }
      }
      uint64_t v146 = v143;
      MEMORY[0x270FA5388](v59);
      sub_256FC9990();
      sub_25704AD10();
      LODWORD(v145) = sub_25704A6D0();
      uint64_t v97 = MEMORY[0x263F8E778];
      ((void (*)(char *, void))v13)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E778]);
      ((void (*)(char *, uint64_t))v13)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), v97);
      if (v145) {
        goto LABEL_81;
      }
      goto LABEL_103;
    case 4:
      uint64_t v40 = __swift_project_boxed_opaque_existential_1(v154, v7);
      uint64_t v150 = v143;
      uint64_t v13 = *(void *)(v7 - 8);
      v2 = *(char **)(v13 + 64);
      MEMORY[0x270FA5388](v40);
      uint64_t v14 = (unsigned __int8 *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v41 = v13 + 16;
      uint64_t v42 = *(void (**)(unsigned __int8 *))(v13 + 16);
      v42(v14);
      uint64_t v43 = sub_25704AD40();
      char v44 = v43;
      uint64_t v149 = v143;
      MEMORY[0x270FA5388](v43);
      ((void (*)(unsigned __int8 *, unsigned __int8 *, void))v42)(v14, v14, MEMORY[0x263F8E778]);
      if ((v44 & 1) == 0)
      {
        uint64_t AssociatedTypeWitness = *(void (**)(char *))(v13 + 8);
        ((void (*)(unsigned __int8 *, void))AssociatedTypeWitness)(v14, MEMORY[0x263F8E778]);
        goto LABEL_102;
      }
      uint64_t v45 = sub_25704AD30();
      uint64_t AssociatedTypeWitness = *(void (**)(char *))(v13 + 8);
      uint64_t v19 = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v148 = (char *)(v13 + 8);
      uint64_t v46 = ((uint64_t (*)(unsigned __int8 *, void))AssociatedTypeWitness)(v14, MEMORY[0x263F8E778]);
      if (v45 <= 32) {
        goto LABEL_102;
      }
      uint64_t v147 = v143;
      MEMORY[0x270FA5388](v46);
      uint64_t v21 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, unsigned __int8 *, void))v42)(v21, v14, MEMORY[0x263F8E778]);
      LODWORD(v152[0]) = 0x80000000;
      if (sub_25704AD40())
      {
        uint64_t v47 = sub_25704AD30();
        if (v47 < 32)
        {
LABEL_76:
          int v100 = sub_25704AD20();
          ((void (*)(char *, void))AssociatedTypeWitness)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E778]);
          BOOL v84 = __OFSUB__(v152[0], v100);
          BOOL v83 = LODWORD(v152[0]) - v100 < 0;
          if (SLODWORD(v152[0]) > v100) {
            goto LABEL_77;
          }
LABEL_102:
          ((void (*)(unsigned __int8 *, void))AssociatedTypeWitness)(v14, MEMORY[0x263F8E778]);
          mlx_array_from_int();
        }
      }
      else
      {
        uint64_t v41 = sub_25704AD40();
        uint64_t v47 = sub_25704AD30();
        if ((v41 & 1) == 0)
        {
          if (v47 >= 32)
          {
            ((void (*)(char *, void))AssociatedTypeWitness)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E778]);
            goto LABEL_102;
          }
          goto LABEL_76;
        }
        if (v47 <= 32) {
          goto LABEL_90;
        }
      }
      uint64_t v41 = (uint64_t)v143;
      MEMORY[0x270FA5388](v47);
      sub_256FAB5EC();
      sub_25704AD10();
      char v94 = sub_25704A6D0();
      uint64_t v95 = MEMORY[0x263F8E778];
      uint64_t v96 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
      v2 = v148;
      ((void (*)(char *, void))AssociatedTypeWitness)(v96, MEMORY[0x263F8E778]);
      ((void (*)(char *, uint64_t))AssociatedTypeWitness)(v21, v95);
      if (v94) {
        goto LABEL_77;
      }
      goto LABEL_102;
    case 5:
      uint64_t v68 = __swift_project_boxed_opaque_existential_1(v154, v7);
      uint64_t v150 = v143;
      uint64_t v13 = *(void *)(v7 - 8);
      v2 = *(char **)(v13 + 64);
      MEMORY[0x270FA5388](v68);
      uint64_t v14 = (unsigned __int8 *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v69 = *(void (**)(unsigned __int8 *))(v13 + 16);
      v69(v14);
      uint64_t v70 = sub_25704AD40();
      char v71 = v70;
      uint64_t v149 = v143;
      MEMORY[0x270FA5388](v70);
      ((void (*)(unsigned __int8 *, unsigned __int8 *, void))v69)(v14, v14, MEMORY[0x263F8E778]);
      if ((v71 & 1) == 0)
      {
        uint64_t AssociatedTypeWitness = *(void (**)(char *))(v13 + 8);
        ((void (*)(unsigned __int8 *, void))AssociatedTypeWitness)(v14, MEMORY[0x263F8E778]);
        goto LABEL_111;
      }
      uint64_t v72 = sub_25704AD30();
      uint64_t AssociatedTypeWitness = *(void (**)(char *))(v13 + 8);
      uint64_t v19 = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v148 = (char *)(v13 + 8);
      uint64_t v73 = ((uint64_t (*)(unsigned __int8 *, void))AssociatedTypeWitness)(v14, MEMORY[0x263F8E778]);
      if (v72 <= 64) {
        goto LABEL_111;
      }
      uint64_t v147 = v143;
      MEMORY[0x270FA5388](v73);
      uint64_t v21 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, unsigned __int8 *, void))v69)(v21, v14, MEMORY[0x263F8E778]);
      *(void *)&v152[0] = 0x8000000000000000;
      if (sub_25704AD40())
      {
        uint64_t v74 = sub_25704AD30();
        if (v74 < 64) {
          goto LABEL_88;
        }
      }
      else
      {
        char v88 = sub_25704AD40();
        uint64_t v74 = sub_25704AD30();
        BOOL v90 = __OFSUB__(v74, 64);
        BOOL v89 = v74 - 64 < 0;
        if ((v88 & 1) == 0) {
          goto LABEL_86;
        }
        if (v74 <= 64)
        {
          uint64_t v127 = *(void **)(*(void *)(v10 + 24) + 16);
          uint64_t v128 = swift_getAssociatedTypeWitness();
          uint64_t v144 = v143;
          MEMORY[0x270FA5388](v128);
          uint64_t v130 = (char *)v143 - v129;
          uint64_t v146 = v127;
          swift_getAssociatedConformanceWitness();
          v145 = v130;
          uint64_t v131 = sub_25704B210();
          MEMORY[0x270FA5388](v131);
          sub_25704B1C0();
          LOBYTE(v127) = sub_25704A6D0();
          uint64_t v132 = ((uint64_t (*)(char *, void))AssociatedTypeWitness)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E778]);
          MEMORY[0x270FA5388](v132);
          v2 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v133 = *(void (**)(char *, char *, void))(v13 + 32);
          v13 += 32;
          v133(v2, v21, MEMORY[0x263F8E778]);
          if (v127) {
            goto LABEL_118;
          }
          uint64_t v21 = *(char **)&v152[0];
          uint64_t v10 = sub_25704AD20();
          ((void (*)(char *, void))AssociatedTypeWitness)(v2, MEMORY[0x263F8E778]);
          if (v10 < (uint64_t)v21) {
            goto LABEL_89;
          }
LABEL_111:
          uint64_t v142 = *v14;
          ((void (*)(unsigned __int8 *, void))AssociatedTypeWitness)(v14, MEMORY[0x263F8E778]);
          *(void *)&v152[0] = v142;
          unint64_t result = mlx_array_from_data((uint64_t)v152, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
          uint64_t v10 = result;
          if (!result) {
            goto LABEL_122;
          }
          goto LABEL_112;
        }
      }
      MEMORY[0x270FA5388](v74);
      sub_256FC993C();
      sub_25704AD10();
      uint64_t v10 = sub_25704A6D0();
      uint64_t v98 = MEMORY[0x263F8E778];
      char v99 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
      v2 = v148;
      ((void (*)(char *, void))AssociatedTypeWitness)(v99, MEMORY[0x263F8E778]);
      ((void (*)(char *, uint64_t))AssociatedTypeWitness)(v21, v98);
      if (v10) {
        goto LABEL_89;
      }
      goto LABEL_111;
    case 6:
      uint64_t v75 = __swift_project_boxed_opaque_existential_1(v154, v7);
      uint64_t v76 = *(void *)(v7 - 8);
      MEMORY[0x270FA5388](v75);
      uint64_t v78 = (unsigned __int8 *)v143 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(unsigned __int8 *))(v76 + 16))(v78);
      if (sub_25704AD40()) {
        sub_25704AD20();
      }
      else {
        v79.n128_u8[0] = *v78;
      }
      (*(void (**)(unsigned __int8 *, void, __n128))(v76 + 8))(v78, MEMORY[0x263F8E778], v79);
      mlx_array_from_float();
    default:
      unint64_t v12 = __swift_project_boxed_opaque_existential_1(v154, v7);
      uint64_t v150 = v143;
      uint64_t v13 = *(void *)(v7 - 8);
      v2 = *(char **)(v13 + 64);
      MEMORY[0x270FA5388](v12);
      uint64_t v14 = (unsigned __int8 *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
      char v15 = *(void (**)(unsigned __int8 *))(v13 + 16);
      v15(v14);
      uint64_t v16 = sub_25704AD40();
      char v17 = v16;
      uint64_t v149 = v143;
      MEMORY[0x270FA5388](v16);
      ((void (*)(unsigned __int8 *, unsigned __int8 *, void))v15)(v14, v14, MEMORY[0x263F8E778]);
      if ((v17 & 1) == 0)
      {
        uint64_t AssociatedTypeWitness = *(void (**)(char *))(v13 + 8);
        ((void (*)(unsigned __int8 *, void))AssociatedTypeWitness)(v14, MEMORY[0x263F8E778]);
        goto LABEL_110;
      }
      uint64_t v18 = sub_25704AD30();
      uint64_t AssociatedTypeWitness = *(void (**)(char *))(v13 + 8);
      uint64_t v19 = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v148 = (char *)(v13 + 8);
      uint64_t v20 = ((uint64_t (*)(unsigned __int8 *, void))AssociatedTypeWitness)(v14, MEMORY[0x263F8E778]);
      if (v18 <= 64) {
        goto LABEL_110;
      }
      uint64_t v147 = v143;
      MEMORY[0x270FA5388](v20);
      uint64_t v21 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, unsigned __int8 *, void))v15)(v21, v14, MEMORY[0x263F8E778]);
      *(void *)&v152[0] = 0x8000000000000000;
      if (sub_25704AD40())
      {
        uint64_t v22 = sub_25704AD30();
        if (v22 < 64) {
          goto LABEL_84;
        }
      }
      else
      {
        char v85 = sub_25704AD40();
        uint64_t v22 = sub_25704AD30();
        BOOL v87 = __OFSUB__(v22, 64);
        BOOL v86 = v22 - 64 < 0;
        if ((v85 & 1) == 0) {
          goto LABEL_82;
        }
        if (v22 <= 64)
        {
          uint64_t v119 = *(void **)(*(void *)(v10 + 24) + 16);
          uint64_t v120 = swift_getAssociatedTypeWitness();
          uint64_t v144 = v143;
          MEMORY[0x270FA5388](v120);
          v122 = (char *)v143 - v121;
          uint64_t v146 = v119;
          swift_getAssociatedConformanceWitness();
          v145 = v122;
          uint64_t v123 = sub_25704B210();
          MEMORY[0x270FA5388](v123);
          sub_25704B1C0();
          LOBYTE(v119) = sub_25704A6D0();
          uint64_t v124 = ((uint64_t (*)(char *, void))AssociatedTypeWitness)((char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E778]);
          MEMORY[0x270FA5388](v124);
          v2 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
          char v125 = *(void (**)(char *, char *, void))(v13 + 32);
          v13 += 32;
          v125(v2, v21, MEMORY[0x263F8E778]);
          if ((v119 & 1) == 0)
          {
            uint64_t v21 = *(char **)&v152[0];
            uint64_t v126 = sub_25704AD20();
            ((void (*)(char *, void))AssociatedTypeWitness)(v2, MEMORY[0x263F8E778]);
            BOOL v90 = __OFSUB__(v126, v21);
            BOOL v89 = v126 - (uint64_t)v21 < 0;
            if (v126 < (uint64_t)v21) {
              goto LABEL_85;
            }
            goto LABEL_110;
          }
LABEL_117:
          ((void (*)(char *, void))AssociatedTypeWitness)(v2, MEMORY[0x263F8E778]);
          __break(1u);
LABEL_118:
          ((void (*)(char *, void))AssociatedTypeWitness)(v2, MEMORY[0x263F8E778]);
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          *(void *)&v152[0] = 0;
          *((void *)&v152[0] + 1) = 0xE000000000000000;
          sub_25704ADF0();
          sub_25704B340();
          sub_25704A850();
          swift_bridgeObjectRelease();
          sub_25704A850();
          sub_25704A850();
          sub_25704A850();
          unint64_t result = sub_25704AFD0();
          goto LABEL_121;
        }
      }
      MEMORY[0x270FA5388](v22);
      sub_256FC9A38();
      sub_25704AD10();
      char v91 = sub_25704A6D0();
      uint64_t v92 = MEMORY[0x263F8E778];
      uint64_t v93 = (char *)v143 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0);
      v2 = v148;
      ((void (*)(char *, void))AssociatedTypeWitness)(v93, MEMORY[0x263F8E778]);
      ((void (*)(char *, uint64_t))AssociatedTypeWitness)(v21, v92);
      if (v91) {
        goto LABEL_85;
      }
      goto LABEL_110;
  }
}

void sub_256FC4E98(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FC4EA0);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_256FC4F3C(int a1, char a2)
{
  uint64_t v171 = *MEMORY[0x263EF8340];
  if (a2 == 2)
  {
    LODWORD(v168[0]) = a1;
    uint64_t v4 = mlx_array_from_data((uint64_t)v168, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
    if (v4)
    {
      type metadata accessor for MLXArray();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v4;
      return v5;
    }
    goto LABEL_125;
  }
  int v165 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C8);
  uint64_t v6 = (void *)MEMORY[0x263F8E8F8];
  if (swift_dynamicCast())
  {
    unint64_t result = sub_256FA81EC(v166, (uint64_t)v168);
    switch(v8)
    {
      case 1:
        uint64_t v25 = (uint64_t)v169;
        uint64_t v26 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
        uint64_t v27 = *(void *)(v25 - 8);
        MEMORY[0x270FA5388](v26);
        uint64_t v29 = (char *)&v156 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v27 + 16))(v29);
        sub_256FC9C30();
        sub_25704AF70();
        if (BYTE1(v166[0])) {
          goto LABEL_126;
        }
        (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v25);
        uint64_t v30 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
        if (v30) {
          goto LABEL_115;
        }
        __break(1u);
LABEL_16:
        uint64_t v31 = (uint64_t)v169;
        uint64_t v32 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
        uint64_t v33 = *(void *)(v31 - 8);
        MEMORY[0x270FA5388](v32);
        uint64_t v35 = (char *)&v156 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v33 + 16))(v35);
        sub_256FC9B34();
        sub_25704AF70();
        if ((BYTE4(v166[0]) & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v31);
          mlx_array_from_int();
        }
        goto LABEL_126;
      case 2:
        goto LABEL_127;
      case 3:
        uint64_t v57 = (uint64_t)v169;
        uint64_t v58 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
        uint64_t v59 = *(void *)(v57 - 8);
        MEMORY[0x270FA5388](v58);
        uint64_t v61 = (char *)&v156 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v59 + 16))(v61);
        sub_256FC9B88();
        uint64_t v6 = (void *)MEMORY[0x263F8E498];
        sub_25704AF70();
        if (BYTE1(v166[0])) {
          goto LABEL_126;
        }
        (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v57);
        uint64_t v30 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
        if (v30) {
          goto LABEL_115;
        }
        __break(1u);
        goto LABEL_31;
      case 4:
        goto LABEL_16;
      case 5:
        uint64_t v71 = (uint64_t)v169;
        uint64_t v72 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
        uint64_t v73 = *(void *)(v71 - 8);
        MEMORY[0x270FA5388](v72);
        uint64_t v75 = (char *)&v156 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v73 + 16))(v75);
        sub_256FC9AE0();
        sub_25704AF70();
        if (BYTE8(v166[0])) {
          goto LABEL_126;
        }
        (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v71);
        uint64_t v30 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
        if (!v30)
        {
          __break(1u);
LABEL_39:
          uint64_t v76 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
          MEMORY[0x270FA5388](v76);
          (*(void (**)(char *))(v78 + 16))((char *)&v156 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0));
          sub_256FC9A8C();
          sub_25704A580();
          mlx_array_from_float();
        }
        goto LABEL_115;
      case 6:
        goto LABEL_39;
      default:
        __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v169);
        sub_25704A6A0();
        mlx_array_from_BOOL();
    }
  }
  uint64_t v167 = 0;
  memset(v166, 0, sizeof(v166));
  sub_256FB11E8((uint64_t)v166, &qword_269FDC8E8);
  v169 = (void (*)(void, void))v6;
  unint64_t result = sub_256FC98E8();
  unint64_t v164 = result;
  unint64_t v170 = result;
  LODWORD(v168[0]) = a1;
  switch(v9)
  {
    case 1:
      char v36 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v6);
      v163 = &v156;
      uint64_t v37 = *(v6 - 1);
      uint64_t v38 = *(void *)(v37 + 64);
      MEMORY[0x270FA5388](v36);
      uint64_t v39 = (int *)((char *)&v156 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v40 = *(void (**)(int *))(v37 + 16);
      v40(v39);
      uint64_t v41 = sub_25704AD40();
      if (v41)
      {
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v162 = &v156;
        MEMORY[0x270FA5388](AssociatedTypeWitness);
        swift_getAssociatedConformanceWitness();
        uint64_t v43 = sub_25704B210();
        MEMORY[0x270FA5388](v43);
        sub_25704B1C0();
        char v44 = sub_25704A6E0();
        uint64_t v41 = (*(uint64_t (**)(char *, void))(v37 + 8))((char *)&v156 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
        if ((v44 & 1) == 0) {
          goto LABEL_118;
        }
      }
      MEMORY[0x270FA5388](v41);
      unint64_t v45 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
      ((void (*)(char *, char *, void))v40)((char *)&v156 - v45, (char *)&v156 - v45, MEMORY[0x263F8E8F8]);
      LOBYTE(v166[0]) = -1;
      uint64_t v46 = sub_25704AD40();
      uint64_t v2 = (uint64_t)&v156;
      MEMORY[0x270FA5388](v46);
      sub_256FC99E4();
      sub_25704AD10();
      char v47 = sub_25704A6D0();
      uint64_t v6 = *(void **)(v37 + 8);
      ((void (*)(char *, void))v6)((char *)&v156 - v45, MEMORY[0x263F8E8F8]);
      if (v47) {
        goto LABEL_118;
      }
      uint64_t v48 = MEMORY[0x263F8E8F8];
      ((void (*)(char *, void))v6)((char *)&v156 - v45, MEMORY[0x263F8E8F8]);
      int v49 = *v39;
      ((void (*)(int *, uint64_t))v6)(v39, v48);
      LOBYTE(v166[0]) = v49;
      uint64_t v30 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
      if (v30) {
        goto LABEL_115;
      }
      __break(1u);
LABEL_23:
      uint64_t v50 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v6);
      v163 = &v156;
      uint64_t v21 = *(v6 - 1);
      unint64_t v12 = *(char **)(v21 + 64);
      MEMORY[0x270FA5388](v50);
      unint64_t v51 = (unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v23 = (char *)&v156 - v51;
      uint64_t v14 = (char *)(v21 + 16);
      uint64_t v20 = *(void (**)(char *))(v21 + 16);
      v20((char *)&v156 - v51);
      uint64_t v52 = sub_25704AD40();
      char v53 = v52;
      v162 = &v156;
      MEMORY[0x270FA5388](v52);
      ((void (*)(char *, char *, void))v20)((char *)&v156 - v51, (char *)&v156 - v51, MEMORY[0x263F8E8F8]);
      if ((v53 & 1) == 0)
      {
        int v11 = *(void **)(v21 + 8);
        ((void (*)(char *, void))v11)((char *)&v156 - v51, MEMORY[0x263F8E8F8]);
        goto LABEL_102;
      }
      uint64_t v54 = sub_25704AD30();
      int v11 = *(void **)(v21 + 8);
      uint64_t v55 = ((uint64_t (*)(char *, void))v11)((char *)&v156 - v51, MEMORY[0x263F8E8F8]);
      if (v54 <= 32) {
        goto LABEL_102;
      }
      v160 = &v156;
      v161 = (uint64_t *)(v21 + 8);
      MEMORY[0x270FA5388](v55);
      uint64_t v15 = (uint64_t)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(uint64_t, char *, void))v20)(v15, (char *)&v156 - v51, MEMORY[0x263F8E8F8]);
      LODWORD(v166[0]) = 0x80000000;
      if (sub_25704AD40())
      {
        uint64_t v56 = sub_25704AD30();
        if (v56 < 32)
        {
          while (1)
          {
            int v105 = sub_25704AD20();
            ((void (*)(uint64_t, void))v11)(v15, MEMORY[0x263F8E8F8]);
            BOOL v94 = __OFSUB__(v166[0], v105);
            BOOL v93 = LODWORD(v166[0]) - v105 < 0;
            if (SLODWORD(v166[0]) <= v105) {
              goto LABEL_102;
            }
LABEL_80:
            __break(1u);
LABEL_81:
            if (v93 == v94) {
              break;
            }
LABEL_83:
            char v106 = sub_25704AD20();
            uint64_t v69 = ((uint64_t (*)(uint64_t, void))v21)(v15, MEMORY[0x263F8E8F8]);
            BOOL v97 = __OFSUB__(SLOBYTE(v166[0]), v106);
            BOOL v96 = SLOBYTE(v166[0]) - v106 < 0;
            if (SLOBYTE(v166[0]) <= v106) {
              goto LABEL_107;
            }
LABEL_84:
            __break(1u);
LABEL_85:
            if (v96 == v97) {
              goto LABEL_113;
            }
LABEL_87:
            uint64_t v107 = sub_25704AD20();
            ((void (*)(char *, void))v20)(v23, MEMORY[0x263F8E8F8]);
            if (v107 >= *(uint64_t *)&v166[0]) {
              goto LABEL_114;
            }
LABEL_88:
            __break(1u);
LABEL_89:
            uint64_t v108 = *(uint64_t **)(*(void *)(v164 + 24) + 16);
            uint64_t v109 = swift_getAssociatedTypeWitness();
            v158 = &v156;
            MEMORY[0x270FA5388](v109);
            int v111 = (char *)&v156 - v110;
            v160 = v108;
            swift_getAssociatedConformanceWitness();
            uint64_t v159 = v111;
            uint64_t v112 = sub_25704B210();
            MEMORY[0x270FA5388](v112);
            sub_25704B1C0();
            LOBYTE(v108) = sub_25704A6D0();
            uint64_t v113 = ((uint64_t (*)(char *, void))v20)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
            uint64_t v15 = (uint64_t)&v156;
            MEMORY[0x270FA5388](v113);
            unint64_t v12 = (char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v114 = (void (*)(char *, char *, void))v11[4];
            v11 += 4;
            v114(v12, v23, MEMORY[0x263F8E8F8]);
            if (v108)
            {
              ((void (*)(char *, void))v20)(v12, MEMORY[0x263F8E8F8]);
              __break(1u);
              goto LABEL_122;
            }
            uint64_t v23 = *(char **)&v166[0];
            uint64_t v115 = sub_25704AD20();
            ((void (*)(char *, void))v20)(v12, MEMORY[0x263F8E8F8]);
            BOOL v92 = __OFSUB__(v115, v23);
            BOOL v91 = v115 - (uint64_t)v23 < 0;
            if (v115 >= (uint64_t)v23) {
              goto LABEL_101;
            }
LABEL_76:
            __break(1u);
LABEL_77:
            if (v91 == v92)
            {
              ((void (*)(uint64_t, void))v11)(v15, MEMORY[0x263F8E8F8]);
              goto LABEL_102;
            }
          }
          uint64_t v69 = ((uint64_t (*)(uint64_t, void))v21)(v15, MEMORY[0x263F8E8F8]);
          goto LABEL_107;
        }
      }
      else
      {
        uint64_t v2 = sub_25704AD40();
        uint64_t v56 = sub_25704AD30();
        BOOL v92 = __OFSUB__(v56, 32);
        BOOL v91 = v56 - 32 < 0;
        if ((v2 & 1) == 0) {
          goto LABEL_77;
        }
        if (v56 <= 32)
        {
          uint64_t v116 = *(char **)(*(void *)(v164 + 24) + 16);
          uint64_t v117 = swift_getAssociatedTypeWitness();
          uint64_t v157 = &v156;
          MEMORY[0x270FA5388](v117);
          uint64_t v119 = (char *)&v156 - v118;
          uint64_t v159 = v116;
          swift_getAssociatedConformanceWitness();
          v158 = (uint64_t *)v119;
          uint64_t v120 = sub_25704B210();
          MEMORY[0x270FA5388](v120);
          sub_25704B1C0();
          LOBYTE(v116) = sub_25704A6D0();
          uint64_t v121 = ((uint64_t (*)(char *, void))v11)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
          MEMORY[0x270FA5388](v121);
          uint64_t v2 = (uint64_t)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(uint64_t, uint64_t, void))(v21 + 32))(v2, v2, MEMORY[0x263F8E8F8]);
          if (v116)
          {
LABEL_122:
            ((void (*)(uint64_t, void))v11)(v2, MEMORY[0x263F8E8F8]);
            __break(1u);
LABEL_123:
            ((void (*)(uint64_t, void))v21)(v2, MEMORY[0x263F8E8F8]);
            __break(1u);
LABEL_124:
            ((void (*)(char *, void))v20)(v12, MEMORY[0x263F8E8F8]);
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            *(void *)&v166[0] = 0;
            *((void *)&v166[0] + 1) = 0xE000000000000000;
            sub_25704ADF0();
            sub_25704B340();
            sub_25704A850();
            swift_bridgeObjectRelease();
            sub_25704A850();
            sub_25704A850();
            sub_25704A850();
            unint64_t result = sub_25704AFD0();
LABEL_127:
            __break(1u);
            goto LABEL_128;
          }
          uint64_t v15 = LODWORD(v166[0]);
          int v122 = sub_25704AD20();
          ((void (*)(char *, void))v11)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
          BOOL v94 = __OFSUB__(v15, v122);
          BOOL v93 = (int)v15 - v122 < 0;
          if ((int)v15 > v122) {
            goto LABEL_80;
          }
LABEL_102:
          uint64_t v139 = sub_25704AD40();
          if ((v139 & 1) == 0)
          {
            v161 = &v156;
            MEMORY[0x270FA5388](v139);
            uint64_t v140 = MEMORY[0x263F8E8F8];
            ((void (*)(char *, char *, void))v20)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), v23, MEMORY[0x263F8E8F8]);
            uint64_t v141 = sub_25704AD40();
            if (v141)
            {
              sub_25704AD20();
              ((void (*)(char *, void))v11)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
            }
            else
            {
              LODWORD(v166[0]) = 0x7FFFFFFF;
              MEMORY[0x270FA5388](v141);
              uint64_t v142 = (char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v143 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(v142, v142, v140);
              MEMORY[0x270FA5388](v143);
              sub_256FAB5EC();
              sub_25704AD10();
              char v144 = sub_25704A6D0();
              uint64_t v145 = MEMORY[0x263F8E8F8];
              ((void (*)(char *, void))v11)(v142, MEMORY[0x263F8E8F8]);
              ((void (*)(char *, uint64_t))v11)(v142, v145);
              if (v144) {
                __break(1u);
              }
            }
          }
          ((void (*)(char *, void))v11)(v23, MEMORY[0x263F8E8F8]);
          mlx_array_from_int();
        }
      }
      MEMORY[0x270FA5388](v56);
      sub_256FAB5EC();
      sub_25704AD10();
      LODWORD(v159) = sub_25704A6D0();
      uint64_t v100 = MEMORY[0x263F8E8F8];
      uint64_t v2 = (uint64_t)v161;
      ((void (*)(char *, void))v11)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
      ((void (*)(char *, uint64_t))v11)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), v100);
      if (v159) {
        goto LABEL_80;
      }
      goto LABEL_102;
    case 2:
      goto LABEL_127;
    case 3:
LABEL_31:
      uint64_t v62 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v6);
      v162 = &v156;
      uint64_t v63 = *(v6 - 1);
      unint64_t v12 = *(char **)(v63 + 64);
      MEMORY[0x270FA5388](v62);
      unint64_t v64 = (unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v14 = (char *)&v156 - v64;
      v163 = (uint64_t *)v63;
      uint64_t v65 = *(void (**)(char *))(v63 + 16);
      uint64_t v23 = (char *)(v63 + 16);
      uint64_t v20 = v65;
      v65((char *)&v156 - v64);
      uint64_t v66 = sub_25704AD40();
      char v67 = v66;
      v161 = &v156;
      MEMORY[0x270FA5388](v66);
      ((void (*)(char *, char *, void))v65)((char *)&v156 - v64, (char *)&v156 - v64, MEMORY[0x263F8E8F8]);
      if ((v67 & 1) == 0)
      {
        uint64_t v21 = v163[1];
        uint64_t v69 = ((uint64_t (*)(char *, void))v21)((char *)&v156 - v64, MEMORY[0x263F8E8F8]);
        goto LABEL_107;
      }
      uint64_t v68 = sub_25704AD30();
      int v11 = v163 + 1;
      uint64_t v21 = v163[1];
      uint64_t v69 = ((uint64_t (*)(char *, void))v21)((char *)&v156 - v64, MEMORY[0x263F8E8F8]);
      if (v68 <= 8) {
        goto LABEL_107;
      }
      v160 = &v156;
      MEMORY[0x270FA5388](v69);
      uint64_t v15 = (uint64_t)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(uint64_t, char *, void))v20)(v15, (char *)&v156 - v64, MEMORY[0x263F8E8F8]);
      LOBYTE(v166[0]) = 0x80;
      if (sub_25704AD40())
      {
        uint64_t v70 = sub_25704AD30();
        if (v70 < 8) {
          goto LABEL_83;
        }
LABEL_69:
        MEMORY[0x270FA5388](v70);
        uint64_t v2 = (uint64_t)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_256FC9990();
        sub_25704AD10();
        LODWORD(v159) = sub_25704A6D0();
        uint64_t v101 = MEMORY[0x263F8E8F8];
        ((void (*)(uint64_t, void))v21)(v2, MEMORY[0x263F8E8F8]);
        uint64_t v69 = ((uint64_t (*)(uint64_t, uint64_t))v21)(v2, v101);
        if (v159) {
          goto LABEL_84;
        }
        goto LABEL_107;
      }
      uint64_t v2 = sub_25704AD40();
      uint64_t v70 = sub_25704AD30();
      BOOL v94 = __OFSUB__(v70, 8);
      BOOL v93 = v70 - 8 < 0;
      if ((v2 & 1) == 0) {
        goto LABEL_81;
      }
      if (v70 > 8) {
        goto LABEL_69;
      }
      uint64_t v123 = *(char **)(*(void *)(v164 + 24) + 16);
      uint64_t v124 = swift_getAssociatedTypeWitness();
      uint64_t v157 = &v156;
      MEMORY[0x270FA5388](v124);
      uint64_t v126 = (char *)&v156 - v125;
      uint64_t v159 = v123;
      swift_getAssociatedConformanceWitness();
      v158 = (uint64_t *)v126;
      uint64_t v127 = sub_25704B210();
      MEMORY[0x270FA5388](v127);
      sub_25704B1C0();
      LOBYTE(v123) = sub_25704A6D0();
      uint64_t v128 = ((uint64_t (*)(char *, void))v21)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
      MEMORY[0x270FA5388](v128);
      uint64_t v2 = (uint64_t)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(uint64_t, uint64_t, void))v163[4])(v2, v2, MEMORY[0x263F8E8F8]);
      if (v123) {
        goto LABEL_123;
      }
      int v129 = SLOBYTE(v166[0]);
      char v130 = sub_25704AD20();
      uint64_t v69 = ((uint64_t (*)(char *, void))v21)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
      BOOL v97 = __OFSUB__(v129, v130);
      BOOL v96 = v129 - v130 < 0;
      if (v129 > v130) {
        goto LABEL_84;
      }
LABEL_107:
      MEMORY[0x270FA5388](v69);
      uint64_t v146 = MEMORY[0x263F8E8F8];
      ((void (*)(char *, char *, void))v20)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), v14, MEMORY[0x263F8E8F8]);
      LOBYTE(v166[0]) = 127;
      uint64_t v147 = sub_25704AD40();
      uint64_t v23 = (char *)&v156;
      if (v147)
      {
        MEMORY[0x270FA5388](v147);
        sub_256FC9990();
        sub_25704AD10();
        char v148 = sub_25704A6D0();
        unint64_t v149 = (unint64_t)(v163 + 1);
        uint64_t v150 = MEMORY[0x263F8E8F8];
        ((void (*)(char *, void))v21)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
        ((void (*)(char *, uint64_t))v21)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), v150);
      }
      else
      {
        LOBYTE(v165) = 127;
        MEMORY[0x270FA5388](v147);
        char v151 = (char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v152 = ((uint64_t (*)(char *, char *, uint64_t))v163[4])(v151, v151, v146);
        MEMORY[0x270FA5388](v152);
        sub_256FC9990();
        sub_25704AD10();
        char v148 = sub_25704A6D0();
        unint64_t v149 = (unint64_t)(v163 + 1);
        uint64_t v153 = MEMORY[0x263F8E8F8];
        ((void (*)(char *, void))v21)(v151, MEMORY[0x263F8E8F8]);
        ((void (*)(char *, uint64_t))v21)(v151, v153);
      }
      if (v148)
      {
        __break(1u);
LABEL_118:
        unint64_t result = sub_25704AFC0();
        goto LABEL_127;
      }
      uint64_t v20 = (void (*)(char *))(v149 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      int v154 = *(_DWORD *)v14;
      ((void (*)(char *, void))v21)(v14, MEMORY[0x263F8E8F8]);
      LOBYTE(v166[0]) = v154;
      uint64_t v30 = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
      if (v30)
      {
LABEL_115:
        type metadata accessor for MLXArray();
        uint64_t v5 = swift_allocObject();
        *(void *)(v5 + 16) = v30;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v168);
        return v5;
      }
      __break(1u);
LABEL_113:
      ((void (*)(char *, void))v20)(v23, MEMORY[0x263F8E8F8]);
LABEL_114:
      uint64_t v155 = *(unsigned int *)v14;
      ((void (*)(char *, void))v20)(v14, MEMORY[0x263F8E8F8]);
      *(void *)&v166[0] = v155;
      unint64_t result = mlx_array_from_data((uint64_t)v166, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
      uint64_t v30 = result;
      if (result) {
        goto LABEL_115;
      }
LABEL_128:
      __break(1u);
      return result;
    case 4:
      goto LABEL_23;
    case 5:
      __n128 v79 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v6);
      v163 = &v156;
      int v11 = (void *)*(v6 - 1);
      unint64_t v12 = (char *)v11[8];
      MEMORY[0x270FA5388](v79);
      uint64_t v14 = (char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      v80 = (void (*)(char *))v11[2];
      v80(v14);
      uint64_t v81 = sub_25704AD40();
      char v82 = v81;
      v162 = &v156;
      MEMORY[0x270FA5388](v81);
      ((void (*)(char *, char *, void))v80)(v14, v14, MEMORY[0x263F8E8F8]);
      if ((v82 & 1) == 0)
      {
        uint64_t v20 = (void (*)(char *))v11[1];
        ((void (*)(char *, void))v20)(v14, MEMORY[0x263F8E8F8]);
        goto LABEL_114;
      }
      uint64_t v83 = sub_25704AD30();
      uint64_t v2 = (uint64_t)(v11 + 1);
      uint64_t v20 = (void (*)(char *))v11[1];
      uint64_t v21 = (unint64_t)(v11 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v84 = ((uint64_t (*)(char *, void))v20)(v14, MEMORY[0x263F8E8F8]);
      if (v83 <= 64) {
        goto LABEL_114;
      }
      v161 = &v156;
      MEMORY[0x270FA5388](v84);
      uint64_t v23 = (char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, char *, void))v80)(v23, v14, MEMORY[0x263F8E8F8]);
      *(void *)&v166[0] = 0x8000000000000000;
      if (sub_25704AD40())
      {
        uint64_t v85 = sub_25704AD30();
        if (v85 < 64) {
          goto LABEL_87;
        }
      }
      else
      {
        char v95 = sub_25704AD40();
        uint64_t v85 = sub_25704AD30();
        BOOL v97 = __OFSUB__(v85, 64);
        BOOL v96 = v85 - 64 < 0;
        if ((v95 & 1) == 0) {
          goto LABEL_85;
        }
        if (v85 <= 64)
        {
          uint64_t v131 = *(uint64_t **)(*(void *)(v164 + 24) + 16);
          uint64_t v132 = swift_getAssociatedTypeWitness();
          v158 = &v156;
          MEMORY[0x270FA5388](v132);
          uint64_t v134 = (char *)&v156 - v133;
          v160 = v131;
          swift_getAssociatedConformanceWitness();
          uint64_t v159 = v134;
          uint64_t v135 = sub_25704B210();
          MEMORY[0x270FA5388](v135);
          sub_25704B1C0();
          LOBYTE(v131) = sub_25704A6D0();
          uint64_t v136 = ((uint64_t (*)(char *, void))v20)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
          MEMORY[0x270FA5388](v136);
          unint64_t v12 = (char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v137 = (void (*)(char *, char *, void))v11[4];
          v11 += 4;
          v137(v12, v23, MEMORY[0x263F8E8F8]);
          if (v131) {
            goto LABEL_124;
          }
          uint64_t v23 = *(char **)&v166[0];
          uint64_t v138 = sub_25704AD20();
          ((void (*)(char *, void))v20)(v12, MEMORY[0x263F8E8F8]);
          if (v138 < (uint64_t)v23) {
            goto LABEL_88;
          }
          goto LABEL_114;
        }
      }
      MEMORY[0x270FA5388](v85);
      unint64_t v12 = (char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_256FC993C();
      sub_25704AD10();
      char v102 = sub_25704A6D0();
      uint64_t v103 = MEMORY[0x263F8E8F8];
      ((void (*)(char *, void))v20)(v12, MEMORY[0x263F8E8F8]);
      ((void (*)(char *, uint64_t))v20)(v23, v103);
      if (v102) {
        goto LABEL_88;
      }
      goto LABEL_114;
    case 6:
      BOOL v86 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v6);
      uint64_t v87 = *(v6 - 1);
      MEMORY[0x270FA5388](v86);
      BOOL v89 = (unsigned __int32 *)((char *)&v156 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(unsigned __int32 *))(v87 + 16))(v89);
      if (sub_25704AD40()) {
        sub_25704AD20();
      }
      else {
        v90.n128_u32[0] = *v89;
      }
      (*(void (**)(unsigned __int32 *, void, __n128))(v87 + 8))(v89, MEMORY[0x263F8E8F8], v90);
      mlx_array_from_float();
    default:
      uint64_t v10 = __swift_project_boxed_opaque_existential_1(v168, (uint64_t)v6);
      v163 = &v156;
      int v11 = (void *)*(v6 - 1);
      unint64_t v12 = (char *)v11[8];
      MEMORY[0x270FA5388](v10);
      unint64_t v13 = (unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v14 = (char *)&v156 - v13;
      uint64_t v15 = v11[2];
      ((void (*)(char *))v15)((char *)&v156 - v13);
      uint64_t v16 = sub_25704AD40();
      char v17 = v16;
      v162 = &v156;
      MEMORY[0x270FA5388](v16);
      uint64_t v18 = (char *)&v156 - v13;
      ((void (*)(char *, char *, void))v15)((char *)&v156 - v13, (char *)&v156 - v13, MEMORY[0x263F8E8F8]);
      if ((v17 & 1) == 0)
      {
        uint64_t v20 = (void (*)(char *))v11[1];
        ((void (*)(char *, void))v20)((char *)&v156 - v13, MEMORY[0x263F8E8F8]);
        goto LABEL_101;
      }
      uint64_t v19 = sub_25704AD30();
      uint64_t v2 = (uint64_t)(v11 + 1);
      uint64_t v20 = (void (*)(char *))v11[1];
      uint64_t v21 = (unint64_t)(v11 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v22 = ((uint64_t (*)(char *, void))v20)(v18, MEMORY[0x263F8E8F8]);
      if (v19 <= 64) {
        goto LABEL_101;
      }
      v161 = &v156;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, char *, void))v15)(v23, v14, MEMORY[0x263F8E8F8]);
      *(void *)&v166[0] = 0x8000000000000000;
      if (sub_25704AD40())
      {
        uint64_t v24 = sub_25704AD30();
        if (v24 < 64)
        {
LABEL_75:
          uint64_t v104 = sub_25704AD20();
          ((void (*)(char *, void))v20)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
          BOOL v92 = __OFSUB__(v104, *(void *)&v166[0]);
          BOOL v91 = v104 - *(void *)&v166[0] < 0;
          if (v104 < *(uint64_t *)&v166[0]) {
            goto LABEL_76;
          }
LABEL_101:
          ((void (*)(char *, void))v20)(v14, MEMORY[0x263F8E8F8]);
          mlx_array_from_BOOL();
        }
      }
      else
      {
        uint64_t v15 = sub_25704AD40();
        uint64_t v24 = sub_25704AD30();
        if ((v15 & 1) == 0)
        {
          if (v24 >= 64)
          {
            ((void (*)(char *, void))v20)((char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0), MEMORY[0x263F8E8F8]);
            goto LABEL_101;
          }
          goto LABEL_75;
        }
        if (v24 <= 64) {
          goto LABEL_89;
        }
      }
      uint64_t v15 = (uint64_t)&v156;
      MEMORY[0x270FA5388](v24);
      unint64_t v12 = (char *)&v156 - ((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_256FC9A38();
      sub_25704AD10();
      char v98 = sub_25704A6D0();
      uint64_t v99 = MEMORY[0x263F8E8F8];
      ((void (*)(char *, void))v20)(v12, MEMORY[0x263F8E8F8]);
      ((void (*)(char *, uint64_t))v20)(v23, v99);
      if (v98) {
        goto LABEL_76;
      }
      goto LABEL_101;
  }
}

void sub_256FC7B6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FC7B74);
  }
  _Unwind_Resume(a1);
}

uint64_t padded(_:widths:value:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t result = mlx_array_ndim(*(void *)(a1 + 16));
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((result & 0x80000000) == 0)
  {
    sub_256FA6898(result << 32);
    int64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = MEMORY[0x263F8EE78];
    if (!v6)
    {
      if (a3) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    uint64_t v21 = v4;
    uint64_t v24 = MEMORY[0x263F8EE78];
    uint64_t result = sub_256F90A30(0, v6, 0);
    uint64_t v8 = v24;
    uint64_t v23 = a2;
    int v9 = (int64_t *)(a2 + 32);
    int64_t v10 = v6;
    while (1)
    {
      int64_t v12 = *v9;
      v9 += 2;
      uint64_t v11 = v12;
      if (v12 < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (v11 > 0x7FFFFFFF) {
        goto LABEL_23;
      }
      uint64_t v24 = v8;
      unint64_t v14 = *(void *)(v8 + 16);
      unint64_t v13 = *(void *)(v8 + 24);
      if (v14 >= v13 >> 1)
      {
        uint64_t result = sub_256F90A30(v13 > 1, v14 + 1, 1);
        uint64_t v8 = v24;
      }
      *(void *)(v8 + 16) = v14 + 1;
      *(_DWORD *)(v8 + 4 * v14 + 32) = v11;
      if (!--v10)
      {
        uint64_t v24 = v7;
        uint64_t result = sub_256F90A30(0, v6, 0);
        uint64_t v15 = (int64_t *)(v23 + 40);
        do
        {
          int64_t v17 = *v15;
          v15 += 2;
          uint64_t v16 = v17;
          if (v17 < (uint64_t)0xFFFFFFFF80000000) {
            goto LABEL_24;
          }
          if (v16 > 0x7FFFFFFF) {
            goto LABEL_25;
          }
          uint64_t v24 = v7;
          unint64_t v19 = *(void *)(v7 + 16);
          unint64_t v18 = *(void *)(v7 + 24);
          if (v19 >= v18 >> 1)
          {
            uint64_t result = sub_256F90A30(v18 > 1, v19 + 1, 1);
            uint64_t v7 = v24;
          }
          *(void *)(v7 + 16) = v19 + 1;
          *(_DWORD *)(v7 + 4 * v19 + 32) = v16;
          --v6;
        }
        while (v6);
        uint64_t v4 = v21;
        if (a3)
        {
LABEL_21:
          swift_retain();
          mlx_pad();
        }
LABEL_20:
        uint64_t dtype = mlx_array_get_dtype(*(void *)(v4 + 16));
        sub_256FE5804(dtype, &v24);
        sub_256FB6D8C(0, v24);
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_28:
  __break(1u);
  __break(1u);
  return result;
}

void partitioned(_:kth:axis:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_partition();
  }
LABEL_8:
  __break(1u);
  __break(1u);
}

void partitioned(_:kth:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_partition_all();
  }
  __break(1u);
  __break(1u);
}

void radians(_:stream:)()
{
}

void remainder<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sigmoid(_:stream:)()
{
}

void sign(_:stream:)()
{
}

void sinh(_:stream:)()
{
}

void sorted(_:axis:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_sort();
  }
  __break(1u);
  __break(1u);
}

void sorted(_:stream:)()
{
}

uint64_t std(_:axes:keepDims:ddof:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = Array<A>.asInt32.getter(a2);
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a4 <= 0x7FFFFFFF)
  {
    mlx_std();
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t std(_:axis:keepDims:ddof:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = *(void *)(result + 16);
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a4 <= 0x7FFFFFFF) {
    mlx_std();
  }
LABEL_9:
  __break(1u);
  __break(1u);
  return result;
}

void std(_:keepDims:ddof:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    mlx_std_all();
  }
  __break(1u);
  __break(1u);
}

void stacked(_:axis:stream:)()
{
}

void stopGradient(_:stream:)()
{
}

void subtract<A, B>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void takeAlong(_:_:axis:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    mlx_take_along_axis();
  }
  __break(1u);
  __break(1u);
}

void takeAlong(_:_:stream:)()
{
}

void tan(_:stream:)()
{
}

void tanh(_:stream:)()
{
}

void tensordot(_:_:axes:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    mlx_tensordot_along_axis();
  }
  __break(1u);
  __break(1u);
}

void tensordot(_:_:axes:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25706E4F0;
  *(void *)(inited + 32) = a3;
  *(void *)(inited + 40) = a4;
  Array<A>.asInt32.getter(inited);
  swift_setDeallocating();
  uint64_t v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_25706E4F0;
  *(void *)(v11 + 32) = a5;
  *(void *)(v11 + 40) = a6;
  Array<A>.asInt32.getter(v11);
  swift_setDeallocating();
  mlx_tensordot();
}

void tiled(_:repetitions:stream:)(uint64_t a1, uint64_t a2)
{
}

{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_tile();
  }
  __break(1u);
  __break(1u);
}

void top(_:k:axis:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_topk();
  }
LABEL_8:
  __break(1u);
  __break(1u);
}

void top(_:k:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_topk_all();
  }
  __break(1u);
  __break(1u);
}

void _s8Morpheus5where___6streamAA8MLXArrayCAE_xq_AA14StreamOrDeviceVtAA06ScalarF5ArrayRzAaHR_r0_lF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

BOOL sub_256FC8D90(unsigned char *a1, float a2)
{
  int v4 = (LODWORD(a2) >> 23);
  unsigned int v5 = LODWORD(a2) & 0x7FFFFF;
  int v6 = v4 | LODWORD(a2) & 0x7FFFFF;
  if (!v6)
  {
    char v7 = 0;
    BOOL result = 1;
    goto LABEL_24;
  }
  LOBYTE(v6) = 0;
  char v7 = 1;
  if (v4 == 255)
  {
    BOOL result = 0;
  }
  else
  {
    BOOL result = 0;
    if (a2 > -1.0)
    {
      uint64_t v9 = sub_25704AB50();
      if (v9 > 7)
      {
        LOBYTE(v6) = 0;
        BOOL result = 0;
        char v7 = 1;
        goto LABEL_24;
      }
      uint64_t v10 = v9;
      uint64_t v11 = sub_25704AB40();
      uint64_t v12 = v11 + __clz(__rbit32(v5));
      uint64_t v13 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 7)
        {
          if (v13 < -8 || v13 > 8)
          {
LABEL_9:
            LOBYTE(v6) = 0;
            LOBYTE(v14) = 0;
            if ((v10 & 0x8000000000000000) == 0) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }
          if (v13 < 0)
          {
            if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF8) {
              goto LABEL_9;
            }
            int v6 = LOBYTE(a2) >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v13 >= 8) {
              goto LABEL_9;
            }
            int v6 = LODWORD(a2) << v13;
          }
LABEL_20:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_22:
            int v14 = 1 << v10;
            goto LABEL_23;
          }
          LOBYTE(v14) = 0;
LABEL_23:
          char v7 = 0;
          LOBYTE(v6) = v6 | v14;
          BOOL result = v10 >= v11;
          goto LABEL_24;
        }
        if ((unint64_t)(v13 - 33) < 0xFFFFFFFFFFFFFFBFLL)
        {
LABEL_13:
          LOBYTE(v6) = 0;
          goto LABEL_20;
        }
        if ((v13 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v13 < 0x20)
          {
            int v6 = v5 << v13;
            goto LABEL_20;
          }
          goto LABEL_13;
        }
      }
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFE0) {
        LOBYTE(v6) = 0;
      }
      else {
        int v6 = v5 >> (v12 - v10);
      }
      goto LABEL_20;
    }
  }
LABEL_24:
  *a1 = v6;
  a1[1] = v7;
  return result;
}

BOOL sub_256FC8F08(uint64_t a1, float a2)
{
  int v3 = (LODWORD(a2) >> 23);
  unsigned int v4 = LODWORD(a2) & 0x7FFFFF;
  int v5 = v3 | LODWORD(a2) & 0x7FFFFF;
  if (v5)
  {
    int v5 = 0;
    char v6 = 1;
    if (v3 == 255)
    {
      BOOL result = 0;
    }
    else
    {
      BOOL result = 0;
      if (a2 > -1.0)
      {
        uint64_t v8 = sub_25704AB50();
        if (v8 <= 31)
        {
          uint64_t v9 = v8;
          uint64_t v10 = sub_25704AB40();
          uint64_t v11 = v10 + __clz(__rbit32(v4));
          uint64_t v12 = v9 - v11;
          if (__OFSUB__(v9, v11))
          {
            __break(1u);
          }
          else
          {
            if (v11 > 31)
            {
              if (v12 < -32 || v12 > 32) {
                goto LABEL_13;
              }
            }
            else if (v12 < -32 || v12 > 32)
            {
              goto LABEL_13;
            }
            if ((v12 & 0x8000000000000000) == 0)
            {
              if ((unint64_t)v12 < 0x20)
              {
                unsigned int v13 = v4 << v12;
                if (v9 < 0)
                {
LABEL_18:
                  int v14 = 0;
                  goto LABEL_25;
                }
LABEL_24:
                int v14 = 1 << v9;
                goto LABEL_25;
              }
              goto LABEL_13;
            }
          }
          if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFE0)
          {
            unsigned int v13 = v4 >> (v11 - v9);
            if (v9 < 0) {
              goto LABEL_18;
            }
            goto LABEL_24;
          }
LABEL_13:
          unsigned int v13 = 0;
          int v14 = 0;
          if (v9 < 0)
          {
LABEL_25:
            char v6 = 0;
            int v5 = v13 | v14;
            BOOL result = v9 >= v10;
            goto LABEL_26;
          }
          goto LABEL_24;
        }
        int v5 = 0;
        BOOL result = 0;
        char v6 = 1;
      }
    }
  }
  else
  {
    char v6 = 0;
    BOOL result = 1;
  }
LABEL_26:
  *(_DWORD *)a1 = v5;
  *(unsigned char *)(a1 + 4) = v6;
  return result;
}

BOOL sub_256FC9054(unsigned char *a1, float a2)
{
  int v5 = (LODWORD(a2) >> 23);
  unsigned int v6 = LODWORD(a2) & 0x7FFFFF;
  int v7 = v5 | LODWORD(a2) & 0x7FFFFF;
  if (!v7)
  {
    LOBYTE(v15) = 0;
    BOOL result = 1;
    goto LABEL_28;
  }
  if (v5 == 255 || (uint64_t v8 = sub_25704AB50(), v8 > 7))
  {
LABEL_37:
    LOBYTE(v15) = 0;
    BOOL result = 0;
    LOBYTE(v7) = 1;
    goto LABEL_28;
  }
  uint64_t v9 = v8;
  uint64_t v10 = sub_25704AB40();
  BOOL result = v9 >= v10;
  uint64_t v12 = v10 + __clz(__rbit32(v6));
  uint64_t v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 > 7)
  {
    if ((unint64_t)(v13 - 33) < 0xFFFFFFFFFFFFFFBFLL)
    {
LABEL_12:
      LOBYTE(v13) = 0;
      goto LABEL_19;
    }
    if (v13 < 0)
    {
      unsigned int v16 = v6 >> (v12 - v9);
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFE0) {
        LOBYTE(v13) = 0;
      }
      else {
        LOBYTE(v13) = v16;
      }
    }
    else
    {
      if ((unint64_t)v13 >= 0x20) {
        goto LABEL_12;
      }
      LODWORD(v13) = v6 << v13;
    }
LABEL_19:
    if (v9 != 7)
    {
      if (v9 < 0)
      {
        LOBYTE(v14) = 0;
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_30:
    if (a2 >= 0.0 || (_BYTE)v13) {
      goto LABEL_37;
    }
    goto LABEL_32;
  }
  if (v13 >= -8 && v13 <= 8)
  {
    if (v13 < 0)
    {
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF8) {
        goto LABEL_8;
      }
      LODWORD(v13) = LOBYTE(a2) >> (v12 - v9);
    }
    else
    {
      if ((unint64_t)v13 >= 8) {
        goto LABEL_8;
      }
      LODWORD(v13) = LODWORD(a2) << v13;
    }
    goto LABEL_19;
  }
LABEL_8:
  if (v9 == 7) {
    goto LABEL_36;
  }
  LOBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  if ((v9 & 0x8000000000000000) == 0) {
LABEL_22:
  }
    int v14 = 1 << v9;
LABEL_23:
  int v15 = (char)(v13 | v14);
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_28;
    }
    goto LABEL_35;
  }
  if (v15 < 0)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (a2 >= 0.0) {
      goto LABEL_37;
    }
LABEL_32:
    LOBYTE(v7) = 0;
    LOBYTE(v15) = 0x80;
    goto LABEL_28;
  }
  LOBYTE(v7) = 0;
  int v15 = -v15;
LABEL_28:
  *a1 = v15;
  a1[1] = v7;
  return result;
}

BOOL sub_256FC920C(uint64_t a1, float a2)
{
  int v4 = (LODWORD(a2) >> 23);
  unsigned int v5 = LODWORD(a2) & 0x7FFFFF;
  int v6 = v4 | LODWORD(a2) & 0x7FFFFF;
  if (!v6)
  {
    LODWORD(v12) = 0;
    BOOL result = 1;
    goto LABEL_25;
  }
  if (v4 == 255) {
    goto LABEL_28;
  }
  uint64_t v7 = sub_25704AB50();
  if (v7 > 31) {
    goto LABEL_28;
  }
  uint64_t v8 = v7;
  uint64_t v9 = sub_25704AB40();
  BOOL result = v8 >= v9;
  uint64_t v11 = v9 + __clz(__rbit32(v5));
  uint64_t v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      LODWORD(v12) = 0x80000000;
      goto LABEL_25;
    }
LABEL_28:
    LODWORD(v12) = 0;
    BOOL result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 31)
  {
    if (v12 < -32 || v12 > 32) {
      goto LABEL_11;
    }
  }
  else if (v12 < -32 || v12 > 32)
  {
    goto LABEL_11;
  }
  if (v12 < 0) {
    goto LABEL_32;
  }
  if ((unint64_t)v12 < 0x20)
  {
    unsigned int v14 = v5 << v12;
    if (v8 != 31) {
      goto LABEL_17;
    }
LABEL_34:
    if (a2 < 0.0 && !v14) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 31) {
    goto LABEL_27;
  }
  int v13 = 0;
  unsigned int v14 = 0;
  if (v8 < 0) {
    goto LABEL_20;
  }
LABEL_19:
  int v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    uint64_t v12 = v14 | v13;
    if (a2 >= 0.0) {
      break;
    }
    if ((v12 & 0x80000000) == 0)
    {
      LOBYTE(v6) = 0;
      LODWORD(v12) = -(int)v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFE0) {
      goto LABEL_11;
    }
    unsigned int v14 = v5 >> -(char)v12;
    if (v8 == 31) {
      goto LABEL_34;
    }
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0) {
      goto LABEL_19;
    }
    int v13 = 0;
  }
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_31;
  }
  LOBYTE(v6) = 0;
LABEL_25:
  *(_DWORD *)a1 = v12;
  *(unsigned char *)(a1 + 4) = v6;
  return result;
}

BOOL sub_256FC9394(uint64_t a1, float a2)
{
  int v4 = (LODWORD(a2) >> 23);
  unint64_t v5 = LODWORD(a2) & 0x7FFFFF;
  char v6 = v4 | LOBYTE(a2);
  if (!(v4 | v5))
  {
    unint64_t v14 = 0;
    BOOL result = 1;
    goto LABEL_26;
  }
  if (v4 == 255 || (uint64_t v7 = sub_25704AB50(), v7 > 63))
  {
LABEL_38:
    unint64_t v14 = 0;
    BOOL result = 0;
    char v6 = 1;
    goto LABEL_26;
  }
  uint64_t v8 = v7;
  uint64_t v9 = sub_25704AB40();
  BOOL result = v8 >= v9;
  uint64_t v11 = v9 + __clz(__rbit32(v5));
  uint64_t v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v11 > 63)
  {
    if ((unint64_t)(v12 - 33) < 0xFFFFFFFFFFFFFFBFLL) {
      goto LABEL_12;
    }
    if (v12 < 0)
    {
      if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFE0) {
        LODWORD(v12) = 0;
      }
      else {
        LODWORD(v12) = v5 >> (v11 - v8);
      }
      goto LABEL_16;
    }
    if ((unint64_t)v12 >= 0x20) {
LABEL_12:
    }
      LODWORD(v12) = 0;
    else {
      LODWORD(v12) = v5 << v12;
    }
LABEL_16:
    uint64_t v12 = v12;
LABEL_17:
    if (v8 != 63)
    {
      if (v8 < 0)
      {
        uint64_t v13 = 0;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_31:
    if (a2 >= 0.0 || v12) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  if (v12 >= -64 && v12 <= 64)
  {
    if (v12 < 0)
    {
      if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0) {
        goto LABEL_8;
      }
      uint64_t v12 = v5 >> (v11 - v8);
    }
    else
    {
      if ((unint64_t)v12 >= 0x40) {
        goto LABEL_8;
      }
      uint64_t v12 = v5 << v12;
    }
    goto LABEL_17;
  }
LABEL_8:
  if (v8 == 63) {
    goto LABEL_37;
  }
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  if ((v8 & 0x8000000000000000) == 0) {
LABEL_20:
  }
    uint64_t v13 = 1 << v8;
LABEL_21:
  unint64_t v14 = v12 | v13;
  if (a2 >= 0.0)
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      char v6 = 0;
      goto LABEL_26;
    }
    goto LABEL_36;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0) {
      goto LABEL_38;
    }
LABEL_33:
    char v6 = 0;
    unint64_t v14 = 0x8000000000000000;
    goto LABEL_26;
  }
  char v6 = 0;
  unint64_t v14 = -(uint64_t)v14;
LABEL_26:
  *(void *)a1 = v14;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

unint64_t sub_256FC9544()
{
  unint64_t result = qword_269FDC8D0;
  if (!qword_269FDC8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC8D0);
  }
  return result;
}

unint64_t sub_256FC959C()
{
  unint64_t result = qword_269FDC8D8;
  if (!qword_269FDC8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC8D8);
  }
  return result;
}

unint64_t sub_256FC95F4()
{
  unint64_t result = qword_269FDC8E0;
  if (!qword_269FDC8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC8E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConvolveMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConvolveMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FC97A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_256FC97CC(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConvolveMode()
{
  return &type metadata for ConvolveMode;
}

unsigned char *storeEnumTagSinglePayload for MeshGridIndexing(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FC98B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshGridIndexing()
{
  return &type metadata for MeshGridIndexing;
}

unint64_t sub_256FC98E8()
{
  unint64_t result = qword_269FDC8F0;
  if (!qword_269FDC8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC8F0);
  }
  return result;
}

unint64_t sub_256FC993C()
{
  unint64_t result = qword_269FDC8F8;
  if (!qword_269FDC8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC8F8);
  }
  return result;
}

unint64_t sub_256FC9990()
{
  unint64_t result = qword_269FDC900;
  if (!qword_269FDC900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC900);
  }
  return result;
}

unint64_t sub_256FC99E4()
{
  unint64_t result = qword_269FDC908;
  if (!qword_269FDC908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC908);
  }
  return result;
}

unint64_t sub_256FC9A38()
{
  unint64_t result = qword_269FDC910;
  if (!qword_269FDC910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC910);
  }
  return result;
}

unint64_t sub_256FC9A8C()
{
  unint64_t result = qword_269FDC918;
  if (!qword_269FDC918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC918);
  }
  return result;
}

unint64_t sub_256FC9AE0()
{
  unint64_t result = qword_269FDC920;
  if (!qword_269FDC920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC920);
  }
  return result;
}

unint64_t sub_256FC9B34()
{
  unint64_t result = qword_269FDC928;
  if (!qword_269FDC928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC928);
  }
  return result;
}

unint64_t sub_256FC9B88()
{
  unint64_t result = qword_269FDC930;
  if (!qword_269FDC930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC930);
  }
  return result;
}

unint64_t sub_256FC9BDC()
{
  unint64_t result = qword_269FDC938;
  if (!qword_269FDC938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC938);
  }
  return result;
}

unint64_t sub_256FC9C30()
{
  unint64_t result = qword_269FDC940;
  if (!qword_269FDC940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDC940);
  }
  return result;
}

void Int.pow(_:)(uint64_t a1, uint64_t a2)
{
  if (a2 == (int)a2) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
}

uint64_t sub_256FC9D48()
{
  uint64_t result = *v0;
  if (*v0 == (int)*v0) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
  return result;
}

void Int32.pow(_:)()
{
}

void sub_256FC9EC4()
{
}

atomic_ullong *UInt32.pow(_:)(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = a2;
  int v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)&v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(5, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_256FCA06C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FCA074);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_256FCA08C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = *v1;
  int v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)&v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(5, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_256FCA180(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FCA188);
  }
  _Unwind_Resume(a1);
}

void Float.pow(_:)()
{
}

void sub_256FCA254()
{
}

void Double.pow(_:)()
{
}

void sub_256FCA3C4()
{
}

void *MLXArray.pow(_:)(uint64_t a1)
{
  unsigned __int8 v3 = 7;
  uint64_t result = sub_2570049DC(a1, &v3);
  if (!v1) {
    mlx_default_device();
  }
  return result;
}

void *sub_256FCA58C(uint64_t a1)
{
  return MLXArray.pow(_:)(a1);
}

uint64_t dispatch thunk of Exponentiable.pow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

void abs(_:stream:)()
{
}

void all(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
}

void all(_:axis:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_all_axis();
  }
  __break(1u);
  __break(1u);
}

void all(_:keepDims:stream:)()
{
}

void allClose<A>(_:_:rtol:atol:equalNaN:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v9);
  (*(void (**)(char *, uint64_t, uint64_t))(a6 + 8))(&v9, a5, a6);
  mlx_allclose();
}

void any(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
}

void any(_:axis:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_any();
  }
  __break(1u);
  __break(1u);
}

void any(_:keepDims:stream:)()
{
}

void argMax(_:axis:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_argmax();
  }
  __break(1u);
  __break(1u);
}

void argMax(_:keepDims:stream:)()
{
}

void argMin(_:axis:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_argmin();
  }
  __break(1u);
  __break(1u);
}

void argMin(_:keepDims:stream:)()
{
}

void arrayEqual<A>(_:_:equalNAN:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v9);
  (*(void (**)(char *, uint64_t, uint64_t))(a6 + 8))(&v9, a5, a6);
  mlx_array_equal();
}

void cos(_:stream:)()
{
}

void cummax(_:axis:reverse:inclusive:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_cummax();
  }
  __break(1u);
  __break(1u);
}

void cummax(_:reverse:inclusive:stream:)()
{
}

void cummin(_:axis:reverse:inclusive:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_cummin();
  }
  __break(1u);
  __break(1u);
}

void cummin(_:reverse:inclusive:stream:)()
{
}

void cumprod(_:axis:reverse:inclusive:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_cumprod();
  }
  __break(1u);
  __break(1u);
}

void cumprod(_:reverse:inclusive:stream:)()
{
}

void cumsum(_:axis:reverse:inclusive:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_cumsum();
  }
  __break(1u);
  __break(1u);
}

void cumsum(_:reverse:inclusive:stream:)()
{
}

void diag(_:k:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_diag();
  }
  __break(1u);
  __break(1u);
}

void diagonal(_:offset:axis1:axis2:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000 || a4 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_10;
  }
  if (a4 <= 0x7FFFFFFF) {
    mlx_diagonal();
  }
LABEL_11:
  __break(1u);
  __break(1u);
}

void exp(_:stream:)()
{
}

void flattened(_:start:end:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_flatten();
  }
LABEL_8:
  __break(1u);
  __break(1u);
}

void floor(_:stream:)()
{
}

void floorDivide<A>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v8);
  (*(void (**)(char *, uint64_t, uint64_t))(a5 + 8))(&v8, a4, a5);
  mlx_floor_divide();
}

void log(_:stream:)()
{
}

void log2(_:stream:)()
{
}

void log10(_:stream:)()
{
}

void log1p(_:stream:)()
{
}

void logSumExp(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
}

void logSumExp(_:axis:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_logsumexp();
  }
  __break(1u);
  __break(1u);
}

void logSumExp(_:keepDims:stream:)()
{
}

void matmul(_:_:stream:)()
{
}

void max(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
}

void max(_:axis:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_max();
  }
  __break(1u);
  __break(1u);
}

void max(_:keepDims:stream:)()
{
}

void mean(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
}

void mean(_:axis:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_mean();
  }
  __break(1u);
  __break(1u);
}

void mean(_:keepDims:stream:)()
{
}

void min(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
}

void min(_:axis:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_min();
  }
  __break(1u);
  __break(1u);
}

void min(_:keepDims:stream:)()
{
}

void movedAxis(_:source:destination:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_moveaxis();
  }
LABEL_8:
  __break(1u);
  __break(1u);
}

void pow(_:_:stream:)()
{
}

void pow<A>(_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  sub_256FE5804(dtype, &v8);
  (*(void (**)(char *, uint64_t, uint64_t))(a5 + 8))(&v8, a4, a5);
  mlx_power();
}

void pow<A>(_:_:stream:)(uint64_t a1, uint64_t a2)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a2 + 16));
  sub_256FE5804(dtype, &v3);
  swift_retain();
  mlx_power();
}

void product(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
}

void product(_:axis:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_prod();
  }
  __break(1u);
  __break(1u);
}

void product(_:keepDims:stream:)()
{
}

void reciprocal(_:stream:)()
{
}

void _s8Morpheus8reshaped__6streamAA8MLXArrayCAE_SaySiGAA14StreamOrDeviceVtF_0(uint64_t a1, uint64_t a2)
{
}

void round(_:decimals:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_round();
  }
  __break(1u);
  __break(1u);
}

void rsqrt(_:stream:)()
{
}

void sin(_:stream:)()
{
}

void split(_:parts:axis:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_split_equal_parts();
  }
LABEL_8:
  __break(1u);
  __break(1u);
}

uint64_t split(_:axis:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_split_equal_parts();
  }
  __break(1u);
  uint64_t v5 = MEMORY[0x25A2B0EE0](0, v3);
  MEMORY[0x25A2B0EE0](1, v3);
  swift_bridgeObjectRelease();
  mlx_free(v2);
  return v5;
}

uint64_t split(_:indices:axis:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Array<A>.asInt32.getter(a2);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    mlx_split();
  }
  __break(1u);
  __break(1u);
  return result;
}

void sqrt(_:stream:)()
{
}

void square(_:stream:)()
{
}

void squeezed(_:axes:stream:)(uint64_t a1, uint64_t a2)
{
}

void squeezed(_:axis:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_squeeze();
  }
  __break(1u);
  __break(1u);
}

void squeezed(_:stream:)()
{
}

void sum(_:axes:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
}

void sum(_:axis:keepDims:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_sum();
  }
  __break(1u);
  __break(1u);
}

void sum(_:keepDims:stream:)()
{
}

void swappedAxes(_:_:_:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_swapaxes();
  }
LABEL_8:
  __break(1u);
  __break(1u);
}

void take(_:_:axis:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    mlx_take();
  }
  __break(1u);
  __break(1u);
}

void take(_:_:stream:)()
{
}

void _s8Morpheus10transposed_4axes6streamAA8MLXArrayCAF_SaySiGAA14StreamOrDeviceVtF_0(uint64_t a1, uint64_t a2)
{
}

void transposed(_:axis:stream:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_transpose();
  }
  __break(1u);
  __break(1u);
}

void transposed(_:stream:)()
{
}

void T(_:stream:)()
{
}

uint64_t variance(_:axes:keepDims:ddof:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = Array<A>.asInt32.getter(a2);
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a4 <= 0x7FFFFFFF)
  {
    mlx_var();
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t variance(_:axis:keepDims:ddof:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = *(void *)(result + 16);
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a4 <= 0x7FFFFFFF) {
    mlx_var();
  }
LABEL_9:
  __break(1u);
  __break(1u);
  return result;
}

void variance(_:keepDims:ddof:stream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    mlx_var_all();
  }
  __break(1u);
  __break(1u);
}

void MLXArray.__allocating_init(_:)()
{
}

{
  mlx_array_from_float();
}

{
  mlx_array_from_BOOL();
}

uint64_t MLXArray.__allocating_init<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_256FCEC60(a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  int v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v9 = sub_25704AB20();
  if (AssociatedTypeWitness == MEMORY[0x263F8D6C8])
  {
    uint64_t v11 = sub_25704AF50();
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_256FCED74(v11, a2);
  }
  else
  {
    uint64_t v10 = sub_256FCEC60(v9, a2, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a3);
  return v10;
}

uint64_t MLXArray.__allocating_init(_:)(uint64_t result)
{
  if (result == (int)result) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v12[2] = a2;
  v12[3] = a3;
  sub_256FCD0E4(a1, (uint64_t)sub_256FD368C, (uint64_t)v12, a2, MEMORY[0x263F8E628], MEMORY[0x263F8DD08], MEMORY[0x263F8E658], a8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  uint64_t v10 = v12[5];
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v10;
  return result;
}

uint64_t MLXArray.__allocating_init<A>(_:dtype:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_256FCEF44(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  return v5;
}

uint64_t MLXArray.__allocating_init(int64:)(uint64_t a1)
{
  v3[1] = *MEMORY[0x263EF8340];
  v3[0] = a1;
  uint64_t v1 = mlx_array_from_data((uint64_t)v3, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
  if (!v1) {
    __break(1u);
  }
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

void sub_256FCD0D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __break(1u);
}

uint64_t sub_256FCD0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_256FCD208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v7, a2, a3);
  uint64_t result = mlx_array_from_data(a1, (char *)(MEMORY[0x263F8EE78] + 32), 0, v7);
  if (result) {
    *a4 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_256FCD294@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  if (a1)
  {
    uint64_t v8 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_25706E4C0;
    *(void *)(v8 + 32) = MEMORY[0x25A2B0B50](a2, a3);
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_25704A750();
  if (!result) {
    goto LABEL_9;
  }
  uint64_t v11 = result;
  uint64_t v12 = Array<A>.asInt32.getter(v8);
  unint64_t v13 = *(void *)(v8 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v13 >> 31)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v15, a3, a4);
  uint64_t v14 = mlx_array_from_data(v11, (char *)(v12 + 32), v13, v15);
  uint64_t result = swift_bridgeObjectRelease();
  if (v14)
  {
    *a5 = v14;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_256FCED74(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_256FCD418@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4 = result;
  if (a2)
  {
    uint64_t v6 = a2;
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
  uint64_t result = swift_allocObject();
  uint64_t v6 = result;
  *(_OWORD *)(result + 16) = xmmword_25706E4C0;
  *(void *)(result + 32) = *(void *)(a3 + 16);
  if (!v4) {
    goto LABEL_7;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  uint64_t v7 = Array<A>.asInt32.getter(v6);
  unint64_t v8 = *(void *)(v6 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8 >> 31)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = mlx_array_from_data(v4, (char *)(v7 + 32), v8, 4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a4 = v9;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init(int64:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 16);
  if (!a2) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(a2 + 32);
    uint64_t v6 = 1;
    while (1)
    {
      uint64_t v7 = *v5++;
      uint64_t v8 = v6 * v7;
      if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
        goto LABEL_10;
      }
      uint64_t v6 = v8;
      if (!--v4)
      {
        if (v8 != v3) {
          goto LABEL_9;
        }
        goto LABEL_7;
      }
    }
  }
  if (v3 == 1)
  {
LABEL_7:
    sub_256FCDA40(result + 32, a2, result, &v10);
    swift_bridgeObjectRelease();
    uint64_t v9 = v10;
    swift_bridgeObjectRelease();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v9;
    return result;
  }
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init(converting:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int64_t v4 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)(a2 + 32);
      uint64_t v7 = 1;
      while (1)
      {
        uint64_t v8 = *v6++;
        uint64_t v9 = v7 * v8;
        if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63) {
          goto LABEL_17;
        }
        uint64_t v7 = v9;
        if (!--v5)
        {
          if (v9 != v4) {
            goto LABEL_16;
          }
          goto LABEL_7;
        }
      }
    }
    if (v4 != 1)
    {
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      return result;
    }
  }
LABEL_7:
  if (v4)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    sub_256F90B58(0, v4, 0);
    uint64_t v10 = 0;
    uint64_t v11 = v17;
    unint64_t v12 = *(void *)(v17 + 16);
    do
    {
      double v13 = *(double *)(v3 + 8 * v10 + 32);
      uint64_t v17 = v11;
      unint64_t v14 = *(void *)(v11 + 24);
      if (v12 >= v14 >> 1)
      {
        sub_256F90B58(v14 > 1, v12 + 1, 1);
        uint64_t v11 = v17;
      }
      ++v10;
      float v15 = v13;
      *(void *)(v11 + 16) = v12 + 1;
      *(float *)(v11 + 4 * v12++ + 32) = v15;
    }
    while (v4 != v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  sub_256FCD758(v11 + 32, a2, v11, &v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v17;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v16;
  return result;
}

uint64_t sub_256FCD758@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4 = result;
  if (a2)
  {
    uint64_t v6 = a2;
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
  uint64_t result = swift_allocObject();
  uint64_t v6 = result;
  *(_OWORD *)(result + 16) = xmmword_25706E4C0;
  *(void *)(result + 32) = *(void *)(a3 + 16);
  if (!v4) {
    goto LABEL_7;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  uint64_t v7 = Array<A>.asInt32.getter(v6);
  unint64_t v8 = *(void *)(v6 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8 >> 31)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = mlx_array_from_data(v4, (char *)(v7 + 32), v8, 6);
  uint64_t result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a4 = v9;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void MLXArray.__allocating_init(_:_:)()
{
}

uint64_t MLXArray.__allocating_init(int64:_:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  MEMORY[0x270FA5388](v4);
  (*(void (**)(char *))(v6 + 16))((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_25704AB20();
  uint64_t v8 = *(void *)(result + 16);
  if (!a2) {
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(a2 + 32);
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t v12 = *v10++;
      uint64_t v13 = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63) {
        goto LABEL_10;
      }
      uint64_t v11 = v13;
      if (!--v9)
      {
        if (v13 != v8) {
          goto LABEL_9;
        }
        goto LABEL_7;
      }
    }
  }
  if (v8 == 1)
  {
LABEL_7:
    sub_256FCDA40(result + 32, a2, result, &v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v17;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v15;
  }
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_256FCDA40@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4 = result;
  if (a2)
  {
    uint64_t v6 = a2;
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
  uint64_t result = swift_allocObject();
  uint64_t v6 = result;
  *(_OWORD *)(result + 16) = xmmword_25706E4C0;
  *(void *)(result + 32) = *(void *)(a3 + 16);
  if (!v4) {
    goto LABEL_7;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  uint64_t v7 = Array<A>.asInt32.getter(v6);
  unint64_t v8 = *(void *)(v6 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8 >> 31)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = mlx_array_from_data(v4, (char *)(v7 + 32), v8, 5);
  uint64_t result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a4 = v9;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void MLXArray.__allocating_init<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t v8 = a3;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
      uint64_t v10 = (uint64_t *)(a3 + 32);
      uint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v10++;
        uint64_t v13 = v11 * v12;
        if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63)
        {
          __break(1u);
          goto LABEL_15;
        }
        uint64_t v11 = v13;
        --v9;
      }
      while (v9);
      if (v13 == a2) {
        goto LABEL_10;
      }
      goto LABEL_16;
    }
    if (a2 != 1)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_25706E4C0;
    *(void *)(v8 + 32) = a2;
  }
LABEL_10:
  uint64_t v14 = sub_25704A750();
  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v15 = v14;
  uint64_t v16 = Array<A>.asInt32.getter(v8);
  unint64_t v17 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  if (v17 >> 31)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v19, a4, a5);
  uint64_t v18 = mlx_array_from_data(v15, (char *)(v16 + 32), v17, v19);
  swift_bridgeObjectRelease();
  if (v18)
  {
    *(void *)(swift_allocObject() + 16) = v18;
    return;
  }
LABEL_18:
  __break(1u);
}

void MLXArray.__allocating_init<A>(_:_:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = sub_256FCDCFC(a4, a1, a2, a5);
  MLXArray.__allocating_init<A>(_:_:)(v9, v10, a3, a5, a6);
}

uint64_t sub_256FCDCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return a2;
  }
  uint64_t v4 = *(void *)(*(void *)(a4 - 8) + 72);
  if (v4)
  {
    if (a3 - a2 != 0x8000000000000000 || v4 != -1) {
      return a2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init<A>(_:_:type:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v33[3] = *MEMORY[0x263EF8340];
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v13 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      sub_256FD357C(a1, a2);
      uint64_t v14 = sub_25704A4B0();
      if (v14)
      {
        uint64_t v15 = sub_25704A4D0();
        if (!__OFSUB__((int)a1, v15))
        {
          v14 += (int)a1 - v15;
          goto LABEL_7;
        }
LABEL_32:
        __break(1u);
      }
LABEL_7:
      uint64_t v16 = sub_25704A4C0();
      if (v16 >= v13) {
        uint64_t v17 = (a1 >> 32) - (int)a1;
      }
      else {
        uint64_t v17 = v16;
      }
      uint64_t v18 = v14 + v17;
      if (v14) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      sub_256FCE01C(v14, v19, a4, a3, a5, a6, v33);
      sub_256FD3524(a1, a2);
LABEL_25:
      sub_256FD3524(a1, a2);
      uint64_t v30 = v33[0];
LABEL_28:
      swift_bridgeObjectRelease();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v30;
      return result;
    case 2uLL:
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v20 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v22 = sub_25704A4B0();
      if (!v22) {
        goto LABEL_17;
      }
      uint64_t v23 = sub_25704A4D0();
      if (__OFSUB__(v21, v23)) {
        goto LABEL_31;
      }
      v22 += v21 - v23;
LABEL_17:
      BOOL v24 = __OFSUB__(v20, v21);
      uint64_t v25 = v20 - v21;
      if (v24) {
        goto LABEL_30;
      }
      uint64_t v26 = sub_25704A4C0();
      if (v26 >= v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v22 + v27;
      if (v22) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      sub_256FCE01C(v22, v29, a4, a3, a5, a6, v33);
      swift_release();
      swift_release();
      goto LABEL_25;
    case 3uLL:
      memset(v33, 0, 14);
      uint64_t v12 = v33;
      goto LABEL_27;
    default:
      v33[0] = a1;
      LOWORD(v33[1]) = a2;
      BYTE2(v33[1]) = BYTE2(a2);
      BYTE3(v33[1]) = BYTE3(a2);
      BYTE4(v33[1]) = BYTE4(a2);
      BYTE5(v33[1]) = BYTE5(a2);
      uint64_t v12 = (uint64_t *)((char *)v33 + BYTE6(a2));
LABEL_27:
      sub_256FCE01C((uint64_t)v33, (uint64_t)v12, a4, a3, a5, a6, &v32);
      sub_256FD3524(a1, a2);
      uint64_t v30 = v32;
      goto LABEL_28;
  }
}

uint64_t sub_256FCE01C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result = sub_256FCDCFC(a3, a1, a2, a5);
  uint64_t v14 = v13;
  if (a4)
  {
    uint64_t v15 = *(void *)(a4 + 16);
    if (v15)
    {
      uint64_t v16 = (uint64_t *)(a4 + 32);
      uint64_t v17 = 1;
      while (1)
      {
        uint64_t v18 = *v16++;
        uint64_t v19 = v17 * v18;
        if ((unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63) {
          break;
        }
        uint64_t v17 = v19;
        if (!--v15) {
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    uint64_t v19 = 1;
LABEL_9:
    uint64_t v20 = a4;
    if (v19 != v13) {
      goto LABEL_16;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t result = swift_allocObject();
    uint64_t v20 = result;
    *(_OWORD *)(result + 16) = xmmword_25706E4C0;
    *(void *)(result + 32) = v14;
  }
  if (!a1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = Array<A>.asInt32.getter(v20);
  unint64_t v22 = *(void *)(v20 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v22 >> 31) {
    goto LABEL_15;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v24, a5, a6);
  uint64_t v23 = mlx_array_from_data(a1, (char *)(v21 + 32), v22, v24);
  uint64_t result = swift_bridgeObjectRelease();
  if (v23)
  {
    *a7 = v23;
    return result;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t MLXArray.__allocating_init(_:_:)(id a1, unsigned char *a2)
{
  v5[1] = *MEMORY[0x263EF8340];
  switch(*a2)
  {
    case 1:
      LOBYTE(v5[0]) = objc_msgSend(a1, sel_unsignedCharValue);
      uint64_t result = mlx_array_from_data((uint64_t)v5, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
      uint64_t v4 = result;
      if (result) {
        goto LABEL_11;
      }
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
      goto LABEL_16;
    case 2:
      LODWORD(v5[0]) = objc_msgSend(a1, sel_unsignedIntValue);
      uint64_t result = mlx_array_from_data((uint64_t)v5, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
      uint64_t v4 = result;
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_14;
    case 3:
      LOBYTE(v5[0]) = objc_msgSend(a1, sel_charValue);
      uint64_t result = mlx_array_from_data((uint64_t)v5, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
      uint64_t v4 = result;
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_15;
    case 4:
      objc_msgSend(a1, sel_intValue);
      mlx_array_from_int();
    case 5:
      v5[0] = objc_msgSend(a1, sel_longLongValue);
      uint64_t result = mlx_array_from_data((uint64_t)v5, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
      uint64_t v4 = result;
      if (result)
      {
LABEL_11:

        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v4;
      }
      else
      {
LABEL_16:
        __break(1u);
        __break(1u);
      }
      return result;
    case 6:
      objc_msgSend(a1, sel_floatValue);
      mlx_array_from_float();
    default:
      objc_msgSend(a1, sel_BOOLValue);
      mlx_array_from_BOOL();
  }
}

void sub_256FCE3A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FCE3A8);
  }
  _Unwind_Resume(a1);
}

uint64_t MLXArray.__allocating_init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = sub_256FD35D4(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_256FCE464@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_256FD35D4(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unint64_t _s8Morpheus8MLXArrayCyACSaySo8NSNumberCG_AA5DTypeOSaySiGSgtcfC_0(unint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v4 = result;
  uint64_t v5 = *a2;
  if (result >> 62)
  {
LABEL_97:
    uint64_t result = sub_25704B040();
    uint64_t v6 = result;
    if (!a3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!a3) {
      goto LABEL_10;
    }
  }
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(a3 + 32);
    uint64_t v9 = 1;
    do
    {
      uint64_t v10 = *v8++;
      uint64_t v11 = v9 * v10;
      if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
      {
        __break(1u);
        goto LABEL_97;
      }
      uint64_t v9 = v11;
      --v7;
    }
    while (v7);
    if (v11 == v6) {
      goto LABEL_10;
    }
    goto LABEL_99;
  }
  if (v6 != 1)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
    return result;
  }
LABEL_10:
  switch(v5)
  {
    case 1:
      if (v6)
      {
        uint64_t v65 = MEMORY[0x263F8EE78];
        uint64_t result = sub_256F90AE0(0, v6 & ~(v6 >> 63), 0);
        if (v6 < 0) {
          goto LABEL_101;
        }
        uint64_t v19 = 0;
        uint64_t v20 = v65;
        do
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v21 = (id)MEMORY[0x25A2B0EE0](v19, v4);
          }
          else {
            id v21 = *(id *)(v4 + 8 * v19 + 32);
          }
          unint64_t v22 = v21;
          unsigned __int8 v23 = objc_msgSend(v21, sel_unsignedCharValue);

          unint64_t v25 = *(void *)(v65 + 16);
          unint64_t v24 = *(void *)(v65 + 24);
          if (v25 >= v24 >> 1) {
            sub_256F90AE0(v24 > 1, v25 + 1, 1);
          }
          ++v19;
          *(void *)(v65 + 16) = v25 + 1;
          *(unsigned char *)(v65 + v25 + 32) = v23;
        }
        while (v6 != v19);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = MEMORY[0x263F8EE78];
      }
      uint64_t v62 = sub_256FA9FE8(v20, a3);
      goto LABEL_95;
    case 2:
      if (v6)
      {
        uint64_t v66 = MEMORY[0x263F8EE78];
        uint64_t result = sub_256F90AB8(0, v6 & ~(v6 >> 63), 0);
        if (v6 < 0) {
          goto LABEL_102;
        }
        uint64_t v26 = 0;
        uint64_t v27 = v66;
        do
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v28 = (id)MEMORY[0x25A2B0EE0](v26, v4);
          }
          else {
            id v28 = *(id *)(v4 + 8 * v26 + 32);
          }
          uint64_t v29 = v28;
          unsigned int v30 = objc_msgSend(v28, sel_unsignedIntValue);

          unint64_t v32 = *(void *)(v66 + 16);
          unint64_t v31 = *(void *)(v66 + 24);
          if (v32 >= v31 >> 1) {
            sub_256F90AB8(v31 > 1, v32 + 1, 1);
          }
          ++v26;
          *(void *)(v66 + 16) = v32 + 1;
          *(_DWORD *)(v66 + 4 * v32 + 32) = v30;
        }
        while (v6 != v26);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v27 = MEMORY[0x263F8EE78];
      }
      uint64_t v62 = sub_256FAA108(v27, a3);
      goto LABEL_95;
    case 3:
      if (v6)
      {
        uint64_t v67 = MEMORY[0x263F8EE78];
        uint64_t result = sub_256F90B30(0, v6 & ~(v6 >> 63), 0);
        if (v6 < 0) {
          goto LABEL_103;
        }
        uint64_t v33 = 0;
        uint64_t v34 = v67;
        do
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v35 = (id)MEMORY[0x25A2B0EE0](v33, v4);
          }
          else {
            id v35 = *(id *)(v4 + 8 * v33 + 32);
          }
          char v36 = v35;
          unsigned __int8 v37 = objc_msgSend(v35, sel_charValue);

          unint64_t v39 = *(void *)(v67 + 16);
          unint64_t v38 = *(void *)(v67 + 24);
          if (v39 >= v38 >> 1) {
            sub_256F90B30(v38 > 1, v39 + 1, 1);
          }
          ++v33;
          *(void *)(v67 + 16) = v39 + 1;
          *(unsigned char *)(v67 + v39 + 32) = v37;
        }
        while (v6 != v33);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v34 = MEMORY[0x263F8EE78];
      }
      uint64_t v62 = sub_256FA9C88(v34, a3);
      goto LABEL_95;
    case 4:
      if (v6)
      {
        uint64_t v68 = MEMORY[0x263F8EE78];
        uint64_t result = sub_256F90A30(0, v6 & ~(v6 >> 63), 0);
        if (v6 < 0) {
          goto LABEL_104;
        }
        uint64_t v40 = 0;
        uint64_t v41 = v68;
        do
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v42 = (id)MEMORY[0x25A2B0EE0](v40, v4);
          }
          else {
            id v42 = *(id *)(v4 + 8 * v40 + 32);
          }
          uint64_t v43 = v42;
          unsigned int v44 = objc_msgSend(v42, sel_intValue);

          unint64_t v46 = *(void *)(v68 + 16);
          unint64_t v45 = *(void *)(v68 + 24);
          if (v46 >= v45 >> 1) {
            sub_256F90A30(v45 > 1, v46 + 1, 1);
          }
          ++v40;
          *(void *)(v68 + 16) = v46 + 1;
          *(_DWORD *)(v68 + 4 * v46 + 32) = v44;
        }
        while (v6 != v40);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = MEMORY[0x263F8EE78];
      }
      uint64_t v62 = sub_256FA9DA8(v41, a3);
      goto LABEL_95;
    case 5:
      if (v6)
      {
        uint64_t v69 = MEMORY[0x263F8EE78];
        uint64_t result = sub_256F90B08(0, v6 & ~(v6 >> 63), 0);
        if (v6 < 0) {
          goto LABEL_105;
        }
        uint64_t v47 = 0;
        uint64_t v48 = v69;
        do
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v49 = (id)MEMORY[0x25A2B0EE0](v47, v4);
          }
          else {
            id v49 = *(id *)(v4 + 8 * v47 + 32);
          }
          uint64_t v50 = v49;
          id v51 = objc_msgSend(v49, sel_longLongValue);

          unint64_t v53 = *(void *)(v69 + 16);
          unint64_t v52 = *(void *)(v69 + 24);
          if (v53 >= v52 >> 1) {
            sub_256F90B08(v52 > 1, v53 + 1, 1);
          }
          ++v47;
          *(void *)(v69 + 16) = v53 + 1;
          *(void *)(v69 + 8 * v53 + 32) = v51;
        }
        while (v6 != v47);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v48 = MEMORY[0x263F8EE78];
      }
      uint64_t v62 = sub_256FA9EC8(v48, a3);
      goto LABEL_95;
    case 6:
      if (v6)
      {
        uint64_t v70 = MEMORY[0x263F8EE78];
        uint64_t result = sub_256F90B58(0, v6 & ~(v6 >> 63), 0);
        if (v6 < 0) {
          goto LABEL_106;
        }
        uint64_t v54 = 0;
        uint64_t v55 = v70;
        do
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v56 = (id)MEMORY[0x25A2B0EE0](v54, v4);
          }
          else {
            id v56 = *(id *)(v4 + 8 * v54 + 32);
          }
          uint64_t v57 = v56;
          objc_msgSend(v56, sel_floatValue);
          int v59 = v58;

          unint64_t v61 = *(void *)(v70 + 16);
          unint64_t v60 = *(void *)(v70 + 24);
          if (v61 >= v60 >> 1) {
            sub_256F90B58(v60 > 1, v61 + 1, 1);
          }
          ++v54;
          *(void *)(v70 + 16) = v61 + 1;
          *(_DWORD *)(v70 + 4 * v61 + 32) = v59;
        }
        while (v6 != v54);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v55 = MEMORY[0x263F8EE78];
      }
      uint64_t v62 = sub_256FA9B68(v55, a3);
      goto LABEL_95;
    default:
      if (v6)
      {
        uint64_t v64 = MEMORY[0x263F8EE78];
        uint64_t result = sub_256F90B78(0, v6 & ~(v6 >> 63), 0);
        if (v6 < 0) {
          goto LABEL_100;
        }
        uint64_t v12 = 0;
        uint64_t v13 = v64;
        do
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v14 = (id)MEMORY[0x25A2B0EE0](v12, v4);
          }
          else {
            id v14 = *(id *)(v4 + 8 * v12 + 32);
          }
          uint64_t v15 = v14;
          unsigned __int8 v16 = objc_msgSend(v14, sel_BOOLValue);

          unint64_t v18 = *(void *)(v64 + 16);
          unint64_t v17 = *(void *)(v64 + 24);
          if (v18 >= v17 >> 1) {
            sub_256F90B78(v17 > 1, v18 + 1, 1);
          }
          ++v12;
          *(void *)(v64 + 16) = v18 + 1;
          *(unsigned char *)(v64 + v18 + 32) = v16;
        }
        while (v6 != v12);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = MEMORY[0x263F8EE78];
      }
      uint64_t v62 = sub_256FA9A48(v13, a3);
LABEL_95:
      unint64_t v63 = v62;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v63;
      break;
  }
  return result;
}

uint64_t sub_256FCEC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MEMORY[0x25A2B0B50](a1, a3);
  if (!a2) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(a2 + 32);
    uint64_t v7 = 1;
    while (1)
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = v7 * v8;
      if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63) {
        goto LABEL_10;
      }
      uint64_t v7 = v9;
      if (!--v5)
      {
        if (v9 != result) {
          goto LABEL_9;
        }
        goto LABEL_7;
      }
    }
  }
  if (result == 1)
  {
LABEL_7:
    MEMORY[0x270FA5388](result);
    sub_25704AA90();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v10;
    return result;
  }
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_256FCED74(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int64_t v4 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)(a2 + 32);
      uint64_t v7 = 1;
      while (1)
      {
        uint64_t v8 = *v6++;
        uint64_t v9 = v7 * v8;
        if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63) {
          goto LABEL_27;
        }
        uint64_t v7 = v9;
        if (!--v5)
        {
          if (v9 != v4) {
            goto LABEL_24;
          }
          goto LABEL_7;
        }
      }
    }
    if (v4 != 1)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
LABEL_7:
  if (v4)
  {
    uint64_t v10 = (int64_t *)(result + 32);
    if (*(void *)(result + 32) != (int)*(void *)(result + 32))
    {
LABEL_30:
      __break(1u);
      return result;
    }
    if (v4 != 1)
    {
      uint64_t v11 = 5;
      do
      {
        uint64_t v12 = v11 - 3;
        if (__OFADD__(v11 - 4, 1)) {
          goto LABEL_28;
        }
        if (*(void *)(result + 8 * v11) != (int)*(void *)(result + 8 * v11)) {
          goto LABEL_29;
        }
        ++v11;
      }
      while (v12 != v4);
    }
    uint64_t v19 = MEMORY[0x263F8EE78];
    uint64_t result = sub_256F90A30(0, v4, 0);
    uint64_t v13 = v19;
    while (1)
    {
      int64_t v15 = *v10++;
      uint64_t v14 = v15;
      if (v15 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_25;
      }
      if (v14 > 0x7FFFFFFF) {
        goto LABEL_26;
      }
      uint64_t v19 = v13;
      unint64_t v17 = *(void *)(v13 + 16);
      unint64_t v16 = *(void *)(v13 + 24);
      if (v17 >= v16 >> 1)
      {
        uint64_t result = sub_256F90A30(v16 > 1, v17 + 1, 1);
        uint64_t v13 = v19;
      }
      *(void *)(v13 + 16) = v17 + 1;
      *(_DWORD *)(v13 + 4 * v17 + 32) = v14;
      if (!--v4) {
        goto LABEL_22;
      }
    }
  }
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_22:
  sub_256FCD418(v13 + 32, a2, v3, &v19);
  swift_bridgeObjectRelease();
  uint64_t v18 = v19;
  type metadata accessor for MLXArray();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v18;
  return result;
}

uint64_t sub_256FCEF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v233 = a1;
  uint64_t v3 = a3;
  uint64_t v241 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v225 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v225 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v225 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  unint64_t v16 = (char *)&v225 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v225 - v17;
  uint64_t v20 = (char *)*v19;
  v230 = (char *)v21[2];
  v231 = v21;
  ((void (*)(void *__return_ptr, uint64_t, uint64_t *))v230)(v238, v22, v21);
  v232 = v20;
  if (LOBYTE(v238[0]) == v20)
  {
    uint64_t v23 = v233;
    swift_getDynamicType();
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v18, v23, v3);
      swift_dynamicCast();
      mlx_array_from_int();
    }
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v16, v233, v3);
      swift_dynamicCast();
      mlx_array_from_BOOL();
    }
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v233, v3);
      swift_dynamicCast();
      mlx_array_from_float();
    }
    MEMORY[0x270FA5388](0);
    uint64_t v223 = v3;
    v224 = v231;
    sub_256FCD0E4(v233, (uint64_t)sub_256FD364C, (uint64_t)v221, v3, MEMORY[0x263F8E628], MEMORY[0x263F8DD08], MEMORY[0x263F8E658], v121);
    uint64_t v122 = v238[0];
    uint64_t v123 = swift_allocObject();
    *(void *)(v123 + 16) = v122;
    return v123;
  }
  unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v25 = v233;
  v24(v10, v233, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C8);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(&v235, (uint64_t)v238);
    switch((unint64_t)v232)
    {
      case 1uLL:
        goto LABEL_26;
      case 2uLL:
        uint64_t v43 = v239;
        unsigned int v44 = __swift_project_boxed_opaque_existential_1(v238, v239);
        uint64_t v45 = *(void *)(v43 - 8);
        MEMORY[0x270FA5388](v44);
        uint64_t v47 = (char *)&v225 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v45 + 16))(v47);
        sub_256FC9BDC();
        sub_25704AF70();
        if (BYTE4(v235)) {
          goto LABEL_205;
        }
        (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v43);
        uint64_t v48 = mlx_array_from_data((uint64_t)&v235, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
        if (v48) {
          goto LABEL_188;
        }
        __break(1u);
LABEL_23:
        uint64_t v49 = v239;
        uint64_t v50 = __swift_project_boxed_opaque_existential_1(v238, v239);
        uint64_t v51 = *(void *)(v49 - 8);
        MEMORY[0x270FA5388](v50);
        unint64_t v53 = (char *)&v225 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v51 + 16))(v53);
        sub_256FC9B88();
        sub_25704AF70();
        if (BYTE1(v235)) {
          goto LABEL_205;
        }
        (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v49);
        uint64_t v48 = mlx_array_from_data((uint64_t)&v235, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
        if (v48) {
          goto LABEL_188;
        }
        __break(1u);
LABEL_26:
        uint64_t v54 = v239;
        uint64_t v55 = __swift_project_boxed_opaque_existential_1(v238, v239);
        uint64_t v56 = *(void *)(v54 - 8);
        MEMORY[0x270FA5388](v55);
        int v58 = (char *)&v225 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v56 + 16))(v58);
        sub_256FC9C30();
        sub_25704AF70();
        if (BYTE1(v235)) {
          goto LABEL_205;
        }
        (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v54);
        uint64_t v48 = mlx_array_from_data((uint64_t)&v235, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
        if (v48) {
          goto LABEL_188;
        }
        __break(1u);
LABEL_29:
        uint64_t v59 = v239;
        unint64_t v60 = __swift_project_boxed_opaque_existential_1(v238, v239);
        uint64_t v61 = *(void *)(v59 - 8);
        MEMORY[0x270FA5388](v60);
        unint64_t v63 = (char *)&v225 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v61 + 16))(v63);
        sub_256FC9AE0();
        sub_25704AF70();
        if (BYTE8(v235))
        {
LABEL_205:
          *(void *)&long long v235 = 0;
          *((void *)&v235 + 1) = 0xE000000000000000;
          sub_25704ADF0();
          sub_25704B340();
          sub_25704A850();
          swift_bridgeObjectRelease();
          sub_25704A850();
          sub_25704A850();
          sub_25704A850();
          LODWORD(v224) = 0;
          uint64_t v223 = 3071;
          uint64_t result = sub_25704AFD0();
          goto LABEL_206;
        }
        (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v59);
        uint64_t v48 = mlx_array_from_data((uint64_t)&v235, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
        if (!v48)
        {
          __break(1u);
LABEL_32:
          uint64_t v64 = __swift_project_boxed_opaque_existential_1(v238, v239);
          MEMORY[0x270FA5388](v64);
          (*(void (**)(char *))(v66 + 16))((char *)&v225 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
          sub_256FC9A8C();
          sub_25704A580();
          mlx_array_from_float();
        }
        return result;
      case 3uLL:
        goto LABEL_23;
      case 4uLL:
        uint64_t v38 = v239;
        unint64_t v39 = __swift_project_boxed_opaque_existential_1(v238, v239);
        uint64_t v40 = *(void *)(v38 - 8);
        MEMORY[0x270FA5388](v39);
        id v42 = (char *)&v225 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v40 + 16))(v42);
        sub_256FC9B34();
        sub_25704AF70();
        if ((BYTE4(v235) & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v38);
          mlx_array_from_int();
        }
        goto LABEL_205;
      case 5uLL:
        goto LABEL_29;
      case 6uLL:
        goto LABEL_32;
      default:
        __swift_project_boxed_opaque_existential_1(v238, v239);
        sub_25704A6A0();
        mlx_array_from_BOOL();
    }
    goto LABEL_188;
  }
  uint64_t v237 = 0;
  long long v235 = 0u;
  long long v236 = 0u;
  sub_256FB11E8((uint64_t)&v235, &qword_269FDC8E8);
  v24(v7, v25, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_204;
  }
  sub_256FA81EC(&v235, (uint64_t)v238);
  switch((unint64_t)v232)
  {
    case 1uLL:
      uint64_t v3 = v239;
      uint64_t v94 = v240;
      char v95 = __swift_project_boxed_opaque_existential_1(v238, v239);
      v231 = &v225;
      uint64_t v96 = *(void *)(v3 - 8);
      uint64_t v70 = *(void *)(v96 + 64);
      MEMORY[0x270FA5388](v95);
      __n128 v79 = (char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v233 = v96;
      BOOL v97 = *(char **)(v96 + 16);
      uint64_t v69 = v96 + 16;
      v230 = v97;
      ((void (*)(char *))v97)(v79);
      if (sub_25704AD40())
      {
        uint64_t v20 = *(char **)(*(void *)(v94 + 24) + 16);
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v232 = (char *)&v225;
        MEMORY[0x270FA5388](AssociatedTypeWitness);
        swift_getAssociatedConformanceWitness();
        uint64_t v99 = sub_25704B210();
        unint64_t v16 = (char *)&v225;
        MEMORY[0x270FA5388](v99);
        sub_25704B1C0();
        char v100 = sub_25704A6E0();
        (*(void (**)(char *, uint64_t))(v233 + 8))((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        if ((v100 & 1) == 0) {
          goto LABEL_190;
        }
      }
      uint64_t v101 = sub_25704AD30();
      if (v101 < 8) {
        goto LABEL_99;
      }
      v229 = &v225;
      MEMORY[0x270FA5388](v101);
      v232 = (char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(void))v230)();
      LOBYTE(v235) = -1;
      char v102 = sub_25704AD40();
      uint64_t v103 = sub_25704AD30();
      if ((v102 & 1) == 0)
      {
        if (v103 >= 9) {
          goto LABEL_73;
        }
        sub_25704AD20();
        uint64_t v20 = *(char **)(v233 + 8);
LABEL_98:
        ((void (*)(char *, uint64_t))v20)(v232, v3);
LABEL_99:
        char v141 = sub_25704AD20();
        (*(void (**)(char *, uint64_t))(v233 + 8))(v79, v3);
        LOBYTE(v235) = v141;
        uint64_t v76 = mlx_array_from_data((uint64_t)&v235, (char *)(MEMORY[0x263F8EE78] + 32), 0, 1);
        uint64_t v48 = v76;
        if (v76) {
          goto LABEL_188;
        }
        __break(1u);
LABEL_101:
        v228 = &v225;
        MEMORY[0x270FA5388](v76);
        sub_256FAB5EC();
        sub_25704AD10();
        uint64_t v142 = sub_25704A6D0();
        uint64_t v143 = (void (*)(char *, uint64_t))v233;
        ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        v143(v230, v3);
        if (v142) {
          goto LABEL_197;
        }
LABEL_126:
        uint64_t v161 = sub_25704AD30();
        v230 = (char *)&v225;
        MEMORY[0x270FA5388](v161);
        ((void (*)(char *, char *, uint64_t))v16)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v20, v3);
        if (v161 < 33)
        {
          uint64_t v167 = sub_25704AD30();
          ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          if (v167 != 32 || (uint64_t v162 = sub_25704AD40(), (v162 & 1) != 0))
          {
LABEL_138:
            sub_25704AD20();
            ((void (*)(char *, uint64_t))v233)(v20, v3);
            mlx_array_from_int();
          }
        }
        else
        {
          uint64_t v162 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        }
        v229 = &v225;
        MEMORY[0x270FA5388](v162);
        ((void (*)(char *, char *, uint64_t))v16)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v20, v3);
        LODWORD(v235) = 0x7FFFFFFF;
        char v163 = sub_25704AD40();
        uint64_t v164 = sub_25704AD30();
        if (v163)
        {
          if (v164 > 32)
          {
            MEMORY[0x270FA5388](v164);
            sub_256FAB5EC();
            sub_25704AD10();
            char v165 = sub_25704A6D0();
            v166 = (void (*)(char *, uint64_t))v233;
            ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
            v166((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
LABEL_137:
            if ((v165 & 1) == 0) {
              goto LABEL_138;
            }
            __break(1u);
            goto LABEL_193;
          }
        }
        else if (v164 > 31)
        {
          LODWORD(v234) = 0x7FFFFFFF;
          MEMORY[0x270FA5388](v164);
          v168 = (char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v169 = (*(uint64_t (**)(char *, char *, uint64_t))(v69 + 32))(v168, v168, v3);
          MEMORY[0x270FA5388](v169);
          sub_256FAB5EC();
          sub_25704AD10();
          char v165 = sub_25704A6D0();
          unint64_t v170 = (void (*)(char *, uint64_t))v233;
          ((void (*)(char *, uint64_t))v233)(v168, v3);
          v170(v168, v3);
          goto LABEL_137;
        }
        sub_25704AD20();
        ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        goto LABEL_138;
      }
      if (v103 > 8)
      {
LABEL_73:
        unint64_t v16 = (char *)&v225;
        MEMORY[0x270FA5388](v103);
        sub_256FC99E4();
        sub_25704AD10();
        char v127 = sub_25704A6D0();
        uint64_t v20 = *(char **)(v233 + 8);
        ((void (*)(char *, uint64_t))v20)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        if (v127) {
          goto LABEL_71;
        }
        goto LABEL_98;
      }
      goto LABEL_94;
    case 2uLL:
      uint64_t v3 = v239;
      uint64_t v77 = __swift_project_boxed_opaque_existential_1(v238, v239);
      v231 = &v225;
      uint64_t v78 = *(void *)(v3 - 8);
      uint64_t v70 = *(void *)(v78 + 64);
      MEMORY[0x270FA5388](v77);
      __n128 v79 = (char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v233 = v78;
      v80 = *(char **)(v78 + 16);
      uint64_t v69 = v78 + 16;
      v230 = v80;
      ((void (*)(char *))v80)(v79);
      if (sub_25704AD40())
      {
        uint64_t v81 = swift_getAssociatedTypeWitness();
        v232 = (char *)&v225;
        MEMORY[0x270FA5388](v81);
        swift_getAssociatedConformanceWitness();
        uint64_t v82 = sub_25704B210();
        MEMORY[0x270FA5388](v82);
        sub_25704B1C0();
        char v83 = sub_25704A6E0();
        (*(void (**)(char *, uint64_t))(v233 + 8))((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        if ((v83 & 1) == 0)
        {
LABEL_190:
          LODWORD(v223) = 0;
          uint64_t v222 = 3451;
          v221[0] = 2;
          uint64_t result = sub_25704AFC0();
          goto LABEL_206;
        }
      }
      uint64_t v84 = sub_25704AD30();
      if (v84 < 32) {
        goto LABEL_92;
      }
      v229 = &v225;
      MEMORY[0x270FA5388](v84);
      v232 = (char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(void))v230)();
      LODWORD(v235) = -1;
      char v85 = sub_25704AD40();
      uint64_t v86 = sub_25704AD30();
      if (v85)
      {
        if (v86 <= 32)
        {
          uint64_t v132 = swift_getAssociatedTypeWitness();
          v228 = &v225;
          MEMORY[0x270FA5388](v132);
          swift_getAssociatedConformanceWitness();
          uint64_t v133 = sub_25704B210();
          v227 = &v225;
          MEMORY[0x270FA5388](v133);
          sub_25704B1C0();
          LODWORD(v226) = sub_25704A6C0();
          uint64_t v125 = *(uint64_t (**)(char *, uint64_t))(v233 + 8);
          uint64_t v134 = v125((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          LODWORD(v228) = v235;
          MEMORY[0x270FA5388](v134);
          uint64_t v135 = (char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
          ((void (*)(char *, char *, uint64_t))v230)(v135, v232, v3);
          if (v226)
          {
            uint64_t v70 = sub_25704AD20();
            v125(v135, v3);
            if (v228 < v70) {
              goto LABEL_71;
            }
          }
          else
          {
            v125((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          }
          goto LABEL_91;
        }
      }
      else if (v86 < 33)
      {
        sub_25704AD20();
        uint64_t v125 = *(uint64_t (**)(char *, uint64_t))(v233 + 8);
        goto LABEL_91;
      }
      MEMORY[0x270FA5388](v86);
      sub_256FC98E8();
      sub_25704AD10();
      char v124 = sub_25704A6D0();
      uint64_t v125 = *(uint64_t (**)(char *, uint64_t))(v233 + 8);
      v125((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
      if (v124)
      {
LABEL_71:
        LODWORD(v223) = 0;
        uint64_t v222 = 3455;
        v221[0] = 2;
        uint64_t result = sub_25704AFC0();
LABEL_206:
        __break(1u);
        goto LABEL_207;
      }
LABEL_91:
      v125(v232, v3);
LABEL_92:
      int v136 = sub_25704AD20();
      (*(void (**)(char *, uint64_t))(v233 + 8))(v79, v3);
      LODWORD(v235) = v136;
      uint64_t v48 = mlx_array_from_data((uint64_t)&v235, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
      if (!v48)
      {
        __break(1u);
LABEL_94:
        uint64_t v137 = swift_getAssociatedTypeWitness();
        v228 = &v225;
        MEMORY[0x270FA5388](v137);
        swift_getAssociatedConformanceWitness();
        uint64_t v138 = sub_25704B210();
        v227 = &v225;
        MEMORY[0x270FA5388](v138);
        sub_25704B1C0();
        LODWORD(v226) = sub_25704A6C0();
        uint64_t v20 = *(char **)(v233 + 8);
        uint64_t v139 = ((uint64_t (*)(char *, uint64_t))v20)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        unint64_t v16 = (char *)&v225;
        LODWORD(v228) = v235;
        MEMORY[0x270FA5388](v139);
        uint64_t v140 = (char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, char *, uint64_t))v230)(v140, v232, v3);
        if (v226)
        {
          uint64_t v70 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v20)(v140, v3);
          if (v228 < v70) {
            goto LABEL_71;
          }
        }
        else
        {
          ((void (*)(char *, uint64_t))v20)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        }
        goto LABEL_98;
      }
LABEL_188:
      uint64_t v123 = swift_allocObject();
      *(void *)(v123 + 16) = v48;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v238);
      return v123;
    case 3uLL:
      uint64_t v3 = v239;
      uint64_t v26 = v240;
      uint64_t v87 = __swift_project_boxed_opaque_existential_1(v238, v239);
      v232 = (char *)&v225;
      uint64_t v28 = *(void *)(v3 - 8);
      uint64_t v29 = *(void *)(v28 + 64);
      MEMORY[0x270FA5388](v87);
      unint64_t v88 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
      unint64_t v31 = (char *)&v225 - v88;
      unint64_t v32 = *(void (**)(char *))(v28 + 16);
      v32((char *)&v225 - v88);
      uint64_t v89 = sub_25704AD40();
      char v90 = v89;
      v231 = &v225;
      MEMORY[0x270FA5388](v89);
      ((void (*)(char *, char *, uint64_t))v32)((char *)&v225 - v88, (char *)&v225 - v88, v3);
      if ((v90 & 1) == 0)
      {
        uint64_t v233 = *(void *)(v28 + 8);
        ((void (*)(char *, uint64_t))v233)((char *)&v225 - v88, v3);
        goto LABEL_142;
      }
      uint64_t v91 = sub_25704AD30();
      uint64_t v233 = *(void *)(v28 + 8);
      uint64_t v92 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - v88, v3);
      if (v91 <= 8) {
        goto LABEL_142;
      }
      v229 = &v225;
      MEMORY[0x270FA5388](v92);
      v230 = (char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(void))v32)();
      LOBYTE(v235) = 0x80;
      if (sub_25704AD40())
      {
        uint64_t v93 = sub_25704AD30();
        if (v93 < 8)
        {
LABEL_114:
          uint64_t v142 = (uint64_t)v230;
          char v150 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v233)(v230, v3);
          int v151 = (char)v235;
LABEL_141:
          if (v151 > v150)
          {
LABEL_199:
            __break(1u);
            goto LABEL_200;
          }
LABEL_142:
          uint64_t v176 = sub_25704AD30();
          v230 = (char *)&v225;
          MEMORY[0x270FA5388](v176);
          ((void (*)(char *, char *, uint64_t))v32)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v31, v3);
          if (v176 < 9)
          {
            uint64_t v185 = sub_25704AD30();
            ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
            if (v185 != 8) {
              goto LABEL_154;
            }
            uint64_t v177 = sub_25704AD40();
            if (v177) {
              goto LABEL_154;
            }
          }
          else
          {
            uint64_t v177 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          }
          v229 = &v225;
          MEMORY[0x270FA5388](v177);
          v178 = (char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
          ((void (*)(char *, char *, uint64_t))v32)(v178, v31, v3);
          LOBYTE(v235) = 127;
          char v179 = sub_25704AD40();
          uint64_t v180 = sub_25704AD30();
          if (v179)
          {
            if (v180 > 8)
            {
              MEMORY[0x270FA5388](v180);
              v181 = (char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
              sub_256FC9990();
              sub_25704AD10();
              char v182 = sub_25704A6D0();
              uint64_t v29 = v28 + 8;
              v183 = v181;
              v184 = (void (*)(char *, uint64_t))v233;
              ((void (*)(char *, uint64_t))v233)(v183, v3);
              v184(v178, v3);
              goto LABEL_153;
            }
          }
          else if (v180 > 7)
          {
            LOBYTE(v234) = 127;
            MEMORY[0x270FA5388](v180);
            unint64_t v32 = (void (*)(char *))((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
            uint64_t v186 = (*(uint64_t (**)(void (*)(char *), void (*)(char *), uint64_t))(v28 + 32))(v32, v32, v3);
            MEMORY[0x270FA5388](v186);
            sub_256FC9990();
            sub_25704AD10();
            char v182 = sub_25704A6D0();
            uint64_t v29 = v28 + 8;
            v187 = (void (*)(void (*)(void), uint64_t))v233;
            ((void (*)(void (*)(char *), uint64_t))v233)(v32, v3);
            v187((void (*)(void))v32, v3);
LABEL_153:
            if (v182)
            {
LABEL_193:
              __break(1u);
              goto LABEL_194;
            }
            goto LABEL_154;
          }
          sub_25704AD20();
          ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
LABEL_154:
          char v188 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v233)(v31, v3);
          LOBYTE(v235) = v188;
          uint64_t v48 = mlx_array_from_data((uint64_t)&v235, (char *)(MEMORY[0x263F8EE78] + 32), 0, 3);
          if (v48) {
            goto LABEL_188;
          }
          __break(1u);
          goto LABEL_156;
        }
      }
      else
      {
        char v129 = sub_25704AD40();
        uint64_t v93 = sub_25704AD30();
        if ((v129 & 1) == 0)
        {
          if (v93 >= 8)
          {
            ((void (*)(char *, uint64_t))v233)(v230, v3);
            goto LABEL_142;
          }
          goto LABEL_114;
        }
        if (v93 <= 8)
        {
          v228 = *(uint64_t **)(*(void *)(v26 + 24) + 16);
          uint64_t v171 = swift_getAssociatedTypeWitness();
          v226 = &v225;
          MEMORY[0x270FA5388](v171);
          v173 = (char *)&v225 - v172;
          swift_getAssociatedConformanceWitness();
          v227 = (uint64_t *)v173;
          uint64_t v174 = sub_25704B210();
          uint64_t v225 = (uint64_t)&v225;
          MEMORY[0x270FA5388](v174);
          sub_25704B1C0();
          LODWORD(v228) = sub_25704A6D0();
          uint64_t v175 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          v227 = &v225;
          MEMORY[0x270FA5388](v175);
          uint64_t v142 = (uint64_t)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v142, v230, v3);
          if (v228)
          {
LABEL_198:
            ((void (*)(uint64_t, uint64_t))v233)(v142, v3);
            goto LABEL_199;
          }
          LODWORD(v230) = (char)v235;
          char v150 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          int v151 = (int)v230;
          goto LABEL_141;
        }
      }
      v228 = &v225;
      MEMORY[0x270FA5388](v93);
      sub_256FC9990();
      sub_25704AD10();
      uint64_t v142 = sub_25704A6D0();
      char v144 = (void (*)(char *, uint64_t))v233;
      ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
      v144(v230, v3);
      if (v142) {
        goto LABEL_199;
      }
      goto LABEL_142;
    case 4uLL:
      uint64_t v3 = v239;
      uint64_t v67 = v240;
      uint64_t v68 = __swift_project_boxed_opaque_existential_1(v238, v239);
      v232 = (char *)&v225;
      uint64_t v69 = *(void *)(v3 - 8);
      uint64_t v70 = *(void *)(v69 + 64);
      MEMORY[0x270FA5388](v68);
      unint64_t v71 = (v70 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v20 = (char *)&v225 - v71;
      unint64_t v16 = *(char **)(v69 + 16);
      ((void (*)(char *))v16)((char *)&v225 - v71);
      uint64_t v72 = sub_25704AD40();
      char v73 = v72;
      v231 = &v225;
      MEMORY[0x270FA5388](v72);
      ((void (*)(char *, char *, uint64_t))v16)((char *)&v225 - v71, (char *)&v225 - v71, v3);
      if ((v73 & 1) == 0)
      {
        uint64_t v233 = *(void *)(v69 + 8);
        ((void (*)(char *, uint64_t))v233)((char *)&v225 - v71, v3);
        goto LABEL_126;
      }
      uint64_t v74 = sub_25704AD30();
      uint64_t v233 = *(void *)(v69 + 8);
      uint64_t v75 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - v71, v3);
      if (v74 <= 32) {
        goto LABEL_126;
      }
      v229 = &v225;
      MEMORY[0x270FA5388](v75);
      v230 = (char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(void))v16)();
      LODWORD(v235) = 0x80000000;
      if (sub_25704AD40())
      {
        uint64_t v76 = sub_25704AD30();
        if (v76 >= 32) {
          goto LABEL_101;
        }
      }
      else
      {
        char v128 = sub_25704AD40();
        uint64_t v76 = sub_25704AD30();
        if (v128)
        {
          if (v76 > 32) {
            goto LABEL_101;
          }
          v228 = *(uint64_t **)(*(void *)(v67 + 24) + 16);
          uint64_t v156 = swift_getAssociatedTypeWitness();
          v226 = &v225;
          MEMORY[0x270FA5388](v156);
          v158 = (char *)&v225 - v157;
          swift_getAssociatedConformanceWitness();
          v227 = (uint64_t *)v158;
          uint64_t v159 = sub_25704B210();
          uint64_t v225 = (uint64_t)&v225;
          MEMORY[0x270FA5388](v159);
          sub_25704B1C0();
          LODWORD(v228) = sub_25704A6D0();
          uint64_t v160 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          v227 = &v225;
          MEMORY[0x270FA5388](v160);
          uint64_t v142 = (uint64_t)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v142, v230, v3);
          if (v228)
          {
            ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
            goto LABEL_197;
          }
          LODWORD(v230) = v235;
          int v148 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          int v149 = (int)v230;
LABEL_125:
          if (v149 <= v148) {
            goto LABEL_126;
          }
LABEL_197:
          __break(1u);
          goto LABEL_198;
        }
        if (v76 >= 32)
        {
          ((void (*)(char *, uint64_t))v233)(v230, v3);
          goto LABEL_126;
        }
      }
      uint64_t v142 = (uint64_t)v230;
      int v148 = sub_25704AD20();
      ((void (*)(char *, uint64_t))v233)(v230, v3);
      int v149 = v235;
      goto LABEL_125;
    case 5uLL:
      uint64_t v3 = v239;
      uint64_t v104 = v240;
      int v105 = __swift_project_boxed_opaque_existential_1(v238, v239);
      v232 = (char *)&v225;
      uint64_t v106 = *(void *)(v3 - 8);
      uint64_t v107 = *(void *)(v106 + 64);
      MEMORY[0x270FA5388](v105);
      unint64_t v108 = (v107 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v109 = (char *)&v225 - v108;
      uint64_t v110 = *(void (**)(char *))(v106 + 16);
      v110((char *)&v225 - v108);
      uint64_t v111 = sub_25704AD40();
      char v112 = v111;
      v231 = &v225;
      MEMORY[0x270FA5388](v111);
      ((void (*)(char *, char *, uint64_t))v110)((char *)&v225 - v108, (char *)&v225 - v108, v3);
      if ((v112 & 1) == 0)
      {
        uint64_t v233 = *(void *)(v106 + 8);
        ((void (*)(char *, uint64_t))v233)((char *)&v225 - v108, v3);
        goto LABEL_175;
      }
      uint64_t v113 = sub_25704AD30();
      uint64_t v233 = *(void *)(v106 + 8);
      uint64_t v114 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - v108, v3);
      if (v113 <= 64) {
        goto LABEL_175;
      }
      v229 = &v225;
      MEMORY[0x270FA5388](v114);
      v230 = (char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(void))v110)();
      *(void *)&long long v235 = 0x8000000000000000;
      if ((sub_25704AD40() & 1) == 0)
      {
        char v131 = sub_25704AD40();
        uint64_t v115 = sub_25704AD30();
        if ((v131 & 1) == 0)
        {
          if (v115 >= 64)
          {
            ((void (*)(char *, uint64_t))v233)(v230, v3);
            goto LABEL_175;
          }
          goto LABEL_120;
        }
        if (v115 <= 64)
        {
          v228 = *(uint64_t **)(*(void *)(v104 + 24) + 16);
          uint64_t v204 = swift_getAssociatedTypeWitness();
          v226 = &v225;
          MEMORY[0x270FA5388](v204);
          v206 = (char *)&v225 - v205;
          swift_getAssociatedConformanceWitness();
          v227 = (uint64_t *)v206;
          uint64_t v207 = sub_25704B210();
          uint64_t v225 = (uint64_t)&v225;
          MEMORY[0x270FA5388](v207);
          sub_25704B1C0();
          LODWORD(v228) = sub_25704A6D0();
          uint64_t v208 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          v227 = &v225;
          MEMORY[0x270FA5388](v208);
          uint64_t v142 = (uint64_t)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(uint64_t, char *, uint64_t))(v106 + 32))(v142, v230, v3);
          if (v228)
          {
LABEL_202:
            ((void (*)(uint64_t, uint64_t))v233)(v142, v3);
            goto LABEL_203;
          }
          v230 = (char *)v235;
          uint64_t v154 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          uint64_t v155 = v230;
          goto LABEL_174;
        }
LABEL_107:
        v228 = &v225;
        MEMORY[0x270FA5388](v115);
        sub_256FC993C();
        sub_25704AD10();
        char v146 = sub_25704A6D0();
        uint64_t v147 = (void (*)(char *, uint64_t))v233;
        ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        v147(v230, v3);
        if (v146) {
          goto LABEL_203;
        }
        goto LABEL_175;
      }
      uint64_t v115 = sub_25704AD30();
      if (v115 >= 64) {
        goto LABEL_107;
      }
LABEL_120:
      uint64_t v154 = sub_25704AD20();
      ((void (*)(char *, uint64_t))v233)(v230, v3);
      uint64_t v155 = (char *)v235;
LABEL_174:
      if (v154 < (uint64_t)v155)
      {
LABEL_203:
        __break(1u);
LABEL_204:
        uint64_t v237 = 0;
        long long v235 = 0u;
        long long v236 = 0u;
        sub_256FB11E8((uint64_t)&v235, &qword_269FDC948);
        v238[0] = 0;
        v238[1] = 0xE000000000000000;
        sub_25704ADF0();
        char v220 = (char)v232;
        sub_25704A850();
        ((void (*)(long long *__return_ptr, uint64_t, uint64_t *))v230)(&v235, v3, v231);
        sub_25704AF60();
        sub_25704A850();
        LOBYTE(v235) = v220;
        sub_25704AF60();
        LODWORD(v224) = 0;
        uint64_t v223 = 223;
        uint64_t result = sub_25704AFD0();
        goto LABEL_206;
      }
LABEL_175:
      uint64_t v209 = sub_25704AD30();
      v230 = (char *)&v225;
      MEMORY[0x270FA5388](v209);
      ((void (*)(char *, char *, uint64_t))v110)((char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), v109, v3);
      if (v209 < 65)
      {
        uint64_t v215 = sub_25704AD30();
        ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        if (v215 != 64) {
          goto LABEL_187;
        }
        uint64_t v210 = sub_25704AD40();
        if (v210) {
          goto LABEL_187;
        }
      }
      else
      {
        uint64_t v210 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
      }
      v229 = &v225;
      MEMORY[0x270FA5388](v210);
      ((void (*)(char *, char *, uint64_t))v110)((char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), v109, v3);
      *(void *)&long long v235 = 0x7FFFFFFFFFFFFFFFLL;
      char v211 = sub_25704AD40();
      uint64_t v212 = sub_25704AD30();
      if (v211)
      {
        if (v212 > 64)
        {
          MEMORY[0x270FA5388](v212);
          sub_256FC993C();
          sub_25704AD10();
          char v213 = sub_25704A6D0();
          v214 = (void (*)(char *, uint64_t))v233;
          ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          v214((char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          goto LABEL_186;
        }
LABEL_184:
        sub_25704AD20();
        ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        goto LABEL_187;
      }
      if (v212 <= 63) {
        goto LABEL_184;
      }
      uint64_t v234 = 0x7FFFFFFFFFFFFFFFLL;
      MEMORY[0x270FA5388](v212);
      v216 = (char *)&v225 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v217 = (*(uint64_t (**)(char *, char *, uint64_t))(v106 + 32))(v216, v216, v3);
      MEMORY[0x270FA5388](v217);
      sub_256FC993C();
      sub_25704AD10();
      char v213 = sub_25704A6D0();
      v218 = (void (*)(char *, uint64_t))v233;
      ((void (*)(char *, uint64_t))v233)(v216, v3);
      v218(v216, v3);
LABEL_186:
      if (v213) {
        goto LABEL_195;
      }
LABEL_187:
      uint64_t v219 = sub_25704AD20();
      ((void (*)(char *, uint64_t))v233)(v109, v3);
      *(void *)&long long v235 = v219;
      uint64_t result = mlx_array_from_data((uint64_t)&v235, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
      uint64_t v48 = result;
      if (result) {
        goto LABEL_188;
      }
LABEL_207:
      __break(1u);
      return result;
    case 6uLL:
      uint64_t v116 = v239;
      uint64_t v117 = __swift_project_boxed_opaque_existential_1(v238, v239);
      uint64_t v118 = *(void *)(v116 - 8);
      MEMORY[0x270FA5388](v117);
      uint64_t v120 = (char *)&v225 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v118 + 16))(v120);
      if (sub_25704AD30() < 65)
      {
        sub_25704AD40();
        sub_25704AD20();
      }
      else
      {
        sub_256FC9A8C();
        sub_256FC9BDC();
        sub_25704A590();
      }
      (*(void (**)(char *, uint64_t))(v118 + 8))(v120, v116);
      mlx_array_from_float();
    default:
      uint64_t v3 = v239;
      uint64_t v26 = v240;
      uint64_t v27 = __swift_project_boxed_opaque_existential_1(v238, v239);
      v232 = (char *)&v225;
      uint64_t v28 = *(void *)(v3 - 8);
      uint64_t v29 = *(void *)(v28 + 64);
      MEMORY[0x270FA5388](v27);
      unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
      unint64_t v31 = (char *)&v225 - v30;
      unint64_t v32 = *(void (**)(char *))(v28 + 16);
      v32((char *)&v225 - v30);
      uint64_t v33 = sub_25704AD40();
      char v34 = v33;
      v231 = &v225;
      MEMORY[0x270FA5388](v33);
      ((void (*)(char *, char *, uint64_t))v32)((char *)&v225 - v30, (char *)&v225 - v30, v3);
      if ((v34 & 1) == 0)
      {
        uint64_t v233 = *(void *)(v28 + 8);
        ((void (*)(char *, uint64_t))v233)((char *)&v225 - v30, v3);
        goto LABEL_159;
      }
      uint64_t v35 = sub_25704AD30();
      uint64_t v233 = *(void *)(v28 + 8);
      uint64_t v36 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - v30, v3);
      if (v35 <= 64) {
        goto LABEL_159;
      }
      v229 = &v225;
      MEMORY[0x270FA5388](v36);
      v230 = (char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(void))v32)();
      *(void *)&long long v235 = 0x8000000000000000;
      if (sub_25704AD40())
      {
        uint64_t v37 = sub_25704AD30();
        if (v37 < 64)
        {
LABEL_117:
          uint64_t v142 = (uint64_t)v230;
          uint64_t v152 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v233)(v230, v3);
          uint64_t v153 = (char *)v235;
LABEL_158:
          if (v152 < (uint64_t)v153)
          {
LABEL_201:
            __break(1u);
            goto LABEL_202;
          }
LABEL_159:
          uint64_t v194 = sub_25704AD30();
          v230 = (char *)&v225;
          MEMORY[0x270FA5388](v194);
          ((void (*)(char *, char *, uint64_t))v32)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v31, v3);
          if (v194 < 65)
          {
            uint64_t v200 = sub_25704AD30();
            ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
            if (v200 != 64) {
              goto LABEL_171;
            }
            uint64_t v195 = sub_25704AD40();
            if (v195) {
              goto LABEL_171;
            }
          }
          else
          {
            uint64_t v195 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          }
          v229 = &v225;
          MEMORY[0x270FA5388](v195);
          ((void (*)(char *, char *, uint64_t))v32)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v31, v3);
          *(void *)&long long v235 = 0x7FFFFFFFFFFFFFFFLL;
          char v196 = sub_25704AD40();
          uint64_t v197 = sub_25704AD30();
          if (v196)
          {
            if (v197 > 64)
            {
              MEMORY[0x270FA5388](v197);
              sub_256FC9A38();
              sub_25704AD10();
              char v198 = sub_25704A6D0();
              v199 = (void (*)(char *, uint64_t))v233;
              ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
              v199((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
              goto LABEL_170;
            }
          }
          else if (v197 > 63)
          {
            uint64_t v234 = 0x7FFFFFFFFFFFFFFFLL;
            MEMORY[0x270FA5388](v197);
            v201 = (char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v202 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 32))(v201, v201, v3);
            MEMORY[0x270FA5388](v202);
            sub_256FC9A38();
            sub_25704AD10();
            char v198 = sub_25704A6D0();
            v203 = (void (*)(char *, uint64_t))v233;
            ((void (*)(char *, uint64_t))v233)(v201, v3);
            v203(v201, v3);
LABEL_170:
            if (v198)
            {
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
            }
LABEL_171:
            sub_25704AD20();
            ((void (*)(char *, uint64_t))v233)(v31, v3);
            mlx_array_from_BOOL();
          }
          sub_25704AD20();
          ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          goto LABEL_171;
        }
      }
      else
      {
        char v130 = sub_25704AD40();
        uint64_t v37 = sub_25704AD30();
        if ((v130 & 1) == 0)
        {
          if (v37 >= 64)
          {
            ((void (*)(char *, uint64_t))v233)(v230, v3);
            goto LABEL_159;
          }
          goto LABEL_117;
        }
        if (v37 <= 64)
        {
LABEL_156:
          v228 = *(uint64_t **)(*(void *)(v26 + 24) + 16);
          uint64_t v189 = swift_getAssociatedTypeWitness();
          v226 = &v225;
          MEMORY[0x270FA5388](v189);
          v191 = (char *)&v225 - v190;
          swift_getAssociatedConformanceWitness();
          v227 = (uint64_t *)v191;
          uint64_t v192 = sub_25704B210();
          uint64_t v225 = (uint64_t)&v225;
          MEMORY[0x270FA5388](v192);
          sub_25704B1C0();
          LODWORD(v228) = sub_25704A6D0();
          uint64_t v193 = ((uint64_t (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          v227 = &v225;
          MEMORY[0x270FA5388](v193);
          uint64_t v142 = (uint64_t)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v142, v230, v3);
          if (v228)
          {
LABEL_200:
            ((void (*)(uint64_t, uint64_t))v233)(v142, v3);
            goto LABEL_201;
          }
          v230 = (char *)v235;
          uint64_t v152 = sub_25704AD20();
          ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
          uint64_t v153 = v230;
          goto LABEL_158;
        }
      }
      v228 = &v225;
      MEMORY[0x270FA5388](v37);
      sub_256FC9A38();
      sub_25704AD10();
      uint64_t v142 = sub_25704A6D0();
      uint64_t v145 = (void (*)(char *, uint64_t))v233;
      ((void (*)(char *, uint64_t))v233)((char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
      v145(v230, v3);
      if (v142) {
        goto LABEL_201;
      }
      goto LABEL_159;
  }
}

void sub_256FD3460(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FD3468);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_256FD3524(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_256FD357C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_256FD35D4(uint64_t result)
{
  if (*(void *)(result + 16) >> 31)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)uint64_t v2 = *(void *)(result + 16);
    uint64_t result = mlx_array_from_data(result + 32, v2, 1, 4);
    uint64_t v1 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_256FD364C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_256FCD208(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_256FD366C@<X0>(uint64_t *a1@<X8>)
{
  return sub_256FCD294(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_256FD368C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_256FD364C(a1, a2);
}

uint64_t NestedDictionary.flattened(prefix:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(swift_allocObject() + 16) = v5;
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)type metadata accessor for NestedItem();
  uint64_t v7 = NestedItem.flattened(prefix:)(a1, a2, v6);
  swift_release();
  return v7;
}

uint64_t IndentedDescription.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(a2 + 16))(0, a1, a2);
}

uint64_t indentedDescription(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256FB118C(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC950);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(v8, (uint64_t)v11);
    uint64_t v4 = v12;
    uint64_t v5 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_256FDE89C((uint64_t)v8);
    sub_256FB118C(a1, (uint64_t)v11);
    return sub_25704A7D0();
  }
  return v6;
}

uint64_t NestedItem.unwrap()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *v2;
  switch((unint64_t)*v2 >> 62)
  {
    case 1uLL:
      uint64_t v19 = *(void *)((result & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      MEMORY[0x270FA5388](result);
      long long v16 = *(_OWORD *)(a1 + 16);
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v11 = sub_25704AB00();
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v10 = sub_256F9A130((void (*)(char *, char *))sub_256FDE914, (uint64_t)&v15, v11, v12, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v14);
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC960);
      goto LABEL_8;
    case 2uLL:
      MEMORY[0x270FA5388](result);
      long long v18 = *(_OWORD *)(a1 + 16);
      long long v16 = v18;
      uint64_t v17 = *(void *)(a1 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
      uint64_t v10 = sub_25704A630();
      uint64_t result = sub_25704A650();
LABEL_8:
      *(void *)(a2 + 24) = result;
      *(void *)a2 = v10;
      break;
    case 3uLL:
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    default:
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t v7 = swift_projectBox();
      *(void *)(a2 + 24) = v6;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a2);
      uint64_t v9 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
      uint64_t result = v9(boxed_opaque_existential_0, v7, v6);
      break;
  }
  return result;
}

uint64_t NestedItem.mapValues<A>(_:)(void (*a1)(char *), uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = a3[3];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v4;
  unint64_t v16 = 0xC000000000000000;
  switch((unint64_t)*v4 >> 62)
  {
    case 1uLL:
      unint64_t v32 = v12;
      uint64_t v19 = *(void *)((result & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v20 = v11;
      uint64_t v21 = swift_allocObject();
      unint64_t v31 = &v30;
      v33[2] = v19;
      MEMORY[0x270FA5388](v21);
      *(&v30 - 6) = a3[2];
      *(&v30 - 5) = v9;
      uint64_t v22 = a3[4];
      *(&v30 - 4) = a4;
      *(&v30 - 3) = v22;
      *(&v30 - 2) = (uint64_t)a1;
      *(&v30 - 1) = v20;
      uint64_t v23 = sub_25704AB00();
      uint64_t v24 = type metadata accessor for NestedItem();
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC968);
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t result = sub_256F9A130((void (*)(char *, char *))sub_256FDE9CC, (uint64_t)(&v30 - 8), v23, v24, v25, WitnessTable, MEMORY[0x263F8E4E0], (uint64_t)v33);
      if (v5) {
        return swift_deallocUninitializedObject();
      }
      *(void *)(v21 + 16) = result;
      unint64_t v16 = v21 | 0x4000000000000000;
      goto LABEL_11;
    case 2uLL:
      unint64_t v32 = v12;
      uint64_t v30 = *(void *)((result & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v27 = v11;
      uint64_t v28 = swift_allocObject();
      unint64_t v31 = &v30;
      MEMORY[0x270FA5388](v28);
      *(&v30 - 6) = a3[2];
      *(&v30 - 5) = v9;
      uint64_t v29 = a3[4];
      *(&v30 - 4) = a4;
      *(&v30 - 3) = v29;
      *(&v30 - 2) = (uint64_t)a1;
      *(&v30 - 1) = v27;
      type metadata accessor for NestedItem();
      uint64_t result = sub_25704A630();
      if (v5) {
        return swift_deallocUninitializedObject();
      }
      *(void *)(v28 + 16) = result;
      unint64_t v16 = v28 | 0x8000000000000000;
LABEL_11:
      uint64_t v12 = v32;
      goto LABEL_12;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v17 = v12;
      uint64_t v18 = swift_projectBox();
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v18, v9);
      unint64_t v16 = swift_allocBox();
      a1(v14);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
        return swift_deallocBox();
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
        uint64_t v12 = v17;
LABEL_12:
        unint64_t *v12 = v16;
      }
      return result;
  }
}

uint64_t NestedItem.mapValues<A, B, C>(_:_:)(void *a1, void *a2, unint64_t *a3, void (*a4)(uint64_t, uint64_t, char *, char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v249 = a5;
  v250 = a4;
  v227 = a2;
  v226 = a1;
  uint64_t v13 = *(void *)(a6 + 16);
  uint64_t v246 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  long long v235 = (char *)&v220 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v247 = (uint64_t)&v220 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v220 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v248 = (uint64_t *)sub_25704AC70();
  uint64_t v244 = *(v248 - 1);
  uint64_t v21 = MEMORY[0x270FA5388](v248);
  v238 = (char *)&v220 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v237 = (char *)&v220 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v239 = (char *)&v220 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  long long v236 = (char *)&v220 - v28;
  uint64_t v29 = *(void *)(a7 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v27);
  v242 = (char *)&v220 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v234 = *(void *)(a9 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v233 = (char *)&v220 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  v232 = (char *)&v220 - v34;
  uint64_t v253 = a7;
  uint64_t v35 = sub_25704AC70();
  uint64_t v243 = *(void *)(v35 - 8);
  uint64_t v36 = MEMORY[0x270FA5388](v35);
  uint64_t v241 = (char *)&v220 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  uint64_t v240 = (char *)&v220 - v38;
  uint64_t v254 = a9;
  uint64_t v39 = sub_25704AC70();
  uint64_t v40 = MEMORY[0x270FA5388](v39);
  id v42 = (char *)&v220 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = MEMORY[0x270FA5388](v40);
  uint64_t v44 = MEMORY[0x270FA5388](v43);
  uint64_t v45 = MEMORY[0x270FA5388](v44);
  uint64_t v251 = a8;
  uint64_t v46 = MEMORY[0x270FA5388](v45);
  uint64_t v47 = MEMORY[0x270FA5388](v46);
  uint64_t v252 = a6;
  uint64_t v48 = *(void *)(*(void *)(a6 + 24) - 8);
  uint64_t v49 = MEMORY[0x270FA5388](v47);
  uint64_t v51 = (char *)&v220 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v49);
  uint64_t v62 = (char *)&v220 - v61;
  unint64_t v63 = *a3;
  uint64_t v64 = (char *)*v245;
  switch(*v245 >> 62)
  {
    case 1:
      uint64_t v115 = *(void *)(((unint64_t)v64 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v246 = (unint64_t)v64 & 0x3FFFFFFFFFFFFFFFLL;
      if (v63 >> 62 == 1)
      {
        uint64_t v116 = v63 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v117 = *(void *)((v63 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v118 = type metadata accessor for NestedItem();
        swift_retain();
        v245 = (void *)v116;
        swift_retain();
        v248 = (uint64_t *)v118;
        uint64_t v264 = sub_25704A570();
        uint64_t v247 = type metadata accessor for NestedItem();
        uint64_t v119 = sub_25704A570();
        uint64_t v262 = v115;
        uint64_t v263 = v119;
        uint64_t v120 = sub_25704AB00();
        uint64_t WitnessTable = swift_getWitnessTable();
        MEMORY[0x25A2B09E0](&v257, v120, WitnessTable);
        uint64_t v262 = v257;
        sub_25704B030();
        sub_25704B000();
        sub_25704B020();
        sub_25704B010();
        uint64_t v122 = v258;
        if ((~v258 & 0xF000000000000007) == 0)
        {
LABEL_43:
          swift_bridgeObjectRelease();
          uint64_t v128 = swift_allocObject();
          *(void *)(v128 + 16) = v264;
          void *v226 = v128 | 0x4000000000000000;
          uint64_t v129 = swift_allocObject();
          *(void *)(v129 + 16) = v263;
          swift_release();
          uint64_t result = swift_release();
          unint64_t v114 = v129 | 0x4000000000000000;
          goto LABEL_83;
        }
        uint64_t v123 = v257;
        uint64_t v124 = type metadata accessor for NestedItem();
        while (1)
        {
          if (v123 >= MEMORY[0x25A2B0B50](v117, v124))
          {
            unint64_t v125 = 0xC000000000000000;
          }
          else
          {
            sub_25704AB30();
            unint64_t v125 = v257;
          }
          unint64_t v261 = v122;
          unint64_t v256 = v125;
          uint64_t v126 = v255;
          NestedItem.mapValues<A, B, C>(_:_:)(&v257, &v262, &v256, v250, v249, v252, v253, v251, v254);
          if (v126) {
            break;
          }
          v255 = 0;
          uint64_t v127 = v262;
          sub_25704AB00();
          swift_retain();
          sub_25704AAE0();
          uint64_t v257 = v127;
          sub_25704AB00();
          swift_retain();
          sub_25704AAE0();
          swift_release();
          swift_release();
          swift_release();
          sub_256FDE9F8(v123, v122);
          sub_25704B010();
          uint64_t v123 = v257;
          uint64_t v122 = v258;
          if ((~v258 & 0xF000000000000007) == 0) {
            goto LABEL_43;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        sub_256FDE9F8(v123, v122);
        swift_release();
        return swift_release();
      }
      else
      {
        v242 = v64;
        if (v63 >> 62 != 3 || v63 != 0xC000000000000000) {
          goto LABEL_98;
        }
        v248 = &v220;
        uint64_t v259 = v115;
        MEMORY[0x270FA5388](result);
        *(&v220 - 8) = v13;
        *(&v220 - 7) = v154;
        uint64_t v155 = v252;
        uint64_t v156 = v251;
        *(&v220 - 6) = v253;
        *(&v220 - 5) = v156;
        uint64_t v157 = *(void *)(v155 + 32);
        uint64_t v158 = v254;
        *(&v220 - 4) = v254;
        *(&v220 - 3) = v157;
        uint64_t v218 = (uint64_t)v250;
        uint64_t v219 = v249;
        uint64_t v252 = v154;
        uint64_t v159 = sub_25704AB00();
        uint64_t v160 = type metadata accessor for NestedItem();
        uint64_t v161 = (void (*)(uint64_t, uint64_t, char *, char *))type metadata accessor for NestedItem();
        swift_retain();
        uint64_t v249 = v160;
        v250 = v161;
        uint64_t v162 = swift_getTupleTypeMetadata2();
        uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC968);
        uint64_t v164 = swift_getWitnessTable();
        char v165 = v255;
        uint64_t v166 = sub_256F9A130((void (*)(char *, char *))sub_256FDEA10, (uint64_t)(&v220 - 10), v159, v162, v163, v164, MEMORY[0x263F8E4E0], (uint64_t)&v257);
        if (v165)
        {
          return swift_release();
        }
        else
        {
          uint64_t v191 = v166;
          v255 = (uint64_t *)swift_allocObject();
          v248 = &v220;
          uint64_t v259 = v191;
          MEMORY[0x270FA5388](v255);
          uint64_t v192 = v252;
          *(&v220 - 6) = v13;
          *(&v220 - 5) = v192;
          *(&v220 - 4) = v253;
          *(&v220 - 3) = v156;
          uint64_t v193 = sub_25704AB00();
          uint64_t v247 = swift_getWitnessTable();
          uint64_t v195 = sub_256F9A130((void (*)(char *, char *))sub_256FDEA48, (uint64_t)(&v220 - 8), v193, v249, MEMORY[0x263F8E628], v247, MEMORY[0x263F8E658], v194);
          unint64_t v196 = (unint64_t)v255;
          v255[2] = v195;
          void *v226 = v196 | 0x4000000000000000;
          uint64_t v197 = swift_allocObject();
          v255 = &v220;
          uint64_t v259 = v191;
          MEMORY[0x270FA5388](v197);
          uint64_t v198 = v252;
          *(&v220 - 6) = v13;
          *(&v220 - 5) = v198;
          *(&v220 - 4) = v253;
          *(&v220 - 3) = v156;
          uint64_t v218 = v158;
          uint64_t v219 = v157;
          uint64_t v200 = sub_256F9A130((void (*)(char *, char *))sub_256FDEA6C, (uint64_t)(&v220 - 8), v193, (uint64_t)v250, MEMORY[0x263F8E628], v247, MEMORY[0x263F8E658], v199);
          swift_bridgeObjectRelease();
          *(void *)(v197 + 16) = v200;
          uint64_t result = swift_release();
          void *v227 = v197 | 0x4000000000000000;
        }
      }
      return result;
    case 2:
      char v83 = *(char **)(((unint64_t)v64 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      v245 = (void *)TupleTypeMetadata2;
      uint64_t v240 = v83;
      uint64_t v223 = (unint64_t)v64 & 0x3FFFFFFFFFFFFFFFLL;
      if (v63 >> 62 == 2)
      {
        uint64_t v84 = v63 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v233 = *(char **)((v63 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v85 = v251;
        uint64_t v86 = *(char **)(v252 + 32);
        uint64_t v87 = type metadata accessor for NestedItem();
        swift_retain();
        uint64_t v222 = v84;
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v229 = v87;
        uint64_t v259 = sub_25704A560();
        uint64_t v88 = v254;
        uint64_t v228 = type metadata accessor for NestedItem();
        v232 = v86;
        unint64_t v89 = 0;
        uint64_t v257 = sub_25704A560();
        uint64_t v90 = *((void *)v83 + 8);
        v224 = v83 + 64;
        uint64_t v91 = 1 << v83[32];
        uint64_t v92 = -1;
        if (v91 < 64) {
          uint64_t v92 = ~(-1 << v91);
        }
        unint64_t v93 = v92 & v90;
        unint64_t v63 = (unint64_t)(v91 + 63) >> 6;
        long long v236 = (char *)(TupleTypeMetadata2 - 8);
        uint64_t v239 = (char *)(v246 + 16);
        uint64_t v234 = v244 + 32;
        v231 = (void (**)(char *, char *, uint64_t))(v246 + 32);
        v230 = (void (**)(char *, uint64_t))(v246 + 8);
        int64_t v225 = v63;
        unint64_t v221 = v63 - 1;
        while (1)
        {
          uint64_t v94 = v238;
          char v95 = v237;
          if (v93) {
            break;
          }
          int64_t v99 = v89 + 1;
          if (__OFADD__(v89, 1))
          {
            __break(1u);
            goto LABEL_95;
          }
          if (v99 < v225)
          {
            unint64_t v100 = *(void *)&v224[8 * v99];
            if (v100) {
              goto LABEL_15;
            }
            v89 += 2;
            if (v99 + 1 >= v225)
            {
              unint64_t v89 = v99;
            }
            else
            {
              unint64_t v100 = *(void *)&v224[8 * v89];
              if (v100)
              {
                ++v99;
                goto LABEL_15;
              }
              unint64_t v63 = v99 + 2;
              if (v99 + 2 < v225)
              {
                unint64_t v100 = *(void *)&v224[8 * v63];
                if (v100)
                {
                  v99 += 2;
LABEL_15:
                  uint64_t v244 = (v100 - 1) & v100;
                  unint64_t v96 = __clz(__rbit64(v100)) + (v99 << 6);
                  unint64_t v89 = v99;
LABEL_11:
                  BOOL v97 = v240;
                  (*(void (**)(char *, unint64_t, uint64_t))(v246 + 16))(v238, *((void *)v240 + 6) + *(void *)(v246 + 72) * v96, v13);
                  *(void *)&v94[*(int *)(TupleTypeMetadata2 + 48)] = *(void *)(*((void *)v97 + 7) + 8 * v96);
                  uint64_t v98 = *(void *)(TupleTypeMetadata2 - 8);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v94, 0, 1, TupleTypeMetadata2);
                  swift_retain();
                  goto LABEL_21;
                }
                while (1)
                {
                  int64_t v99 = v63 + 1;
                  if (__OFADD__(v63, 1)) {
                    goto LABEL_96;
                  }
                  if (v99 >= v225) {
                    break;
                  }
                  unint64_t v100 = *(void *)&v224[8 * v99];
                  ++v63;
                  if (v100) {
                    goto LABEL_15;
                  }
                }
                unint64_t v89 = v221;
              }
            }
          }
          uint64_t v98 = *(void *)(TupleTypeMetadata2 - 8);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v238, 1, 1, TupleTypeMetadata2);
          uint64_t v244 = 0;
LABEL_21:
          (*(void (**)(char *, char *, uint64_t *))v234)(v95, v94, v248);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v95, 1, TupleTypeMetadata2) == 1)
          {
            swift_release();
            uint64_t v167 = swift_allocObject();
            *(void *)(v167 + 16) = v259;
            void *v226 = v167 | 0x8000000000000000;
            uint64_t v168 = swift_allocObject();
            *(void *)(v168 + 16) = v257;
            swift_release();
            goto LABEL_82;
          }
          uint64_t v101 = *(void *)&v95[*(int *)(TupleTypeMetadata2 + 48)];
          char v102 = v95;
          uint64_t v103 = v235;
          (*v231)(v235, v102, v13);
          uint64_t v104 = v253;
          int v105 = v232;
          uint64_t v106 = type metadata accessor for NestedItem();
          MEMORY[0x25A2B06F0](&v264, v103, v233, v13, v106, v105);
          uint64_t v107 = v264;
          unint64_t v108 = 0xC000000000000000;
          if ((~v264 & 0xF000000000000007) != 0) {
            unint64_t v108 = v264;
          }
          uint64_t v243 = v101;
          unint64_t v261 = v108;
          uint64_t v262 = v101;
          uint64_t v109 = v255;
          NestedItem.mapValues<A, B, C>(_:_:)(&v264, &v263, &v261, v250, v249, v252, v104, v85, v88);
          if (v109)
          {
            (*v230)(v103, v13);
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_256FE1C1C(v107);
            swift_release();
            swift_release();
            return swift_release();
          }
          v255 = 0;
          uint64_t v110 = v264;
          uint64_t v111 = v263;
          char v112 = *(void (**)(uint64_t, char *, uint64_t))v239;
          v242 = (char *)v89;
          uint64_t v113 = v247;
          v112(v247, v103, v13);
          uint64_t v264 = v110;
          uint64_t v241 = (char *)(v110 & 0x3FFFFFFFFFFFFFFFLL);
          sub_25704A650();
          swift_retain();
          sub_25704A680();
          v112(v113, v103, v13);
          uint64_t v264 = v111;
          unint64_t v89 = (unint64_t)v242;
          sub_25704A650();
          swift_retain();
          TupleTypeMetadata2 = (uint64_t)v245;
          sub_25704A680();
          sub_256FE1C1C(v107);
          uint64_t v88 = v254;
          uint64_t v85 = v251;
          swift_release();
          swift_release();
          swift_release();
          (*v230)(v103, v13);
          unint64_t v93 = v244;
        }
        uint64_t v244 = (v93 - 1) & v93;
        unint64_t v96 = __clz(__rbit64(v93)) | (v89 << 6);
        goto LABEL_11;
      }
      v242 = v64;
      if (v63 >> 62 != 3 || v63 != 0xC000000000000000) {
        goto LABEL_98;
      }
      uint64_t v130 = v251;
      char v131 = *(char **)(v252 + 32);
      uint64_t v132 = type metadata accessor for NestedItem();
      swift_retain();
      swift_bridgeObjectRetain();
      v232 = (char *)v132;
      uint64_t v259 = sub_25704A560();
      v231 = (void (**)(char *, char *, uint64_t))type metadata accessor for NestedItem();
      uint64_t v233 = v131;
      uint64_t v133 = 0;
      uint64_t v257 = sub_25704A560();
      uint64_t v134 = *((void *)v83 + 8);
      uint64_t v229 = (uint64_t)(v83 + 64);
      uint64_t v135 = 1 << v83[32];
      uint64_t v136 = -1;
      if (v135 < 64) {
        uint64_t v136 = ~(-1 << v135);
      }
      unint64_t v137 = v136 & v134;
      unint64_t v63 = (unint64_t)(v135 + 63) >> 6;
      v238 = (char *)(TupleTypeMetadata2 - 8);
      uint64_t v241 = (char *)(v246 + 16);
      uint64_t v237 = (char *)(v244 + 32);
      long long v235 = (char *)(v246 + 32);
      uint64_t v234 = v246 + 8;
      v230 = (void (**)(char *, uint64_t))v63;
      uint64_t v228 = v63 - 1;
      uint64_t v138 = v239;
      uint64_t v139 = v236;
      if (!v137) {
        goto LABEL_51;
      }
LABEL_49:
      uint64_t v244 = (v137 - 1) & v137;
      unint64_t v140 = __clz(__rbit64(v137)) | (v133 << 6);
      break;
    case 3:
      unint64_t v114 = 0xC000000000000000;
      void *v226 = 0xC000000000000000;
      goto LABEL_83;
    default:
      uint64_t v65 = v57;
      uint64_t v246 = v56;
      long long v236 = v55;
      v245 = v54;
      uint64_t v247 = v53;
      uint64_t v237 = v42;
      v238 = v60;
      v248 = (uint64_t *)v35;
      uint64_t v239 = v59;
      uint64_t v244 = result;
      uint64_t v66 = v58;
      uint64_t v67 = v64;
      unint64_t v68 = v63;
      uint64_t v69 = swift_projectBox();
      unint64_t v63 = v68;
      uint64_t v70 = v69;
      if (v63 >> 62)
      {
        v242 = v67;
        if (v63 >> 62 != 3 || v63 != 0xC000000000000000) {
          goto LABEL_98;
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v62, v69, v66);
        int v151 = v240;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v240, 1, 1, v253);
        swift_retain();
        uint64_t v152 = v65;
        uint64_t v153 = v255;
        v250(v246, v65, v62, v151);
        if (v153)
        {
          (*(void (**)(char *, uint64_t *))(v243 + 8))(v151, v248);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v62, v66);
          return swift_release();
        }
        else
        {
          (*(void (**)(char *, uint64_t *))(v243 + 8))(v151, v248);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v62, v66);
          v181 = (void (**)(char *, uint64_t))v239;
          char v182 = v236;
          uint64_t v183 = v244;
          (*((void (**)(char *, uint64_t, uint64_t))v239 + 4))(v236, v152, v244);
          uint64_t v184 = v234;
          uint64_t v185 = v254;
          int v186 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v234 + 48))(v182, 1, v254);
          v187 = (void (**)(uint64_t, uint64_t, uint64_t))(v238 + 32);
          if (v186 == 1)
          {
            v181[1](v182, v183);
            uint64_t v188 = v251;
            uint64_t v189 = swift_allocBox();
            (*v187)(v190, v246, v188);
            uint64_t result = swift_release();
            void *v226 = v189;
            void *v227 = 0xC000000000000000;
          }
          else
          {
            uint64_t v209 = *(void (**)(char *, char *, uint64_t))(v184 + 32);
            uint64_t v210 = v232;
            v209(v232, v182, v185);
            uint64_t v211 = v251;
            uint64_t v212 = swift_allocBox();
            (*v187)(v213, v246, v211);
            void *v226 = v212;
            uint64_t v214 = swift_allocBox();
            v209(v215, v210, v185);
            uint64_t result = swift_release();
            void *v227 = v214;
          }
        }
      }
      else
      {
        uint64_t v246 = v63;
        uint64_t v71 = swift_projectBox();
        uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
        uint64_t v252 = v66;
        v72(v51, v70, v66);
        uint64_t v73 = v29;
        uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
        uint64_t v75 = v242;
        uint64_t v76 = v253;
        v74(v242, v71, v253);
        uint64_t v77 = v67;
        uint64_t v78 = v241;
        v74(v241, (uint64_t)v75, v76);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v78, 0, 1, v76);
        __n128 v79 = (void (*)(uint64_t, uint64_t, char *, char *))((unint64_t)v77 & 0x3FFFFFFFFFFFFFFFLL);
        uint64_t v80 = v246 & 0x3FFFFFFFFFFFFFFFLL;
        swift_retain();
        swift_retain();
        uint64_t v81 = v245;
        uint64_t v82 = v255;
        v250(v247, (uint64_t)v245, v51, v78);
        if (v82)
        {
          (*(void (**)(char *, uint64_t *))(v243 + 8))(v78, v248);
          (*(void (**)(char *, uint64_t))(v73 + 8))(v242, v76);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v252);
          swift_release();
          return swift_release();
        }
        uint64_t v249 = v80;
        v250 = v79;
        v255 = 0;
        (*(void (**)(char *, uint64_t *))(v243 + 8))(v78, v248);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v242, v76);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v252);
        unint64_t v170 = (void (**)(char *, uint64_t))v239;
        uint64_t v171 = v237;
        uint64_t v172 = v81;
        uint64_t v173 = v244;
        (*((void (**)(char *, void *, uint64_t))v239 + 4))(v237, v172, v244);
        uint64_t v174 = v234;
        uint64_t v175 = v254;
        int v176 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v234 + 48))(v171, 1, v254);
        uint64_t v177 = (void (**)(uint64_t, uint64_t, uint64_t))(v238 + 32);
        if (v176 == 1)
        {
          v170[1](v171, v173);
          uint64_t v178 = v251;
          uint64_t v179 = swift_allocBox();
          (*v177)(v180, v247, v178);
          swift_release();
          uint64_t result = swift_release();
          void *v226 = v179;
          unint64_t v114 = 0xC000000000000000;
          goto LABEL_83;
        }
        uint64_t v201 = v175;
        uint64_t v202 = *(void (**)(char *, char *, uint64_t))(v174 + 32);
        v203 = v233;
        v202(v233, v171, v175);
        uint64_t v204 = v251;
        uint64_t v205 = swift_allocBox();
        (*v177)(v206, v247, v204);
        void *v226 = v205;
        uint64_t v207 = swift_allocBox();
        v202(v208, v203, v201);
        swift_release();
        uint64_t result = swift_release();
        void *v227 = v207;
      }
      return result;
  }
LABEL_50:
  char v141 = v240;
  (*(void (**)(char *, unint64_t, uint64_t))(v246 + 16))(v138, *((void *)v240 + 6) + *(void *)(v246 + 72) * v140, v13);
  *(void *)&v138[*(int *)(TupleTypeMetadata2 + 48)] = *(void *)(*((void *)v141 + 7) + 8 * v140);
  uint64_t v142 = *(void *)(TupleTypeMetadata2 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v138, 0, 1, TupleTypeMetadata2);
  swift_retain();
  while (1)
  {
    (*(void (**)(char *, char *, uint64_t *))v237)(v139, v138, v248);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v139, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      uint64_t v169 = swift_allocObject();
      *(void *)(v169 + 16) = v259;
      void *v226 = v169 | 0x8000000000000000;
      uint64_t v168 = swift_allocObject();
      *(void *)(v168 + 16) = v257;
LABEL_82:
      uint64_t result = swift_release();
      unint64_t v114 = v168 | 0x8000000000000000;
LABEL_83:
      void *v227 = v114;
      return result;
    }
    uint64_t v145 = *(char **)&v139[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))v235)(v19, v139, v13);
    unint64_t v261 = 0xC000000000000000;
    uint64_t v262 = (uint64_t)v145;
    char v146 = v255;
    NestedItem.mapValues<A, B, C>(_:_:)(&v264, &v263, &v261, v250, v249, v252, v253, v130, v254);
    if (v146)
    {
      (*(void (**)(char *, uint64_t))v234)(v19, v13);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    v255 = 0;
    uint64_t v147 = v264;
    uint64_t v148 = v263;
    v242 = v145;
    int v149 = *(void (**)(uint64_t, char *, uint64_t))v241;
    uint64_t v150 = v247;
    (*(void (**)(uint64_t, char *, uint64_t))v241)(v247, v19, v13);
    uint64_t v264 = v147;
    uint64_t v243 = v133;
    sub_25704A650();
    swift_retain();
    sub_25704A680();
    v149(v150, v19, v13);
    uint64_t v138 = v239;
    uint64_t v264 = v148;
    uint64_t v133 = v243;
    sub_25704A650();
    swift_retain();
    TupleTypeMetadata2 = (uint64_t)v245;
    sub_25704A680();
    swift_release();
    uint64_t v130 = v251;
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))v234)(v19, v13);
    uint64_t v139 = v236;
    unint64_t v137 = v244;
    if (v244) {
      goto LABEL_49;
    }
LABEL_51:
    int64_t v143 = v133 + 1;
    if (__OFADD__(v133, 1))
    {
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      uint64_t v259 = 0;
      unint64_t v260 = 0xE000000000000000;
      v216 = v242;
      unint64_t v217 = v63;
      swift_retain();
      swift_retain();
      sub_25704ADF0();
      sub_25704A850();
      uint64_t v257 = (uint64_t)v216;
      swift_getWitnessTable();
      sub_25704B1B0();
      sub_25704A850();
      uint64_t v257 = v217;
      type metadata accessor for NestedItem();
      swift_getWitnessTable();
      sub_25704B1B0();
      LODWORD(v219) = 0;
      uint64_t v218 = 171;
      sub_25704AFD0();
      __break(1u);
      JUMPOUT(0x256FD5F5CLL);
    }
    if (v143 < (uint64_t)v230)
    {
      unint64_t v144 = *(void *)(v229 + 8 * v143);
      if (v144) {
        goto LABEL_54;
      }
      v133 += 2;
      if (v143 + 1 >= (uint64_t)v230)
      {
        uint64_t v133 = v143;
      }
      else
      {
        unint64_t v144 = *(void *)(v229 + 8 * v133);
        if (v144)
        {
          ++v143;
          goto LABEL_54;
        }
        unint64_t v63 = v143 + 2;
        if (v143 + 2 < (uint64_t)v230)
        {
          unint64_t v144 = *(void *)(v229 + 8 * v63);
          if (v144)
          {
            v143 += 2;
LABEL_54:
            uint64_t v244 = (v144 - 1) & v144;
            unint64_t v140 = __clz(__rbit64(v144)) + (v143 << 6);
            uint64_t v133 = v143;
            goto LABEL_50;
          }
          while (1)
          {
            int64_t v143 = v63 + 1;
            if (__OFADD__(v63, 1)) {
              goto LABEL_97;
            }
            if (v143 >= (uint64_t)v230) {
              break;
            }
            unint64_t v144 = *(void *)(v229 + 8 * v143);
            ++v63;
            if (v144) {
              goto LABEL_54;
            }
          }
          uint64_t v133 = v228;
        }
      }
    }
    uint64_t v142 = *(void *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v142 + 56))(v138, 1, 1, TupleTypeMetadata2);
    uint64_t v244 = 0;
  }
}

uint64_t sub_256FD5F6C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, void *a9)
{
  uint64_t v16 = *a1;
  uint64_t v17 = a7 + 8;
  v20[0] = 0xC000000000000000;
  v20[1] = v16;
  uint64_t v18 = type metadata accessor for NestedItem();
  uint64_t result = NestedItem.mapValues<A, B, C>(_:_:)(a7, v17, v20, a2, a3, v18, a4, a5, a6);
  if (v9) {
    *a9 = v9;
  }
  return result;
}

uint64_t sub_256FD602C(uint64_t (**a1)(char *, char *, char *, uint64_t, uint64_t, uint64_t), uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(char *, char *, char *, uint64_t, uint64_t, uint64_t), char *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v70 = a8;
  uint64_t v71 = a7;
  uint64_t v68 = a5;
  uint64_t v69 = a6;
  unint64_t v60 = a3;
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  uint64_t v65 = a16;
  uint64_t v17 = sub_25704AC70();
  uint64_t v63 = *(void *)(v17 - 8);
  uint64_t v64 = v17;
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v55 - v21;
  uint64_t v66 = a15;
  uint64_t v23 = sub_25704AC70();
  uint64_t v67 = *(void *)(v23 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v55 - v28;
  uint64_t v30 = *(void *)(a14 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v32 = (char *)&v55 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v72;
  uint64_t result = v71(v32, v29, v22, a4, v68, v69);
  if (!v33)
  {
    uint64_t v57 = v26;
    uint64_t v59 = v22;
    uint64_t v72 = v23;
    uint64_t v70 = v20;
    uint64_t v35 = v65;
    uint64_t v71 = (uint64_t (*)(char *, char *, char *, uint64_t, uint64_t, uint64_t))swift_allocBox();
    uint64_t v68 = v30;
    uint64_t v69 = a14;
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v36, v32, a14);
    uint64_t v37 = v66;
    uint64_t v38 = *(void *)(v66 - 8);
    uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
    int v40 = v39(v29, 1, v66);
    uint64_t v58 = v29;
    if (v40 == 1)
    {
      uint64_t v41 = 0xC000000000000000;
      uint64_t v42 = v63;
    }
    else
    {
      uint64_t v56 = v32;
      uint64_t v43 = v57;
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v57, v29, v72);
      if (v39(v43, 1, v37) == 1)
      {
        swift_release();
        __break(1u);
        goto LABEL_14;
      }
      uint64_t v41 = swift_allocBox();
      (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v44, v43, v37);
      uint64_t v42 = v63;
      uint64_t v32 = v56;
    }
    uint64_t v45 = *(void *)(v35 - 8);
    uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    uint64_t v47 = v59;
    if (v46(v59, 1, v35) == 1)
    {
      (*(void (**)(char *, uint64_t))(v68 + 8))(v32, v69);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v47, v64);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v58, v72);
      uint64_t v48 = 0xC000000000000000;
      uint64_t v49 = v71;
LABEL_11:
      char *v61 = v49;
      *uint64_t v62 = v41;
      *unint64_t v60 = v48;
      return result;
    }
    uint64_t v66 = v41;
    uint64_t v50 = v70;
    uint64_t v51 = v64;
    (*(void (**)(void))(v42 + 16))();
    unsigned int v52 = v46(v50, 1, v35);
    if (v52 != 1)
    {
      uint64_t v48 = swift_allocBox();
      uint64_t v54 = v53;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v32, v69);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v59, v51);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v58, v72);
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 32))(v54, v50, v35);
      uint64_t v49 = v71;
      uint64_t v41 = v66;
      goto LABEL_11;
    }
LABEL_14:
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_256FD6550(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  type metadata accessor for NestedItem();
  uint64_t v49 = sub_25704A570();
  type metadata accessor for NestedItem();
  uint64_t v48 = sub_25704A570();
  type metadata accessor for NestedItem();
  uint64_t v47 = sub_25704A570();
  unint64_t v46 = a4;
  uint64_t v17 = type metadata accessor for NestedItem();
  uint64_t v18 = sub_25704AB00();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x25A2B09E0](&v44, v18, WitnessTable);
  unint64_t v46 = v44;
  sub_25704B030();
  sub_25704B000();
  sub_25704B020();
  sub_25704B010();
  uint64_t v20 = v45;
  if ((~v45 & 0xF000000000000007) != 0)
  {
    uint64_t v21 = v44;
    uint64_t v22 = type metadata accessor for NestedItem();
    uint64_t v35 = v22;
    uint64_t v23 = v21;
    while (1)
    {
      if (v23 >= MEMORY[0x25A2B0B50](a5, v22))
      {
        unint64_t v24 = 0xC000000000000000;
      }
      else
      {
        sub_25704AB30();
        unint64_t v24 = v44;
      }
      uint64_t v25 = type metadata accessor for NestedItem();
      if (v23 < MEMORY[0x25A2B0B50](a6, v25))
      {
        sub_25704AB30();
        unint64_t v26 = v44;
      }
      else
      {
        unint64_t v26 = 0xC000000000000000;
      }
      v42[0] = v24;
      v42[1] = v20;
      unint64_t v41 = v26;
      NestedItem.mapValues<A, B, C, D, E>(_:_:_:)(&v44, &v46, &v43, v42, &v41, a7, a8, v17, a12, a13, a14, a15, a16);
      if (v40) {
        break;
      }
      unint64_t v27 = v43;
      unint64_t v28 = v46;
      sub_25704AB00();
      swift_retain();
      sub_25704AAE0();
      unint64_t v44 = v28;
      sub_25704AB00();
      swift_retain();
      sub_25704AAE0();
      unint64_t v44 = v27;
      sub_25704AB00();
      swift_retain();
      sub_25704AAE0();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_256FDE9F8(v23, v20);
      sub_25704B010();
      uint64_t v23 = v44;
      uint64_t v20 = v45;
      uint64_t v22 = v35;
      if ((~v45 & 0xF000000000000007) == 0) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return sub_256FDE9F8(v23, v20);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v49;
    *a1 = v29 | 0x4000000000000000;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v48;
    *a2 = v30 | 0x4000000000000000;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v47;
    *a3 = result | 0x4000000000000000;
  }
  return result;
}

uint64_t NestedItem.mapValues<A, B, C, D, E>(_:_:_:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, void *a5, uint64_t (*a6)(char *, char *, char *, uint64_t, uint64_t, uint64_t), char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v194 = a3;
  unint64_t v190 = (unint64_t)a5;
  int v186 = a6;
  v187 = a7;
  uint64_t v192 = a1;
  uint64_t v193 = a2;
  uint64_t v184 = a13;
  uint64_t v181 = *(void *)(a9 - 8);
  uint64_t v183 = a12;
  uint64_t v185 = a11;
  uint64_t v15 = MEMORY[0x270FA5388](a1);
  uint64_t v17 = (char *)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v177 = (char *)&v165 - v19;
  uint64_t v180 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  int v176 = (char *)&v165 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v175 = (char *)&v165 - v23;
  uint64_t v189 = v24;
  uint64_t v25 = sub_25704AC70();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v178 = v25;
  uint64_t v179 = v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v174 = (char *)&v165 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v173 = (char *)&v165 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v172 = (char *)&v165 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v165 - v33;
  uint64_t v188 = a9;
  uint64_t v35 = sub_25704AC70();
  uint64_t v36 = MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)&v165 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x270FA5388](v36);
  unint64_t v41 = (char *)&v165 - v40;
  uint64_t v42 = MEMORY[0x270FA5388](v39);
  unint64_t v44 = (char *)&v165 - v43;
  uint64_t v45 = MEMORY[0x270FA5388](v42);
  uint64_t v47 = (char *)&v165 - v46;
  uint64_t v182 = a8;
  uint64_t v48 = MEMORY[0x270FA5388](v45);
  uint64_t v49 = MEMORY[0x270FA5388](v48);
  uint64_t v51 = (char *)&v165 - v50;
  uint64_t v52 = MEMORY[0x270FA5388](v49);
  uint64_t v54 = (char *)&v165 - v53;
  uint64_t result = MEMORY[0x270FA5388](v52);
  uint64_t v61 = (char *)&v165 - v60;
  unint64_t v62 = *a4;
  uint64_t v63 = *(char **)v190;
  unint64_t v64 = *v191;
  switch(*v191 >> 62)
  {
    case 1uLL:
      unint64_t v90 = *(void *)((v64 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v62 >> 62 == 1)
      {
        uint64_t v91 = (uint64_t)v57;
        uint64_t v92 = *(void *)((v62 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if ((unint64_t)v63 >> 62 == 1)
        {
          uint64_t v93 = *(void *)(((unint64_t)v63 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v94 = *(void *)(v182 + 16);
          swift_retain();
          swift_retain();
          swift_retain();
          sub_256FD6550(v192, v193, v194, v90, v92, v93, (uint64_t)v186, (uint64_t)v187, v94, v91, v91, v188, v189, v185, v183, v184);
          goto LABEL_12;
        }
        if ((unint64_t)v63 >> 62 == 3 && v63 == (char *)0xC000000000000000)
        {
          uint64_t v135 = *(void *)(v182 + 16);
          uint64_t v136 = v189;
          type metadata accessor for NestedItem();
          swift_retain();
          swift_retain();
          uint64_t v137 = sub_25704AA80();
          sub_256FD6550(v192, v193, v194, v90, v92, v137, (uint64_t)v186, (uint64_t)v187, v135, v91, v91, v188, v136, v185, v183, v184);
          goto LABEL_36;
        }
LABEL_48:
        uint64_t v195 = 0;
        unint64_t v196 = 0xE000000000000000;
        unint64_t v153 = v64;
        uint64_t v154 = v63;
        unint64_t v155 = v62;
        swift_retain();
        swift_retain();
        swift_retain();
        sub_25704ADF0();
        sub_25704A850();
        unint64_t v197 = v153;
        swift_getWitnessTable();
        sub_25704B1B0();
        sub_25704A850();
        unint64_t v197 = v155;
        type metadata accessor for NestedItem();
        swift_getWitnessTable();
        sub_25704B1B0();
        sub_25704A850();
        unint64_t v197 = (unint64_t)v154;
        type metadata accessor for NestedItem();
        swift_getWitnessTable();
        sub_25704B1B0();
        sub_25704AFD0();
        __break(1u);
        JUMPOUT(0x256FD7F18);
      }
      if (v62 >> 62 != 3 || v62 != 0xC000000000000000) {
        goto LABEL_48;
      }
      uint64_t v118 = (uint64_t)v57;
      if ((unint64_t)v63 >> 62 != 1)
      {
        if ((unint64_t)v63 >> 62 == 3 && v63 == (char *)0xC000000000000000)
        {
          uint64_t v148 = *(void *)(v182 + 16);
          uint64_t v149 = v188;
          type metadata accessor for NestedItem();
          swift_retain();
          uint64_t v150 = sub_25704AA80();
          uint64_t v151 = v189;
          type metadata accessor for NestedItem();
          uint64_t v152 = sub_25704AA80();
          sub_256FD6550(v192, v193, v194, v90, v150, v152, (uint64_t)v186, (uint64_t)v187, v148, v118, v118, v149, v151, v185, v183, v184);
          swift_release();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        goto LABEL_48;
      }
      uint64_t v119 = *(void *)(((unint64_t)v63 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v120 = *(void *)(v182 + 16);
      uint64_t v121 = v188;
      type metadata accessor for NestedItem();
      swift_retain();
      swift_retain();
      uint64_t v122 = sub_25704AA80();
      sub_256FD6550(v192, v193, v194, v90, v122, v119, (uint64_t)v186, (uint64_t)v187, v120, v118, v118, v121, v189, v185, v183, v184);
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    case 2uLL:
      uint64_t v84 = *(void *)((v64 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v62 >> 62 == 2)
      {
        uint64_t v85 = (uint64_t)v57;
        uint64_t v86 = *(void *)((v62 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if ((unint64_t)v63 >> 62 == 2)
        {
          uint64_t v87 = *(void *)(((unint64_t)v63 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v88 = *(void *)(v182 + 16);
          uint64_t v89 = *(void *)(v182 + 32);
          swift_retain();
          swift_retain();
          swift_retain();
          sub_256FD7F28((unint64_t *)v192, (unint64_t *)v193, (unint64_t *)v194, v84, v86, v87, (uint64_t)v186, (uint64_t)v187, v88, v85, v85, v188, v189, v185, v183, v184, v89);
LABEL_12:
          swift_release();
          swift_release();
          return swift_release();
        }
        if ((unint64_t)v63 >> 62 != 3 || v63 != (char *)0xC000000000000000) {
          goto LABEL_48;
        }
        uint64_t v131 = *(void *)(v182 + 16);
        uint64_t v132 = *(void *)(v182 + 32);
        uint64_t v133 = v189;
        type metadata accessor for NestedItem();
        swift_retain();
        swift_retain();
        swift_getTupleTypeMetadata2();
        sub_25704AA80();
        uint64_t v134 = sub_25704A5B0();
        uint64_t v164 = v132;
        uint64_t v163 = v184;
        uint64_t v162 = v183;
        uint64_t v160 = v133;
        uint64_t v161 = v185;
        uint64_t v158 = v85;
        uint64_t v159 = v188;
        uint64_t v156 = v131;
        uint64_t v157 = v85;
        uint64_t v101 = (unint64_t *)v192;
        char v102 = (unint64_t *)v193;
        uint64_t v103 = (unint64_t *)v194;
        uint64_t v104 = v84;
        uint64_t v105 = v86;
        uint64_t v106 = v134;
      }
      else
      {
        if (v62 >> 62 != 3 || v62 != 0xC000000000000000) {
          goto LABEL_48;
        }
        uint64_t v95 = (uint64_t)v57;
        if ((unint64_t)v63 >> 62 != 2)
        {
          if ((unint64_t)v63 >> 62 == 3 && v63 == (char *)0xC000000000000000)
          {
            uint64_t v138 = *(void *)(v182 + 16);
            uint64_t v139 = *(void *)(v182 + 32);
            uint64_t v140 = v188;
            type metadata accessor for NestedItem();
            swift_retain();
            swift_getTupleTypeMetadata2();
            sub_25704AA80();
            uint64_t v141 = sub_25704A5B0();
            uint64_t v142 = v189;
            type metadata accessor for NestedItem();
            swift_getTupleTypeMetadata2();
            sub_25704AA80();
            uint64_t v143 = sub_25704A5B0();
            sub_256FD7F28((unint64_t *)v192, (unint64_t *)v193, (unint64_t *)v194, v84, v141, v143, (uint64_t)v186, (uint64_t)v187, v138, v95, v95, v140, v142, v185, v183, v184, v139);
            swift_release();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          goto LABEL_48;
        }
        uint64_t v96 = *(void *)(((unint64_t)v63 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v97 = *(void *)(v182 + 16);
        uint64_t v98 = *(void *)(v182 + 32);
        uint64_t v99 = v188;
        type metadata accessor for NestedItem();
        swift_retain();
        swift_retain();
        swift_getTupleTypeMetadata2();
        sub_25704AA80();
        uint64_t v100 = sub_25704A5B0();
        uint64_t v164 = v98;
        uint64_t v163 = v184;
        uint64_t v162 = v183;
        uint64_t v161 = v185;
        uint64_t v159 = v99;
        uint64_t v160 = v189;
        uint64_t v157 = v95;
        uint64_t v158 = v95;
        uint64_t v156 = v97;
        uint64_t v101 = (unint64_t *)v192;
        char v102 = (unint64_t *)v193;
        uint64_t v103 = (unint64_t *)v194;
        uint64_t v104 = v84;
        uint64_t v105 = v100;
        uint64_t v106 = v96;
      }
      sub_256FD7F28(v101, v102, v103, v104, v105, v106, (uint64_t)v186, (uint64_t)v187, v156, v157, v158, v159, v160, v161, v162, v163, v164);
LABEL_36:
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    case 3uLL:
      *uint64_t v192 = 0xC000000000000000;
      *uint64_t v193 = 0xC000000000000000;
      *uint64_t v194 = 0xC000000000000000;
      return result;
    default:
      uint64_t v167 = v56;
      uint64_t v166 = v38;
      uint64_t v168 = v17;
      uint64_t v65 = v63;
      uint64_t v169 = result;
      uint64_t v170 = v59;
      uint64_t v171 = v58;
      unint64_t v190 = v64;
      uint64_t v191 = v57;
      unint64_t v66 = v62;
      uint64_t v67 = swift_projectBox();
      unint64_t v62 = v66;
      uint64_t v68 = v67;
      if (v62 >> 62)
      {
        uint64_t v107 = v171;
        unint64_t v64 = v190;
        uint64_t v63 = v65;
        if (v62 >> 62 != 3 || v62 != 0xC000000000000000) {
          goto LABEL_48;
        }
        unint64_t v108 = v175;
        if ((unint64_t)v65 >> 62)
        {
          if ((unint64_t)v65 >> 62 == 3 && v65 == (char *)0xC000000000000000)
          {
            unint64_t v144 = v191;
            (*(void (**)(char *, uint64_t, unint64_t *))(v171 + 16))(v61, v67, v191);
            uint64_t v145 = v188;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v181 + 56))(v47, 1, 1, v188);
            uint64_t v146 = v189;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v180 + 56))(v34, 1, 1, v189);
            uint64_t v147 = *(void *)(v182 + 16);
            swift_retain();
            sub_256FD602C((uint64_t (**)(char *, char *, char *, uint64_t, uint64_t, uint64_t))v192, v193, v194, (uint64_t)v61, (uint64_t)v47, (uint64_t)v34, v186, v187, v147, (uint64_t)v144, (uint64_t)v144, v145, v146, v185, v183, v184);
            (*(void (**)(char *, uint64_t))(v179 + 8))(v34, v178);
            (*(void (**)(char *, uint64_t))(v170 + 8))(v47, v169);
            (*(void (**)(char *, unint64_t *))(v107 + 8))(v61, v144);
            return swift_release();
          }
          goto LABEL_48;
        }
        uint64_t v177 = v65;
        uint64_t v109 = swift_projectBox();
        (*(void (**)(char *, uint64_t, unint64_t *))(v107 + 16))(v54, v68, v191);
        uint64_t v110 = v180;
        uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))(v180 + 16);
        uint64_t v112 = v189;
        v111(v108, v109, v189);
        uint64_t v113 = v108;
        uint64_t v114 = v188;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v181 + 56))(v44, 1, 1, v188);
        uint64_t v115 = (uint64_t)v172;
        v111(v172, (uint64_t)v113, v112);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v110 + 56))(v115, 0, 1, v112);
        uint64_t v116 = *(void *)(v182 + 16);
        v190 &= 0x3FFFFFFFFFFFFFFFuLL;
        swift_retain();
        swift_retain();
        uint64_t v117 = v191;
        sub_256FD602C((uint64_t (**)(char *, char *, char *, uint64_t, uint64_t, uint64_t))v192, v193, v194, (uint64_t)v54, (uint64_t)v44, v115, v186, v187, v116, (uint64_t)v191, (uint64_t)v191, v114, v112, v185, v183, v184);
        (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v115, v178);
        (*(void (**)(char *, uint64_t))(v170 + 8))(v44, v169);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v113, v112);
        (*(void (**)(char *, unint64_t *))(v171 + 8))(v54, v117);
      }
      else
      {
        uint64_t v69 = v62;
        uint64_t v70 = swift_projectBox();
        uint64_t v63 = v65;
        uint64_t v165 = v69;
        if ((unint64_t)v65 >> 62)
        {
          unint64_t v64 = v190;
          unint64_t v62 = v69;
          if ((unint64_t)v65 >> 62 == 3 && v65 == (char *)0xC000000000000000)
          {
            uint64_t v123 = v191;
            (*(void (**)(char *, uint64_t, unint64_t *))(v171 + 16))(v51, v68, v191);
            uint64_t v124 = v181;
            unint64_t v125 = *(void (**)(char *, uint64_t, uint64_t))(v181 + 16);
            uint64_t v126 = v177;
            uint64_t v127 = v188;
            v125(v177, v70, v188);
            v125(v41, (uint64_t)v126, v127);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(v41, 0, 1, v127);
            uint64_t v128 = (uint64_t)v173;
            uint64_t v129 = v189;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v180 + 56))(v173, 1, 1, v189);
            uint64_t v130 = *(void *)(v182 + 16);
            v190 &= 0x3FFFFFFFFFFFFFFFuLL;
            swift_retain();
            swift_retain();
            sub_256FD602C((uint64_t (**)(char *, char *, char *, uint64_t, uint64_t, uint64_t))v192, v193, v194, (uint64_t)v51, (uint64_t)v41, v128, v186, v187, v130, (uint64_t)v123, (uint64_t)v123, v127, v129, v185, v183, v184);
            (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v128, v178);
            (*(void (**)(char *, uint64_t))(v170 + 8))(v41, v169);
            (*(void (**)(char *, uint64_t))(v124 + 8))(v177, v127);
            (*(void (**)(char *, unint64_t *))(v171 + 8))(v51, v123);
            swift_release();
            return swift_release();
          }
          goto LABEL_48;
        }
        uint64_t v177 = v65;
        uint64_t v71 = swift_projectBox();
        (*(void (**)(uint64_t, uint64_t, unint64_t *))(v171 + 16))(v167, v68, v191);
        uint64_t v72 = v181;
        uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t))(v181 + 16);
        uint64_t v74 = v168;
        uint64_t v75 = v188;
        v73(v168, v70, v188);
        uint64_t v175 = *(char **)(v180 + 16);
        uint64_t v76 = v176;
        uint64_t v77 = v189;
        ((void (*)(char *, uint64_t, uint64_t))v175)(v176, v71, v189);
        uint64_t v78 = (uint64_t)v166;
        v73(v166, (uint64_t)v74, v75);
        uint64_t v79 = v78;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v78, 0, 1, v75);
        uint64_t v80 = (uint64_t)v174;
        ((void (*)(char *, char *, uint64_t))v175)(v174, v76, v77);
        uint64_t v81 = v180;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v180 + 56))(v80, 0, 1, v77);
        uint64_t v82 = *(void *)(v182 + 16);
        v190 &= 0x3FFFFFFFFFFFFFFFuLL;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v83 = v167;
        sub_256FD602C((uint64_t (**)(char *, char *, char *, uint64_t, uint64_t, uint64_t))v192, v193, v194, v167, v79, v80, v186, v187, v82, (uint64_t)v191, (uint64_t)v191, v75, v77, v185, v183, v184);
        (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v80, v178);
        (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v79, v169);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v176, v77);
        (*(void (**)(char *, uint64_t))(v181 + 8))(v168, v75);
        (*(void (**)(uint64_t, unint64_t *))(v171 + 8))(v83, v191);
        swift_release();
      }
      swift_release();
      return swift_release();
  }
}

uint64_t sub_256FD7F28(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v81 = a8;
  uint64_t v80 = a7;
  uint64_t v79 = a6;
  uint64_t v78 = a5;
  unint64_t v62 = a3;
  uint64_t v61 = a2;
  uint64_t v60 = a1;
  uint64_t v74 = a13;
  uint64_t v18 = *(void *)(a9 - 8);
  uint64_t v73 = a12;
  uint64_t v19 = MEMORY[0x270FA5388](a1);
  uint64_t v70 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v97 = (char *)&v59 - v21;
  uint64_t v72 = type metadata accessor for NestedItem();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v85 = sub_25704AC70();
  uint64_t v23 = *(void *)(v85 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v85);
  uint64_t v86 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v87 = (char *)&v59 - v26;
  uint64_t v75 = a14;
  uint64_t v69 = type metadata accessor for NestedItem();
  uint64_t v106 = sub_25704A560();
  uint64_t v76 = a15;
  uint64_t v68 = type metadata accessor for NestedItem();
  uint64_t v105 = sub_25704A560();
  uint64_t v77 = a16;
  uint64_t v67 = type metadata accessor for NestedItem();
  uint64_t v96 = a17;
  uint64_t v27 = sub_25704A560();
  uint64_t v28 = *(void *)(a4 + 64);
  uint64_t v63 = a4 + 64;
  uint64_t v29 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v30 = -1;
  uint64_t v104 = v27;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  unint64_t v31 = v30 & v28;
  uint64_t v99 = TupleTypeMetadata2;
  uint64_t v84 = TupleTypeMetadata2 - 8;
  uint64_t v89 = (void (**)(char *, char *, uint64_t))(v18 + 16);
  uint64_t v83 = (void (**)(char *, char *, uint64_t))(v23 + 32);
  uint64_t v71 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v65 = v18;
  uint64_t v82 = (void (**)(char *, uint64_t))(v18 + 8);
  int64_t v64 = (unint64_t)(v29 + 63) >> 6;
  int64_t v59 = v64 - 1;
  uint64_t v66 = a4;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v88 = 0;
  if (!v31) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v95 = (v31 - 1) & v31;
  uint64_t v33 = v87;
  unint64_t v34 = __clz(__rbit64(v31)) | (v88 << 6);
  uint64_t v35 = v86;
LABEL_5:
  uint64_t v36 = v66;
  (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))(v35, *(void *)(v66 + 48) + *(void *)(v65 + 72) * v34, a9);
  uint64_t v37 = v99;
  *(void *)&v35[*(int *)(v99 + 48)] = *(void *)(*(void *)(v36 + 56) + 8 * v34);
  uint64_t v38 = *(void *)(v37 - 8);
  (*(void (**)(char *, void, uint64_t))(v38 + 56))(v35, 0, 1);
  swift_retain();
  while (1)
  {
    (*v83)(v33, v35, v85);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v33, 1, v99) == 1)
    {
      swift_release();
      uint64_t v57 = swift_allocObject();
      *(void *)(v57 + 16) = v106;
      *uint64_t v60 = v57 | 0x8000000000000000;
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = v105;
      unint64_t *v61 = v58 | 0x8000000000000000;
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v104;
      *unint64_t v62 = result | 0x8000000000000000;
      return result;
    }
    uint64_t v42 = *(void *)&v33[*(int *)(v99 + 48)];
    uint64_t v43 = v97;
    (*v71)(v97, v33, a9);
    uint64_t v44 = v73;
    uint64_t v45 = v96;
    uint64_t v46 = type metadata accessor for NestedItem();
    MEMORY[0x25A2B06F0](&v107, v43, v78, a9, v46, v45);
    if ((~v107 & 0xF000000000000007) != 0) {
      unint64_t v47 = v107;
    }
    else {
      unint64_t v47 = 0xC000000000000000;
    }
    uint64_t v48 = v74;
    uint64_t v49 = type metadata accessor for NestedItem();
    MEMORY[0x25A2B06F0](&v107, v43, v79, a9, v49, v45);
    if ((~v107 & 0xF000000000000007) != 0) {
      unint64_t v50 = v107;
    }
    else {
      unint64_t v50 = 0xC000000000000000;
    }
    unint64_t v93 = v47;
    uint64_t v94 = v42;
    v101[0] = v47;
    v101[1] = v42;
    unint64_t v100 = v50;
    uint64_t v51 = v98;
    NestedItem.mapValues<A, B, C, D, E>(_:_:_:)(&v107, &v103, &v102, v101, &v100, v80, v81, v72, v44, v48, v75, v76, v77);
    uint64_t v98 = v51;
    if (v51)
    {
      (*v82)(v97, a9);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_release();
    }
    unint64_t v52 = v107;
    unint64_t v53 = v103;
    unint64_t v90 = v102;
    uint64_t v54 = *v89;
    unint64_t v92 = v50;
    uint64_t v55 = v97;
    uint64_t v56 = v70;
    v54(v70, v97, a9);
    unint64_t v107 = v52;
    uint64_t v91 = v52 & 0x3FFFFFFFFFFFFFFFLL;
    sub_25704A650();
    swift_retain();
    sub_25704A680();
    v54(v56, v55, a9);
    unint64_t v107 = v53;
    sub_25704A650();
    swift_retain();
    sub_25704A680();
    v54(v56, v55, a9);
    unint64_t v107 = v90;
    sub_25704A650();
    swift_retain();
    sub_25704A680();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v82)(v55, a9);
    unint64_t v31 = v95;
    if (v95) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v33 = v87;
    int64_t v39 = v88 + 1;
    if (__OFADD__(v88, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    uint64_t v35 = v86;
    if (v39 < v64)
    {
      unint64_t v40 = *(void *)(v63 + 8 * v39);
      if (v40) {
        goto LABEL_9;
      }
      v88 += 2;
      if (v39 + 1 >= v64)
      {
LABEL_21:
        int64_t v88 = v39;
        goto LABEL_22;
      }
      unint64_t v40 = *(void *)(v63 + 8 * v88);
      if (v40)
      {
        int64_t v39 = v88;
LABEL_9:
        uint64_t v95 = (v40 - 1) & v40;
        unint64_t v34 = __clz(__rbit64(v40)) + (v39 << 6);
        int64_t v88 = v39;
        goto LABEL_5;
      }
      int64_t v41 = v39 + 2;
      if (v39 + 2 < v64) {
        break;
      }
    }
LABEL_22:
    uint64_t v38 = *(void *)(v99 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 56))(v86, 1, 1);
    uint64_t v95 = 0;
  }
  unint64_t v40 = *(void *)(v63 + 8 * v41);
  if (v40)
  {
    v39 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v39 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v39 >= v64)
    {
      int64_t v39 = v59;
      goto LABEL_21;
    }
    unint64_t v40 = *(void *)(v63 + 8 * v39);
    ++v41;
    if (v40) {
      goto LABEL_9;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t NestedItem.compactMapValues<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v45 = a5;
  uint64_t v46 = a1;
  uint64_t v8 = sub_25704AC70();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v44 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a3[3];
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v5;
  unint64_t v22 = (unint64_t)*v5 >> 62;
  unint64_t v23 = 0xC000000000000000;
  switch(v22)
  {
    case 1uLL:
      uint64_t v44 = (uint64_t)&v44;
      uint64_t v50 = *(void *)((result & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      MEMORY[0x270FA5388](result);
      uint64_t v27 = a3[2];
      *(&v44 - 6) = v27;
      *(&v44 - 5) = v15;
      uint64_t v28 = a3[4];
      *(&v44 - 4) = a4;
      *(&v44 - 3) = v28;
      uint64_t v29 = v47;
      *(&v44 - 2) = (uint64_t)v46;
      *(&v44 - 1) = v29;
      uint64_t v30 = sub_25704AB00();
      uint64_t v31 = type metadata accessor for NestedItem();
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC968);
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v34 = v48;
      uint64_t result = sub_256F9A130((void (*)(char *, char *))sub_256FE064C, (uint64_t)(&v44 - 8), v30, v31, v32, WitnessTable, MEMORY[0x263F8E4E0], (uint64_t)&v49);
      if (!v34)
      {
        uint64_t v50 = result;
        MEMORY[0x270FA5388](result);
        *(&v44 - 4) = v27;
        *(&v44 - 3) = v15;
        *(&v44 - 2) = a4;
        *(&v44 - 1) = v28;
        sub_25704AB00();
        swift_getWitnessTable();
        uint64_t v41 = sub_25704A950();
        uint64_t v48 = 0;
        swift_bridgeObjectRelease();
        uint64_t v50 = v41;
        swift_getWitnessTable();
        if (sub_25704ABE0()) {
          goto LABEL_11;
        }
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v41;
        unint64_t v23 = result | 0x4000000000000000;
        goto LABEL_15;
      }
      break;
    case 2uLL:
      MEMORY[0x270FA5388](result);
      uint64_t v35 = a3[2];
      *(&v44 - 6) = v35;
      *(&v44 - 5) = v15;
      uint64_t v36 = a3[4];
      *(&v44 - 4) = a4;
      *(&v44 - 3) = v36;
      uint64_t v37 = v47;
      *(&v44 - 2) = (uint64_t)v46;
      *(&v44 - 1) = v37;
      type metadata accessor for NestedItem();
      uint64_t v38 = v48;
      uint64_t result = sub_25704A630();
      if (!v38)
      {
        uint64_t v50 = result;
        MEMORY[0x270FA5388](result);
        *(&v44 - 4) = v35;
        *(&v44 - 3) = v15;
        *(&v44 - 2) = a4;
        *(&v44 - 1) = v36;
        sub_25704A650();
        swift_getTupleTypeMetadata2();
        swift_getWitnessTable();
        uint64_t v39 = sub_25704A950();
        uint64_t v48 = 0;
        swift_bridgeObjectRelease();
        uint64_t v50 = v39;
        sub_25704AB00();
        swift_getWitnessTable();
        if ((sub_25704ABE0() & 1) == 0)
        {
          uint64_t v40 = swift_allocObject();
          uint64_t v50 = v39;
          swift_getWitnessTable();
          uint64_t result = sub_25704A5C0();
          *(void *)(v40 + 16) = result;
          unint64_t v23 = v40 | 0x8000000000000000;
          goto LABEL_15;
        }
LABEL_11:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      break;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v24 = v18;
      uint64_t v44 = v17;
      uint64_t v25 = swift_projectBox();
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, v25, v15);
      uint64_t v26 = v48;
      v46(v20);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v15);
      if (!v26)
      {
        uint64_t v48 = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v11, 1, a4) == 1)
        {
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v11, v8);
LABEL_12:
          unint64_t v23 = 0xC000000000000000;
        }
        else
        {
          uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
          v42(v14, v11, a4);
          unint64_t v23 = swift_allocBox();
          uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v42)(v43, v14, a4);
        }
LABEL_15:
        *uint64_t v45 = v23;
      }
      break;
  }
  return result;
}

uint64_t sub_256FD8FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = type metadata accessor for NestedItem();
  uint64_t result = a9(a2, a3, v14, a6);
  if (v9) {
    *a8 = v9;
  }
  return result;
}

uint64_t sub_256FD9094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for NestedItem();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void *)(a1 + *(int *)(v7 + 56));
  if (v10 == 0xC000000000000000)
  {
    uint64_t v11 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
  else
  {
    uint64_t v13 = *(void *)(a2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v9, a1, a2);
    uint64_t v14 = swift_getTupleTypeMetadata2();
    uint64_t v15 = *(int *)(v14 + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v9, a2);
    *(void *)(a3 + v15) = v10;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a3, 0, 1, v14);
    return swift_retain();
  }
}

uint64_t NestedItem.mapValues<A>(prefix:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11 = a5[3];
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v6;
  unint64_t v20 = 0xC000000000000000;
  switch((unint64_t)*v6 >> 62)
  {
    case 1uLL:
      unint64_t v63 = a2;
      int64_t v64 = v15;
      uint64_t v24 = *(void *)((result & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v65 = v13;
      uint64_t v66 = v14;
      uint64_t v25 = v16;
      uint64_t v62 = swift_allocObject();
      uint64_t v68 = v24;
      uint64_t v26 = sub_25704AB00();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v28 = MEMORY[0x25A2B09E0](&v69, v26, WitnessTable);
      uint64_t v61 = &v59;
      uint64_t v68 = v69;
      uint64_t v29 = MEMORY[0x270FA5388](v28);
      uint64_t v30 = a5[2];
      *(&v59 - 8) = v30;
      *(&v59 - 7) = v11;
      uint64_t v31 = a5[4];
      *(&v59 - 6) = a6;
      *(&v59 - 5) = v31;
      unint64_t v32 = v63;
      *(&v59 - 4) = v25;
      *(&v59 - 3) = v32;
      uint64_t v33 = v66;
      *(&v59 - 2) = (uint64_t)v65;
      *(&v59 - 1) = v33;
      MEMORY[0x270FA5388](v29);
      *(&v59 - 6) = v30;
      *(&v59 - 5) = v11;
      *(&v59 - 4) = a6;
      *(&v59 - 3) = v31;
      *(&v59 - 2) = (uint64_t)sub_256FE0778;
      *(&v59 - 1) = v34;
      uint64_t v35 = sub_25704B030();
      uint64_t v36 = (char *)type metadata accessor for NestedItem();
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC968);
      uint64_t v38 = swift_getWitnessTable();
      uint64_t v39 = sub_256F99618((void (*)(char *, char *))sub_256FE07AC, (uint64_t)(&v59 - 8), v35, v36, v37, v38, MEMORY[0x263F8E4E0], (uint64_t)&v67);
      if (v7) {
        goto LABEL_10;
      }
      uint64_t v55 = v39;
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v56 = v62;
      *(void *)(v62 + 16) = v55;
      unint64_t v20 = v56 | 0x4000000000000000;
      goto LABEL_14;
    case 2uLL:
      unint64_t v63 = a2;
      int64_t v64 = v15;
      uint64_t v40 = *(void *)((result & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v65 = v13;
      uint64_t v66 = v14;
      uint64_t v59 = v16;
      uint64_t v41 = swift_allocObject();
      uint64_t v61 = &v59;
      uint64_t v62 = v41;
      uint64_t v69 = v40;
      MEMORY[0x270FA5388](v41);
      uint64_t v42 = a5[2];
      *(&v59 - 4) = v42;
      *(&v59 - 3) = v11;
      uint64_t v43 = a5[4];
      *(&v59 - 2) = a6;
      *(&v59 - 1) = v43;
      sub_25704A650();
      swift_getWitnessTable();
      uint64_t v44 = sub_25704A9A0();
      uint64_t v60 = v7;
      uint64_t v61 = &v59;
      uint64_t v69 = v44;
      uint64_t v45 = MEMORY[0x270FA5388](v44);
      *(&v59 - 8) = v42;
      *(&v59 - 7) = v11;
      *(&v59 - 6) = a6;
      *(&v59 - 5) = v43;
      unint64_t v46 = v63;
      *(&v59 - 4) = v59;
      *(&v59 - 3) = v46;
      uint64_t v47 = v66;
      *(&v59 - 2) = (uint64_t)v65;
      *(&v59 - 1) = v47;
      MEMORY[0x270FA5388](v45);
      *(&v59 - 6) = v42;
      *(&v59 - 5) = v11;
      *(&v59 - 4) = a6;
      *(&v59 - 3) = v43;
      *(&v59 - 2) = (uint64_t)sub_256FE0718;
      *(&v59 - 1) = v48;
      swift_getTupleTypeMetadata2();
      uint64_t v49 = sub_25704AB00();
      type metadata accessor for NestedItem();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC968);
      uint64_t v52 = swift_getWitnessTable();
      uint64_t v53 = v60;
      uint64_t v54 = sub_256F9A130((void (*)(char *, char *))sub_256FE0750, (uint64_t)(&v59 - 8), v49, TupleTypeMetadata2, v51, v52, MEMORY[0x263F8E4E0], (uint64_t)&v68);
      if (v53)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        return swift_deallocUninitializedObject();
      }
      uint64_t v57 = v54;
      swift_bridgeObjectRelease();
      uint64_t v69 = v57;
      sub_25704AB00();
      swift_getWitnessTable();
      uint64_t result = sub_25704A5C0();
      uint64_t v58 = v62;
      *(void *)(v62 + 16) = result;
      unint64_t v20 = v58 | 0x8000000000000000;
      goto LABEL_14;
    case 3uLL:
      goto LABEL_15;
    default:
      int64_t v64 = v15;
      uint64_t v65 = v13;
      uint64_t v66 = v14;
      uint64_t v21 = v16;
      uint64_t v22 = swift_projectBox();
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v18, v22, v11);
      if (a2)
      {
        unint64_t v23 = a2;
      }
      else
      {
        uint64_t v21 = 0;
        unint64_t v23 = 0xE000000000000000;
      }
      unint64_t v20 = swift_allocBox();
      swift_bridgeObjectRetain();
      v65(v21, v23, v18);
      if (v7)
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
        swift_bridgeObjectRelease();
        return swift_deallocBox();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
        uint64_t result = swift_bridgeObjectRelease();
LABEL_14:
        uint64_t v15 = v64;
LABEL_15:
        *uint64_t v15 = v20;
      }
      return result;
  }
}

uint64_t sub_256FD98FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = sub_256FE140C(a1, a3, a4);
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for NestedItem();
  NestedItem.mapValues<A>(prefix:_:)(v11, v13, a5, a6, v14, a9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FD99C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NestedItem();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16);
  v9((char *)&v17 - v7, a1, a3);
  uint64_t v10 = sub_25704A7D0();
  uint64_t v12 = v11;
  v9(v8, a2, a3);
  if (v10 == sub_25704A7D0() && v12 == v13) {
    char v15 = 0;
  }
  else {
    char v15 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15 & 1;
}

uint64_t sub_256FD9B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v33 = a8;
  uint64_t v31 = a2;
  uint64_t v32 = a7;
  v29[2] = a10;
  uint64_t v15 = *(void *)(a9 - 8);
  v29[1] = a12;
  uint64_t v30 = a11;
  uint64_t v16 = MEMORY[0x270FA5388](a1);
  uint64_t v18 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *v19;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v29[0] = v16;
  v21(v16, v22, a9);
  uint64_t v37 = v20;
  v21((uint64_t)v18, a3, a9);
  uint64_t v23 = sub_25704A7D0();
  uint64_t v25 = v24;
  if (a6)
  {
    uint64_t v35 = a5;
    uint64_t v36 = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25704A850();
    swift_bridgeObjectRetain();
    sub_25704A850();
    swift_bridgeObjectRelease_n();
    uint64_t v23 = v35;
    uint64_t v25 = v36;
  }
  uint64_t v26 = type metadata accessor for NestedItem();
  uint64_t v27 = v34;
  NestedItem.mapValues<A>(prefix:_:)(v23, v25, v32, v33, v26, v30);
  if (v27) {
    (*(void (**)(void, uint64_t))(v15 + 8))(v29[0], a9);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FD9D04@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, void *a3@<X7>, uint64_t a4@<X8>)
{
  type metadata accessor for NestedItem();
  uint64_t v8 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  type metadata accessor for NestedItem();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = a2(a4, a4 + *(int *)(TupleTypeMetadata2 + 48), a1, v8);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t NestedItem.flattened(prefix:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  switch((unint64_t)*v3 >> 62)
  {
    case 1uLL:
      uint64_t v33 = *(void *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v24 = sub_25704AB00();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v26 = MEMORY[0x25A2B09E0](&v34, v24, WitnessTable);
      uint64_t v33 = v34;
      uint64_t v27 = MEMORY[0x270FA5388](v26);
      *(&v32 - 6) = a3[2];
      *(&v32 - 5) = v7;
      *(&v32 - 4) = a3[4];
      *(&v32 - 3) = a1;
      *(&v32 - 2) = a2;
      MEMORY[0x270FA5388](v27);
      *(&v32 - 6) = v28;
      *(&v32 - 5) = v7;
      *(&v32 - 4) = v29;
      *(&v32 - 3) = (uint64_t)sub_256FE0814;
      *(&v32 - 2) = v30;
      sub_25704B030();
      swift_getTupleTypeMetadata2();
      sub_25704AB00();
      swift_getWitnessTable();
      swift_getWitnessTable();
      uint64_t v19 = sub_25704A9B0();
      goto LABEL_11;
    case 2uLL:
      uint64_t v34 = *(void *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      MEMORY[0x270FA5388](v11);
      uint64_t v20 = a3[2];
      *(&v32 - 4) = v20;
      *(&v32 - 3) = v7;
      uint64_t v21 = a3[4];
      *(&v32 - 2) = v21;
      sub_25704A650();
      swift_getWitnessTable();
      uint64_t v34 = sub_25704A9A0();
      uint64_t v22 = MEMORY[0x270FA5388](v34);
      *(&v32 - 6) = v20;
      *(&v32 - 5) = v7;
      *(&v32 - 4) = v21;
      *(&v32 - 3) = a1;
      *(&v32 - 2) = a2;
      MEMORY[0x270FA5388](v22);
      *(&v32 - 6) = v20;
      *(&v32 - 5) = v7;
      *(&v32 - 4) = v21;
      *(&v32 - 3) = (uint64_t)sub_256FE07EC;
      *(&v32 - 2) = v23;
      swift_getTupleTypeMetadata2();
      sub_25704AB00();
      swift_getTupleTypeMetadata2();
      sub_25704AB00();
      swift_getWitnessTable();
      swift_getWitnessTable();
      uint64_t v19 = sub_25704A9B0();
LABEL_11:
      swift_bridgeObjectRelease();
      break;
    case 3uLL:
      swift_getTupleTypeMetadata2();
      uint64_t v19 = sub_25704AA80();
      break;
    default:
      uint64_t v12 = swift_projectBox();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      sub_25704B160();
      swift_allocObject();
      uint64_t v15 = sub_25704AA40();
      if (a2) {
        uint64_t v16 = a1;
      }
      else {
        uint64_t v16 = 0;
      }
      unint64_t v17 = 0xE000000000000000;
      if (a2) {
        unint64_t v17 = a2;
      }
      *(void *)uint64_t v14 = v16;
      *((void *)v14 + 1) = v17;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v14[*(int *)(TupleTypeMetadata2 + 48)], v10, v7);
      uint64_t v34 = v15;
      uint64_t v18 = sub_25704AB00();
      nullsub_1(v18);
      uint64_t v19 = v34;
      swift_bridgeObjectRetain();
      break;
  }
  return v19;
}

uint64_t sub_256FDA3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_256FE140C(a1, a3, a4);
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for NestedItem();
  uint64_t v8 = NestedItem.flattened(prefix:)(v4, v6, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_256FDA434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v20 = *v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v9);
  uint64_t v11 = sub_25704A7D0();
  uint64_t v13 = v12;
  if (a4)
  {
    uint64_t v18 = a3;
    uint64_t v19 = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25704A850();
    swift_bridgeObjectRetain();
    sub_25704A850();
    swift_bridgeObjectRelease_n();
    uint64_t v11 = v18;
    uint64_t v13 = v19;
  }
  uint64_t v14 = type metadata accessor for NestedItem();
  uint64_t v15 = NestedItem.flattened(prefix:)(v11, v13, v14);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t static NestedItem.unflattened<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  swift_getTupleTypeMetadata2();
  sub_25704AB00();
  swift_getWitnessTable();
  if ((sub_25704ABE0() & 1) == 0) {
    return sub_256FDA6F4(a1, MEMORY[0x263F8D310], a2, MEMORY[0x263F8D320], a3);
  }
  uint64_t v6 = swift_allocObject();
  type metadata accessor for NestedItem();
  swift_getTupleTypeMetadata2();
  sub_25704AA80();
  uint64_t result = sub_25704A5B0();
  *(void *)(v6 + 16) = result;
  *a3 = v6 | 0x8000000000000000;
  return result;
}

uint64_t sub_256FDA6F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v160 = a2;
  uint64_t v161 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = a1;
  uint64_t v8 = *(uint64_t (**)())(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v163 = (char *)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v147 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = *(void *)(v147 + 64);
  uint64_t v12 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  *(void *)&long long v157 = (char *)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v159 = (uint64_t *)((char *)&v137 - v14);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (uint64_t *)((char *)&v137 - v16);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (uint64_t *)((char *)&v137 - v18);
  if (MEMORY[0x25A2B0B50](v6, TupleTypeMetadata2) == 1)
  {
    sub_25704AB30();
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = (uint64_t)v19 + *(int *)(TupleTypeMetadata2 + 48);
    if (v20) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = v21 == 0xE000000000000000;
    }
    if (v23)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      (*((void (**)(uint64_t, uint64_t))v8 + 1))(v22, v5);
    }
    else
    {
      char v24 = sub_25704B1E0();
      swift_bridgeObjectRelease();
      (*((void (**)(uint64_t, uint64_t))v8 + 1))(v22, v5);
      if ((v24 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v75 = swift_allocBox();
    uint64_t v77 = v76;
    sub_25704AB30();
    swift_bridgeObjectRelease();
    uint64_t result = (*((uint64_t (**)(uint64_t, char *, uint64_t))v8 + 4))(v77, (char *)v17 + *(int *)(TupleTypeMetadata2 + 48), v5);
    *a5 = v75;
    return result;
  }
LABEL_7:
  uint64_t v137 = v11;
  uint64_t v139 = v17;
  uint64_t v140 = v8;
  uint64_t v138 = (unint64_t *)a5;
  uint64_t v156 = sub_25704AB00();
  uint64_t v25 = sub_25704A560();
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = MEMORY[0x25A2B0B70](v26, TupleTypeMetadata2);
  uint64_t v162 = v5;
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v8 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v17 = 0;
    uint64_t v145 = (char *)v159 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v146 = (void (**)(uint64_t *, long long *, uint64_t))(v147 + 16);
    unint64_t v144 = (void (**)(char *, char *, uint64_t))((char *)v140 + 32);
    uint64_t v143 = (void (**)(uint64_t, char *, uint64_t))((char *)v140 + 16);
    uint64_t v141 = (void (**)(char *, uint64_t))((char *)v140 + 8);
    uint64_t v142 = v6;
    uint64_t v154 = TupleTypeMetadata2;
    while (1)
    {
      unint64_t v153 = v29;
      uint64_t v22 = sub_25704AAB0();
      sub_25704AA50();
      if (v22)
      {
        (*(void (**)(uint64_t *, unint64_t, uint64_t))(v147 + 16))(v159, v6+ ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80))+ *(void *)(v147 + 72) * v28, TupleTypeMetadata2);
        uint64_t v33 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v74 = sub_25704AE50();
        if (v137 != 8) {
          goto LABEL_66;
        }
        uint64_t v22 = v74;
        *(void *)&long long v166 = v74;
        (*v146)(v159, &v166, TupleTypeMetadata2);
        swift_unknownObjectRelease();
        uint64_t v33 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
      }
      uint64_t v148 = v33;
      uint64_t v149 = v28;
      uint64_t v152 = v25;
      unint64_t v155 = v8;
      uint64_t v158 = v30;
      uint64_t v35 = *v159;
      unint64_t v34 = v159[1];
      (*v144)(v163, v145, v5);
      sub_256FDB810(46, 0xE100000000000000, v35, v34);
      uint64_t v151 = (char *)v17;
      if (v36)
      {
        uint64_t v150 = 0;
        unint64_t v56 = 0xE000000000000000;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v37 = sub_25704A920();
        uint64_t v39 = v38;
        uint64_t v41 = v40;
        uint64_t v43 = v42;
        swift_bridgeObjectRelease();
        uint64_t v44 = MEMORY[0x25A2B0870](v37, v39, v41, v43);
        unint64_t v46 = v45;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        unint64_t v47 = sub_25704A830();
        swift_bridgeObjectRelease();
        unint64_t v48 = sub_256FE1690(v47, v35, v34);
        uint64_t v50 = v49;
        uint64_t v52 = v51;
        uint64_t v54 = v53;
        swift_bridgeObjectRelease();
        uint64_t v150 = MEMORY[0x25A2B0870](v48, v50, v52, v54);
        unint64_t v56 = v55;
        uint64_t v5 = v162;
        swift_bridgeObjectRelease();
        uint64_t v35 = v44;
        unint64_t v34 = v46;
      }
      *(void *)&long long v166 = v35;
      *((void *)&v166 + 1) = v34;
      uint64_t v57 = sub_25704A910();
      uint64_t v59 = v58;
      uint64_t v60 = (uint64_t *)swift_allocObject();
      uint64_t v62 = (uint64_t (*)(uint64_t))v160;
      uint64_t v61 = v161;
      v60[2] = v160;
      v60[3] = v5;
      v60[4] = v61;
      sub_256FE2168((uint64_t)v155);
      *(void *)&long long v166 = v150;
      *((void *)&v166 + 1) = v56;
      uint64_t v63 = sub_25704A910();
      uint64_t v64 = v157;
      uint64_t v65 = v157 + *(int *)(v154 + 48);
      *(void *)long long v157 = v63;
      *(void *)(v64 + 8) = v66;
      (*v143)(v65, v163, v5);
      uint64_t v67 = (uint64_t (**)(uint64_t))swift_allocObject();
      v67[2] = v62;
      v67[3] = (uint64_t (*)(uint64_t))v5;
      v67[4] = (uint64_t (*)(uint64_t))v61;
      v67[5] = (uint64_t (*)(uint64_t))sub_256FE2120;
      a5 = v60;
      uint64_t v68 = v67;
      v67[6] = (uint64_t (*)(uint64_t))v60;
      sub_256FE2168((uint64_t)v158);
      uint64_t v69 = v152;
      swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v166 = v69;
      sub_256FED050(v57, v59);
      if (__OFADD__(*(void *)(v69 + 16), (v70 & 1) == 0)) {
        break;
      }
      char v71 = v70;
      sub_25704AFB0();
      char v72 = sub_25704AF90();
      uint64_t v5 = v162;
      if (v72)
      {
        sub_256FED050(v57, v59);
        if ((v71 & 1) != (v73 & 1)) {
          goto LABEL_68;
        }
      }
      uint64_t v25 = v166;
      swift_bridgeObjectRelease();
      if (v71)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v31 = swift_bridgeObjectRetain();
        *(void *)&long long v164 = v68[5](v31);
        *(void *)&long long v166 = v57;
        *((void *)&v166 + 1) = v59;
        swift_bridgeObjectRetain();
        sub_25704AFA0();
      }
      swift_bridgeObjectRelease();
      sub_25704AAE0();
      swift_bridgeObjectRelease();
      (*v141)(v163, v5);
      uint64_t v6 = v142;
      TupleTypeMetadata2 = v154;
      uint64_t v32 = MEMORY[0x25A2B0B70](v142, v154);
      uint64_t v28 = v149 + 1;
      uint64_t v30 = sub_256FE2188;
      uint64_t v8 = sub_256FE2120;
      uint64_t v29 = a5;
      uint64_t v17 = (uint64_t *)v68;
      if (v148 == v32) {
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v8 = 0;
  a5 = 0;
  uint64_t v30 = 0;
LABEL_28:
  uint64_t v158 = v30;
  uint64_t v159 = a5;
  swift_bridgeObjectRelease();
  uint64_t v79 = v139;
  sub_25704AB30();
  uint64_t v80 = *v79;
  unint64_t v81 = v79[1];
  uint64_t v82 = (char *)v79 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v83 = v5;
  char v84 = sub_256FDB684(v80, v81);
  swift_bridgeObjectRelease();
  (*((void (**)(char *, uint64_t))v140 + 1))(v82, v83);
  if (v84)
  {
    unint64_t v155 = v8;
    type metadata accessor for NestedItem();
    uint64_t v90 = v25;
    int64_t v91 = 0;
    *(void *)&long long v164 = sub_25704A560();
    uint64_t v92 = v90;
    uint64_t v95 = *(void *)(v90 + 64);
    uint64_t v94 = v90 + 64;
    uint64_t v93 = v95;
    uint64_t v96 = 1 << *(unsigned char *)(v94 - 32);
    uint64_t v97 = -1;
    if (v96 < 64) {
      uint64_t v97 = ~(-1 << v96);
    }
    unint64_t v98 = v97 & v93;
    int64_t v99 = (unint64_t)(v96 + 63) >> 6;
    while (1)
    {
      if (v98)
      {
        unint64_t v100 = __clz(__rbit64(v98));
        v98 &= v98 - 1;
        unint64_t v101 = v100 | (v91 << 6);
      }
      else
      {
        int64_t v106 = v91 + 1;
        if (__OFADD__(v91, 1)) {
          goto LABEL_61;
        }
        if (v106 >= v99)
        {
LABEL_49:
          swift_release();
          uint64_t v109 = swift_allocObject();
          *(void *)(v109 + 16) = v164;
          sub_256FE2168((uint64_t)v155);
          uint64_t result = sub_256FE2168((uint64_t)v158);
          unint64_t v110 = v109 | 0x8000000000000000;
          goto LABEL_59;
        }
        unint64_t v107 = *(void *)(v94 + 8 * v106);
        ++v91;
        if (!v107)
        {
          int64_t v91 = v106 + 1;
          if (v106 + 1 >= v99) {
            goto LABEL_49;
          }
          unint64_t v107 = *(void *)(v94 + 8 * v91);
          if (!v107)
          {
            int64_t v108 = v106 + 2;
            if (v108 >= v99) {
              goto LABEL_49;
            }
            unint64_t v107 = *(void *)(v94 + 8 * v108);
            if (!v107)
            {
              while (1)
              {
                int64_t v91 = v108 + 1;
                if (__OFADD__(v108, 1)) {
                  goto LABEL_62;
                }
                if (v91 >= v99) {
                  goto LABEL_49;
                }
                unint64_t v107 = *(void *)(v94 + 8 * v91);
                ++v108;
                if (v107) {
                  goto LABEL_48;
                }
              }
            }
            int64_t v91 = v108;
          }
        }
LABEL_48:
        unint64_t v98 = (v107 - 1) & v107;
        unint64_t v101 = __clz(__rbit64(v107)) + (v91 << 6);
      }
      unint64_t v102 = (uint64_t *)(*(void *)(v92 + 48) + 16 * v101);
      uint64_t v104 = *v102;
      uint64_t v103 = v102[1];
      swift_bridgeObjectRetain();
      uint64_t v105 = swift_bridgeObjectRetain();
      sub_256FDA6F4(&v168, v105, v160, v162, v161);
      swift_bridgeObjectRelease();
      uint64_t v170 = v168;
      *(void *)&long long v166 = v104;
      *((void *)&v166 + 1) = v103;
      sub_25704A650();
      sub_25704A680();
    }
  }
  uint64_t v85 = swift_bridgeObjectRetain();
  char v86 = MEMORY[0x25A2B0690](v85, MEMORY[0x263F8D310], v156, MEMORY[0x263F8D320]);
  uint64_t v87 = swift_bridgeObjectRelease();
  if (v86)
  {
    swift_bridgeObjectRelease();
    uint64_t v88 = swift_allocObject();
    type metadata accessor for NestedItem();
    *(void *)(v88 + 16) = sub_25704AA80();
    uint64_t v89 = (uint64_t)v8;
    goto LABEL_58;
  }
  unint64_t v155 = v8;
  *(void *)&long long v166 = v25;
  MEMORY[0x270FA5388](v87);
  uint64_t v112 = v160;
  uint64_t v111 = v161;
  *(&v137 - 4) = v160;
  *(&v137 - 3) = v83;
  *(&v137 - 2) = v111;
  uint64_t v113 = sub_25704A650();
  swift_bridgeObjectRetain();
  uint64_t v114 = swift_getTupleTypeMetadata2();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v117 = sub_256F9A130((void (*)(char *, char *))sub_256FE21B8, (uint64_t)(&v137 - 6), v113, v114, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v116);
  swift_bridgeObjectRelease();
  uint64_t v163 = (char *)v117;
  *(void *)&long long v166 = v117;
  uint64_t v156 = v114;
  uint64_t v118 = sub_25704AB00();
  uint64_t v119 = swift_getWitnessTable();
  MEMORY[0x25A2B0A10](&v164, v118, v119);
  uint64_t v168 = v164;
  uint64_t v120 = (void *)swift_allocObject();
  v120[2] = v112;
  v120[3] = v83;
  v120[4] = v111;
  sub_25704AE10();
  swift_getWitnessTable();
  sub_25704B0B0();
  swift_release();
  swift_bridgeObjectRelease();
  long long v157 = v166;
  long long v164 = v166;
  uint64_t v165 = v167;
  sub_25704AF40();
  swift_getWitnessTable();
  sub_25704A9D0();
  swift_release();
  swift_bridgeObjectRelease();
  if (v169) {
    goto LABEL_67;
  }
  uint64_t v121 = v168;
  swift_bridgeObjectRelease();
  *(void *)&long long v166 = 0xC000000000000000;
  BOOL v122 = __OFADD__(v121, 1);
  uint64_t v123 = v121 + 1;
  if (!v122)
  {
    uint64_t v124 = type metadata accessor for NestedItem();
    *(void *)&long long v166 = sub_256FE157C((uint64_t)&v166, v123, v124);
    unint64_t v125 = v163;
    uint64_t v126 = v156;
    if (MEMORY[0x25A2B0B70](v163, v156))
    {
      uint64_t v127 = 0;
      uint64_t v128 = v125 + 40;
      while (1)
      {
        char v129 = sub_25704AAB0();
        sub_25704AA50();
        if ((v129 & 1) == 0) {
          break;
        }
        uint64_t v130 = v127 + 1;
        if (__OFADD__(v127, 1)) {
          goto LABEL_64;
        }
        unint64_t v131 = *((void *)v128 - 1);
        uint64_t v132 = swift_bridgeObjectRetain();
        sub_256FDA6F4(&v164, v132, v160, v162, v161);
        swift_bridgeObjectRelease();
        uint64_t v133 = v164;
        uint64_t v134 = sub_25704AB00();
        sub_25704AA70();
        uint64_t v135 = v166;
        sub_256FF0A98(v131, v166);
        *(void *)(v135 + 8 * v131 + 32) = v133;
        uint64_t v136 = v163;
        swift_release();
        nullsub_1(v134);
        ++v127;
        v128 += 16;
        if (v130 == MEMORY[0x25A2B0B70](v136, v126)) {
          goto LABEL_57;
        }
      }
LABEL_63:
      sub_25704AE50();
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
LABEL_57:
    swift_bridgeObjectRelease();
    uint64_t v88 = swift_allocObject();
    *(void *)(v88 + 16) = v166;
    uint64_t v89 = (uint64_t)v155;
LABEL_58:
    sub_256FE2168(v89);
    uint64_t result = sub_256FE2168((uint64_t)v158);
    unint64_t v110 = v88 | 0x4000000000000000;
LABEL_59:
    *uint64_t v138 = v110;
    return result;
  }
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  uint64_t result = sub_25704B230();
  __break(1u);
  return result;
}

uint64_t sub_256FDB684(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = sub_25704A900();
      uint64_t v5 = v4;
      swift_bridgeObjectRelease();
      if (v3 == 46 && v5 == 0xE100000000000000) {
        break;
      }
      char v6 = sub_25704B1E0();
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0 || 4 * v2 == (unint64_t)sub_25704A830() >> 14) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
  }
LABEL_12:
  uint64_t v7 = sub_25704A920();
  unint64_t v9 = v8;
  unint64_t v11 = v10;
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if ((v7 ^ v9) < 0x4000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    sub_256FE14A8(v7, v9, v11, v13, 10);
    if ((v14 & 0x100) != 0) {
      sub_256FE0AC8(v7, v9, v11, v13, 10);
    }
    char v15 = v14;
    swift_bridgeObjectRelease();
    return v15 & 1;
  }
}

unint64_t sub_256FDB810(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (sub_25704A900() != a1 || v9 != a2)
  {
    char v10 = sub_25704B1E0();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = sub_25704A830();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t *sub_256FDB900@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *result;
  unint64_t v5 = result[1];
  uint64_t v6 = HIBYTE(v5) & 0xF;
  uint64_t v7 = *result & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v8 = *result & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    __break(1u);
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v12 = (uint64_t)sub_256FE1324(v4, v5, 10);
    char v26 = v25;
    swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_55;
    }
LABEL_36:
    *a2 = v12;
    a2[1] = v2;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  uint64_t v2 = result[2];
  if ((v5 & 0x1000000000000000) != 0) {
    goto LABEL_54;
  }
  if ((v5 & 0x2000000000000000) == 0)
  {
    if ((v4 & 0x1000000000000000) == 0) {
      goto LABEL_56;
    }
    for (i = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32); ; i = (unsigned __int8 *)sub_25704AE90())
    {
      char v10 = sub_256FE0BBC(i, v7, 10);
      if ((v11 & 1) == 0) {
        break;
      }
LABEL_55:
      __break(1u);
LABEL_56:
      ;
    }
    uint64_t v12 = (uint64_t)v10;
    goto LABEL_36;
  }
  v27[0] = *result;
  v27[1] = v5 & 0xFFFFFFFFFFFFFFLL;
  if (v4 == 43)
  {
    if (!v6) {
      goto LABEL_59;
    }
    if (v6 == 1) {
      goto LABEL_57;
    }
    if ((BYTE1(v4) - 48) <= 9u)
    {
      uint64_t v12 = (BYTE1(v4) - 48);
      if (v6 == 2) {
        goto LABEL_34;
      }
      if ((BYTE2(v4) - 48) <= 9u)
      {
        uint64_t v12 = 10 * (BYTE1(v4) - 48) + (BYTE2(v4) - 48);
        uint64_t v13 = v6 - 3;
        if (v6 != 3)
        {
          __int16 v14 = (unsigned __int8 *)v27 + 3;
          while (1)
          {
            unsigned int v15 = *v14 - 48;
            if (v15 > 9) {
              goto LABEL_32;
            }
            uint64_t v16 = 10 * v12;
            if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63) {
              goto LABEL_32;
            }
            uint64_t v12 = v16 + v15;
            if (__OFADD__(v16, v15)) {
              goto LABEL_32;
            }
            LOBYTE(v6) = 0;
            ++v14;
            if (!--v13) {
              goto LABEL_35;
            }
          }
        }
        goto LABEL_34;
      }
    }
LABEL_32:
    uint64_t v12 = 0;
    LOBYTE(v6) = 1;
    goto LABEL_35;
  }
  if (v4 != 45)
  {
    if (!v6 || (v4 - 48) > 9u) {
      goto LABEL_32;
    }
    uint64_t v12 = (v4 - 48);
    if (v6 == 1)
    {
LABEL_34:
      LOBYTE(v6) = 0;
      goto LABEL_35;
    }
    if ((BYTE1(v4) - 48) <= 9u)
    {
      uint64_t v12 = 10 * (v4 - 48) + (BYTE1(v4) - 48);
      uint64_t v17 = v6 - 2;
      if (v6 != 2)
      {
        uint64_t v18 = (unsigned __int8 *)v27 + 2;
        while (1)
        {
          unsigned int v19 = *v18 - 48;
          if (v19 > 9) {
            goto LABEL_32;
          }
          uint64_t v20 = 10 * v12;
          if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63) {
            goto LABEL_32;
          }
          uint64_t v12 = v20 + v19;
          if (__OFADD__(v20, v19)) {
            goto LABEL_32;
          }
          LOBYTE(v6) = 0;
          ++v18;
          if (!--v17) {
            goto LABEL_35;
          }
        }
      }
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v6)
  {
    if (v6 != 1)
    {
      if ((BYTE1(v4) - 48) > 9u) {
        goto LABEL_32;
      }
      if (v6 == 2)
      {
        LOBYTE(v6) = 0;
        uint64_t v12 = -(uint64_t)(BYTE1(v4) - 48);
        goto LABEL_35;
      }
      if ((BYTE2(v4) - 48) > 9u) {
        goto LABEL_32;
      }
      uint64_t v12 = -10 * (BYTE1(v4) - 48) - (BYTE2(v4) - 48);
      uint64_t v21 = v6 - 3;
      if (v6 != 3)
      {
        uint64_t v22 = (unsigned __int8 *)v27 + 3;
        while (1)
        {
          unsigned int v23 = *v22 - 48;
          if (v23 > 9) {
            goto LABEL_32;
          }
          uint64_t v24 = 10 * v12;
          if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63) {
            goto LABEL_32;
          }
          uint64_t v12 = v24 - v23;
          if (__OFSUB__(v24, v23)) {
            goto LABEL_32;
          }
          LOBYTE(v6) = 0;
          ++v22;
          if (!--v21) {
            goto LABEL_35;
          }
        }
      }
      goto LABEL_34;
    }
LABEL_57:
    uint64_t v12 = 0;
LABEL_35:
    if (v6) {
      goto LABEL_55;
    }
    goto LABEL_36;
  }
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t NestedItem.flattenedValues()(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  switch((unint64_t)*v1 >> 62)
  {
    case 1uLL:
      uint64_t v19 = *(void *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      MEMORY[0x270FA5388](v7);
      *(&v18 - 4) = a1[2];
      *(&v18 - 3) = v3;
      *(&v18 - 2) = a1[4];
      sub_25704AB00();
      sub_25704AB00();
      swift_getWitnessTable();
      swift_getWitnessTable();
      uint64_t v12 = sub_25704A9B0();
      break;
    case 2uLL:
      uint64_t v19 = *(void *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      MEMORY[0x270FA5388](v7);
      uint64_t v13 = a1[2];
      *(&v18 - 4) = v13;
      *(&v18 - 3) = v3;
      uint64_t v14 = a1[4];
      *(&v18 - 2) = v14;
      sub_25704A650();
      swift_getWitnessTable();
      uint64_t v19 = sub_25704A9A0();
      uint64_t v15 = MEMORY[0x270FA5388](v19);
      *(&v18 - 4) = v13;
      *(&v18 - 3) = v3;
      *(&v18 - 2) = v14;
      MEMORY[0x270FA5388](v15);
      *(&v18 - 6) = v13;
      *(&v18 - 5) = v3;
      *(&v18 - 4) = v14;
      *(&v18 - 3) = (uint64_t)sub_256FE08DC;
      *(&v18 - 2) = v16;
      swift_getTupleTypeMetadata2();
      sub_25704AB00();
      sub_25704AB00();
      swift_getWitnessTable();
      swift_getWitnessTable();
      uint64_t v12 = sub_25704A9B0();
      swift_bridgeObjectRelease();
      break;
    case 3uLL:
      uint64_t v12 = sub_25704AA80();
      break;
    default:
      uint64_t v8 = swift_projectBox();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
      sub_256FE086C(v3, v3);
      swift_allocObject();
      uint64_t v9 = sub_25704AA40();
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, v3);
      uint64_t v19 = v9;
      uint64_t v11 = sub_25704AB00();
      nullsub_1(v11);
      uint64_t v12 = v19;
      break;
  }
  return v12;
}

uint64_t sub_256FDC038(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v66 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a4[2] - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v62 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v61 = (char *)&v53 - v11;
  uint64_t v64 = v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v63 = sub_25704AC70();
  uint64_t v14 = MEMORY[0x270FA5388](v63);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v53 - v18;
  uint64_t v20 = *v4;
  switch((unint64_t)*v4 >> 62)
  {
    case 1uLL:
      uint64_t v22 = *(void *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_25704A570();
      uint64_t v70 = v23;
      if (!MEMORY[0x25A2B0B70](v22, a4))
      {
        swift_bridgeObjectRelease();
LABEL_27:
        uint64_t v51 = swift_allocObject();
        *(void *)(v51 + 16) = v23;
        uint64_t v20 = v51 | 0x4000000000000000;
LABEL_28:
        *(void *)uint64_t v7 = v20;
        return a3;
      }
      uint64_t v24 = v7;
      uint64_t v7 = 4;
      break;
    case 2uLL:
      goto LABEL_13;
    case 3uLL:
      goto LABEL_28;
    default:
      if (__OFADD__(a3, 1))
      {
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x256FDC7D4);
      }
      uint64_t v21 = swift_allocBox();
      sub_25704AB30();
      *(void *)uint64_t v7 = v21;
      return ++a3;
  }
  while (1)
  {
    uint64_t v25 = v7 - 4;
    char v26 = sub_25704AAB0();
    sub_25704AA50();
    if (v26)
    {
      uint64_t v8 = *(void *)(v22 + 8 * v7);
      swift_retain();
      uint64_t v27 = v7 - 3;
      if (__OFADD__(v25, 1)) {
        break;
      }
      goto LABEL_8;
    }
    uint64_t v8 = sub_25704AE50();
    swift_retain();
    swift_unknownObjectRelease();
    uint64_t v27 = v7 - 3;
    if (__OFADD__(v25, 1)) {
      break;
    }
LABEL_8:
    uint64_t v68 = v8;
    a3 = sub_256FDC038(&v69, v66, a3, a4);
    sub_25704AB00();
    sub_25704AAE0();
    swift_release();
    ++v7;
    if (v27 == MEMORY[0x25A2B0B70](v22, a4))
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = v70;
      uint64_t v7 = v24;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_13:
  uint64_t v59 = v17;
  uint64_t v60 = v19;
  uint64_t v53 = (void *)v7;
  uint64_t v67 = a3;
  uint64_t v28 = *(void *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v29 = (void *)a4[4];
  uint64_t v30 = v64;
  uint64_t v31 = sub_25704A560();
  uint64_t v69 = v28;
  uint64_t v70 = v31;
  MEMORY[0x270FA5388](v31);
  uint64_t v32 = (void *)a4[3];
  *(&v53 - 4) = v30;
  *(&v53 - 3) = v32;
  *(&v53 - 2) = v29;
  uint64_t v58 = a4;
  uint64_t v33 = sub_25704A650();
  swift_getWitnessTable();
  uint64_t v57 = v33;
  uint64_t v34 = sub_25704A9A0();
  uint64_t v35 = 0;
  uint64_t v65 = TupleTypeMetadata2 - 8;
  v59 += 4;
  unint64_t v55 = (void (**)(char *, char *, void *))(v8 + 16);
  unint64_t v56 = (void (**)(char *, char *, void *))(v8 + 32);
  uint64_t v54 = (void (**)(char *, void *))(v8 + 8);
  char v36 = v61;
  uint64_t v37 = v62;
  while (1)
  {
    if (v35 == MEMORY[0x25A2B0B70](v34, TupleTypeMetadata2))
    {
      uint64_t v38 = *(void *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v16, 1, 1, TupleTypeMetadata2);
      uint64_t v39 = v60;
      goto LABEL_19;
    }
    char v40 = sub_25704AAB0();
    sub_25704AA50();
    uint64_t v39 = v60;
    if ((v40 & 1) == 0) {
      break;
    }
    uint64_t v41 = *(void *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v16, v34+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v35, TupleTypeMetadata2);
    BOOL v42 = __OFADD__(v35++, 1);
    if (v42) {
      goto LABEL_24;
    }
LABEL_18:
    uint64_t v38 = v41;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v16, 0, 1, TupleTypeMetadata2);
LABEL_19:
    (*v59)(v39, v16, v63);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v39, 1, TupleTypeMetadata2) == 1) {
      goto LABEL_25;
    }
    uint64_t v43 = v34;
    uint64_t v44 = v16;
    uint64_t v45 = *(void *)&v39[*(int *)(TupleTypeMetadata2 + 48)];
    unint64_t v46 = v39;
    unint64_t v47 = v64;
    (*v56)(v36, v46, v64);
    uint64_t v68 = v45;
    uint64_t v67 = sub_256FDC038(&v69, v66, v67, v58);
    uint64_t v48 = v69;
    (*v55)(v37, v36, v47);
    uint64_t v69 = v48;
    swift_retain();
    sub_25704A680();
    swift_release();
    uint64_t v16 = v44;
    uint64_t v34 = v43;
    swift_release();
    (*v54)(v36, v47);
  }
  uint64_t v49 = sub_25704AE50();
  uint64_t v41 = *(void *)(TupleTypeMetadata2 - 8);
  if (*(void *)(v41 + 64) != 8) {
    goto LABEL_31;
  }
  uint64_t v69 = v49;
  (*(void (**)(char *, uint64_t *, uint64_t))(v41 + 16))(v16, &v69, TupleTypeMetadata2);
  swift_unknownObjectRelease();
  BOOL v42 = __OFADD__(v35++, 1);
  if (!v42) {
    goto LABEL_18;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  swift_bridgeObjectRelease();
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = v70;
  *uint64_t v53 = v50 | 0x8000000000000000;
  return v67;
}

uint64_t sub_256FDC7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a2;
  type metadata accessor for NestedItem();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = *(int *)(v9 + 48);
  uint64_t v13 = *(void *)(a3 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v30((char *)&v28 - v10, a1, a3);
  uint64_t v14 = *(void *)(a1 + v12);
  uint64_t v15 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v16(v8, v11, a3);
  *(void *)&v8[v15] = v14;
  swift_retain();
  uint64_t v17 = sub_25704A7D0();
  uint64_t v28 = v18;
  uint64_t v29 = v17;
  uint64_t v19 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v20 = v31;
  v30(v11, v31, a3);
  uint64_t v21 = *(void *)(v20 + v19);
  uint64_t v22 = *(int *)(TupleTypeMetadata2 + 48);
  v16(v8, v11, a3);
  *(void *)&v8[v22] = v21;
  uint64_t v23 = v28;
  swift_retain();
  if (v29 == sub_25704A7D0() && v23 == v24) {
    char v26 = 0;
  }
  else {
    char v26 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v26 & 1;
}

Swift::String __swiftcall NestedItem.description(indent:)(Swift::Int indent)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](indent);
  uint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *v2;
  uint64_t v10 = MEMORY[0x25A2B0970](32, 0xE100000000000000, indent);
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v17 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v37 = 2651;
      unint64_t v38 = 0xE200000000000000;
      sub_25704A850();
      swift_bridgeObjectRetain();
      sub_25704A850();
      uint64_t v18 = swift_bridgeObjectRelease();
      unint64_t v19 = v38;
      uint64_t v36 = v37;
      uint64_t v37 = v17;
      MEMORY[0x270FA5388](v18);
      v34[-4] = *(void *)(v3 + 16);
      v34[-3] = v5;
      v34[-2] = *(void *)(v3 + 32);
      v34[-1] = indent;
      uint64_t v20 = sub_25704AB00();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v40 = sub_256F9A130((void (*)(char *, char *))sub_256FE0AA4, (uint64_t)&v34[-6], v20, MEMORY[0x263F8D310], MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v22);
      uint64_t v37 = 2604;
      unint64_t v38 = 0xE200000000000000;
      sub_25704A850();
      sub_25704A850();
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC970);
      sub_256FE0A48();
      sub_25704A6B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = v36;
      unint64_t v38 = v19;
      swift_bridgeObjectRetain();
      sub_25704A850();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25704A850();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 2uLL:
      uint64_t v23 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v37 = 2651;
      unint64_t v38 = 0xE200000000000000;
      v34[1] = v10;
      sub_25704A850();
      swift_bridgeObjectRetain();
      sub_25704A850();
      uint64_t v24 = swift_bridgeObjectRelease();
      v34[0] = v34;
      unint64_t v35 = v38;
      uint64_t v36 = v37;
      uint64_t v37 = v23;
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = *(void *)(v3 + 16);
      v34[-4] = v25;
      v34[-3] = v5;
      uint64_t v26 = *(void *)(v3 + 32);
      v34[-2] = v26;
      sub_25704A650();
      swift_getWitnessTable();
      uint64_t v37 = sub_25704A9A0();
      MEMORY[0x270FA5388](v37);
      v34[-4] = v25;
      v34[-3] = v5;
      v34[-2] = v26;
      v34[-1] = indent;
      swift_getTupleTypeMetadata2();
      uint64_t v27 = sub_25704AB00();
      uint64_t v28 = swift_getWitnessTable();
      uint64_t v30 = sub_256F9A130((void (*)(char *, char *))sub_256FE0A24, (uint64_t)&v34[-6], v27, MEMORY[0x263F8D310], MEMORY[0x263F8E628], v28, MEMORY[0x263F8E658], v29);
      swift_bridgeObjectRelease();
      uint64_t v40 = v30;
      uint64_t v37 = 2604;
      unint64_t v38 = 0xE200000000000000;
      sub_25704A850();
      sub_25704A850();
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC970);
      sub_256FE0A48();
      sub_25704A6B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = v36;
      unint64_t v38 = v35;
      swift_bridgeObjectRetain();
      sub_25704A850();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25704A850();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
LABEL_6:
      sub_25704A850();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_25704A850();
      swift_bridgeObjectRelease();
      uint64_t v14 = v37;
      unint64_t v16 = v38;
      break;
    case 3uLL:
      swift_bridgeObjectRelease();
      unint64_t v16 = 0xE400000000000000;
      uint64_t v14 = 1701736302;
      break;
    default:
      swift_bridgeObjectRelease();
      uint64_t v11 = swift_projectBox();
      uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v12(v8, v11, v5);
      uint64_t v39 = v5;
      uint64_t v13 = __swift_allocate_boxed_opaque_existential_0(&v37);
      v12((char *)v13, (uint64_t)v8, v5);
      if (__OFADD__(indent, 2))
      {
        __break(1u);
        JUMPOUT(0x256FDD064);
      }
      uint64_t v14 = indentedDescription(_:_:)((uint64_t)&v37, indent + 2);
      unint64_t v16 = v15;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
      break;
  }
  uint64_t v31 = v14;
  uint64_t v32 = (void *)v16;
  result._object = v32;
  result._countAndFlagsBits = v31;
  return result;
}

uint64_t sub_256FDD074@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = type metadata accessor for NestedItem();
  v10[3] = result;
  v10[0] = v5;
  if (__OFADD__(a2, 2))
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v7 = indentedDescription(_:_:)((uint64_t)v10, a2 + 2);
    uint64_t v9 = v8;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    *a3 = v7;
    a3[1] = v9;
  }
  return result;
}

uint64_t sub_256FDD104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NestedItem();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16);
  v9((char *)&v17 - v7, a1, a3);
  uint64_t v10 = sub_25704A7D0();
  uint64_t v12 = v11;
  v9(v8, a2, a3);
  if (v10 == sub_25704A7D0() && v12 == v13) {
    char v15 = 0;
  }
  else {
    char v15 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15 & 1;
}

uint64_t sub_256FDD270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for NestedItem();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)v18 - v11;
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  sub_25704B1A0();
  sub_25704A850();
  uint64_t v13 = *(int *)(v10 + 56);
  uint64_t v14 = *(void *)(a3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a1, a3);
  uint64_t v16 = *(void *)(a1 + v13);
  *(void *)&v12[v13] = v16;
  v18[3] = v8;
  v18[0] = v16;
  if (__OFADD__(a2, 2))
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    indentedDescription(_:_:)((uint64_t)v18, a2 + 2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, a3);
    sub_25704A850();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v17 = v20;
    *a4 = v19;
    a4[1] = v17;
  }
  return result;
}

uint64_t sub_256FDD42C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return IndentedDescription.description.getter(a1, WitnessTable);
}

uint64_t static NestedItem<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v23 - v13;
  unint64_t v16 = *v15;
  switch(*v12 >> 62)
  {
    case 1:
      if (v16 >> 62 != 1) {
        goto LABEL_12;
      }
      type metadata accessor for NestedItem();
      uint64_t v25 = a6;
      swift_retain();
      swift_retain();
      swift_getWitnessTable();
      char v21 = sub_25704AB10();
      goto LABEL_10;
    case 2:
      if (v16 >> 62 != 2) {
        goto LABEL_12;
      }
      type metadata accessor for NestedItem();
      uint64_t v26 = a6;
      swift_retain();
      swift_retain();
      swift_getWitnessTable();
      char v21 = sub_25704A660();
LABEL_10:
      char v19 = v21;
      swift_release();
      goto LABEL_11;
    case 3:
      if (v16 != 0xC000000000000000) {
        goto LABEL_12;
      }
      swift_release();
      char v19 = 1;
      return v19 & 1;
    default:
      if (v16 >> 62)
      {
LABEL_12:
        char v19 = 0;
      }
      else
      {
        uint64_t v17 = swift_projectBox();
        uint64_t v24 = swift_projectBox();
        uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
        v18(v14, v17, a4);
        v18(v11, v24, a4);
        swift_retain();
        swift_retain();
        char v19 = sub_25704A740();
        unint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
        v20(v11, a4);
        v20(v14, a4);
        swift_release();
LABEL_11:
        swift_release();
      }
      return v19 & 1;
  }
}

uint64_t sub_256FDD79C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static NestedItem<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8));
}

uint64_t NestedDictionary.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NestedItem();
  uint64_t result = sub_25704A560();
  *a1 = result;
  return result;
}

uint64_t NestedDictionary.init(values:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for NestedItem();
  sub_25704A560();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = a1;
  return result;
}

uint64_t NestedDictionary.init(item:)@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  type metadata accessor for NestedItem();
  sub_25704A560();
  if (v3 >> 62 == 2)
  {
    uint64_t v4 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v4;
  }
  else
  {
    sub_25704ADF0();
    sub_25704A850();
    swift_getWitnessTable();
    sub_25704B1B0();
    uint64_t result = sub_25704AFD0();
    __break(1u);
  }
  return result;
}

void NestedDictionary.subscript.getter()
{
  type metadata accessor for NestedItem();
  JUMPOUT(0x25A2B06F0);
}

void sub_256FDDA10(void *a1@<X8>)
{
  type metadata accessor for NestedDictionary();
  NestedDictionary.subscript.getter();
  *a1 = v2;
}

uint64_t sub_256FDDA7C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_256FE1C04(v2);
  type metadata accessor for NestedDictionary();
  return sub_256FE1B04((uint64_t)&v2);
}

uint64_t NestedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_256FE1B04(a1);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);
  return v5(a2);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  uint64_t v30 = a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = sub_25704AC70();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v27 - v13;
  char v15 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 16);
  uint64_t v29 = a1;
  uint64_t v28 = v19;
  v18(v14, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v9) == 1)
  {
    unint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
    char v21 = v14;
    uint64_t v22 = v28;
    v20(v21, v28);
    uint64_t v23 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v30, v4);
    uint64_t v31 = 0xF000000000000007;
    type metadata accessor for NestedItem();
    sub_25704A650();
    sub_25704A680();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v23, v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v20)(v29, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v30, v4);
    uint64_t v25 = swift_allocBox();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v26, v17, v9);
    uint64_t v31 = v25;
    type metadata accessor for NestedItem();
    sub_25704A650();
    sub_25704A680();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v30, v4);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v29, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v9);
  }
}

void (*NestedDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[1] = a3;
  v6[2] = v3;
  uint64_t v7 = *(void *)(a3 + 16);
  v6[3] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  v6[4] = v8;
  v6[5] = malloc(*(void *)(v8 + 64));
  (*(void (**)(void))(v9 + 16))();
  NestedDictionary.subscript.getter();
  return sub_256FDDC64;
}

void sub_256FDDC64(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = (*a1)[4];
  uint64_t v3 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = **a1;
  uint64_t v7 = v6;
  if (a2)
  {
    sub_256FE1C04(v6);
    sub_256FE1B04((uint64_t)&v7);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
    sub_256FE1C1C(*v2);
  }
  else
  {
    sub_256FE1B04((uint64_t)&v7);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  }
  free(v3);
  free(v2);
}

uint64_t NestedDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = type metadata accessor for NestedItem();
  MEMORY[0x25A2B06F0](&v15, a1, v6, v8, v10, v9);
  uint64_t v11 = v15;
  if ((~v15 & 0xF000000000000007) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a3, 1, 1, v7);
  }
  if (v15 >> 62)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a3, 1, 1, v7);
  }
  else
  {
    uint64_t v13 = swift_projectBox();
    uint64_t v14 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a3, v13, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v7);
  }
  return sub_256FE1C1C(v11);
}

uint64_t sub_256FDDEC8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)type metadata accessor for NestedDictionary();
  return NestedDictionary.subscript.getter(a1, v4, a2);
}

uint64_t sub_256FDDF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + a3 - 24);
  uint64_t v7 = sub_25704AC70();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v17 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v17 - v12, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  uint64_t v15 = type metadata accessor for NestedDictionary();
  return NestedDictionary.subscript.setter((uint64_t)v11, (uint64_t)v13, v15);
}

void (*NestedDictionary.subscript.modify(void *a1, uint64_t a2, void *a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  uint64_t v8 = sub_25704AC70();
  v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[4] = malloc(v10);
  uint64_t v11 = malloc(v10);
  uint64_t v12 = a3[2];
  v7[5] = v11;
  v7[6] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13;
  v7[7] = v13;
  size_t v15 = *(void *)(v13 + 64);
  v7[8] = malloc(v15);
  v7[9] = malloc(v15);
  (*(void (**)(void))(v14 + 16))();
  NestedDictionary.subscript.getter(a2, a3, (uint64_t)v11);
  return sub_256FDE5EC;
}

void sub_256FDE5EC(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[8];
  uint64_t v4 = (void *)(*a1)[9];
  if (a2)
  {
    uint64_t v5 = v2[7];
    uint64_t v11 = v2[6];
    uint64_t v7 = (void *)v2[4];
    uint64_t v6 = (void *)v2[5];
    uint64_t v8 = v2[2];
    uint64_t v9 = v2[3];
    uint64_t v10 = *v2;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v11);
    NestedDictionary.subscript.setter((uint64_t)v7, (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    uint64_t v7 = (void *)v2[4];
    uint64_t v6 = (void *)v2[5];
    NestedDictionary.subscript.setter((uint64_t)v6, (uint64_t)v4, *v2);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

uint64_t NestedDictionary.keys.getter()
{
  uint64_t v1 = *v0;
  type metadata accessor for NestedItem();
  nullsub_1(v1);
  return swift_bridgeObjectRetain();
}

uint64_t NestedDictionary.values.getter()
{
  return swift_bridgeObjectRetain();
}

void NestedDictionary.isEmpty.getter()
{
  type metadata accessor for NestedItem();
  JUMPOUT(0x25A2B0690);
}

uint64_t NestedDictionary.count.getter()
{
  type metadata accessor for NestedItem();
  return _sSD8MorpheusE3lenSiyF_0();
}

uint64_t NestedDictionary.asItem()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *a1 = v4 | 0x8000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for NestedItem()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_256FDE89C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC958);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_256FDE8FC@<X0>(uint64_t a1@<X8>)
{
  return sub_256FDE914(a1);
}

uint64_t sub_256FDE914@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NestedItem();
  return NestedItem.unwrap()(v2, a1);
}

uint64_t sub_256FDE968()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_256FDE9A0(uint64_t a1)
{
  return sub_256FE05AC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.mapValues<A>(_:));
}

uint64_t sub_256FDE9CC(uint64_t a1, void *a2)
{
  return sub_256FE0678(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.mapValues<A>(_:));
}

uint64_t sub_256FDE9F8(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0xF000000000000007) != 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_256FDEA10@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_256FD5F6C(a1, v3[8], v3[9], v3[4], v3[5], v3[6], a3, v3[7], a2);
}

uint64_t sub_256FDEA48@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_256FDEA6C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 8);
  return swift_retain();
}

uint64_t NestedDictionary.asDictionary()()
{
  return sub_25704A630();
}

uint64_t NestedDictionary.description.getter()
{
  uint64_t v1 = *v0;
  *(void *)(swift_allocObject() + 16) = v1;
  swift_bridgeObjectRetain();
  uint64_t v2 = type metadata accessor for NestedItem();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(WitnessTable + 16))(0, v2, WitnessTable);
  swift_release();
  return v4;
}

uint64_t NestedDictionary.mapValues<A>(transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return sub_256FDF648(a1, a2, a3, (void (*)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.mapValues<A>(_:), a4);
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v10;
  void *v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;

  uint64_t v10 = *v4;
  *(void *)(swift_allocObject() + 16) = v10;
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)type metadata accessor for NestedItem();
  NestedItem.mapValues<A>(prefix:_:)(0, 0, a1, a2, v11, a3);
  uint64_t result = swift_release();
  if (!v5)
  {
    if (v14 >> 62 == 2)
    {
      uint64_t v13 = swift_bridgeObjectRetain();
      NestedDictionary.init(values:)(v13, a4);
      return swift_release();
    }
    else
    {
      uint64_t result = sub_25704AFD0();
      __break(1u);
    }
  }
  return result;
}

uint64_t NestedDictionary.mapValues<A, B, C>(_:transform:)(void *a1, void *a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t, char *, char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = *a3;
  uint64_t v13 = *v9;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  v25[1] = v14 | 0x8000000000000000;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v12;
  v25[0] = v15 | 0x8000000000000000;
  uint64_t v16 = type metadata accessor for NestedItem();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NestedItem.mapValues<A, B, C>(_:_:)(&v27, &v26, v25, a4, a5, v16, a7, a8, a9);
  swift_release();
  uint64_t result = swift_release();
  if (!v24)
  {
    if (v27 >> 62 == 2 && (v26 & 0xC000000000000000) == 0x8000000000000000)
    {
      uint64_t v18 = *(void *)((v27 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v19 = *(void *)((v26 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      NestedDictionary.init(values:)(v18, a1);
      NestedDictionary.init(values:)(v19, a2);
      swift_release_n();
      return swift_release_n();
    }
    else
    {
      uint64_t result = sub_25704AFD0();
      __break(1u);
    }
  }
  return result;
}

uint64_t NestedDictionary.mapValues<A, B>(_:transform:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = *a1;
  uint64_t v14 = *v7;
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v17 = a4[2];
  uint64_t v16 = a4[3];
  v15[2] = v17;
  v15[3] = v16;
  v15[4] = a5;
  v15[5] = a6;
  uint64_t v18 = a4[4];
  v15[6] = v18;
  v15[7] = a2;
  v15[8] = a3;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v14;
  v41[1] = v19 | 0x8000000000000000;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v13;
  v41[0] = v20 | 0x8000000000000000;
  uint64_t v34 = v17;
  uint64_t v35 = v16;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v38 = v18;
  uint64_t v39 = sub_256FE1C44;
  uint64_t v40 = v15;
  uint64_t v26 = v17;
  uint64_t v27 = v16;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = v18;
  uint64_t v31 = sub_256FE1C7C;
  uint64_t v32 = &v33;
  uint64_t v21 = type metadata accessor for NestedItem();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NestedItem.mapValues<A, B, C>(_:_:)(&v43, &v42, v41, (void (*)(uint64_t, uint64_t, char *, char *))sub_256FE1CB0, (uint64_t)v25, v21, a5, a6, MEMORY[0x263F8D6C8]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v43 >> 62 == 2)
  {
    uint64_t v22 = swift_bridgeObjectRetain();
    NestedDictionary.init(values:)(v22, a7);
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t result = sub_25704AFD0();
    __break(1u);
  }
  return result;
}

uint64_t NestedDictionary.mapValues<A, B, C, D, E>(_:_:transform:)(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t (*a6)(char *, char *, char *, uint64_t, uint64_t, uint64_t), char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = *a4;
  uint64_t v15 = *a5;
  uint64_t v16 = *v13;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  v32[1] = v17 | 0x8000000000000000;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v14;
  v32[0] = v18 | 0x8000000000000000;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v15;
  unint64_t v31 = v19 | 0x8000000000000000;
  uint64_t v20 = type metadata accessor for NestedItem();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NestedItem.mapValues<A, B, C, D, E>(_:_:_:)((uint64_t *)&v35, (uint64_t *)&v34, &v33, v32, &v31, a6, a7, v20, a9, a10, a11, a12, a13);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (!v30)
  {
    if (v35 >> 62 == 2 && v34 >> 62 == 2 && (v33 & 0xC000000000000000) == 0x8000000000000000)
    {
      uint64_t v22 = *(void *)((v35 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v23 = *(void *)((v34 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v24 = *(void *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      NestedDictionary.init(values:)(v22, a1);
      NestedDictionary.init(values:)(v23, a2);
      NestedDictionary.init(values:)(v24, a3);
      swift_release_n();
      swift_release_n();
      return swift_release_n();
    }
    else
    {
      uint64_t result = sub_25704AFD0();
      __break(1u);
    }
  }
  return result;
}

uint64_t NestedDictionary.mapValues<A, B, C, D>(_:_:transform:)(void *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = *a3;
  uint64_t v29 = *a4;
  uint64_t v30 = *v11;
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = a7[2];
  uint64_t v18 = a7[3];
  v16[2] = v17;
  v16[3] = v18;
  v16[4] = a8;
  v16[5] = a9;
  v16[6] = a10;
  v16[7] = a11;
  uint64_t v19 = a7[4];
  v16[8] = v19;
  v16[9] = a5;
  v16[10] = a6;
  uint64_t v20 = v17;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v30;
  v54[1] = v21 | 0x8000000000000000;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v15;
  v54[0] = v22 | 0x8000000000000000;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v29;
  unint64_t v53 = v23 | 0x8000000000000000;
  uint64_t v44 = v20;
  uint64_t v45 = v18;
  uint64_t v46 = a8;
  uint64_t v47 = a9;
  uint64_t v48 = a10;
  uint64_t v49 = a11;
  uint64_t v50 = v19;
  uint64_t v51 = sub_256FE1D04;
  uint64_t v52 = v16;
  uint64_t v34 = v20;
  uint64_t v35 = v18;
  uint64_t v36 = a8;
  uint64_t v37 = a9;
  uint64_t v38 = a10;
  uint64_t v39 = a11;
  uint64_t v40 = v19;
  uint64_t v41 = sub_256FE1D30;
  uint64_t v42 = &v43;
  uint64_t v24 = type metadata accessor for NestedItem();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NestedItem.mapValues<A, B, C, D, E>(_:_:_:)((uint64_t *)&v57, &v56, &v55, v54, &v53, (uint64_t (*)(char *, char *, char *, uint64_t, uint64_t, uint64_t))sub_256FE1D64, v33, v24, a8, a9, a10, a11, MEMORY[0x263F8D6C8]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v57 >> 62 == 2 && (v56 & 0xC000000000000000) == 0x8000000000000000)
  {
    uint64_t v25 = *(void *)((v57 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v26 = *(void *)((v56 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NestedDictionary.init(values:)(v25, a1);
    NestedDictionary.init(values:)(v26, a2);
    swift_release();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    uint64_t result = sub_25704AFD0();
    __break(1u);
  }
  return result;
}

uint64_t NestedDictionary.compactMapValues<A>(transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return sub_256FDF648(a1, a2, a3, (void (*)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.compactMapValues<A>(_:), a4);
}

uint64_t sub_256FDF648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void (*a4)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, void *a5@<X8>)
{
  uint64_t v8 = v6;
  uint64_t v12 = *v5;
  *(void *)(swift_allocObject() + 16) = v12;
  uint64_t v13 = type metadata accessor for NestedItem();
  swift_bridgeObjectRetain();
  a4(&v17, a1, a2, v13, a3);
  uint64_t result = swift_release();
  if (!v8)
  {
    if (v17 >> 62 == 2)
    {
      uint64_t v15 = swift_bridgeObjectRetain();
      NestedDictionary.init(values:)(v15, a5);
      return swift_release();
    }
    else
    {
      uint64_t result = sub_25704AFD0();
      __break(1u);
    }
  }
  return result;
}

uint64_t static NestedDictionary.unflattened<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  static NestedItem.unflattened<>(_:)(a1, a2, (uint64_t *)&v6);
  if (v6 >> 62 == 2)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    NestedDictionary.init(values:)(v4, a3);
    return swift_release();
  }
  else
  {
    uint64_t result = sub_25704AFD0();
    __break(1u);
  }
  return result;
}

{
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  void v11[6];

  v11[5] = a1;
  v11[2] = a2;
  uint64_t v5 = sub_25704A650();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = sub_256F9A130((void (*)(char *, char *))sub_256FE1DAC, (uint64_t)v11, v5, TupleTypeMetadata2, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v8);
  static NestedDictionary.unflattened<>(_:)(v9, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FDFAB0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = *(int *)(MEMORY[0x270FA5388](TupleTypeMetadata2 - 8) + 56);
  uint64_t v9 = (char *)&v16 + v8 - v7;
  uint64_t v10 = (char *)a1 + v8;
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = *(void *)(a2 - 8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v9, v10, a2);
  uint64_t v14 = (char *)a3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  *a3 = v12;
  a3[1] = v11;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v14, v9, a2);
  return swift_bridgeObjectRetain();
}

uint64_t NestedDictionary.flattenedValues()()
{
  uint64_t v1 = *v0;
  *(void *)(swift_allocObject() + 16) = v1;
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)type metadata accessor for NestedItem();
  uint64_t v3 = NestedItem.flattenedValues()(v2);
  swift_release();
  return v3;
}

uint64_t NestedDictionary.replacingValues(with:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *v2;
  *(void *)(swift_allocObject() + 16) = v5;
  swift_bridgeObjectRetain();
  unint64_t v6 = (void *)type metadata accessor for NestedItem();
  sub_256FDC038((uint64_t)&v9, a1, 0, v6);
  swift_release();
  if (v9 >> 62 == 2)
  {
    uint64_t v7 = swift_bridgeObjectRetain();
    NestedDictionary.init(values:)(v7, a2);
    return swift_release();
  }
  else
  {
    uint64_t result = sub_25704AFD0();
    __break(1u);
  }
  return result;
}

uint64_t static NestedDictionary<>.== infix(_:_:)()
{
  return sub_25704A660() & 1;
}

uint64_t sub_256FDFE58()
{
  return static NestedDictionary<>.== infix(_:_:)();
}

uint64_t NestedDictionary.startIndex.getter(uint64_t a1)
{
  return sub_256FDFE9C(a1, MEMORY[0x263F8CFC8]);
}

uint64_t NestedDictionary.endIndex.getter(uint64_t a1)
{
  return sub_256FDFE9C(a1, MEMORY[0x263F8D058]);
}

uint64_t sub_256FDFE9C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = type metadata accessor for NestedItem();
  return a2(v4, v5, v7, v6);
}

uint64_t NestedDictionary.subscript.getter()
{
  return sub_25704A690();
}

uint64_t NestedDictionary.index(after:)()
{
  return sub_25704A600();
}

uint64_t sub_256FE0008@<X0>(uint64_t a1@<X8>)
{
  return sub_256FE0038((uint64_t (*)(void))NestedDictionary.startIndex.getter, a1);
}

uint64_t sub_256FE0020@<X0>(uint64_t a1@<X8>)
{
  return sub_256FE0038((uint64_t (*)(void))NestedDictionary.endIndex.getter, a1);
}

uint64_t sub_256FE0038@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 & 1;
  return result;
}

void (*sub_256FE006C(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  char v5 = (uint64_t *)malloc(0x40uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for NestedItem();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[4] = TupleTypeMetadata2;
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  v5[5] = v8;
  unint64_t v9 = (char *)malloc(*(void *)(v8 + 64));
  v5[6] = (uint64_t)v9;
  uint64_t v10 = sub_256FE023C(v5);
  uint64_t v12 = v11;
  v5[7] = (uint64_t)v10;
  (*(void (**)(char *))(*(void *)(v6 - 8) + 16))(v9);
  *(void *)&v9[*(int *)(TupleTypeMetadata2 + 48)] = *v12;
  swift_retain();
  return sub_256FE01C4;
}

void sub_256FE01C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  uint64_t v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_256FE023C(uint64_t *a1))(void *a1)
{
  type metadata accessor for NestedItem();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v3 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(void *)(v3 + 64));
  NestedDictionary.subscript.getter();
  return sub_256FE034C;
}

void sub_256FE034C(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);
  free(v1);
}

void sub_256FE03A8(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -2;
}

uint64_t sub_256FE03D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = NestedDictionary.index(after:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_256FE0410(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = NestedDictionary.index(after:)();
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t result = sub_256F9ACEC(v2, v3, v4);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9 & 1;
  return result;
}

uint64_t sub_256FE048C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t result = NestedDictionary.startIndex.getter(a1);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = v7 & 1;
  return result;
}

uint64_t sub_256FE04CC()
{
  swift_getWitnessTable();
  return sub_25704ABB0();
}

uint64_t sub_256FE0520()
{
  swift_getWitnessTable();
  uint64_t v0 = sub_25702A140();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_256FE0580(uint64_t a1)
{
  return sub_256FE05AC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.compactMapValues<A>(_:));
}

uint64_t sub_256FE05AC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[6];
  uint64_t v6 = v2[7];
  uint64_t v7 = type metadata accessor for NestedItem();
  return a2(v5, v6, v7, v4);
}

uint64_t sub_256FE062C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_256FD9094(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_256FE064C(uint64_t a1, void *a2)
{
  return sub_256FE0678(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))NestedItem.compactMapValues<A>(_:));
}

uint64_t sub_256FE0678(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return sub_256FD8FF0(a1, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5], a2, a3);
}

unint64_t *sub_256FE06B0@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result;
  if (*result == 0xC000000000000000) {
    unint64_t v3 = 0xF000000000000007;
  }
  else {
    uint64_t result = (unint64_t *)swift_retain();
  }
  *a2 = v3;
  return result;
}

uint64_t sub_256FE06F4(uint64_t a1, uint64_t a2)
{
  return sub_256FD99C0(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_256FE0718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_256FD9B2C(a1, a2, a3, a4, v4[6], v4[7], v4[8], v4[9], v4[2], v4[3], v4[4], v4[5]);
}

uint64_t sub_256FE0750@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_256FD9D04(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 48), a2, a3);
}

uint64_t sub_256FE0778(uint64_t a1, uint64_t a2)
{
  return sub_256FD98FC(a1, a2, v2[6], v2[7], v2[8], v2[9], v2[2], v2[3], v2[4]);
}

uint64_t sub_256FE07AC(void *a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(v2 + 48))(*a1, a1 + 1);
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t sub_256FE07EC(uint64_t a1, uint64_t a2)
{
  return sub_256FDA434(a1, a2, *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_256FE07FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_256FE0924(a1, a2);
}

uint64_t sub_256FE0814(uint64_t a1, uint64_t a2)
{
  return sub_256FDA3A0(a1, a2, *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_256FE0824@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(v2 + 40))(*a1, a1 + 1);
  *a2 = result;
  return result;
}

uint64_t sub_256FE086C(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6B8);
  }
  else
  {
    return sub_25704B160();
  }
}

uint64_t sub_256FE08DC()
{
  uint64_t v0 = type metadata accessor for NestedItem();
  return NestedItem.flattenedValues()(v0);
}

uint64_t sub_256FE0924@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40);
  type metadata accessor for NestedItem();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = v5(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
  *a2 = result;
  return result;
}

uint64_t sub_256FE09AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NestedItem();
  uint64_t result = NestedItem.flattenedValues()(v2);
  *a1 = result;
  return result;
}

uint64_t sub_256FE0A00(uint64_t a1, uint64_t a2)
{
  return sub_256FDD104(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_256FE0A24@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_256FDD270(a1, *(void *)(v2 + 40), *(void *)(v2 + 16), a2);
}

unint64_t sub_256FE0A48()
{
  unint64_t result = qword_269FDC978[0];
  if (!qword_269FDC978[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269FDC970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269FDC978);
  }
  return result;
}

uint64_t sub_256FE0AA4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_256FDD074(a1, *(void *)(v2 + 40), a2);
}

unsigned __int8 *sub_256FE0AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_256FE21F8();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_25704A910();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    char v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_256FE0E38();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    char v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    char v9 = (unsigned __int8 *)sub_25704AE90();
  }
LABEL_7:
  uint64_t v13 = sub_256FE0BBC(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_256FE0BBC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_256FE0E38()
{
  unint64_t v0 = sub_25704A920();
  uint64_t v4 = sub_256FE0EB8(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_256FE0EB8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = sub_256FE1010(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = sub_256FFEDC4(v9, 0);
      unint64_t v12 = sub_256FE1110((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_25704AE90();
LABEL_4:
        JUMPOUT(0x25A2B0880);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x25A2B0880](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x25A2B0880]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_256FE1010(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    unint64_t result = sub_257028394(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    unint64_t result = sub_257028394(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  return sub_25704A8C0();
}

unint64_t sub_256FE1110(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = sub_257028394(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_25704A8D0();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = sub_25704AE90();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = sub_257028394(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_25704A8A0();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unsigned __int8 *sub_256FE1324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_25704A910();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_256FE0E38();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)sub_25704AE90();
  }
LABEL_7:
  uint64_t v11 = sub_256FE0BBC(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_256FE140C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return sub_25704B150();
  }
  swift_bridgeObjectRetain();
  sub_25704A850();
  sub_25704B150();
  sub_25704A850();
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_256FE14A8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v11 = (void *)sub_25704AE90();
  }
  uint64_t result = sub_256FE16DC((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_256FE157C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_25704AA80();
  uint64_t v15 = result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a3 - 8);
      unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
      v10(v7, a1, a3);
      uint64_t v11 = a2 - 1;
      if (v11)
      {
        uint64_t v12 = *(void *)(v9 + 72);
        uint64_t v13 = v8 + v12;
        do
        {
          v10(v13, a1, a3);
          v13 += v12;
          --v11;
        }
        while (v11);
      }
    }
    uint64_t v14 = sub_25704AB00();
    nullsub_1(v14);
    return v15;
  }
  return result;
}

unint64_t sub_256FE1690(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return sub_25704A920();
  }
  __break(1u);
  return result;
}

uint64_t sub_256FE16DC(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_257028394(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  uint64_t result = sub_25704A8C0();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_257028394(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_257028394(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t result = sub_25704A8C0();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_256FE1B04(uint64_t a1)
{
  uint64_t v2 = *(void *)MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v3 + 16))((char *)v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5[1] = v2;
  type metadata accessor for NestedItem();
  sub_25704A650();
  return sub_25704A680();
}

uint64_t sub_256FE1C04(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_256FE1C1C(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_256FE1C34()
{
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_256FE1C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(a2, a3);
  return 0;
}

uint64_t sub_256FE1C7C()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t sub_256FE1CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, a3, a4);
  if (!v5)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v8 & 1;
  }
  return result;
}

uint64_t sub_256FE1CF4()
{
  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t sub_256FE1D04()
{
  (*(void (**)(void))(v0 + 72))();
  return 0;
}

uint64_t sub_256FE1D30()
{
  return (*(uint64_t (**)(void))(v0 + 72))();
}

uint64_t sub_256FE1D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 72))(a1, a2, a4, a5, a6);
  if (!v7)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = v10 & 1;
  }
  return result;
}

uint64_t sub_256FE1DAC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_256FDFAB0(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_256FE1DCC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256FE1E08()
{
  return swift_getWitnessTable();
}

uint64_t sub_256FE1E24()
{
  return swift_getWitnessTable();
}

uint64_t sub_256FE1E40()
{
  return swift_getWitnessTable();
}

uint64_t sub_256FE1E5C()
{
  return swift_getWitnessTable();
}

uint64_t sub_256FE1E78()
{
  return swift_getWitnessTable();
}

uint64_t sub_256FE1E9C()
{
  return 24;
}

__n128 sub_256FE1EA8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_256FE1EC4()
{
  return 24;
}

__n128 sub_256FE1ED0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of IndentedDescription.description(indent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_256FE1EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

void *sub_256FE1F00(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t sub_256FE1F34()
{
  return swift_release();
}

void *sub_256FE1F40(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *sub_256FE1F90(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_256FE1FC8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_256FE2024(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)__n128 result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_256FE2074(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 == 3) {
    return (*a1 >> 3) + 3;
  }
  else {
    return v1;
  }
}

void *sub_256FE2090(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_256FE20A0(unint64_t *result, uint64_t a2)
{
  if (a2 < 3)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 3);
    unint64_t v3 = 0xC000000000000000;
  }
  *__n128 result = v2 | v3;
  return result;
}

uint64_t sub_256FE20CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t type metadata accessor for NestedDictionary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_256FE20EC(uint64_t a1, uint64_t a2)
{
  return sub_256FDC7E4(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_256FE2110()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_256FE2120()
{
  swift_getTupleTypeMetadata2();
  return sub_25704AA80();
}

uint64_t sub_256FE2168(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_256FE2178()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_256FE2188@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result;
  return result;
}

uint64_t *sub_256FE21B8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_256FDB900(a1, a2);
}

uint64_t sub_256FE21DC()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void *sub_256FE21EC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t sub_256FE21F8()
{
  unint64_t result = qword_269FDCA80;
  if (!qword_269FDCA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCA80);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t sub_256FE22F0(uint64_t a1, uint64_t a2)
{
  return sub_256FE0A00(a1, a2) & 1;
}

void static StreamOrDevice.default.getter()
{
}

uint64_t StreamOrDevice.ctx.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

void Stream.__allocating_init()()
{
}

void static StreamOrDevice.device(_:)()
{
}

void static Stream.defaultStream(_:)()
{
}

void sub_256FE2494(uint64_t a1)
{
}

uint64_t static StreamOrDevice.cpu.getter@<X0>(void *a1@<X8>)
{
  return sub_256FE25A8(&qword_269FDC628, &qword_269FDCA88, a1);
}

void sub_256FE24E4(uint64_t a1)
{
}

void sub_256FE2510(uint64_t a1, void *a2)
{
  if (*a2 != -1) {
    swift_once();
  }
  mlx_default_stream();
}

uint64_t static StreamOrDevice.gpu.getter@<X0>(void *a1@<X8>)
{
  return sub_256FE25A8(&qword_269FDC630, &qword_269FDCA90, a1);
}

uint64_t sub_256FE25A8@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;
  return swift_retain();
}

uint64_t static StreamOrDevice.stream(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

uint64_t StreamOrDevice.description.getter()
{
  uint64_t result = mlx_tostring(*(uint64_t (****)(void))(*(void *)v0 + 16));
  uint64_t v2 = (atomic_ullong *)result;
  if (result)
  {
    uint64_t result = mlx_string_data(result);
    if (result)
    {
      uint64_t v3 = sub_25704A870();
      mlx_free(v2);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Stream.description.getter()
{
  uint64_t result = mlx_tostring(*(uint64_t (****)(void))(v0 + 16));
  uint64_t v2 = (atomic_ullong *)result;
  if (result)
  {
    uint64_t result = mlx_string_data(result);
    if (result)
    {
      uint64_t v3 = sub_25704A870();
      mlx_free(v2);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void Stream.init()()
{
}

uint64_t type metadata accessor for Stream()
{
  return self;
}

void Stream.__allocating_init(index:_:)()
{
}

void Stream.init(index:_:)()
{
}

uint64_t Stream.deinit()
{
  mlx_free(*(atomic_ullong **)(v0 + 16));
  return v0;
}

uint64_t Stream.__deallocating_deinit()
{
  mlx_free(*(atomic_ullong **)(v0 + 16));
  return MEMORY[0x270FA0228](v0, 24, 7);
}

Swift::Void __swiftcall Stream.synchronize()()
{
  mlx_synchronize(*(void *)(v0 + 16));
}

ValueMetadata *type metadata accessor for StreamOrDevice()
{
  return &type metadata for StreamOrDevice;
}

uint64_t method lookup function for Stream(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Stream);
}

uint64_t dispatch thunk of Stream.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of Stream.__allocating_init(index:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t Bool.isTruthy.getter(char a1)
{
  return a1 & 1;
}

uint64_t sub_256FE28FC()
{
  return *v0;
}

BOOL Truthiness<>.isTruthy.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25704AFF0();
  char v5 = sub_25704A740();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return (v5 & 1) == 0;
}

BOOL sub_256FE29F0()
{
  return *v0 != 0;
}

BOOL sub_256FE2A00()
{
  return *v0 != 0.0;
}

BOOL sub_256FE2A10()
{
  return *v0 != 0.0;
}

BOOL sub_256FE2A20()
{
  return *v0 != 0;
}

BOOL AnyArrayContainer.isTruthy.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(a2 + 8))() + 16);
  swift_bridgeObjectRelease();
  return v2 != 0;
}

BOOL sub_256FE2A70(uint64_t a1)
{
  return AnyArrayContainer.isTruthy.getter(a1, (uint64_t)&protocol witness table for [A]);
}

BOOL sub_256FE2A7C(uint64_t a1)
{
  return AnyArrayContainer.isTruthy.getter(a1, (uint64_t)&protocol witness table for SharedMutableArray<A>);
}

BOOL AnyDictContainer.isTruthy.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(a2 + 8))() + 16);
  swift_bridgeObjectRelease();
  return v2 != 0;
}

BOOL sub_256FE2AC8(uint64_t a1)
{
  return AnyDictContainer.isTruthy.getter(a1, (uint64_t)&protocol witness table for [A : B]);
}

BOOL sub_256FE2AD4(uint64_t a1)
{
  return AnyDictContainer.isTruthy.getter(a1, (uint64_t)&protocol witness table for SharedMutableDict<A>);
}

uint64_t Optional.isTruthy.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  char v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v3);
  char v8 = (char *)v16 - v7;
  MEMORY[0x270FA5388](v6);
  char v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1) == 1)
  {
    char v12 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v10, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v8, v1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCA98);
    if (swift_dynamicCast())
    {
      sub_256FA81EC(v16, (uint64_t)v18);
      uint64_t v13 = v19;
      uint64_t v14 = v20;
      __swift_project_boxed_opaque_existential_1(v18, v19);
      char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    }
    else
    {
      uint64_t v17 = 0;
      memset(v16, 0, sizeof(v16));
      (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
      sub_256FE2D5C((uint64_t)v16);
      char v12 = 1;
    }
  }
  return v12 & 1;
}

uint64_t sub_256FE2D5C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of Truthiness.isTruthy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t static MLXArray.zeros<A>(_:type:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v17, a4, a5);
    mlx_zeros();
  }
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t result = sub_256F90A30(0, v5, 0);
  uint64_t v8 = v18;
  uint64_t v9 = (int64_t *)(a1 + 32);
  int64_t v10 = v5;
  while (1)
  {
    int64_t v12 = *v9++;
    uint64_t v11 = v12;
    if (v12 < (uint64_t)0xFFFFFFFF80000000) {
      break;
    }
    if (v11 > 0x7FFFFFFF) {
      goto LABEL_11;
    }
    uint64_t v18 = v8;
    unint64_t v14 = *(void *)(v8 + 16);
    unint64_t v13 = *(void *)(v8 + 24);
    if (v14 >= v13 >> 1)
    {
      uint64_t result = sub_256F90A30(v13 > 1, v14 + 1, 1);
      uint64_t v8 = v18;
    }
    *(void *)(v8 + 16) = v14 + 1;
    *(_DWORD *)(v8 + 4 * v14 + 32) = v11;
    if (!--v10)
    {
      a5 = v16;
      a4 = v15;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  __break(1u);
  return result;
}

void static MLXArray.zeros(like:stream:)()
{
}

uint64_t static MLXArray.ones<A>(_:type:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v17, a4, a5);
    mlx_ones();
  }
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t result = sub_256F90A30(0, v5, 0);
  uint64_t v8 = v18;
  uint64_t v9 = (int64_t *)(a1 + 32);
  int64_t v10 = v5;
  while (1)
  {
    int64_t v12 = *v9++;
    uint64_t v11 = v12;
    if (v12 < (uint64_t)0xFFFFFFFF80000000) {
      break;
    }
    if (v11 > 0x7FFFFFFF) {
      goto LABEL_11;
    }
    uint64_t v18 = v8;
    unint64_t v14 = *(void *)(v8 + 16);
    unint64_t v13 = *(void *)(v8 + 24);
    if (v14 >= v13 >> 1)
    {
      uint64_t result = sub_256F90A30(v13 > 1, v14 + 1, 1);
      uint64_t v8 = v18;
    }
    *(void *)(v8 + 16) = v14 + 1;
    *(_DWORD *)(v8 + 4 * v14 + 32) = v11;
    if (!--v10)
    {
      a5 = v16;
      a4 = v15;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  __break(1u);
  return result;
}

uint64_t static MLXArray.ones(_:dtype:stream:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
LABEL_8:
  }
    mlx_ones();
  uint64_t result = sub_256F90A30(0, v1, 0);
  uint64_t v4 = (int64_t *)(a1 + 32);
  int64_t v5 = v1;
  while (1)
  {
    int64_t v7 = *v4++;
    uint64_t v6 = v7;
    if (v7 < (uint64_t)0xFFFFFFFF80000000) {
      break;
    }
    if (v6 > 0x7FFFFFFF) {
      goto LABEL_10;
    }
    unint64_t v9 = *(void *)(v10 + 16);
    unint64_t v8 = *(void *)(v10 + 24);
    if (v9 >= v8 >> 1) {
      uint64_t result = sub_256F90A30(v8 > 1, v9 + 1, 1);
    }
    *(void *)(v10 + 16) = v9 + 1;
    *(_DWORD *)(v10 + 4 * v9 + 32) = v6;
    if (!--v5) {
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  __break(1u);
  return result;
}

void static MLXArray.ones(like:stream:)()
{
}

uint64_t static MLXArray.eye<A>(_:m:k:type:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a3) {
    a2 = result;
  }
  if (a2 > 0x7FFFFFFF) {
    goto LABEL_13;
  }
  if (a4 < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_14;
  }
  if (a4 <= 0x7FFFFFFF)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a8 + 16))(&v9, a7, a8);
    mlx_eye();
  }
LABEL_15:
  __break(1u);
  __break(1u);
  return result;
}

void static MLXArray.full<A>(_:values:type:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Array<A>.asInt32.getter(a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v8, a5, a6);
  mlx_full();
}

void static MLXArray.full(_:values:stream:)(uint64_t a1, uint64_t a2)
{
  Array<A>.asInt32.getter(a1);
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a2 + 16));
  sub_256FE5804(dtype, &v4);
  mlx_full();
}

uint64_t static MLXArray.identity<A>(_:type:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v5, a4, a5);
    mlx_identity();
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t static MLXArray.linspace<A>(_:_:count:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a6;
  uint64_t v22 = a3;
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)v19 - v12;
  v19[1] = *v14;
  uint64_t v15 = *(void (**)(char *))(v8 + 16);
  v15((char *)v19 - v12);
  uint64_t v16 = sub_25704AD30();
  uint64_t v21 = v8;
  if (v16 < 65)
  {
    sub_25704AD40();
    sub_25704AD20();
  }
  else
  {
    sub_256FE49F0();
    sub_256FE4A44();
    sub_25704A590();
  }
  char v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v13, a5);
  ((void (*)(char *, uint64_t, uint64_t))v15)(v11, a2, a5);
  if (sub_25704AD30() <= 64)
  {
    sub_25704AD40();
    sub_25704AD20();
  }
  else
  {
    sub_256FE49F0();
    sub_256FE4A44();
    sub_25704A590();
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v17)(v11, a5);
  if (v22 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v22 <= 0x7FFFFFFF)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(v20 + 16))(&v23, a5);
    mlx_linspace();
  }
  __break(1u);
  __break(1u);
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void (*v14)(char *);
  uint64_t result;
  void v16[3];
  uint64_t v17;

  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v16[2] = *v13;
  unint64_t v14 = *(void (**)(char *))(v10 + 16);
  v14(v12);
  sub_256FE49F0();
  sub_25704A580();
  ((void (*)(char *, uint64_t, uint64_t))v14)(v12, a2, a5);
  uint64_t result = sub_25704A580();
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v17, a5, a6);
    mlx_linspace();
  }
  __break(1u);
  __break(1u);
  return result;
}

void _s8Morpheus8MLXArrayC6repeat_5count4axis6streamA2C_S2iAA14StreamOrDeviceVtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_repeat();
  }
LABEL_8:
  __break(1u);
  __break(1u);
}

void _s8Morpheus8MLXArrayC6repeat_5count6streamA2C_SiAA14StreamOrDeviceVtFZ_0(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_repeat_all();
  }
  __break(1u);
  __break(1u);
}

uint64_t zeros<A>(_:type:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v17, a4, a5);
    mlx_zeros();
  }
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t result = sub_256F90A30(0, v5, 0);
  uint64_t v8 = v18;
  uint64_t v9 = (int64_t *)(a1 + 32);
  int64_t v10 = v5;
  while (1)
  {
    int64_t v12 = *v9++;
    uint64_t v11 = v12;
    if (v12 < (uint64_t)0xFFFFFFFF80000000) {
      break;
    }
    if (v11 > 0x7FFFFFFF) {
      goto LABEL_11;
    }
    uint64_t v18 = v8;
    unint64_t v14 = *(void *)(v8 + 16);
    unint64_t v13 = *(void *)(v8 + 24);
    if (v14 >= v13 >> 1)
    {
      uint64_t result = sub_256F90A30(v13 > 1, v14 + 1, 1);
      uint64_t v8 = v18;
    }
    *(void *)(v8 + 16) = v14 + 1;
    *(_DWORD *)(v8 + 4 * v14 + 32) = v11;
    if (!--v10)
    {
      a5 = v16;
      a4 = v15;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  __break(1u);
  return result;
}

void zeros(like:stream:)()
{
}

uint64_t ones<A>(_:type:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v17, a4, a5);
    mlx_ones();
  }
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t result = sub_256F90A30(0, v5, 0);
  uint64_t v8 = v18;
  uint64_t v9 = (int64_t *)(a1 + 32);
  int64_t v10 = v5;
  while (1)
  {
    int64_t v12 = *v9++;
    uint64_t v11 = v12;
    if (v12 < (uint64_t)0xFFFFFFFF80000000) {
      break;
    }
    if (v11 > 0x7FFFFFFF) {
      goto LABEL_11;
    }
    uint64_t v18 = v8;
    unint64_t v14 = *(void *)(v8 + 16);
    unint64_t v13 = *(void *)(v8 + 24);
    if (v14 >= v13 >> 1)
    {
      uint64_t result = sub_256F90A30(v13 > 1, v14 + 1, 1);
      uint64_t v8 = v18;
    }
    *(void *)(v8 + 16) = v14 + 1;
    *(_DWORD *)(v8 + 4 * v14 + 32) = v11;
    if (!--v10)
    {
      a5 = v16;
      a4 = v15;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  __break(1u);
  return result;
}

void ones(like:stream:)()
{
}

uint64_t eye<A>(_:m:k:type:stream:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a3) {
    a2 = result;
  }
  if (a2 > 0x7FFFFFFF) {
    goto LABEL_13;
  }
  if (a4 < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_14;
  }
  if (a4 <= 0x7FFFFFFF)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a8 + 16))(&v9, a7, a8);
    mlx_eye();
  }
LABEL_15:
  __break(1u);
  __break(1u);
  return result;
}

void full<A>(_:values:type:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Array<A>.asInt32.getter(a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v8, a5, a6);
  mlx_full();
}

void full(_:values:stream:)(uint64_t a1, uint64_t a2)
{
  Array<A>.asInt32.getter(a1);
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a2 + 16));
  sub_256FE5804(dtype, &v4);
  mlx_full();
}

uint64_t identity<A>(_:type:stream:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v5, a4, a5);
    mlx_identity();
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t linspace<A>(_:_:count:stream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  int64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)&v20 - v13;
  uint64_t v22 = *v15;
  uint64_t v16 = *(void (**)(char *))(v9 + 16);
  v16((char *)&v20 - v13);
  uint64_t v17 = sub_25704AD30();
  uint64_t v24 = v9;
  if (v17 < 65)
  {
    sub_25704AD40();
    uint64_t v21 = a6;
    sub_25704AD20();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v14, a5);
    a6 = v21;
  }
  else
  {
    sub_256FE49F0();
    sub_256FE4A44();
    sub_25704A590();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v14, a5);
  }
  ((void (*)(char *, uint64_t, uint64_t))v16)(v12, v23, a5);
  if (sub_25704AD30() <= 64)
  {
    sub_25704AD40();
    sub_25704AD20();
  }
  else
  {
    sub_256FE49F0();
    sub_256FE4A44();
    sub_25704A590();
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v12, a5);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v25, a5, a6);
    mlx_linspace();
  }
  __break(1u);
  __break(1u);
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  void (*v14)(char *);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  int64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v13;
  unint64_t v14 = *(void (**)(char *))(v10 + 16);
  v14(v12);
  sub_256FE49F0();
  sub_25704A580();
  ((void (*)(char *, uint64_t, uint64_t))v14)(v12, a2, a5);
  uint64_t result = sub_25704A580();
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v17, a5, a6);
    mlx_linspace();
  }
  __break(1u);
  __break(1u);
  return result;
}

void _s8Morpheus6repeat_5count4axis6streamAA8MLXArrayCAG_S2iAA14StreamOrDeviceVtF_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_7;
  }
  if (a3 <= 0x7FFFFFFF) {
    mlx_repeat();
  }
LABEL_8:
  __break(1u);
  __break(1u);
}

void _s8Morpheus6repeat_5count6streamAA8MLXArrayCAF_SiAA14StreamOrDeviceVtF_0(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    mlx_repeat_all();
  }
  __break(1u);
  __break(1u);
}

uint64_t _s8Morpheus8MLXArrayC5zeros_5dtype6streamACSaySiG_AA5DTypeOAA14StreamOrDeviceVtFZ_0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
LABEL_8:
  }
    mlx_zeros();
  uint64_t v10 = MEMORY[0x263F8EE78];
  uint64_t result = sub_256F90A30(0, v1, 0);
  char v4 = (int64_t *)(a1 + 32);
  int64_t v5 = v1;
  while (1)
  {
    int64_t v7 = *v4++;
    uint64_t v6 = v7;
    if (v7 < (uint64_t)0xFFFFFFFF80000000) {
      break;
    }
    if (v6 > 0x7FFFFFFF) {
      goto LABEL_10;
    }
    unint64_t v9 = *(void *)(v10 + 16);
    unint64_t v8 = *(void *)(v10 + 24);
    if (v9 >= v8 >> 1) {
      uint64_t result = sub_256F90A30(v8 > 1, v9 + 1, 1);
    }
    *(void *)(v10 + 16) = v9 + 1;
    *(_DWORD *)(v10 + 4 * v9 + 32) = v6;
    if (!--v5) {
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  __break(1u);
  return result;
}

unint64_t sub_256FE49F0()
{
  unint64_t result = qword_269FDCAA8;
  if (!qword_269FDCAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCAA8);
  }
  return result;
}

unint64_t sub_256FE4A44()
{
  unint64_t result = qword_269FDCAB0;
  if (!qword_269FDCAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCAB0);
  }
  return result;
}

uint64_t IntOrPair.first.getter()
{
  return *(void *)v0;
}

uint64_t IntOrPair.second.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t IntOrPair.values.getter()
{
  return *(void *)v0;
}

Morpheus::IntOrPair __swiftcall IntOrPair.init(integerLiteral:)(Swift::Int integerLiteral)
{
  Swift::Int *v1 = integerLiteral;
  v1[1] = integerLiteral;
  result.values._0 = integerLiteral;
  return result;
}

void *_s8Morpheus9IntOrPairV12arrayLiteralACSid_tcfC_0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (result[2] == 2)
  {
    uint64_t v3 = result[4];
    uint64_t v4 = result[5];
    Morpheus::IntOrPair result = (void *)swift_bridgeObjectRelease();
    *a2 = v3;
    a2[1] = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Morpheus::IntOrPair __swiftcall IntOrPair.init(_:)(Morpheus::IntOrPair result)
{
  Morpheus::IntOrPair *v1 = result;
  return result;
}

uint64_t *sub_256FE4B0C@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t IntOrArray.init(integerLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t IntOrArray.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t IntOrArray.asArray.getter()
{
  uint64_t v1 = *v0;
  if (*((unsigned char *)v0 + 8) == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_25706E4C0;
    *(void *)(v2 + 32) = v1;
    return v2;
  }
  return v1;
}

uint64_t IntOrArray.asInt32Array.getter()
{
  uint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    uint64_t v2 = *(void *)v0;
    return Array<A>.asInt32.getter(v2);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC770);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_25706E4C0;
    if (v1 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v1 <= 0x7FFFFFFF)
    {
      *(_DWORD *)(result + 32) = v1;
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t IntOrArray.count.getter()
{
  if (v0[8] == 1) {
    return *(void *)(*(void *)v0 + 16);
  }
  else {
    return 1;
  }
}

void *sub_256FE4C50@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_256FE4C60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

void FloatOrArray.init(floatLiteral:)(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
}

double FloatOrArray.asArray.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC758);
    uint64_t v3 = swift_allocObject();
    *(void *)&double result = 1;
    *(_OWORD *)(v3 + 16) = xmmword_25706E4C0;
    *(_DWORD *)(v3 + 32) = v1;
  }
  return result;
}

uint64_t FloatOrArray.asArray(dimensions:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    if (*(void *)(v3 + 16) == a1) {
      return swift_bridgeObjectRetain();
    }
    __break(1u);
    goto LABEL_16;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_16:
    uint64_t result = sub_25704AFC0();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = sub_25704AAA0();
  *(void *)(result + 16) = a1;
  int64_t v5 = (_DWORD *)(result + 32);
  if (a1 < 8)
  {
    unint64_t v6 = 0;
LABEL_12:
    unint64_t v10 = a1 - v6;
    do
    {
      *v5++ = v3;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 += a1 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v7 = vdupq_n_s32(v3);
  unint64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *unint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a1) {
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_256FE4DF4()
{
  return MEMORY[0x263F8D748];
}

uint64_t sub_256FE4E00()
{
  return MEMORY[0x263F8D640];
}

unsigned int *sub_256FE4E0C@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for IntOrPair(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IntOrPair(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for IntOrPair()
{
  return &type metadata for IntOrPair;
}

uint64_t initializeBufferWithCopyOfBuffer for IntOrArray(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_256FE4EC8(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_256FE4EC8(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for IntOrArray(uint64_t a1)
{
  return sub_256FE4EE4(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_256FE4EE4(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *assignWithCopy for IntOrArray(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_256FE4FC8(a1, a2, a3, (void (*)(void, void))sub_256FE4EC8, (void (*)(uint64_t, uint64_t))sub_256FE4EE4);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for IntOrArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_256FE4EE4(v5, v6);
  return a1;
}

uint64_t sub_256FE4F78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_256FE4F80(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IntOrArray()
{
  return &type metadata for IntOrArray;
}

uint64_t *assignWithCopy for FloatOrArray(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_256FE4FC8(a1, a2, a3, (void (*)(void, void))sub_256FE50D4, (void (*)(uint64_t, uint64_t))sub_256FE50D8);
}

uint64_t *sub_256FE4FC8(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, void), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  unsigned __int8 v8 = *((unsigned char *)a2 + 8);
  a4(*a2, v8);
  uint64_t v9 = *a1;
  uint64_t v10 = *((unsigned __int8 *)a1 + 8);
  *a1 = v7;
  *((unsigned char *)a1 + 8) = v8;
  a5(v9, v10);
  return a1;
}

uint64_t _s8Morpheus10IntOrArrayOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s8Morpheus10IntOrArrayOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FloatOrArray()
{
  return &type metadata for FloatOrArray;
}

Morpheus::DeviceType_optional __swiftcall DeviceType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_25704B0C0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  char *v2 = v5;
  return result;
}

uint64_t DeviceType.rawValue.getter()
{
  if (*v0) {
    return 7696487;
  }
  else {
    return 7696483;
  }
}

uint64_t sub_256FE5184(char *a1, char *a2)
{
  return sub_256FF2D74(*a1, *a2);
}

uint64_t sub_256FE5190()
{
  return sub_25704B2B0();
}

uint64_t sub_256FE51F4()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FE523C()
{
  return sub_25704B2B0();
}

Morpheus::DeviceType_optional sub_256FE529C(Swift::String *a1)
{
  return DeviceType.init(rawValue:)(*a1);
}

void sub_256FE52A8(uint64_t *a1@<X8>)
{
  if (*v1) {
    uint64_t v2 = 7696487;
  }
  else {
    uint64_t v2 = 7696483;
  }
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

void Device.__allocating_init(_:index:)()
{
}

void Device.init(_:index:)()
{
}

void Device.__allocating_init()()
{
}

void Device.init()()
{
}

uint64_t Device.deinit()
{
  mlx_free(*(atomic_ullong **)(v0 + 16));
  return v0;
}

uint64_t Device.__deallocating_deinit()
{
  mlx_free(*(atomic_ullong **)(v0 + 16));
  return MEMORY[0x270FA0228](v0, 24, 7);
}

void sub_256FE5430()
{
}

uint64_t static Device.cpu.getter()
{
  return sub_256FE5520(&qword_269FDC638);
}

void sub_256FE54A8()
{
}

uint64_t static Device.gpu.getter()
{
  return sub_256FE5520(&qword_269FDC640);
}

uint64_t sub_256FE5520(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_retain();
}

void static Device.defaultDevice()()
{
}

uint64_t static Device.setDefault(device:)(uint64_t a1)
{
  return mlx_set_default_device(*(void *)(a1 + 16));
}

uint64_t Device.description.getter()
{
  uint64_t result = mlx_tostring(*(uint64_t (****)(void))(v0 + 16));
  uint64_t v2 = (atomic_ullong *)result;
  if (result)
  {
    uint64_t result = mlx_string_data(result);
    if (result)
    {
      uint64_t v3 = sub_25704A870();
      mlx_free(v2);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_256FE5648()
{
  unint64_t result = qword_269FDCAC8;
  if (!qword_269FDCAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCAC8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DeviceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FE5768);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceType()
{
  return &type metadata for DeviceType;
}

uint64_t type metadata accessor for Device()
{
  return self;
}

uint64_t method lookup function for Device(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Device);
}

uint64_t dispatch thunk of Device.__allocating_init(_:index:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of Device.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_256FE5804@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result >= 7)
  {
    sub_25704ADF0();
    sub_25704A850();
    type metadata accessor for mlx_array_dtype_();
    sub_25704AF60();
    unint64_t result = sub_25704AFD0();
    __break(1u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t DType.isComplex.getter()
{
  return 0;
}

BOOL static DType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t toArrays<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v24 - v16;
  MEMORY[0x270FA5388](v15);
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  type metadata accessor for MLXArray();
  if (swift_dynamicCast())
  {
    uint64_t v20 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, a2, a4);
    if (swift_dynamicCast()) {
      return v20;
    }
    uint64_t dtype = mlx_array_get_dtype(*(void *)(v20 + 16));
    sub_256FE5804(dtype, &v25);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, a4);
  if (!swift_dynamicCast())
  {
    LOBYTE(v25) = 7;
    uint64_t v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 8))(&v25, a3, a5);
    LOBYTE(v25) = 7;
LABEL_8:
    (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(&v25, a4);
    return v20;
  }
  uint64_t v21 = mlx_array_get_dtype(*(void *)(v25 + 16));
  sub_256FE5804(v21, &v25);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 8))(&v25, a3, a5);
}

uint64_t MLXArray.asMLXArray(dtype:)()
{
  return swift_retain();
}

void static Int.dtype.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static Int32.dtype.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static Float.dtype.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_256FE5BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  BOOL v4 = a1 == 0x5F6C6F6F62 && a2 == 0xE500000000000000;
  if (v4 || (sub_25704B1E0() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 0;
LABEL_7:
    *a3 = v8;
    return result;
  }
  if (a1 == 0x323374616F6C66 && a2 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 6;
    goto LABEL_7;
  }
  if (a1 == 947154537 && a2 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 3;
    goto LABEL_7;
  }
  if (a1 == 0x3233746E69 && a2 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 4;
    goto LABEL_7;
  }
  if (a1 == 0x3436746E69 && a2 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 5;
    goto LABEL_7;
  }
  if (a1 == 0x38746E6975 && a2 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 1;
    goto LABEL_7;
  }
  if (a1 == 0x3233746E6975 && a2 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 2;
    goto LABEL_7;
  }
  sub_25704ADF0();
  swift_bridgeObjectRelease();
  sub_25704A850();
  swift_bridgeObjectRelease();
  uint64_t result = sub_25704AFD0();
  __break(1u);
  return result;
}

BOOL DType.isFloatingPoint.getter()
{
  return *v0 == 6;
}

BOOL DType.isInteger.getter()
{
  return *v0 - 1 < 5;
}

BOOL DType.isSignedInteger.getter()
{
  return *v0 - 3 < 3;
}

uint64_t DType.hash(into:)()
{
  return sub_25704B2A0();
}

uint64_t DType.hashValue.getter()
{
  return sub_25704B2B0();
}

uint64_t HasDType.asMLXArray(dtype:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = (unsigned __int8 *)MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a2);
  if (v10 == 7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v15, a2, a3);
    LOBYTE(v10) = v15;
  }
  else
  {
    LOBYTE(v15) = v10;
  }
  type metadata accessor for MLXArray();
  char v14 = v10;
  uint64_t v11 = sub_256FCEF44((uint64_t)v9, (uint64_t)&v14, a2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  return v11;
}

void static Bool.dtype.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void sub_256FE6124(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_256FE612C(char *a1)
{
  if (*a1 == 7) {
    char v2 = 0;
  }
  else {
    char v2 = *a1;
  }
  return sub_256FB9A5C(*v1, v2);
}

void sub_256FE6140(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static Int8.dtype.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void sub_256FE6158(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

unint64_t sub_256FE6164(char *a1)
{
  if (*a1 == 7) {
    char v2 = 3;
  }
  else {
    char v2 = *a1;
  }
  return sub_256FBD2F4(*v1, v2);
}

void sub_256FE617C(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

unint64_t sub_256FE6188(char *a1)
{
  if (*a1 == 7) {
    char v2 = 4;
  }
  else {
    char v2 = *a1;
  }
  return sub_256FB43B4(*v1, v2);
}

unint64_t sub_256FE61A0(char *a1)
{
  if (*a1 == 7) {
    char v2 = 5;
  }
  else {
    char v2 = *a1;
  }
  return sub_256FBF908(*v1, v2);
}

void static UInt8.dtype.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void sub_256FE61C4(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

unint64_t sub_256FE61D0(char *a1)
{
  if (*a1 == 7) {
    char v2 = 1;
  }
  else {
    char v2 = *a1;
  }
  return sub_256FC25F0(*v1, v2);
}

void static UInt32.dtype.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

unint64_t sub_256FE61F0(char *a1)
{
  if (*a1 == 7) {
    char v2 = 2;
  }
  else {
    char v2 = *a1;
  }
  return sub_256FC4F3C(*v1, v2);
}

uint64_t Float.asMLXArray(dtype:)(float a1)
{
  return sub_256FB38FC(6, a1);
}

void sub_256FE6210(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_256FE621C()
{
  return sub_256FB38FC(6, *v0);
}

unsigned __int8 *Int.asMLXArray(dtype:)(unsigned __int8 *result, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  int v2 = *result;
  if (v2 == 7) {
    LOBYTE(v2) = 4;
  }
  return (unsigned __int8 *)sub_256FB43B4(a2, v2);
}

int64_t sub_256FE6264(unsigned __int8 *a1)
{
  int64_t result = *v1;
  if (*v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  int v4 = *a1;
  if (v4 == 7) {
    char v5 = 4;
  }
  else {
    char v5 = v4;
  }
  return sub_256FB43B4(result, v5);
}

uint64_t Double.asMLXArray(dtype:)(char *a1, double a2)
{
  if (*a1 == 7) {
    char v2 = 6;
  }
  else {
    char v2 = *a1;
  }
  float v3 = a2;
  return sub_256FB38FC(v2, v3);
}

uint64_t sub_256FE62B8(char *a1)
{
  if (*a1 == 7) {
    char v2 = 6;
  }
  else {
    char v2 = *a1;
  }
  float v3 = *v1;
  return sub_256FB38FC(v2, v3);
}

uint64_t sub_256FE62D4()
{
  return swift_retain();
}

void Array<A>.asMLXArray(dtype:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *a1;
  type metadata accessor for MLXArray();
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_256FCEC60(v7, 0, a3);
  swift_bridgeObjectRelease();
  if (v6 == 7) {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v8, a3, a4);
  }
  else {
    LOBYTE(v8) = v6;
  }
  type metadata accessor for Stream();
  swift_initStackObject();
  mlx_default_device();
}

void sub_256FE6414(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  Array<A>.asMLXArray(dtype:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

unint64_t sub_256FE642C()
{
  unint64_t result = qword_269FDCAD0;
  if (!qword_269FDCAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCAD0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FE65DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DType()
{
  return &type metadata for DType;
}

uint64_t dispatch thunk of static HasDType.dtype.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScalarOrArray.asMLXArray(dtype:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t Int.mul(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC728);
  if (swift_dynamicCast())
  {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    if (a2 == (int)a2) {
      mlx_array_from_int();
    }
    __break(1u);
    __break(1u);
  }
  else
  {
    sub_256FB118C(a1, (uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
    if (swift_dynamicCast())
    {
      sub_256FA81EC(v14, (uint64_t)v17);
      uint64_t v7 = v18;
      uint64_t v8 = v19;
      __swift_project_boxed_opaque_existential_1(v17, v18);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      if (a2 < 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = MEMORY[0x263F8EE78];
      }
      else
      {
        *(void *)&v14[0] = MEMORY[0x263F8EE78];
        do
        {
          uint64_t v9 = swift_bridgeObjectRetain();
          sub_256FA4470(v9);
          --a2;
        }
        while (a2);
        swift_bridgeObjectRelease();
        uint64_t v10 = *(void *)&v14[0];
      }
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAE8);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v10;
      a3[3] = v12;
      *a3 = v13;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
    else
    {
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
      sub_256FB11E8((uint64_t)v14, &qword_269FDCAE0);
      sub_256F92DE8();
      swift_allocError();
      unsigned char *v11 = 15;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_256FE6890@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Int.mul(_:)(a1, *v2, a2);
}

uint64_t Int32.mul(_:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  LODWORD(v3) = a2;
  sub_256FB118C(a1, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC728);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    mlx_array_from_int();
  }
  sub_256FB118C(a1, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(v14, (uint64_t)v17);
    uint64_t v6 = v18;
    uint64_t v7 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    if ((int)v3 < 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v3 = (int)v3;
      *(void *)&v14[0] = MEMORY[0x263F8EE78];
      do
      {
        uint64_t v8 = swift_bridgeObjectRetain();
        sub_256FA4470(v8);
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)&v14[0];
    }
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAE8);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v9;
    a3[3] = v12;
    *a3 = v13;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_256FB11E8((uint64_t)v14, &qword_269FDCAE0);
    sub_256F92DE8();
    swift_allocError();
    *uint64_t v10 = 15;
    return swift_willThrow();
  }
}

uint64_t sub_256FE6AF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Int32.mul(_:)(a1, *v2, a2);
}

atomic_ullong *UInt32.mul(_:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  LODWORD(v3) = a2;
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_256FB118C(a1, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC728);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    LODWORD(v19[0]) = v3;
    uint64_t result = (atomic_ullong *)mlx_array_from_data((uint64_t)v19, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
    uint64_t v7 = result;
    if (result)
    {
      type metadata accessor for MLXArray();
      uint64_t inited = swift_initStackObject();
      *(void *)(inited + 16) = v7;
      sub_25702B250(2, inited, a1);
      swift_setDeallocating();
      return mlx_free(v7);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_256FB118C(a1, (uint64_t)v18);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
    if (swift_dynamicCast())
    {
      sub_256FA81EC(v16, (uint64_t)v19);
      uint64_t v9 = v20;
      uint64_t v10 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      if (v3)
      {
        uint64_t v3 = v3;
        *(void *)&v16[0] = MEMORY[0x263F8EE78];
        do
        {
          uint64_t v11 = swift_bridgeObjectRetain();
          sub_256FA4470(v11);
          --v3;
        }
        while (v3);
        swift_bridgeObjectRelease();
        uint64_t v12 = *(void *)&v16[0];
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = MEMORY[0x263F8EE78];
      }
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAE8);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v12;
      a3[3] = v14;
      *a3 = v15;
      return (atomic_ullong *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    else
    {
      uint64_t v17 = 0;
      memset(v16, 0, sizeof(v16));
      sub_256FB11E8((uint64_t)v16, &qword_269FDCAE0);
      sub_256F92DE8();
      swift_allocError();
      unsigned char *v13 = 15;
      return (atomic_ullong *)swift_willThrow();
    }
  }
  return result;
}

void sub_256FE6D8C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FE6D94);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_256FE6DA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return UInt32.mul(_:)(a1, *v2, a2);
}

void Float.mul(_:)()
{
}

void sub_256FE6E78()
{
}

void Double.mul(_:)()
{
}

void sub_256FE6FE8()
{
}

void *MLXArray.mul(_:)(uint64_t a1)
{
  unsigned __int8 v3 = 7;
  uint64_t result = sub_2570049DC(a1, &v3);
  if (!v1) {
    mlx_default_device();
  }
  return result;
}

void *sub_256FE71B0(uint64_t a1)
{
  return MLXArray.mul(_:)(a1);
}

uint64_t SharedMutableArray.mul(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v68);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
  if (!swift_dynamicCast())
  {
    uint64_t v67 = 0;
    memset(v66, 0, sizeof(v66));
    sub_256FB11E8((uint64_t)v66, &qword_269FDC948);
    sub_256F92DE8();
    swift_allocError();
    *uint64_t v23 = 15;
    return swift_willThrow();
  }
  uint64_t v59 = a2;
  uint64_t v60 = v2;
  sub_256FA81EC(v66, (uint64_t)v69);
  SharedMutableArray.anyArray.getter();
  uint64_t v4 = v70;
  uint64_t v5 = v71;
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(v69, v70);
  uint64_t v58 = v50;
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned char **)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v50[-((unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v62 = v7;
  uint64_t v10 = *(void (**)(unsigned char *))(v7 + 16);
  v10(v9);
  uint64_t v11 = sub_25704AD40();
  char v12 = v11;
  unint64_t v57 = v50;
  uint64_t v61 = v8;
  uint64_t v13 = v4;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = v9;
  uint64_t v63 = v9;
  char v72 = (unsigned char *)(v7 + 16);
  uint64_t v65 = v10;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v10)(v9, v9, v13);
  uint64_t v64 = v5;
  if ((v12 & 1) == 0)
  {
    uint64_t v17 = *(void (**)(unsigned char *, uint64_t))(v62 + 8);
    v17(v14, v13);
    goto LABEL_9;
  }
  uint64_t v15 = sub_25704AD30();
  uint64_t v16 = (unsigned char *)(v62 + 8);
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t))(v62 + 8);
  uint64_t v18 = ((uint64_t (*)(unsigned char *, uint64_t))v17)(v14, v13);
  if (v15 <= 64)
  {
LABEL_9:
    uint64_t v25 = v63;
    uint64_t v19 = v61;
    goto LABEL_23;
  }
  uint64_t v56 = v16;
  uint64_t v19 = v61;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = &v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v65)(v20, v63, v13);
  *(void *)&v66[0] = 0x8000000000000000;
  if (sub_25704AD40())
  {
    uint64_t v21 = sub_25704AD30();
    if (v21 >= 64)
    {
      uint64_t v54 = v50;
      MEMORY[0x270FA5388](v21);
      sub_256FC9A38();
      sub_25704AD10();
      char v22 = sub_25704A6D0();
      v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
      v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
      goto LABEL_13;
    }
  }
  else
  {
    char v26 = sub_25704AD40();
    uint64_t v55 = &v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v27 = sub_25704AD30();
    if (v26)
    {
      uint64_t v54 = v50;
      if (v27 <= 64) {
        goto LABEL_19;
      }
      MEMORY[0x270FA5388](v27);
      sub_256FC9A38();
      sub_25704AD10();
      char v28 = v55;
      char v22 = sub_25704A6D0();
      v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
      v17(v28, v13);
LABEL_13:
      uint64_t v25 = v63;
      if (v22) {
        goto LABEL_18;
      }
      goto LABEL_23;
    }
    if (v27 >= 64)
    {
      v17(v55, v13);
      uint64_t v25 = v63;
      goto LABEL_23;
    }
    uint64_t v20 = v55;
  }
  uint64_t v29 = sub_25704AD20();
  v17(v20, v13);
  uint64_t v25 = v63;
  if (v29 < *(uint64_t *)&v66[0])
  {
LABEL_18:
    do
    {
      __break(1u);
LABEL_19:
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      unint64_t v53 = v50;
      MEMORY[0x270FA5388](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v31 = sub_25704B210();
      uint64_t v52 = v50;
      MEMORY[0x270FA5388](v31);
      unint64_t v32 = (unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0;
      sub_25704B1C0();
      unsigned __int8 v33 = v55;
      int v51 = sub_25704A6D0();
      uint64_t v34 = ((uint64_t (*)(unsigned char *, uint64_t))v17)(&v50[-v32], v13);
      unint64_t v53 = v50;
      MEMORY[0x270FA5388](v34);
      uint64_t v35 = (uint64_t)&v50[-v32];
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 32))(&v50[-v32], v33, v13);
      uint64_t v25 = v63;
      if (v51) {
        goto LABEL_42;
      }
      uint64_t v36 = *(void *)&v66[0];
      uint64_t v37 = sub_25704AD20();
      v17((unsigned char *)v35, v13);
    }
    while (v37 < v36);
  }
LABEL_23:
  uint64_t v38 = sub_25704AD30();
  uint64_t v61 = v50;
  MEMORY[0x270FA5388](v38);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v65)(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v25, v13);
  if (v38 < 65)
  {
    uint64_t v42 = sub_25704AD30();
    v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
    if (v42 != 64) {
      goto LABEL_35;
    }
    uint64_t v39 = sub_25704AD40();
    if (v39) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v39 = ((uint64_t (*)(unsigned char *, uint64_t))v17)(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
  }
  uint64_t v56 = v50;
  MEMORY[0x270FA5388](v39);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v65)(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v25, v13);
  *(void *)&v66[0] = 0x7FFFFFFFFFFFFFFFLL;
  char v40 = sub_25704AD40();
  uint64_t v41 = sub_25704AD30();
  if (v40)
  {
    if (v41 > 64)
    {
      char v72 = v50;
      MEMORY[0x270FA5388](v41);
      sub_256FC9A38();
      sub_25704AD10();
      uint64_t v35 = sub_25704A6D0();
      uint64_t v25 = v63;
      v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
      v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
LABEL_34:
      if ((v35 & 1) == 0) {
        goto LABEL_35;
      }
      __break(1u);
LABEL_42:
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v17)(v35, v13);
      __break(1u);
      return result;
    }
  }
  else if (v41 > 63)
  {
    char v72 = v50;
    v68[0] = 0x7FFFFFFFFFFFFFFFLL;
    MEMORY[0x270FA5388](v41);
    uint64_t v43 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 32))(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], &v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
    uint64_t v65 = v50;
    MEMORY[0x270FA5388](v43);
    sub_256FC9A38();
    sub_25704AD10();
    uint64_t v35 = sub_25704A6D0();
    v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
    uint64_t v25 = v63;
    v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
    goto LABEL_34;
  }
  sub_25704AD20();
  v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
LABEL_35:
  uint64_t v44 = sub_25704AD20();
  v17(v25, v13);
  if (v44 < 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x263F8EE78];
  }
  else
  {
    *(void *)&v66[0] = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v45 = swift_bridgeObjectRetain();
      sub_256FA4470(v45);
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
    uint64_t v46 = *(void *)&v66[0];
  }
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAE8);
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = v46;
  uint64_t v49 = v59;
  v59[3] = v47;
  *uint64_t v49 = v48;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
}

uint64_t sub_256FE7D6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return SharedMutableArray.mul(_:)(a1, a2);
}

uint64_t Array.mul(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v68);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
  if (!swift_dynamicCast())
  {
    uint64_t v67 = 0;
    memset(v66, 0, sizeof(v66));
    sub_256FB11E8((uint64_t)v66, &qword_269FDC948);
    sub_256F92DE8();
    swift_allocError();
    *uint64_t v23 = 15;
    return swift_willThrow();
  }
  uint64_t v59 = a2;
  uint64_t v60 = v2;
  sub_256FA81EC(v66, (uint64_t)v69);
  Array.anyArray.getter();
  uint64_t v4 = v70;
  uint64_t v5 = v71;
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(v69, v70);
  uint64_t v58 = v50;
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned char **)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v50[-((unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v62 = v7;
  uint64_t v10 = *(void (**)(unsigned char *))(v7 + 16);
  v10(v9);
  uint64_t v11 = sub_25704AD40();
  char v12 = v11;
  unint64_t v57 = v50;
  uint64_t v61 = v8;
  uint64_t v13 = v4;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = v9;
  uint64_t v63 = v9;
  char v72 = (unsigned char *)(v7 + 16);
  uint64_t v65 = v10;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v10)(v9, v9, v13);
  uint64_t v64 = v5;
  if ((v12 & 1) == 0)
  {
    uint64_t v17 = *(void (**)(unsigned char *, uint64_t))(v62 + 8);
    v17(v14, v13);
    goto LABEL_9;
  }
  uint64_t v15 = sub_25704AD30();
  uint64_t v16 = (unsigned char *)(v62 + 8);
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t))(v62 + 8);
  uint64_t v18 = ((uint64_t (*)(unsigned char *, uint64_t))v17)(v14, v13);
  if (v15 <= 64)
  {
LABEL_9:
    uint64_t v25 = v63;
    uint64_t v19 = v61;
    goto LABEL_23;
  }
  uint64_t v56 = v16;
  uint64_t v19 = v61;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = &v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v65)(v20, v63, v13);
  *(void *)&v66[0] = 0x8000000000000000;
  if (sub_25704AD40())
  {
    uint64_t v21 = sub_25704AD30();
    if (v21 >= 64)
    {
      uint64_t v54 = v50;
      MEMORY[0x270FA5388](v21);
      sub_256FC9A38();
      sub_25704AD10();
      char v22 = sub_25704A6D0();
      v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
      v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
      goto LABEL_13;
    }
  }
  else
  {
    char v26 = sub_25704AD40();
    uint64_t v55 = &v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v27 = sub_25704AD30();
    if (v26)
    {
      uint64_t v54 = v50;
      if (v27 <= 64) {
        goto LABEL_19;
      }
      MEMORY[0x270FA5388](v27);
      sub_256FC9A38();
      sub_25704AD10();
      char v28 = v55;
      char v22 = sub_25704A6D0();
      v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
      v17(v28, v13);
LABEL_13:
      uint64_t v25 = v63;
      if (v22) {
        goto LABEL_18;
      }
      goto LABEL_23;
    }
    if (v27 >= 64)
    {
      v17(v55, v13);
      uint64_t v25 = v63;
      goto LABEL_23;
    }
    uint64_t v20 = v55;
  }
  uint64_t v29 = sub_25704AD20();
  v17(v20, v13);
  uint64_t v25 = v63;
  if (v29 < *(uint64_t *)&v66[0])
  {
LABEL_18:
    do
    {
      __break(1u);
LABEL_19:
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      unint64_t v53 = v50;
      MEMORY[0x270FA5388](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v31 = sub_25704B210();
      uint64_t v52 = v50;
      MEMORY[0x270FA5388](v31);
      unint64_t v32 = (unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0;
      sub_25704B1C0();
      unsigned __int8 v33 = v55;
      int v51 = sub_25704A6D0();
      uint64_t v34 = ((uint64_t (*)(unsigned char *, uint64_t))v17)(&v50[-v32], v13);
      unint64_t v53 = v50;
      MEMORY[0x270FA5388](v34);
      uint64_t v35 = (uint64_t)&v50[-v32];
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 32))(&v50[-v32], v33, v13);
      uint64_t v25 = v63;
      if (v51) {
        goto LABEL_42;
      }
      uint64_t v36 = *(void *)&v66[0];
      uint64_t v37 = sub_25704AD20();
      v17((unsigned char *)v35, v13);
    }
    while (v37 < v36);
  }
LABEL_23:
  uint64_t v38 = sub_25704AD30();
  uint64_t v61 = v50;
  MEMORY[0x270FA5388](v38);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v65)(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v25, v13);
  if (v38 < 65)
  {
    uint64_t v42 = sub_25704AD30();
    v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
    if (v42 != 64) {
      goto LABEL_35;
    }
    uint64_t v39 = sub_25704AD40();
    if (v39) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v39 = ((uint64_t (*)(unsigned char *, uint64_t))v17)(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
  }
  uint64_t v56 = v50;
  MEMORY[0x270FA5388](v39);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v65)(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v25, v13);
  *(void *)&v66[0] = 0x7FFFFFFFFFFFFFFFLL;
  char v40 = sub_25704AD40();
  uint64_t v41 = sub_25704AD30();
  if (v40)
  {
    if (v41 > 64)
    {
      char v72 = v50;
      MEMORY[0x270FA5388](v41);
      sub_256FC9A38();
      sub_25704AD10();
      uint64_t v35 = sub_25704A6D0();
      uint64_t v25 = v63;
      v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
      v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
LABEL_34:
      if ((v35 & 1) == 0) {
        goto LABEL_35;
      }
      __break(1u);
LABEL_42:
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v17)(v35, v13);
      __break(1u);
      return result;
    }
  }
  else if (v41 > 63)
  {
    char v72 = v50;
    v68[0] = 0x7FFFFFFFFFFFFFFFLL;
    MEMORY[0x270FA5388](v41);
    uint64_t v43 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 32))(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], &v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
    uint64_t v65 = v50;
    MEMORY[0x270FA5388](v43);
    sub_256FC9A38();
    sub_25704AD10();
    uint64_t v35 = sub_25704A6D0();
    v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
    uint64_t v25 = v63;
    v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
    goto LABEL_34;
  }
  sub_25704AD20();
  v17(&v50[-((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
LABEL_35:
  uint64_t v44 = sub_25704AD20();
  v17(v25, v13);
  if (v44 < 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x263F8EE78];
  }
  else
  {
    *(void *)&v66[0] = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v45 = swift_bridgeObjectRetain();
      sub_256FA4470(v45);
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
    uint64_t v46 = *(void *)&v66[0];
  }
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAE8);
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = v46;
  uint64_t v49 = v59;
  v59[3] = v47;
  *uint64_t v49 = v48;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
}

uint64_t sub_256FE8938@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Array.mul(_:)(a1, a2);
}

uint64_t String.mul(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v77);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
  if (!swift_dynamicCast())
  {
    uint64_t v76 = 0;
    memset(v75, 0, sizeof(v75));
    sub_256FB11E8((uint64_t)v75, &qword_269FDC948);
    sub_256F92DE8();
    swift_allocError();
    *unsigned __int8 v33 = 15;
    return swift_willThrow();
  }
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  uint64_t v70 = a4;
  uint64_t v71 = v4;
  sub_256FA81EC(v75, (uint64_t)v78);
  uint64_t v9 = v79;
  uint64_t v8 = v80;
  uint64_t v10 = __swift_project_boxed_opaque_existential_1(v78, v79);
  uint64_t v69 = v60;
  uint64_t v11 = *(void **)(v9 - 8);
  char v12 = (void (*)(char *, uint64_t))v11[8];
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = (void (*)(char *))v11[2];
  v14((char *)v60 - v13);
  char v72 = v8;
  uint64_t v15 = sub_25704AD40();
  LOBYTE(v8) = v15;
  uint64_t v68 = v60;
  char v73 = v12;
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = (char *)v60 - v13;
  uint64_t v17 = (char *)v60 - v13;
  uint64_t v18 = (char *)v60 - v13;
  uint64_t v19 = (char *)v60 - v13;
  uint64_t v20 = (void (*)(char *, char *, uint64_t))v14;
  uint64_t v74 = v11 + 2;
  ((void (*)(char *, char *, uint64_t))v14)(v17, v19, v9);
  unint64_t v81 = v11;
  if ((v8 & 1) == 0)
  {
    uint64_t v23 = (void (*)(char *, uint64_t))v11[1];
    v23(v16, v9);
    goto LABEL_10;
  }
  uint64_t v21 = v72;
  uint64_t v22 = sub_25704AD30();
  uint64_t v25 = (void (*)(char *, uint64_t))v11[1];
  uint64_t v24 = v11 + 1;
  uint64_t v23 = v25;
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v16, v9);
  if (v22 <= 64)
  {
LABEL_10:
    uint64_t v29 = v18;
    unint64_t v32 = v73;
    goto LABEL_25;
  }
  uint64_t v65 = v24;
  MEMORY[0x270FA5388](v26);
  char v28 = (char *)v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v18;
  v20(v28, v18, v9);
  *(void *)&v75[0] = 0x8000000000000000;
  if (sub_25704AD40())
  {
    uint64_t v30 = sub_25704AD30();
    if (v30 >= 64)
    {
      uint64_t v63 = v60;
      unint64_t v32 = v73;
      MEMORY[0x270FA5388](v30);
      uint64_t v64 = v60;
      sub_256FC9A38();
      sub_25704AD10();
      LODWORD(v62) = sub_25704A6D0();
      v23((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      v23(v28, v9);
      if ((v62 & 1) == 0) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v31 = sub_25704AD20();
      v23(v28, v9);
      unint64_t v32 = v73;
      if (v31 >= *(uint64_t *)&v75[0]) {
        goto LABEL_25;
      }
    }
    goto LABEL_23;
  }
  uint64_t v64 = v60;
  char v35 = sub_25704AD40();
  uint64_t v36 = sub_25704AD30();
  if (v35)
  {
    unint64_t v32 = v73;
    if (v36 > 64)
    {
      uint64_t v63 = v60;
      MEMORY[0x270FA5388](v36);
      sub_256FC9A38();
      sub_25704AD10();
      char v37 = sub_25704A6D0();
      v23((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      v23(v28, v9);
      if ((v37 & 1) == 0) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }
    uint64_t v63 = *(void **)(v21[3] + 16);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v62 = v60;
    MEMORY[0x270FA5388](AssociatedTypeWitness);
    v60[0] = (char *)v60 - v41;
    swift_getAssociatedConformanceWitness();
    uint64_t v42 = sub_25704B210();
    v60[1] = v60;
    MEMORY[0x270FA5388](v42);
    unint64_t v61 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v43 = (char *)v60 - v61;
    sub_25704B1C0();
    LODWORD(v60[0]) = sub_25704A6D0();
    uint64_t v44 = ((uint64_t (*)(char *, uint64_t))v23)(v43, v9);
    uint64_t v63 = v60;
    MEMORY[0x270FA5388](v44);
    uint64_t v45 = (uint64_t)v60 - v61;
    ((void (*)(char *, char *, uint64_t))v81[4])((char *)v60 - v61, v28, v9);
    if (v60[0])
    {
LABEL_43:
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v23)(v45, v9);
      __break(1u);
      return result;
    }
    char v28 = *(char **)&v75[0];
    uint64_t v46 = sub_25704AD20();
    v23((char *)v45, v9);
    BOOL v39 = v46 < (uint64_t)v28;
  }
  else
  {
    unint64_t v32 = v73;
    if (v36 >= 64)
    {
LABEL_24:
      v23(v28, v9);
      goto LABEL_25;
    }
    uint64_t v38 = sub_25704AD20();
    v23(v28, v9);
    BOOL v39 = v38 < *(void *)&v75[0];
  }
  if (v39)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v47 = sub_25704AD30();
  MEMORY[0x270FA5388](v47);
  v20((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v9);
  if (v47 < 65)
  {
    uint64_t v51 = sub_25704AD30();
    v23((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    if (v51 != 64) {
      goto LABEL_38;
    }
    uint64_t v48 = sub_25704AD40();
    if (v48) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v48 = ((uint64_t (*)(char *, uint64_t))v23)((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  }
  char v72 = v60;
  char v73 = v23;
  MEMORY[0x270FA5388](v48);
  v20((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v9);
  *(void *)&v75[0] = 0x7FFFFFFFFFFFFFFFLL;
  char v49 = sub_25704AD40();
  uint64_t v50 = sub_25704AD30();
  if (v49)
  {
    if (v50 > 64)
    {
      MEMORY[0x270FA5388](v50);
      sub_256FC9A38();
      sub_25704AD10();
      uint64_t v45 = sub_25704A6D0();
      uint64_t v23 = v73;
      v73((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      v23((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      if (v45) {
        goto LABEL_42;
      }
      goto LABEL_38;
    }
LABEL_35:
    sub_25704AD20();
    uint64_t v23 = v73;
    v73((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    goto LABEL_38;
  }
  uint64_t v74 = v60;
  uint64_t v52 = v81;
  if (v50 <= 63) {
    goto LABEL_35;
  }
  uint64_t v65 = v60;
  v77[0] = 0x7FFFFFFFFFFFFFFFLL;
  MEMORY[0x270FA5388](v50);
  uint64_t v53 = ((uint64_t (*)(char *, char *, uint64_t))v52[4])((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v64 = v60;
  MEMORY[0x270FA5388](v53);
  sub_256FC9A38();
  sub_25704AD10();
  uint64_t v45 = sub_25704A6D0();
  uint64_t v54 = v73;
  v73((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v23 = v54;
  v54((char *)v60 - (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  if (v45)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_38:
  uint64_t v55 = sub_25704AD20();
  v23(v29, v9);
  if (v55 <= 0)
  {
    uint64_t v57 = 0;
    unint64_t v58 = 0xE000000000000000;
  }
  else
  {
    uint64_t v56 = v67;
    swift_bridgeObjectRetain();
    uint64_t v57 = MEMORY[0x25A2B0970](v66, v56, v55);
  }
  uint64_t v59 = v70;
  v70[3] = MEMORY[0x263F8D310];
  *uint64_t v59 = v57;
  v59[1] = v58;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
}

uint64_t sub_256FE9578@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return String.mul(_:)(a1, *v2, v2[1], a2);
}

uint64_t dispatch thunk of Multiplicable.mul(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

Swift::Int32 __swiftcall Int.value()()
{
  if (v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v0 <= 0x7FFFFFFF)
  {
    return v0;
  }
  __break(1u);
  return v0;
}

uint64_t sub_256FE95E0()
{
  uint64_t result = *v0;
  if (*v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > 0x7FFFFFFF) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_256FE960C()
{
  return *v0;
}

void SliceStruct.mlxArrayIndexOperation.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = 0x100000000;
  if (*((unsigned char *)v1 + 4)) {
    uint64_t v2 = 0x100000000;
  }
  if (!*((unsigned char *)v1 + 20)) {
    uint64_t v3 = v1[4];
  }
  uint64_t v4 = v1[2] | 0x4000000000;
  if (*((unsigned char *)v1 + 12)) {
    uint64_t v4 = 0x4100000000;
  }
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 20) = BYTE4(v4);
}

void sub_256FE9664(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = 0x100000000;
  if (*((unsigned char *)v1 + 4)) {
    uint64_t v2 = 0x100000000;
  }
  if (!*((unsigned char *)v1 + 20)) {
    uint64_t v3 = v1[4];
  }
  uint64_t v4 = v1[2] | 0x4000000000;
  if (*((unsigned char *)v1 + 12)) {
    uint64_t v4 = 0x4100000000;
  }
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 20) = BYTE4(v4);
}

void Ellipsis.mlxArrayIndexOperation.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = -64;
}

ValueMetadata *type metadata accessor for SliceStruct()
{
  return &type metadata for SliceStruct;
}

ValueMetadata *type metadata accessor for Ellipsis()
{
  return &type metadata for Ellipsis;
}

uint64_t dispatch thunk of SliceIndex.value()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_256FE96FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF3024(*a1, *a2);
}

uint64_t sub_256FE9708()
{
  return sub_25704B2B0();
}

uint64_t sub_256FE979C()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FE981C()
{
  return sub_25704B2B0();
}

uint64_t sub_256FE98AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256FEA59C();
  *a1 = result;
  return result;
}

void sub_256FE98DC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1885697139;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7265707075;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x7265776F6CLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_256FE992C()
{
  uint64_t v1 = 1885697139;
  if (*v0 != 1) {
    uint64_t v1 = 0x7265707075;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7265776F6CLL;
  }
}

uint64_t sub_256FE9978@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256FEA59C();
  *a1 = result;
  return result;
}

uint64_t sub_256FE99A0(uint64_t a1)
{
  unint64_t v2 = sub_256FEA33C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256FE99DC(uint64_t a1)
{
  unint64_t v2 = sub_256FEA33C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256FE9A18(void *a1)
{
  return sub_256FE9A64(a1);
}

uint64_t sub_256FE9A64(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAF8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_256FEA33C();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    type metadata accessor for MorpheusSlice();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v1 + 40) = sub_2570304D8((uint64_t)v8, 0);
    *(void *)(v1 + 48) = v9;
    swift_unknownObjectRelease();
    *(void *)(v1 + 56) = sub_2570304D8((uint64_t)v8, 1);
    *(void *)(v1 + 64) = v10;
    swift_unknownObjectRelease();
    MEMORY[0x48] = sub_2570304D8((uint64_t)v8, 2);
    MEMORY[0x50] = v11;
    swift_release();
    swift_unknownObjectRelease();
    sub_256F92F24((uint64_t)a1, (uint64_t)v14);
    uint64_t v3 = sub_257046164(v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_256FE9CE0@<X0>(uint64_t a1@<X8>)
{
  void (*v22)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void v39[3];
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  unsigned char v46[32];
  uint64_t v47;

  uint64_t v3 = v2;
  if (v1[5])
  {
    uint64_t v5 = v1[6];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = MEMORY[0x25A2B2020](v1 + 3);
    uint64_t v8 = v1[4];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
    swift_unknownObjectRetain();
    v9(v7, v8, ObjectType, v5);
    swift_unknownObjectRelease();
  }
  if (v1[7])
  {
    uint64_t v10 = v1[8];
    uint64_t v11 = swift_getObjectType();
    uint64_t v12 = MEMORY[0x25A2B2020](v1 + 3);
    uint64_t v13 = v1[4];
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
    swift_unknownObjectRetain();
    v14(v12, v13, v11, v10);
    swift_unknownObjectRelease();
  }
  if (v1[9])
  {
    uint64_t v15 = v1[10];
    uint64_t v16 = swift_getObjectType();
    uint64_t v17 = MEMORY[0x25A2B2020](v1 + 3);
    uint64_t v18 = v1[4];
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 48);
    swift_unknownObjectRetain();
    v19(v17, v18, v16, v15);
    swift_unknownObjectRelease();
  }
  if (!v1[5])
  {
    uint64_t v47 = 0;
    memset(v46, 0, sizeof(v46));
    if (!v1[7]) {
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v27 = v1[8];
    char v28 = swift_getObjectType();
    uint64_t v29 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v27 + 64);
    swift_unknownObjectRetain();
    v29(v42, v28, v27);
    if (v3)
    {
      sub_256FEA274((uint64_t)v46);
      return swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
    sub_25704326C((uint64_t)v44);
    sub_256FEA220((uint64_t)v42);
    if (v1[9]) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
  uint64_t v20 = v1[6];
  uint64_t v21 = swift_getObjectType();
  uint64_t v22 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v20 + 64);
  swift_unknownObjectRetain();
  v22(v44, v21, v20);
  uint64_t result = swift_unknownObjectRelease();
  if (v3) {
    return result;
  }
  sub_25704326C((uint64_t)v46);
  sub_256FEA220((uint64_t)v44);
  if (v1[7]) {
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v45 = 0;
  memset(v44, 0, sizeof(v44));
  if (v1[9])
  {
LABEL_11:
    uint64_t v24 = v1[10];
    uint64_t v25 = swift_getObjectType();
    uint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v24 + 64);
    swift_unknownObjectRetain();
    v26(v39, v25, v24);
    swift_unknownObjectRelease();
    if (v3)
    {
      sub_256FEA274((uint64_t)v44);
      return sub_256FEA274((uint64_t)v46);
    }
    sub_25704326C((uint64_t)v42);
    sub_256FEA220((uint64_t)v39);
    goto LABEL_19;
  }
LABEL_17:
  uint64_t v43 = 0;
  memset(v42, 0, sizeof(v42));
LABEL_19:
  sub_256FEA2D4((uint64_t)v46, (uint64_t)v39);
  uint64_t v30 = v40;
  if (v40)
  {
    uint64_t v31 = v41;
    __swift_project_boxed_opaque_existential_1(v39, v40);
    unint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  else
  {
    sub_256FEA274((uint64_t)v39);
    unint64_t v32 = 0;
  }
  sub_256FEA2D4((uint64_t)v44, (uint64_t)v39);
  unsigned __int8 v33 = v40;
  if (v40)
  {
    uint64_t v34 = v41;
    __swift_project_boxed_opaque_existential_1(v39, v40);
    char v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  else
  {
    sub_256FEA274((uint64_t)v39);
    char v35 = 0;
  }
  sub_256FEA2D4((uint64_t)v42, (uint64_t)v39);
  uint64_t v36 = v40;
  if (v40)
  {
    char v37 = v41;
    __swift_project_boxed_opaque_existential_1(v39, v40);
    uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
    sub_256FEA274((uint64_t)v42);
    sub_256FEA274((uint64_t)v44);
    sub_256FEA274((uint64_t)v46);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  else
  {
    sub_256FEA274((uint64_t)v42);
    sub_256FEA274((uint64_t)v44);
    sub_256FEA274((uint64_t)v46);
    uint64_t result = sub_256FEA274((uint64_t)v39);
    uint64_t v38 = 0;
  }
  *(void *)(a1 + 24) = &type metadata for SliceStruct;
  *(_DWORD *)a1 = v32;
  *(unsigned char *)(a1 + 4) = v30 == 0;
  *(_DWORD *)(a1 + 8) = v35;
  *(unsigned char *)(a1 + 12) = v33 == 0;
  *(_DWORD *)(a1 + 16) = v38;
  *(unsigned char *)(a1 + 20) = v36 == 0;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_256FEA174()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_256FEA1AC()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 88, 7);
}

uint64_t type metadata accessor for MorpheusSlice()
{
  return self;
}

uint64_t sub_256FEA220(uint64_t a1)
{
  return a1;
}

uint64_t sub_256FEA274(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_256FEA2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_256FEA33C()
{
  unint64_t result = qword_269FDCB00;
  if (!qword_269FDCB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB00);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MorpheusSlice.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FEA45CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MorpheusSlice.CodingKeys()
{
  return &type metadata for MorpheusSlice.CodingKeys;
}

unint64_t sub_256FEA498()
{
  unint64_t result = qword_269FDCB08;
  if (!qword_269FDCB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB08);
  }
  return result;
}

unint64_t sub_256FEA4F0()
{
  unint64_t result = qword_269FDCB10;
  if (!qword_269FDCB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB10);
  }
  return result;
}

unint64_t sub_256FEA548()
{
  unint64_t result = qword_269FDCB18;
  if (!qword_269FDCB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB18);
  }
  return result;
}

uint64_t sub_256FEA59C()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_256FEA5E8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_256FEA648@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_256FEA6AC(uint64_t a1)
{
  unint64_t v2 = sub_256FEA9C4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256FEA6E8(uint64_t a1)
{
  unint64_t v2 = sub_256FEA9C4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256FEA724(void *a1)
{
  return sub_256FEA770(a1);
}

uint64_t sub_256FEA770(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB20);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_256FEA9C4();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for SetComp();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_2570304F8((uint64_t)v8, 0);
    v1[6] = v10;
    v1[7] = sub_2570392A0(v8, 1);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t type metadata accessor for SetComp()
{
  return self;
}

unint64_t sub_256FEA9C4()
{
  unint64_t result = qword_269FDCB28;
  if (!qword_269FDCB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB28);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SetComp.NameCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FEAAE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SetComp.NameCodingKeys()
{
  return &type metadata for SetComp.NameCodingKeys;
}

unint64_t sub_256FEAB20()
{
  unint64_t result = qword_269FDCB30;
  if (!qword_269FDCB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB30);
  }
  return result;
}

unint64_t sub_256FEAB78()
{
  unint64_t result = qword_269FDCB38;
  if (!qword_269FDCB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB38);
  }
  return result;
}

unint64_t sub_256FEABD0()
{
  unint64_t result = qword_269FDCB40;
  if (!qword_269FDCB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB40);
  }
  return result;
}

uint64_t sub_256FEAC24(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_256F9ABF4((_OWORD *)a1, v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_256FED4B0(v7, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v6;
    swift_bridgeObjectRelease();
    return sub_256F9AC98(a2);
  }
  else
  {
    sub_256FB11E8(a1, &qword_269FDC6E0);
    sub_256FECD68(a2, v7);
    sub_256F9AC98(a2);
    return sub_256FB11E8((uint64_t)v7, &qword_269FDC6E0);
  }
}

uint64_t sub_256FEACE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_256F9ABF4((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *int v3 = 0x8000000000000000;
    sub_256FED5FC(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *int v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_256FB11E8(a1, &qword_269FDC6E0);
    sub_256FECE64(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_256FB11E8((uint64_t)v9, &qword_269FDC6E0);
  }
}

uint64_t sub_256FEADBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24) == 1)
  {
    sub_256FB11E8(a1, &qword_269FDCBB0);
    sub_256FECF68(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_256FB11E8((uint64_t)v9, &qword_269FDCBB0);
  }
  else
  {
    sub_256FEEC3C(a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *int v3 = 0x8000000000000000;
    sub_256FED750((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *int v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

double sub_256FEAE98@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_256FED050(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_256FB118C(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

unint64_t sub_256FEAEFC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB88);
  uint64_t v2 = sub_25704B080();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_256FEED0C(v6, (uint64_t)v15, qword_269FDCBD8);
    unint64_t result = sub_256FED0C8((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_256F9ABF4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_256FEB040(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCBC8);
  uint64_t v2 = sub_25704B080();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_256FEED0C(v6, (uint64_t)&v15, &qword_269FDCBD0);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_256FED050(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_256F9ABF4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_256FEB178(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCBA8);
  uint64_t v2 = sub_25704B080();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_256FEED0C(v6, (uint64_t)&v15, &qword_269FDC710);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_256FED050(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_256FEEC3C((uint64_t)&v17, v3[7] + 32 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_256FEB2B0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB90);
  uint64_t v2 = (void *)sub_25704B080();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_256FED050(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_256FEB3CC(uint64_t a1)
{
  return sub_256FEB3FC(a1, &qword_269FDCB98);
}

unint64_t sub_256FEB3D8(uint64_t a1)
{
  return sub_256FEB3FC(a1, &qword_269FDCBC0);
}

unint64_t sub_256FEB3E4(uint64_t a1)
{
  return sub_256FEB3FC(a1, &qword_269FDCBA0);
}

unint64_t sub_256FEB3F0(uint64_t a1)
{
  return sub_256FEB3FC(a1, &qword_269FDCBB8);
}

unint64_t sub_256FEB3FC(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)sub_25704B080();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *((void *)v5 - 2);
    uint64_t v7 = *((void *)v5 - 1);
    long long v14 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_256FED050(v6, v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v3[6] + 16 * result);
    *char v10 = v6;
    v10[1] = v7;
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    void v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_OWORD *sub_256FEB524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  swift_retain();
  sub_257038D0C(a1, a2, (uint64_t)&v11);
  swift_release();
  if (v12) {
    return sub_256F9ABF4(&v11, a3);
  }
  sub_256FB11E8((uint64_t)&v11, &qword_269FDC6E0);
  if (qword_269FDC648 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_269FDD640;
  unint64_t result = (_OWORD *)swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 104);
  if (*(void *)(v8 + 16))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_256FED050(a1, a2);
    if (v10)
    {
      sub_256FB118C(*(void *)(v8 + 56) + 32 * v9, (uint64_t)a3);
    }
    else
    {
      *a3 = 0u;
      a3[1] = 0u;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return (_OWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_256FEB670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[3] = MEMORY[0x263F8D310];
  v9[0] = a1;
  v9[1] = a2;
  sub_256FB118C((uint64_t)v9, (uint64_t)v8);
  swift_retain();
  swift_bridgeObjectRetain();
  if (swift_dynamicCast())
  {
    swift_retain();
    sub_25704ADA0();
    sub_256FB118C(a3, (uint64_t)v7);
    sub_256F9AC04((uint64_t)v8, (uint64_t)&v6);
    sub_256FEED0C((uint64_t)v7, (uint64_t)v5, &qword_269FDC6E0);
    swift_beginAccess();
    sub_256FEAC24((uint64_t)v5, (uint64_t)&v6);
    swift_endAccess();
    sub_256F9AC98((uint64_t)v8);
    sub_256FB11E8((uint64_t)v7, &qword_269FDC6E0);
    swift_release();
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t sub_256FEB7C0()
{
  swift_release();
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t sub_256FEB800()
{
  return swift_retain();
}

uint64_t sub_256FEB808()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_256FEB838(char *a1, char *a2)
{
  return sub_256FF2F88(*a1, *a2);
}

uint64_t sub_256FEB844()
{
  return sub_25704B2B0();
}

uint64_t sub_256FEB8BC()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FEB920()
{
  return sub_25704B2B0();
}

uint64_t sub_256FEB994@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_256FEB9F4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1668183398;
  if (!*v1) {
    uint64_t v2 = 0x6B636F6C62;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_256FEBA28()
{
  if (*v0) {
    return 1668183398;
  }
  else {
    return 0x6B636F6C62;
  }
}

uint64_t sub_256FEBA58@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_256FEBABC(uint64_t a1)
{
  unint64_t v2 = sub_256FEE834();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256FEBAF8(uint64_t a1)
{
  unint64_t v2 = sub_256FEE834();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t MorpheusProgram.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  MorpheusProgram.init(from:)(a1);
  return v2;
}

void *MorpheusProgram.init(from:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB48);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_256FEE62C();
  if (v2)
  {
    type metadata accessor for MorpheusProgram();
    swift_deallocPartialClassInstance();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_256FEE834();
    sub_25704B310();
    char v19 = 0;
    type metadata accessor for LexicalBlock();
    sub_256FEE900((unint64_t *)&qword_269FDCB58, 255, (void (*)(uint64_t))type metadata accessor for LexicalBlock);
    sub_25704B130();
    v1[5] = v18;
    LOBYTE(v18) = 1;
    v1[2] = sub_25704B0F0();
    v1[3] = v10;
    type metadata accessor for MorpheusProgram.RootBlock();
    uint64_t v11 = swift_allocObject();
    type metadata accessor for LexicalContext();
    uint64_t v17 = v11;
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = 0x6E776F6E6B6E55;
    v12[3] = 0xE700000000000000;
    unint64_t v16 = sub_256FEAEFC(MEMORY[0x263F8EE78]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB60);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = MEMORY[0x263F8EE80];
    swift_beginAccess();
    *(void *)(v13 + 16) = v16;
    swift_bridgeObjectRelease();
    v12[4] = v13;
    void v12[5] = sub_256FEB2B0(MEMORY[0x263F8EE78]);
    uint64_t v14 = v17;
    *(void *)(v17 + 16) = v12;
    v12[2] = 1953460050;
    v12[3] = 0xE400000000000000;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v3[4] = v14;
    *(void *)(v3[5] + 32) = &off_27063A638;
    swift_unknownObjectWeakAssign();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t sub_256FEBEBC()
{
  swift_retain();
  uint64_t v0 = sub_25704413C();
  swift_release();
  return v0;
}

uint64_t sub_256FEBF08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 16);
  unint64_t v8 = *(void *)(v3 + 24);
  swift_bridgeObjectRetain();
  sub_256FEBF74(a1, a2, v7, v8, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FEBF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  swift_retain();
  sub_257043E74();
  uint64_t result = swift_release();
  if (!v5)
  {
    swift_retain();
    sub_257043924(a3, a4, &v13);
    swift_release();
    if (v14)
    {
      type metadata accessor for Function();
      if (swift_dynamicCast())
      {
        sub_256FFCCF4(a1, a2, a5);
        return swift_release();
      }
    }
    else
    {
      sub_256FB11E8((uint64_t)&v13, &qword_269FDC6E0);
    }
    sub_256F92DE8();
    swift_allocError();
    unsigned char *v12 = 8;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_256FEC0AC()
{
  if (qword_269FDC658 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_269FDD660;
  uint64_t v1 = qword_269FDC670;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_256FEC1D8(v2, v0);
  unint64_t v4 = sub_257036C70(v3);
  swift_bridgeObjectRelease();
  v6[0] = MEMORY[0x263F8EE78];
  v6[1] = MEMORY[0x263F8EE78];
  v6[2] = MEMORY[0x263F8EE78];
  v6[3] = MEMORY[0x263F8EE78];
  v6[4] = MEMORY[0x263F8EE78];
  type metadata accessor for Function();
  long long v7 = 0u;
  long long v8 = 0u;
  swift_allocObject();
  uint64_t result = Function.init(name:arguments:attrs:body:)(1953460082, 0xE400000000000000, (uint64_t)v6, v4, 0, 0);
  qword_269FDD640 = result;
  return result;
}

uint64_t sub_256FEC1D8(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_256FEE2FC(a1, (uint64_t)sub_256FEE5E4, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

void *static MorpheusProgram.registerFunction(name:f:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v52 = a1;
  *((void *)&v52 + 1) = a2;
  v50[0] = 46;
  v50[1] = 0xE100000000000000;
  sub_256FC9544();
  uint64_t v3 = sub_25704ACC0();
  unint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
    swift_bridgeObjectRetain();
    swift_release();
LABEL_47:
    swift_bridgeObjectRelease_n();
    sub_256F92DE8();
    swift_allocError();
    *uint64_t v36 = 7;
    return (void *)swift_willThrow();
  }
  uint64_t v54 = v3 + 32;
  uint64_t v5 = (void *)v3;
  swift_bridgeObjectRetain_n();
  BOOL v39 = v5;
  uint64_t v6 = v5 + 5;
  uint64_t v7 = MEMORY[0x263F8EE78];
  uint64_t v8 = v4;
  do
  {
    uint64_t v13 = *(v6 - 1);
    uint64_t v12 = *v6;
    uint64_t v14 = HIBYTE(*v6) & 0xF;
    if ((*v6 & 0x2000000000000000) == 0) {
      uint64_t v14 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (!v14)
    {
      swift_bridgeObjectRetain();
      *(void *)&long long v52 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256F909F0(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v52;
      }
      unint64_t v10 = *(void *)(v7 + 16);
      unint64_t v9 = *(void *)(v7 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_256F909F0(v9 > 1, v10 + 1, 1);
        uint64_t v7 = v52;
      }
      *(void *)(v7 + 16) = v10 + 1;
      uint64_t v11 = v7 + 16 * v10;
      *(void *)(v11 + 32) = v13;
      *(void *)(v11 + 40) = v12;
    }
    v6 += 2;
    --v8;
  }
  while (v8);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v7 + 16);
  swift_release();
  if (v15) {
    goto LABEL_47;
  }
  if (v4 > v39[2])
  {
    __break(1u);
  }
  else
  {
    long long v37 = *(_OWORD *)(v54 + 16 * v4 - 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (qword_269FDC648 == -1)
    {
      if (v39[2]) {
        goto LABEL_16;
      }
LABEL_51:
      __break(1u);
LABEL_52:
      uint64_t result = sub_256FA822C(v39);
      uint64_t v17 = result[2];
      if (v17) {
        goto LABEL_18;
      }
LABEL_53:
      __break(1u);
      return result;
    }
  }
  swift_once();
  if (!v39[2]) {
    goto LABEL_51;
  }
LABEL_16:
  uint64_t v8 = qword_269FDD640;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_52;
  }
  uint64_t result = v39;
  uint64_t v17 = v39[2];
  if (!v17) {
    goto LABEL_53;
  }
LABEL_18:
  uint64_t v18 = result;
  result[2] = v17 - 1;
  swift_bridgeObjectRelease();
  uint64_t v19 = v18[2];
  if (v19)
  {
    uint64_t v20 = v18 + 5;
    while (1)
    {
      uint64_t v22 = *(v20 - 1);
      uint64_t v21 = *v20;
      swift_beginAccess();
      uint64_t v23 = *(void *)(v8 + 104);
      if (!*(void *)(v23 + 16)) {
        break;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      unint64_t v24 = sub_256FED050(v22, v21);
      if (v25)
      {
        sub_256FB118C(*(void *)(v23 + 56) + 32 * v24, (uint64_t)&v52);
      }
      else
      {
        long long v52 = 0u;
        long long v53 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*((void *)&v53 + 1)) {
        goto LABEL_32;
      }
      type metadata accessor for Function();
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v8 = v50[0];
        goto LABEL_23;
      }
      char v40 = (uint64_t *)(v8 + 104);
      uint64_t v41 = v20;
      uint64_t v42 = v19;
LABEL_34:
      swift_bridgeObjectRetain();
      uint64_t v26 = MEMORY[0x263F8EE78];
      unint64_t v44 = sub_256FEB040(MEMORY[0x263F8EE78]);
      uint64_t v43 = type metadata accessor for Function();
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 32) = v26;
      *(void *)(v8 + 40) = v26;
      *(void *)(v8 + 48) = v26;
      *(void *)(v8 + 56) = v26;
      *(void *)(v8 + 64) = v26;
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      unint64_t v27 = sub_256FEB040(v26);
      uint64_t v54 = v21;
      *(void *)(v8 + 104) = v27;
      *(void *)(v8 + 16) = v22;
      *(void *)(v8 + 24) = v21;
      *(void *)(v8 + 32) = v26;
      *(void *)(v8 + 40) = v26;
      *(void *)(v8 + 48) = v26;
      *(void *)(v8 + 56) = v26;
      *(void *)(v8 + 64) = v26;
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *(void *)(v8 + 104) = v44;
      swift_bridgeObjectRelease();
      uint64_t v28 = swift_allocObject();
      swift_weakInit();
      *(void *)(v8 + 112) = sub_256FEE8E4;
      *(void *)(v8 + 120) = v28;
      swift_beginAccess();
      swift_weakAssign();
      *((void *)&v53 + 1) = MEMORY[0x263F8D310];
      *(void *)&long long v52 = v22;
      *((void *)&v52 + 1) = v54;
      uint64_t v51 = v43;
      v50[0] = v8;
      sub_256FB118C((uint64_t)&v52, (uint64_t)&v48);
      swift_retain();
      if (swift_dynamicCast())
      {
        long long v29 = v47[0];
        sub_256FB118C((uint64_t)v50, (uint64_t)&v48);
        if (swift_dynamicCast())
        {
          uint64_t v49 = v43;
          *(void *)&long long v48 = *(void *)&v47[0];
          swift_beginAccess();
          if (v49)
          {
            sub_256F9ABF4(&v48, v47);
            swift_retain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v45 = *v40;
            uint64_t *v40 = 0x8000000000000000;
            sub_256FED5FC(v47, v29, *((uint64_t *)&v29 + 1), isUniquelyReferenced_nonNull_native);
            uint64_t *v40 = v45;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_retain();
            sub_256FB11E8((uint64_t)&v48, &qword_269FDC6E0);
            swift_bridgeObjectRetain();
            unint64_t v31 = sub_256FED050(v29, *((uint64_t *)&v29 + 1));
            char v33 = v32;
            swift_bridgeObjectRelease();
            if (v33)
            {
              char v34 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v35 = *v40;
              uint64_t v46 = *v40;
              uint64_t *v40 = 0x8000000000000000;
              if ((v34 & 1) == 0)
              {
                sub_256FEDD6C();
                uint64_t v35 = v46;
              }
              swift_bridgeObjectRelease();
              sub_256F9ABF4((_OWORD *)(*(void *)(v35 + 56) + 32 * v31), v47);
              sub_256FED2D8(v31, v35);
              uint64_t *v40 = v35;
              swift_bridgeObjectRelease();
            }
            else
            {
              memset(v47, 0, sizeof(v47));
            }
            swift_bridgeObjectRelease();
            sub_256FB11E8((uint64_t)v47, &qword_269FDC6E0);
          }
          uint64_t v19 = v42;
          swift_endAccess();
          swift_release();
          swift_release();
          goto LABEL_22;
        }
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      uint64_t v19 = v42;
LABEL_22:
      uint64_t v20 = v41;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
LABEL_23:
      v20 += 2;
      if (!--v19) {
        goto LABEL_48;
      }
    }
    long long v52 = 0u;
    long long v53 = 0u;
    swift_bridgeObjectRetain();
LABEL_32:
    char v40 = (uint64_t *)(v8 + 104);
    uint64_t v41 = v20;
    uint64_t v42 = v19;
    sub_256FB11E8((uint64_t)&v52, &qword_269FDC6E0);
    goto LABEL_34;
  }
LABEL_48:
  swift_bridgeObjectRelease();
  *((void *)&v53 + 1) = MEMORY[0x263F8D310];
  long long v52 = v37;
  uint64_t v51 = type metadata accessor for Function();
  v50[0] = a3;
  swift_retain();
  sub_256FFE5CC((uint64_t)&v52, (uint64_t)v50);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
}

uint64_t static MorpheusProgram.fromDSL(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_25704A7C0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  _OWORD v15[2] = 10;
  v15[3] = 0xE100000000000000;
  v15[0] = 28252;
  v15[1] = 0xE200000000000000;
  sub_256FC9544();
  sub_25704ACE0();
  sub_25704A7B0();
  uint64_t v9 = sub_25704A7A0();
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v11 >> 60 == 15)
  {
    sub_256F92DE8();
    swift_allocError();
    unsigned char *v12 = 34;
    return swift_willThrow();
  }
  else
  {
    sub_25704A460();
    swift_allocObject();
    sub_25704A450();
    type metadata accessor for MorpheusProgram();
    sub_256FEE900(&qword_269FDCB68, v14, (void (*)(uint64_t))type metadata accessor for MorpheusProgram);
    sub_25704A440();
    sub_256FEE948(v9, v11);
    uint64_t result = swift_release();
    if (!v2) {
      return v16;
    }
  }
  return result;
}

uint64_t MorpheusProgram.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t MorpheusProgram.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0228](v0, 48, 7);
}

void *sub_256FECCC0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for MorpheusProgram();
  uint64_t v5 = swift_allocObject();
  uint64_t result = MorpheusProgram.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_256FECD18()
{
  swift_retain();
  uint64_t v0 = sub_25704413C();
  swift_release();
  return v0;
}

double sub_256FECD68@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_256FED0C8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_256FEDB84();
      uint64_t v9 = v11;
    }
    sub_256F9AC98(*(void *)(v9 + 48) + 40 * v6);
    sub_256F9ABF4((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_256FED10C(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_256FECE64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_256FED050(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_256FEDD6C();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_256F9ABF4((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_256FED2D8(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_256FECF68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_256FED050(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_256FEDF54();
      uint64_t v12 = v13;
    }
    swift_bridgeObjectRelease();
    sub_256FEEC3C(*(void *)(v12 + 56) + 32 * v8, (uint64_t)a3);
    sub_256FED2D8(v8, v12);
    *unint64_t v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 1;
  }
  return result;
}

unint64_t sub_256FED050(uint64_t a1, uint64_t a2)
{
  sub_25704B290();
  sub_25704A810();
  uint64_t v4 = sub_25704B2B0();
  return sub_256FED9D8(a1, a2, v4);
}

unint64_t sub_256FED0C8(uint64_t a1)
{
  uint64_t v2 = sub_25704AD80();
  return sub_256FEDABC(a1, v2);
}

unint64_t sub_256FED10C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25704AD70();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_256F9AC04(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        uint64_t v10 = sub_25704AD80();
        uint64_t result = sub_256F9AC98((uint64_t)v28);
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              long long v17 = *v16;
              long long v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_256FED2D8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_25704AD70();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_25704B290();
        swift_bridgeObjectRetain();
        sub_25704A810();
        uint64_t v10 = sub_25704B2B0();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          long long v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    long long v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    long long v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *long long v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_256FED4B0(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_256FED0C8(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_256FEDB84();
      goto LABEL_7;
    }
    sub_256FFEF94(v13, a3 & 1);
    unint64_t v19 = sub_256FED0C8(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_256F9AC04(a2, (uint64_t)v21);
      return sub_256FFFC20(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)sub_25704B230();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  long long v17 = (_OWORD *)(v16[7] + 32 * v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return sub_256F9ABF4(a1, v17);
}

_OWORD *sub_256FED5FC(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_256FED050(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_256FEDD6C();
      goto LABEL_7;
    }
    sub_256FFF2AC(v15, a4 & 1);
    unint64_t v21 = sub_256FED050(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      long long v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_25704B230();
    __break(1u);
    return result;
  }
LABEL_7:
  long long v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return sub_256F9ABF4(a1, v19);
  }
LABEL_13:
  sub_256FFFC9C(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_256FED750(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_256FED050(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_256FEDF54();
      goto LABEL_7;
    }
    sub_256FFF5AC(v15, a4 & 1);
    unint64_t v21 = sub_256FED050(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      long long v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_25704B230();
    __break(1u);
    return result;
  }
LABEL_7:
  long long v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 32 * v12;
    return sub_256FEECA4(a1, v19);
  }
LABEL_13:
  sub_256FFFD08(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

uint64_t sub_256FED898(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_256FED050(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    long long v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_256FEE144();
    goto LABEL_7;
  }
  sub_256FFF8C8(v15, a4 & 1);
  unint64_t v21 = sub_256FED050(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = sub_25704B230();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  long long v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_256FFFD74(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

unint64_t sub_256FED9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_25704B1E0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_25704B1E0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_256FEDABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_256F9AC04(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x25A2B0E10](v9, a1);
      sub_256F9AC98((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void *sub_256FEDB84()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB88);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25704B060();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_256F9AC04(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_256FB118C(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_256F9ABF4(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_256FEDD6C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCBC8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25704B060();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_256FB118C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    sub_256F9ABF4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_256FEDF54()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCBA8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25704B060();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_256FEED0C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26, &qword_269FDC6E0);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v18;
    v21[1] = v19;
    sub_256FEEC3C((uint64_t)v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_256FEE144()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB90);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25704B060();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_256FEE2FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_257006C4C();
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  int64_t v13 = (void *)*a5;
  unint64_t v15 = sub_256FED050(v7, v8);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      int64_t v22 = (void *)*a5;
      if (v14) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_256FEE144();
      int64_t v22 = (void *)*a5;
      if (v19) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    int64_t v24 = (uint64_t *)(v22[6] + 16 * v15);
    *int64_t v24 = v10;
    v24[1] = v11;
    *(void *)(v22[7] + 8 * v15) = v12;
    uint64_t v25 = v22[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v27;
LABEL_13:
    uint64_t v28 = sub_257006C4C();
    if (v29)
    {
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      do
      {
        long long v37 = (void *)*a5;
        unint64_t v39 = sub_256FED050(v31, v32);
        uint64_t v40 = v37[2];
        BOOL v41 = (v38 & 1) == 0;
        uint64_t v42 = v40 + v41;
        if (__OFADD__(v40, v41)) {
          goto LABEL_25;
        }
        char v43 = v38;
        if (v37[3] < v42)
        {
          sub_256FFF8C8(v42, 1);
          unint64_t v44 = sub_256FED050(v31, v32);
          if ((v43 & 1) != (v45 & 1)) {
            goto LABEL_27;
          }
          unint64_t v39 = v44;
        }
        uint64_t v46 = (void *)*a5;
        if (v43)
        {
          swift_bridgeObjectRelease();
          uint64_t v34 = v46[7];
          swift_release();
          *(void *)(v34 + 8 * v39) = v33;
        }
        else
        {
          v46[(v39 >> 6) + 8] |= 1 << v39;
          uint64_t v47 = (uint64_t *)(v46[6] + 16 * v39);
          *uint64_t v47 = v31;
          v47[1] = v32;
          *(void *)(v46[7] + 8 * v39) = v33;
          uint64_t v48 = v46[2];
          BOOL v26 = __OFADD__(v48, 1);
          uint64_t v49 = v48 + 1;
          if (v26) {
            goto LABEL_26;
          }
          v46[2] = v49;
        }
        uint64_t v31 = sub_257006C4C();
        uint64_t v32 = v35;
        uint64_t v33 = v36;
      }
      while (v35);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    sub_256FABF38();
    return swift_release();
  }
  sub_256FFF8C8(v18, a4 & 1);
  unint64_t v20 = sub_256FED050(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    int64_t v22 = (void *)*a5;
    if ((v19 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v23 = v22[7];
    swift_release();
    *(void *)(v23 + 8 * v15) = v12;
    goto LABEL_13;
  }
LABEL_27:
  uint64_t result = sub_25704B230();
  __break(1u);
  return result;
}

uint64_t sub_256FEE5E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_256FEE62C()
{
  uint64_t v0 = SecTaskCreateFromSelf(0);
  if (v0)
  {
    uint64_t v1 = (__CFString *)sub_25704A780();
    CFTypeRef v2 = SecTaskCopyValueForEntitlement(v0, v1, 0);

    if (v2)
    {
      swift_unknownObjectRetain();
      if ((swift_dynamicCast() & 1) == 0 || (v10 & 1) == 0)
      {
        sub_256F92DE8();
        swift_allocError();
        *uint64_t v3 = 0;
        swift_willThrow();
      }

      return swift_unknownObjectRelease();
    }
  }
  if (qword_269FDC650 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_25704A550();
  __swift_project_value_buffer(v5, (uint64_t)qword_269FDD648);
  uint64_t v6 = sub_25704A530();
  os_log_type_t v7 = sub_25704AC60();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_256D65000, v6, v7, "Morpheus require proper entitlement, please contact PFL team (#help-pfl)", v8, 2u);
    MEMORY[0x25A2B1FA0](v8, -1, -1);
  }

  sub_256F92DE8();
  swift_allocError();
  unsigned char *v9 = 0;
  return swift_willThrow();
}

uint64_t type metadata accessor for MorpheusProgram()
{
  return self;
}

unint64_t sub_256FEE834()
{
  unint64_t result = qword_269FDCB50;
  if (!qword_269FDCB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB50);
  }
  return result;
}

uint64_t type metadata accessor for MorpheusProgram.RootBlock()
{
  return self;
}

uint64_t sub_256FEE8AC()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_256FEE8E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_256FFCC50(a1);
}

uint64_t sub_256FEE900(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_256FEE948(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_256FD3524(a1, a2);
  }
  return a1;
}

uint64_t method lookup function for MorpheusProgram(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MorpheusProgram);
}

uint64_t dispatch thunk of MorpheusProgram.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of MorpheusProgram.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MorpheusProgram.execute(args:keywords:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MorpheusProgram.execute(args:keywords:function:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

unsigned char *storeEnumTagSinglePayload for MorpheusProgram.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FEEAFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MorpheusProgram.CodingKeys()
{
  return &type metadata for MorpheusProgram.CodingKeys;
}

unint64_t sub_256FEEB38()
{
  unint64_t result = qword_269FDCB70;
  if (!qword_269FDCB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB70);
  }
  return result;
}

unint64_t sub_256FEEB90()
{
  unint64_t result = qword_269FDCB78;
  if (!qword_269FDCB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB78);
  }
  return result;
}

unint64_t sub_256FEEBE8()
{
  unint64_t result = qword_269FDCB80;
  if (!qword_269FDCB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB80);
  }
  return result;
}

uint64_t sub_256FEEC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_256FEECA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_256FEED0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t SharedMutableArray.__allocating_init(array:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t sub_256FEEDDC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_256FEEE08()
{
  return sub_25704ABB0();
}

uint64_t sub_256FEEE98()
{
  sub_256FF0AEC();
  return swift_bridgeObjectRetain();
}

uint64_t sub_256FEEEC0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t SharedMutableArray.init(array:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t _s8Morpheus18SharedMutableArrayC3lenSiyF_0()
{
  return sub_256FEEFC0(MEMORY[0x263F8D448]);
}

uint64_t sub_256FEEF2C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = a1 + 1;
  if (__OFADD__(a1, 1)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_256FEEF74()
{
  return 0;
}

uint64_t sub_256FEEFA8()
{
  return sub_256FEEFC0(MEMORY[0x263F8D470]);
}

uint64_t sub_256FEEFC0(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = a1(v5, v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_256FEF044()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FEF0D4(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  uint64_t v5 = (unint64_t *)(v2 + 16);
  if ((a2 & 0x8000000000000000) != 0)
  {
    swift_beginAccess();
    unint64_t v6 = *(void *)(*v5 + 16) + v3;
    swift_beginAccess();
    unint64_t v3 = *v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v5 = v3;
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v6 & 0x8000000000000000) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      unint64_t v3 = (unint64_t)sub_256FA8218((void *)v3);
      *uint64_t v5 = v3;
      if ((v6 & 0x8000000000000000) == 0)
      {
LABEL_8:
        if (v6 < *(void *)(v3 + 16))
        {
          uint64_t v8 = (void *)(v3 + 32 * v6);
          goto LABEL_10;
        }
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_beginAccess();
  if (*(void *)(*v5 + 16) > v3)
  {
    swift_beginAccess();
    unint64_t v6 = *v5;
    char v7 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v5 = v6;
    if (v7)
    {
LABEL_4:
      if (*(void *)(v6 + 16) > v3)
      {
        uint64_t v8 = (void *)(v6 + 32 * v3);
LABEL_10:
        __swift_assign_boxed_opaque_existential_0(v8 + 4, a1);
        swift_endAccess();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      __break(1u);
      goto LABEL_22;
    }
LABEL_20:
    unint64_t v6 = (unint64_t)sub_256FA8218((void *)v6);
    *uint64_t v5 = v6;
    goto LABEL_4;
  }
  if (qword_269FDC650 != -1) {
LABEL_22:
  }
    swift_once();
  uint64_t v11 = sub_25704A550();
  __swift_project_value_buffer(v11, (uint64_t)qword_269FDD648);
  swift_retain();
  uint64_t v12 = sub_25704A530();
  os_log_type_t v13 = sub_25704AC60();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134218240;
    sub_25704AC90();
    *(_WORD *)(v14 + 12) = 2048;
    sub_25704AC90();
    swift_release();
    _os_log_impl(&dword_256D65000, v12, v13, "SharedMutableArray> Index out of range %ld >= %ld", (uint8_t *)v14, 0x16u);
    MEMORY[0x25A2B1FA0](v14, -1, -1);
  }
  else
  {
    swift_release();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_256FEF350(uint64_t a1, int64_t a2)
{
  uint64_t v4 = *v2;
  sub_256FF0B58(a1, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v4 + 80) - 8) + 8);
  return v5(a1);
}

void (*sub_256FEF3CC(void *a1, uint64_t a2))(int64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(*(void *)v2 + 80);
  void v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  sub_256FEF044();
  return sub_256FEF4B0;
}

void sub_256FEF4B0(int64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  int64_t v5 = (*a1)[2];
  int64_t v6 = (*a1)[3];
  int64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(int64_t, void *, int64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_256FF0B58((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, int64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_256FF0B58((*a1)[5], v7);
    (*(void (**)(void *, int64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t SharedMutableArray.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharedMutableArray.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_256FEF5F4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_256FEEF74();
  *a1 = 0;
  return result;
}

uint64_t sub_256FEF620@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_256FEEFA8();
  *a1 = result;
  return result;
}

void (*sub_256FEF64C(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_256FEF6B0(v2);
  return sub_256FA8748;
}

void (*sub_256FEF6B0(void *a1))(void *a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  *a1 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  a1[1] = v3;
  a1[2] = malloc(*(void *)(v3 + 64));
  sub_256FEF044();
  return sub_256FE034C;
}

uint64_t sub_256FEF768()
{
  type metadata accessor for SharedMutableArray();
  return sub_25704AC10();
}

uint64_t sub_256FEF7C4()
{
  type metadata accessor for SharedMutableArray();
  return sub_25704AC00();
}

uint64_t sub_256FEF818()
{
  return _s8Morpheus18SharedMutableArrayC3lenSiyF_0();
}

void sub_256FEF83C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_256FEF84C()
{
  type metadata accessor for SharedMutableArray();
  return sub_25704ABD0();
}

uint64_t sub_256FEF8B8()
{
  type metadata accessor for SharedMutableArray();
  return sub_25704ABC0();
}

uint64_t sub_256FEF92C()
{
  type metadata accessor for SharedMutableArray();
  return sub_25704ABF0();
}

uint64_t sub_256FEF988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for SharedMutableArray();
  return sub_257029DC8(a1, a2, v7, a4);
}

uint64_t sub_256FEF9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for SharedMutableArray();
  return sub_257029DF4(a1, a2, v7, a4);
}

uint64_t sub_256FEFA40(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SharedMutableArray();
  return sub_25702A144(a1, a2);
}

uint64_t sub_256FEFA9C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_256FEEF2C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_256FEFACC(uint64_t *a1)
{
  uint64_t result = sub_256FEEF2C(*a1);
  *a1 = result;
  return result;
}

uint64_t sub_256FEFAFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_256FF0B20();
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  uint64_t result = swift_release();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_256FEFB44()
{
  return sub_256FEEE08();
}

uint64_t sub_256FEFB68()
{
  type metadata accessor for SharedMutableArray();
  swift_getWitnessTable();
  uint64_t v0 = sub_25702A140();
  swift_release();
  return v0;
}

void sub_256FEFBD0()
{
  type metadata accessor for SharedMutableArray();
  JUMPOUT(0x25A2B09F0);
}

uint64_t sub_256FEFC3C()
{
  return sub_25704A980();
}

uint64_t SharedMutableArray<A>.store(key:obj:)(uint64_t a1, uint64_t a2)
{
  sub_256FB118C(a1, (uint64_t)v5);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    sub_256FB118C(a2, (uint64_t)v5);
    return sub_256FEF0D4(v5, v4);
  }
  return result;
}

uint64_t sub_256FEFD28(uint64_t a1, uint64_t a2)
{
  sub_256FB118C(a1, (uint64_t)v5);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    sub_256FB118C(a2, (uint64_t)v5);
    return sub_256FEF0D4(v5, v4);
  }
  return result;
}

uint64_t SharedMutableArray<A>.description.getter()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = MEMORY[0x25A2B0AA0](v0, MEMORY[0x263F8EE58] + 8);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_256FEFE24()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = MEMORY[0x25A2B0AA0](v0, MEMORY[0x263F8EE58] + 8);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SharedMutableArray<A>.get(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v7);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t result = swift_beginAccess();
    if ((v6 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v5 = *(void *)(v2 + 16);
      if (v6 < *(void *)(v5 + 16)) {
        return sub_256FB118C(v5 + 32 * v6 + 32, (uint64_t)a2);
      }
    }
    __break(1u);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_256FEFF4C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return SharedMutableArray<A>.get(_:)(a1, a2);
}

double SharedMutableArray<A>.attribute(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v12)(long long *__return_ptr, uint64_t *);
  double result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void (*v23)(long long *);
  uint64_t v24;
  long long v25;
  long long v26;
  _OWORD v27[2];

  uint64_t v4 = v3;
  uint64_t v8 = sub_256FF0538(&qword_269FDCAE8, &qword_269FDCC90, &qword_269FDCC98, (uint64_t (*)(void))sub_256FEB3D8);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(void *)(v9 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_256FED050(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v25 = 0u;
    BOOL v26 = 0u;
    goto LABEL_7;
  }
  uint64_t v12 = *(void (**)(long long *__return_ptr, uint64_t *))(*(void *)(v9 + 56) + 16 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12(&v25, &v24);
  swift_release();
  if (*((void *)&v26 + 1))
  {
    sub_256F9ABF4(&v25, v27);
    sub_256F9ABF4(v27, (_OWORD *)a3);
    return result;
  }
LABEL_7:
  sub_256FF0EF4((uint64_t)&v25);
  if (a1 == 0x646E65707061 && a2 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    swift_retain();
    uint64_t v14 = MEMORY[0x263F8EE78];
    unint64_t v15 = sub_256FEB040(MEMORY[0x263F8EE78]);
    uint64_t v16 = type metadata accessor for Function();
    BOOL v17 = swift_allocObject();
    *(void *)(v17 + 32) = v14;
    *(void *)(v17 + 40) = v14;
    *(void *)(v17 + 48) = v14;
    *(void *)(v17 + 56) = v14;
    *(void *)(v17 + 64) = v14;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(void *)(v17 + 104) = sub_256FEB040(v14);
    *(void *)(v17 + 16) = 0xD00000000000001CLL;
    *(void *)(v17 + 24) = 0x800000025708DF40;
    *(void *)(v17 + 32) = v14;
    *(void *)(v17 + 40) = &unk_270638208;
    *(void *)(v17 + 48) = v14;
    *(void *)(v17 + 56) = v14;
    *(void *)(v17 + 64) = v14;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(void *)(v17 + 104) = v15;
    swift_bridgeObjectRelease();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_256FF0F54;
    *(void *)(v18 + 24) = v4;
    *(void *)(v17 + 112) = sub_256FF0FA8;
    *(void *)(v17 + 120) = v18;
    *(void *)(a3 + 24) = v16;
    *(void *)a3 = v17;
  }
  else
  {
    *(void *)&uint64_t v25 = v4;
    char v19 = sub_256FF0538(&qword_269FDCAE8, &qword_269FDCC90, &qword_269FDCC98, (uint64_t (*)(void))sub_256FEB3D8);
    swift_beginAccess();
    unint64_t v20 = *(void *)(v19 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v20 + 16))
    {
      swift_bridgeObjectRetain();
      char v21 = sub_256FED050(a1, a2);
      if (v22)
      {
        uint64_t v23 = *(void (**)(long long *))(*(void *)(v20 + 56) + 16 * v21);
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23(&v25);
        swift_release();
        return result;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_256FF02FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v6 = sub_256FED050(0x7463656A626FLL, 0xE600000000000000), (v7 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)v15);
    sub_256F9ABF4(v15, v16);
    *(void *)(a3 + 24) = MEMORY[0x263F8EE60] + 8;
    sub_256FB118C((uint64_t)v16, (uint64_t)v15);
    uint64_t v8 = (void *)(a2 + 16);
    swift_beginAccess();
    uint64_t v9 = *(void **)(a2 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a2 + 16) = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v9 = sub_256FA62C4(0, v9[2] + 1, 1, v9);
      *uint64_t v8 = v9;
    }
    unint64_t v12 = v9[2];
    unint64_t v11 = v9[3];
    if (v12 >= v11 >> 1)
    {
      uint64_t v9 = sub_256FA62C4((void *)(v11 > 1), v12 + 1, 1, v9);
      *uint64_t v8 = v9;
    }
    _OWORD v9[2] = v12 + 1;
    sub_256F9ABF4(v15, &v9[4 * v12 + 4]);
    swift_endAccess();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    sub_256F92DE8();
    swift_allocError();
    *uint64_t v14 = 55;
    return swift_willThrow();
  }
}

double sub_256FF047C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedMutableArray<A>.attribute(for:)(a1, a2, a3);
}

uint64_t sub_256FF04A4(uint64_t a1, void (*a2)(void))
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FF0508()
{
  return sub_256FF0538(&qword_269FDCB60, &qword_269FDCC60, &qword_269FDCC68, (uint64_t (*)(void))sub_256FEB3CC);
}

uint64_t sub_256FF0538(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  *(void *)&long long v17 = __swift_instantiateConcreteTypeFromMangledName(a1);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = sub_25704A7D0();
  uint64_t v9 = v8;
  if (qword_269FDC660 != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v10 = off_269FDCF70;
  if (*((void *)off_269FDCF70 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_256FED050(v7, v9);
    if (v12)
    {
      sub_256FB118C(v10[7] + 32 * v11, (uint64_t)&v17);
    }
    else
    {
      long long v17 = 0u;
      long long v18 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
  }
  swift_endAccess();
  if (!*((void *)&v18 + 1))
  {
    sub_256FF0EF4((uint64_t)&v17);
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = a4(MEMORY[0x263F8EE78]);
    *((void *)&v18 + 1) = v14;
    *(void *)&long long v17 = v13;
    swift_beginAccess();
    swift_retain();
    sub_256FEACE4((uint64_t)&v17, v7, v9);
    swift_endAccess();
    return v13;
  }
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_256FF0708()
{
  *(void *)&long long v10 = type metadata accessor for MLXArray();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCC70);
  uint64_t v0 = sub_25704A7D0();
  uint64_t v2 = v1;
  if (qword_269FDC660 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = off_269FDCF70;
  if (*((void *)off_269FDCF70 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = sub_256FED050(v0, v2);
    if (v5)
    {
      sub_256FB118C(v3[7] + 32 * v4, (uint64_t)&v10);
    }
    else
    {
      long long v10 = 0u;
      long long v11 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  swift_endAccess();
  if (!*((void *)&v11 + 1))
  {
    sub_256FF0EF4((uint64_t)&v10);
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCC78);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCC78);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_256FEB3E4(MEMORY[0x263F8EE78]);
    *((void *)&v11 + 1) = v7;
    *(void *)&long long v10 = v6;
    swift_beginAccess();
    swift_retain();
    sub_256FEACE4((uint64_t)&v10, v0, v2);
    swift_endAccess();
    return v6;
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_256FF08D0()
{
  *(void *)&long long v10 = MEMORY[0x263F8D310];
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCC80);
  uint64_t v0 = sub_25704A7D0();
  uint64_t v2 = v1;
  if (qword_269FDC660 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = off_269FDCF70;
  if (*((void *)off_269FDCF70 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = sub_256FED050(v0, v2);
    if (v5)
    {
      sub_256FB118C(v3[7] + 32 * v4, (uint64_t)&v10);
    }
    else
    {
      long long v10 = 0u;
      long long v11 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  swift_endAccess();
  if (!*((void *)&v11 + 1))
  {
    sub_256FF0EF4((uint64_t)&v10);
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCC88);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCC88);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_256FEB3F0(MEMORY[0x263F8EE78]);
    *((void *)&v11 + 1) = v7;
    *(void *)&long long v10 = v6;
    swift_beginAccess();
    swift_retain();
    sub_256FEACE4((uint64_t)&v10, v0, v2);
    swift_endAccess();
    return v6;
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_256FF0A98(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_256FF0AEC()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_256FF0B20()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

void sub_256FF0B58(uint64_t a1, int64_t a2)
{
  int64_t v3 = a2;
  uint64_t v5 = v2 + 2;
  uint64_t v6 = *v2;
  if (a2 < 0)
  {
    swift_beginAccess();
    uint64_t v7 = *(void *)(v6 + 80);
    uint64_t v13 = swift_bridgeObjectRetain();
    uint64_t v14 = MEMORY[0x25A2B0B50](v13, v7);
    swift_bridgeObjectRelease();
    BOOL v15 = __OFADD__(v14, v3);
    v3 += v14;
    if (!v15)
    {
      swift_beginAccess();
      sub_25704AB00();
      sub_25704AA70();
      uint64_t v16 = *v5;
      sub_256FF0A98(v3, v16);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v12 = v16 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v12 = v16;
      }
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 80);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = MEMORY[0x25A2B0B50](v8, v7);
  swift_bridgeObjectRelease();
  if (v9 > v3)
  {
    swift_beginAccess();
    sub_25704AB00();
    sub_25704AA70();
    uint64_t v10 = *v5;
    sub_256FF0A98(v3, v10);
    char v11 = _swift_isClassOrObjCExistentialType();
    uint64_t v12 = v10 & 0xFFFFFFFFFFFFFF8;
    if ((v11 & 1) == 0) {
      uint64_t v12 = v10;
    }
LABEL_5:
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v12+ ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80))+ *(void *)(*(void *)(v7 - 8) + 72) * v3, a1, v7);
    swift_endAccess();
    return;
  }
  if (qword_269FDC650 != -1) {
LABEL_16:
  }
    swift_once();
  uint64_t v18 = sub_25704A550();
  __swift_project_value_buffer(v18, (uint64_t)qword_269FDD648);
  swift_retain();
  char v19 = sub_25704A530();
  os_log_type_t v20 = sub_25704AC60();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 134218240;
    sub_25704AC90();
    *(_WORD *)(v21 + 12) = 2048;
    swift_beginAccess();
    uint64_t v22 = swift_bridgeObjectRetain();
    MEMORY[0x25A2B0B50](v22, v7);
    swift_bridgeObjectRelease();
    sub_25704AC90();
    swift_release();
    _os_log_impl(&dword_256D65000, v19, v20, "SharedMutableArray> Index out of range %ld >= %ld", (uint8_t *)v21, 0x16u);
    MEMORY[0x25A2B1FA0](v21, -1, -1);
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_256FF0EF4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_256FF0F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_256FF02FC(a1, v2, a2);
}

uint64_t sub_256FF0F70()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_256FF0FA8(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void))(v1 + 16);
  sub_257037378(a1);
  v2();
  return swift_bridgeObjectRelease();
}

uint64_t _s8Morpheus18SharedMutableArrayCAAypRszlE3has9attributeSbSS_tF_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_257004EB8((uint64_t)&unk_270638638);
  char v5 = 1;
  swift_arrayDestroy();
  char v6 = sub_257002DB0(a1, a2, v4);
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = sub_256FF0538(&qword_269FDCAE8, &qword_269FDCC90, &qword_269FDCC98, (uint64_t (*)(void))sub_256FEB3D8);
    swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v8 + 16))
    {
      swift_bridgeObjectRetain();
      sub_256FED050(a1, a2);
      char v5 = v9;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v5 = 0;
    }
    swift_bridgeObjectRelease();
  }
  return v5 & 1;
}

uint64_t sub_256FF112C()
{
  return swift_getWitnessTable();
}

uint64_t sub_256FF1148()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t sub_256FF1154@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_256FF0AEC();
  return swift_bridgeObjectRetain();
}

uint64_t sub_256FF1190()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return sub_256FEEEC0(v0);
}

uint64_t sub_256FF11BC()
{
  return 8;
}

void *sub_256FF11C8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_256FF11D4()
{
  return sub_256FEF044();
}

void sub_256FF11FC(uint64_t a1, uint64_t a2, int64_t *a3)
{
}

uint64_t sub_256FF1228()
{
  return 8;
}

uint64_t sub_256FF1238()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SharedMutableArray()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for SharedMutableArray(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SharedMutableArray);
}

uint64_t dispatch thunk of SharedMutableArray.makeIterator()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SharedMutableArray.underestimatedCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SharedMutableArray.array.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SharedMutableArray.__allocating_init(array:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of SharedMutableArray.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SharedMutableArray.index(after:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SharedMutableArray.startIndex.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SharedMutableArray.endIndex.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SharedMutableArray.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SharedMutableArray.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SharedMutableArray.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *int64_t v3 = v12;
      }
      else
      {
        char v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *int64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t Dictionary<>.get(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_25704AC70();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v15 - v10;
  sub_256FB118C(a1, (uint64_t)v18);
  if (!swift_dynamicCast())
  {
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t result = sub_256FF184C((uint64_t)&v15);
    goto LABEL_5;
  }
  v19[0] = v15;
  v19[1] = v16;
  uint64_t v20 = v17;
  MEMORY[0x25A2B06F0](v19, a2, MEMORY[0x263F8DB68], a3, MEMORY[0x263F8DB70]);
  uint64_t v12 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    sub_256F9AC98((uint64_t)v19);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_5:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    return result;
  }
  *(void *)(a4 + 24) = a3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a4);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_0, v11, a3);
  return sub_256F9AC98((uint64_t)v19);
}

uint64_t sub_256FF184C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_256FF18AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Dictionary<>.get(_:)(a1, *v3, *(void *)(a2 + 24), a3);
}

uint64_t Array.get(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v9);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    if (v8 < 0 && (uint64_t result = MEMORY[0x25A2B0B50](a2, a3), __OFADD__(result, v8)))
    {
      __break(1u);
    }
    else
    {
      *(void *)(a4 + 24) = a3;
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)a4);
      return sub_25704AB30();
    }
  }
  else
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t sub_256FF1970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Array.get(_:)(a1, *v3, *(void *)(a2 + 16), a3);
}

uint64_t dispatch thunk of Subscriptable.get(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

unsigned char *storeEnumTagSinglePayload for ExprContext(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FF1A60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExprContext()
{
  return &type metadata for ExprContext;
}

uint64_t sub_256FF1A98(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x65756C6176;
    }
    else {
      uint64_t v3 = 7894115;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0xE300000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x65756C6176;
      }
      else {
        uint64_t v6 = 7894115;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0xE300000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x6563696C73;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE500000000000000;
  if (v3 != 0x6563696C73)
  {
LABEL_21:
    char v8 = sub_25704B1E0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_256FF1B94(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x65756C6176;
    }
    else {
      uint64_t v3 = 7894115;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0xE300000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x65756C6176;
      }
      else {
        uint64_t v6 = 7894115;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0xE300000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1920234593;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1920234593)
  {
LABEL_21:
    char v8 = sub_25704B1E0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_256FF1C8C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x65756C6176;
    }
    else {
      uint64_t v3 = 0x6F746172656E6567;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0xEA00000000007372;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x65756C6176;
      }
      else {
        uint64_t v6 = 0x6F746172656E6567;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0xEA00000000007372;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7955819;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE300000000000000;
  if (v3 != 7955819)
  {
LABEL_21:
    char v8 = sub_25704B1E0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_256FF1D98(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x70795465756C6176;
  }
  else {
    uint64_t v3 = 0x65756C6176;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE900000000000065;
  }
  if (a2) {
    uint64_t v5 = 0x70795465756C6176;
  }
  else {
    uint64_t v5 = 0x65756C6176;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000065;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF1E40(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 2036625250;
  }
  else {
    uint64_t v3 = 0x6D614E7373616C63;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000065;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 2036625250;
  }
  else {
    uint64_t v5 = 0x6D614E7373616C63;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE900000000000065;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF1EE4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 7894115;
  }
  else {
    uint64_t v3 = 0x65756C6176;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v5 = 7894115;
  }
  else {
    uint64_t v5 = 0x65756C6176;
  }
  if (a2) {
    unint64_t v6 = 0xE300000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF1F80(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6F746172656E6567;
  }
  else {
    uint64_t v3 = 7629925;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xEA00000000007372;
  }
  if (a2) {
    uint64_t v5 = 0x6F746172656E6567;
  }
  else {
    uint64_t v5 = 7629925;
  }
  if (a2) {
    unint64_t v6 = 0xEA00000000007372;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF2024(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x65756C6176;
  }
  else {
    uint64_t v3 = 6779489;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x65756C6176;
  }
  else {
    uint64_t v5 = 6779489;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF20C0(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2 = 0x6F697469646E6F63;
  unint64_t v3 = 0xE90000000000006ELL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x6B636F6C426669;
    }
    else {
      uint64_t v5 = 0x636F6C4265736C65;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE700000000000000;
    }
    else {
      unint64_t v6 = 0xE90000000000006BLL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x6F697469646E6F63;
  unint64_t v6 = 0xE90000000000006ELL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v2 = 0x6B636F6C426669;
    }
    else {
      uint64_t v2 = 0x636F6C4265736C65;
    }
    if (v7 == 1) {
      unint64_t v3 = 0xE700000000000000;
    }
    else {
      unint64_t v3 = 0xE90000000000006BLL;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_256FF21D4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7365756C6176;
  }
  else {
    uint64_t v3 = 28783;
  }
  if (v2) {
    unint64_t v4 = 0xE200000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x7365756C6176;
  }
  else {
    uint64_t v5 = 28783;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE200000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF226C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x646E617265706FLL;
  }
  else {
    uint64_t v3 = 28783;
  }
  if (v2) {
    unint64_t v4 = 0xE200000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x646E617265706FLL;
  }
  else {
    uint64_t v5 = 28783;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE200000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF2308(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1952867692;
    }
    else {
      uint64_t v3 = 0x7468676972;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1952867692;
      }
      else {
        uint64_t v6 = 0x7468676972;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE200000000000000;
    uint64_t v3 = 28783;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE200000000000000;
  if (v3 != 28783)
  {
LABEL_21:
    char v8 = sub_25704B1E0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_256FF23F4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 7894115;
  }
  else {
    uint64_t v3 = 25705;
  }
  if (v2) {
    unint64_t v4 = 0xE200000000000000;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v5 = 7894115;
  }
  else {
    uint64_t v5 = 25705;
  }
  if (a2) {
    unint64_t v6 = 0xE300000000000000;
  }
  else {
    unint64_t v6 = 0xE200000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF2488(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x746567726174;
    }
    else {
      uint64_t v3 = 2036625250;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE600000000000000;
    }
    else {
      unint64_t v4 = 0xE400000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x746567726174;
      }
      else {
        uint64_t v6 = 2036625250;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE600000000000000;
      }
      else {
        unint64_t v7 = 0xE400000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    uint64_t v3 = 0x65636E6575716573;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x65636E6575716573)
  {
LABEL_21:
    char v8 = sub_25704B1E0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_256FF258C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1936159329;
    }
    else {
      uint64_t v3 = 0x7364726F7779656BLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1936159329;
      }
      else {
        uint64_t v6 = 0x7364726F7779656BLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE800000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    uint64_t v3 = 0x6E6F6974636E7566;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x6E6F6974636E7566)
  {
LABEL_21:
    char v8 = sub_25704B1E0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_256FF2698(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6F6E656E696CLL;
  }
  else {
    uint64_t v3 = 1701869940;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6F6E656E696CLL;
  }
  else {
    uint64_t v5 = 1701869940;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF2734(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 27241;
  }
  else {
    uint64_t v2 = 31096;
  }
  if (a2) {
    uint64_t v3 = 27241;
  }
  else {
    uint64_t v3 = 31096;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_256FF279C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x69737265766E6F63;
  }
  else {
    uint64_t v3 = 0x65756C6176;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xEA00000000006E6FLL;
  }
  if (a2) {
    uint64_t v5 = 0x69737265766E6F63;
  }
  else {
    uint64_t v5 = 0x65756C6176;
  }
  if (a2) {
    unint64_t v6 = 0xEA00000000006E6FLL;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF2844(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x746567726174;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x746567726174;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1919251561;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 7562857;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x636E7973417369;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1919251561) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 7562857;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      if (v5 == 0x636E7973417369) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_25704B1E0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_256FF29AC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC000000656D614ELL;
  uint64_t v3 = 0x6E6F6974636E7566;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E6F6974636E7566;
  unint64_t v6 = 0xEC000000656D614ELL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1936159329;
      break;
    case 2:
      uint64_t v5 = 0x61796C6E6F736F70;
      unint64_t v6 = 0xEB00000000736772;
      break;
    case 3:
      uint64_t v5 = 0x7261796C6E6F776BLL;
      unint64_t v6 = 0xEA00000000007367;
      break;
    case 4:
      uint64_t v5 = 0x6C7561666544776BLL;
      unint64_t v6 = 0xEA00000000007374;
      break;
    case 5:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v5 = 0x73746C7561666564;
      break;
    case 6:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 2036625250;
      break;
    case 7:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v5 = 0x677261726176;
      break;
    case 8:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x677261776BLL;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      if (v5 == 1936159329) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      unint64_t v2 = 0xEB00000000736772;
      if (v5 != 0x61796C6E6F736F70) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      unint64_t v2 = 0xEA00000000007367;
      if (v5 != 0x7261796C6E6F776BLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v2 = 0xEA00000000007374;
      if (v5 != 0x6C7561666544776BLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v2 = 0xE800000000000000;
      if (v5 != 0x73746C7561666564) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v2 = 0xE400000000000000;
      if (v5 != 2036625250) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x677261726176;
      goto LABEL_24;
    case 8:
      unint64_t v2 = 0xE500000000000000;
      if (v5 != 0x677261776BLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v3) {
        goto LABEL_28;
      }
LABEL_25:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_28:
      }
        char v7 = sub_25704B1E0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_256FF2C80(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x65726F7473;
    }
    else {
      uint64_t v3 = 7103844;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0xE300000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x65726F7473;
      }
      else {
        uint64_t v6 = 7103844;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0xE300000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1684107116;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1684107116)
  {
LABEL_21:
    char v8 = sub_25704B1E0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_256FF2D74(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 7696487;
  }
  else {
    uint64_t v2 = 7696483;
  }
  if (a2) {
    uint64_t v3 = 7696487;
  }
  else {
    uint64_t v3 = 7696483;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_256FF2DE0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 7565423;
    }
    else {
      uint64_t v3 = 0x74617261706D6F63;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE300000000000000;
    }
    else {
      unint64_t v4 = 0xEB0000000073726FLL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 7565423;
      }
      else {
        uint64_t v6 = 0x74617261706D6F63;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE300000000000000;
      }
      else {
        unint64_t v7 = 0xEB0000000073726FLL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1952867692;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1952867692)
  {
LABEL_21:
    char v8 = sub_25704B1E0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_256FF2EEC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 7563378;
  }
  else {
    uint64_t v3 = 0x746567726174;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v5 = 7563378;
  }
  else {
    uint64_t v5 = 0x746567726174;
  }
  if (a2) {
    unint64_t v6 = 0xE300000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF2F88(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 1668183398;
  }
  else {
    uint64_t v3 = 0x6B636F6C62;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 1668183398;
  }
  else {
    uint64_t v5 = 0x6B636F6C62;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF3024(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1885697139;
    }
    else {
      uint64_t v3 = 0x7265707075;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1885697139;
      }
      else {
        uint64_t v6 = 0x7265707075;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x7265776F6CLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE500000000000000;
  if (v3 != 0x7265776F6CLL)
  {
LABEL_21:
    char v8 = sub_25704B1E0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_256FF3120(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 7894115;
  }
  else {
    uint64_t v3 = 0x7961727261;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v5 = 7894115;
  }
  else {
    uint64_t v5 = 0x7961727261;
  }
  if (a2) {
    unint64_t v6 = 0xE300000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF31BC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7365756C6176;
  }
  else {
    uint64_t v3 = 1937335659;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x7365756C6176;
  }
  else {
    uint64_t v5 = 1937335659;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_256FF3258(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF2C80(*a1, *a2);
}

uint64_t sub_256FF3264()
{
  return sub_25704B2B0();
}

uint64_t sub_256FF32F4()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FF3370()
{
  return sub_25704B2B0();
}

uint64_t sub_256FF33FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256FF3580();
  *a1 = result;
  return result;
}

void sub_256FF342C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x65726F7473;
  if (v2 != 1)
  {
    uint64_t v5 = 7103844;
    unint64_t v4 = 0xE300000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1684107116;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_256FF3478()
{
  return sub_25704AA00();
}

uint64_t sub_256FF34D8()
{
  return sub_25704A9F0();
}

unint64_t sub_256FF352C()
{
  unint64_t result = qword_269FDCCA0;
  if (!qword_269FDCCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCCA0);
  }
  return result;
}

uint64_t sub_256FF3580()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

unint64_t sub_256FF35CC()
{
  unint64_t result = qword_269FDCCA8;
  if (!qword_269FDCCA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCCA8);
  }
  return result;
}

uint64_t sub_256FF3620(char *a1, char *a2)
{
  return sub_256FF31BC(*a1, *a2);
}

uint64_t sub_256FF362C()
{
  return sub_25704B2B0();
}

uint64_t sub_256FF36A4()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FF3708()
{
  return sub_25704B2B0();
}

uint64_t sub_256FF377C@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_256FF37DC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1937335659;
  if (*v1) {
    uint64_t v2 = 0x7365756C6176;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_256FF3810()
{
  if (*v0) {
    return 0x7365756C6176;
  }
  else {
    return 1937335659;
  }
}

uint64_t sub_256FF3840@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_256FF38A4(uint64_t a1)
{
  unint64_t v2 = sub_256FF4738();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256FF38E0(uint64_t a1)
{
  unint64_t v2 = sub_256FF4738();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256FF391C(void *a1)
{
  return sub_256FF3968(a1);
}

uint64_t sub_256FF3968(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCCB8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (void *)((char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_256FF4738();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for MorpheusDict();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v1 + 40) = sub_25703C518(v8, 0);
    *(void *)(v1 + 48) = sub_25703C518(v8, 1);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v11);
    uint64_t v3 = sub_257046164(v11);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_256FF3B98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  swift_retain();
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_256FF449C(v5, v3);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    swift_retain();
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = sub_256FF40BC(v8, v3);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v12 = sub_256FEAEFC(MEMORY[0x263F8EE78]);
    MEMORY[0x270FA5388](v12);
    sub_256FF3F94(v6, v9, (void (*)(unsigned char *, unsigned char *))sub_256FF436C);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB60);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = MEMORY[0x263F8EE80];
    swift_beginAccess();
    *(void *)(v11 + 16) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 24) = v10;
    *(void *)a1 = v11;
    *(unsigned char *)(a1 + 32) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_256FF3D4C(uint64_t a1, uint64_t a2)
{
  sub_256FF4374(a1, (uint64_t)&v5);
  if (!*((void *)&v6 + 1)) {
    return sub_256FB11E8((uint64_t)&v5, &qword_269FDC6F0);
  }
  v8[0] = v5;
  v8[1] = v6;
  uint64_t v9 = v7;
  sub_256F9AC04((uint64_t)v8, (uint64_t)&v5);
  sub_25702B5F8(a2, v4);
  sub_256FEAC24((uint64_t)v4, (uint64_t)&v5);
  return sub_256F9AC98((uint64_t)v8);
}

uint64_t sub_256FF3DDC()
{
  sub_25704ADF0();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D0);
  MEMORY[0x25A2B0AA0](v1, v2);
  sub_25704A850();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25704A850();
  uint64_t v3 = swift_bridgeObjectRetain();
  MEMORY[0x25A2B0AA0](v3, v2);
  sub_25704A850();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25704A850();
  return 0x79656B2874636964;
}

uint64_t sub_256FF3EF8()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FF3F28()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t type metadata accessor for MorpheusDict()
{
  return self;
}

uint64_t sub_256FF3F94(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, unsigned char *))
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v14 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = v14 + 32;
    uint64_t v8 = a2 + 32;
    while (1)
    {
      uint64_t result = sub_256FF4374(v7, (uint64_t)v11);
      unint64_t v10 = *(void *)(a2 + 16);
      if (v6 == v10)
      {
        sub_256FB11E8((uint64_t)v11, &qword_269FDC6F0);
        goto LABEL_8;
      }
      if (v6 >= v10) {
        break;
      }
      ++v6;
      sub_256FF4438((uint64_t)v11, (uint64_t)v12, &qword_269FDC6F0);
      sub_256FB118C(v8, (uint64_t)v13);
      a3(v12, v13);
      sub_256FB11E8((uint64_t)v12, &qword_269FDCCB0);
      v7 += 40;
      v8 += 32;
      if (v5 == v6) {
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_256FF40BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    sub_256F90A58(0, v4, 0);
    uint64_t v5 = v28;
    uint64_t v19 = a2 + 24;
    uint64_t v8 = (uint64_t *)(a1 + 40);
    do
    {
      int64_t v20 = v4;
      uint64_t v21 = v5;
      uint64_t v5 = *(v8 - 1);
      uint64_t v9 = *v8;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = MEMORY[0x25A2B2020](v19);
      uint64_t v12 = a2;
      uint64_t v13 = *(void *)(a2 + 32);
      uint64_t v14 = v3;
      long long v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain();
      v15(v11, v13, ObjectType, v9);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 64))(v25, ObjectType, v9);
      uint64_t v3 = v14;
      if (v14)
      {
        swift_release();
        swift_unknownObjectRelease();
        return v5;
      }
      sub_256FF43DC((uint64_t)v25, (uint64_t)v22);
      if (v23)
      {
        sub_256FEA220((uint64_t)v22);
        sub_256FF43DC((uint64_t)v25, (uint64_t)v22);
        a2 = v12;
        if (v23 == 1)
        {
          sub_256FF4438((uint64_t)v22, (uint64_t)v24, &qword_269FDC6E0);
          sub_256FF4438((uint64_t)v24, (uint64_t)v22, &qword_269FDC6E0);
          __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
          if (swift_dynamicCast()) {
            goto LABEL_12;
          }
        }
        else
        {
          sub_256FEA220((uint64_t)v22);
        }
      }
      else
      {
        sub_256FF4438((uint64_t)v22, (uint64_t)v24, &qword_269FDC6E0);
        sub_256FF4438((uint64_t)v24, (uint64_t)v22, &qword_269FDC6E0);
        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
        a2 = v12;
        if (swift_dynamicCast()) {
          goto LABEL_12;
        }
      }
      memset(v26, 0, sizeof(v26));
LABEL_12:
      sub_256FEA220((uint64_t)v25);
      sub_25702BB34((uint64_t)v26, v27);
      sub_256FB11E8((uint64_t)v26, &qword_269FDC6E0);
      swift_unknownObjectRelease();
      uint64_t v5 = v21;
      uint64_t v28 = v21;
      unint64_t v17 = *(void *)(v21 + 16);
      unint64_t v16 = *(void *)(v21 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_256F90A58(v16 > 1, v17 + 1, 1);
        uint64_t v5 = v28;
      }
      *(void *)(v5 + 16) = v17 + 1;
      sub_256F9ABF4(v27, (_OWORD *)(v5 + 32 * v17 + 32));
      v8 += 2;
      int64_t v4 = v20 - 1;
    }
    while (v20 != 1);
  }
  return v5;
}

uint64_t sub_256FF436C(uint64_t a1, uint64_t a2)
{
  return sub_256FF3D4C(a1, a2);
}

uint64_t sub_256FF4374(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_256FF43DC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_256FF4438(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_256FF449C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    sub_256F90B98(0, v4, 0);
    uint64_t v5 = v28;
    uint64_t v18 = a2 + 24;
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      int64_t v19 = v4;
      uint64_t v20 = v5;
      uint64_t v9 = *i;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = MEMORY[0x25A2B2020](v18);
      uint64_t v5 = a2;
      uint64_t v12 = *(void *)(a2 + 32);
      uint64_t v13 = v3;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain();
      v14(v11, v12, ObjectType, v9);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 64))(v24, ObjectType, v9);
      uint64_t v3 = v13;
      if (v13)
      {
        swift_release();
        swift_unknownObjectRelease();
        return v5;
      }
      sub_256FF43DC((uint64_t)v24, (uint64_t)v21);
      if (v22) {
        break;
      }
      sub_256FF4438((uint64_t)v21, (uint64_t)v23, &qword_269FDC6E0);
      sub_256FF4438((uint64_t)v23, (uint64_t)v21, &qword_269FDC6E0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
      a2 = v5;
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_9;
      }
LABEL_11:
      uint64_t v5 = v20;
      sub_256FEA220((uint64_t)v24);
      swift_unknownObjectRelease();
      uint64_t v28 = v20;
      unint64_t v16 = *(void *)(v20 + 16);
      unint64_t v15 = *(void *)(v20 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_256F90B98(v15 > 1, v16 + 1, 1);
        uint64_t v5 = v28;
      }
      *(void *)(v5 + 16) = v16 + 1;
      sub_256FF4438((uint64_t)&v25, v5 + 40 * v16 + 32, &qword_269FDC6F0);
      int64_t v4 = v19 - 1;
      if (v19 == 1) {
        return v5;
      }
    }
    sub_256FEA220((uint64_t)v21);
    sub_256FF43DC((uint64_t)v24, (uint64_t)v21);
    a2 = v5;
    if (v22 != 1)
    {
      sub_256FEA220((uint64_t)v21);
      long long v25 = 0u;
      long long v26 = 0u;
      uint64_t v27 = 0;
      goto LABEL_11;
    }
    sub_256FF4438((uint64_t)v21, (uint64_t)v23, &qword_269FDC6E0);
    sub_256FF4438((uint64_t)v23, (uint64_t)v21, &qword_269FDC6E0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
    if (swift_dynamicCast()) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    goto LABEL_11;
  }
  return v5;
}

unint64_t sub_256FF4738()
{
  unint64_t result = qword_269FDCCC0;
  if (!qword_269FDCCC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCCC0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MorpheusDict.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FF4858);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MorpheusDict.CodingKeys()
{
  return &type metadata for MorpheusDict.CodingKeys;
}

unint64_t sub_256FF4894()
{
  unint64_t result = qword_269FDCCC8;
  if (!qword_269FDCCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCCC8);
  }
  return result;
}

unint64_t sub_256FF48EC()
{
  unint64_t result = qword_269FDCCD0;
  if (!qword_269FDCCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCCD0);
  }
  return result;
}

unint64_t sub_256FF4944()
{
  unint64_t result = qword_269FDCCD8;
  if (!qword_269FDCCD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCCD8);
  }
  return result;
}

uint64_t sub_256FF4998()
{
  return 1;
}

uint64_t sub_256FF49A0()
{
  return sub_25704B2B0();
}

uint64_t sub_256FF49F0()
{
  return sub_25704A810();
}

uint64_t sub_256FF4A04()
{
  return sub_25704B2B0();
}

uint64_t sub_256FF4A50@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_256FF4AA4(void *a1@<X8>)
{
  *a1 = 0x65756C6176;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_256FF4ABC()
{
  return 0x65756C6176;
}

uint64_t sub_256FF4AD0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_256FF4B28(uint64_t a1)
{
  unint64_t v2 = sub_256FF514C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256FF4B64(uint64_t a1)
{
  unint64_t v2 = sub_256FF514C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256FF4BA0(void *a1)
{
  return sub_256FF4BEC(a1);
}

uint64_t sub_256FF4BEC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCCE0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_256FF514C();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_unknownObjectRelease();
    type metadata accessor for Return();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v1 + 40) = sub_257032734((uint64_t)v8);
    *(void *)(v1 + 48) = v9;
    swift_release();
    swift_unknownObjectRelease();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

void sub_256FF4DD0(uint64_t a1@<X8>)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  unsigned char *v18;
  void v19[4];
  char v20;
  uint64_t v21;

  uint64_t v3 = v2;
  unsigned int v4 = v1;
  if (!v1[5]) {
    goto LABEL_5;
  }
  uint64_t v6 = v1[6];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v9 = v1[4];
  unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  v10(v8, v9, ObjectType, v6);
  swift_unknownObjectRelease();
  if (!v1[5])
  {
LABEL_5:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
LABEL_6:
    *(unsigned char *)(a1 + 32) = 1;
    return;
  }
  uint64_t v11 = v1[6];
  uint64_t v12 = swift_getObjectType();
  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 64);
  swift_unknownObjectRetain();
  v13(v19, v12, v11);
  if (v3)
  {
    swift_unknownObjectRelease();
    return;
  }
  if (!v20 || v20 == 1)
  {
    swift_unknownObjectRelease();
    sub_256FEEC3C((uint64_t)v19, a1);
    goto LABEL_6;
  }
  if (qword_269FDC650 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_25704A550();
  __swift_project_value_buffer(v14, (uint64_t)qword_269FDD648);
  swift_retain();
  unint64_t v15 = sub_25704A530();
  unint64_t v16 = sub_25704AC60();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 134217984;
    uint64_t v21 = v4[2];
    sub_25704AC90();
    swift_release();
    _os_log_impl(&dword_256D65000, v15, v16, "Return> Invalid return value. line %ld", v17, 0xCu);
    MEMORY[0x25A2B1FA0](v17, -1, -1);
  }
  else
  {

    swift_release();
  }
  sub_256F92DE8();
  swift_allocError();
  *uint64_t v18 = 39;
  swift_willThrow();
  swift_unknownObjectRelease();
  sub_256FEA220((uint64_t)v19);
}

uint64_t sub_256FF5058()
{
  if (*(void *)(v0 + 40))
  {
    swift_getObjectType();
    sub_25704B150();
  }
  sub_25704A850();
  swift_bridgeObjectRelease();
  return 0x206E7275746572;
}

uint64_t sub_256FF50E0()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_256FF50E8()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t type metadata accessor for Return()
{
  return self;
}

unint64_t sub_256FF514C()
{
  unint64_t result = qword_269FDCCE8;
  if (!qword_269FDCCE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCCE8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Return.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for Return.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x256FF5290);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_256FF52B8()
{
  return 0;
}

ValueMetadata *type metadata accessor for Return.CodingKeys()
{
  return &type metadata for Return.CodingKeys;
}

unint64_t sub_256FF52D4()
{
  unint64_t result = qword_269FDCCF0;
  if (!qword_269FDCCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCCF0);
  }
  return result;
}

unint64_t sub_256FF532C()
{
  unint64_t result = qword_269FDCCF8;
  if (!qword_269FDCCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCCF8);
  }
  return result;
}

unint64_t sub_256FF5384()
{
  unint64_t result = qword_269FDCD00;
  if (!qword_269FDCD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCD00);
  }
  return result;
}

double sub_256FF53D8@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 2;
  return result;
}

uint64_t sub_256FF53EC()
{
  return 0x65756E69746E6F63;
}

uint64_t sub_256FF5404(uint64_t a1)
{
  swift_allocObject();
  sub_256F92F24(a1, (uint64_t)v4);
  uint64_t v2 = sub_257046164(v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v2;
}

uint64_t sub_256FF547C()
{
  sub_256F92F88(v0 + 24);
  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t type metadata accessor for Continue()
{
  return self;
}

uint64_t sub_256FF54D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF1A98(*a1, *a2);
}

uint64_t sub_256FF54E4()
{
  return sub_25704B2B0();
}

uint64_t sub_256FF5578()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FF55F8()
{
  return sub_25704B2B0();
}

uint64_t sub_256FF5688@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256FF6AE8();
  *a1 = result;
  return result;
}

void sub_256FF56B8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x65756C6176;
  if (v2 != 1)
  {
    uint64_t v5 = 7894115;
    unint64_t v4 = 0xE300000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6563696C73;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_256FF5708()
{
  uint64_t v1 = 0x65756C6176;
  if (*v0 != 1) {
    uint64_t v1 = 7894115;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6563696C73;
  }
}

uint64_t sub_256FF5754@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256FF6AE8();
  *a1 = result;
  return result;
}

uint64_t sub_256FF577C(uint64_t a1)
{
  unint64_t v2 = sub_256FF6834();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256FF57B8(uint64_t a1)
{
  unint64_t v2 = sub_256FF6834();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256FF57F4(void *a1)
{
  return sub_256FF5840(a1);
}

uint64_t sub_256FF5840(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD20);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_256FF6834();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Subscript();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v1 + 40) = sub_257032754((uint64_t)v8, 0);
    *(void *)(v1 + 48) = v10;
    *(void *)(v1 + 56) = sub_257032754((uint64_t)v8, 1);
    *(void *)(v1 + 64) = v11;
    char v14 = 2;
    sub_256FF6888();
    sub_25704B130();
    *(unsigned char *)(v1 + 72) = v13[0];
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v13);
    uint64_t v3 = sub_257046164(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_256FF5AE8@<X0>(uint64_t a1@<X8>)
{
  void (*v17)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(long long *__return_ptr, uint64_t, uint64_t);
  unsigned char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  char *v64;
  char v65;
  unsigned char *v66;
  unsigned char v67[32];
  long long v68;
  uint64_t v69;
  long long v70;
  long long v71;
  uint64_t v72;
  long long v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[2];
  uint64_t v77;

  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v77 = a1;
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = MEMORY[0x25A2B2020](v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = MEMORY[0x25A2B2020](v1 + 24);
  uint64_t v13 = *(void *)(v1 + 32);
  char v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  v14(v12, v13, v11, v10);
  swift_unknownObjectRelease();
  uint64_t v15 = *(void *)(v1 + 48);
  uint64_t v16 = swift_getObjectType();
  unint64_t v17 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v15 + 64);
  swift_unknownObjectRetain();
  v17(&v73, v16, v15);
  if (v3) {
    return swift_unknownObjectRelease();
  }
  int64_t v19 = v77;
  swift_unknownObjectRelease();
  sub_257042F14(&v70);
  sub_256FEA220((uint64_t)&v73);
  if (*((void *)&v71 + 1))
  {
    sub_256F9ABF4(&v70, v76);
    if (*(unsigned char *)(v1 + 72))
    {
      if (*(unsigned char *)(v1 + 72) != 1)
      {
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
        *(unsigned char *)(v19 + 32) = 0;
        *(_OWORD *)int64_t v19 = 0u;
        *(_OWORD *)(v19 + 16) = 0u;
        return result;
      }
      uint64_t v20 = *(void *)(v1 + 64);
      uint64_t v21 = swift_getObjectType();
      char v22 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v20 + 64);
      swift_unknownObjectRetain();
      v22(&v68, v21, v20);
      swift_unknownObjectRelease();
      sub_257042FD8((uint64_t)&v70);
      sub_256FEA220((uint64_t)&v68);
      if (*((void *)&v71 + 1))
      {
        sub_256FA81EC(&v70, (uint64_t)&v73);
        *(void *)(v19 + 24) = &type metadata for Store;
        char v23 = swift_allocObject();
        *(void *)int64_t v19 = v23;
        sub_256FA81EC(&v73, v23 + 16);
        uint64_t result = (uint64_t)sub_256F9ABF4(v76, (_OWORD *)(v23 + 56));
        *(unsigned char *)(v19 + 32) = 0;
        return result;
      }
      sub_256FB11E8((uint64_t)&v70, &qword_269FDCD08);
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      unint64_t v39 = sub_25704A550();
      __swift_project_value_buffer(v39, (uint64_t)qword_269FDD648);
      swift_retain_n();
      uint64_t v40 = sub_25704A530();
      BOOL v41 = sub_25704AC60();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = swift_slowAlloc();
        char v43 = swift_slowAlloc();
        *(void *)&char v73 = v43;
        *(_DWORD *)uint64_t v42 = 136315394;
        unint64_t v44 = *(void *)(v1 + 56);
        swift_getObjectType();
        *(void *)&uint64_t v70 = v44;
        char v45 = sub_25704B150();
        *(void *)&uint64_t v70 = sub_256FFE924(v45, v46, (uint64_t *)&v73);
        sub_25704AC90();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2048;
        uint64_t v47 = *(void *)(v4 + 16);
        swift_release();
        *(void *)&uint64_t v70 = v47;
        sub_25704AC90();
        swift_release();
        _os_log_impl(&dword_256D65000, v40, v41, "Subscript> Value %s is not Storable. lino %ld", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v43, -1, -1);
        MEMORY[0x25A2B1FA0](v42, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      sub_256F92DE8();
      swift_allocError();
      uint64_t v65 = 13;
      goto LABEL_38;
    }
    uint64_t v33 = *(void *)(v1 + 64);
    uint64_t v34 = swift_getObjectType();
    uint64_t v35 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v33 + 64);
    swift_unknownObjectRetain();
    v35(&v73, v34, v33);
    swift_unknownObjectRelease();
    sub_257042F14(&v70);
    sub_256FEA220((uint64_t)&v73);
    if (!*((void *)&v71 + 1))
    {
      sub_256FB11E8((uint64_t)&v70, &qword_269FDC6E0);
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      uint64_t v48 = sub_25704A550();
      __swift_project_value_buffer(v48, (uint64_t)qword_269FDD648);
      swift_retain_n();
      uint64_t v49 = sub_25704A530();
      uint64_t v50 = sub_25704AC60();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = swift_slowAlloc();
        long long v52 = swift_slowAlloc();
        *(void *)&char v73 = v52;
        *(_DWORD *)uint64_t v51 = 136315394;
        long long v53 = *(void *)(v1 + 56);
        swift_getObjectType();
        *(void *)&uint64_t v70 = v53;
        uint64_t v54 = sub_25704B150();
        *(void *)&uint64_t v70 = sub_256FFE924(v54, v55, (uint64_t *)&v73);
        sub_25704AC90();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2048;
        uint64_t v56 = *(void *)(v4 + 16);
        swift_release();
        *(void *)&uint64_t v70 = v56;
        sub_25704AC90();
        swift_release();
        _os_log_impl(&dword_256D65000, v49, v50, "Subscript> Invalid value %s. lino %ld", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v52, -1, -1);
        MEMORY[0x25A2B1FA0](v51, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      sub_256F92DE8();
      swift_allocError();
      uint64_t v65 = 25;
LABEL_38:
      *uint64_t v64 = v65;
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
    }
    sub_256F9ABF4(&v70, &v68);
    sub_256FB118C((uint64_t)&v68, (uint64_t)v67);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD10);
    if (swift_dynamicCast())
    {
      sub_256FA81EC(&v70, (uint64_t)&v73);
      long long v37 = v74;
      char v38 = v75;
      __swift_project_boxed_opaque_existential_1(&v73, v74);
      (*(void (**)(long long *__return_ptr, _OWORD *, uint64_t, uint64_t))(v38 + 8))(&v70, v76, v37, v38);
      sub_25702BB34((uint64_t)&v70, (uint64_t *)v19);
      sub_256FB11E8((uint64_t)&v70, &qword_269FDC6E0);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      *(unsigned char *)(v19 + 32) = 0;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    }
    else
    {
      char v72 = 0;
      uint64_t v70 = 0u;
      uint64_t v71 = 0u;
      sub_256FB11E8((uint64_t)&v70, &qword_269FDCD18);
      sub_256FB118C((uint64_t)v76, (uint64_t)&v73);
      if ((swift_dynamicCast() & 1) != 0
        && (__swift_project_boxed_opaque_existential_1(&v68, v69),
            uint64_t v57 = (void *)sub_25704B1D0(),
            unint64_t v58 = (void *)sub_25704A780(),
            swift_bridgeObjectRelease(),
            uint64_t v59 = objc_msgSend(v57, sel_valueForKey_, v58),
            v58,
            swift_unknownObjectRelease(),
            v59))
      {
        sub_25704AD60();
        swift_unknownObjectRelease();
        sub_256F9ABF4(&v70, &v73);
        sub_25702B5F8((uint64_t)&v73, (uint64_t *)v19);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
        *(unsigned char *)(v19 + 32) = 0;
      }
      else
      {
        if (qword_269FDC650 != -1) {
          swift_once();
        }
        uint64_t v60 = sub_25704A550();
        __swift_project_value_buffer(v60, (uint64_t)qword_269FDD648);
        swift_retain();
        unint64_t v61 = sub_25704A530();
        uint64_t v62 = sub_25704AC60();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v63 = 134217984;
          *(void *)&char v73 = *(void *)(v4 + 16);
          sub_25704AC90();
          swift_release();
          _os_log_impl(&dword_256D65000, v61, v62, "Subscript> Not supported Subscript. lino %ld", v63, 0xCu);
          MEMORY[0x25A2B1FA0](v63, -1, -1);
        }
        else
        {

          swift_release();
        }
        sub_256F92DE8();
        swift_allocError();
        char *v66 = 26;
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      }
    }
  }
  else
  {
    sub_256FB11E8((uint64_t)&v70, &qword_269FDC6E0);
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    int64_t v24 = sub_25704A550();
    __swift_project_value_buffer(v24, (uint64_t)qword_269FDD648);
    swift_retain_n();
    long long v25 = sub_25704A530();
    long long v26 = sub_25704AC60();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(void *)&char v73 = v28;
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v29 = *(void *)(v1 + 40);
      swift_getObjectType();
      *(void *)&uint64_t v70 = v29;
      uint64_t v30 = sub_25704B150();
      *(void *)&uint64_t v70 = sub_256FFE924(v30, v31, (uint64_t *)&v73);
      sub_25704AC90();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2048;
      uint64_t v32 = *(void *)(v4 + 16);
      swift_release();
      *(void *)&uint64_t v70 = v32;
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v25, v26, "Subscript> Invalid slice %s. lino %ld", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v28, -1, -1);
      MEMORY[0x25A2B1FA0](v27, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    sub_256F92DE8();
    swift_allocError();
    *uint64_t v36 = 24;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_256FF66B0()
{
  swift_getObjectType();
  uint64_t v1 = sub_25704B150();
  sub_25704A850();
  swift_getObjectType();
  sub_25704B150();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  return v1;
}

uint64_t sub_256FF6758()
{
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_256FF6788()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 73, 7);
}

uint64_t type metadata accessor for Subscript()
{
  return self;
}

uint64_t sub_256FF67F4()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return MEMORY[0x270FA0238](v0, 88, 7);
}

unint64_t sub_256FF6834()
{
  unint64_t result = qword_269FDCD28;
  if (!qword_269FDCD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCD28);
  }
  return result;
}

unint64_t sub_256FF6888()
{
  unint64_t result = qword_269FDCD30;
  if (!qword_269FDCD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCD30);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Subscript.SubscriptCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FF69A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Subscript.SubscriptCodingKeys()
{
  return &type metadata for Subscript.SubscriptCodingKeys;
}

unint64_t sub_256FF69E4()
{
  unint64_t result = qword_269FDCD38;
  if (!qword_269FDCD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCD38);
  }
  return result;
}

unint64_t sub_256FF6A3C()
{
  unint64_t result = qword_269FDCD40;
  if (!qword_269FDCD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCD40);
  }
  return result;
}

unint64_t sub_256FF6A94()
{
  unint64_t result = qword_269FDCD48;
  if (!qword_269FDCD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCD48);
  }
  return result;
}

uint64_t sub_256FF6AE8()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_256FF6B34()
{
  uint64_t v0 = sub_25704A550();
  __swift_allocate_value_buffer(v0, qword_269FDD648);
  __swift_project_value_buffer(v0, (uint64_t)qword_269FDD648);
  return sub_25704A540();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_256FF6C14()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD50);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2570700E0;
  *(void *)(inited + 32) = 0x746E697270;
  *(void *)(inited + 40) = 0xE500000000000000;
  uint64_t v1 = MEMORY[0x263F8EE78];
  unint64_t v2 = sub_256FEB040(MEMORY[0x263F8EE78]);
  type metadata accessor for Function();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 40) = v1;
  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 56) = v1;
  *(void *)(v3 + 64) = v1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(void *)(v3 + 104) = sub_256FEB040(v1);
  *(void *)(v3 + 16) = 0x746E697270;
  *(void *)(v3 + 24) = 0xE500000000000000;
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 40) = v1;
  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 56) = v1;
  *(void *)(v3 + 64) = v1;
  *(_OWORD *)(v3 + 72) = xmmword_2570700F0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v3 + 104) = v2;
  swift_bridgeObjectRelease();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_256FF71D8;
  *(void *)(v4 + 24) = 0;
  *(void *)(v3 + 112) = sub_256FF8190;
  *(void *)(v3 + 120) = v4;
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = 7234924;
  *(void *)(inited + 64) = 0xE300000000000000;
  unint64_t v5 = sub_256FEB040(v1);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 32) = v1;
  *(void *)(v6 + 40) = v1;
  *(void *)(v6 + 48) = v1;
  *(void *)(v6 + 56) = v1;
  *(void *)(v6 + 64) = v1;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(void *)(v6 + 104) = sub_256FEB040(v1);
  *(void *)(v6 + 16) = 7234924;
  *(void *)(v6 + 24) = 0xE300000000000000;
  *(void *)(v6 + 32) = v1;
  *(void *)(v6 + 40) = &unk_270637BA8;
  *(void *)(v6 + 48) = v1;
  *(void *)(v6 + 56) = v1;
  *(void *)(v6 + 64) = v1;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v6 + 104) = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_256FF7630;
  *(void *)(v7 + 24) = 0;
  *(void *)(v6 + 112) = sub_256FF8224;
  *(void *)(v6 + 120) = v7;
  *(void *)(inited + 72) = v6;
  *(void *)(inited + 80) = 0x656C707574;
  *(void *)(inited + 88) = 0xE500000000000000;
  unint64_t v8 = sub_256FEB040(v1);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 32) = v1;
  *(void *)(v9 + 40) = v1;
  *(void *)(v9 + 48) = v1;
  *(void *)(v9 + 56) = v1;
  *(void *)(v9 + 64) = v1;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(void *)(v9 + 104) = sub_256FEB040(v1);
  *(void *)(v9 + 16) = 0x656C707574;
  *(void *)(v9 + 24) = 0xE500000000000000;
  *(void *)(v9 + 32) = v1;
  *(void *)(v9 + 40) = &unk_270637BD8;
  *(void *)(v9 + 48) = v1;
  *(void *)(v9 + 56) = v1;
  *(void *)(v9 + 64) = v1;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v9 + 104) = v8;
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_256FF7900;
  *(void *)(v10 + 24) = 0;
  *(void *)(v9 + 112) = sub_256FF8224;
  *(void *)(v9 + 120) = v10;
  *(void *)(inited + 96) = v9;
  *(void *)(inited + 104) = 0x6563696C73;
  *(void *)(inited + 112) = 0xE500000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D8);
  uint64_t v11 = (_OWORD *)swift_allocObject();
  v11[1] = xmmword_25706E4F0;
  v11[2] = 0u;
  void v11[3] = 0u;
  v11[4] = 0u;
  void v11[5] = 0u;
  unint64_t v12 = sub_256FEB040(v1);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 32) = v1;
  *(void *)(v13 + 40) = v1;
  *(void *)(v13 + 48) = v1;
  *(void *)(v13 + 56) = v1;
  *(void *)(v13 + 64) = v1;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(void *)(v13 + 104) = sub_256FEB040(v1);
  *(void *)(v13 + 16) = 0x6563696C73;
  *(void *)(v13 + 24) = 0xE500000000000000;
  *(void *)(v13 + 32) = v1;
  *(void *)(v13 + 40) = &unk_270637C08;
  *(void *)(v13 + 48) = v1;
  *(void *)(v13 + 56) = v1;
  *(void *)(v13 + 64) = v11;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v13 + 104) = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_256FF7B34;
  *(void *)(v14 + 24) = 0;
  *(void *)(v13 + 112) = sub_256FF8224;
  *(void *)(v13 + 120) = v14;
  *(void *)(inited + 120) = v13;
  *(void *)(inited + 128) = 0x72724565756C6156;
  *(void *)(inited + 136) = 0xEA0000000000726FLL;
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_25706E4C0;
  *(void *)(v15 + 56) = MEMORY[0x263F8D310];
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0xE000000000000000;
  unint64_t v16 = sub_256FEB040(v1);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 32) = v1;
  *(void *)(v17 + 40) = v1;
  *(void *)(v17 + 48) = v1;
  *(void *)(v17 + 56) = v1;
  *(void *)(v17 + 64) = v1;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(void *)(v17 + 104) = sub_256FEB040(v1);
  *(void *)(v17 + 16) = 0x72724565756C6156;
  *(void *)(v17 + 24) = 0xEA0000000000726FLL;
  *(void *)(v17 + 32) = v1;
  *(void *)(v17 + 40) = &unk_270637C58;
  *(void *)(v17 + 48) = v1;
  *(void *)(v17 + 56) = v1;
  *(void *)(v17 + 64) = v15;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v17 + 104) = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_256FF8098;
  *(void *)(v18 + 24) = 0;
  *(void *)(v17 + 112) = sub_256FF8224;
  *(void *)(v17 + 120) = v18;
  *(void *)(inited + 144) = v17;
  unint64_t result = sub_256FEB2B0(inited);
  qword_269FDD660 = result;
  return result;
}

void sub_256FF71D8(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = sub_256FED050(0x7365756C6176, 0xE600000000000000), (v5 & 1) != 0)
    && (sub_256FB118C(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v30),
        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC890),
        (swift_dynamicCast() & 1) != 0))
  {
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_25704A550();
    __swift_project_value_buffer(v6, (uint64_t)qword_269FDD648);
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_25704A530();
    os_log_type_t v8 = sub_25704AC50();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v26 = v8;
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v31 = v25;
      uint64_t v27 = v9;
      *(_DWORD *)uint64_t v9 = 136315138;
      int64_t v10 = *(void *)(v28 + 16);
      uint64_t v11 = MEMORY[0x263F8EE78];
      if (v10)
      {
        int64_t v24 = v7;
        uint64_t v29 = MEMORY[0x263F8EE78];
        sub_256F909F0(0, v10, 0);
        uint64_t v12 = v28 + 32;
        uint64_t v11 = v29;
        do
        {
          sub_256FB118C(v12, (uint64_t)v30);
          sub_25704AF60();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_256F909F0(0, *(void *)(v11 + 16) + 1, 1);
            uint64_t v11 = v29;
          }
          unint64_t v14 = *(void *)(v11 + 16);
          unint64_t v13 = *(void *)(v11 + 24);
          if (v14 >= v13 >> 1)
          {
            sub_256F909F0(v13 > 1, v14 + 1, 1);
            uint64_t v11 = v29;
          }
          *(void *)(v11 + 16) = v14 + 1;
          uint64_t v15 = v11 + 16 * v14;
          *(void *)(v15 + 32) = 0;
          *(void *)(v15 + 40) = 0xE000000000000000;
          v12 += 32;
          --v10;
        }
        while (v10);
        uint64_t v7 = v24;
      }
      v30[0] = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC970);
      sub_256FE0A48();
      uint64_t v21 = sub_25704A6B0();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      v30[0] = sub_256FFE924(v21, v23, &v31);
      sub_25704AC90();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_256D65000, v7, v26, "%s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v25, -1, -1);
      MEMORY[0x25A2B1FA0](v27, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    *a2 = 0u;
    a2[1] = 0u;
  }
  else
  {
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_25704A550();
    __swift_project_value_buffer(v16, (uint64_t)qword_269FDD648);
    uint64_t v17 = sub_25704A530();
    os_log_type_t v18 = sub_25704AC60();
    if (os_log_type_enabled(v17, v18))
    {
      int64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v19 = 0;
      _os_log_impl(&dword_256D65000, v17, v18, "print> Invalid arg values", v19, 2u);
      MEMORY[0x25A2B1FA0](v19, -1, -1);
    }

    sub_256F92DE8();
    swift_allocError();
    *uint64_t v20 = 44;
    swift_willThrow();
  }
}

uint64_t sub_256FF7630@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_256FED050(6972015, 0xE300000000000000), (v5 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD78);
    if (swift_dynamicCast())
    {
      if (*((void *)&v19 + 1))
      {
        sub_256FA81EC(&v18, (uint64_t)v21);
        __swift_project_boxed_opaque_existential_1(v21, v22);
        uint64_t v6 = sub_25704AB90();
LABEL_12:
        a2[3] = MEMORY[0x263F8D6C8];
        *a2 = v6;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
    }
    else
    {
      uint64_t v20 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
    }
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v20 = 0;
  }
  sub_256FB11E8((uint64_t)&v18, &qword_269FDCD60);
  if (*(void *)(a1 + 16) && (unint64_t v7 = sub_256FED050(6972015, 0xE300000000000000), (v8 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v7, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD70);
    if (swift_dynamicCast())
    {
      if (*((void *)&v19 + 1))
      {
        sub_256FA81EC(&v18, (uint64_t)v21);
        uint64_t v9 = v22;
        uint64_t v10 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v20 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
    }
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v20 = 0;
  }
  sub_256FB11E8((uint64_t)&v18, &qword_269FDCD68);
  if (qword_269FDC650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_25704A550();
  __swift_project_value_buffer(v12, (uint64_t)qword_269FDD648);
  unint64_t v13 = sub_25704A530();
  os_log_type_t v14 = sub_25704AC60();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_256D65000, v13, v14, "len> Invalid arg obj", v15, 2u);
    MEMORY[0x25A2B1FA0](v15, -1, -1);
  }

  sub_256F92DE8();
  swift_allocError();
  *uint64_t v16 = 45;
  return swift_willThrow();
}

uint64_t sub_256FF7900@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_256FED050(0x656C626172657469, 0xE800000000000000), (v5 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
    if (swift_dynamicCast())
    {
      if (*((void *)&v19 + 1))
      {
        sub_256FA81EC(&v18, (uint64_t)v21);
        uint64_t v6 = v22;
        uint64_t v7 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAE8);
        uint64_t v10 = swift_allocObject();
        *(void *)(v10 + 16) = v8;
        a2[3] = v9;
        *a2 = v10;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
    }
    else
    {
      uint64_t v20 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
    }
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v20 = 0;
  }
  sub_256FB11E8((uint64_t)&v18, &qword_269FDCAE0);
  if (qword_269FDC650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_25704A550();
  __swift_project_value_buffer(v12, (uint64_t)qword_269FDD648);
  unint64_t v13 = sub_25704A530();
  os_log_type_t v14 = sub_25704AC60();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_256D65000, v13, v14, "tuple> Invalid arg iterable", v15, 2u);
    MEMORY[0x25A2B1FA0](v15, -1, -1);
  }

  sub_256F92DE8();
  swift_allocError();
  *uint64_t v16 = 47;
  return swift_willThrow();
}

uint64_t sub_256FF7B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_256FED050(0x7472617473, 0xE500000000000000), (v5 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v46);
    sub_256F9ABF4(&v46, v49);
    if (*(void *)(a1 + 16) > 1uLL)
    {
      sub_256FB118C((uint64_t)v49, (uint64_t)&v43);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD58);
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v48 = 0;
        long long v46 = 0u;
        long long v47 = 0u;
      }
      if (*(void *)(a1 + 16) && (unint64_t v6 = sub_256FED050(1886352499, 0xE400000000000000), (v7 & 1) != 0))
      {
        sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v40);
        if ((swift_dynamicCast() & 1) == 0)
        {
          uint64_t v45 = 0;
          long long v43 = 0u;
          long long v44 = 0u;
        }
      }
      else
      {
        long long v43 = 0u;
        long long v44 = 0u;
        uint64_t v45 = 0;
      }
      uint64_t v42 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      if (*(void *)(a1 + 16) == 3)
      {
        unint64_t v17 = sub_256FED050(1885697139, 0xE400000000000000);
        if (v18)
        {
          sub_256FB118C(*(void *)(a1 + 56) + 32 * v17, (uint64_t)&v36);
          if ((swift_dynamicCast() & 1) == 0)
          {
            uint64_t v39 = 0;
            long long v37 = 0u;
            long long v38 = 0u;
          }
        }
        else
        {
          long long v37 = 0u;
          long long v38 = 0u;
          uint64_t v39 = 0;
        }
        sub_256FF81AC((uint64_t)&v37, (uint64_t)&v40);
      }
      uint64_t v19 = *((void *)&v47 + 1);
      if (*((void *)&v47 + 1))
      {
        sub_256F92F24((uint64_t)&v46, (uint64_t)&v37);
        uint64_t v20 = *((void *)&v38 + 1);
        uint64_t v21 = v39;
        __swift_project_boxed_opaque_existential_1(&v37, *((uint64_t *)&v38 + 1));
        int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
        uint64_t v23 = *((void *)&v41 + 1);
        if (*((void *)&v41 + 1)) {
          goto LABEL_27;
        }
      }
      else
      {
        int v22 = 0;
        uint64_t v23 = *((void *)&v41 + 1);
        if (*((void *)&v41 + 1))
        {
LABEL_27:
          sub_256F92F24((uint64_t)&v40, (uint64_t)&v37);
          uint64_t v24 = *((void *)&v38 + 1);
          uint64_t v25 = v39;
          __swift_project_boxed_opaque_existential_1(&v37, *((uint64_t *)&v38 + 1));
          int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
          uint64_t v27 = *((void *)&v44 + 1);
          if (*((void *)&v44 + 1))
          {
LABEL_28:
            sub_256F92F24((uint64_t)&v43, (uint64_t)&v37);
            uint64_t v50 = v23;
            int v28 = v26;
            uint64_t v29 = v19;
            int v30 = v22;
            uint64_t v31 = *((void *)&v38 + 1);
            uint64_t v32 = v39;
            __swift_project_boxed_opaque_existential_1(&v37, *((uint64_t *)&v38 + 1));
            uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8);
            uint64_t v34 = v32;
            int v22 = v30;
            uint64_t v19 = v29;
            int v26 = v28;
            uint64_t v23 = v50;
            int v35 = v33(v31, v34);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
LABEL_32:
            *(void *)(a2 + 24) = &type metadata for SliceStruct;
            *(_DWORD *)a2 = v22;
            *(unsigned char *)(a2 + 4) = v19 == 0;
            *(_DWORD *)(a2 + 8) = v26;
            *(unsigned char *)(a2 + 12) = v23 == 0;
            *(_DWORD *)(a2 + 16) = v35;
            *(unsigned char *)(a2 + 20) = v27 == 0;
            sub_256FB11E8((uint64_t)&v40, &qword_269FDCAF0);
            sub_256FB11E8((uint64_t)&v43, &qword_269FDCAF0);
            return sub_256FB11E8((uint64_t)&v46, &qword_269FDCAF0);
          }
LABEL_31:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
          int v35 = 0;
          goto LABEL_32;
        }
      }
      int v26 = 0;
      uint64_t v27 = *((void *)&v44 + 1);
      if (*((void *)&v44 + 1)) {
        goto LABEL_28;
      }
      goto LABEL_31;
    }
    sub_256FB118C((uint64_t)v49, (uint64_t)&v40);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD58);
    if (swift_dynamicCast())
    {
      sub_256FA81EC(&v43, (uint64_t)&v46);
      uint64_t v14 = *((void *)&v47 + 1);
      uint64_t v15 = v48;
      __swift_project_boxed_opaque_existential_1(&v46, *((uint64_t *)&v47 + 1));
      int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      *(void *)(a2 + 24) = &type metadata for SliceStruct;
      *(_DWORD *)a2 = v16;
      *(unsigned char *)(a2 + 4) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 12) = 1;
      *(_DWORD *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 20) = 1;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
    }
    else
    {
      uint64_t v45 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      uint64_t result = sub_256FB11E8((uint64_t)&v43, &qword_269FDCAF0);
      *(void *)(a2 + 24) = &type metadata for SliceStruct;
      *(_DWORD *)a2 = 0;
      *(unsigned char *)(a2 + 4) = 1;
      *(_DWORD *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 12) = 1;
      *(_DWORD *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 20) = 1;
    }
  }
  else
  {
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_25704A550();
    __swift_project_value_buffer(v8, (uint64_t)qword_269FDD648);
    uint64_t v9 = sub_25704A530();
    os_log_type_t v10 = sub_25704AC60();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_256D65000, v9, v10, "slice> Invalid arg start", v11, 2u);
      MEMORY[0x25A2B1FA0](v11, -1, -1);
    }

    sub_256F92DE8();
    swift_allocError();
    unsigned char *v12 = 46;
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_256FF8098@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  if (!*(void *)(result + 16)
    || (unint64_t v3 = result, result = sub_256FED050(0x65756C6176, 0xE500000000000000), (v4 & 1) == 0)
    || (sub_256FB118C(*(void *)(v3 + 56) + 32 * result, (uint64_t)v10),
        uint64_t v5 = MEMORY[0x263F8D310],
        uint64_t result = swift_dynamicCast(),
        (result & 1) == 0))
  {
    a2[3] = MEMORY[0x263F8D310];
LABEL_7:
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
    goto LABEL_8;
  }
  uint64_t v6 = v8;
  unint64_t v7 = v9;
  a2[3] = v5;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_8:
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t sub_256FF8158()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_256FF8190(uint64_t a1)
{
  return sub_256FF04A4(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_256FF81AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_256FF8224(uint64_t a1)
{
  return sub_256FF8190(a1);
}

uint64_t sub_256FF823C(uint64_t a1)
{
  return a1;
}

void Int.divide(_:)(uint64_t a1, uint64_t a2)
{
  if (a2 == (int)a2) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
}

uint64_t sub_256FF8334()
{
  uint64_t result = *v0;
  if (*v0 == (int)*v0) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
  return result;
}

atomic_ullong *Int64.divide(_:)(uint64_t a1, uint64_t a2)
{
  v6[1] = *MEMORY[0x263EF8340];
  v6[0] = a2;
  unint64_t v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(3, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_256FF84E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FF84F0);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_256FF8508(uint64_t a1)
{
  v6[1] = *MEMORY[0x263EF8340];
  v6[0] = *v1;
  unint64_t v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 5);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(3, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_256FF85FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FF8604);
  }
  _Unwind_Resume(a1);
}

void Int32.divide(_:)()
{
}

void sub_256FF86D4()
{
}

atomic_ullong *UInt32.divide(_:)(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = a2;
  unint64_t v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)&v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(3, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_256FF887C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FF8884);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_256FF889C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = *v1;
  unint64_t v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)&v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(3, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_256FF8990(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x256FF8998);
  }
  _Unwind_Resume(a1);
}

void Float.divide(_:)()
{
}

void sub_256FF8A64()
{
}

void Double.divide(_:)()
{
}

void sub_256FF8BD4()
{
}

void *MLXArray.divide(_:)(uint64_t a1)
{
  unsigned __int8 v3 = 7;
  uint64_t result = sub_2570049DC(a1, &v3);
  if (!v1) {
    mlx_default_device();
  }
  return result;
}

void *sub_256FF8D9C(uint64_t a1)
{
  return MLXArray.divide(_:)(a1);
}

uint64_t dispatch thunk of Divisible.divide(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_256FF8DE8(char *a1, char *a2)
{
  return sub_256FF226C(*a1, *a2);
}

uint64_t sub_256FF8DF4()
{
  return sub_25704B2B0();
}

uint64_t sub_256FF8E6C()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FF8ED0()
{
  return sub_25704B2B0();
}

uint64_t sub_256FF8F44@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_256FF8FA4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 28783;
  if (*v1) {
    uint64_t v2 = 0x646E617265706FLL;
  }
  unint64_t v3 = 0xE200000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_256FF8FD8()
{
  if (*v0) {
    return 0x646E617265706FLL;
  }
  else {
    return 28783;
  }
}

uint64_t sub_256FF9008@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_256FF906C(uint64_t a1)
{
  unint64_t v2 = sub_256FF9F64();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256FF90A8(uint64_t a1)
{
  unint64_t v2 = sub_256FF9F64();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256FF90E4(void *a1)
{
  return sub_256FF9130(a1);
}

uint64_t sub_256FF9130(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD88);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_256FF9F64();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Unary();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v13[0]) = 0;
    v1[7] = sub_25704B0F0();
    v1[8] = v10;
    v1[5] = sub_257034990((uint64_t)v8, 1);
    v1[6] = v11;
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v13);
    uint64_t v3 = sub_257046164(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_256FF9368@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void v62[5];
  long long v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[3];
  uint64_t v67;
  uint64_t v68;

  uint64_t v3 = v2;
  char v4 = v1;
  uint64_t v6 = v1[6];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v9 = v1[4];
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  v10(v8, v9, ObjectType, v6);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  int v11 = sub_256FF9F18();
  switch(v11)
  {
    case 4:
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      int v22 = sub_25704A550();
      __swift_project_value_buffer(v22, (uint64_t)qword_269FDD648);
      swift_retain();
      uint64_t v23 = sub_25704A530();
      uint64_t v24 = sub_25704AC60();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        int v26 = swift_slowAlloc();
        v66[0] = v26;
        *(_DWORD *)uint64_t v25 = 136315394;
        uint64_t v27 = v4[7];
        int v28 = v4[8];
        swift_bridgeObjectRetain();
        *(void *)&uint64_t v63 = sub_256FFE924(v27, v28, v66);
        sub_25704AC90();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2048;
        *(void *)&uint64_t v63 = v4[2];
        sub_25704AC90();
        swift_release();
        _os_log_impl(&dword_256D65000, v23, v24, "Unary> Invalid unary operator %s. lino %ld", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v26, -1, -1);
        MEMORY[0x25A2B1FA0](v25, -1, -1);
      }
      else
      {

        swift_release();
      }
      sub_256F92DE8();
      swift_allocError();
      long long v43 = 27;
      break;
    case 2:
      uint64_t v29 = v1[6];
      int v30 = swift_getObjectType();
      uint64_t v31 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v29 + 64);
      swift_unknownObjectRetain();
      v31(v62, v30, v29);
      uint64_t result = swift_unknownObjectRelease();
      if (v3) {
        return result;
      }
      sub_2570430C8((uint64_t)&v63);
      sub_256FEA220((uint64_t)v62);
      if (v64)
      {
        sub_256FA81EC(&v63, (uint64_t)v66);
        uint64_t v32 = v67;
        uint64_t v33 = v68;
        __swift_project_boxed_opaque_existential_1(v66, v67);
        uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
        *(void *)(a1 + 24) = MEMORY[0x263F8D4F8];
        *(unsigned char *)a1 = (v34 & 1) == 0;
        *(unsigned char *)(a1 + 32) = 0;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
      }
      sub_256FB11E8((uint64_t)&v63, &qword_269FDCAA0);
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      long long v53 = sub_25704A550();
      __swift_project_value_buffer(v53, (uint64_t)qword_269FDD648);
      swift_retain_n();
      uint64_t v54 = sub_25704A530();
      uint64_t v55 = sub_25704AC60();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        v66[0] = v57;
        *(_DWORD *)uint64_t v56 = 136315394;
        unint64_t v58 = v1[5];
        swift_getObjectType();
        *(void *)&uint64_t v63 = v58;
        uint64_t v59 = sub_25704B150();
        *(void *)&uint64_t v63 = sub_256FFE924(v59, v60, v66);
        sub_25704AC90();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 12) = 2048;
        unint64_t v61 = v4[2];
        swift_release();
        *(void *)&uint64_t v63 = v61;
        sub_25704AC90();
        swift_release();
        _os_log_impl(&dword_256D65000, v54, v55, "Unary> Operand %s is not Truthiness. lino %ld", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v57, -1, -1);
        MEMORY[0x25A2B1FA0](v56, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      sub_256F92DE8();
      swift_allocError();
      long long v43 = 29;
      break;
    case 1:
      uint64_t v12 = v1[6];
      uint64_t v13 = swift_getObjectType();
      uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 64);
      swift_unknownObjectRetain();
      v14(v62, v13, v12);
      uint64_t result = swift_unknownObjectRelease();
      if (v3) {
        return result;
      }
      sub_257043190((uint64_t)&v63);
      sub_256FEA220((uint64_t)v62);
      if (v64)
      {
        sub_256FA81EC(&v63, (uint64_t)v66);
        int v16 = v67;
        unint64_t v17 = v68;
        __swift_project_boxed_opaque_existential_1(v66, v67);
        char v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
        uint64_t v64 = v16;
        uint64_t v65 = v17;
        __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v63);
        v18(v16, v17);
        uint64_t v19 = v64;
        uint64_t v20 = __swift_project_boxed_opaque_existential_1(&v63, v64);
        *(void *)(a1 + 24) = v19;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a1);
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(boxed_opaque_existential_0, v20, v19);
        *(unsigned char *)(a1 + 32) = 0;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
      }
      sub_256FB11E8((uint64_t)&v63, &qword_269FDCD80);
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      long long v44 = sub_25704A550();
      __swift_project_value_buffer(v44, (uint64_t)qword_269FDD648);
      swift_retain_n();
      uint64_t v45 = sub_25704A530();
      long long v46 = sub_25704AC60();
      if (os_log_type_enabled(v45, v46))
      {
        long long v47 = swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        v66[0] = v48;
        *(_DWORD *)long long v47 = 136315394;
        uint64_t v49 = v1[5];
        swift_getObjectType();
        *(void *)&uint64_t v63 = v49;
        uint64_t v50 = sub_25704B150();
        *(void *)&uint64_t v63 = sub_256FFE924(v50, v51, v66);
        sub_25704AC90();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2048;
        long long v52 = v4[2];
        swift_release();
        *(void *)&uint64_t v63 = v52;
        sub_25704AC90();
        swift_release();
        _os_log_impl(&dword_256D65000, v45, v46, "Unary> Operand %s is not Negationable. lino %ld", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v48, -1, -1);
        MEMORY[0x25A2B1FA0](v47, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      sub_256F92DE8();
      swift_allocError();
      long long v43 = 28;
      break;
    default:
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      int v35 = sub_25704A550();
      __swift_project_value_buffer(v35, (uint64_t)qword_269FDD648);
      swift_retain();
      uint64_t v36 = sub_25704A530();
      long long v37 = sub_25704AC60();
      if (os_log_type_enabled(v36, v37))
      {
        long long v38 = swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        v66[0] = v39;
        *(_DWORD *)long long v38 = 136315394;
        long long v40 = v4[7];
        long long v41 = v4[8];
        swift_bridgeObjectRetain();
        *(void *)&uint64_t v63 = sub_256FFE924(v40, v41, v66);
        sub_25704AC90();
        swift_bridgeObjectRelease();
        *(_WORD *)(v38 + 12) = 2048;
        *(void *)&uint64_t v63 = v4[2];
        sub_25704AC90();
        swift_release();
        _os_log_impl(&dword_256D65000, v36, v37, "Unary> Unary operator %s not supported yet. lino %ld", (uint8_t *)v38, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v39, -1, -1);
        MEMORY[0x25A2B1FA0](v38, -1, -1);
      }
      else
      {

        swift_release();
      }
      sub_256F92DE8();
      swift_allocError();
      long long v43 = 30;
      break;
  }
  *uint64_t v42 = v43;
  return swift_willThrow();
}

uint64_t sub_256FF9D58()
{
  switch(sub_256FF9F18())
  {
    case 4u:
      __break(1u);
      JUMPOUT(0x256FF9E68);
    default:
      sub_25704A850();
      swift_bridgeObjectRelease();
      sub_25704A850();
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_25704A7E0();
      sub_25704A850();
      swift_bridgeObjectRelease();
      return 0;
  }
}

uint64_t sub_256FF9E7C()
{
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FF9EAC()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 72, 7);
}

uint64_t type metadata accessor for Unary()
{
  return self;
}

uint64_t sub_256FF9F18()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

unint64_t sub_256FF9F64()
{
  unint64_t result = qword_269FDCD90;
  if (!qword_269FDCD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCD90);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Unary.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FFA084);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Unary.CodingKeys()
{
  return &type metadata for Unary.CodingKeys;
}

unint64_t sub_256FFA0C0()
{
  unint64_t result = qword_269FDCD98;
  if (!qword_269FDCD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCD98);
  }
  return result;
}

unint64_t sub_256FFA118()
{
  unint64_t result = qword_269FDCDA0;
  if (!qword_269FDCDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCDA0);
  }
  return result;
}

unint64_t sub_256FFA170()
{
  unint64_t result = qword_269FDCDA8;
  if (!qword_269FDCDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCDA8);
  }
  return result;
}

uint64_t dispatch thunk of Storable.store(key:obj:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for Arguments(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for Store(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t initializeWithCopy for Store(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for Store(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        int v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for Store(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for Store(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Store(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Store()
{
  return &type metadata for Store;
}

double String.attribute(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void (*v14)(long long *__return_ptr, void *);
  double result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  void (*v37)(long long *);
  void v38[2];
  long long v39;
  long long v40;
  _OWORD v41[2];

  v38[0] = a3;
  v38[1] = a4;
  uint64_t v10 = sub_256FF08D0();
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(void *)(v11 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_256FED050(a1, a2);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v39 = 0u;
    long long v40 = 0u;
    goto LABEL_7;
  }
  uint64_t v14 = *(void (**)(long long *__return_ptr, void *))(*(void *)(v11 + 56) + 16 * v12);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14(&v39, v38);
  swift_release();
  if (*((void *)&v40 + 1))
  {
    sub_256F9ABF4(&v39, v41);
    sub_256F9ABF4(v41, (_OWORD *)a5);
    return result;
  }
LABEL_7:
  sub_256FB11E8((uint64_t)&v39, &qword_269FDC6E0);
  if (a1 == 0x6563616C706572 && a2 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    int v16 = swift_allocObject();
    *(void *)(v16 + 16) = a3;
    *(void *)(v16 + 24) = a4;
    swift_bridgeObjectRetain();
    unint64_t v17 = MEMORY[0x263F8EE78];
    char v18 = sub_256FEB040(MEMORY[0x263F8EE78]);
    uint64_t v19 = type metadata accessor for Function();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 32) = v17;
    *(void *)(v20 + 40) = v17;
    *(void *)(v20 + 48) = v17;
    *(void *)(v20 + 56) = v17;
    *(void *)(v20 + 64) = v17;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(void *)(v20 + 104) = sub_256FEB040(v17);
    strcpy((char *)(v20 + 16), "String.replace");
    *(unsigned char *)(v20 + 31) = -18;
    *(void *)(v20 + 32) = &unk_270638238;
    *(void *)(v20 + 40) = v17;
    *(void *)(v20 + 48) = v17;
    *(void *)(v20 + 56) = v17;
    *(void *)(v20 + 64) = v17;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(void *)(v20 + 104) = v18;
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_256FFB6EC;
    *(void *)(v21 + 24) = v16;
    int v22 = sub_256FF8224;
LABEL_11:
    *(void *)(v20 + 112) = v22;
    *(void *)(v20 + 120) = v21;
    *(void *)(a5 + 24) = v19;
    *(void *)a5 = v20;
    return result;
  }
  if (a1 == 0x7069727473 && a2 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = a3;
    *(void *)(v23 + 24) = a4;
    swift_bridgeObjectRetain();
    uint64_t v24 = MEMORY[0x263F8EE78];
    uint64_t v25 = sub_256FEB040(MEMORY[0x263F8EE78]);
    uint64_t v19 = type metadata accessor for Function();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 32) = v24;
    *(void *)(v20 + 40) = v24;
    *(void *)(v20 + 48) = v24;
    *(void *)(v20 + 56) = v24;
    *(void *)(v20 + 64) = v24;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(void *)(v20 + 104) = sub_256FEB040(v24);
    strcpy((char *)(v20 + 16), "String.strip");
    *(unsigned char *)(v20 + 29) = 0;
    *(_WORD *)(v20 + 30) = -5120;
    *(void *)(v20 + 32) = v24;
    *(void *)(v20 + 40) = v24;
    *(void *)(v20 + 48) = v24;
    *(void *)(v20 + 56) = v24;
    *(void *)(v20 + 64) = v24;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(void *)(v20 + 104) = v25;
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_256FFB698;
    *(void *)(v21 + 24) = v23;
    int v22 = sub_256FF8224;
    goto LABEL_11;
  }
  if (a1 == 0x74696C7073 && a2 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D8);
    int v26 = (_OWORD *)swift_allocObject();
    v26[1] = xmmword_25706E4C0;
    _OWORD v26[2] = 0u;
    v26[3] = 0u;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = a3;
    *(void *)(v27 + 24) = a4;
    swift_bridgeObjectRetain();
    int v28 = MEMORY[0x263F8EE78];
    uint64_t v29 = sub_256FEB040(MEMORY[0x263F8EE78]);
    uint64_t v19 = type metadata accessor for Function();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 32) = v28;
    *(void *)(v20 + 40) = v28;
    *(void *)(v20 + 48) = v28;
    *(void *)(v20 + 56) = v28;
    *(void *)(v20 + 64) = v28;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(void *)(v20 + 104) = sub_256FEB040(v28);
    strcpy((char *)(v20 + 16), "String.split");
    *(unsigned char *)(v20 + 29) = 0;
    *(_WORD *)(v20 + 30) = -5120;
    *(void *)(v20 + 32) = &unk_270638278;
    *(void *)(v20 + 40) = v28;
    *(void *)(v20 + 48) = v28;
    *(void *)(v20 + 56) = v28;
    *(void *)(v20 + 64) = v26;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(void *)(v20 + 104) = v29;
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_256FFB67C;
    *(void *)(v21 + 24) = v27;
    int v22 = sub_256FF8224;
    goto LABEL_11;
  }
  if (a1 == 1852403562 && a2 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    int v30 = swift_allocObject();
    *(void *)(v30 + 16) = a3;
    *(void *)(v30 + 24) = a4;
    swift_bridgeObjectRetain();
    uint64_t v31 = MEMORY[0x263F8EE78];
    uint64_t v32 = sub_256FEB040(MEMORY[0x263F8EE78]);
    uint64_t v19 = type metadata accessor for Function();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 32) = v31;
    *(void *)(v20 + 40) = v31;
    *(void *)(v20 + 48) = v31;
    *(void *)(v20 + 56) = v31;
    *(void *)(v20 + 64) = v31;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(void *)(v20 + 104) = sub_256FEB040(v31);
    *(void *)(v20 + 16) = 0x6A2E676E69727453;
    *(void *)(v20 + 24) = 0xEB000000006E696FLL;
    *(void *)(v20 + 32) = v31;
    *(void *)(v20 + 40) = &unk_2706382A8;
    *(void *)(v20 + 48) = v31;
    *(void *)(v20 + 56) = v31;
    *(void *)(v20 + 64) = v31;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(void *)(v20 + 104) = v32;
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_256FFB660;
    *(void *)(v21 + 24) = v30;
    int v22 = sub_256FF8190;
    goto LABEL_11;
  }
  *(void *)&uint64_t v39 = a3;
  *((void *)&v39 + 1) = a4;
  uint64_t v33 = sub_256FF08D0();
  swift_beginAccess();
  uint64_t v34 = *(void *)(v33 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  if (*(void *)(v34 + 16))
  {
    swift_bridgeObjectRetain();
    int v35 = sub_256FED050(a1, a2);
    if (v36)
    {
      long long v37 = *(void (**)(long long *))(*(void *)(v34 + 56) + 16 * v35);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v37(&v39);
      swift_release();
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  __n128 result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

uint64_t sub_256FFAE64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v8 = sub_256FED050(6581359, 0xE300000000000000);
    if (v9)
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v8, (uint64_t)v15);
      if (swift_dynamicCast())
      {
        if (*(void *)(a1 + 16))
        {
          unint64_t v10 = sub_256FED050(7824750, 0xE300000000000000);
          if (v11)
          {
            sub_256FB118C(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v15);
            uint64_t v12 = MEMORY[0x263F8D310];
            if (swift_dynamicCast())
            {
              v15[0] = a2;
              v15[1] = a3;
              *(void *)(a4 + 24) = v12;
              sub_256FFB7FC();
              sub_256FFB850();
              sub_25704AC30();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  sub_256F92DE8();
  swift_allocError();
  *uint64_t v14 = 53;
  return swift_willThrow();
}

uint64_t sub_256FFB010@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_25704A480();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = a1;
  v15[1] = a2;
  sub_25704A470();
  sub_256FC9544();
  uint64_t v10 = MEMORY[0x263F8D310];
  uint64_t v11 = sub_25704ACD0();
  uint64_t v13 = v12;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  a3[3] = v10;
  *a3 = v11;
  a3[1] = v13;
  return result;
}

uint64_t sub_256FFB12C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = sub_25704A480();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16)
    && (unint64_t v12 = sub_256FED050(7366003, 0xE300000000000000), (v13 & 1) != 0)
    && (sub_256FB118C(*(void *)(a1 + 56) + 32 * v12, (uint64_t)&v17), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v17 = a2;
    uint64_t v18 = a3;
    sub_256FC9544();
    uint64_t v14 = sub_25704ACC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = a2;
    uint64_t v18 = a3;
    sub_25704A470();
    sub_256FC9544();
    uint64_t v14 = sub_25704ACB0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC970);
  a4[3] = result;
  *a4 = v14;
  return result;
}

uint64_t sub_256FFB2E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!*(void *)(a1 + 16) || (unint64_t v4 = sub_256FED050(0x656C626172657469, 0xE800000000000000), (v5 & 1) == 0))
  {
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v28 = 0;
    goto LABEL_15;
  }
  sub_256FB118C(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v25);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    goto LABEL_15;
  }
  if (!*((void *)&v27 + 1))
  {
LABEL_15:
    sub_256FB11E8((uint64_t)&v26, &qword_269FDCAE0);
    sub_256F92DE8();
    swift_allocError();
    *uint64_t v15 = 54;
    return swift_willThrow();
  }
  sub_256FA81EC(&v26, (uint64_t)v29);
  uint64_t v6 = v30;
  uint64_t v7 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  int64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v22 = a2;
    uint64_t v32 = MEMORY[0x263F8EE78];
    sub_256F909F0(0, v9, 0);
    uint64_t v10 = v8 + 32;
    while (1)
    {
      sub_256FB118C(v10, (uint64_t)&v26);
      sub_256FB118C((uint64_t)&v26, (uint64_t)v25);
      if (!swift_dynamicCast()) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      uint64_t v11 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256F909F0(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v32;
      }
      unint64_t v13 = *(void *)(v11 + 16);
      unint64_t v12 = *(void *)(v11 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_256F909F0(v12 > 1, v13 + 1, 1);
        uint64_t v11 = v32;
      }
      *(void *)(v11 + 16) = v13 + 1;
      uint64_t v14 = v11 + 16 * v13;
      *(void *)(v14 + 32) = v23;
      *(void *)(v14 + 40) = v24;
      v10 += 32;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        a2 = v22;
        goto LABEL_19;
      }
    }
    sub_256F92DE8();
    swift_allocError();
    *uint64_t v17 = 54;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_19:
    uint64_t v18 = MEMORY[0x263F8D310];
    *(void *)&long long v26 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC970);
    sub_256FE0A48();
    uint64_t v19 = sub_25704A6B0();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    a2[3] = v18;
    *a2 = v19;
    a2[1] = v21;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
}

double sub_256FFB61C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return String.attribute(for:)(a1, a2, *v3, v3[1], a3);
}

uint64_t sub_256FFB628()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_256FFB660@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_256FFB2E4(a1, a2);
}

uint64_t sub_256FFB67C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_256FFB12C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_256FFB698@<X0>(uint64_t *a1@<X8>)
{
  return sub_256FFB010(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_256FFB6B4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_256FFB6EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_256FFAE64(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t _sSS8MorpheusE3has9attributeSbSS_tF_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_257004EB8((uint64_t)&unk_270638848);
  swift_arrayDestroy();
  char v5 = sub_257002DB0(a1, a2, v4);
  swift_bridgeObjectRelease();
  if (v5)
  {
    char v6 = 1;
  }
  else
  {
    uint64_t v7 = sub_256FF08D0();
    swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v8 + 16))
    {
      swift_bridgeObjectRetain();
      sub_256FED050(a1, a2);
      char v6 = v9;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = 0;
    }
    swift_bridgeObjectRelease();
  }
  return v6 & 1;
}

unint64_t sub_256FFB7FC()
{
  unint64_t result = qword_269FDCDB0;
  if (!qword_269FDCDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCDB0);
  }
  return result;
}

unint64_t sub_256FFB850()
{
  unint64_t result = qword_269FDCDB8;
  if (!qword_269FDCDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCDB8);
  }
  return result;
}

uint64_t sub_256FFB8BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF1C8C(*a1, *a2);
}

uint64_t sub_256FFB8C8()
{
  return sub_25704B2B0();
}

uint64_t sub_256FFB964()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FFB9EC()
{
  return sub_25704B2B0();
}

uint64_t sub_256FFBA84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256FFC1B4();
  *a1 = result;
  return result;
}

void sub_256FFBAB4(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x65756C6176;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6F746172656E6567;
    unint64_t v4 = 0xEA00000000007372;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 7955819;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_256FFBB0C()
{
  uint64_t v1 = 0x65756C6176;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F746172656E6567;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 7955819;
  }
}

uint64_t sub_256FFBB60@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256FFC1B4();
  *a1 = result;
  return result;
}

uint64_t sub_256FFBB88(uint64_t a1)
{
  unint64_t v2 = sub_256FFBF54();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256FFBBC4(uint64_t a1)
{
  unint64_t v2 = sub_256FFBF54();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256FFBC00(void *a1)
{
  return sub_256FFBC4C(a1);
}

uint64_t sub_256FFBC4C(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCDC0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_256FFBF54();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for DictComp();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_2570349B0((uint64_t)v8, 0);
    v1[6] = v10;
    v1[7] = sub_2570349B0((uint64_t)v8, 1);
    v1[8] = v11;
    v1[9] = sub_25703C5CC(v8, 2);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v13);
    uint64_t v3 = sub_257046164(v13);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_256FFBEA8()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256FFBEE0()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 80, 7);
}

uint64_t type metadata accessor for DictComp()
{
  return self;
}

unint64_t sub_256FFBF54()
{
  unint64_t result = qword_269FDCDC8;
  if (!qword_269FDCDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCDC8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DictComp.NameCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256FFC074);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DictComp.NameCodingKeys()
{
  return &type metadata for DictComp.NameCodingKeys;
}

unint64_t sub_256FFC0B0()
{
  unint64_t result = qword_269FDCDD0;
  if (!qword_269FDCDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCDD0);
  }
  return result;
}

unint64_t sub_256FFC108()
{
  unint64_t result = qword_269FDCDD8;
  if (!qword_269FDCDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCDD8);
  }
  return result;
}

unint64_t sub_256FFC160()
{
  unint64_t result = qword_269FDCDE0;
  if (!qword_269FDCDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCDE0);
  }
  return result;
}

uint64_t sub_256FFC1B4()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t Function.__allocating_init(name:arguments:attrs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  Function.init(name:arguments:attrs:body:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

void __swiftcall Arguments.init(args:posonlyargs:kwonlyargs:kwDefaults:defaults:vaargs:kwargs:)(Morpheus::Arguments *__return_ptr retstr, Swift::OpaquePointer args, Swift::OpaquePointer posonlyargs, Swift::OpaquePointer kwonlyargs, Swift::OpaquePointer kwDefaults, Swift::OpaquePointer defaults, Swift::String_optional vaargs, Swift::String_optional kwargs)
{
  retstr->args = args;
  retstr->posonlyargs = posonlyargs;
  retstr->kwonlyargs = kwonlyargs;
  retstr->kwDefaults = kwDefaults;
  retstr->defaults = defaults;
  retstr->vararg = vaargs;
  retstr->kwarg = kwargs;
}

uint64_t sub_256FFC2AC(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v25 = a2 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = (uint64_t *)(v5 + 16 * v3 + 24);
  uint64_t v26 = v6;
  while (1)
  {
    if (!v6)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    BOOL v8 = __OFSUB__(v6--, 1);
    if (v8) {
      break;
    }
    if (v6 < 0 || v6 >= v26) {
      goto LABEL_23;
    }
    uint64_t v35 = v3;
    uint64_t v9 = *v7;
    *(void *)&long long v33 = *(v7 - 1);
    *((void *)&v33 + 1) = v9;
    sub_256FEED0C(v25 + 32 * v6, (uint64_t)v34, &qword_269FDC6E0);
    long long v31 = v33;
    v32[0] = v34[0];
    v32[1] = v34[1];
    long long v10 = v33;
    v29[2] = v33;
    sub_256FEED0C((uint64_t)v32, (uint64_t)v30, &qword_269FDC6E0);
    sub_256FEED0C((uint64_t)v32, (uint64_t)v29, &qword_269FDC6E0);
    sub_256FEEC3C((uint64_t)v29, (uint64_t)v28);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = (void *)*a3;
    long long v27 = (void *)*a3;
    unint64_t v13 = a3;
    *a3 = 0x8000000000000000;
    unint64_t v15 = sub_256FED050(v10, *((uint64_t *)&v10 + 1));
    uint64_t v16 = v12[2];
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      goto LABEL_24;
    }
    char v19 = v14;
    if (v12[3] >= v18)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        int v22 = v27;
        if (v14) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_256FEDF54();
        int v22 = v27;
        if (v19) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_256FFF5AC(v18, isUniquelyReferenced_nonNull_native);
      unint64_t v20 = sub_256FED050(v10, *((uint64_t *)&v10 + 1));
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_26;
      }
      unint64_t v15 = v20;
      int v22 = v27;
      if (v19)
      {
LABEL_3:
        sub_256FEECA4((uint64_t)v28, v22[7] + 32 * v15);
        goto LABEL_4;
      }
    }
    v22[(v15 >> 6) + 8] |= 1 << v15;
    *(_OWORD *)(v22[6] + 16 * v15) = v10;
    sub_256FEEC3C((uint64_t)v28, v22[7] + 32 * v15);
    uint64_t v23 = v22[2];
    BOOL v8 = __OFADD__(v23, 1);
    uint64_t v24 = v23 + 1;
    if (v8) {
      goto LABEL_25;
    }
    v22[2] = v24;
    swift_bridgeObjectRetain();
LABEL_4:
    uint64_t v3 = v35 - 1;
    v7 -= 2;
    a3 = v13;
    void *v13 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_256FB11E8((uint64_t)v30, &qword_269FDC6E0);
    sub_256FB11E8((uint64_t)&v31, &qword_269FDC710);
    if (!v3) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  unint64_t result = sub_25704B230();
  __break(1u);
  return result;
}

uint64_t sub_256FFC59C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = a2 + 32;
  long long v37 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  BOOL v8 = (uint64_t *)(v5 + 40);
  uint64_t v26 = a3;
  while (1)
  {
    if (!v6)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v9 = *v8;
    *(void *)&long long v35 = *(v8 - 1);
    *((void *)&v35 + 1) = v9;
    sub_256FEED0C(v7, (uint64_t)v36, &qword_269FDC6E0);
    long long v33 = v35;
    v34[0] = v36[0];
    v34[1] = v36[1];
    long long v31 = v35;
    sub_256FEED0C((uint64_t)v37, (uint64_t)v32, &qword_269FDC6E0);
    v30[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
    v29[0] = swift_allocObject();
    sub_256FEEC3C((uint64_t)v32, v29[0] + 16);
    swift_bridgeObjectRetain();
    LOBYTE(v9) = _s8Morpheus0A5UtilsO5isNilySbypFZ_0((uint64_t)v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    if ((v9 & 1) == 0) {
      break;
    }
LABEL_5:
    sub_256FB11E8((uint64_t)&v33, &qword_269FDC710);
    v7 += 32;
    --v6;
    v8 += 2;
    if (!--v3) {
      goto LABEL_19;
    }
  }
  long long v10 = v33;
  long long v31 = v33;
  uint64_t v11 = (uint64_t)v37;
  sub_256FEED0C((uint64_t)v37, (uint64_t)v32, &qword_269FDC6E0);
  sub_256FEED0C(v11, (uint64_t)v30, &qword_269FDC6E0);
  sub_256FEEC3C((uint64_t)v30, (uint64_t)v28);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *a3;
  long long v27 = (void *)*a3;
  *a3 = 0x8000000000000000;
  unint64_t v15 = sub_256FED050(v10, *((uint64_t *)&v10 + 1));
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (!__OFADD__(v16, v17))
  {
    char v19 = v14;
    if (*(void *)(v13 + 24) < v18)
    {
      sub_256FFF5AC(v18, isUniquelyReferenced_nonNull_native);
      unint64_t v20 = sub_256FED050(v10, *((uint64_t *)&v10 + 1));
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_23;
      }
      unint64_t v15 = v20;
      int v22 = v27;
      if ((v19 & 1) == 0) {
        goto LABEL_15;
      }
LABEL_3:
      sub_256FEECA4((uint64_t)v28, v22[7] + 32 * v15);
LABEL_4:
      a3 = v26;
      void *v26 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_256FB11E8((uint64_t)v32, &qword_269FDC6E0);
      goto LABEL_5;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      int v22 = v27;
      if (v14) {
        goto LABEL_3;
      }
    }
    else
    {
      sub_256FEDF54();
      int v22 = v27;
      if (v19) {
        goto LABEL_3;
      }
    }
LABEL_15:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    *(_OWORD *)(v22[6] + 16 * v15) = v10;
    sub_256FEEC3C((uint64_t)v28, v22[7] + 32 * v15);
    uint64_t v23 = v22[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_22;
    }
    v22[2] = v25;
    swift_bridgeObjectRetain();
    goto LABEL_4;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  unint64_t result = sub_25704B230();
  __break(1u);
  return result;
}

void sub_256FFC8DC()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  if (v2)
  {
    BOOL v3 = v1[4] == 1718379891 && v1[5] == 0xE400000000000000;
    if (v3 || (sub_25704B1E0() & 1) != 0)
    {
LABEL_7:
      sub_256FAB1F8(0, 1);
    }
    else if (v2 != 1)
    {
      uint64_t v7 = v1 + 7;
      uint64_t v8 = 1;
      while (1)
      {
        uint64_t v9 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          break;
        }
        BOOL v10 = *(v7 - 1) == 1718379891 && *v7 == 0xE400000000000000;
        if (v10 || (sub_25704B1E0() & 1) != 0) {
          goto LABEL_7;
        }
        v7 += 2;
        ++v8;
        if (v9 == v2) {
          goto LABEL_8;
        }
      }
      __break(1u);
      goto LABEL_37;
    }
  }
LABEL_8:
  unsigned int v4 = (void *)v0[1];
  uint64_t v5 = v4[2];
  if (!v5) {
    return;
  }
  BOOL v6 = v4[4] == 1718379891 && v4[5] == 0xE400000000000000;
  if (v6 || (sub_25704B1E0() & 1) != 0)
  {
LABEL_14:
    sub_256FAB1F8(0, 1);
    return;
  }
  if (v5 != 1)
  {
    uint64_t v11 = v4 + 7;
    for (uint64_t i = 1; ; ++i)
    {
      uint64_t v13 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      BOOL v14 = *(v11 - 1) == 1718379891 && *v11 == 0xE400000000000000;
      if (v14 || (sub_25704B1E0() & 1) != 0) {
        goto LABEL_14;
      }
      v11 += 2;
      if (v13 == v5) {
        return;
      }
    }
LABEL_37:
    __break(1u);
  }
}

uint64_t Function.init(name:arguments:attrs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a3 + 32);
  long long v19 = *(_OWORD *)(a3 + 40);
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v18 = *(void *)(a3 + 64);
  uint64_t v12 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 32) = MEMORY[0x263F8EE78];
  *(void *)(v6 + 40) = v12;
  *(void *)(v6 + 48) = v12;
  *(void *)(v6 + 56) = v12;
  *(void *)(v6 + 64) = v12;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(void *)(v6 + 104) = sub_256FEB040(v12);
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  long long v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 48) = v13;
  *(void *)(v6 + 64) = v10;
  *(_OWORD *)(v6 + 72) = v19;
  *(void *)(v6 + 88) = v11;
  *(void *)(v6 + 96) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v6 + 104) = a4;
  swift_bridgeObjectRelease();
  if (a5)
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a5;
    *(void *)(v14 + 24) = a6;
    *(void *)(v6 + 112) = sub_256FF8190;
    *(void *)(v6 + 120) = v14;
  }
  else
  {
    uint64_t v15 = swift_allocObject();
    swift_weakInit();
    *(void *)(v6 + 112) = sub_256FEE8E4;
    *(void *)(v6 + 120) = v15;
    swift_beginAccess();
    swift_weakAssign();
  }
  return v6;
}

uint64_t sub_256FFCC18()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_256FFCC50@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  sub_25702C07C(Strong, a1);
  return swift_release();
}

uint64_t sub_256FFCCBC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_256FFCCF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v94)(long long *__return_ptr, uint64_t);
  uint64_t v95;
  unsigned char *v96;
  uint64_t result;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned char *v126;
  unsigned char *v127;
  unsigned char *v128;
  uint64_t v130;
  void *v132;
  uint64_t v134;
  os_log_type_t v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  void v141[4];
  long long v142;
  long long v143;
  long long v144;
  long long v145;
  long long v146;
  long long v147;
  unint64_t v148;

  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t v4 = *(void *)(v3 + 56);
  unint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v148 = MEMORY[0x263F8EE78];
  uint64_t v7 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = v4 + 32;
    uint64_t v134 = v4;
    uint64_t v10 = (uint64_t *)(v5 + 40);
    while (v8 < *(void *)(v5 + 16))
    {
      unint64_t v11 = *(void *)(v4 + 16);
      if (v8 == v11) {
        goto LABEL_14;
      }
      if (v8 >= v11) {
        goto LABEL_91;
      }
      uint64_t v12 = *v10;
      *(void *)&uint64_t v142 = *(v10 - 1);
      *((void *)&v142 + 1) = v12;
      sub_256FEED0C(v9, (uint64_t)&v143, &qword_269FDC6E0);
      uint64_t v145 = v142;
      uint64_t v146 = v143;
      uint64_t v147 = v144;
      sub_256FEED0C((uint64_t)&v146, (uint64_t)&v143, &qword_269FDC6E0);
      v141[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
      v141[0] = swift_allocObject();
      sub_256FEEC3C((uint64_t)&v143, v141[0] + 16);
      swift_bridgeObjectRetain();
      LOBYTE(v12) = _s8Morpheus0A5UtilsO5isNilySbypFZ_0((uint64_t)v141);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
      if (v12)
      {
        uint64_t v142 = v145;
        uint64_t v143 = v146;
        unint64_t v144 = v147;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_256F90BD8(0, *(void *)(v6 + 16) + 1, 1);
          uint64_t v4 = v134;
        }
        unint64_t v13 = v148;
        unint64_t v15 = *(void *)(v148 + 16);
        unint64_t v14 = *(void *)(v148 + 24);
        if (v15 >= v14 >> 1)
        {
          sub_256F90BD8(v14 > 1, v15 + 1, 1);
          uint64_t v4 = v134;
          unint64_t v13 = v148;
        }
        *(void *)(v13 + 16) = v15 + 1;
        uint64_t v16 = (_OWORD *)(v13 + 48 * v15);
        _OWORD v16[2] = v142;
        v16[3] = v143;
        v16[4] = v144;
        unint64_t v6 = v13;
      }
      else
      {
        sub_256FB11E8((uint64_t)&v145, &qword_269FDC710);
      }
      ++v8;
      v10 += 2;
      v9 += 32;
      if (v7 == v8) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v17 = *(void *)(v6 + 16);
  if (v17)
  {
    v141[0] = MEMORY[0x263F8EE78];
    sub_256F909F0(0, v17, 0);
    uint64_t v18 = v6 + 32;
    do
    {
      sub_256FEED0C(v18, (uint64_t)&v145, &qword_269FDC710);
      long long v19 = v145;
      uint64_t v142 = v145;
      sub_256FEED0C((uint64_t)&v146, (uint64_t)&v143, &qword_269FDC6E0);
      swift_bridgeObjectRetain();
      sub_256FB11E8((uint64_t)&v143, &qword_269FDC6E0);
      sub_256FB11E8((uint64_t)&v145, &qword_269FDC710);
      uint64_t v20 = v141[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256F909F0(0, *(void *)(v20 + 16) + 1, 1);
        uint64_t v20 = v141[0];
      }
      unint64_t v22 = *(void *)(v20 + 16);
      unint64_t v21 = *(void *)(v20 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_256F909F0(v21 > 1, v22 + 1, 1);
        uint64_t v20 = v141[0];
      }
      *(void *)(v20 + 16) = v22 + 1;
      *(_OWORD *)(v20 + 16 * v22 + 32) = v19;
      v18 += 48;
      --v17;
    }
    while (v17);
  }
  swift_release();
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_256FFE254(v23);
  uint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v26 = sub_257000B40(v25);
  swift_bridgeObjectRelease();
  char v27 = sub_256FFFF6C(v24, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v27)
  {
    swift_bridgeObjectRelease();
    uint64_t v148 = sub_256FEB178(MEMORY[0x263F8EE78]);
    *(void *)&uint64_t v145 = v132[5];
    swift_bridgeObjectRetain();
    uint64_t v28 = swift_bridgeObjectRetain();
    sub_256FA45C8(v28);
    uint64_t v29 = v145;
    uint64_t v30 = v132[8];
    swift_bridgeObjectRetain();
    sub_256FFC2AC(v29, v30, &v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = v132[6];
    uint64_t v32 = v132[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_256FFC59C(v31, v32, &v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = v132[4];
    *(void *)&uint64_t v145 = v132[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_256FA45C8(v33);
    uint64_t v35 = v145;
    MEMORY[0x270FA5388](v34);
    swift_bridgeObjectRetain();
    sub_257000BE0(v35, a1, (void (*)(uint64_t, uint64_t, unsigned char *))sub_257000BD8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v36 = *(void *)(a1 + 16);
    *(void *)&uint64_t v145 = v132[5];
    swift_bridgeObjectRetain();
    uint64_t v37 = swift_bridgeObjectRetain();
    sub_256FA45C8(v37);
    unint64_t v38 = *(void *)(v145 + 16);
    swift_bridgeObjectRelease();
    if (v38 >= v36) {
      goto LABEL_31;
    }
    uint64_t v39 = v132[10];
    if (!v39)
    {
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      uint64_t v119 = sub_25704A550();
      __swift_project_value_buffer(v119, (uint64_t)qword_269FDD648);
      swift_retain();
      uint64_t v120 = sub_25704A530();
      uint64_t v121 = sub_25704AC60();
      if (os_log_type_enabled(v120, v121))
      {
        BOOL v122 = (uint8_t *)swift_slowAlloc();
        uint64_t v123 = swift_slowAlloc();
        *(void *)&uint64_t v145 = v123;
        *(_DWORD *)BOOL v122 = 136315138;
        uint64_t v124 = v132[2];
        unint64_t v125 = v132[3];
        swift_bridgeObjectRetain();
        *(void *)&uint64_t v142 = sub_256FFE924(v124, v125, (uint64_t *)&v145);
        sub_25704AC90();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_256D65000, v120, v121, "Function> More positional args passed for function %s", v122, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v123, -1, -1);
        MEMORY[0x25A2B1FA0](v122, -1, -1);
      }
      else
      {

        swift_release();
      }
      sub_256F92DE8();
      swift_allocError();
      *uint64_t v128 = 2;
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
    uint64_t v40 = v132[9];
    *(void *)&uint64_t v145 = v132[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v41 = swift_bridgeObjectRetain();
    sub_256FA45C8(v41);
    unint64_t v42 = *(void *)(v145 + 16);
    swift_bridgeObjectRelease();
    if (v36 < v42)
    {
      __break(1u);
    }
    else
    {
      sub_25704B1F0();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      uint64_t v43 = swift_dynamicCastClass();
      if (!v43)
      {
        swift_bridgeObjectRelease();
        uint64_t v43 = MEMORY[0x263F8EE78];
      }
      uint64_t v44 = *(void *)(v43 + 16);
      swift_release();
      if (v44 == v36 - v42)
      {
        uint64_t v45 = swift_dynamicCastClass();
        swift_bridgeObjectRelease();
        if (!v45)
        {
          swift_bridgeObjectRelease();
          uint64_t v45 = MEMORY[0x263F8EE78];
        }
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v45 = sub_256FA6D4C(a1, a1 + 32, v42, (2 * v36) | 1);
LABEL_30:
    swift_bridgeObjectRelease();
    *((void *)&v146 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC890);
    *(void *)&uint64_t v145 = v45;
    sub_256FEEC3C((uint64_t)&v145, (uint64_t)&v142);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v141[0] = v148;
    uint64_t v148 = 0x8000000000000000;
    sub_256FED750((uint64_t)&v142, v40, v39, isUniquelyReferenced_nonNull_native);
    uint64_t v148 = v141[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_31:
    *(void *)&uint64_t v145 = v132[4];
    uint64_t v47 = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v48 = swift_bridgeObjectRetain();
    sub_256FA45C8(v48);
    uint64_t v49 = *(void *)(v145 + 16);
    if (v49)
    {
      uint64_t v50 = (uint64_t *)(v145 + 40);
      do
      {
        uint64_t v52 = *(v50 - 1);
        uint64_t v51 = *v50;
        if (*(void *)(v47 + 16))
        {
          swift_bridgeObjectRetain_n();
          unint64_t v53 = sub_256FED050(v52, v51);
          if (v54)
          {
            sub_256FB118C(*(void *)(v47 + 56) + 32 * v53, (uint64_t)&v142);
          }
          else
          {
            uint64_t v142 = 0u;
            uint64_t v143 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v143 + 1))
          {
            sub_256F9ABF4(&v142, &v145);
            sub_256FB118C((uint64_t)&v145, (uint64_t)&v142);
            sub_256FEEC3C((uint64_t)&v142, (uint64_t)v141);
            swift_bridgeObjectRetain();
            char v55 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v56 = v148;
            uint64_t v140 = (void *)v148;
            uint64_t v148 = 0x8000000000000000;
            unint64_t v58 = sub_256FED050(v52, v51);
            uint64_t v59 = *(void *)(v56 + 16);
            BOOL v60 = (v57 & 1) == 0;
            uint64_t v61 = v59 + v60;
            if (__OFADD__(v59, v60)) {
              goto LABEL_92;
            }
            char v62 = v57;
            if (*(void *)(v56 + 24) >= v61)
            {
              if (v55)
              {
                uint64_t v65 = v140;
                if ((v57 & 1) == 0) {
                  goto LABEL_51;
                }
              }
              else
              {
                sub_256FEDF54();
                uint64_t v65 = v140;
                if ((v62 & 1) == 0) {
                  goto LABEL_51;
                }
              }
            }
            else
            {
              sub_256FFF5AC(v61, v55);
              unint64_t v63 = sub_256FED050(v52, v51);
              if ((v62 & 1) != (v64 & 1))
              {
                unint64_t result = sub_25704B230();
                __break(1u);
                return result;
              }
              unint64_t v58 = v63;
              uint64_t v65 = v140;
              if ((v62 & 1) == 0)
              {
LABEL_51:
                v65[(v58 >> 6) + 8] |= 1 << v58;
                uint64_t v66 = (uint64_t *)(v65[6] + 16 * v58);
                uint64_t *v66 = v52;
                v66[1] = v51;
                sub_256FEEC3C((uint64_t)v141, v65[7] + 32 * v58);
                uint64_t v67 = v65[2];
                BOOL v68 = __OFADD__(v67, 1);
                uint64_t v69 = v67 + 1;
                if (v68) {
                  goto LABEL_93;
                }
                v65[2] = v69;
                swift_bridgeObjectRetain();
                goto LABEL_53;
              }
            }
            sub_256FEECA4((uint64_t)v141, v65[7] + 32 * v58);
LABEL_53:
            uint64_t v148 = (unint64_t)v65;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
            goto LABEL_54;
          }
        }
        else
        {
          uint64_t v142 = 0u;
          uint64_t v143 = 0u;
          swift_bridgeObjectRetain();
        }
        sub_256FB11E8((uint64_t)&v142, &qword_269FDC6E0);
LABEL_54:
        swift_bridgeObjectRetain();
        unint64_t v70 = sub_256FED050(v52, v51);
        char v72 = v71;
        swift_bridgeObjectRelease();
        if (v72)
        {
          char v73 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&uint64_t v142 = v47;
          if ((v73 & 1) == 0)
          {
            sub_256FEDD6C();
            uint64_t v47 = v142;
          }
          swift_bridgeObjectRelease();
          sub_256F9ABF4((_OWORD *)(*(void *)(v47 + 56) + 32 * v70), &v145);
          sub_256FED2D8(v70, v47);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v145 = 0u;
          uint64_t v146 = 0u;
        }
        v50 += 2;
        sub_256FB11E8((uint64_t)&v145, &qword_269FDC6E0);
        swift_bridgeObjectRelease();
        --v49;
      }
      while (v49);
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v47 + 16))
    {
      uint64_t v87 = v132[12];
      if (!v87)
      {
        if (qword_269FDC650 != -1) {
          swift_once();
        }
        uint64_t v112 = sub_25704A550();
        __swift_project_value_buffer(v112, (uint64_t)qword_269FDD648);
        swift_retain();
        uint64_t v113 = sub_25704A530();
        uint64_t v114 = sub_25704AC60();
        if (os_log_type_enabled(v113, v114))
        {
          uint64_t v115 = (uint8_t *)swift_slowAlloc();
          uint64_t v116 = swift_slowAlloc();
          *(void *)&uint64_t v145 = v116;
          *(_DWORD *)uint64_t v115 = 136315138;
          uint64_t v117 = v132[2];
          uint64_t v118 = v132[3];
          swift_bridgeObjectRetain();
          *(void *)&uint64_t v142 = sub_256FFE924(v117, v118, (uint64_t *)&v145);
          sub_25704AC90();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_256D65000, v113, v114, "Function> More keyword args passed for function %s", v115, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x25A2B1FA0](v116, -1, -1);
          MEMORY[0x25A2B1FA0](v115, -1, -1);
        }
        else
        {

          swift_release();
        }
        sub_256F92DE8();
        swift_allocError();
        *uint64_t v127 = 3;
        swift_willThrow();
        goto LABEL_86;
      }
      uint64_t v88 = v132[11];
      *((void *)&v146 + 1) = MEMORY[0x263F8D310];
      *(void *)&uint64_t v145 = v88;
      *((void *)&v145 + 1) = v87;
      sub_256FEEC3C((uint64_t)&v145, (uint64_t)&v142);
      swift_bridgeObjectRetain_n();
      char v89 = swift_isUniquelyReferenced_nonNull_native();
      v141[0] = v148;
      uint64_t v148 = 0x8000000000000000;
      sub_256FED750((uint64_t)&v142, v88, v87, v89);
      uint64_t v148 = v141[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v90 = swift_bridgeObjectRetain();
    uint64_t v138 = sub_256FFE254(v90);
    uint64_t v91 = v132[4];
    *(void *)&uint64_t v145 = v132[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_256FA45C8(v91);
    uint64_t v92 = swift_bridgeObjectRetain();
    sub_256FA45C8(v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v93 = sub_257000B40(v145);
    swift_bridgeObjectRelease();
    LOBYTE(v91) = sub_256FFFF6C(v138, v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v91)
    {
      uint64_t v94 = (void (*)(long long *__return_ptr, uint64_t))v132[14];
      swift_retain();
      uint64_t v95 = swift_bridgeObjectRetain();
      v94(&v145, v95);
      swift_bridgeObjectRelease();
      swift_release();
      if (!v130)
      {
        sub_25702BB34((uint64_t)&v145, a3);
        sub_256FB11E8((uint64_t)&v145, &qword_269FDC6E0);
      }
    }
    else
    {
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      unint64_t v98 = sub_25704A550();
      __swift_project_value_buffer(v98, (uint64_t)qword_269FDD648);
      swift_retain_n();
      int64_t v99 = sub_25704A530();
      unint64_t v100 = sub_25704AC60();
      if (os_log_type_enabled(v99, v100))
      {
        unint64_t v101 = swift_slowAlloc();
        uint64_t v139 = swift_slowAlloc();
        *(void *)&uint64_t v142 = v139;
        *(_DWORD *)unint64_t v101 = 136315650;
        uint64_t v136 = v99;
        uint64_t v135 = v100;
        uint64_t v103 = v132[2];
        unint64_t v102 = v132[3];
        swift_bridgeObjectRetain();
        *(void *)&uint64_t v145 = sub_256FFE924(v103, v102, (uint64_t *)&v142);
        sub_25704AC90();
        swift_bridgeObjectRelease();
        *(_WORD *)(v101 + 12) = 2080;
        uint64_t v104 = v132[4];
        *(void *)&uint64_t v145 = v132[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_256FA45C8(v104);
        uint64_t v105 = swift_bridgeObjectRetain();
        sub_256FA45C8(v105);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v106 = MEMORY[0x25A2B0AA0](v145, MEMORY[0x263F8D310]);
        int64_t v108 = v107;
        swift_bridgeObjectRelease();
        *(void *)&uint64_t v145 = sub_256FFE924(v106, v108, (uint64_t *)&v142);
        sub_25704AC90();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v101 + 22) = 2080;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
        uint64_t v109 = sub_25704A5D0();
        uint64_t v111 = v110;
        swift_bridgeObjectRelease();
        v141[0] = sub_256FFE924(v109, v111, (uint64_t *)&v142);
        sub_25704AC90();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_256D65000, v136, v135, "Function> Missing required args for function %s, required: %s, provided: %s", (uint8_t *)v101, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v139, -1, -1);
        MEMORY[0x25A2B1FA0](v101, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      sub_256F92DE8();
      swift_allocError();
      *uint64_t v126 = 4;
      swift_willThrow();
    }
LABEL_86:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (qword_269FDC650 != -1) {
LABEL_94:
  }
    swift_once();
  uint64_t v74 = sub_25704A550();
  __swift_project_value_buffer(v74, (uint64_t)qword_269FDD648);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v75 = sub_25704A530();
  os_log_type_t v76 = sub_25704AC60();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = swift_slowAlloc();
    uint64_t v137 = swift_slowAlloc();
    *(void *)&uint64_t v145 = v137;
    *(_DWORD *)uint64_t v77 = 136315650;
    uint64_t v78 = v132[2];
    unint64_t v79 = v132[3];
    swift_bridgeObjectRetain();
    *(void *)&uint64_t v142 = sub_256FFE924(v78, v79, (uint64_t *)&v145);
    sub_25704AC90();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v77 + 12) = 2080;
    uint64_t v80 = swift_bridgeObjectRetain();
    uint64_t v81 = MEMORY[0x25A2B0AA0](v80, MEMORY[0x263F8D310]);
    unint64_t v83 = v82;
    swift_bridgeObjectRelease();
    *(void *)&uint64_t v142 = sub_256FFE924(v81, v83, (uint64_t *)&v145);
    sub_25704AC90();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v77 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v84 = sub_25704A5D0();
    unint64_t v86 = v85;
    swift_bridgeObjectRelease();
    *(void *)&uint64_t v142 = sub_256FFE924(v84, v86, (uint64_t *)&v145);
    sub_25704AC90();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_256D65000, v75, v76, "Function> Missing required keyword args for function %s, required: %s, provided: %s", (uint8_t *)v77, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25A2B1FA0](v137, -1, -1);
    MEMORY[0x25A2B1FA0](v77, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
  }
  sub_256F92DE8();
  swift_allocError();
  *uint64_t v96 = 1;
  return swift_willThrow();
}

uint64_t sub_256FFE254(uint64_t a1)
{
  uint64_t result = sub_25704AB60();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    unint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_256FFFDBC(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_256FFE3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_256FB118C(a3, (uint64_t)v6);
  swift_bridgeObjectRetain();
  return sub_256FEADBC((uint64_t)v6, a1, a2);
}

uint64_t sub_256FFE448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 104);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_256FED050(a1, a2);
    if (v10)
    {
      sub_256FB118C(*(void *)(v8 + 56) + 32 * v9, (uint64_t)a3);
    }
    else
    {
      *a3 = 0u;
      a3[1] = 0u;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_256FFE4F8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 104);
  if (!*(void *)(v5 + 16))
  {
    long long v10 = 0u;
    long long v11 = 0u;
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_256FED050(a1, a2);
  if (v7)
  {
    sub_256FB118C(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v10);
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1)) {
    goto LABEL_8;
  }
  uint64_t v8 = 1;
LABEL_9:
  sub_256FB11E8((uint64_t)&v10, &qword_269FDC6E0);
  return v8;
}

uint64_t sub_256FFE5CC(uint64_t a1, uint64_t a2)
{
  sub_256FB118C(a1, (uint64_t)v7);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    sub_256FB118C(a2, (uint64_t)v7);
    uint64_t v4 = type metadata accessor for Function();
    if (swift_dynamicCast())
    {
      v7[3] = v4;
      v7[0] = v5;
      swift_beginAccess();
      swift_retain();
      sub_256FEACE4((uint64_t)v7, v5, v6);
      swift_endAccess();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t Function.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t Function.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0228](v0, 128, 7);
}

uint64_t sub_256FFE80C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_256FFE448(a1, a2, a3);
}

uint64_t sub_256FFE830(uint64_t a1, uint64_t a2)
{
  return sub_256FFE4F8(a1, a2) & 1;
}

uint64_t sub_256FFE858(uint64_t a1, uint64_t a2)
{
  return sub_256FFE5CC(a1, a2);
}

uint64_t sub_256FFE884(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_256FFE8AC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_256FFE924(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  sub_25704AC90();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_256FFE924(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_256FFE9F8(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_256FB118C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_256FB118C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_256FFE9F8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_25704ACA0();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_256FFEBB4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_25704AE90();
  if (!v8)
  {
    sub_25704AFC0();
    __break(1u);
LABEL_17:
    uint64_t result = sub_25704B090();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_256FFEBB4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_256FFEC4C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_256FFEE30(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_256FFEE30(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_256FFEC4C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_256FFEDC4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_25704AE00();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_25704AFC0();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_25704A890();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_25704B090();
    __break(1u);
LABEL_14:
    uint64_t result = sub_25704AFC0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_256FFEDC4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC748);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_256FFEE30(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC748);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25704B090();
  __break(1u);
  return result;
}

unsigned char **sub_256FFEF84(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_256FFEF94(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB88);
  uint64_t v6 = sub_25704B070();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_256F9ABF4((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_256F9AC04(v25, (uint64_t)&v38);
      sub_256FB118C(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = sub_25704AD80();
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_256F9ABF4(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_256FFF2AC(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCBC8);
  uint64_t v6 = sub_25704B070();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              unint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_256F9ABF4(v24, v35);
      }
      else
      {
        sub_256FB118C((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_25704B290();
      sub_25704A810();
      uint64_t result = sub_25704B2B0();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_256F9ABF4(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_256FFF5AC(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCBA8);
  uint64_t v6 = sub_25704B070();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v35 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v34) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v34) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v35 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = *(void *)(v5 + 56) + 32 * v17;
    if (a2)
    {
      sub_256FEEC3C(v25, (uint64_t)v36);
    }
    else
    {
      sub_256FEED0C(v25, (uint64_t)v36, &qword_269FDC6E0);
      swift_bridgeObjectRetain();
    }
    sub_25704B290();
    sub_25704A810();
    uint64_t result = sub_25704B2B0();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_256FEEC3C((uint64_t)v36, *(void *)(v7 + 56) + 32 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_256FFF8C8(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB90);
  char v36 = a2;
  uint64_t v6 = sub_25704B070();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    char v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_25704B290();
    sub_25704A810();
    uint64_t result = sub_25704B2B0();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_256FFFBE0()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

_OWORD *sub_256FFFC20(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_256F9ABF4(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

_OWORD *sub_256FFFC9C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_256F9ABF4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_256FFFD08(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_256FEEC3C(a4, a5[7] + 32 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_256FFFD74(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_256FFFDBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_25704B290();
  swift_bridgeObjectRetain();
  sub_25704A810();
  uint64_t v8 = sub_25704B2B0();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_25704B1E0() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      int64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_25704B1E0() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_257000540(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *unint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_256FFFF6C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v31 = a2 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(a2 + 56);
  int64_t v30 = (unint64_t)(63 - v5) >> 6;
  uint64_t v32 = a1 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v12)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (i << 6);
      int64_t v12 = i;
      if (!*(void *)(v4 + 16)) {
        goto LABEL_40;
      }
      goto LABEL_25;
    }
    int64_t v13 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v13 >= v30) {
      goto LABEL_41;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v13);
    int64_t v12 = i + 1;
    if (!v14)
    {
      int64_t v12 = i + 2;
      if (i + 2 >= v30) {
        goto LABEL_41;
      }
      unint64_t v14 = *(void *)(v31 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = i + 3;
        if (i + 3 >= v30) {
          goto LABEL_41;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v12);
        if (!v14) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    if (!*(void *)(v4 + 16))
    {
LABEL_40:
      uint64_t v2 = 0;
      goto LABEL_42;
    }
LABEL_25:
    uint64_t v16 = v3;
    uint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_25704B290();
    swift_bridgeObjectRetain();
    sub_25704A810();
    uint64_t v20 = sub_25704B2B0();
    uint64_t v21 = v4;
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = v20 & ~v22;
    if (((*(void *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v24 = *(void *)(v21 + 48);
    char v25 = (void *)(v24 + 16 * v23);
    BOOL v26 = *v25 == v19 && v25[1] == v18;
    if (!v26 && (sub_25704B1E0() & 1) == 0)
    {
      uint64_t v27 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v27;
        if (((*(void *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
          break;
        }
        uint64_t v28 = (void *)(v24 + 16 * v23);
        BOOL v29 = *v28 == v19 && v28[1] == v18;
        if (v29 || (sub_25704B1E0() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      uint64_t v2 = 0;
LABEL_42:
      sub_256FABF38();
      return v2;
    }
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v3 = v16;
    uint64_t v4 = v21;
  }
  int64_t v15 = i + 4;
  if (i + 4 >= v30)
  {
LABEL_41:
    uint64_t v2 = 1;
    goto LABEL_42;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v15);
  if (v14)
  {
    int64_t v12 = i + 4;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v30) {
      goto LABEL_41;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_24;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_257000260()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCDE8);
  uint64_t v3 = sub_25704ADC0();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_25704B290();
      sub_25704A810();
      uint64_t result = sub_25704B2B0();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_257000540(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_257000260();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_2570006DC();
      goto LABEL_22;
    }
    sub_257000890();
  }
  uint64_t v11 = *v4;
  sub_25704B290();
  sub_25704A810();
  uint64_t result = sub_25704B2B0();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_25704B1E0(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_25704B220();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_25704B1E0();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_2570006DC()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCDE8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25704ADB0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_257000890()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCDE8);
  uint64_t v3 = sub_25704ADC0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_25704B290();
    swift_bridgeObjectRetain();
    sub_25704A810();
    uint64_t result = sub_25704B2B0();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_257000B40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_25704AB60();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_256FFFDBC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_257000BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256FFE3EC(a1, a2, a3);
}

uint64_t sub_257000BE0(uint64_t result, uint64_t a2, void (*a3)(uint64_t, uint64_t, unsigned char *))
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = a2 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t *)(v5 + 40);
    do
    {
      if (!v6) {
        break;
      }
      uint64_t v10 = *v8;
      v11[0] = *(v8 - 1);
      uint64_t v9 = v11[0];
      v11[1] = v10;
      sub_256FB118C(v7, (uint64_t)v12);
      swift_bridgeObjectRetain();
      a3(v9, v10, v12);
      sub_256FB11E8((uint64_t)v11, &qword_269FDCBD0);
      v7 += 32;
      --v6;
      v8 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for Function()
{
  return self;
}

uint64_t destroy for Arguments()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Arguments(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Arguments(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Arguments(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Arguments(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Arguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Arguments()
{
  return &type metadata for Arguments;
}

uint64_t method lookup function for Function(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Function);
}

uint64_t dispatch thunk of Function.__allocating_init(name:arguments:attrs:body:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of Function.call(args:keywords:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of Function.attribute(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of Function.has(attribute:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of Function.store(key:obj:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t sub_2570010DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF2308(*a1, *a2);
}

uint64_t sub_2570010E8()
{
  return sub_25704B2B0();
}

uint64_t sub_257001174()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2570011EC()
{
  return sub_25704B2B0();
}

uint64_t sub_257001274@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_257002638();
  *a1 = result;
  return result;
}

void sub_2570012A4(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE200000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1952867692;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7468676972;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 28783;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_2570012EC()
{
  uint64_t v1 = 1952867692;
  if (*v0 != 1) {
    uint64_t v1 = 0x7468676972;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 28783;
  }
}

uint64_t sub_257001330@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_257002638();
  *a1 = result;
  return result;
}

uint64_t sub_257001358(uint64_t a1)
{
  unint64_t v2 = sub_2570023D8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_257001394(uint64_t a1)
{
  unint64_t v2 = sub_2570023D8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2570013D0(void *a1)
{
  return sub_25700141C(a1);
}

uint64_t sub_25700141C(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCE50);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2570023D8();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for BinOp();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v14[0]) = 0;
    v1[9] = sub_25704B0F0();
    v1[10] = v10;
    v1[5] = sub_2570349D0((uint64_t)v8, 1);
    v1[6] = v11;
    v1[7] = sub_2570349D0((uint64_t)v8, 2);
    v1[8] = v12;
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v14);
    uint64_t v3 = sub_257046164(v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_2570016A4@<X0>(uint64_t a1@<X8>)
{
  void (*v17)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unsigned char *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned char *v50;
  long long v51;
  long long v52;
  uint64_t v53;
  unsigned char v54[32];
  uint64_t v55[3];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[4];
  uint64_t v59[5];
  uint64_t v60;

  uint64_t v3 = v2;
  unint64_t v4 = v1;
  BOOL v60 = a1;
  uint64_t v5 = v1[6];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v8 = v1[4];
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  uint64_t v10 = v1[8];
  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v13 = v1[4];
  unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  v14(v12, v13, v11, v10);
  swift_unknownObjectRelease();
  uint64_t v15 = v1[6];
  uint64_t v16 = swift_getObjectType();
  unint64_t v17 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 64);
  swift_unknownObjectRetain();
  v17(v55, v16, v15);
  if (v3) {
    return swift_unknownObjectRelease();
  }
  int64_t v18 = v60;
  swift_unknownObjectRelease();
  sub_257046318((uint64_t *)&v51);
  sub_256FEA220((uint64_t)v55);
  sub_25702B5F8((uint64_t)&v51, v59);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  uint64_t v19 = v1[8];
  uint64_t v20 = swift_getObjectType();
  uint64_t v21 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 64);
  swift_unknownObjectRetain();
  v21(v55, v20, v19);
  swift_unknownObjectRelease();
  sub_257046318((uint64_t *)&v51);
  sub_256FEA220((uint64_t)v55);
  sub_25702B5F8((uint64_t)&v51, v58);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  swift_bridgeObjectRetain();
  switch(sub_25700238C())
  {
    case 1u:
      sub_256FB118C((uint64_t)v59, (uint64_t)v54);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCE30);
      if (swift_dynamicCast()) {
        goto LABEL_16;
      }
      unint64_t v53 = 0;
      uint64_t v51 = 0u;
      uint64_t v52 = 0u;
      uint64_t v33 = (uint64_t *)&unk_269FDCE38;
      goto LABEL_27;
    case 2u:
      sub_256FB118C((uint64_t)v59, (uint64_t)v54);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCE20);
      if (swift_dynamicCast()) {
        goto LABEL_16;
      }
      unint64_t v53 = 0;
      uint64_t v51 = 0u;
      uint64_t v52 = 0u;
      uint64_t v33 = (uint64_t *)&unk_269FDCE28;
      goto LABEL_27;
    case 3u:
      sub_256FB118C((uint64_t)v59, (uint64_t)v54);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCE10);
      if (swift_dynamicCast()) {
        goto LABEL_16;
      }
      unint64_t v53 = 0;
      uint64_t v51 = 0u;
      uint64_t v52 = 0u;
      uint64_t v33 = (uint64_t *)&unk_269FDCE18;
      goto LABEL_27;
    case 4u:
      sub_256FB118C((uint64_t)v59, (uint64_t)v54);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCE00);
      if (swift_dynamicCast()) {
        goto LABEL_16;
      }
      unint64_t v53 = 0;
      uint64_t v51 = 0u;
      uint64_t v52 = 0u;
      uint64_t v33 = (uint64_t *)&unk_269FDCE08;
      goto LABEL_27;
    case 5u:
      sub_256FB118C((uint64_t)v59, (uint64_t)v54);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCDF0);
      if (swift_dynamicCast()) {
        goto LABEL_16;
      }
      unint64_t v53 = 0;
      uint64_t v51 = 0u;
      uint64_t v52 = 0u;
      uint64_t v33 = (uint64_t *)&unk_269FDCDF8;
      goto LABEL_27;
    case 6u:
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      unint64_t v26 = sub_25704A550();
      __swift_project_value_buffer(v26, (uint64_t)qword_269FDD648);
      swift_retain();
      BOOL v27 = sub_25704A530();
      uint64_t v28 = sub_25704AC60();
      if (os_log_type_enabled(v27, v28))
      {
        int64_t v29 = swift_slowAlloc();
        int64_t v30 = swift_slowAlloc();
        v55[0] = v30;
        *(_DWORD *)int64_t v29 = 136315394;
        uint64_t v31 = v4[9];
        uint64_t v32 = v4[10];
        swift_bridgeObjectRetain();
        *(void *)&uint64_t v51 = sub_256FFE924(v31, v32, v55);
        sub_25704AC90();
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2048;
        *(void *)&uint64_t v51 = v4[2];
        sub_25704AC90();
        swift_release();
        _os_log_impl(&dword_256D65000, v27, v28, "BinOp> Invalid binary operator %s: line %ld", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v30, -1, -1);
        MEMORY[0x25A2B1FA0](v29, -1, -1);
      }
      else
      {

        swift_release();
      }
      sub_256F92DE8();
      swift_allocError();
      *uint64_t v50 = 14;
      goto LABEL_34;
    default:
      sub_256FB118C((uint64_t)v59, (uint64_t)v54);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCE40);
      if (swift_dynamicCast())
      {
LABEL_16:
        sub_256FA81EC(&v51, (uint64_t)v55);
        unint64_t v23 = v56;
        unint64_t v24 = v57;
        __swift_project_boxed_opaque_existential_1(v55, v56);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v24 + 8))(v58, v23, v24);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
        *(unsigned char *)(v18 + 32) = 0;
        char v25 = v55;
      }
      else
      {
        unint64_t v53 = 0;
        uint64_t v51 = 0u;
        uint64_t v52 = 0u;
        uint64_t v33 = (uint64_t *)&unk_269FDCE48;
LABEL_27:
        sub_256FB11E8((uint64_t)&v51, v33);
        sub_256F92DE8();
        swift_allocError();
        *int64_t v34 = 15;
        swift_willThrow();
        if (qword_269FDC650 != -1) {
          swift_once();
        }
        uint64_t v35 = sub_25704A550();
        __swift_project_value_buffer(v35, (uint64_t)qword_269FDD648);
        swift_retain_n();
        char v36 = sub_25704A530();
        uint64_t v37 = sub_25704AC60();
        if (os_log_type_enabled(v36, v37))
        {
          long long v38 = swift_slowAlloc();
          BOOL v60 = swift_slowAlloc();
          v55[0] = v60;
          *(_DWORD *)long long v38 = 136315906;
          long long v39 = v1;
          uint64_t v40 = v1[5];
          swift_getObjectType();
          *(void *)&uint64_t v51 = v40;
          uint64_t v41 = sub_25704B150();
          *(void *)&uint64_t v51 = sub_256FFE924(v41, v42, v55);
          sub_25704AC90();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 12) = 2080;
          uint64_t v43 = v4[7];
          swift_getObjectType();
          *(void *)&uint64_t v51 = v43;
          uint64_t v44 = sub_25704B150();
          *(void *)&uint64_t v51 = sub_256FFE924(v44, v45, v55);
          sub_25704AC90();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 22) = 2080;
          long long v46 = v4[9];
          uint64_t v47 = v4[10];
          swift_bridgeObjectRetain();
          *(void *)&uint64_t v51 = sub_256FFE924(v46, v47, v55);
          sub_25704AC90();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 32) = 2048;
          uint64_t v48 = v39[2];
          swift_release();
          *(void *)&uint64_t v51 = v48;
          sub_25704AC90();
          swift_release();
          _os_log_impl(&dword_256D65000, v36, v37, "BinOp> Left: %s and right: %s are not supported  with op: %s. line %ld", (uint8_t *)v38, 0x2Au);
          uint64_t v49 = v60;
          swift_arrayDestroy();
          MEMORY[0x25A2B1FA0](v49, -1, -1);
          MEMORY[0x25A2B1FA0](v38, -1, -1);
        }
        else
        {

          swift_release_n();
        }
LABEL_34:
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
        char v25 = v59;
      }
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      break;
  }
  return result;
}

uint64_t sub_257002164()
{
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v1 = sub_25704A7E0();
  sub_25704A850();
  swift_bridgeObjectRetain();
  switch(sub_25700238C())
  {
    case 6u:
      __break(1u);
      JUMPOUT(0x2570022C4);
    default:
      sub_25704A850();
      swift_bridgeObjectRelease();
      sub_25704A850();
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_25704A7E0();
      sub_25704A850();
      swift_bridgeObjectRelease();
      return v1;
  }
}

uint64_t sub_2570022E0()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_257002318()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 88, 7);
}

uint64_t type metadata accessor for BinOp()
{
  return self;
}

uint64_t sub_25700238C()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 6) {
    return 6;
  }
  else {
    return v0;
  }
}

unint64_t sub_2570023D8()
{
  unint64_t result = qword_269FDCE58;
  if (!qword_269FDCE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCE58);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BinOp.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2570024F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BinOp.CodingKeys()
{
  return &type metadata for BinOp.CodingKeys;
}

unint64_t sub_257002534()
{
  unint64_t result = qword_269FDCE60;
  if (!qword_269FDCE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCE60);
  }
  return result;
}

unint64_t sub_25700258C()
{
  unint64_t result = qword_269FDCE68;
  if (!qword_269FDCE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCE68);
  }
  return result;
}

unint64_t sub_2570025E4()
{
  unint64_t result = qword_269FDCE70;
  if (!qword_269FDCE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCE70);
  }
  return result;
}

uint64_t sub_257002638()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

float sub_257002684()
{
  mlx_array_eval(*(void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t dtype = mlx_array_get_dtype(v1);
  sub_256FE5804(dtype, &v4);
  if (v4 != 6) {
    mlx_default_device();
  }
  return mlx_array_item_float32(v1);
}

uint64_t sub_257002784()
{
  mlx_array_eval(*(void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t dtype = mlx_array_get_dtype(v1);
  sub_256FE5804(dtype, &v4);
  if (v4 != 5) {
    mlx_default_device();
  }
  return mlx_array_item_int64(v1);
}

uint64_t sub_25700287C()
{
  mlx_array_eval(*(void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t dtype = mlx_array_get_dtype(v1);
  sub_256FE5804(dtype, &v4);
  if (v4 != 4) {
    mlx_default_device();
  }
  return mlx_array_item_int32(v1);
}

uint64_t sub_257002974()
{
  mlx_array_eval(*(void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t dtype = mlx_array_get_dtype(v1);
  sub_256FE5804(dtype, &v4);
  if (v4 != 3) {
    mlx_default_device();
  }
  return mlx_array_item_int8(v1);
}

uint64_t sub_257002A6C()
{
  mlx_array_eval(*(void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t dtype = mlx_array_get_dtype(v1);
  sub_256FE5804(dtype, &v4);
  if (v4 != 2) {
    mlx_default_device();
  }
  return mlx_array_item_uint32(v1);
}

uint64_t sub_257002B64()
{
  mlx_array_eval(*(void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t dtype = mlx_array_get_dtype(v1);
  sub_256FE5804(dtype, &v4);
  if (v4 != 1) {
    mlx_default_device();
  }
  return mlx_array_item_uint8(v1);
}

uint64_t sub_257002C5C()
{
  mlx_array_eval(*(void *)(v0 + 16));
  uint64_t v1 = *(atomic_ullong **)(v0 + 16);
  uint64_t dtype = mlx_array_get_dtype((uint64_t)v1);
  sub_256FE5804(dtype, &v6);
  int v3 = v6;
  if (v6) {
    mlx_default_device();
  }
  uint64_t v4 = mlx_array_item_BOOL((uint64_t)v1);
  if (v3) {
    mlx_free(v1);
  }
  return v4;
}

void *static MLXArray.asAnyArray(_:_:)(uint64_t a1, unsigned __int8 *a2)
{
  return sub_2570049DC(a1, a2);
}

Swift::Bool __swiftcall MLXArray.isScalar()()
{
  if (mlx_array_size(*(void *)(v0 + 16)) != 1) {
    return 0;
  }
  uint64_t v1 = *(void *)(MLXArray.shape.getter() + 16);
  swift_bridgeObjectRelease();
  return v1 == 0;
}

uint64_t sub_257002DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_25704B290();
    sub_25704A810();
    uint64_t v6 = sub_25704B2B0();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_25704B1E0() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_25704B1E0() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t static MLXArray.isMLXArray(_:)(uint64_t a1)
{
  sub_256FB118C(a1, (uint64_t)v3);
  uint64_t v1 = swift_dynamicCast();
  if (v1) {
    swift_release();
  }
  return v1;
}

void MLXArray.scalar()(uint64_t a1@<X8>)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(v1 + 16));
  sub_256FE5804(dtype, &v11);
  switch(v11)
  {
    case 1:
      char v5 = sub_257002B64();
      uint64_t v6 = MEMORY[0x263F8E778];
      goto LABEL_6;
    case 2:
      int v7 = sub_257002A6C();
      uint64_t v8 = MEMORY[0x263F8E8F8];
      goto LABEL_8;
    case 3:
      char v5 = sub_257002974();
      uint64_t v6 = MEMORY[0x263F8E498];
LABEL_6:
      *(void *)(a1 + 24) = v6;
      *(unsigned char *)a1 = v5;
      return;
    case 4:
      int v7 = sub_25700287C();
      uint64_t v8 = MEMORY[0x263F8E548];
LABEL_8:
      *(void *)(a1 + 24) = v8;
      *(_DWORD *)a1 = v7;
      break;
    case 5:
      uint64_t v9 = sub_257002784();
      *(void *)(a1 + 24) = MEMORY[0x263F8E5C0];
      *(void *)a1 = v9;
      break;
    case 6:
      float v10 = sub_257002684();
      *(void *)(a1 + 24) = MEMORY[0x263F8D5C8];
      *(float *)a1 = v10;
      break;
    default:
      char v4 = sub_257002C5C();
      *(void *)(a1 + 24) = MEMORY[0x263F8D4F8];
      *(unsigned char *)a1 = v4 & 1;
      break;
  }
}

double MLXArray.attribute(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v12)(long long *__return_ptr, uint64_t *);
  double result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void (*v28)(long long *);
  uint64_t v29;
  long long v30;
  long long v31;
  _OWORD v32[2];

  uint64_t v4 = v3;
  uint64_t v8 = sub_256FF0708();
  swift_beginAccess();
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(void *)(v9 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_256FED050(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    int64_t v30 = 0u;
    uint64_t v31 = 0u;
    goto LABEL_7;
  }
  BOOL v12 = *(void (**)(long long *__return_ptr, uint64_t *))(*(void *)(v9 + 56) + 16 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12(&v30, &v29);
  swift_release();
  if (*((void *)&v31 + 1))
  {
    sub_256F9ABF4(&v30, v32);
    sub_256F9ABF4(v32, (_OWORD *)a3);
    return result;
  }
LABEL_7:
  sub_256FB11E8((uint64_t)&v30, &qword_269FDC6E0);
  if (a1 == 7235949 && a2 == 0xE300000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    swift_retain();
    uint64_t v14 = MEMORY[0x263F8EE78];
    unint64_t v15 = sub_256FEB040(MEMORY[0x263F8EE78]);
    uint64_t v16 = type metadata accessor for Function();
    BOOL v17 = swift_allocObject();
    *(void *)(v17 + 32) = v14;
    *(void *)(v17 + 40) = v14;
    *(void *)(v17 + 48) = v14;
    *(void *)(v17 + 56) = v14;
    *(void *)(v17 + 64) = v14;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(void *)(v17 + 104) = sub_256FEB040(v14);
    strcpy((char *)(v17 + 16), "np.ndarray.min");
    *(unsigned char *)(v17 + 31) = -18;
    *(void *)(v17 + 32) = v14;
    *(void *)(v17 + 40) = v14;
    *(void *)(v17 + 48) = v14;
    *(void *)(v17 + 56) = v14;
    *(void *)(v17 + 64) = v14;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(void *)(v17 + 104) = v15;
    swift_bridgeObjectRelease();
    int64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_257004E9C;
    *(void *)(v18 + 24) = v4;
    uint64_t v19 = sub_256FF8224;
LABEL_11:
    *(void *)(v17 + 112) = v19;
    *(void *)(v17 + 120) = v18;
    *(void *)(a3 + 24) = v16;
    *(void *)a3 = v17;
    return result;
  }
  if (a1 == 7889261 && a2 == 0xE300000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    swift_retain();
    uint64_t v20 = MEMORY[0x263F8EE78];
    uint64_t v21 = sub_256FEB040(MEMORY[0x263F8EE78]);
    uint64_t v16 = type metadata accessor for Function();
    BOOL v17 = swift_allocObject();
    *(void *)(v17 + 32) = v20;
    *(void *)(v17 + 40) = v20;
    *(void *)(v17 + 48) = v20;
    *(void *)(v17 + 56) = v20;
    *(void *)(v17 + 64) = v20;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(void *)(v17 + 104) = sub_256FEB040(v20);
    strcpy((char *)(v17 + 16), "np.ndarray.max");
    *(unsigned char *)(v17 + 31) = -18;
    *(void *)(v17 + 32) = v20;
    *(void *)(v17 + 40) = v20;
    *(void *)(v17 + 48) = v20;
    *(void *)(v17 + 56) = v20;
    *(void *)(v17 + 64) = v20;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(void *)(v17 + 104) = v21;
    swift_bridgeObjectRelease();
    int64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_257004E48;
    *(void *)(v18 + 24) = v4;
    uint64_t v19 = sub_256FF8190;
    goto LABEL_11;
  }
  if (a1 == 1702521203 && a2 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    uint64_t v22 = mlx_array_size(*(void *)(v4 + 16));
LABEL_21:
    *(void *)(a3 + 24) = MEMORY[0x263F8D6C8];
    *(void *)a3 = v22;
    return result;
  }
  if (a1 == 0x6570616873 && a2 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    unint64_t v23 = MLXArray.shape.getter();
    *(void *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC700);
    *(void *)a3 = v23;
    return result;
  }
  if (a1 == 1835623534 && a2 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    uint64_t v22 = mlx_array_ndim(*(void *)(v4 + 16));
    goto LABEL_21;
  }
  *(void *)&int64_t v30 = v4;
  unint64_t v24 = sub_256FF0708();
  swift_beginAccess();
  char v25 = *(void *)(v24 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  if (*(void *)(v25 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_256FED050(a1, a2);
    if (v27)
    {
      uint64_t v28 = *(void (**)(long long *))(*(void *)(v25 + 56) + 16 * v26);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28(&v30);
      swift_release();
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

void sub_2570035EC()
{
}

void sub_2570036D4()
{
}

double sub_2570037C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MLXArray.attribute(for:)(a1, a2, a3);
}

void *MLXArray.store(key:obj:)(uint64_t a1, uint64_t a2)
{
  LOBYTE(v63[0]) = 7;
  uint64_t result = sub_2570049DC(a2, (unsigned __int8 *)v63);
  if (v3) {
    return result;
  }
  v49[3] = result;
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  char v64 = (void *)MEMORY[0x263F8EE78];
  sub_256FB118C(a1, (uint64_t)&v54);
  v49[5] = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7E0);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(&v60, (uint64_t)v63);
    sub_256F92F24((uint64_t)v63, (uint64_t)&v60);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v64 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v6 = sub_256FA63D8(0, v6[2] + 1, 1, v6);
      char v64 = v6;
    }
    unint64_t v9 = v6[2];
    unint64_t v8 = v6[3];
    if (v9 >= v8 >> 1) {
      char v64 = sub_256FA63D8((void *)(v8 > 1), v9 + 1, 1, v6);
    }
    uint64_t v11 = *((void *)&v61 + 1);
    uint64_t v10 = AssociatedConformanceWitness;
    uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v60, *((uint64_t *)&v61 + 1));
    MEMORY[0x270FA5388](v12);
    uint64_t v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v14);
    sub_257004944(v9, (uint64_t)v14, (uint64_t *)&v64, v11, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    goto LABEL_33;
  }
  uint64_t AssociatedConformanceWitness = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  sub_256FB11E8((uint64_t)&v60, &qword_269FDCE78);
  sub_256FB118C(a1, (uint64_t)&v54);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD78);
  if (swift_dynamicCast())
  {
    v49[1] = v2;
    _OWORD v49[2] = 0;
    sub_256FA81EC(&v60, (uint64_t)v63);
    uint64_t v16 = __swift_project_boxed_opaque_existential_1(v63, v63[3]);
    MEMORY[0x270FA5388](v16);
    (*(void (**)(char *))(v18 + 16))((char *)v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    *((void *)&v61 + 1) = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v60);
    sub_25704A930();
    v49[4] = MEMORY[0x263F8EE58] + 8;
    while (1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v60, *((uint64_t *)&v61 + 1));
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v26 = sub_25704AC70();
      uint64_t v27 = *(void *)(v26 - 8);
      MEMORY[0x270FA5388](v26);
      int64_t v29 = (char *)v49 - v28;
      sub_25704AC80();
      uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v29, 1, AssociatedTypeWitness) == 1) {
        break;
      }
      uint64_t v59 = AssociatedTypeWitness;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v58);
      (*(void (**)(uint64_t *, char *, uint64_t))(v30 + 32))(boxed_opaque_existential_0, v29, AssociatedTypeWitness);
      sub_256F9ABF4(v58, v57);
      sub_256FB118C((uint64_t)v57, (uint64_t)&v53);
      if (swift_dynamicCast())
      {
        sub_256FA81EC(&v50, (uint64_t)&v54);
        sub_256F92F24((uint64_t)&v54, (uint64_t)&v50);
        uint64_t v32 = v64;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v32 = sub_256FA63D8(0, v32[2] + 1, 1, v32);
          char v64 = v32;
        }
        unint64_t v34 = v32[2];
        unint64_t v33 = v32[3];
        if (v34 >= v33 >> 1) {
          char v64 = sub_256FA63D8((void *)(v33 > 1), v34 + 1, 1, v32);
        }
        uint64_t v19 = *((void *)&v51 + 1);
        uint64_t v20 = v52;
        uint64_t v21 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v50, *((uint64_t *)&v51 + 1));
        MEMORY[0x270FA5388](v21);
        unint64_t v23 = (char *)v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v24 + 16))(v23);
        sub_257004944(v34, (uint64_t)v23, (uint64_t *)&v64, v19, v20);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      }
      else
      {
        uint64_t v52 = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        sub_256FB11E8((uint64_t)&v50, &qword_269FDCE78);
        sub_256FB118C((uint64_t)v57, (uint64_t)&v54);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_35;
        }
        if (v50 == __PAIR128__(0xE700000000000000, 0x7369786177656ELL))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v35 = sub_25704B1E0();
          swift_bridgeObjectRelease();
          if ((v35 & 1) == 0)
          {
LABEL_35:
            swift_bridgeObjectRelease();
            if (qword_269FDC650 != -1) {
              swift_once();
            }
            uint64_t v44 = sub_25704A550();
            __swift_project_value_buffer(v44, (uint64_t)qword_269FDD648);
            uint64_t v45 = sub_25704A530();
            os_log_type_t v46 = sub_25704AC60();
            if (os_log_type_enabled(v45, v46))
            {
              uint64_t v47 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v47 = 0;
              _os_log_impl(&dword_256D65000, v45, v46, "Unrecognized MLXArray slice", v47, 2u);
              MEMORY[0x25A2B1FA0](v47, -1, -1);
            }

            sub_256F92DE8();
            swift_allocError();
            *uint64_t v48 = 38;
            swift_willThrow();
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
            return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
          }
        }
        char v36 = v64;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v36 = sub_256FA63D8(0, v36[2] + 1, 1, v36);
        }
        unint64_t v38 = v36[2];
        unint64_t v37 = v36[3];
        if (v38 >= v37 >> 1) {
          char v36 = sub_256FA63D8((void *)(v37 > 1), v38 + 1, 1, v36);
        }
        char v55 = &type metadata for MLXNewAxisIndex;
        unint64_t v56 = &protocol witness table for MLXNewAxisIndex;
        v36[2] = v38 + 1;
        sub_256FA81EC(&v54, (uint64_t)&v36[5 * v38 + 4]);
        char v64 = v36;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
LABEL_33:
    type metadata accessor for Stream();
    swift_initStackObject();
    mlx_default_device();
  }
  uint64_t AssociatedConformanceWitness = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  swift_bridgeObjectRelease();
  sub_256FB11E8((uint64_t)&v60, &qword_269FDCD60);
  if (qword_269FDC650 != -1) {
    swift_once();
  }
  uint64_t v39 = sub_25704A550();
  __swift_project_value_buffer(v39, (uint64_t)qword_269FDD648);
  uint64_t v40 = sub_25704A530();
  os_log_type_t v41 = sub_25704AC60();
  if (os_log_type_enabled(v40, v41))
  {
    unint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v42 = 0;
    _os_log_impl(&dword_256D65000, v40, v41, "Invalid MLXArray slice", v42, 2u);
    MEMORY[0x25A2B1FA0](v42, -1, -1);
  }

  sub_256F92DE8();
  swift_allocError();
  unsigned char *v43 = 38;
  swift_willThrow();
  return (void *)swift_release();
}

void *sub_257004228(uint64_t a1, uint64_t a2)
{
  return MLXArray.store(key:obj:)(a1, a2);
}

void MLXArray.get(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v32[3] = a2;
  _OWORD v32[2] = *v2;
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  v44[0] = MEMORY[0x263F8EE78];
  sub_256FB118C(a1, (uint64_t)&v33);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7E0);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(&v38, (uint64_t)v41);
    sub_256F92F24((uint64_t)v41, (uint64_t)&v38);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v44[0] = (uint64_t)v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v4 = sub_256FA63D8(0, v4[2] + 1, 1, v4);
      v44[0] = (uint64_t)v4;
    }
    unint64_t v7 = v4[2];
    unint64_t v6 = v4[3];
    if (v7 >= v6 >> 1) {
      v44[0] = (uint64_t)sub_256FA63D8((void *)(v6 > 1), v7 + 1, 1, v4);
    }
    uint64_t v8 = *((void *)&v39 + 1);
    uint64_t v9 = (uint64_t)v40;
    uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v38, *((uint64_t *)&v39 + 1));
    MEMORY[0x270FA5388](v10);
    uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v13 + 16))(v12);
    sub_257004944(v7, (uint64_t)v12, v44, v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
    goto LABEL_30;
  }
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  sub_256FB11E8((uint64_t)&v38, &qword_269FDCE78);
  sub_256FB118C(a1, (uint64_t)&v33);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    sub_256FB11E8((uint64_t)&v38, &qword_269FDCAE0);
    goto LABEL_31;
  }
  sub_256FA81EC(&v38, (uint64_t)v41);
  uint64_t v14 = v42;
  uint64_t v15 = v43;
  __swift_project_boxed_opaque_existential_1(v41, v42);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
LABEL_29:
    swift_bridgeObjectRelease();
LABEL_30:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
LABEL_31:
    type metadata accessor for Stream();
    swift_initStackObject();
    mlx_default_device();
  }
  v32[1] = v16;
  uint64_t v18 = v16 + 32;
  while (1)
  {
    sub_256FB118C(v18, (uint64_t)v37);
    sub_256FB118C((uint64_t)v37, (uint64_t)v36);
    if (swift_dynamicCast())
    {
      sub_256FA81EC(&v33, (uint64_t)&v38);
      sub_256F92F24((uint64_t)&v38, (uint64_t)&v33);
      char v25 = (void *)v44[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v25 = sub_256FA63D8(0, v25[2] + 1, 1, v25);
        v44[0] = (uint64_t)v25;
      }
      unint64_t v27 = v25[2];
      unint64_t v26 = v25[3];
      if (v27 >= v26 >> 1) {
        v44[0] = (uint64_t)sub_256FA63D8((void *)(v26 > 1), v27 + 1, 1, v25);
      }
      uint64_t v19 = *((void *)&v34 + 1);
      uint64_t v20 = v35;
      uint64_t v21 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v33, *((uint64_t *)&v34 + 1));
      MEMORY[0x270FA5388](v21);
      unint64_t v23 = (char *)v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v24 + 16))(v23);
      sub_257004944(v27, (uint64_t)v23, v44, v19, v20);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
    }
    else
    {
      uint64_t v35 = 0;
      long long v34 = 0u;
      long long v33 = 0u;
      sub_256FB11E8((uint64_t)&v33, &qword_269FDCE78);
      sub_256FB118C((uint64_t)v37, (uint64_t)&v38);
      if (swift_dynamicCast())
      {
        if (v33 == __PAIR128__(0xE700000000000000, 0x7369786177656ELL))
        {
          swift_bridgeObjectRelease();
LABEL_23:
          int64_t v29 = (void *)v44[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v29 = sub_256FA63D8(0, v29[2] + 1, 1, v29);
          }
          unint64_t v31 = v29[2];
          unint64_t v30 = v29[3];
          if (v31 >= v30 >> 1) {
            int64_t v29 = sub_256FA63D8((void *)(v30 > 1), v31 + 1, 1, v29);
          }
          *((void *)&v39 + 1) = &type metadata for MLXNewAxisIndex;
          uint64_t v40 = &protocol witness table for MLXNewAxisIndex;
          void v29[2] = v31 + 1;
          sub_256FA81EC(&v38, (uint64_t)&v29[5 * v31 + 4]);
          v44[0] = (uint64_t)v29;
          goto LABEL_11;
        }
        char v28 = sub_25704B1E0();
        swift_bridgeObjectRelease();
        if (v28) {
          goto LABEL_23;
        }
      }
      else if (_s8Morpheus0A5UtilsO5isNilySbypFZ_0((uint64_t)v37))
      {
        goto LABEL_23;
      }
    }
LABEL_11:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    v18 += 32;
    if (!--v17) {
      goto LABEL_29;
    }
  }
}

void sub_257004920(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_257004944(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_256FA81EC(&v12, v10 + 40 * a1 + 32);
}

void *sub_2570049DC(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  sub_256FB118C(a1, (uint64_t)v30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(&v27, (uint64_t)v31);
    uint64_t v5 = v32;
    uint64_t v6 = v33;
    unint64_t v7 = __swift_project_boxed_opaque_existential_1(v31, v32);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC890);
    *((void *)&v28 + 1) = v9;
    *(void *)&long long v27 = v8;
    swift_bridgeObjectRetain();
    uint64_t v10 = static MorpheusUtils.getShape(_:)((uint64_t)&v27);
    if (v2)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
LABEL_5:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      return v7;
    }
    uint64_t v11 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    *((void *)&v28 + 1) = v9;
    *(void *)&long long v27 = v8;
    swift_bridgeObjectRetain();
    unint64_t v21 = static MorpheusUtils.flattenNumericArray(_:)((uint64_t)&v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    if (v4 == 7)
    {
      *((void *)&v28 + 1) = v9;
      *(void *)&long long v27 = v8;
      static MorpheusUtils.getType(of:)((uint64_t)&v27, v30);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
      if (v30[0] == 7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (qword_269FDC650 != -1) {
          swift_once();
        }
        uint64_t v22 = sub_25704A550();
        __swift_project_value_buffer(v22, (uint64_t)qword_269FDD648);
        unint64_t v23 = sub_25704A530();
        os_log_type_t v24 = sub_25704AC60();
        unint64_t v7 = (void *)v24;
        if (os_log_type_enabled(v23, v24))
        {
          char v25 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v25 = 0;
          _os_log_impl(&dword_256D65000, v23, (os_log_type_t)v7, "MLXArray> Dtype can't be inferred", v25, 2u);
          MEMORY[0x25A2B1FA0](v25, -1, -1);
        }

        sub_256F92DE8();
        swift_allocError();
        unsigned char *v26 = 33;
        swift_willThrow();
        goto LABEL_5;
      }
      LOBYTE(v27) = v30[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      LOBYTE(v27) = v4;
    }
    unint64_t v14 = _s8Morpheus8MLXArrayCyACSaySo8NSNumberCG_AA5DTypeOSaySiGSgtcfC_0(v21, (unsigned __int8 *)&v27, v11);
LABEL_8:
    unint64_t v7 = (void *)v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    return v7;
  }
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  sub_256FB11E8((uint64_t)&v27, &qword_269FDCAE0);
  sub_256FB118C(a1, (uint64_t)v30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC728);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(&v27, (uint64_t)v31);
    uint64_t v12 = v32;
    uint64_t v13 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    LOBYTE(v27) = 7;
    unint64_t v14 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v13 + 8))(&v27, v12, v13);
    goto LABEL_8;
  }
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  sub_256FB11E8((uint64_t)&v27, &qword_269FDCE80);
  if (qword_269FDC650 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_25704A550();
  __swift_project_value_buffer(v15, (uint64_t)qword_269FDD648);
  uint64_t v16 = sub_25704A530();
  os_log_type_t v17 = sub_25704AC60();
  unint64_t v7 = (void *)v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_256D65000, v16, (os_log_type_t)v7, "MLXArray> Can't convert to MLXArray", v18, 2u);
    MEMORY[0x25A2B1FA0](v18, -1, -1);
  }

  sub_256F92DE8();
  swift_allocError();
  unsigned char *v19 = 37;
  swift_willThrow();
  return v7;
}

void sub_257004E48()
{
}

uint64_t sub_257004E64()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_257004E9C()
{
}

uint64_t sub_257004EB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCDE8);
    uint64_t v3 = sub_25704ADD0();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      sub_25704B290();
      swift_bridgeObjectRetain();
      sub_25704A810();
      uint64_t result = sub_25704B2B0();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (uint64_t result = sub_25704B1E0(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            uint64_t result = sub_25704B1E0();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      unint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *unint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t _s8Morpheus8MLXArrayC3has9attributeSbSS_tF_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_257004EB8((uint64_t)&unk_270638978);
  swift_arrayDestroy();
  char v5 = sub_257002DB0(a1, a2, v4);
  swift_bridgeObjectRelease();
  if (v5)
  {
    char v6 = 1;
  }
  else
  {
    uint64_t v7 = sub_256FF0708();
    swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v8 + 16))
    {
      swift_bridgeObjectRetain();
      sub_256FED050(a1, a2);
      char v6 = v9;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = 0;
    }
    swift_bridgeObjectRelease();
  }
  return v6 & 1;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_2570051A4(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 2;
}

uint64_t sub_2570051BC()
{
  return 0x6B61657262;
}

uint64_t type metadata accessor for Break()
{
  return self;
}

uint64_t sub_2570051F4(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_2570068A0(a1, (uint64_t)sub_257006BF8, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_257005280(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF258C(*a1, *a2);
}

uint64_t sub_25700528C()
{
  return sub_25704B2B0();
}

uint64_t sub_257005328()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2570053B0()
{
  return sub_25704B2B0();
}

uint64_t sub_257005448@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_257007230();
  *a1 = result;
  return result;
}

void sub_257005478(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1936159329;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7364726F7779656BLL;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6E6F6974636E7566;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_2570054D0()
{
  uint64_t v1 = 1936159329;
  if (*v0 != 1) {
    uint64_t v1 = 0x7364726F7779656BLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F6974636E7566;
  }
}

uint64_t sub_257005524@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_257007230();
  *a1 = result;
  return result;
}

uint64_t sub_25700554C(uint64_t a1)
{
  unint64_t v2 = sub_257006FD0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_257005588(uint64_t a1)
{
  unint64_t v2 = sub_257006FD0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2570055C4(void *a1)
{
  return sub_257005610(a1);
}

uint64_t sub_257005610(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCEB8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257006FD0();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Call();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[7] = sub_2570349F0((uint64_t)v8, 0);
    v1[8] = v10;
    v1[5] = sub_25703C680(v8, 1);
    v1[6] = sub_25703C680(v8, 2);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_257005890@<X0>(uint64_t a1@<X8>)
{
  void (*v27)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned char *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[4];
  char v67;
  uint64_t v68[5];
  long long v69;
  long long v70;
  uint64_t v71;
  uint64_t v72[3];
  uint64_t v73;
  uint64_t v74;
  unsigned char v75[40];
  uint64_t v76;

  uint64_t v2 = v1[8];
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v4 = v1 + 3;
  uint64_t v5 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v6 = v1[4];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  v7(v5, v6, ObjectType, v2);
  uint64_t v8 = v1;
  swift_unknownObjectRelease();
  uint64_t v9 = *(void *)(v1[5] + 16);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v11 = *v10;
      uint64_t v12 = swift_getObjectType();
      uint64_t v13 = MEMORY[0x25A2B2020](v4);
      uint64_t v14 = v1[4];
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48);
      swift_unknownObjectRetain();
      uint64_t v16 = v14;
      uint64_t v8 = v1;
      v15(v13, v16, v12, v11);
      swift_unknownObjectRelease();
      v10 += 2;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = *(void *)(v8[6] + 16);
  if (v17)
  {
    uint64_t v18 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v19 = *v18;
      uint64_t v20 = swift_getObjectType();
      uint64_t v21 = MEMORY[0x25A2B2020](v4);
      uint64_t v22 = v1[4];
      BOOL v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 48);
      swift_unknownObjectRetain();
      uint64_t v24 = v22;
      uint64_t v8 = v1;
      v23(v21, v24, v20, v19);
      swift_unknownObjectRelease();
      v18 += 2;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  uint64_t v25 = v8[8];
  uint64_t v26 = swift_getObjectType();
  long long v27 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v25 + 64);
  swift_unknownObjectRetain();
  v27(v72, v26, v25);
  if (v64) {
    return swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  uint64_t v29 = sub_2570431A8();
  sub_256FEA220((uint64_t)v72);
  if (!v29)
  {
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v40 = sub_25704A550();
    __swift_project_value_buffer(v40, (uint64_t)qword_269FDD648);
    swift_retain_n();
    os_log_type_t v41 = sub_25704A530();
    uint64_t v42 = sub_25704AC60();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      v72[0] = v44;
      *(_DWORD *)uint64_t v43 = 136315394;
      swift_getObjectType();
      uint64_t v45 = sub_25704B150();
      *(void *)&uint64_t v69 = sub_256FFE924(v45, v46, v72);
      sub_25704AC90();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2048;
      uint64_t v47 = v8[2];
      swift_release();
      *(void *)&uint64_t v69 = v47;
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v41, v42, "Call> %s is a Function. line %ld", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v44, -1, -1);
      MEMORY[0x25A2B1FA0](v43, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    sub_256F92DE8();
    swift_allocError();
    *long long v60 = 41;
    return swift_willThrow();
  }
  unint64_t v30 = v8[5];
  unint64_t v31 = *(void *)(v30 + 16);
  uint64_t v32 = MEMORY[0x263F8EE78];
  if (v31)
  {
    os_log_type_t v76 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_256F90A58(0, v31, 0);
    uint64_t v32 = v76;
    uint64_t v33 = (uint64_t *)(v30 + 40);
    do
    {
      long long v34 = *v33;
      uint64_t v35 = swift_getObjectType();
      char v36 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v34 + 64);
      swift_unknownObjectRetain();
      v36(v72, v35, v34);
      sub_256FF43DC((uint64_t)v72, (uint64_t)&v69);
      if ((_BYTE)v71
        && (sub_256FEA220((uint64_t)&v69), sub_256FF43DC((uint64_t)v72, (uint64_t)&v69), v71 != 1))
      {
        sub_256FEA220((uint64_t)&v69);
        v66[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
        unint64_t v37 = swift_allocObject();
        v66[0] = v37;
        *(_OWORD *)(v37 + 16) = 0u;
        *(_OWORD *)(v37 + 32) = 0u;
      }
      else
      {
        sub_256FF4438((uint64_t)&v69, (uint64_t)v75, &qword_269FDC6E0);
        sub_25702BB34((uint64_t)v75, v66);
        sub_256FB11E8((uint64_t)v75, &qword_269FDC6E0);
      }
      sub_256FEA220((uint64_t)v72);
      sub_25702B5F8((uint64_t)v66, v68);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
      swift_unknownObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256F90A58(0, *(void *)(v32 + 16) + 1, 1);
        uint64_t v32 = v76;
      }
      long long v39 = *(void *)(v32 + 16);
      long long v38 = *(void *)(v32 + 24);
      if (v39 >= v38 >> 1)
      {
        sub_256F90A58(v38 > 1, v39 + 1, 1);
        uint64_t v32 = v76;
      }
      *(void *)(v32 + 16) = v39 + 1;
      sub_256F9ABF4(v68, (_OWORD *)(v32 + 32 * v39 + 32));
      v33 += 2;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  v72[0] = v32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC890);
  sub_257006844();
  uint64_t v48 = sub_25704A9C0();
  swift_bridgeObjectRelease();
  uint64_t v49 = v1[6];
  long long v50 = *(void *)(v49 + 16);
  if (!v50)
  {
    long long v61 = MEMORY[0x263F8EE80];
    goto LABEL_46;
  }
  unint64_t v63 = v48;
  swift_bridgeObjectRetain_n();
  uint64_t v65 = MEMORY[0x263F8EE80];
  long long v51 = (uint64_t *)(v49 + 40);
  do
  {
    uint64_t v53 = *v51;
    long long v54 = swift_getObjectType();
    char v55 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v53 + 64);
    swift_unknownObjectRetain();
    v55(v68, v54, v53);
    sub_256FF43DC((uint64_t)v68, (uint64_t)v66);
    if (!v67 || (sub_256FEA220((uint64_t)v66), sub_256FF43DC((uint64_t)v68, (uint64_t)v66), v67 == 1))
    {
      sub_256FF4438((uint64_t)v66, (uint64_t)v75, &qword_269FDC6E0);
      sub_256FF4438((uint64_t)v75, (uint64_t)v66, &qword_269FDC6E0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCE98);
      if ((swift_dynamicCast() & 1) == 0)
      {
        char v71 = 0;
        uint64_t v69 = 0u;
        unint64_t v70 = 0u;
      }
    }
    else
    {
      sub_256FEA220((uint64_t)v66);
      uint64_t v69 = 0u;
      unint64_t v70 = 0u;
      char v71 = 0;
    }
    sub_256FEA220((uint64_t)v68);
    if (*((void *)&v70 + 1))
    {
      sub_256FA81EC(&v69, (uint64_t)v72);
      unint64_t v56 = v73;
      char v57 = v74;
      __swift_project_boxed_opaque_existential_1(v72, v73);
      unint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v56, v57);
      uint64_t v59 = sub_2570062C4(v58);
      swift_bridgeObjectRelease();
      if (v59)
      {
        swift_bridgeObjectRetain();
        uint64_t v52 = sub_2570051F4(v59, v65);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v65 = v52;
        goto LABEL_31;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    }
    else
    {
      sub_256FB11E8((uint64_t)&v69, &qword_269FDCE90);
    }
    swift_unknownObjectRelease();
LABEL_31:
    v51 += 2;
    --v50;
  }
  while (v50);
  swift_bridgeObjectRelease_n();
  uint64_t v48 = v63;
  long long v61 = v65;
LABEL_46:
  sub_256FFCCF4(v48, v61, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25702B5F8((uint64_t)v72, (uint64_t *)a1);
  swift_release();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_2570061C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(v8, (uint64_t)v11);
    uint64_t v4 = v12;
    uint64_t v5 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    a2[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC890);
    *a2 = v6;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_256FB11E8((uint64_t)v8, &qword_269FDCAE0);
    return sub_256FB118C(a1, (uint64_t)a2);
  }
}

unint64_t sub_2570062C4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCBC8);
    uint64_t v2 = (void *)sub_25704B080();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v20 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v21 = (unint64_t)(v3 + 63) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (v5) {
    goto LABEL_9;
  }
LABEL_10:
  int64_t v11 = v7 + 1;
  if (__OFADD__(v7, 1)) {
    goto LABEL_36;
  }
  if (v11 >= v21) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v20 + 8 * v11);
  ++v7;
  if (!v12)
  {
    int64_t v7 = v11 + 1;
    if (v11 + 1 >= v21) {
      goto LABEL_32;
    }
    unint64_t v12 = *(void *)(v20 + 8 * v7);
    if (!v12)
    {
      int64_t v7 = v11 + 2;
      if (v11 + 2 >= v21) {
        goto LABEL_32;
      }
      unint64_t v12 = *(void *)(v20 + 8 * v7);
      if (!v12)
      {
        int64_t v13 = v11 + 3;
        if (v13 < v21)
        {
          unint64_t v12 = *(void *)(v20 + 8 * v13);
          if (v12)
          {
            int64_t v7 = v13;
            goto LABEL_23;
          }
          while (1)
          {
            int64_t v7 = v13 + 1;
            if (__OFADD__(v13, 1)) {
              goto LABEL_37;
            }
            if (v7 >= v21) {
              break;
            }
            unint64_t v12 = *(void *)(v20 + 8 * v7);
            ++v13;
            if (v12) {
              goto LABEL_23;
            }
          }
        }
LABEL_32:
        swift_release();
        return (unint64_t)v2;
      }
    }
  }
LABEL_23:
  unint64_t v5 = (v12 - 1) & v12;
  for (unint64_t i = __clz(__rbit64(v12)) + (v7 << 6); ; unint64_t i = v9 | (v7 << 6))
  {
    sub_256F9AC04(*(void *)(a1 + 48) + 40 * i, (uint64_t)v31);
    sub_256FB118C(*(void *)(a1 + 56) + 32 * i, (uint64_t)v32 + 8);
    v29[0] = v32[0];
    v29[1] = v32[1];
    uint64_t v30 = v33;
    v28[0] = v31[0];
    v28[1] = v31[1];
    sub_256F9AC04((uint64_t)v28, (uint64_t)v23);
    if (!swift_dynamicCast() || !*((void *)&v22 + 1))
    {
      sub_256FB11E8((uint64_t)v28, &qword_269FDCEB0);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    sub_256FB118C((uint64_t)v29 + 8, (uint64_t)v23);
    sub_256FB11E8((uint64_t)v28, &qword_269FDCEB0);
    sub_256F9ABF4(v23, v24);
    long long v25 = v22;
    sub_256F9ABF4(v24, v26);
    long long v14 = v25;
    sub_256F9ABF4(v26, v27);
    sub_256F9ABF4(v27, &v25);
    unint64_t result = sub_256FED050(v14, *((uint64_t *)&v14 + 1));
    unint64_t v15 = result;
    if (v16)
    {
      *(_OWORD *)(v2[6] + 16 * result) = v14;
      swift_bridgeObjectRelease();
      uint64_t v8 = (_OWORD *)(v2[7] + 32 * v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      unint64_t result = (unint64_t)sub_256F9ABF4(&v25, v8);
      if (!v5) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v14;
    unint64_t result = (unint64_t)sub_256F9ABF4(&v25, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v17 = v2[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_35;
    }
    v2[2] = v19;
    if (!v5) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_257006658()
{
  swift_getObjectType();
  sub_25704B1B0();
  sub_25704A850();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D0);
  MEMORY[0x25A2B0AA0](v1, v2);
  sub_25704A850();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25704A850();
  uint64_t v3 = swift_bridgeObjectRetain();
  MEMORY[0x25A2B0AA0](v3, v2);
  sub_25704A850();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_257006758()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_257006790()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 72, 7);
}

uint64_t type metadata accessor for Call()
{
  return self;
}

uint64_t sub_257006804()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t sub_257006844()
{
  unint64_t result = qword_269FDCE88;
  if (!qword_269FDCE88)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269FDC890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCE88);
  }
  return result;
}

uint64_t sub_2570068A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_257006DE4(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  sub_256F9ABF4(v49, v47);
  long long v14 = *(void **)a5;
  unint64_t v16 = sub_256FED050(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_256FEDD6C();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    long long v25 = (uint64_t *)(v24[6] + 16 * v16);
    uint64_t *v25 = v13;
    v25[1] = v12;
    sub_256F9ABF4(v47, (_OWORD *)(v24[7] + 32 * v16));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    _OWORD v24[2] = v28;
LABEL_16:
    sub_257006DE4(&v48);
    for (uint64_t i = *((void *)&v48 + 1); *((void *)&v48 + 1); uint64_t i = *((void *)&v48 + 1))
    {
      uint64_t v31 = v48;
      sub_256F9ABF4(v49, v47);
      uint64_t v32 = *(void **)a5;
      unint64_t v34 = sub_256FED050(v31, i);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        sub_256FFF2AC(v37, 1);
        unint64_t v39 = sub_256FED050(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        unint64_t v34 = v39;
      }
      if (v38)
      {
        sub_256FB118C((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        swift_bridgeObjectRelease();
        uint64_t v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        sub_256F9ABF4(v46, v30);
      }
      else
      {
        os_log_type_t v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
        *uint64_t v42 = v31;
        v42[1] = i;
        sub_256F9ABF4(v47, (_OWORD *)(v41[7] + 32 * v34));
        uint64_t v43 = v41[2];
        BOOL v27 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        unint64_t v41[2] = v44;
      }
      sub_257006DE4(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_256FABF38();
    return swift_release();
  }
  sub_256FFF2AC(v19, a4 & 1);
  unint64_t v21 = sub_256FED050(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_256FB118C((uint64_t)v47, (uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    swift_bridgeObjectRelease();
    BOOL v23 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    sub_256F9ABF4(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = sub_25704B230();
  __break(1u);
  return result;
}

uint64_t sub_257006BF8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_256FB118C((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_257006C4C()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    void v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_retain();
    v11(&v19, v20);
    swift_release();
    swift_bridgeObjectRelease();
    return v19;
  }
  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    long long v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      char v15 = v0[1];
      unint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      uint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              BOOL v18 = v3 + 6;
              while (v14 != v18)
              {
                unint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_257006DE4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_256FB118C(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_256FF4438((uint64_t)&v23, (uint64_t)v22, &qword_269FDCEA0);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_256FB11E8((uint64_t)v21, &qword_269FDCEA8);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

unint64_t sub_257006FD0()
{
  unint64_t result = qword_269FDCEC0;
  if (!qword_269FDCEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCEC0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Call.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2570070F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Call.CodingKeys()
{
  return &type metadata for Call.CodingKeys;
}

unint64_t sub_25700712C()
{
  unint64_t result = qword_269FDCEC8;
  if (!qword_269FDCEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCEC8);
  }
  return result;
}

unint64_t sub_257007184()
{
  unint64_t result = qword_269FDCED0;
  if (!qword_269FDCED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCED0);
  }
  return result;
}

unint64_t sub_2570071DC()
{
  unint64_t result = qword_269FDCED8;
  if (!qword_269FDCED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCED8);
  }
  return result;
}

uint64_t sub_257007230()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_25700727C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF20C0(*a1, *a2);
}

uint64_t sub_257007288()
{
  return sub_25704B2B0();
}

uint64_t sub_257007330()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2570073C4()
{
  return sub_25704B2B0();
}

uint64_t sub_257007468@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2570082A8();
  *a1 = result;
  return result;
}

void sub_257007498(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x6B636F6C426669;
  if (*v1 != 1)
  {
    uint64_t v3 = 0x636F6C4265736C65;
    unint64_t v2 = 0xE90000000000006BLL;
  }
  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6F697469646E6F63;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE90000000000006ELL;
  }
  *a1 = v4;
  a1[1] = v5;
}

uint64_t sub_2570074FC()
{
  uint64_t v1 = 0x6B636F6C426669;
  if (*v0 != 1) {
    uint64_t v1 = 0x636F6C4265736C65;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F697469646E6F63;
  }
}

uint64_t sub_25700755C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2570082A8();
  *a1 = result;
  return result;
}

uint64_t sub_257007584(uint64_t a1)
{
  unint64_t v2 = sub_257007FF0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2570075C0(uint64_t a1)
{
  unint64_t v2 = sub_257007FF0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2570075FC(void *a1)
{
  return sub_257007648(a1);
}

uint64_t sub_257007648(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCEE8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[8] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257007FF0();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_release();
    type metadata accessor for Choice();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_257034A10((uint64_t)v8, 0);
    v1[6] = v10;
    char v13 = 1;
    type metadata accessor for LexicalBlock();
    sub_257008044();
    sub_25704B130();
    v1[7] = v12[0];
    char v13 = 2;
    sub_25704B130();
    v1[8] = v12[0];
    swift_release();
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_257007914@<X0>(_OWORD *a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned char *v27;
  _OWORD *v28;
  void v29[5];
  long long v30;
  long long v31;
  char v32;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;

  uint64_t v3 = v2;
  uint64_t v4 = v1;
  BOOL v36 = a1;
  uint64_t v5 = v1[6];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v8 = v1[4];
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  uint64_t v10 = v1[7];
  MEMORY[0x25A2B2020](v4 + 3);
  *(void *)(v10 + 32) = v4[4];
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  uint64_t v11 = v4[8];
  if (v11)
  {
    MEMORY[0x25A2B2020](v4 + 3);
    *(void *)(v11 + 32) = v4[4];
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  uint64_t v12 = v4[6];
  uint64_t v13 = swift_getObjectType();
  int64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 64);
  swift_unknownObjectRetain();
  v14(v29, v13, v12);
  uint64_t result = swift_unknownObjectRelease();
  if (!v3)
  {
    sub_2570430C8((uint64_t)&v30);
    sub_256FEA220((uint64_t)v29);
    if (*((void *)&v31 + 1))
    {
      sub_256FA81EC(&v30, (uint64_t)v33);
      unint64_t v16 = v34;
      int64_t v17 = v35;
      __swift_project_boxed_opaque_existential_1(v33, v34);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17))
      {
        swift_retain();
        sub_257043F7C((uint64_t)v36);
        swift_release();
      }
      else if (v4[8])
      {
        swift_retain();
        sub_257043F7C((uint64_t)&v30);
        swift_release();
        sub_257007F94((uint64_t)&v30, (uint64_t)v36);
      }
      else
      {
        uint64_t v30 = 0u;
        uint64_t v31 = 0u;
        uint64_t v32 = -1;
        uint64_t v28 = v36;
        *BOOL v36 = 0u;
        v28[1] = 0u;
        *((unsigned char *)v28 + 32) = 0;
        sub_256FB11E8((uint64_t)&v30, &qword_269FDCEE0);
      }
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    }
    else
    {
      sub_256FB11E8((uint64_t)&v30, &qword_269FDCAA0);
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      int64_t v18 = sub_25704A550();
      __swift_project_value_buffer(v18, (uint64_t)qword_269FDD648);
      swift_retain_n();
      uint64_t v19 = sub_25704A530();
      char v20 = sub_25704AC60();
      if (os_log_type_enabled(v19, v20))
      {
        unint64_t v21 = swift_slowAlloc();
        char v22 = swift_slowAlloc();
        v33[0] = v22;
        *(_DWORD *)unint64_t v21 = 136315394;
        long long v23 = v4[5];
        swift_getObjectType();
        *(void *)&uint64_t v30 = v23;
        uint64_t v24 = sub_25704B150();
        *(void *)&uint64_t v30 = sub_256FFE924(v24, v25, v33);
        sub_25704AC90();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2048;
        uint64_t v26 = v4[2];
        swift_release();
        *(void *)&uint64_t v30 = v26;
        sub_25704AC90();
        swift_release();
        _os_log_impl(&dword_256D65000, v19, v20, "Choice> Invalid %s. line %ld", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v22, -1, -1);
        MEMORY[0x25A2B1FA0](v21, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      sub_256F92DE8();
      swift_allocError();
      *BOOL v27 = 52;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_257007D54()
{
  swift_getObjectType();
  sub_25704B150();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  swift_retain();
  unint64_t v1 = sub_25704413C();
  unint64_t v3 = v2;
  swift_release();
  sub_257027BBC(v1, v3);
  swift_bridgeObjectRelease();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  uint64_t result = 673212009;
  if (*(void *)(v0 + 64))
  {
    swift_retain();
    unint64_t v5 = sub_25704413C();
    sub_257027BBC(v5, v6);
    swift_bridgeObjectRelease();
    sub_25704A850();
    swift_bridgeObjectRelease();
    sub_25704A850();
    sub_25704A850();
    swift_release();
    swift_bridgeObjectRelease();
    return 673212009;
  }
  return result;
}

uint64_t sub_257007EE8()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_257007F20()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0228](v0, 72, 7);
}

uint64_t type metadata accessor for Choice()
{
  return self;
}

uint64_t sub_257007F94(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_257007FF0()
{
  unint64_t result = qword_269FDCEF0;
  if (!qword_269FDCEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCEF0);
  }
  return result;
}

unint64_t sub_257008044()
{
  unint64_t result = qword_269FDCB58;
  if (!qword_269FDCB58)
  {
    type metadata accessor for LexicalBlock();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCB58);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Choice.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257008168);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Choice.CodingKeys()
{
  return &type metadata for Choice.CodingKeys;
}

unint64_t sub_2570081A4()
{
  unint64_t result = qword_269FDCEF8;
  if (!qword_269FDCEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCEF8);
  }
  return result;
}

unint64_t sub_2570081FC()
{
  unint64_t result = qword_269FDCF00;
  if (!qword_269FDCF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCF00);
  }
  return result;
}

unint64_t sub_257008254()
{
  unint64_t result = qword_269FDCF08;
  if (!qword_269FDCF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCF08);
  }
  return result;
}

uint64_t sub_2570082A8()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_2570082F4(char *a1, char *a2)
{
  return sub_256FF2024(*a1, *a2);
}

uint64_t sub_257008300()
{
  return sub_25704B2B0();
}

uint64_t sub_257008378()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2570083DC()
{
  return sub_25704B2B0();
}

uint64_t sub_257008450@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_2570084B0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 6779489;
  if (*v1) {
    uint64_t v2 = 0x65756C6176;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2570084E4()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 6779489;
  }
}

uint64_t sub_257008514@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_257008578(uint64_t a1)
{
  unint64_t v2 = sub_257008B30();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2570085B4(uint64_t a1)
{
  unint64_t v2 = sub_257008B30();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2570085F0(void *a1)
{
  return sub_25700863C(a1);
}

uint64_t sub_25700863C(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCF20);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[5] = 0;
  v1[6] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257008B30();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    type metadata accessor for Keyword();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v13[0]) = 0;
    v1[5] = sub_25704B0F0();
    v1[6] = v9;
    swift_bridgeObjectRelease();
    v1[7] = sub_257034A30((uint64_t)v8, 1);
    v1[8] = v11;
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v13);
    uint64_t v3 = sub_257046164(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_25700886C@<X0>(uint64_t a1@<X8>)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  unint64_t v18;
  void v19[5];
  _OWORD v20[2];

  uint64_t v3 = v2;
  char v4 = v1;
  uint64_t v6 = v1[8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v9 = v1[4];
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  v10(v8, v9, ObjectType, v6);
  swift_unknownObjectRelease();
  uint64_t v11 = v1[8];
  uint64_t v12 = swift_getObjectType();
  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 64);
  swift_unknownObjectRetain();
  v13(v19, v12, v11);
  uint64_t result = swift_unknownObjectRelease();
  if (!v3)
  {
    sub_257042F14(v20);
    sub_256FEA220((uint64_t)v19);
    int64_t v15 = v1[6];
    if (v15)
    {
      unint64_t v16 = v4[5];
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCF10);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_25706E4C0;
      *(void *)(inited + 32) = v16;
      *(void *)(inited + 40) = v15;
      swift_bridgeObjectRetain();
      sub_25702BB34((uint64_t)v20, (uint64_t *)(inited + 48));
      int64_t v18 = sub_256FEB040(inited);
      *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCF18);
      *(void *)a1 = v18;
    }
    else
    {
      sub_25702BB34((uint64_t)v20, (uint64_t *)a1);
    }
    uint64_t result = sub_256FF0EF4((uint64_t)v20);
    *(unsigned char *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_257008A00()
{
  if (*(void *)(v0 + 48))
  {
    uint64_t v2 = *(void *)(v0 + 40);
    swift_bridgeObjectRetain();
    sub_25704A850();
  }
  else
  {
    uint64_t v2 = 10794;
  }
  swift_getObjectType();
  sub_25704B150();
  sub_25704A850();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_257008A94()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_257008AC4()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 72, 7);
}

uint64_t type metadata accessor for Keyword()
{
  return self;
}

unint64_t sub_257008B30()
{
  unint64_t result = qword_269FDCF28;
  if (!qword_269FDCF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCF28);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Keyword.KeywordCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257008C50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Keyword.KeywordCodingKeys()
{
  return &type metadata for Keyword.KeywordCodingKeys;
}

unint64_t sub_257008C8C()
{
  unint64_t result = qword_269FDCF30;
  if (!qword_269FDCF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCF30);
  }
  return result;
}

unint64_t sub_257008CE4()
{
  unint64_t result = qword_269FDCF38;
  if (!qword_269FDCF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCF38);
  }
  return result;
}

unint64_t sub_257008D3C()
{
  unint64_t result = qword_269FDCF40;
  if (!qword_269FDCF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCF40);
  }
  return result;
}

uint64_t sub_257008D90(char *a1, char *a2)
{
  return sub_256FF2EEC(*a1, *a2);
}

uint64_t sub_257008D9C()
{
  return sub_25704B2B0();
}

uint64_t sub_257008E14()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_257008E78()
{
  return sub_25704B2B0();
}

uint64_t sub_257008EEC@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_257008F4C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7563378;
  if (!*v1) {
    uint64_t v2 = 0x746567726174;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_257008F80()
{
  if (*v0) {
    return 7563378;
  }
  else {
    return 0x746567726174;
  }
}

uint64_t sub_257008FB0@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_257009014(uint64_t a1)
{
  unint64_t v2 = sub_257009648();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_257009050(uint64_t a1)
{
  unint64_t v2 = sub_257009648();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25700908C(void *a1)
{
  return sub_2570090D8(a1);
}

uint64_t sub_2570090D8(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCF48);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257009648();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Assignment();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_257034A50((uint64_t)v8, 0);
    v1[6] = v10;
    v1[7] = sub_257034A50((uint64_t)v8, 1);
    v1[8] = v11;
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v13);
    uint64_t v3 = sub_257046164(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_257009308@<X0>(uint64_t a1@<X8>)
{
  void (*v16)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void *__return_ptr, uint64_t, uint64_t);
  long long v22;
  uint64_t v23;
  _OWORD v24[2];
  void v25[5];
  uint64_t v26[4];
  uint64_t v27;

  uint64_t v3 = v2;
  BOOL v27 = a1;
  uint64_t v4 = v1[6];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v7 = v1[4];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  v8(v6, v7, ObjectType, v4);
  swift_unknownObjectRelease();
  uint64_t v9 = v1[8];
  uint64_t v10 = swift_getObjectType();
  uint64_t v11 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v12 = v1[4];
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  swift_unknownObjectRetain();
  v13(v11, v12, v10, v9);
  swift_unknownObjectRelease();
  uint64_t v14 = v1[6];
  uint64_t v15 = swift_getObjectType();
  unint64_t v16 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 64);
  swift_unknownObjectRetain();
  v16(v25, v15, v14);
  uint64_t result = swift_unknownObjectRelease();
  if (!v3)
  {
    int64_t v18 = v27;
    sub_257046318(v26);
    sub_256FEA220((uint64_t)v25);
    uint64_t v19 = v1[8];
    char v20 = swift_getObjectType();
    unint64_t v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 64);
    swift_unknownObjectRetain();
    v21(v25, v20, v19);
    swift_unknownObjectRelease();
    sub_257042F14(&v22);
    sub_256FEA220((uint64_t)v25);
    if (v23)
    {
      sub_256F9ABF4(&v22, v24);
      sub_25702D748((uint64_t)v24, (uint64_t)v26);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      uint64_t result = sub_256FF0EF4((uint64_t)&v22);
    }
    *(unsigned char *)(v18 + 32) = 0;
    *(_OWORD *)int64_t v18 = 0u;
    *(_OWORD *)(v18 + 16) = 0u;
  }
  return result;
}

uint64_t sub_257009540()
{
  return 0;
}

uint64_t sub_2570095DC()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 72, 7);
}

uint64_t type metadata accessor for Assignment()
{
  return self;
}

unint64_t sub_257009648()
{
  unint64_t result = qword_269FDCF50;
  if (!qword_269FDCF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCF50);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Assignment.AssignmentCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257009768);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Assignment.AssignmentCodingKeys()
{
  return &type metadata for Assignment.AssignmentCodingKeys;
}

unint64_t sub_2570097A4()
{
  unint64_t result = qword_269FDCF58;
  if (!qword_269FDCF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCF58);
  }
  return result;
}

unint64_t sub_2570097FC()
{
  unint64_t result = qword_269FDCF60;
  if (!qword_269FDCF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCF60);
  }
  return result;
}

unint64_t sub_257009854()
{
  unint64_t result = qword_269FDCF68;
  if (!qword_269FDCF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDCF68);
  }
  return result;
}

double static Attributable.customAttribute(for:_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9 = sub_257009CC8(a4);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  v14[0] = a1;
  v14[1] = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269FDC6E0);
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  MEMORY[0x25A2B06F0](&v15, v14, v10, MEMORY[0x263F8D310], FunctionTypeMetadata1, MEMORY[0x263F8D320]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = (uint64_t)v15;
  if (v15)
  {
    v15(a3);
    sub_256FE2168(v12);
  }
  else
  {
    double result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

BOOL static Attributable.hasCustomAttributes(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_257009CC8(a3);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  v10[0] = a1;
  v10[1] = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269FDC6E0);
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  MEMORY[0x25A2B06F0](&v11, v10, v6, MEMORY[0x263F8D310], FunctionTypeMetadata1, MEMORY[0x263F8D320]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v11;
  if (v11) {
    sub_256FE2168(v11);
  }
  return v8 != 0;
}

void *sub_257009AB8()
{
  double result = (void *)sub_256FEB040(MEMORY[0x263F8EE78]);
  off_269FDCF70 = result;
  return result;
}

uint64_t sub_257009AE0()
{
  return swift_endAccess();
}

uint64_t sub_257009BB8()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_257009BF0()
{
  return sub_257009C24();
}

uint64_t sub_257009C24()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269FDC6E0);
  swift_getFunctionTypeMetadata1();
  swift_getTupleTypeMetadata2();
  sub_25704AA80();
  *(void *)(v0 + 16) = sub_25704A5B0();
  return v0;
}

uint64_t sub_257009CC8(uint64_t a1)
{
  *(void *)&long long v11 = a1;
  swift_getMetatypeMetadata();
  uint64_t v1 = sub_25704A7D0();
  uint64_t v3 = v2;
  if (qword_269FDC660 != -1) {
    swift_once();
  }
  swift_beginAccess();
  unsigned int v4 = off_269FDCF70;
  if (*((void *)off_269FDCF70 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_256FED050(v1, v3);
    if (v6)
    {
      sub_256FB118C(v4[7] + 32 * v5, (uint64_t)&v11);
    }
    else
    {
      long long v11 = 0u;
      long long v12 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_endAccess();
  if (!*((void *)&v12 + 1))
  {
    sub_256FF0EF4((uint64_t)&v11);
    goto LABEL_13;
  }
  type metadata accessor for AttributableRegistry();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    uint64_t v8 = type metadata accessor for AttributableRegistry();
    swift_allocObject();
    uint64_t v7 = sub_257009C24();
    *((void *)&v12 + 1) = v8;
    *(void *)&long long v11 = v7;
    swift_beginAccess();
    swift_retain();
    sub_256FEACE4((uint64_t)&v11, v1, v3);
    swift_endAccess();
    return v7;
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t static Attributable.register(attribute:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_257009CC8(a5);
  sub_257009AE0();
  return swift_release();
}

_OWORD *Dictionary<>.attribute(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_25704AC70();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v18 - v12;
  uint64_t v14 = sub_25704A650();
  v18[0] = a3;
  static Attributable.customAttribute(for:_:)(a1, a2, (uint64_t)v18, v14, &v19);
  if (v20) {
    return sub_256F9ABF4(&v19, (_OWORD *)a5);
  }
  v18[0] = a1;
  v18[1] = a2;
  swift_bridgeObjectRetain();
  MEMORY[0x25A2B06F0](v18, a3, MEMORY[0x263F8D310], a4, MEMORY[0x263F8D320]);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  else
  {
    *(void *)(a5 + 24) = a4;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a5);
    (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_0, v13, a4);
  }
  return (_OWORD *)sub_256FF0EF4((uint64_t)&v19);
}

BOOL Dictionary<>.has(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_25704AC70();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v16 - v10;
  v16[0] = a1;
  v16[1] = a2;
  swift_bridgeObjectRetain();
  MEMORY[0x25A2B06F0](v16, a3, MEMORY[0x263F8D310], a4, MEMORY[0x263F8D320]);
  swift_bridgeObjectRelease();
  BOOL v12 = 1;
  int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 48))(v11, 1, a4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v13 == 1)
  {
    uint64_t v14 = sub_25704A650();
    return static Attributable.hasCustomAttributes(attribute:)(a1, a2, v14);
  }
  return v12;
}

_OWORD *sub_25700A294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Dictionary<>.attribute(for:)(a1, a2, *v4, *(void *)(a3 + 24), a4);
}

BOOL sub_25700A2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary<>.has(attribute:)(a1, a2, *v3, *(void *)(a3 + 24));
}

uint64_t dispatch thunk of Attributable.attribute(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of Attributable.has(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t sub_25700A2DC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AttributableRegistry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25700A33C()
{
  return sub_25704B2B0();
}

uint64_t sub_25700A38C()
{
  return sub_25704A810();
}

uint64_t sub_25700A3A0()
{
  return sub_25704B2B0();
}

uint64_t sub_25700A3EC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_25700A440(void *a1@<X8>)
{
  *a1 = 0x7365756C6176;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_25700A458()
{
  return 0x7365756C6176;
}

uint64_t sub_25700A46C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_25700A4C4(uint64_t a1)
{
  unint64_t v2 = sub_25700AAC8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25700A500(uint64_t a1)
{
  unint64_t v2 = sub_25700AAC8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25700A53C(void *a1)
{
  return sub_25700A588(a1);
}

uint64_t sub_25700A588(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCFF8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25700AAC8();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for JoinedStr();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v3 + 40) = sub_25703F8F0(v8);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v9 = sub_257046164(v12);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

uint64_t sub_25700A764@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v4 = 0xE000000000000000;
  uint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  uint64_t result = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    uint64_t v7 = v1;
    uint64_t v18 = a1;
    uint64_t v19 = v1 + 24;
    uint64_t v8 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    while (1)
    {
      uint64_t v27 = v6;
      uint64_t v10 = *v8;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = MEMORY[0x25A2B2020](v19);
      uint64_t v13 = v7;
      uint64_t v14 = *(void *)(v7 + 32);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
      swift_unknownObjectRetain();
      v15(v12, v14, ObjectType, v10);
      v24[4] = 0;
      void v24[5] = 0xE000000000000000;
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 64))(v23, ObjectType, v10);
      if (v3) {
        break;
      }
      sub_256FF43DC((uint64_t)v23, (uint64_t)v20);
      if (!v21 || (sub_256FEA220((uint64_t)v20), sub_256FF43DC((uint64_t)v23, (uint64_t)v20), v21 == 1))
      {
        sub_256FEEC3C((uint64_t)v20, (uint64_t)v22);
        sub_25702BB34((uint64_t)v22, v24);
        sub_256FF0EF4((uint64_t)v22);
      }
      else
      {
        sub_256FEA220((uint64_t)v20);
        v24[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
        uint64_t v16 = swift_allocObject();
        v24[0] = v16;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
      }
      uint64_t v7 = v13;
      uint64_t v9 = v27;
      sub_256FEA220((uint64_t)v23);
      sub_25704AF60();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      sub_25704A850();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v8 += 2;
      uint64_t v6 = v9 - 1;
      if (!v6)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v17 = v25;
        unint64_t v4 = v26;
        a1 = v18;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = 0;
LABEL_11:
    *(void *)(a1 + 24) = MEMORY[0x263F8D310];
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_25700A9BC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D0);
  uint64_t v3 = MEMORY[0x25A2B0AA0](v1, v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_25700AA1C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_25700AA24()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 48, 7);
}

uint64_t type metadata accessor for JoinedStr()
{
  return self;
}

uint64_t sub_25700AA88()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t sub_25700AAC8()
{
  unint64_t result = qword_269FDD000;
  if (!qword_269FDD000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD000);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for JoinedStr.StrideCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25700ABB8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for JoinedStr.StrideCodingKeys()
{
  return &type metadata for JoinedStr.StrideCodingKeys;
}

unint64_t sub_25700ABF4()
{
  unint64_t result = qword_269FDD008;
  if (!qword_269FDD008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD008);
  }
  return result;
}

unint64_t sub_25700AC4C()
{
  unint64_t result = qword_269FDD010;
  if (!qword_269FDD010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD010);
  }
  return result;
}

unint64_t sub_25700ACA4()
{
  unint64_t result = qword_269FDD018;
  if (!qword_269FDD018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD018);
  }
  return result;
}

void Int.subtract(_:)(uint64_t a1, uint64_t a2)
{
  if (a2 == (int)a2) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
}

uint64_t sub_25700ADBC()
{
  uint64_t result = *v0;
  if (*v0 == (int)*v0) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
  return result;
}

void Int32.subtract(_:)()
{
}

void sub_25700AF38()
{
}

atomic_ullong *UInt32.subtract(_:)(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = a2;
  int v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)&v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(1, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_25700B0E0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x25700B0E8);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_25700B100(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = *v1;
  int v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)&v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(1, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_25700B1F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x25700B1FCLL);
  }
  _Unwind_Resume(a1);
}

void Float.subtract(_:)()
{
}

void sub_25700B2C8()
{
}

void Double.subtract(_:)()
{
}

void sub_25700B438()
{
}

void *MLXArray.subtract(_:)(uint64_t a1)
{
  unsigned __int8 v3 = 7;
  uint64_t result = sub_2570049DC(a1, &v3);
  if (!v1) {
    mlx_default_device();
  }
  return result;
}

void *sub_25700B600(uint64_t a1)
{
  return MLXArray.subtract(_:)(a1);
}

uint64_t dispatch thunk of Subtractable.subtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_25700B64C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF1B94(*a1, *a2);
}

uint64_t sub_25700B658()
{
  return sub_25704B2B0();
}

uint64_t sub_25700B6E8()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25700B764()
{
  return sub_25704B2B0();
}

uint64_t sub_25700B7F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25700C8BC();
  *a1 = result;
  return result;
}

void sub_25700B820(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x65756C6176;
  if (v2 != 1)
  {
    uint64_t v5 = 7894115;
    unint64_t v4 = 0xE300000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1920234593;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_25700B86C()
{
  uint64_t v1 = 0x65756C6176;
  if (*v0 != 1) {
    uint64_t v1 = 7894115;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1920234593;
  }
}

uint64_t sub_25700B8B4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25700C8BC();
  *a1 = result;
  return result;
}

uint64_t sub_25700B8DC(uint64_t a1)
{
  unint64_t v2 = sub_25700C65C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25700B918(uint64_t a1)
{
  unint64_t v2 = sub_25700C65C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25700B954(void *a1)
{
  return sub_25700B9A0(a1);
}

uint64_t sub_25700B9A0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD028);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25700C65C();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Attribute();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v13[0]) = 0;
    *(void *)(v1 + 40) = sub_25704B0F0();
    *(void *)(v1 + 48) = v10;
    *(void *)(v1 + 56) = sub_257034A70((uint64_t)v8, 1);
    *(void *)(v1 + 64) = v11;
    char v14 = 2;
    sub_256FF6888();
    sub_25704B130();
    *(unsigned char *)(v1 + 72) = v13[0];
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v13);
    uint64_t v3 = sub_257046164(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_25700BC50@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char v56;
  unsigned char *v57;
  long long v58;
  uint64_t v59;
  long long v60;
  uint64_t v61;
  uint64_t v62[3];
  uint64_t v63;
  uint64_t v64;

  uint64_t v3 = v2;
  unint64_t v4 = (void *)v1;
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = MEMORY[0x25A2B2020](v1 + 24);
  uint64_t v9 = *(void *)(v1 + 32);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  v10(v8, v9, ObjectType, v6);
  uint64_t result = swift_unknownObjectRelease();
  if (*(unsigned char *)(v1 + 72))
  {
    if (*(unsigned char *)(v1 + 72) != 1)
    {
      *(unsigned char *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return result;
    }
    uint64_t v12 = *(void *)(v1 + 64);
    uint64_t v13 = swift_getObjectType();
    char v14 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 64);
    swift_unknownObjectRetain();
    v14(&v58, v13, v12);
    uint64_t result = swift_unknownObjectRelease();
    if (v3) {
      return result;
    }
    sub_257042FD8((uint64_t)&v60);
    sub_256FEA220((uint64_t)&v58);
    if (v61)
    {
      sub_256FA81EC(&v60, (uint64_t)v62);
      sub_256F92F24((uint64_t)v62, (uint64_t)&v60);
      uint64_t v16 = *(void *)(v1 + 40);
      uint64_t v15 = *(void *)(v1 + 48);
      uint64_t v59 = MEMORY[0x263F8D310];
      *(void *)&unint64_t v58 = v16;
      *((void *)&v58 + 1) = v15;
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      *(void *)(a1 + 24) = &type metadata for Store;
      uint64_t v17 = swift_allocObject();
      *(void *)a1 = v17;
      sub_256FA81EC(&v60, v17 + 16);
      uint64_t result = (uint64_t)sub_256F9ABF4(&v58, (_OWORD *)(v17 + 56));
      *(unsigned char *)(a1 + 32) = 0;
      return result;
    }
    sub_256FB11E8((uint64_t)&v60, &qword_269FDCD08);
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    unint64_t v26 = sub_25704A550();
    __swift_project_value_buffer(v26, (uint64_t)qword_269FDD648);
    swift_retain_n();
    uint64_t v27 = sub_25704A530();
    uint64_t v28 = sub_25704AC60();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v62[0] = v30;
      *(_DWORD *)uint64_t v29 = 136315394;
      uint64_t v31 = *(void *)(v1 + 56);
      swift_getObjectType();
      *(void *)&long long v60 = v31;
      uint64_t v32 = sub_25704B150();
      *(void *)&long long v60 = sub_256FFE924(v32, v33, v62);
      sub_25704AC90();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2048;
      unint64_t v34 = v4[2];
      swift_release();
      *(void *)&long long v60 = v34;
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v27, v28, "Attribute> %s is not Storable. line %ld", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v30, -1, -1);
      MEMORY[0x25A2B1FA0](v29, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    sub_256F92DE8();
    swift_allocError();
    uint64_t v56 = 13;
    goto LABEL_27;
  }
  uint64_t v18 = *(void *)(v1 + 64);
  uint64_t v19 = swift_getObjectType();
  uint64_t v20 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v18 + 64);
  swift_unknownObjectRetain();
  v20(&v58, v19, v18);
  uint64_t result = swift_unknownObjectRelease();
  if (v3) {
    return result;
  }
  sub_257042FE4((uint64_t)&v60);
  sub_256FEA220((uint64_t)&v58);
  if (!v61)
  {
    sub_256FB11E8((uint64_t)&v60, &qword_269FDD020);
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v35 = sub_25704A550();
    __swift_project_value_buffer(v35, (uint64_t)qword_269FDD648);
    swift_retain_n();
    BOOL v36 = sub_25704A530();
    uint64_t v37 = sub_25704AC60();
    if (os_log_type_enabled(v36, v37))
    {
      char v38 = swift_slowAlloc();
      unint64_t v39 = swift_slowAlloc();
      v62[0] = v39;
      *(_DWORD *)char v38 = 136315394;
      char v40 = *(void *)(v1 + 56);
      swift_getObjectType();
      *(void *)&long long v60 = v40;
      os_log_type_t v41 = sub_25704B150();
      *(void *)&long long v60 = sub_256FFE924(v41, v42, v62);
      sub_25704AC90();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2048;
      uint64_t v43 = v4[2];
      swift_release();
      *(void *)&long long v60 = v43;
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v36, v37, "Attribute> %s is not Attributable. line %ld", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v39, -1, -1);
      MEMORY[0x25A2B1FA0](v38, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    sub_256F92DE8();
    swift_allocError();
    uint64_t v56 = 10;
LABEL_27:
    ValueMetadata *v55 = v56;
    return swift_willThrow();
  }
  sub_256FA81EC(&v60, (uint64_t)v62);
  char v21 = v63;
  char v22 = v64;
  __swift_project_boxed_opaque_existential_1(v62, v63);
  long long v23 = *(void *)(v1 + 40);
  uint64_t v24 = *(void *)(v1 + 48);
  uint64_t v25 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8);
  swift_bridgeObjectRetain();
  v25(&v58, v23, v24, v21, v22);
  swift_bridgeObjectRelease();
  if (v59)
  {
    sub_256F9ABF4(&v58, &v60);
    sub_256F9ABF4(&v60, (_OWORD *)a1);
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    sub_256FB11E8((uint64_t)&v58, &qword_269FDC6E0);
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_25704A550();
    __swift_project_value_buffer(v44, (uint64_t)qword_269FDD648);
    swift_retain_n();
    uint64_t v45 = sub_25704A530();
    os_log_type_t v46 = sub_25704AC60();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      long long v48 = swift_slowAlloc();
      *(void *)&long long v60 = v48;
      *(_DWORD *)uint64_t v47 = 136315650;
      uint64_t v49 = *(void *)(v1 + 56);
      swift_getObjectType();
      *(void *)&unint64_t v58 = v49;
      uint64_t v50 = sub_25704B150();
      *(void *)&unint64_t v58 = sub_256FFE924(v50, v51, (uint64_t *)&v60);
      sub_25704AC90();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 12) = 2080;
      uint64_t v52 = v4[5];
      uint64_t v53 = v4[6];
      swift_bridgeObjectRetain();
      *(void *)&unint64_t v58 = sub_256FFE924(v52, v53, (uint64_t *)&v60);
      sub_25704AC90();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 22) = 2048;
      uint64_t v54 = v4[2];
      swift_release();
      *(void *)&unint64_t v58 = v54;
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v45, v46, "Attribute> %s does not have attribute %s. line %ld", (uint8_t *)v47, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v48, -1, -1);
      MEMORY[0x25A2B1FA0](v47, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    sub_256F92DE8();
    swift_allocError();
    *char v57 = 11;
    swift_willThrow();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
}

uint64_t sub_25700C518()
{
  return 0;
}

uint64_t sub_25700C5B0()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 73, 7);
}

uint64_t type metadata accessor for Attribute()
{
  return self;
}

uint64_t sub_25700C61C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return MEMORY[0x270FA0238](v0, 88, 7);
}

unint64_t sub_25700C65C()
{
  unint64_t result = qword_269FDD030;
  if (!qword_269FDD030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD030);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Attribute.AttributeCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25700C77CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Attribute.AttributeCodingKeys()
{
  return &type metadata for Attribute.AttributeCodingKeys;
}

unint64_t sub_25700C7B8()
{
  unint64_t result = qword_269FDD038;
  if (!qword_269FDD038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD038);
  }
  return result;
}

unint64_t sub_25700C810()
{
  unint64_t result = qword_269FDD040;
  if (!qword_269FDD040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD040);
  }
  return result;
}

unint64_t sub_25700C868()
{
  unint64_t result = qword_269FDD048;
  if (!qword_269FDD048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD048);
  }
  return result;
}

uint64_t sub_25700C8BC()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_25700C908(uint64_t a1, uint64_t a2)
{
  uint64_t dtype = mlx_array_get_dtype(*(void *)(a1 + 16));
  uint64_t result = sub_256FE5804(dtype, &v5);
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    sub_256FB43B4(a2, v5);
    mlx_default_device();
  }
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_25700CA04(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  swift_retain();
  uint64_t dtype = mlx_array_get_dtype(v8);
  uint64_t result = sub_256FE5804(dtype, &v14);
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_256FB43B4(a2, v14);
  if (a4) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  swift_retain();
  uint64_t v12 = mlx_array_get_dtype(v11);
  uint64_t result = sub_256FE5804(v12, &v13);
  if (a3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_10;
  }
  if (a3 <= 0x7FFFFFFF)
  {
    sub_256FB43B4(a3, v13);
    swift_release();
LABEL_7:
    mlx_clip();
  }
LABEL_11:
  __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_25700CB68()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D8);
  unint64_t v0 = (_OWORD *)swift_allocObject();
  v0[1] = xmmword_25706E4C0;
  v0[2] = 0u;
  v0[3] = 0u;
  uint64_t v1 = MEMORY[0x263F8EE78];
  unint64_t v2 = sub_256FEB040(MEMORY[0x263F8EE78]);
  type metadata accessor for Function();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 40) = v1;
  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 56) = v1;
  *(void *)(v3 + 64) = v1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(void *)(v3 + 104) = sub_256FEB040(v1);
  *(void *)(v3 + 16) = 0x79617272612E706ELL;
  *(void *)(v3 + 24) = 0xE800000000000000;
  *(void *)(v3 + 32) = &unk_270637C88;
  *(void *)(v3 + 40) = v1;
  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 56) = v1;
  *(void *)(v3 + 64) = v0;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v3 + 104) = v2;
  swift_bridgeObjectRelease();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = sub_25700CCD4;
  *(void *)(result + 24) = 0;
  *(void *)(v3 + 112) = sub_256FF8224;
  *(void *)(v3 + 120) = result;
  qword_269FDD668 = v3;
  return result;
}

uint64_t sub_25700CCD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v5 = sub_256FED050(97, 0xE100000000000000), (v6 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v20);
    sub_256F9ABF4(v20, v21);
    if (*(void *)(a1 + 16)
      && (unint64_t v7 = sub_256FED050(0x6570797464, 0xE500000000000000), (v8 & 1) != 0)
      && (sub_256FB118C(*(void *)(a1 + 56) + 32 * v7, (uint64_t)v20), (swift_dynamicCast() & 1) != 0))
    {
      sub_256FE5BE8(v18, v19, (char *)v20);
      char v9 = v20[0];
    }
    else
    {
      char v9 = 7;
    }
    LOBYTE(v20[0]) = v9;
    uint64_t v16 = sub_2570049DC((uint64_t)v21, (unsigned __int8 *)v20);
    if (!v2)
    {
      uint64_t v17 = v16;
      a2[3] = type metadata accessor for MLXArray();
      *a2 = v17;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_25704A550();
    __swift_project_value_buffer(v10, (uint64_t)qword_269FDD648);
    uint64_t v11 = sub_25704A530();
    os_log_type_t v12 = sub_25704AC60();
    if (os_log_type_enabled(v11, v12))
    {
      char v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v13 = 0;
      _os_log_impl(&dword_256D65000, v11, v12, "Missing required args for numpy.array", v13, 2u);
      MEMORY[0x25A2B1FA0](v13, -1, -1);
    }

    sub_256F92DE8();
    swift_allocError();
    *char v14 = 49;
    return swift_willThrow();
  }
}

void *static Numpy.toMLXArray(arg:)(uint64_t a1)
{
  return sub_25701A3F0(a1);
}

uint64_t sub_25700CEEC(uint64_t a1)
{
  uint64_t v2 = mlx_array_ndim(*(void *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 16);
  swift_retain();
  if (v2 == 1)
  {
    mlx_array_ndim(v3);
    if ((int)mlx_array_dim(v3, 0) >= 1)
    {
      type metadata accessor for Stream();
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7F8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_25706E4C0;
      *(void *)(inited + 56) = MEMORY[0x263F8D6C8];
      *(void *)(inited + 64) = &protocol witness table for Int;
      *(void *)(inited + 32) = 0;
      swift_initStackObject();
      mlx_default_device();
    }
  }
  else
  {
    mlx_array_ndim(v3);
    if ((int)mlx_array_dim(v3, 0) >= 1)
    {
      type metadata accessor for Stream();
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7F8);
      uint64_t v5 = swift_initStackObject();
      *(_OWORD *)(v5 + 16) = xmmword_25706E4C0;
      *(void *)(v5 + 56) = MEMORY[0x263F8D6C8];
      *(void *)(v5 + 64) = &protocol witness table for Int;
      *(void *)(v5 + 32) = 0;
      swift_initStackObject();
      mlx_default_device();
    }
  }
  return swift_release();
}

uint64_t sub_25700D5B8(uint64_t a1)
{
  if (mlx_array_ndim(*(void *)(a1 + 16)) == 1) {
    mlx_default_device();
  }
  if (qword_269FDC650 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_25704A550();
  __swift_project_value_buffer(v2, (uint64_t)qword_269FDD648);
  swift_retain();
  uint64_t v3 = sub_25704A530();
  os_log_type_t v4 = sub_25704AC60();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    mlx_array_ndim(*(void *)(a1 + 16));
    sub_25704AC90();
    swift_release();
    _os_log_impl(&dword_256D65000, v3, v4, "Ndim of %ld is not supported for searchsorted", v5, 0xCu);
    MEMORY[0x25A2B1FA0](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  sub_256F92DE8();
  swift_allocError();
  *char v6 = 48;
  return swift_willThrow();
}

void sub_25700E07C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25706E4C0;
  *(void *)(inited + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC858);
  *(void *)(inited + 64) = &protocol witness table for <> PartialRangeUpTo<A>;
  *(void *)(inited + 32) = -1;
  type metadata accessor for Stream();
  swift_initStackObject();
  mlx_default_device();
}

unint64_t sub_25700EB28()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD50);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25706E4C0;
  *(void *)(inited + 32) = 28782;
  *(void *)(inited + 40) = 0xE200000000000000;
  uint64_t v79 = inited;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCF10);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_257071100;
  *(void *)(v1 + 32) = 6712937;
  *(void *)(v1 + 40) = 0xE300000000000000;
  uint64_t v2 = MEMORY[0x263F8D5C8];
  *(_DWORD *)(v1 + 48) = 2139095040;
  *(void *)(v1 + 72) = v2;
  *(void *)(v1 + 80) = 7233902;
  *(void *)(v1 + 88) = 0xE300000000000000;
  *(_DWORD *)(v1 + 96) = 2143289344;
  *(void *)(v1 + 120) = v2;
  *(void *)(v1 + 128) = 0x79617272617361;
  *(void *)(v1 + 136) = 0xE700000000000000;
  if (qword_269FDC668 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_269FDD668;
  uint64_t v4 = type metadata accessor for Function();
  *(void *)(v1 + 144) = v3;
  *(void *)(v1 + 168) = v4;
  *(void *)(v1 + 176) = 0x7961727261;
  *(void *)(v1 + 184) = 0xE500000000000000;
  *(void *)(v1 + 192) = v3;
  *(void *)(v1 + 216) = v4;
  *(void *)(v1 + 224) = 0x727261796E617361;
  *(void *)(v1 + 232) = 0xEA00000000007961;
  *(void *)(v1 + 240) = v3;
  *(void *)(v1 + 264) = v4;
  *(void *)(v1 + 272) = 0x5F6C6F6F62;
  uint64_t v5 = MEMORY[0x263F8D310];
  *(void *)(v1 + 280) = 0xE500000000000000;
  *(void *)(v1 + 288) = 0x5F6C6F6F62;
  *(void *)(v1 + 296) = 0xE500000000000000;
  *(void *)(v1 + 312) = v5;
  *(void *)(v1 + 320) = 0x323374616F6C66;
  *(void *)(v1 + 328) = 0xE700000000000000;
  *(void *)(v1 + 336) = 0x323374616F6C66;
  *(void *)(v1 + 344) = 0xE700000000000000;
  *(void *)(v1 + 360) = v5;
  *(void *)(v1 + 368) = 947154537;
  *(void *)(v1 + 376) = 0xE400000000000000;
  *(void *)(v1 + 384) = 947154537;
  *(void *)(v1 + 392) = 0xE400000000000000;
  *(void *)(v1 + 408) = v5;
  *(void *)(v1 + 416) = 0x3233746E69;
  *(void *)(v1 + 424) = 0xE500000000000000;
  *(void *)(v1 + 432) = 0x3233746E69;
  *(void *)(v1 + 440) = 0xE500000000000000;
  *(void *)(v1 + 456) = v5;
  *(void *)(v1 + 464) = 0x3436746E69;
  *(void *)(v1 + 472) = 0xE500000000000000;
  *(void *)(v1 + 480) = 0x3436746E69;
  *(void *)(v1 + 488) = 0xE500000000000000;
  *(void *)(v1 + 504) = v5;
  *(void *)(v1 + 512) = 0x38746E6975;
  *(void *)(v1 + 520) = 0xE500000000000000;
  *(void *)(v1 + 552) = v5;
  *(void *)(v1 + 528) = 0x38746E6975;
  *(void *)(v1 + 536) = 0xE500000000000000;
  *(void *)(v1 + 560) = 0x3233746E6975;
  *(void *)(v1 + 568) = 0xE600000000000000;
  *(void *)(v1 + 600) = v5;
  *(void *)(v1 + 576) = 0x3233746E6975;
  *(void *)(v1 + 584) = 0xE600000000000000;
  *(void *)(v1 + 608) = 6579297;
  *(void *)(v1 + 616) = 0xE300000000000000;
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_25706E4C0;
  *(void *)(v6 + 32) = 0x656375646572;
  *(void *)(v6 + 40) = 0xE600000000000000;
  swift_retain_n();
  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = sub_256FEB040(MEMORY[0x263F8EE78]);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 32) = v7;
  *(void *)(v9 + 40) = v7;
  *(void *)(v9 + 48) = v7;
  *(void *)(v9 + 56) = v7;
  *(void *)(v9 + 64) = v7;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(void *)(v9 + 104) = sub_256FEB040(v7);
  *(void *)(v9 + 16) = 0x656375646572;
  *(void *)(v9 + 24) = 0xE600000000000000;
  *(void *)(v9 + 32) = &unk_270637D08;
  *(void *)(v9 + 40) = v7;
  *(void *)(v9 + 48) = v7;
  *(void *)(v9 + 56) = v7;
  *(void *)(v9 + 64) = v7;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v9 + 104) = v8;
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_2570105E8;
  *(void *)(v10 + 24) = 0;
  *(void *)(v9 + 112) = sub_256FF8190;
  *(void *)(v9 + 120) = v10;
  *(void *)(v6 + 72) = v4;
  *(void *)(v6 + 48) = v9;
  unint64_t v11 = sub_256FEB040(v6);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 32) = v7;
  *(void *)(v12 + 40) = v7;
  *(void *)(v12 + 48) = v7;
  *(void *)(v12 + 56) = v7;
  *(void *)(v12 + 64) = v7;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(void *)(v12 + 104) = sub_256FEB040(v7);
  *(void *)(v12 + 16) = 0x6464612E706ELL;
  *(void *)(v12 + 24) = 0xE600000000000000;
  *(void *)(v12 + 32) = &unk_270637CC8;
  *(void *)(v12 + 40) = v7;
  *(void *)(v12 + 48) = v7;
  *(void *)(v12 + 56) = v7;
  *(void *)(v12 + 64) = v7;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v12 + 104) = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_257011514;
  *(void *)(v13 + 24) = 0;
  *(void *)(v12 + 112) = sub_256FF8224;
  *(void *)(v12 + 120) = v13;
  *(void *)(v1 + 648) = v4;
  *(void *)(v1 + 624) = v12;
  *(void *)(v1 + 656) = 0x796C7069746C756DLL;
  *(void *)(v1 + 664) = 0xE800000000000000;
  unint64_t v14 = sub_256FEB040(v7);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 32) = v7;
  *(void *)(v15 + 40) = v7;
  *(void *)(v15 + 48) = v7;
  *(void *)(v15 + 56) = v7;
  *(void *)(v15 + 64) = v7;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(void *)(v15 + 104) = sub_256FEB040(v7);
  *(void *)(v15 + 16) = 0x69746C756D2E706ELL;
  *(void *)(v15 + 24) = 0xEB00000000796C70;
  *(void *)(v15 + 32) = &unk_270637D48;
  *(void *)(v15 + 40) = v7;
  *(void *)(v15 + 48) = v7;
  *(void *)(v15 + 56) = v7;
  *(void *)(v15 + 64) = v7;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v15 + 104) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_2570116C0;
  *(void *)(v16 + 24) = 0;
  *(void *)(v15 + 112) = sub_256FF8224;
  *(void *)(v15 + 120) = v16;
  *(void *)(v1 + 696) = v4;
  *(void *)(v1 + 672) = v15;
  *(void *)(v1 + 704) = 0x656469766964;
  *(void *)(v1 + 712) = 0xE600000000000000;
  unint64_t v17 = sub_256FEB040(v7);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 32) = v7;
  *(void *)(v18 + 40) = v7;
  *(void *)(v18 + 48) = v7;
  *(void *)(v18 + 56) = v7;
  *(void *)(v18 + 64) = v7;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(void *)(v18 + 104) = sub_256FEB040(v7);
  *(void *)(v18 + 16) = 0x64697669642E706ELL;
  *(void *)(v18 + 24) = 0xE900000000000065;
  *(void *)(v18 + 32) = &unk_270637D88;
  *(void *)(v18 + 40) = v7;
  *(void *)(v18 + 48) = v7;
  *(void *)(v18 + 56) = v7;
  *(void *)(v18 + 64) = v7;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v18 + 104) = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_25701186C;
  *(void *)(v19 + 24) = 0;
  *(void *)(v18 + 112) = sub_256FF8224;
  *(void *)(v18 + 120) = v19;
  *(void *)(v1 + 744) = v4;
  *(void *)(v1 + 720) = v18;
  *(void *)(v1 + 752) = 0x65706168736572;
  *(void *)(v1 + 760) = 0xE700000000000000;
  unint64_t v20 = sub_256FEB040(v7);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 32) = v7;
  *(void *)(v21 + 40) = v7;
  *(void *)(v21 + 48) = v7;
  *(void *)(v21 + 56) = v7;
  *(void *)(v21 + 64) = v7;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  *(void *)(v21 + 104) = sub_256FEB040(v7);
  *(void *)(v21 + 16) = 0x61687365722E706ELL;
  *(void *)(v21 + 24) = 0xEA00000000006570;
  *(void *)(v21 + 32) = &unk_270637DC8;
  *(void *)(v21 + 40) = v7;
  *(void *)(v21 + 48) = v7;
  *(void *)(v21 + 56) = v7;
  *(void *)(v21 + 64) = v7;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v21 + 104) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_257011A18;
  *(void *)(v22 + 24) = 0;
  *(void *)(v21 + 112) = sub_256FF8224;
  *(void *)(v21 + 120) = v22;
  *(void *)(v1 + 792) = v4;
  *(void *)(v1 + 768) = v21;
  *(void *)(v1 + 800) = 0x657571696E75;
  *(void *)(v1 + 808) = 0xE600000000000000;
  unint64_t v23 = sub_256FEB040(v7);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 32) = v7;
  *(void *)(v24 + 40) = v7;
  *(void *)(v24 + 48) = v7;
  *(void *)(v24 + 56) = v7;
  *(void *)(v24 + 64) = v7;
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 88) = 0u;
  *(void *)(v24 + 104) = sub_256FEB040(v7);
  *(void *)(v24 + 16) = 0x7571696E752E706ELL;
  *(void *)(v24 + 24) = 0xE900000000000065;
  *(void *)(v24 + 32) = &unk_270637E08;
  *(void *)(v24 + 40) = v7;
  *(void *)(v24 + 48) = v7;
  *(void *)(v24 + 56) = v7;
  *(void *)(v24 + 64) = v7;
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v24 + 104) = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_257011D68;
  *(void *)(v25 + 24) = 0;
  *(void *)(v24 + 112) = sub_256FF8224;
  *(void *)(v24 + 120) = v25;
  *(void *)(v1 + 840) = v4;
  *(void *)(v1 + 816) = v24;
  *(void *)(v1 + 848) = 0x6C61757165;
  *(void *)(v1 + 856) = 0xE500000000000000;
  unint64_t v26 = sub_256FEB040(v7);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 32) = v7;
  *(void *)(v27 + 40) = v7;
  *(void *)(v27 + 48) = v7;
  *(void *)(v27 + 56) = v7;
  *(void *)(v27 + 64) = v7;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_OWORD *)(v27 + 88) = 0u;
  *(void *)(v27 + 104) = sub_256FEB040(v7);
  *(void *)(v27 + 16) = 0x6C617571652E706ELL;
  *(void *)(v27 + 24) = 0xE800000000000000;
  *(void *)(v27 + 32) = &unk_270637E38;
  *(void *)(v27 + 40) = v7;
  *(void *)(v27 + 48) = v7;
  *(void *)(v27 + 56) = v7;
  *(void *)(v27 + 64) = v7;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_OWORD *)(v27 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v27 + 104) = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = sub_257011EF8;
  *(void *)(v28 + 24) = 0;
  *(void *)(v27 + 112) = sub_256FF8224;
  *(void *)(v27 + 120) = v28;
  *(void *)(v1 + 888) = v4;
  *(void *)(v1 + 864) = v27;
  *(void *)(v1 + 896) = 0x74726F73677261;
  *(void *)(v1 + 904) = 0xE700000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D8);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_25706E4C0;
  uint64_t v30 = MEMORY[0x263F8D6C8];
  *(void *)(v29 + 56) = MEMORY[0x263F8D6C8];
  *(void *)(v29 + 32) = -1;
  unint64_t v31 = sub_256FEB040(v7);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 32) = v7;
  *(void *)(v32 + 40) = v7;
  *(void *)(v32 + 48) = v7;
  *(void *)(v32 + 56) = v7;
  *(void *)(v32 + 64) = v7;
  *(_OWORD *)(v32 + 72) = 0u;
  *(_OWORD *)(v32 + 88) = 0u;
  *(void *)(v32 + 104) = sub_256FEB040(v7);
  *(void *)(v32 + 16) = 0x6F736772612E706ELL;
  *(void *)(v32 + 24) = 0xEA00000000007472;
  *(void *)(v32 + 32) = &unk_270637E78;
  *(void *)(v32 + 40) = v7;
  *(void *)(v32 + 48) = v7;
  *(void *)(v32 + 56) = v7;
  *(void *)(v32 + 64) = v29;
  *(_OWORD *)(v32 + 72) = 0u;
  *(_OWORD *)(v32 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v32 + 104) = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = sub_2570120A4;
  *(void *)(v33 + 24) = 0;
  *(void *)(v32 + 112) = sub_256FF8224;
  *(void *)(v32 + 120) = v33;
  *(void *)(v1 + 936) = v4;
  *(void *)(v1 + 912) = v32;
  *(void *)(v1 + 944) = 1717987684;
  *(void *)(v1 + 952) = 0xE400000000000000;
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_25706E4C0;
  *(void *)(v34 + 56) = v30;
  *(void *)(v34 + 32) = 1;
  unint64_t v35 = sub_256FEB040(v7);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 32) = v7;
  *(void *)(v36 + 40) = v7;
  *(void *)(v36 + 48) = v7;
  *(void *)(v36 + 56) = v7;
  *(void *)(v36 + 64) = v7;
  *(_OWORD *)(v36 + 72) = 0u;
  *(_OWORD *)(v36 + 88) = 0u;
  *(void *)(v36 + 104) = sub_256FEB040(v7);
  *(void *)(v36 + 16) = 0x666669642E706ELL;
  *(void *)(v36 + 24) = 0xE700000000000000;
  *(void *)(v36 + 32) = &unk_270637EB8;
  *(void *)(v36 + 40) = v7;
  *(void *)(v36 + 48) = v7;
  *(void *)(v36 + 56) = v7;
  *(void *)(v36 + 64) = v34;
  *(_OWORD *)(v36 + 72) = 0u;
  *(_OWORD *)(v36 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v36 + 104) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = sub_257012284;
  *(void *)(v37 + 24) = 0;
  *(void *)(v36 + 112) = sub_256FF8224;
  *(void *)(v36 + 120) = v37;
  *(void *)(v1 + 984) = v4;
  *(void *)(v1 + 960) = v36;
  *(void *)(v1 + 992) = 0x6572656877;
  *(void *)(v1 + 1000) = 0xE500000000000000;
  unint64_t v38 = sub_256FEB040(v7);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 32) = v7;
  *(void *)(v39 + 40) = v7;
  *(void *)(v39 + 48) = v7;
  *(void *)(v39 + 56) = v7;
  *(void *)(v39 + 64) = v7;
  *(_OWORD *)(v39 + 72) = 0u;
  *(_OWORD *)(v39 + 88) = 0u;
  *(void *)(v39 + 104) = sub_256FEB040(v7);
  *(void *)(v39 + 16) = 0x65726568772E706ELL;
  *(void *)(v39 + 24) = 0xE800000000000000;
  *(void *)(v39 + 32) = &unk_270637EF8;
  *(void *)(v39 + 40) = v7;
  *(void *)(v39 + 48) = v7;
  *(void *)(v39 + 56) = v7;
  *(void *)(v39 + 64) = v7;
  *(_OWORD *)(v39 + 72) = 0u;
  *(_OWORD *)(v39 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v39 + 104) = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = sub_257012640;
  *(void *)(v40 + 24) = 0;
  *(void *)(v39 + 112) = sub_256FF8224;
  *(void *)(v39 + 120) = v40;
  *(void *)(v1 + 1032) = v4;
  *(void *)(v1 + 1008) = v39;
  *(void *)(v1 + 1040) = 0x6E657461636E6F63;
  *(void *)(v1 + 1048) = 0xEB00000000657461;
  unint64_t v41 = sub_256FEB040(v7);
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 32) = v7;
  *(void *)(v42 + 40) = v7;
  *(void *)(v42 + 48) = v7;
  *(void *)(v42 + 56) = v7;
  *(void *)(v42 + 64) = v7;
  *(_OWORD *)(v42 + 72) = 0u;
  *(_OWORD *)(v42 + 88) = 0u;
  *(void *)(v42 + 104) = sub_256FEB040(v7);
  strcpy((char *)(v42 + 16), "np.concatenate");
  *(unsigned char *)(v42 + 31) = -18;
  *(void *)(v42 + 32) = &unk_270637F48;
  *(void *)(v42 + 40) = v7;
  *(void *)(v42 + 48) = v7;
  *(void *)(v42 + 56) = v7;
  *(void *)(v42 + 64) = v7;
  *(_OWORD *)(v42 + 72) = 0u;
  *(_OWORD *)(v42 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v42 + 104) = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = sub_257012994;
  *(void *)(v43 + 24) = 0;
  *(void *)(v42 + 112) = sub_256FF8224;
  *(void *)(v42 + 120) = v43;
  *(void *)(v1 + 1080) = v4;
  *(void *)(v1 + 1056) = v42;
  *(void *)(v1 + 1088) = 0x6D75736D7563;
  *(void *)(v1 + 1096) = 0xE600000000000000;
  unint64_t v44 = sub_256FEB040(v7);
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 32) = v7;
  *(void *)(v45 + 40) = v7;
  *(void *)(v45 + 48) = v7;
  *(void *)(v45 + 56) = v7;
  *(void *)(v45 + 64) = v7;
  *(_OWORD *)(v45 + 72) = 0u;
  *(_OWORD *)(v45 + 88) = 0u;
  *(void *)(v45 + 104) = sub_256FEB040(v7);
  *(void *)(v45 + 16) = 0x75736D75632E706ELL;
  *(void *)(v45 + 24) = 0xE90000000000006DLL;
  *(void *)(v45 + 32) = &unk_270637F78;
  *(void *)(v45 + 40) = v7;
  *(void *)(v45 + 48) = v7;
  *(void *)(v45 + 56) = v7;
  *(void *)(v45 + 64) = v7;
  *(_OWORD *)(v45 + 72) = 0u;
  *(_OWORD *)(v45 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v45 + 104) = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = sub_257012D38;
  *(void *)(v46 + 24) = 0;
  *(void *)(v45 + 112) = sub_256FF8224;
  *(void *)(v45 + 120) = v46;
  *(void *)(v1 + 1128) = v4;
  *(void *)(v1 + 1104) = v45;
  *(void *)(v1 + 1136) = 0x5F6C616369676F6CLL;
  *(void *)(v1 + 1144) = 0xEA0000000000726FLL;
  unint64_t v47 = sub_256FEB040(v7);
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 32) = v7;
  *(void *)(v48 + 40) = v7;
  *(void *)(v48 + 48) = v7;
  *(void *)(v48 + 56) = v7;
  *(void *)(v48 + 64) = v7;
  *(_OWORD *)(v48 + 72) = 0u;
  *(_OWORD *)(v48 + 88) = 0u;
  *(void *)(v48 + 104) = sub_256FEB040(v7);
  strcpy((char *)(v48 + 16), "np.logical_or");
  *(_WORD *)(v48 + 30) = -4864;
  *(void *)(v48 + 32) = &unk_270637FA8;
  *(void *)(v48 + 40) = v7;
  *(void *)(v48 + 48) = v7;
  *(void *)(v48 + 56) = v7;
  *(void *)(v48 + 64) = v7;
  *(_OWORD *)(v48 + 72) = 0u;
  *(_OWORD *)(v48 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v48 + 104) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = sub_257012EB0;
  *(void *)(v49 + 24) = 0;
  *(void *)(v48 + 112) = sub_256FF8224;
  *(void *)(v48 + 120) = v49;
  *(void *)(v1 + 1176) = v4;
  *(void *)(v1 + 1152) = v48;
  *(void *)(v1 + 1184) = 0x6F72657A6E6F6ELL;
  *(void *)(v1 + 1192) = 0xE700000000000000;
  unint64_t v50 = sub_256FEB040(v7);
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 32) = v7;
  *(void *)(v51 + 40) = v7;
  *(void *)(v51 + 48) = v7;
  *(void *)(v51 + 56) = v7;
  *(void *)(v51 + 64) = v7;
  *(_OWORD *)(v51 + 72) = 0u;
  *(_OWORD *)(v51 + 88) = 0u;
  *(void *)(v51 + 104) = sub_256FEB040(v7);
  *(void *)(v51 + 16) = 0x657A6E6F6E2E706ELL;
  *(void *)(v51 + 24) = 0xEA00000000006F72;
  *(void *)(v51 + 32) = &unk_270637FE8;
  *(void *)(v51 + 40) = v7;
  *(void *)(v51 + 48) = v7;
  *(void *)(v51 + 56) = v7;
  *(void *)(v51 + 64) = v7;
  *(_OWORD *)(v51 + 72) = 0u;
  *(_OWORD *)(v51 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v51 + 104) = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = sub_2570130A4;
  *(void *)(v52 + 24) = 0;
  *(void *)(v51 + 112) = sub_256FF8224;
  *(void *)(v51 + 120) = v52;
  *(void *)(v1 + 1224) = v4;
  *(void *)(v1 + 1200) = v51;
  strcpy((char *)(v1 + 1232), "searchsorted");
  *(unsigned char *)(v1 + 1245) = 0;
  *(_WORD *)(v1 + 1246) = -5120;
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_25706E4C0;
  *(void *)(v53 + 56) = MEMORY[0x263F8D310];
  *(void *)(v53 + 32) = 1952867692;
  *(void *)(v53 + 40) = 0xE400000000000000;
  unint64_t v54 = sub_256FEB040(v7);
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 32) = v7;
  *(void *)(v55 + 40) = v7;
  *(void *)(v55 + 48) = v7;
  *(void *)(v55 + 56) = v7;
  *(void *)(v55 + 64) = v7;
  *(_OWORD *)(v55 + 72) = 0u;
  *(_OWORD *)(v55 + 88) = 0u;
  *(void *)(v55 + 104) = sub_256FEB040(v7);
  *(void *)(v55 + 16) = 0x63726165732E706ELL;
  *(void *)(v55 + 24) = 0xEF646574726F7368;
  *(void *)(v55 + 32) = &unk_270638018;
  *(void *)(v55 + 40) = v7;
  *(void *)(v55 + 48) = v7;
  *(void *)(v55 + 56) = v7;
  *(void *)(v55 + 64) = v53;
  *(_OWORD *)(v55 + 72) = 0u;
  *(_OWORD *)(v55 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v55 + 104) = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = sub_25701316C;
  *(void *)(v56 + 24) = 0;
  *(void *)(v55 + 112) = sub_256FF8224;
  *(void *)(v55 + 120) = v56;
  *(void *)(v1 + 1272) = v4;
  *(void *)(v1 + 1248) = v55;
  *(void *)(v1 + 1280) = 0x707265746E69;
  *(void *)(v1 + 1288) = 0xE600000000000000;
  unint64_t v57 = sub_256FEB040(v7);
  uint64_t v58 = swift_allocObject();
  *(void *)(v58 + 32) = v7;
  *(void *)(v58 + 40) = v7;
  *(void *)(v58 + 48) = v7;
  *(void *)(v58 + 56) = v7;
  *(void *)(v58 + 64) = v7;
  *(_OWORD *)(v58 + 72) = 0u;
  *(_OWORD *)(v58 + 88) = 0u;
  *(void *)(v58 + 104) = sub_256FEB040(v7);
  *(void *)(v58 + 16) = 0x7265746E692E706ELL;
  *(void *)(v58 + 24) = 0xE900000000000070;
  *(void *)(v58 + 32) = &unk_270638068;
  *(void *)(v58 + 40) = v7;
  *(void *)(v58 + 48) = v7;
  *(void *)(v58 + 56) = v7;
  *(void *)(v58 + 64) = v7;
  *(_OWORD *)(v58 + 72) = 0u;
  *(_OWORD *)(v58 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v58 + 104) = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = sub_2570133F0;
  *(void *)(v59 + 24) = 0;
  *(void *)(v58 + 112) = sub_256FF8224;
  *(void *)(v58 + 120) = v59;
  *(void *)(v1 + 1320) = v4;
  *(void *)(v1 + 1296) = v58;
  *(void *)(v1 + 1328) = 0x646E65707061;
  *(void *)(v1 + 1336) = 0xE600000000000000;
  unint64_t v60 = sub_256FEB040(v7);
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 32) = v7;
  *(void *)(v61 + 40) = v7;
  *(void *)(v61 + 48) = v7;
  *(void *)(v61 + 56) = v7;
  *(void *)(v61 + 64) = v7;
  *(_OWORD *)(v61 + 72) = 0u;
  *(_OWORD *)(v61 + 88) = 0u;
  *(void *)(v61 + 104) = sub_256FEB040(v7);
  *(void *)(v61 + 16) = 0x6E657070612E706ELL;
  *(void *)(v61 + 24) = 0xE900000000000064;
  *(void *)(v61 + 32) = &unk_2706380B8;
  *(void *)(v61 + 40) = v7;
  *(void *)(v61 + 48) = v7;
  *(void *)(v61 + 56) = v7;
  *(void *)(v61 + 64) = v7;
  *(_OWORD *)(v61 + 72) = 0u;
  *(_OWORD *)(v61 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v61 + 104) = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = sub_2570135C4;
  *(void *)(v62 + 24) = 0;
  *(void *)(v61 + 112) = sub_256FF8224;
  *(void *)(v61 + 120) = v62;
  *(void *)(v1 + 1368) = v4;
  *(void *)(v1 + 1344) = v61;
  *(void *)(v1 + 1376) = 7958113;
  *(void *)(v1 + 1384) = 0xE300000000000000;
  unint64_t v63 = sub_256FEB040(v7);
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 32) = v7;
  *(void *)(v64 + 40) = v7;
  *(void *)(v64 + 48) = v7;
  *(void *)(v64 + 56) = v7;
  *(void *)(v64 + 64) = v7;
  *(_OWORD *)(v64 + 72) = 0u;
  *(_OWORD *)(v64 + 88) = 0u;
  *(void *)(v64 + 104) = sub_256FEB040(v7);
  *(void *)(v64 + 16) = 0x796E612E706ELL;
  *(void *)(v64 + 24) = 0xE600000000000000;
  *(void *)(v64 + 32) = &unk_2706380F8;
  *(void *)(v64 + 40) = v7;
  *(void *)(v64 + 48) = v7;
  *(void *)(v64 + 56) = v7;
  *(void *)(v64 + 64) = v7;
  *(_OWORD *)(v64 + 72) = 0u;
  *(_OWORD *)(v64 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v64 + 104) = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = sub_257013A34;
  *(void *)(v65 + 24) = 0;
  *(void *)(v64 + 112) = sub_256FF8224;
  *(void *)(v64 + 120) = v65;
  *(void *)(v1 + 1416) = v4;
  *(void *)(v1 + 1392) = v64;
  *(void *)(v1 + 1424) = 7105633;
  *(void *)(v1 + 1432) = 0xE300000000000000;
  unint64_t v66 = sub_256FEB040(v7);
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 32) = v7;
  *(void *)(v67 + 40) = v7;
  *(void *)(v67 + 48) = v7;
  *(void *)(v67 + 56) = v7;
  *(void *)(v67 + 64) = v7;
  *(_OWORD *)(v67 + 72) = 0u;
  *(_OWORD *)(v67 + 88) = 0u;
  *(void *)(v67 + 104) = sub_256FEB040(v7);
  *(void *)(v67 + 16) = 0x6C6C612E706ELL;
  *(void *)(v67 + 24) = 0xE600000000000000;
  *(void *)(v67 + 32) = &unk_270638128;
  *(void *)(v67 + 40) = v7;
  *(void *)(v67 + 48) = v7;
  *(void *)(v67 + 56) = v7;
  *(void *)(v67 + 64) = v7;
  *(_OWORD *)(v67 + 72) = 0u;
  *(_OWORD *)(v67 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v67 + 104) = v66;
  swift_bridgeObjectRelease();
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = sub_257013B74;
  *(void *)(v68 + 24) = 0;
  *(void *)(v67 + 112) = sub_256FF8224;
  *(void *)(v67 + 120) = v68;
  *(void *)(v1 + 1464) = v4;
  *(void *)(v1 + 1440) = v67;
  *(void *)(v1 + 1472) = 0x65676E617261;
  *(void *)(v1 + 1480) = 0xE600000000000000;
  uint64_t v69 = (_OWORD *)swift_allocObject();
  v69[1] = xmmword_257071110;
  v69[2] = 0u;
  void v69[3] = 0u;
  v69[4] = 0u;
  v69[5] = 0u;
  v69[6] = 0u;
  v69[7] = 0u;
  v69[8] = 0u;
  v69[9] = 0u;
  unint64_t v70 = sub_256FEB040(v7);
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 32) = v7;
  *(void *)(v71 + 40) = v7;
  *(void *)(v71 + 48) = v7;
  *(void *)(v71 + 56) = v7;
  *(void *)(v71 + 64) = v7;
  *(_OWORD *)(v71 + 72) = 0u;
  *(_OWORD *)(v71 + 88) = 0u;
  *(void *)(v71 + 104) = sub_256FEB040(v7);
  *(void *)(v71 + 16) = 0x676E6172612E706ELL;
  *(void *)(v71 + 24) = 0xE900000000000065;
  *(void *)(v71 + 32) = &unk_270638158;
  *(void *)(v71 + 40) = v7;
  *(void *)(v71 + 48) = v7;
  *(void *)(v71 + 56) = v7;
  *(void *)(v71 + 64) = v69;
  *(_OWORD *)(v71 + 72) = 0u;
  *(_OWORD *)(v71 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v71 + 104) = v70;
  swift_bridgeObjectRelease();
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = sub_257013CB4;
  *(void *)(v72 + 24) = 0;
  *(void *)(v71 + 112) = sub_256FF8224;
  *(void *)(v71 + 120) = v72;
  *(void *)(v1 + 1512) = v4;
  *(void *)(v1 + 1488) = v71;
  *(void *)(v1 + 1520) = 7173491;
  *(void *)(v1 + 1528) = 0xE300000000000000;
  uint64_t v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = xmmword_25706E4F0;
  *(_OWORD *)(v73 + 32) = 0u;
  *(_OWORD *)(v73 + 48) = 0u;
  *(void *)(v73 + 88) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v73 + 64) = 0;
  unint64_t v74 = sub_256FEB040(v7);
  uint64_t v75 = swift_allocObject();
  *(void *)(v75 + 32) = v7;
  *(void *)(v75 + 40) = v7;
  *(void *)(v75 + 48) = v7;
  *(void *)(v75 + 56) = v7;
  *(void *)(v75 + 64) = v7;
  *(_OWORD *)(v75 + 72) = 0u;
  *(_OWORD *)(v75 + 88) = 0u;
  *(void *)(v75 + 104) = sub_256FEB040(v7);
  *(void *)(v75 + 16) = 0x6D75732E706ELL;
  *(void *)(v75 + 24) = 0xE600000000000000;
  *(void *)(v75 + 32) = &unk_2706381B8;
  *(void *)(v75 + 40) = v7;
  *(void *)(v75 + 48) = v7;
  *(void *)(v75 + 56) = v7;
  *(void *)(v75 + 64) = v73;
  *(_OWORD *)(v75 + 72) = 0u;
  *(_OWORD *)(v75 + 88) = 0u;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  *(void *)(v75 + 104) = v74;
  swift_bridgeObjectRelease();
  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 16) = sub_25701913C;
  *(void *)(v76 + 24) = 0;
  *(void *)(v75 + 112) = sub_256FF8224;
  *(void *)(v75 + 120) = v76;
  *(void *)(v1 + 1560) = v4;
  *(void *)(v1 + 1536) = v75;
  unint64_t v77 = sub_256FEB040(v1);
  v80[0] = v7;
  v80[1] = v7;
  v80[2] = v7;
  v80[3] = v7;
  v80[4] = v7;
  long long v81 = 0u;
  long long v82 = 0u;
  swift_allocObject();
  *(void *)(v79 + 48) = Function.init(name:arguments:attrs:body:)(28782, 0xE200000000000000, (uint64_t)v80, v77, 0, 0);
  unint64_t result = sub_256FEB2B0(v79);
  qword_269FDD670 = result;
  return result;
}

uint64_t sub_2570105E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v5 = sub_256FED050(0x7961727261, 0xE500000000000000), (v6 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v92);
  }
  else
  {
    long long v92 = 0u;
    long long v93 = 0u;
  }
  uint64_t v7 = sub_25701A3F0((uint64_t)&v92);
  uint64_t result = sub_256FB11E8((uint64_t)&v92, &qword_269FDC6E0);
  if (!v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    if (*(void *)(a1 + 16) <= 1uLL) {
      goto LABEL_35;
    }
    unint64_t v10 = sub_256FED050(1936291937, 0xE400000000000000);
    if (v11)
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v88);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD058);
      if (swift_dynamicCast())
      {
        if (*((void *)&v90 + 1))
        {
          uint64_t v83 = a2;
          uint64_t v84 = v7;
          sub_256FA81EC(&v89, (uint64_t)&v92);
          uint64_t v9 = *((void *)&v93 + 1);
          uint64_t v12 = v94;
          uint64_t v13 = __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v93 + 1));
          uint64_t v79 = v71;
          uint64_t v14 = *(void *)(v9 - 8);
          uint64_t v15 = *(unsigned char **)(v14 + 64);
          MEMORY[0x270FA5388](v13);
          uint64_t v16 = &v71[-((unint64_t)(v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
          long long v81 = (unsigned char *)v14;
          unint64_t v17 = *(void (**)(unsigned char *))(v14 + 16);
          v17(v16);
          unint64_t v18 = *(void *)(v12 + 8);
          uint64_t v19 = sub_25704AD40();
          LODWORD(v82) = v19;
          uint64_t v78 = v71;
          uint64_t v80 = v15;
          MEMORY[0x270FA5388](v19);
          unint64_t v85 = v16;
          unint64_t v86 = (void (*)(unsigned char *, unsigned char *, uint64_t))v17;
          uint64_t v87 = (unsigned char *)(v14 + 16);
          ((void (*)(unsigned char *, unsigned char *, uint64_t))v17)(v16, v16, v9);
          unint64_t v95 = v18;
          if (v82)
          {
            uint64_t v20 = sub_25704AD30();
            uint64_t v21 = v81;
            uint64_t v22 = v81 + 8;
            long long v82 = (void (*)(unsigned char *, uint64_t))*((void *)v81 + 1);
            uint64_t v23 = ((uint64_t (*)(unsigned char *, uint64_t))v82)(&v71[-((unint64_t)(v15 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
            if (v20 > 64)
            {
              unint64_t v77 = v22;
              uint64_t v76 = v71;
              uint64_t v24 = v80;
              MEMORY[0x270FA5388](v23);
              uint64_t v25 = v85;
              v86(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v85, v9);
              *(void *)&long long v89 = 0x8000000000000000;
              if (sub_25704AD40())
              {
                uint64_t v26 = sub_25704AD30();
                if (v26 < 64)
                {
                  uint64_t v27 = sub_25704AD20();
                  uint64_t v28 = (uint64_t)v82;
                  v82(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
LABEL_50:
                  if (v27 < (uint64_t)v89)
                  {
LABEL_51:
                    do
                    {
                      __break(1u);
LABEL_52:
                      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                      unint64_t v74 = v71;
                      MEMORY[0x270FA5388](AssociatedTypeWitness);
                      swift_getAssociatedConformanceWitness();
                      uint64_t v51 = sub_25704B210();
                      uint64_t v73 = v71;
                      MEMORY[0x270FA5388](v51);
                      unint64_t v52 = (unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0;
                      sub_25704B1C0();
                      uint64_t v53 = v75;
                      int v72 = sub_25704A6D0();
                      uint64_t v28 = (uint64_t)v82;
                      uint64_t v54 = ((uint64_t (*)(unsigned char *, uint64_t))v82)(&v71[-v52], v9);
                      unint64_t v74 = v71;
                      MEMORY[0x270FA5388](v54);
                      uint64_t v35 = (uint64_t)&v71[-v52];
                      (*((void (**)(unsigned char *, unsigned char *, uint64_t))v81 + 4))(&v71[-v52], v53, v9);
                      if (v72) {
                        goto LABEL_76;
                      }
                      uint64_t v55 = v89;
                      uint64_t v56 = sub_25704AD20();
                      ((void (*)(uint64_t, uint64_t))v28)(v35, v9);
                      BOOL v57 = v56 < v55;
                      uint64_t v21 = v81;
                      uint64_t v25 = v85;
                    }
                    while (v57);
                  }
LABEL_56:
                  uint64_t v58 = sub_25704AD30();
                  long long v81 = v71;
                  MEMORY[0x270FA5388](v58);
                  v86(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v25, v9);
                  if (v58 < 65)
                  {
                    uint64_t v63 = sub_25704AD30();
                    ((void (*)(unsigned char *, uint64_t))v28)(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
                    if (v63 != 64) {
                      goto LABEL_68;
                    }
                    uint64_t v59 = sub_25704AD40();
                    if (v59) {
                      goto LABEL_68;
                    }
                  }
                  else
                  {
                    uint64_t v59 = ((uint64_t (*)(unsigned char *, uint64_t))v28)(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
                  }
                  long long v82 = (void (*)(unsigned char *, uint64_t))v28;
                  uint64_t v80 = v71;
                  MEMORY[0x270FA5388](v59);
                  v86(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v25, v9);
                  *(void *)&long long v89 = 0x7FFFFFFFFFFFFFFFLL;
                  char v60 = sub_25704AD40();
                  uint64_t v61 = sub_25704AD30();
                  if (v60)
                  {
                    if (v61 > 64)
                    {
                      MEMORY[0x270FA5388](v61);
                      sub_256FC9A38();
                      sub_25704AD10();
                      uint64_t v35 = sub_25704A6D0();
                      uint64_t v62 = v82;
                      v82(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
                      v62(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
                      uint64_t v25 = v85;
                      uint64_t v28 = (uint64_t)v62;
                      if (v35) {
                        goto LABEL_74;
                      }
                      goto LABEL_68;
                    }
                  }
                  else if (v61 > 63)
                  {
                    uint64_t v87 = v71;
                    v88[0] = 0x7FFFFFFFFFFFFFFFLL;
                    MEMORY[0x270FA5388](v61);
                    uint64_t v64 = &v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
                    uint64_t v65 = (*((uint64_t (**)(unsigned char *, unsigned char *, uint64_t))v21 + 4))(v64, v64, v9);
                    MEMORY[0x270FA5388](v65);
                    sub_256FC9A38();
                    sub_25704AD10();
                    uint64_t v35 = sub_25704A6D0();
                    unint64_t v66 = v82;
                    v82(v64, v9);
                    v66(v64, v9);
                    uint64_t v25 = v85;
                    uint64_t v28 = (uint64_t)v66;
                    if (v35)
                    {
LABEL_74:
                      __break(1u);
                      goto LABEL_75;
                    }
                    goto LABEL_68;
                  }
                  sub_25704AD20();
                  uint64_t v28 = (uint64_t)v82;
                  v82(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
LABEL_68:
                  uint64_t v67 = sub_25704AD20();
                  ((void (*)(unsigned char *, uint64_t))v28)(v25, v9);
                  uint64_t v68 = sub_256FA5C48(0, 1, 1, MEMORY[0x263F8EE78]);
                  unint64_t v70 = v68[2];
                  unint64_t v69 = v68[3];
                  if (v70 >= v69 >> 1) {
                    uint64_t v68 = sub_256FA5C48((void *)(v69 > 1), v70 + 1, 1, v68);
                  }
                  v68[2] = v70 + 1;
                  v68[v70 + 4] = v67;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
LABEL_35:
                  mlx_default_device();
                }
                MEMORY[0x270FA5388](v26);
                sub_256FC9A38();
                sub_25704AD10();
                char v48 = sub_25704A6D0();
                uint64_t v28 = (uint64_t)v82;
                v82(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
                ((void (*)(unsigned char *, uint64_t))v28)(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
              }
              else
              {
                char v45 = sub_25704AD40();
                uint64_t v75 = &v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
                uint64_t v46 = sub_25704AD30();
                if ((v45 & 1) == 0)
                {
                  if (v46 >= 64)
                  {
                    uint64_t v28 = (uint64_t)v82;
                    v82(v75, v9);
                    goto LABEL_56;
                  }
                  uint64_t v49 = v75;
                  uint64_t v27 = sub_25704AD20();
                  uint64_t v28 = (uint64_t)v82;
                  v82(v49, v9);
                  goto LABEL_50;
                }
                if (v46 <= 64) {
                  goto LABEL_52;
                }
                MEMORY[0x270FA5388](v46);
                sub_256FC9A38();
                sub_25704AD10();
                unint64_t v47 = v75;
                char v48 = sub_25704A6D0();
                uint64_t v28 = (uint64_t)v82;
                v82(&v71[-((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
                ((void (*)(unsigned char *, uint64_t))v28)(v47, v9);
              }
              uint64_t v21 = v81;
              uint64_t v25 = v85;
              if (v48) {
                goto LABEL_51;
              }
              goto LABEL_56;
            }
            uint64_t v25 = v85;
            uint64_t v28 = (uint64_t)v82;
          }
          else
          {
            uint64_t v21 = v81;
            uint64_t v28 = *((void *)v81 + 1);
            ((void (*)(unsigned char *, uint64_t))v28)(v16, v9);
            uint64_t v25 = v85;
          }
          uint64_t v24 = v80;
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v91 = 0;
        long long v89 = 0u;
        long long v90 = 0u;
      }
    }
    else
    {
      long long v89 = 0u;
      long long v90 = 0u;
      uint64_t v91 = 0;
    }
    sub_256FB11E8((uint64_t)&v89, &qword_269FDD050);
    if (*(void *)(a1 + 16) && (unint64_t v29 = sub_256FED050(1936291937, 0xE400000000000000), (v30 & 1) != 0))
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v29, (uint64_t)v88);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
      if (swift_dynamicCast())
      {
        if (*((void *)&v90 + 1))
        {
          sub_256FA81EC(&v89, (uint64_t)&v92);
          uint64_t v31 = *((void *)&v93 + 1);
          uint64_t v32 = v94;
          __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v93 + 1));
          uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
          unint64_t v34 = sub_257022F2C(v33);
          swift_bridgeObjectRelease();
          if (!v34)
          {
LABEL_73:
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
            goto LABEL_35;
          }
          unint64_t v95 = v34;
          if (v34 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v28 = sub_25704B040();
            swift_bridgeObjectRelease();
            if (v28) {
              goto LABEL_24;
            }
          }
          else
          {
            uint64_t v28 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v28)
            {
LABEL_24:
              uint64_t v83 = a2;
              uint64_t v84 = v7;
              *(void *)&long long v89 = v9;
              uint64_t v35 = (uint64_t)&v89;
              sub_256F908EC(0, v28 & ~(v28 >> 63), 0);
              if (v28 < 0)
              {
LABEL_75:
                __break(1u);
LABEL_76:
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v28)(v35, v9);
                __break(1u);
                __break(1u);
                __break(1u);
                __break(1u);
                return result;
              }
              uint64_t v36 = 0;
              uint64_t v37 = v89;
              unint64_t v38 = v95;
              unint64_t v39 = v95 & 0xC000000000000001;
              do
              {
                if (v39) {
                  id v40 = (id)MEMORY[0x25A2B0EE0](v36, v38);
                }
                else {
                  id v40 = *(id *)(v38 + 8 * v36 + 32);
                }
                unint64_t v41 = v40;
                id v42 = objc_msgSend(v40, sel_integerValue);

                *(void *)&long long v89 = v37;
                unint64_t v44 = *(void *)(v37 + 16);
                unint64_t v43 = *(void *)(v37 + 24);
                if (v44 >= v43 >> 1)
                {
                  sub_256F908EC(v43 > 1, v44 + 1, 1);
                  unint64_t v38 = v95;
                  uint64_t v37 = v89;
                }
                ++v36;
                *(void *)(v37 + 16) = v44 + 1;
                *(void *)(v37 + 8 * v44 + 32) = v42;
              }
              while (v28 != v36);
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v91 = 0;
        long long v89 = 0u;
        long long v90 = 0u;
      }
    }
    else
    {
      long long v89 = 0u;
      long long v90 = 0u;
      uint64_t v91 = 0;
    }
    sub_256FB11E8((uint64_t)&v89, &qword_269FDCAE0);
    goto LABEL_35;
  }
  return result;
}

uint64_t sub_257011514(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(12664, 0xE200000000000000), (v4 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v8);
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
  }
  sub_25701A3F0((uint64_t)&v8);
  uint64_t result = sub_256FB11E8((uint64_t)&v8, &qword_269FDC6E0);
  if (!v1)
  {
    if (*(void *)(a1 + 16) && (unint64_t v6 = sub_256FED050(12920, 0xE200000000000000), (v7 & 1) != 0))
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v8);
    }
    else
    {
      long long v8 = 0u;
      long long v9 = 0u;
    }
    sub_25701A3F0((uint64_t)&v8);
    sub_256FB11E8((uint64_t)&v8, &qword_269FDC6E0);
    mlx_default_device();
  }
  return result;
}

uint64_t sub_2570116C0(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(12664, 0xE200000000000000), (v4 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v8);
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
  }
  sub_25701A3F0((uint64_t)&v8);
  uint64_t result = sub_256FB11E8((uint64_t)&v8, &qword_269FDC6E0);
  if (!v1)
  {
    if (*(void *)(a1 + 16) && (unint64_t v6 = sub_256FED050(12920, 0xE200000000000000), (v7 & 1) != 0))
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v8);
    }
    else
    {
      long long v8 = 0u;
      long long v9 = 0u;
    }
    sub_25701A3F0((uint64_t)&v8);
    sub_256FB11E8((uint64_t)&v8, &qword_269FDC6E0);
    mlx_default_device();
  }
  return result;
}

uint64_t sub_25701186C(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(12664, 0xE200000000000000), (v4 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v8);
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
  }
  sub_25701A3F0((uint64_t)&v8);
  uint64_t result = sub_256FB11E8((uint64_t)&v8, &qword_269FDC6E0);
  if (!v1)
  {
    if (*(void *)(a1 + 16) && (unint64_t v6 = sub_256FED050(12920, 0xE200000000000000), (v7 & 1) != 0))
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v8);
    }
    else
    {
      long long v8 = 0u;
      long long v9 = 0u;
    }
    sub_25701A3F0((uint64_t)&v8);
    sub_256FB11E8((uint64_t)&v8, &qword_269FDC6E0);
    mlx_default_device();
  }
  return result;
}

uint64_t sub_257011A18(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(97, 0xE100000000000000), (v4 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v21);
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_25701A3F0((uint64_t)&v21);
  uint64_t result = sub_256FB11E8((uint64_t)&v21, &qword_269FDC6E0);
  if (v1) {
    return result;
  }
  if (*(void *)(a1 + 16) && (unint64_t v6 = sub_256FED050(0x657061687377656ELL, 0xE800000000000000), (v7 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
    if (swift_dynamicCast())
    {
      if (*((void *)&v19 + 1))
      {
        sub_256FA81EC(&v18, (uint64_t)&v21);
        uint64_t v8 = *((void *)&v22 + 1);
        uint64_t v9 = v23;
        __swift_project_boxed_opaque_existential_1(&v21, *((uint64_t *)&v22 + 1));
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
        uint64_t v11 = sub_257023028(v10);
        swift_bridgeObjectRelease();
        if (v11) {
          mlx_default_device();
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v20 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
    }
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v20 = 0;
  }
  sub_256FB11E8((uint64_t)&v18, &qword_269FDCAE0);
LABEL_14:
  if (qword_269FDC650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_25704A550();
  __swift_project_value_buffer(v12, (uint64_t)qword_269FDD648);
  uint64_t v13 = sub_25704A530();
  os_log_type_t v14 = sub_25704AC60();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_256D65000, v13, v14, "Invalid arg newshape for reshape", v15, 2u);
    MEMORY[0x25A2B1FA0](v15, -1, -1);
  }

  sub_256F92DE8();
  swift_allocError();
  *uint64_t v16 = 50;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_257011D68(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(97, 0xE100000000000000), (v4 & 1) != 0)) {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)v6);
  }
  else {
    memset(v6, 0, sizeof(v6));
  }
  sub_25701A3F0((uint64_t)v6);
  uint64_t result = sub_256FB11E8((uint64_t)v6, &qword_269FDC6E0);
  if (!v1) {
    mlx_default_device();
  }
  return result;
}

uint64_t sub_257011EF8(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(12664, 0xE200000000000000), (v4 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v8);
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
  }
  sub_25701A3F0((uint64_t)&v8);
  uint64_t result = sub_256FB11E8((uint64_t)&v8, &qword_269FDC6E0);
  if (!v1)
  {
    if (*(void *)(a1 + 16) && (unint64_t v6 = sub_256FED050(12920, 0xE200000000000000), (v7 & 1) != 0))
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v8);
    }
    else
    {
      long long v8 = 0u;
      long long v9 = 0u;
    }
    sub_25701A3F0((uint64_t)&v8);
    sub_256FB11E8((uint64_t)&v8, &qword_269FDC6E0);
    mlx_default_device();
  }
  return result;
}

uint64_t sub_2570120A4(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(97, 0xE100000000000000), (v4 & 1) != 0)) {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)v9);
  }
  else {
    memset(v9, 0, sizeof(v9));
  }
  sub_25701A3F0((uint64_t)v9);
  uint64_t result = sub_256FB11E8((uint64_t)v9, &qword_269FDC6E0);
  if (!v1)
  {
    if (*(void *)(a1 + 16) > 1uLL)
    {
      unint64_t v6 = sub_256FED050(1936291937, 0xE400000000000000);
      if (v7)
      {
        sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)v9);
        sub_256FABC94();
        if (swift_dynamicCast())
        {
          id v8 = v10;
          objc_msgSend(v10, sel_integerValue);
        }
      }
    }
    mlx_default_device();
  }
  return result;
}

void sub_257012284(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v5 = sub_256FED050(97, 0xE100000000000000), (v6 & 1) != 0)) {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v16);
  }
  else {
    memset(v16, 0, 32);
  }
  char v7 = sub_25701A3F0((uint64_t)v16);
  sub_256FB11E8((uint64_t)v16, &qword_269FDC6E0);
  if (!v2)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    uint64_t v17 = a2;
    if (v8 <= 1) {
      goto LABEL_12;
    }
    unint64_t v9 = sub_256FED050(110, 0xE100000000000000);
    if ((v10 & 1) == 0) {
      goto LABEL_12;
    }
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v9, (uint64_t)v16);
    sub_256FABC94();
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_12;
    }
    unint64_t v11 = (unint64_t)objc_msgSend(v15, sel_integerValue);

    if ((v11 & 0x8000000000000000) == 0)
    {
      if (!v11)
      {
        swift_retain();
        uint64_t v13 = type metadata accessor for MLXArray();
        os_log_type_t v14 = v17;
        void v17[3] = v13;
        swift_release();
        *os_log_type_t v14 = v7;
        return;
      }
LABEL_12:
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC7F8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_25706E4C0;
      *(void *)(inited + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC868);
      *(void *)(inited + 64) = &protocol witness table for <> PartialRangeFrom<A>;
      *(void *)(inited + 32) = 1;
      type metadata accessor for Stream();
      swift_initStackObject();
      mlx_default_device();
    }
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
  }
}

uint64_t sub_257012640(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(0x6F697469646E6F63, 0xE90000000000006ELL), (v4 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v15);
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
  }
  sub_25701A3F0((uint64_t)&v15);
  uint64_t result = sub_256FB11E8((uint64_t)&v15, &qword_269FDC6E0);
  if (!v1)
  {
    if (*(void *)(a1 + 16) == 3)
    {
      unint64_t v6 = sub_256FED050(120, 0xE100000000000000);
      if (v7)
      {
        sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v15);
      }
      else
      {
        long long v15 = 0u;
        long long v16 = 0u;
      }
      sub_25701A3F0((uint64_t)&v15);
      sub_256FB11E8((uint64_t)&v15, &qword_269FDC6E0);
      if (*(void *)(a1 + 16) && (unint64_t v13 = sub_256FED050(121, 0xE100000000000000), (v14 & 1) != 0))
      {
        sub_256FB118C(*(void *)(a1 + 56) + 32 * v13, (uint64_t)&v15);
      }
      else
      {
        long long v15 = 0u;
        long long v16 = 0u;
      }
      sub_25701A3F0((uint64_t)&v15);
      sub_256FB11E8((uint64_t)&v15, &qword_269FDC6E0);
      mlx_default_device();
    }
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_25704A550();
    __swift_project_value_buffer(v8, (uint64_t)qword_269FDD648);
    unint64_t v9 = sub_25704A530();
    os_log_type_t v10 = sub_25704AC60();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl(&dword_256D65000, v9, v10, "Unary where is not supported yet", v11, 2u);
      MEMORY[0x25A2B1FA0](v11, -1, -1);
    }

    sub_256F92DE8();
    swift_allocError();
    unsigned char *v12 = 6;
    swift_willThrow();
    return swift_release();
  }
  return result;
}

uint64_t sub_257012994(uint64_t a1)
{
  if (!*(void *)(a1 + 16) || (unint64_t v2 = sub_256FED050(0x737961727261, 0xE600000000000000), (v3 & 1) == 0))
  {
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v21 = 0;
    goto LABEL_11;
  }
  sub_256FB118C(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v21 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    goto LABEL_11;
  }
  if (!*((void *)&v20 + 1))
  {
LABEL_11:
    sub_256FB11E8((uint64_t)&v19, &qword_269FDCAE0);
    goto LABEL_12;
  }
  sub_256FA81EC(&v19, (uint64_t)v22);
  uint64_t v4 = v23;
  uint64_t v5 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  uint64_t v7 = sub_257023168(v6);
  swift_bridgeObjectRelease();
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      v18[0] = MEMORY[0x263F8EE78];
      sub_25704AEE0();
      uint64_t v9 = v7 + 32;
      do
      {
        sub_256F92F24(v9, (uint64_t)&v19);
        uint64_t v10 = *((void *)&v20 + 1);
        uint64_t v11 = v21;
        __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
        char v25 = 7;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 8))(&v25, v10, v11);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
        sub_25704AEB0();
        sub_25704AEF0();
        sub_25704AF00();
        sub_25704AEC0();
        v9 += 40;
        --v8;
      }
      while (v8);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Stream();
    swift_initStackObject();
    mlx_default_device();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
LABEL_12:
  if (qword_269FDC650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_25704A550();
  __swift_project_value_buffer(v12, (uint64_t)qword_269FDD648);
  unint64_t v13 = sub_25704A530();
  os_log_type_t v14 = sub_25704AC60();
  if (os_log_type_enabled(v13, v14))
  {
    long long v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v15 = 0;
    _os_log_impl(&dword_256D65000, v13, v14, "Invalid arg arrays for concatenate", v15, 2u);
    MEMORY[0x25A2B1FA0](v15, -1, -1);
  }

  sub_256F92DE8();
  swift_allocError();
  *long long v16 = 51;
  return swift_willThrow();
}

uint64_t sub_257012D38(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(97, 0xE100000000000000), (v4 & 1) != 0)) {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)v6);
  }
  else {
    memset(v6, 0, sizeof(v6));
  }
  sub_25701A3F0((uint64_t)v6);
  uint64_t result = sub_256FB11E8((uint64_t)v6, &qword_269FDC6E0);
  if (!v1) {
    mlx_default_device();
  }
  return result;
}

uint64_t sub_257012EB0(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(120, 0xE100000000000000), (v4 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v8);
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
  }
  sub_25701A3F0((uint64_t)&v8);
  uint64_t result = sub_256FB11E8((uint64_t)&v8, &qword_269FDC6E0);
  if (!v1)
  {
    if (*(void *)(a1 + 16) && (unint64_t v6 = sub_256FED050(121, 0xE100000000000000), (v7 & 1) != 0))
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v8);
    }
    else
    {
      long long v8 = 0u;
      long long v9 = 0u;
    }
    sub_25701A3F0((uint64_t)&v8);
    sub_256FB11E8((uint64_t)&v8, &qword_269FDC6E0);
    swift_retain();
    swift_retain();
    mlx_default_device();
  }
  return result;
}

uint64_t sub_2570130A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v5 = sub_256FED050(97, 0xE100000000000000), (v6 & 1) != 0)) {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v10);
  }
  else {
    memset(v10, 0, sizeof(v10));
  }
  sub_25701A3F0((uint64_t)v10);
  uint64_t result = sub_256FB11E8((uint64_t)v10, &qword_269FDC6E0);
  if (!v2)
  {
    uint64_t v8 = swift_retain();
    uint64_t v9 = sub_25701A618(v8);
    a2[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC838);
    uint64_t result = swift_release_n();
    *a2 = v9;
  }
  return result;
}

uint64_t sub_25701316C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v5 = sub_256FED050(97, 0xE100000000000000), (v6 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v18);
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  char v7 = sub_25701A3F0((uint64_t)&v18);
  uint64_t result = sub_256FB11E8((uint64_t)&v18, &qword_269FDC6E0);
  if (!v2)
  {
    if (*(void *)(a1 + 16) && (unint64_t v9 = sub_256FED050(118, 0xE100000000000000), (v10 & 1) != 0))
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v9, (uint64_t)&v18);
    }
    else
    {
      long long v18 = 0u;
      long long v19 = 0u;
    }
    sub_25701A3F0((uint64_t)&v18);
    sub_256FB11E8((uint64_t)&v18, &qword_269FDC6E0);
    if (*(void *)(a1 + 16))
    {
      unint64_t v11 = sub_256FED050(1701079411, 0xE400000000000000);
      if (v12)
      {
        sub_256FB118C(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v18);
        swift_dynamicCast();
      }
    }
    if (*(void *)(a1 + 16) == 3)
    {
      unint64_t v13 = sub_256FED050(1701079411, 0xE400000000000000);
      if (v14)
      {
        sub_256FB118C(*(void *)(a1 + 56) + 32 * v13, (uint64_t)&v18);
        if (swift_dynamicCast()) {
          swift_bridgeObjectRelease();
        }
      }
    }
    sub_25700D5B8((uint64_t)v7);
    swift_bridgeObjectRelease();
    uint64_t v15 = *((void *)&v19 + 1);
    long long v16 = __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
    a2[3] = v15;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a2);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(boxed_opaque_existential_0, v16, v15);
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  }
  return result;
}

uint64_t sub_2570133F0(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(120, 0xE100000000000000), (v4 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v10);
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  sub_25701A3F0((uint64_t)&v10);
  uint64_t result = sub_256FB11E8((uint64_t)&v10, &qword_269FDC6E0);
  if (!v1)
  {
    if (*(void *)(a1 + 16) && (unint64_t v6 = sub_256FED050(28792, 0xE200000000000000), (v7 & 1) != 0))
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v10);
    }
    else
    {
      long long v10 = 0u;
      long long v11 = 0u;
    }
    sub_25701A3F0((uint64_t)&v10);
    sub_256FB11E8((uint64_t)&v10, &qword_269FDC6E0);
    if (*(void *)(a1 + 16) && (unint64_t v8 = sub_256FED050(28774, 0xE200000000000000), (v9 & 1) != 0))
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v10);
    }
    else
    {
      long long v10 = 0u;
      long long v11 = 0u;
    }
    sub_25701A3F0((uint64_t)&v10);
    sub_256FB11E8((uint64_t)&v10, &qword_269FDC6E0);
    sub_25700E07C();
  }
  return result;
}

uint64_t sub_2570135C4(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(7500385, 0xE300000000000000), (v4 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v13);
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
  }
  unint64_t v5 = sub_25701A3F0((uint64_t)&v13);
  uint64_t result = sub_256FB11E8((uint64_t)&v13, &qword_269FDC6E0);
  if (!v1)
  {
    if (*(void *)(a1 + 16) && (unint64_t v7 = sub_256FED050(0x7365756C6176, 0xE600000000000000), (v8 & 1) != 0))
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v7, (uint64_t)&v13);
    }
    else
    {
      long long v13 = 0u;
      long long v14 = 0u;
    }
    char v9 = sub_25701A3F0((uint64_t)&v13);
    sub_256FB11E8((uint64_t)&v13, &qword_269FDC6E0);
    if (*(void *)(a1 + 16))
    {
      unint64_t v10 = sub_256FED050(1936291937, 0xE400000000000000);
      if (v11)
      {
        sub_256FB118C(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&v13);
        if (swift_dynamicCast())
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6B8);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_257071120;
          *(void *)(inited + 32) = v5;
          *(void *)(inited + 40) = v9;
          *(void *)&long long v13 = inited;
          sub_25704AA30();
          type metadata accessor for Stream();
          swift_initStackObject();
          swift_retain();
          swift_retain();
          mlx_default_device();
        }
      }
    }
    mlx_default_device();
  }
  return result;
}

uint64_t sub_257013A34(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(97, 0xE100000000000000), (v4 & 1) != 0)) {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)v6);
  }
  else {
    memset(v6, 0, sizeof(v6));
  }
  sub_25701A3F0((uint64_t)v6);
  uint64_t result = sub_256FB11E8((uint64_t)v6, &qword_269FDC6E0);
  if (!v1) {
    mlx_default_device();
  }
  return result;
}

uint64_t sub_257013B74(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_256FED050(97, 0xE100000000000000), (v4 & 1) != 0)) {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v3, (uint64_t)v6);
  }
  else {
    memset(v6, 0, sizeof(v6));
  }
  sub_25701A3F0((uint64_t)v6);
  uint64_t result = sub_256FB11E8((uint64_t)v6, &qword_269FDC6E0);
  if (!v1) {
    mlx_default_device();
  }
  return result;
}

uint64_t sub_257013CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v4 = a1;
  if (!*(void *)(a1 + 16) || (unint64_t v6 = sub_256FED050(0x7472617473, 0xE500000000000000), (v7 & 1) == 0))
  {
    long long v341 = 0u;
    long long v342 = 0u;
    v343 = 0;
    goto LABEL_20;
  }
  sub_256FB118C(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v338);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v343 = 0;
    long long v341 = 0u;
    long long v342 = 0u;
LABEL_20:
    sub_256FB11E8((uint64_t)&v341, &qword_269FDC948);
    if (!*(void *)(v4 + 16)) {
      goto LABEL_39;
    }
    goto LABEL_21;
  }
  if (!*((void *)&v342 + 1)) {
    goto LABEL_20;
  }
  sub_256FA81EC(&v341, (uint64_t)&v344);
  if (!*(void *)(v4 + 16) || (unint64_t v8 = sub_256FED050(1886352499, 0xE400000000000000), (v9 & 1) == 0))
  {
    long long v338 = 0u;
    long long v339 = 0u;
    uint64_t v340 = 0;
    goto LABEL_37;
  }
  sub_256FB118C(*(void *)(v4 + 56) + 32 * v8, (uint64_t)&v335);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v340 = 0;
    long long v338 = 0u;
    long long v339 = 0u;
    goto LABEL_37;
  }
  if (!*((void *)&v339 + 1))
  {
LABEL_37:
    sub_256FB11E8((uint64_t)&v338, &qword_269FDC948);
    goto LABEL_38;
  }
  sub_256FA81EC(&v338, (uint64_t)&v341);
  if (!*(void *)(v4 + 16)) {
    goto LABEL_87;
  }
  unint64_t v10 = sub_256FED050(1885697139, 0xE400000000000000);
  if ((v11 & 1) == 0) {
    goto LABEL_87;
  }
  sub_256FB118C(*(void *)(v4 + 56) + 32 * v10, (uint64_t)v334);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v337 = 0;
    long long v336 = 0u;
    long long v335 = 0u;
    goto LABEL_88;
  }
  if (*((void *)&v336 + 1))
  {
    v333 = (uint64_t *)a2;
    v347 = v2;
    sub_256FA81EC(&v335, (uint64_t)&v338);
    uint64_t v12 = (uint64_t)v345;
    long long v13 = v346;
    long long v14 = __swift_project_boxed_opaque_existential_1(&v344, (uint64_t)v345);
    v328 = (char *)v317;
    uint64_t v15 = *(char **)(v12 - 8);
    long long v16 = (char *)*((void *)v15 + 8);
    MEMORY[0x270FA5388](v14);
    unint64_t v17 = (unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0;
    long long v18 = (char *)*((void *)v15 + 2);
    ((void (*)(char *))v18)((char *)v317 - v17);
    uint64_t v19 = sub_25704AD40();
    char v20 = v19;
    v327 = v317;
    v330 = v16;
    uint64_t v21 = (char *)v12;
    MEMORY[0x270FA5388](v19);
    long long v22 = (char *)v317 - v17;
    v331 = (void (**)(char *, char *, char *))((char *)v317 - v17);
    uint64_t v23 = v15 + 16;
    v329 = v18;
    ((void (*)(char *, char *, char *))v18)((char *)v317 - v17, (char *)v317 - v17, v21);
    v332 = v15;
    if (v20)
    {
      uint64_t v24 = sub_25704AD30();
      uint64_t v27 = (uint64_t (*)(char *, char *))*((void *)v15 + 1);
      uint64_t v26 = (uint64_t)(v15 + 8);
      uint64_t v25 = (uint64_t)v27;
      uint64_t v28 = v27(v22, v21);
      unint64_t v29 = v13;
      if (v24 > 64)
      {
        v326 = (void *)v26;
        uint64_t v30 = (uint64_t)v317;
        uint64_t v31 = v330;
        MEMORY[0x270FA5388](v28);
        uint64_t v32 = v329;
        ((void (*)(char *, void, char *))v329)((char *)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0), v331, v21);
        *(void *)&long long v335 = 0x8000000000000000;
        if (sub_25704AD40())
        {
          uint64_t v33 = sub_25704AD30();
          v325 = (void *)((char *)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0));
          if (v33 >= 64)
          {
            v324 = (char *)v317;
            MEMORY[0x270FA5388](v33);
            sub_256FC9A38();
            sub_25704AD10();
            char v209 = sub_25704A6D0();
            ((void (*)(char *, char *))v25)((char *)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
            ((void (*)(void *, char *))v25)(v325, v21);
            if (v209) {
              goto LABEL_213;
            }
          }
          else
          {
            int64_t v34 = (int64_t)v325;
            uint64_t v35 = sub_25704AD20();
            ((void (*)(int64_t, char *))v25)(v34, v21);
            if (v35 < (uint64_t)v335)
            {
LABEL_213:
              __break(1u);
              goto LABEL_214;
            }
          }
LABEL_215:
          uint64_t v205 = (char *)v331;
LABEL_216:
          uint64_t v219 = sub_25704AD30();
          v331 = (void (**)(char *, char *, char *))v317;
          MEMORY[0x270FA5388](v219);
          ((void (*)(char *, char *, char *))v32)((char *)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0), v205, v21);
          if (v219 < 65)
          {
            uint64_t v221 = sub_25704AD30();
            ((void (*)(char *, char *))v25)((char *)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
            if (v221 != 64) {
              goto LABEL_226;
            }
            uint64_t v220 = sub_25704AD40();
            if (v220) {
              goto LABEL_226;
            }
          }
          else
          {
            uint64_t v220 = ((uint64_t (*)(char *, char *))v25)((char *)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
          }
          v330 = (char *)v317;
          MEMORY[0x270FA5388](v220);
          uint64_t v222 = (char *)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0);
          ((void (*)(char *, char *, char *))v32)(v222, v205, v21);
          *(void *)&long long v335 = 0x7FFFFFFFFFFFFFFFLL;
          a2 = sub_25704AD40();
          uint64_t v223 = sub_25704AD30();
          if (a2)
          {
            if (v223 > 64)
            {
              MEMORY[0x270FA5388](v223);
              a2 = (uint64_t)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0);
              sub_256FC9A38();
              sub_25704AD10();
              char v224 = sub_25704A6D0();
              uint64_t v31 = v332 + 8;
              ((void (*)(uint64_t, char *))v25)(a2, v21);
              ((void (*)(char *, char *))v25)(v222, v21);
              if (v224) {
                goto LABEL_236;
              }
LABEL_226:
              v326 = (void *)sub_25704AD20();
              ((void (*)(char *, char *))v25)(v205, v21);
              uint64_t v227 = *((void *)&v342 + 1);
              uint64_t v228 = v343;
              uint64_t v229 = __swift_project_boxed_opaque_existential_1(&v341, *((uint64_t *)&v342 + 1));
              v328 = (char *)v317;
              v230 = *(char **)(v227 - 8);
              v231 = (char *)*((void *)v230 + 8);
              MEMORY[0x270FA5388](v229);
              unint64_t v232 = (unint64_t)(v231 + 15) & 0xFFFFFFFFFFFFFFF0;
              uint64_t v233 = (char *)*((void *)v230 + 2);
              ((void (*)(char *))v233)((char *)v317 - v232);
              uint64_t v234 = sub_25704AD40();
              char v235 = v234;
              v327 = v317;
              v330 = v231;
              a2 = v227;
              MEMORY[0x270FA5388](v234);
              long long v236 = (char *)v317 - v232;
              v331 = (void (**)(char *, char *, char *))((char *)v317 - v232);
              uint64_t v205 = v230 + 16;
              v329 = v233;
              ((void (*)(char *, char *, uint64_t))v233)((char *)v317 - v232, (char *)v317 - v232, a2);
              v332 = v230;
              if (v235)
              {
                uint64_t v237 = sub_25704AD30();
                uint64_t v239 = (uint64_t (*)(char *, uint64_t))*((void *)v230 + 1);
                int64_t v238 = (int64_t)(v230 + 8);
                uint64_t v25 = (uint64_t)v239;
                uint64_t v240 = v239(v236, a2);
                uint64_t v21 = v228;
                if (v237 > 64)
                {
                  v325 = (void *)v238;
                  uint64_t v31 = (char *)v317;
                  uint64_t v241 = v330;
                  MEMORY[0x270FA5388](v240);
                  unint64_t v29 = (char *)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0);
                  uint64_t v32 = v329;
                  ((void (*)(char *, void, uint64_t))v329)(v29, v331, a2);
                  *(void *)&long long v335 = 0x8000000000000000;
                  if (sub_25704AD40())
                  {
                    uint64_t v242 = sub_25704AD30();
                    v324 = (char *)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0);
                    if (v242 >= 64)
                    {
                      v323 = (char *)v317;
                      MEMORY[0x270FA5388](v242);
                      sub_256FC9A38();
                      sub_25704AD10();
                      char v252 = sub_25704A6D0();
                      ((void (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                      ((void (*)(char *, uint64_t))v25)(v324, a2);
                      if (v252) {
                        goto LABEL_249;
                      }
                    }
                    else
                    {
                      uint64_t v243 = v324;
                      uint64_t v244 = sub_25704AD20();
                      ((void (*)(char *, uint64_t))v25)(v243, a2);
                      if (v244 < (uint64_t)v335)
                      {
LABEL_249:
                        __break(1u);
                        goto LABEL_250;
                      }
                    }
LABEL_251:
                    v245 = v331;
LABEL_252:
                    uint64_t v262 = sub_25704AD30();
                    v331 = (void (**)(char *, char *, char *))v317;
                    MEMORY[0x270FA5388](v262);
                    ((void (*)(char *, void *, uint64_t))v32)((char *)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0), v245, a2);
                    if (v262 < 65)
                    {
                      uint64_t v264 = sub_25704AD30();
                      ((void (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                      if (v264 != 64) {
                        goto LABEL_262;
                      }
                      uint64_t v263 = sub_25704AD40();
                      if (v263) {
                        goto LABEL_262;
                      }
                    }
                    else
                    {
                      uint64_t v263 = ((uint64_t (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                    }
                    v330 = (char *)v317;
                    MEMORY[0x270FA5388](v263);
                    v265 = (char *)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0);
                    ((void (*)(char *, void *, uint64_t))v32)(v265, v245, a2);
                    *(void *)&long long v335 = 0x7FFFFFFFFFFFFFFFLL;
                    uint64_t v30 = sub_25704AD40();
                    uint64_t v266 = sub_25704AD30();
                    if (v30)
                    {
                      if (v266 > 64)
                      {
                        MEMORY[0x270FA5388](v266);
                        uint64_t v30 = (uint64_t)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0);
                        sub_256FC9A38();
                        sub_25704AD10();
                        char v267 = sub_25704A6D0();
                        uint64_t v241 = v332 + 8;
                        ((void (*)(uint64_t, uint64_t))v25)(v30, a2);
                        ((void (*)(char *, uint64_t))v25)(v265, a2);
                        if (v267) {
                          goto LABEL_272;
                        }
LABEL_262:
                        v325 = (void *)sub_25704AD20();
                        ((void (*)(void *, uint64_t))v25)(v245, a2);
                        uint64_t v270 = *((void *)&v339 + 1);
                        uint64_t v271 = v340;
                        v272 = __swift_project_boxed_opaque_existential_1(&v338, *((uint64_t *)&v339 + 1));
                        v328 = (char *)v317;
                        v273 = *(void **)(v270 - 8);
                        v274 = (char *)v273[8];
                        MEMORY[0x270FA5388](v272);
                        unint64_t v275 = (unint64_t)(v274 + 15) & 0xFFFFFFFFFFFFFFF0;
                        v276 = (char *)v273[2];
                        ((void (*)(char *))v276)((char *)v317 - v275);
                        uint64_t v277 = sub_25704AD40();
                        char v278 = v277;
                        v327 = v317;
                        v330 = v274;
                        a2 = v270;
                        MEMORY[0x270FA5388](v277);
                        v279 = (char *)v317 - v275;
                        v331 = (void (**)(char *, char *, char *))((char *)v317 - v275);
                        v245 = v273 + 2;
                        v329 = v276;
                        ((void (*)(char *, char *, uint64_t))v276)((char *)v317 - v275, (char *)v317 - v275, a2);
                        v332 = (char *)v273;
                        if (v278)
                        {
                          uint64_t v280 = sub_25704AD30();
                          v282 = (uint64_t (*)(char *, uint64_t))v273[1];
                          v281 = (char *)(v273 + 1);
                          uint64_t v25 = (uint64_t)v282;
                          uint64_t v283 = v282(v279, a2);
                          uint64_t v30 = v271;
                          if (v280 > 64)
                          {
                            v324 = v281;
                            uint64_t v241 = (char *)v317;
                            v284 = v330;
                            MEMORY[0x270FA5388](v283);
                            uint64_t v21 = (char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0);
                            uint64_t v32 = v329;
                            ((void (*)(char *, void, uint64_t))v329)(v21, v331, a2);
                            *(void *)&long long v335 = 0x8000000000000000;
                            if (sub_25704AD40())
                            {
                              uint64_t v285 = sub_25704AD30();
                              v323 = (char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0);
                              if (v285 >= 64)
                              {
                                unint64_t v322 = (unint64_t)v317;
                                MEMORY[0x270FA5388](v285);
                                sub_256FC9A38();
                                sub_25704AD10();
                                char v295 = sub_25704A6D0();
                                ((void (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                                ((void (*)(char *, uint64_t))v25)(v323, a2);
                                if (v295) {
                                  goto LABEL_285;
                                }
                              }
                              else
                              {
                                v286 = v323;
                                uint64_t v287 = sub_25704AD20();
                                ((void (*)(char *, uint64_t))v25)(v286, a2);
                                if (v287 < (uint64_t)v335)
                                {
LABEL_285:
                                  __break(1u);
                                  goto LABEL_286;
                                }
                              }
LABEL_287:
                              v288 = v331;
LABEL_288:
                              uint64_t v306 = sub_25704AD30();
                              v331 = (void (**)(char *, char *, char *))v317;
                              MEMORY[0x270FA5388](v306);
                              ((void (*)(char *, void, uint64_t))v32)((char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0), v288, a2);
                              if (v306 < 65)
                              {
                                unint64_t v3 = (char *)sub_25704AD30();
                                ((void (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                                if (v3 != (char *)64) {
                                  goto LABEL_300;
                                }
                                uint64_t v307 = sub_25704AD40();
                                if (v307) {
                                  goto LABEL_300;
                                }
                              }
                              else
                              {
                                uint64_t v307 = ((uint64_t (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                              }
                              v330 = (char *)v317;
                              MEMORY[0x270FA5388](v307);
                              unint64_t v3 = (char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0);
                              ((void (*)(char *, void, uint64_t))v32)(v3, v288, a2);
                              *(void *)&long long v335 = 0x7FFFFFFFFFFFFFFFLL;
                              char v308 = sub_25704AD40();
                              uint64_t v309 = sub_25704AD30();
                              if (v308)
                              {
                                if (v309 > 64)
                                {
                                  uint64_t v32 = (char *)v317;
                                  MEMORY[0x270FA5388](v309);
                                  sub_256FC9A38();
                                  sub_25704AD10();
                                  uint64_t v4 = sub_25704A6D0();
                                  ((void (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                                  ((void (*)(char *, uint64_t))v25)(v3, a2);
                                  if (v4) {
                                    goto LABEL_311;
                                  }
LABEL_300:
                                  uint64_t v4 = sub_25704AD20();
                                  ((void (*)(void (**)(char *, char *, char *), uint64_t))v25)(v288, a2);
                                  if (v4)
                                  {
                                    uint64_t v312 = sub_256FA76D0((uint64_t)v326, (int64_t)v325, v4);
                                    uint64_t v313 = sub_257022E6C(v312);
                                    swift_release();
                                    uint64_t v314 = sub_256FCED74(v313, 0);
                                    swift_bridgeObjectRelease();
                                    uint64_t v315 = type metadata accessor for MLXArray();
                                    v316 = v333;
                                    v333[3] = v315;
                                    uint64_t *v316 = v314;
                                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v338);
                                    goto LABEL_197;
                                  }
                                  goto LABEL_308;
                                }
                              }
                              else
                              {
                                uint64_t v32 = v332;
                                if (v309 > 63)
                                {
                                  v329 = (char *)v317;
                                  v334[0] = 0x7FFFFFFFFFFFFFFFLL;
                                  MEMORY[0x270FA5388](v309);
                                  v310 = (char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0);
                                  uint64_t v311 = (*((uint64_t (**)(char *, char *, uint64_t))v32 + 4))(v310, v310, a2);
                                  unint64_t v3 = (char *)v317;
                                  MEMORY[0x270FA5388](v311);
                                  sub_256FC9A38();
                                  sub_25704AD10();
                                  uint64_t v4 = sub_25704A6D0();
                                  v32 += 8;
                                  ((void (*)(char *, uint64_t))v25)(v310, a2);
                                  ((void (*)(char *, uint64_t))v25)(v310, a2);
                                  if (v4)
                                  {
LABEL_311:
                                    __break(1u);
                                    goto LABEL_312;
                                  }
                                  goto LABEL_300;
                                }
                              }
                              sub_25704AD20();
                              ((void (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                              goto LABEL_300;
                            }
LABEL_273:
                            v323 = v241;
                            unint64_t v322 = (unint64_t)v245;
                            v291 = v21;
                            char v292 = sub_25704AD40();
                            uint64_t v241 = v291;
                            uint64_t v32 = (char *)a2;
                            v245 = (void *)v30;
                            uint64_t v293 = sub_25704AD30();
                            if (v292)
                            {
                              if (v293 > 64)
                              {
                                unint64_t v321 = (unint64_t)v317;
                                v284 = v330;
                                MEMORY[0x270FA5388](v293);
                                sub_256FC9A38();
                                sub_25704AD10();
                                char v294 = sub_25704A6D0();
                                ((void (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v284 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                                ((void (*)(char *, uint64_t))v25)(v241, a2);
                                uint64_t v32 = v329;
                                v245 = (void *)v322;
                                uint64_t v241 = v323;
                                if (v294) {
                                  goto LABEL_285;
                                }
                                goto LABEL_287;
                              }
                              unint64_t v320 = v30;
                              v319 = *(char **)(*(void *)(v30 + 24) + 16);
                              uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                              unint64_t v321 = (unint64_t)v317;
                              MEMORY[0x270FA5388](AssociatedTypeWitness);
                              swift_getAssociatedConformanceWitness();
                              uint64_t v299 = sub_25704B210();
                              v317[1] = v317;
                              v300 = v330;
                              MEMORY[0x270FA5388](v299);
                              v318 = (char *)((unint64_t)(v300 + 15) & 0xFFFFFFFFFFFFFFF0);
                              v301 = (char *)((char *)v317 - v318);
                              sub_25704B1C0();
                              char v302 = sub_25704A6D0();
                              uint64_t v303 = ((uint64_t (*)(char *, uint64_t))v25)(v301, a2);
                              unint64_t v321 = (unint64_t)v317;
                              MEMORY[0x270FA5388](v303);
                              uint64_t v4 = (char *)v317 - v318;
                              (*((void (**)(int64_t, char *, uint64_t))v332 + 4))((char *)v317 - v318, v241, a2);
                              if (v302)
                              {
LABEL_314:
                                uint64_t result = ((uint64_t (*)(uint64_t, char *))v25)(v4, v32);
                                __break(1u);
                                return result;
                              }
                              uint64_t v304 = v335;
                              uint64_t v30 = (uint64_t)v245;
                              uint64_t v305 = sub_25704AD20();
                              ((void (*)(uint64_t, uint64_t))v25)(v4, a2);
                              BOOL v297 = v305 < v304;
                            }
                            else
                            {
                              if (v293 >= 64)
                              {
LABEL_286:
                                a2 = (uint64_t)v32;
                                ((void (*)(char *, char *))v25)(v241, v32);
                                uint64_t v32 = v329;
                                uint64_t v30 = (uint64_t)v245;
                                v284 = v330;
                                goto LABEL_287;
                              }
                              uint64_t v296 = sub_25704AD20();
                              ((void (*)(char *, uint64_t))v25)(v241, a2);
                              BOOL v297 = v296 < (uint64_t)v335;
                            }
                            uint64_t v32 = v329;
                            v245 = (void *)v322;
                            v284 = v330;
                            uint64_t v241 = v323;
                            if (!v297) {
                              goto LABEL_287;
                            }
                            goto LABEL_285;
                          }
                          uint64_t v32 = v329;
                        }
                        else
                        {
                          uint64_t v25 = v273[1];
                          ((void (*)(char *, uint64_t))v25)(v279, a2);
                          uint64_t v32 = v329;
                          uint64_t v30 = v271;
                        }
                        v288 = v331;
                        v284 = v330;
                        goto LABEL_288;
                      }
                    }
                    else
                    {
                      v268 = v332;
                      if (v266 > 63)
                      {
                        v329 = (char *)v317;
                        v334[0] = 0x7FFFFFFFFFFFFFFFLL;
                        MEMORY[0x270FA5388](v266);
                        uint64_t v30 = (uint64_t)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0);
                        uint64_t v289 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v268 + 4))(v30, v30, a2);
                        v325 = v317;
                        MEMORY[0x270FA5388](v289);
                        sub_256FC9A38();
                        sub_25704AD10();
                        char v290 = sub_25704A6D0();
                        ((void (*)(uint64_t, uint64_t))v25)(v30, a2);
                        ((void (*)(uint64_t, uint64_t))v25)(v30, a2);
                        if ((v290 & 1) == 0) {
                          goto LABEL_262;
                        }
LABEL_272:
                        __break(1u);
                        goto LABEL_273;
                      }
                    }
                    uint64_t v269 = sub_25704AD20();
                    ((void (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                    if ((uint64_t)v335 >= v269) {
                      goto LABEL_262;
                    }
                    goto LABEL_272;
                  }
LABEL_237:
                  v324 = v31;
                  v323 = v205;
                  v248 = v29;
                  char v249 = sub_25704AD40();
                  uint64_t v31 = v248;
                  uint64_t v32 = (char *)a2;
                  uint64_t v205 = v21;
                  uint64_t v250 = sub_25704AD30();
                  if (v249)
                  {
                    if (v250 > 64)
                    {
                      unint64_t v322 = (unint64_t)v317;
                      uint64_t v241 = v330;
                      MEMORY[0x270FA5388](v250);
                      sub_256FC9A38();
                      sub_25704AD10();
                      char v251 = sub_25704A6D0();
                      ((void (*)(char *, uint64_t))v25)((char *)v317 - ((unint64_t)(v241 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
                      ((void (*)(char *, uint64_t))v25)(v31, a2);
                      uint64_t v32 = v329;
                      uint64_t v205 = v323;
                      uint64_t v31 = v324;
                      if (v251) {
                        goto LABEL_249;
                      }
                      goto LABEL_251;
                    }
                    unint64_t v321 = (unint64_t)v21;
                    unint64_t v320 = *(void *)(*((void *)v21 + 3) + 16);
                    uint64_t v255 = swift_getAssociatedTypeWitness();
                    unint64_t v322 = (unint64_t)v317;
                    MEMORY[0x270FA5388](v255);
                    swift_getAssociatedConformanceWitness();
                    uint64_t v256 = sub_25704B210();
                    v318 = (char *)v317;
                    uint64_t v257 = v330;
                    MEMORY[0x270FA5388](v256);
                    v319 = (char *)((unint64_t)(v257 + 15) & 0xFFFFFFFFFFFFFFF0);
                    uint64_t v258 = (char *)((char *)v317 - v319);
                    sub_25704B1C0();
                    LODWORD(v320) = sub_25704A6D0();
                    uint64_t v259 = ((uint64_t (*)(char *, uint64_t))v25)(v258, a2);
                    MEMORY[0x270FA5388](v259);
                    uint64_t v4 = (char *)v317 - v319;
                    (*((void (**)(int64_t, char *, uint64_t))v332 + 4))((char *)v317 - v319, v31, a2);
                    if (v320)
                    {
LABEL_313:
                      ((void (*)(uint64_t, char *))v25)(v4, v32);
                      __break(1u);
                      goto LABEL_314;
                    }
                    uint64_t v260 = v335;
                    uint64_t v21 = v205;
                    uint64_t v261 = sub_25704AD20();
                    ((void (*)(uint64_t, uint64_t))v25)(v4, a2);
                    BOOL v254 = v261 < v260;
                  }
                  else
                  {
                    if (v250 >= 64)
                    {
LABEL_250:
                      a2 = (uint64_t)v32;
                      ((void (*)(char *, char *))v25)(v31, v32);
                      uint64_t v32 = v329;
                      uint64_t v21 = v205;
                      uint64_t v241 = v330;
                      goto LABEL_251;
                    }
                    uint64_t v253 = sub_25704AD20();
                    ((void (*)(char *, uint64_t))v25)(v31, a2);
                    BOOL v254 = v253 < (uint64_t)v335;
                  }
                  uint64_t v32 = v329;
                  uint64_t v205 = v323;
                  uint64_t v241 = v330;
                  uint64_t v31 = v324;
                  if (!v254) {
                    goto LABEL_251;
                  }
                  goto LABEL_249;
                }
                uint64_t v32 = v329;
              }
              else
              {
                uint64_t v25 = *((void *)v230 + 1);
                ((void (*)(char *, uint64_t))v25)(v236, a2);
                uint64_t v32 = v329;
                uint64_t v21 = v228;
              }
              v245 = v331;
              uint64_t v241 = v330;
              goto LABEL_252;
            }
          }
          else
          {
            int64_t v225 = v332;
            if (v223 > 63)
            {
              v329 = (char *)v317;
              v334[0] = 0x7FFFFFFFFFFFFFFFLL;
              MEMORY[0x270FA5388](v223);
              a2 = (uint64_t)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v246 = (*((uint64_t (**)(uint64_t, uint64_t, char *))v225 + 4))(a2, a2, v21);
              MEMORY[0x270FA5388](v246);
              uint64_t v31 = (char *)a2;
              sub_256FC9A38();
              sub_25704AD10();
              char v247 = sub_25704A6D0();
              ((void (*)(uint64_t, char *))v25)(a2, v21);
              ((void (*)(uint64_t, char *))v25)(a2, v21);
              if ((v247 & 1) == 0) {
                goto LABEL_226;
              }
LABEL_236:
              __break(1u);
              goto LABEL_237;
            }
          }
          uint64_t v226 = sub_25704AD20();
          ((void (*)(char *, char *))v25)((char *)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
          if ((uint64_t)v335 >= v226) {
            goto LABEL_226;
          }
          goto LABEL_236;
        }
        v325 = v317;
        v324 = v23;
        char v206 = sub_25704AD40();
        uint64_t v30 = (uint64_t)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v32 = v21;
        uint64_t v23 = v29;
        uint64_t v207 = sub_25704AD30();
        if ((v206 & 1) == 0)
        {
          if (v207 >= 64)
          {
LABEL_214:
            uint64_t v21 = v32;
            ((void (*)(uint64_t, char *))v25)(v30, v32);
            uint64_t v32 = v329;
            unint64_t v29 = v23;
            uint64_t v31 = v330;
            goto LABEL_215;
          }
          uint64_t v210 = sub_25704AD20();
          ((void (*)(char *, char *))v25)((char *)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
          BOOL v211 = v210 < (uint64_t)v335;
          goto LABEL_211;
        }
        if (v207 > 64)
        {
          v323 = (char *)v317;
          uint64_t v31 = v330;
          MEMORY[0x270FA5388](v207);
          sub_256FC9A38();
          sub_25704AD10();
          char v208 = sub_25704A6D0();
          ((void (*)(char *, char *))v25)((char *)v317 - ((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
          ((void (*)(uint64_t, char *))v25)(v30, v21);
          uint64_t v32 = v329;
          uint64_t v23 = v324;
          uint64_t v30 = (uint64_t)v325;
          if (v208) {
            goto LABEL_213;
          }
          goto LABEL_215;
        }
LABEL_209:
        unint64_t v322 = (unint64_t)v23;
        unint64_t v321 = *(void *)(*((void *)v23 + 3) + 16);
        uint64_t v212 = swift_getAssociatedTypeWitness();
        v323 = (char *)v317;
        MEMORY[0x270FA5388](v212);
        swift_getAssociatedConformanceWitness();
        uint64_t v213 = sub_25704B210();
        v319 = (char *)v317;
        uint64_t v214 = v330;
        MEMORY[0x270FA5388](v213);
        unint64_t v320 = (unint64_t)(v214 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v215 = (char *)v317 - v320;
        sub_25704B1C0();
        LODWORD(v321) = sub_25704A6D0();
        uint64_t v216 = ((uint64_t (*)(char *, char *))v25)(v215, v32);
        MEMORY[0x270FA5388](v216);
        uint64_t v4 = (uint64_t)v317 - v320;
        (*((void (**)(char *, uint64_t, char *))v332 + 4))((char *)v317 - v320, v30, v32);
        if (v321)
        {
LABEL_312:
          ((void (*)(uint64_t, char *))v25)(v4, v32);
          __break(1u);
          goto LABEL_313;
        }
        uint64_t v217 = v335;
        uint64_t v21 = v32;
        unint64_t v29 = v23;
        uint64_t v218 = sub_25704AD20();
        ((void (*)(uint64_t, char *))v25)(v4, v32);
        BOOL v211 = v218 < v217;
LABEL_211:
        uint64_t v32 = v329;
        uint64_t v23 = v324;
        uint64_t v31 = v330;
        uint64_t v30 = (uint64_t)v325;
        if (!v211) {
          goto LABEL_215;
        }
        goto LABEL_213;
      }
      uint64_t v32 = v329;
    }
    else
    {
      uint64_t v25 = *((void *)v15 + 1);
      ((void (*)(char *, char *))v25)(v22, v21);
      uint64_t v32 = v329;
      unint64_t v29 = v13;
    }
    uint64_t v205 = (char *)v331;
    uint64_t v31 = v330;
    goto LABEL_216;
  }
  while (1)
  {
LABEL_88:
    sub_256FB11E8((uint64_t)&v335, &qword_269FDC948);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v341);
LABEL_38:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v344);
    if (!*(void *)(v4 + 16))
    {
LABEL_39:
      long long v341 = 0u;
      long long v342 = 0u;
      v343 = 0;
LABEL_40:
      sub_256FB11E8((uint64_t)&v341, &qword_269FDC948);
      if (!*(void *)(v4 + 16)) {
        goto LABEL_52;
      }
      goto LABEL_41;
    }
LABEL_21:
    unint64_t v36 = sub_256FED050(0x7472617473, 0xE500000000000000);
    if ((v37 & 1) == 0) {
      goto LABEL_39;
    }
    sub_256FB118C(*(void *)(v4 + 56) + 32 * v36, (uint64_t)&v338);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v343 = 0;
      long long v341 = 0u;
      long long v342 = 0u;
      goto LABEL_40;
    }
    if (!*((void *)&v342 + 1)) {
      goto LABEL_40;
    }
    sub_256FA81EC(&v341, (uint64_t)&v344);
    if (*(void *)(v4 + 16) && (unint64_t v38 = sub_256FED050(1886352499, 0xE400000000000000), (v39 & 1) != 0))
    {
      sub_256FB118C(*(void *)(v4 + 56) + 32 * v38, (uint64_t)&v335);
      if (swift_dynamicCast())
      {
        if (*((void *)&v339 + 1))
        {
          v333 = (uint64_t *)a2;
          v347 = v3;
          sub_256FA81EC(&v338, (uint64_t)&v341);
          unint64_t v3 = v345;
          id v40 = v346;
          unint64_t v41 = __swift_project_boxed_opaque_existential_1(&v344, (uint64_t)v345);
          v328 = (char *)v317;
          uint64_t v30 = *((void *)v3 - 1);
          id v42 = *(char **)(v30 + 64);
          MEMORY[0x270FA5388](v41);
          unint64_t v43 = (unint64_t)(v42 + 15) & 0xFFFFFFFFFFFFFFF0;
          unint64_t v44 = *(char **)(v30 + 16);
          ((void (*)(char *))v44)((char *)v317 - v43);
          v329 = v40;
          uint64_t v45 = sub_25704AD40();
          LOBYTE(v40) = v45;
          v327 = v317;
          v330 = v42;
          MEMORY[0x270FA5388](v45);
          int64_t v46 = (int64_t)v317 - v43;
          unint64_t v47 = (char *)v317 - v43;
          char v48 = (char *)v317 - v43;
          uint64_t v49 = (char *)v317 - v43;
          unint64_t v50 = v44;
          v331 = (void (**)(char *, char *, char *))(v30 + 16);
          ((void (*)(char *, char *, char *))v44)(v47, v49, v3);
          v332 = (char *)v30;
          if ((v40 & 1) == 0) {
            goto LABEL_108;
          }
          uint64_t v25 = (uint64_t)v329;
          uint64_t v51 = sub_25704AD30();
          uint64_t v53 = *(uint64_t (**)(int64_t, char *))(v30 + 8);
          uint64_t v52 = v30 + 8;
          a2 = (uint64_t)v53;
          uint64_t v54 = v53(v46, v3);
          if (v51 <= 64)
          {
LABEL_109:
            uint64_t v30 = (uint64_t)v48;
            uint64_t v58 = v330;
            goto LABEL_146;
          }
          v326 = (void *)v52;
          MEMORY[0x270FA5388](v54);
          uint64_t v32 = (char *)v317 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v30 = (uint64_t)v48;
          ((void (*)(char *, char *, char *))v50)(v32, v48, v3);
          *(void *)&long long v338 = 0x8000000000000000;
          if (sub_25704AD40())
          {
            uint64_t v56 = sub_25704AD30();
            if (v56 >= 64)
            {
              v324 = (char *)v317;
              uint64_t v58 = v330;
              MEMORY[0x270FA5388](v56);
              v325 = v317;
              sub_256FC9A38();
              sub_25704AD10();
              LODWORD(v323) = sub_25704A6D0();
              ((void (*)(char *, char *))a2)((char *)v317 - ((unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
              ((void (*)(char *, char *))a2)(v32, v3);
              if ((v323 & 1) == 0) {
                goto LABEL_146;
              }
            }
            else
            {
              uint64_t v57 = sub_25704AD20();
              ((void (*)(char *, char *))a2)(v32, v3);
              uint64_t v58 = v330;
              if (v57 >= (uint64_t)v338) {
                goto LABEL_146;
              }
            }
            goto LABEL_144;
          }
          v325 = v317;
          char v137 = sub_25704AD40();
          uint64_t v138 = sub_25704AD30();
          if (v137)
          {
            uint64_t v58 = v330;
            if (v138 > 64)
            {
              v324 = (char *)v317;
              MEMORY[0x270FA5388](v138);
              sub_256FC9A38();
              sub_25704AD10();
              char v139 = sub_25704A6D0();
              ((void (*)(char *, char *))a2)((char *)v317 - ((unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
              ((void (*)(char *, char *))a2)(v32, v3);
              if ((v139 & 1) == 0) {
                goto LABEL_146;
              }
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            v324 = *(char **)(*(void *)(v25 + 24) + 16);
            uint64_t v142 = swift_getAssociatedTypeWitness();
            v323 = (char *)v317;
            MEMORY[0x270FA5388](v142);
            unint64_t v320 = (unint64_t)v317 - v143;
            swift_getAssociatedConformanceWitness();
            uint64_t v144 = sub_25704B210();
            unint64_t v321 = (unint64_t)v317;
            MEMORY[0x270FA5388](v144);
            unint64_t v322 = (unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0;
            uint64_t v145 = (char *)v317 - v322;
            sub_25704B1C0();
            LODWORD(v324) = sub_25704A6D0();
            uint64_t v146 = ((uint64_t (*)(char *, char *))a2)(v145, v3);
            v323 = (char *)v317;
            MEMORY[0x270FA5388](v146);
            uint64_t v4 = (uint64_t)v317 - v322;
            (*((void (**)(char *, char *, char *))v332 + 4))((char *)v317 - v322, v32, v3);
            if (v324)
            {
LABEL_309:
              ((void (*)(uint64_t, char *))a2)(v4, v3);
              __break(1u);
              goto LABEL_310;
            }
            uint64_t v32 = (char *)v338;
            uint64_t v147 = sub_25704AD20();
            ((void (*)(uint64_t, char *))a2)(v4, v3);
            BOOL v141 = v147 < (uint64_t)v32;
          }
          else
          {
            uint64_t v58 = v330;
            if (v138 >= 64)
            {
LABEL_145:
              ((void (*)(char *, char *))a2)(v32, v3);
              goto LABEL_146;
            }
            uint64_t v140 = sub_25704AD20();
            ((void (*)(char *, char *))a2)(v32, v3);
            BOOL v141 = v140 < (uint64_t)v338;
          }
          if (!v141)
          {
LABEL_146:
            uint64_t v148 = sub_25704AD30();
            uint64_t v32 = (char *)v317;
            MEMORY[0x270FA5388](v148);
            ((void (*)(char *, uint64_t, char *))v50)((char *)v317 - ((unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v3);
            if (v148 < 65)
            {
              uint64_t v150 = sub_25704AD30();
              ((void (*)(char *, char *))a2)((char *)v317 - ((unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
              if (v150 != 64) {
                goto LABEL_156;
              }
              uint64_t v149 = sub_25704AD40();
              if (v149) {
                goto LABEL_156;
              }
            }
            else
            {
              uint64_t v149 = ((uint64_t (*)(char *, char *))a2)((char *)v317 - ((unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
            }
            v330 = (char *)a2;
            v329 = (char *)v317;
            MEMORY[0x270FA5388](v149);
            uint64_t v151 = (char *)v317 - ((unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0);
            ((void (*)(char *, uint64_t, char *))v50)(v151, v30, v3);
            *(void *)&long long v338 = 0x7FFFFFFFFFFFFFFFLL;
            char v152 = sub_25704AD40();
            uint64_t v153 = sub_25704AD30();
            if ((v152 & 1) == 0)
            {
              v331 = (void (**)(char *, char *, char *))v317;
              long long v157 = v332;
              if (v153 > 63)
              {
                v326 = v317;
                *(void *)&long long v335 = 0x7FFFFFFFFFFFFFFFLL;
                MEMORY[0x270FA5388](v153);
                uint64_t v179 = (char *)v317 - ((unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0);
                uint64_t v180 = (*((uint64_t (**)(char *, char *, char *))v157 + 4))(v179, v179, v3);
                MEMORY[0x270FA5388](v180);
                uint64_t v58 = v179;
                sub_256FC9A38();
                sub_25704AD10();
                char v181 = sub_25704A6D0();
                unint64_t v50 = v330;
                ((void (*)(char *, char *))v330)(v179, v3);
                uint64_t v182 = v179;
                a2 = (uint64_t)v50;
                ((void (*)(char *, char *))v50)(v182, v3);
                uint64_t v32 = (char *)v331;
                if ((v181 & 1) == 0) {
                  goto LABEL_156;
                }
              }
              else
              {
                uint64_t v158 = sub_25704AD20();
                a2 = (uint64_t)v330;
                ((void (*)(char *, char *))v330)((char *)v317 - ((unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
                uint64_t v32 = (char *)v331;
                if ((uint64_t)v338 >= v158) {
                  goto LABEL_156;
                }
              }
LABEL_167:
              __break(1u);
              goto LABEL_168;
            }
            if (v153 <= 64)
            {
              uint64_t v178 = sub_25704AD20();
              a2 = (uint64_t)v330;
              ((void (*)(char *, char *))v330)((char *)v317 - ((unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
              if ((uint64_t)v338 < v178) {
                goto LABEL_167;
              }
            }
            else
            {
              unint64_t v50 = (char *)v317;
              MEMORY[0x270FA5388](v153);
              uint64_t v154 = (char *)v317 - ((unint64_t)(v58 + 15) & 0xFFFFFFFFFFFFFFF0);
              sub_256FC9A38();
              sub_25704AD10();
              char v155 = sub_25704A6D0();
              uint64_t v58 = v332 + 8;
              uint64_t v156 = v154;
              a2 = (uint64_t)v330;
              ((void (*)(char *, char *))v330)(v156, v3);
              ((void (*)(char *, char *))a2)(v151, v3);
              uint64_t v32 = (char *)v317;
              if (v155) {
                goto LABEL_167;
              }
            }
LABEL_156:
            v327 = (int64_t *)sub_25704AD20();
            ((void (*)(uint64_t, char *))a2)(v30, v3);
            unint64_t v3 = (char *)*((void *)&v342 + 1);
            uint64_t v159 = v343;
            uint64_t v160 = __swift_project_boxed_opaque_existential_1(&v341, *((uint64_t *)&v342 + 1));
            v328 = (char *)v317;
            uint64_t v161 = (void *)*((void *)v3 - 1);
            uint64_t v162 = (char *)v161[8];
            MEMORY[0x270FA5388](v160);
            unint64_t v163 = (unint64_t)(v162 + 15) & 0xFFFFFFFFFFFFFFF0;
            long long v164 = (void (*)(char *))v161[2];
            v164((char *)v317 - v163);
            v329 = v159;
            uint64_t v165 = sub_25704AD40();
            LOBYTE(v159) = v165;
            v326 = v317;
            v330 = v162;
            MEMORY[0x270FA5388](v165);
            long long v166 = (char *)v317 - v163;
            uint64_t v167 = (char *)v317 - v163;
            uint64_t v168 = (char *)v317 - v163;
            char v169 = (char *)v317 - v163;
            a2 = (uint64_t)v164;
            v331 = (void (**)(char *, char *, char *))(v161 + 2);
            ((void (*)(char *, char *, char *))v164)(v167, v169, v3);
            v332 = (char *)v161;
            if (v159)
            {
              uint64_t v25 = (uint64_t)v329;
              uint64_t v170 = sub_25704AD30();
              uint64_t v172 = (uint64_t (*)(char *, char *))v161[1];
              int64_t v171 = (int64_t)(v161 + 1);
              uint64_t v30 = (uint64_t)v172;
              uint64_t v173 = v172(v166, v3);
              if (v170 > 64)
              {
                v325 = (void *)v171;
                unint64_t v50 = (char *)v317;
                MEMORY[0x270FA5388](v173);
                uint64_t v32 = (char *)v317 - ((v174 + 15) & 0xFFFFFFFFFFFFFFF0);
                uint64_t v58 = v168;
                ((void (*)(char *, char *, char *))a2)(v32, v168, v3);
                *(void *)&long long v338 = 0x8000000000000000;
                if (sub_25704AD40())
                {
                  uint64_t v175 = sub_25704AD30();
                  if (v175 >= 64)
                  {
                    v323 = (char *)v317;
                    uint64_t v177 = v330;
                    MEMORY[0x270FA5388](v175);
                    v324 = (char *)v317;
                    sub_256FC9A38();
                    sub_25704AD10();
                    LODWORD(v322) = sub_25704A6D0();
                    ((void (*)(char *, char *))v30)((char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
                    ((void (*)(char *, char *))v30)(v32, v3);
                    if ((v322 & 1) == 0) {
                      goto LABEL_182;
                    }
                  }
                  else
                  {
                    uint64_t v176 = sub_25704AD20();
                    ((void (*)(char *, char *))v30)(v32, v3);
                    uint64_t v177 = v330;
                    if (v176 >= (uint64_t)v338) {
                      goto LABEL_182;
                    }
                  }
                  goto LABEL_180;
                }
LABEL_168:
                v324 = v50;
                char v183 = sub_25704AD40();
                uint64_t v184 = sub_25704AD30();
                if (v183)
                {
                  uint64_t v177 = v330;
                  if (v184 > 64)
                  {
                    v323 = (char *)v317;
                    MEMORY[0x270FA5388](v184);
                    sub_256FC9A38();
                    sub_25704AD10();
                    char v185 = sub_25704A6D0();
                    ((void (*)(char *, char *))v30)((char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
                    ((void (*)(char *, char *))v30)(v32, v3);
                    if ((v185 & 1) == 0) {
                      goto LABEL_182;
                    }
LABEL_180:
                    __break(1u);
                    goto LABEL_181;
                  }
                  v323 = *(char **)(*(void *)(v25 + 24) + 16);
                  uint64_t v188 = swift_getAssociatedTypeWitness();
                  unint64_t v322 = (unint64_t)v317;
                  MEMORY[0x270FA5388](v188);
                  v319 = (char *)v317 - v189;
                  swift_getAssociatedConformanceWitness();
                  uint64_t v190 = sub_25704B210();
                  unint64_t v320 = (unint64_t)v317;
                  MEMORY[0x270FA5388](v190);
                  unint64_t v321 = (unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0;
                  uint64_t v191 = (char *)v317 - v321;
                  sub_25704B1C0();
                  LODWORD(v323) = sub_25704A6D0();
                  uint64_t v192 = ((uint64_t (*)(char *, char *))v30)(v191, v3);
                  unint64_t v322 = (unint64_t)v317;
                  MEMORY[0x270FA5388](v192);
                  uint64_t v4 = (uint64_t)v317 - v321;
                  (*((void (**)(char *, char *, char *))v332 + 4))((char *)v317 - v321, v32, v3);
                  if (v323)
                  {
LABEL_310:
                    ((void (*)(uint64_t, char *))v30)(v4, v3);
                    __break(1u);
                    goto LABEL_311;
                  }
                  uint64_t v32 = (char *)v338;
                  uint64_t v193 = sub_25704AD20();
                  ((void (*)(uint64_t, char *))v30)(v4, v3);
                  BOOL v187 = v193 < (uint64_t)v32;
                }
                else
                {
                  uint64_t v177 = v330;
                  if (v184 >= 64)
                  {
LABEL_181:
                    ((void (*)(char *, char *))v30)(v32, v3);
                    goto LABEL_182;
                  }
                  uint64_t v186 = sub_25704AD20();
                  ((void (*)(char *, char *))v30)(v32, v3);
                  BOOL v187 = v186 < (uint64_t)v338;
                }
                if (!v187)
                {
LABEL_182:
                  uint64_t v194 = sub_25704AD30();
                  uint64_t v32 = (char *)v317;
                  MEMORY[0x270FA5388](v194);
                  ((void (*)(char *, char *, char *))a2)((char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0), v58, v3);
                  if (v194 < 65)
                  {
                    unint64_t v50 = (char *)sub_25704AD30();
                    ((void (*)(char *, char *))v30)((char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
                    if (v50 != (char *)64) {
                      goto LABEL_195;
                    }
                    uint64_t v195 = sub_25704AD40();
                    if (v195) {
                      goto LABEL_195;
                    }
                  }
                  else
                  {
                    uint64_t v195 = ((uint64_t (*)(char *, char *))v30)((char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
                  }
                  v330 = (char *)v30;
                  v329 = (char *)v317;
                  MEMORY[0x270FA5388](v195);
                  unint64_t v50 = (char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0);
                  ((void (*)(char *, char *, char *))a2)(v50, v58, v3);
                  *(void *)&long long v338 = 0x7FFFFFFFFFFFFFFFLL;
                  char v196 = sub_25704AD40();
                  uint64_t v197 = sub_25704AD30();
                  if (v196)
                  {
                    if (v197 <= 64)
                    {
                      sub_25704AD20();
                      uint64_t v30 = (uint64_t)v330;
                      ((void (*)(char *, char *))v330)((char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
                    }
                    else
                    {
                      a2 = (uint64_t)v317;
                      MEMORY[0x270FA5388](v197);
                      sub_256FC9A38();
                      sub_25704AD10();
                      uint64_t v4 = sub_25704A6D0();
                      uint64_t v30 = (uint64_t)v330;
                      ((void (*)(char *, char *))v330)((char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
                      ((void (*)(char *, char *))v30)(v50, v3);
                      uint64_t v32 = (char *)v317;
                      if (v4) {
                        goto LABEL_307;
                      }
                    }
                  }
                  else
                  {
                    v331 = (void (**)(char *, char *, char *))v317;
                    uint64_t v198 = v332;
                    if (v197 > 63)
                    {
                      v325 = v317;
                      *(void *)&long long v335 = 0x7FFFFFFFFFFFFFFFLL;
                      MEMORY[0x270FA5388](v197);
                      uint64_t v199 = (*((uint64_t (**)(char *, char *, char *))v198 + 4))((char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
                      v324 = (char *)v317;
                      MEMORY[0x270FA5388](v199);
                      unint64_t v50 = (char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0);
                      sub_256FC9A38();
                      sub_25704AD10();
                      uint64_t v4 = sub_25704A6D0();
                      a2 = (uint64_t)v330;
                      ((void (*)(char *, char *))v330)(v50, v3);
                      uint64_t v30 = a2;
                      ((void (*)(char *, char *))a2)(v50, v3);
                      uint64_t v32 = (char *)v331;
                      if (v4)
                      {
LABEL_307:
                        __break(1u);
LABEL_308:
                        __break(1u);
                        goto LABEL_309;
                      }
                    }
                    else
                    {
                      sub_25704AD20();
                      uint64_t v30 = (uint64_t)v330;
                      ((void (*)(char *, char *))v330)((char *)v317 - ((unint64_t)(v177 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
                      uint64_t v32 = (char *)v331;
                    }
                  }
LABEL_195:
                  uint64_t v4 = sub_25704AD20();
                  ((void (*)(char *, char *))v30)(v58, v3);
                  if (v4 >= (uint64_t)v327)
                  {
                    uint64_t v200 = sub_256FA6EC8(v327, v4);
                    uint64_t v201 = sub_257022E6C((uint64_t)v200);
                    swift_release();
                    uint64_t v202 = sub_256FCED74(v201, 0);
                    swift_bridgeObjectRelease();
                    uint64_t v203 = type metadata accessor for MLXArray();
                    uint64_t v204 = v333;
                    v333[3] = v203;
                    *uint64_t v204 = v202;
LABEL_197:
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v341);
                    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v344);
                  }
                  goto LABEL_304;
                }
                goto LABEL_180;
              }
            }
            else
            {
              uint64_t v30 = v161[1];
              ((void (*)(char *, char *))v30)(v166, v3);
              uint64_t v25 = (uint64_t)v329;
            }
            uint64_t v58 = v168;
            uint64_t v177 = v330;
            goto LABEL_182;
          }
          goto LABEL_144;
        }
      }
      else
      {
        uint64_t v340 = 0;
        long long v338 = 0u;
        long long v339 = 0u;
      }
    }
    else
    {
      long long v338 = 0u;
      long long v339 = 0u;
      uint64_t v340 = 0;
    }
    sub_256FB11E8((uint64_t)&v338, &qword_269FDC948);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v344);
    if (!*(void *)(v4 + 16))
    {
LABEL_52:
      long long v341 = 0u;
      long long v342 = 0u;
      v343 = 0;
      goto LABEL_53;
    }
LABEL_41:
    unint64_t v59 = sub_256FED050(0x7472617473, 0xE500000000000000);
    if ((v60 & 1) == 0) {
      goto LABEL_52;
    }
    sub_256FB118C(*(void *)(v4 + 56) + 32 * v59, (uint64_t)&v338);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
    if (swift_dynamicCast())
    {
      if (*((void *)&v342 + 1))
      {
        v333 = (uint64_t *)a2;
        v347 = v3;
        sub_256FA81EC(&v341, (uint64_t)&v344);
        uint64_t v61 = (uint64_t)v345;
        uint64_t v62 = v346;
        uint64_t v63 = __swift_project_boxed_opaque_existential_1(&v344, (uint64_t)v345);
        v328 = (char *)v317;
        uint64_t v64 = *(void **)(v61 - 8);
        uint64_t v65 = (char *)v64[8];
        MEMORY[0x270FA5388](v63);
        unint64_t v66 = (char *)v317 - ((unint64_t)(v65 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v67 = (char *)v64[2];
        ((void (*)(char *))v67)(v66);
        uint64_t v68 = sub_25704AD40();
        char v69 = v68;
        v327 = v317;
        v329 = v65;
        unint64_t v50 = (char *)v61;
        MEMORY[0x270FA5388](v68);
        unint64_t v70 = v66;
        uint64_t v71 = v66;
        int v72 = v66;
        uint64_t v32 = (char *)(v64 + 2);
        v332 = v67;
        ((void (*)(char *, char *, char *))v67)(v71, v72, v50);
        v331 = (void (**)(char *, char *, char *))v64;
        if (v69)
        {
          uint64_t v73 = sub_25704AD30();
          uint64_t v75 = (char *)v64[1];
          uint64_t v74 = (uint64_t)(v64 + 1);
          v330 = v75;
          uint64_t v76 = ((uint64_t (*)(char *, char *))v75)(v70, v50);
          unint64_t v3 = v62;
          if (v73 > 64)
          {
            v326 = (void *)v74;
            v325 = v317;
            char v48 = v329;
            MEMORY[0x270FA5388](v76);
            uint64_t v30 = (uint64_t)v71;
            ((void (*)(char *, char *, char *))v332)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v71, v50);
            *(void *)&long long v341 = 0x8000000000000000;
            if (sub_25704AD40())
            {
              uint64_t v77 = sub_25704AD30();
              if (v77 < 64)
              {
LABEL_91:
                uint64_t v106 = sub_25704AD20();
                unint64_t v95 = (void (*)(char *, char *))v330;
                ((void (*)(char *, char *))v330)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
                if (v106 >= (uint64_t)v341) {
                  goto LABEL_114;
                }
                goto LABEL_92;
              }
LABEL_78:
              v324 = (char *)v317;
              MEMORY[0x270FA5388](v77);
              sub_256FC9A38();
              sub_25704AD10();
              char v100 = sub_25704A6D0();
              unint64_t v101 = v330;
              ((void (*)(char *, char *))v330)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
              unint64_t v95 = (void (*)(char *, char *))v101;
              ((void (*)(char *, char *))v101)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
              if ((v100 & 1) == 0) {
                goto LABEL_114;
              }
LABEL_92:
              __break(1u);
LABEL_93:
              unint64_t v322 = *(void *)(*((void *)v3 + 3) + 16);
              uint64_t v107 = swift_getAssociatedTypeWitness();
              v323 = (char *)v317;
              MEMORY[0x270FA5388](v107);
              swift_getAssociatedConformanceWitness();
              uint64_t v108 = sub_25704B210();
              unint64_t v320 = (unint64_t)v317;
              MEMORY[0x270FA5388](v108);
              unint64_t v321 = (unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0;
              uint64_t v25 = (uint64_t)v317 - v321;
              sub_25704B1C0();
              LODWORD(v322) = sub_25704A6D0();
              a2 = (uint64_t)v329;
              uint64_t v109 = ((uint64_t (*)(uint64_t, char *))v329)(v25, v50);
              v323 = (char *)v317;
              MEMORY[0x270FA5388](v109);
              uint64_t v4 = (uint64_t)v317 - v321;
              v331[4]((char *)v317 - v321, v324, v50);
              if (v322) {
                goto LABEL_305;
              }
              v324 = (char *)v341;
              uint64_t v110 = sub_25704AD20();
              ((void (*)(uint64_t, char *))a2)(v4, v50);
              long long v92 = (void (*)(char *, char *))a2;
              if (v110 >= (uint64_t)v324) {
                goto LABEL_95;
              }
              goto LABEL_86;
            }
            char v99 = sub_25704AD40();
            uint64_t v77 = sub_25704AD30();
            if (v99)
            {
              if (v77 <= 64)
              {
                v323 = *(char **)(*((void *)v3 + 3) + 16);
                uint64_t v122 = swift_getAssociatedTypeWitness();
                v324 = (char *)v317;
                MEMORY[0x270FA5388](v122);
                swift_getAssociatedConformanceWitness();
                uint64_t v123 = sub_25704B210();
                unint64_t v321 = (unint64_t)v317;
                MEMORY[0x270FA5388](v123);
                unint64_t v322 = (unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0;
                uint64_t v25 = (uint64_t)v317 - v322;
                sub_25704B1C0();
                LODWORD(v323) = sub_25704A6D0();
                a2 = (uint64_t)v330;
                uint64_t v124 = ((uint64_t (*)(uint64_t, char *))v330)(v25, v50);
                v324 = (char *)v317;
                MEMORY[0x270FA5388](v124);
                uint64_t v4 = (uint64_t)v317 - v322;
                v331[4]((char *)v317 - v322, (char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
                if (v323) {
                  goto LABEL_306;
                }
                uint64_t v125 = v341;
                uint64_t v126 = sub_25704AD20();
                ((void (*)(uint64_t, char *))a2)(v4, v50);
                BOOL v141 = v126 < v125;
                unint64_t v95 = (void (*)(char *, char *))a2;
                if (!v141) {
                  goto LABEL_114;
                }
                goto LABEL_92;
              }
              goto LABEL_78;
            }
            if (v77 < 64) {
              goto LABEL_91;
            }
            unint64_t v95 = (void (*)(char *, char *))v330;
            ((void (*)(char *, char *))v330)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
LABEL_114:
            uint64_t v23 = (char *)v331;
LABEL_115:
            uint64_t v127 = sub_25704AD30();
            v329 = (char *)v317;
            MEMORY[0x270FA5388](v127);
            ((void (*)(char *, uint64_t, char *))v332)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v50);
            if (v127 < 65)
            {
              uint64_t v25 = sub_25704AD30();
              v95((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
              if (v25 != 64) {
                goto LABEL_127;
              }
              uint64_t v128 = sub_25704AD40();
              if (v128) {
                goto LABEL_127;
              }
            }
            else
            {
              uint64_t v128 = ((uint64_t (*)(char *, char *))v95)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
            }
            v330 = (char *)v95;
            MEMORY[0x270FA5388](v128);
            ((void (*)(char *, uint64_t, char *))v332)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v50);
            *(void *)&long long v341 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v25 = sub_25704AD40();
            uint64_t v129 = sub_25704AD30();
            if (v25)
            {
              if (v129 > 64)
              {
                uint64_t v32 = (char *)v317;
                MEMORY[0x270FA5388](v129);
                sub_256FC9A38();
                sub_25704AD10();
                uint64_t v4 = sub_25704A6D0();
                uint64_t v25 = (uint64_t)v330;
                ((void (*)(char *, char *))v330)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
                unint64_t v95 = (void (*)(char *, char *))v25;
                ((void (*)(char *, char *))v25)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
                a2 = (uint64_t)v317;
                if (v4)
                {
LABEL_303:
                  __break(1u);
LABEL_304:
                  __break(1u);
LABEL_305:
                  ((void (*)(uint64_t, char *))a2)(v4, v50);
                  __break(1u);
LABEL_306:
                  ((void (*)(uint64_t, char *))a2)(v4, v50);
                  __break(1u);
                  goto LABEL_307;
                }
                goto LABEL_126;
              }
            }
            else if (v129 > 63)
            {
              v332 = (char *)v317;
              *(void *)&long long v338 = 0x7FFFFFFFFFFFFFFFLL;
              MEMORY[0x270FA5388](v129);
              uint64_t v25 = (uint64_t)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v32 = (char *)v317;
              uint64_t v130 = ((uint64_t (*)(uint64_t, uint64_t, char *))v331[4])(v25, v25, v50);
              MEMORY[0x270FA5388](v130);
              sub_256FC9A38();
              sub_25704AD10();
              uint64_t v4 = sub_25704A6D0();
              unint64_t v131 = v330;
              ((void (*)(uint64_t, char *))v330)(v25, v50);
              ((void (*)(uint64_t, char *))v131)(v25, v50);
              a2 = (uint64_t)v317;
              unint64_t v95 = (void (*)(char *, char *))v131;
              if (v4) {
                goto LABEL_303;
              }
              goto LABEL_126;
            }
            sub_25704AD20();
            unint64_t v95 = (void (*)(char *, char *))v330;
            ((void (*)(char *, char *))v330)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
LABEL_126:
            uint64_t v23 = (char *)v331;
LABEL_127:
            int64_t v46 = sub_25704AD20();
            v95((char *)v30, v50);
            if ((v46 & 0x8000000000000000) == 0) {
              goto LABEL_128;
            }
            __break(1u);
            goto LABEL_209;
          }
          uint64_t v23 = (char *)v331;
          unint64_t v95 = (void (*)(char *, char *))v330;
        }
        else
        {
          unint64_t v95 = (void (*)(char *, char *))v64[1];
          v95(v70, v50);
          uint64_t v23 = (char *)v64;
          unint64_t v3 = v62;
        }
        uint64_t v30 = (uint64_t)v71;
        char v48 = v329;
        goto LABEL_115;
      }
    }
    else
    {
      v343 = 0;
      long long v341 = 0u;
      long long v342 = 0u;
    }
LABEL_53:
    sub_256FB11E8((uint64_t)&v341, &qword_269FDC948);
    sub_256FEAE98(1886352499, 0xE400000000000000, v4, &v338);
    if (!*((void *)&v339 + 1))
    {
      sub_256FB11E8((uint64_t)&v338, &qword_269FDC6E0);
      long long v341 = 0u;
      long long v342 = 0u;
      v343 = 0;
LABEL_64:
      sub_256FB11E8((uint64_t)&v341, &qword_269FDC948);
      sub_256F92DE8();
      swift_allocError();
      *long long v93 = 57;
      return swift_willThrow();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v343 = 0;
      long long v341 = 0u;
      long long v342 = 0u;
      goto LABEL_64;
    }
    if (!*((void *)&v342 + 1)) {
      goto LABEL_64;
    }
    v333 = (uint64_t *)a2;
    v347 = v3;
    sub_256FA81EC(&v341, (uint64_t)&v344);
    unint64_t v50 = v345;
    uint64_t v78 = v346;
    uint64_t v79 = __swift_project_boxed_opaque_existential_1(&v344, (uint64_t)v345);
    v327 = v317;
    uint64_t v80 = (void *)*((void *)v50 - 1);
    long long v81 = (char *)v80[8];
    MEMORY[0x270FA5388](v79);
    unint64_t v82 = (unint64_t)(v81 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v83 = (char *)v80[2];
    ((void (*)(char *))v83)((char *)v317 - v82);
    v328 = v78;
    uint64_t v84 = sub_25704AD40();
    LOBYTE(v78) = v84;
    v326 = v317;
    v330 = v81;
    MEMORY[0x270FA5388](v84);
    unint64_t v85 = (char *)v317 - v82;
    unint64_t v86 = (char *)v317 - v82;
    uint64_t v32 = (char *)(v80 + 2);
    v332 = v83;
    ((void (*)(char *, char *, char *))v83)((char *)v317 - v82, (char *)v317 - v82, v50);
    v331 = (void (**)(char *, char *, char *))v80;
    if ((v78 & 1) == 0)
    {
      long long v92 = (void (*)(char *, char *))v80[1];
      v92(v85, v50);
      unint64_t v3 = v328;
      goto LABEL_68;
    }
    unint64_t v3 = v328;
    uint64_t v87 = sub_25704AD30();
    v329 = (char *)v80[1];
    uint64_t v88 = ((uint64_t (*)(char *, char *))v329)(v85, v50);
    if (v87 <= 64) {
      break;
    }
    v325 = v317;
    MEMORY[0x270FA5388](v88);
    a2 = (uint64_t)v317 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v30 = (uint64_t)v317 - v82;
    ((void (*)(uint64_t, char *, char *))v332)(a2, v86, v50);
    *(void *)&long long v341 = 0x8000000000000000;
    if (sub_25704AD40())
    {
      uint64_t v90 = sub_25704AD30();
      if (v90 < 64)
      {
        uint64_t v4 = sub_25704AD20();
        uint64_t v91 = v329;
        ((void (*)(uint64_t, char *))v329)(a2, v50);
        long long v92 = (void (*)(char *, char *))v91;
        char v48 = v330;
        if (v4 >= (uint64_t)v341) {
          goto LABEL_95;
        }
        goto LABEL_86;
      }
      v324 = (char *)v317;
      char v48 = v330;
      MEMORY[0x270FA5388](v90);
      sub_256FC9A38();
      sub_25704AD10();
      uint64_t v4 = sub_25704A6D0();
      unint64_t v102 = v329;
      ((void (*)(char *, char *))v329)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
      ((void (*)(uint64_t, char *))v102)(a2, v50);
      long long v92 = (void (*)(char *, char *))v102;
      goto LABEL_81;
    }
    char v96 = sub_25704AD40();
    v324 = (char *)a2;
    uint64_t v97 = sub_25704AD30();
    if (v96)
    {
      char v48 = v330;
      if (v97 <= 64) {
        goto LABEL_93;
      }
      v323 = (char *)v317;
      MEMORY[0x270FA5388](v97);
      sub_256FC9A38();
      sub_25704AD10();
      a2 = (uint64_t)v324;
      uint64_t v4 = sub_25704A6D0();
      unint64_t v98 = v329;
      ((void (*)(char *, char *))v329)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
      ((void (*)(uint64_t, char *))v98)(a2, v50);
      long long v92 = (void (*)(char *, char *))v98;
LABEL_81:
      if ((v4 & 1) == 0) {
        goto LABEL_95;
      }
      goto LABEL_86;
    }
    char v48 = v330;
    if (v97 >= 64)
    {
      uint64_t v111 = v329;
      ((void (*)(char *, char *))v329)(v324, v50);
      long long v92 = (void (*)(char *, char *))v111;
      goto LABEL_95;
    }
    uint64_t v103 = v324;
    uint64_t v4 = sub_25704AD20();
    uint64_t v104 = v103;
    uint64_t v105 = v329;
    ((void (*)(char *, char *))v329)(v104, v50);
    long long v92 = (void (*)(char *, char *))v105;
    if (v4 >= (uint64_t)v341) {
      goto LABEL_95;
    }
LABEL_86:
    __break(1u);
LABEL_87:
    long long v335 = 0u;
    long long v336 = 0u;
    uint64_t v337 = 0;
  }
  long long v92 = (void (*)(char *, char *))v329;
LABEL_68:
  uint64_t v30 = (uint64_t)v86;
  char v48 = v330;
LABEL_95:
  uint64_t v112 = sub_25704AD30();
  v330 = (char *)v317;
  MEMORY[0x270FA5388](v112);
  ((void (*)(char *, uint64_t, char *))v332)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v50);
  if (v112 >= 65)
  {
    uint64_t v113 = ((uint64_t (*)(char *, char *))v92)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
    goto LABEL_99;
  }
  uint64_t v114 = sub_25704AD30();
  v92((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
  if (v114 != 64) {
    goto LABEL_106;
  }
  uint64_t v113 = sub_25704AD40();
  if (v113) {
    goto LABEL_106;
  }
LABEL_99:
  v329 = (char *)v92;
  MEMORY[0x270FA5388](v113);
  uint64_t v115 = (char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(char *, uint64_t, char *))v332)(v115, v30, v50);
  *(void *)&long long v341 = 0x7FFFFFFFFFFFFFFFLL;
  char v116 = sub_25704AD40();
  uint64_t v117 = sub_25704AD30();
  if ((v116 & 1) == 0)
  {
    if (v117 > 63)
    {
      v332 = (char *)v317;
      *(void *)&long long v338 = 0x7FFFFFFFFFFFFFFFLL;
      MEMORY[0x270FA5388](v117);
      uint64_t v25 = (uint64_t)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v32 = (char *)v317;
      uint64_t v121 = ((uint64_t (*)(uint64_t, uint64_t, char *))v331[4])(v25, v25, v50);
      MEMORY[0x270FA5388](v121);
      sub_256FC9A38();
      sub_25704AD10();
      uint64_t v4 = sub_25704A6D0();
      char v48 = v329;
      ((void (*)(uint64_t, char *))v329)(v25, v50);
      ((void (*)(uint64_t, char *))v48)(v25, v50);
      a2 = (uint64_t)v317;
      long long v92 = (void (*)(char *, char *))v48;
      if (v4) {
        goto LABEL_302;
      }
      goto LABEL_106;
    }
LABEL_104:
    sub_25704AD20();
    long long v92 = (void (*)(char *, char *))v329;
    ((void (*)(char *, char *))v329)((char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
    goto LABEL_106;
  }
  if (v117 <= 64) {
    goto LABEL_104;
  }
  uint64_t v32 = (char *)v317;
  MEMORY[0x270FA5388](v117);
  uint64_t v118 = (char *)v317 - ((unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_256FC9A38();
  sub_25704AD10();
  uint64_t v4 = sub_25704A6D0();
  char v48 = (char *)v317;
  uint64_t v119 = v118;
  uint64_t v25 = (uint64_t)v329;
  ((void (*)(char *, char *))v329)(v119, v50);
  uint64_t v120 = v115;
  long long v92 = (void (*)(char *, char *))v25;
  ((void (*)(char *, char *))v25)(v120, v50);
  a2 = (uint64_t)v317;
  if (v4)
  {
LABEL_302:
    __break(1u);
    goto LABEL_303;
  }
LABEL_106:
  int64_t v46 = sub_25704AD20();
  v92((char *)v30, v50);
  if (v46 < 0)
  {
    __break(1u);
LABEL_108:
    a2 = *(void *)(v30 + 8);
    ((void (*)(int64_t, char *))a2)(v46, v3);
    uint64_t v25 = (uint64_t)v329;
    goto LABEL_109;
  }
LABEL_128:
  uint64_t v132 = sub_256FA6EC8(0, v46);
  uint64_t v133 = sub_257022E6C((uint64_t)v132);
  swift_release();
  uint64_t v134 = sub_256FCED74(v133, 0);
  swift_bridgeObjectRelease();
  uint64_t v135 = type metadata accessor for MLXArray();
  uint64_t v136 = v333;
  v333[3] = v135;
  uint64_t *v136 = v134;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v344);
}

uint64_t sub_25701913C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v6 = sub_256FED050(97, 0xE100000000000000), (v7 & 1) != 0))
  {
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v111);
  }
  else
  {
    long long v112 = 0u;
    long long v111 = 0u;
  }
  unint64_t v8 = sub_25701A3F0((uint64_t)&v111);
  uint64_t result = sub_256FB11E8((uint64_t)&v111, &qword_269FDC6E0);
  if (!v2)
  {
    if (!*(void *)(a1 + 16))
    {
      int v12 = 0;
      goto LABEL_22;
    }
    unint64_t v10 = sub_256FED050(0x736D69647065656BLL, 0xE800000000000000);
    if ((v11 & 1) != 0
      && (sub_256FB118C(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&v111), swift_dynamicCast()))
    {
      int v12 = v108;
      if (!*(void *)(a1 + 16)) {
        goto LABEL_22;
      }
    }
    else
    {
      int v12 = 0;
      if (!*(void *)(a1 + 16)) {
        goto LABEL_22;
      }
    }
    unint64_t v13 = sub_256FED050(1936291937, 0xE400000000000000);
    if (v14)
    {
      sub_256FB118C(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v107);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC8C0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v110 = 0;
        long long v108 = 0u;
        long long v109 = 0u;
        goto LABEL_23;
      }
      if (!*((void *)&v109 + 1))
      {
LABEL_23:
        sub_256FB11E8((uint64_t)&v108, &qword_269FDC948);
        if (*(void *)(a1 + 16) && (unint64_t v31 = sub_256FED050(1936291937, 0xE400000000000000), (v32 & 1) != 0))
        {
          sub_256FB118C(*(void *)(a1 + 56) + 32 * v31, (uint64_t)v107);
          __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
          if (swift_dynamicCast())
          {
            if (*((void *)&v109 + 1))
            {
              uint64_t v114 = a2;
              sub_256FA81EC(&v108, (uint64_t)&v111);
              uint64_t v33 = *((void *)&v112 + 1);
              unint64_t v34 = v113;
              __swift_project_boxed_opaque_existential_1(&v111, *((uint64_t *)&v112 + 1));
              uint64_t v35 = (*(uint64_t (**)(uint64_t, unint64_t))(v34 + 8))(v33, v34);
              unint64_t v23 = sub_257022F2C(v35);
              swift_bridgeObjectRelease();
              if (!v23)
              {
                sub_256F92DE8();
                swift_allocError();
                *uint64_t v45 = 56;
                swift_willThrow();
                swift_release();
                return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
              }
              int v106 = v12;
              if (v23 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v36 = sub_25704B040();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v36 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              if (!v36) {
                goto LABEL_44;
              }
              unint64_t v95 = v8;
              char v96 = 0;
              *(void *)&long long v108 = MEMORY[0x263F8EE78];
              uint64_t v37 = (uint64_t)&v108;
              sub_256F908EC(0, v36 & ~(v36 >> 63), 0);
              if ((v36 & 0x8000000000000000) == 0)
              {
                uint64_t v38 = 0;
                uint64_t v39 = v108;
                do
                {
                  if ((v23 & 0xC000000000000001) != 0) {
                    id v40 = (id)MEMORY[0x25A2B0EE0](v38, v23);
                  }
                  else {
                    id v40 = *(id *)(v23 + 8 * v38 + 32);
                  }
                  unint64_t v41 = v40;
                  id v42 = objc_msgSend(v40, sel_integerValue);

                  *(void *)&long long v108 = v39;
                  unint64_t v44 = *(void *)(v39 + 16);
                  unint64_t v43 = *(void *)(v39 + 24);
                  if (v44 >= v43 >> 1)
                  {
                    sub_256F908EC(v43 > 1, v44 + 1, 1);
                    uint64_t v39 = v108;
                  }
                  ++v38;
                  *(void *)(v39 + 16) = v44 + 1;
                  *(void *)(v39 + 8 * v44 + 32) = v42;
                }
                while (v36 != v38);
LABEL_44:
                mlx_default_device();
              }
              __break(1u);
              goto LABEL_80;
            }
          }
          else
          {
            uint64_t v110 = 0;
            long long v108 = 0u;
            long long v109 = 0u;
          }
        }
        else
        {
          long long v108 = 0u;
          long long v109 = 0u;
          uint64_t v110 = 0;
        }
        sub_256FB11E8((uint64_t)&v108, &qword_269FDCAE0);
        mlx_default_device();
      }
      uint64_t v114 = a2;
      sub_256FA81EC(&v108, (uint64_t)&v111);
      unint64_t v16 = *((void *)&v112 + 1);
      unint64_t v15 = v113;
      unint64_t v17 = __swift_project_boxed_opaque_existential_1(&v111, *((uint64_t *)&v112 + 1));
      unint64_t v98 = v90;
      uint64_t v18 = *(void *)(v16 - 8);
      uint64_t v19 = *(void *)(v18 + 64);
      MEMORY[0x270FA5388](v17);
      unint64_t v104 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
      char v20 = &v90[-v104];
      char v100 = (unsigned char *)v18;
      uint64_t v21 = *(void (**)(unsigned char *))(v18 + 16);
      v21(&v90[-v104]);
      uint64_t v22 = sub_25704AD40();
      LODWORD(v101) = v22;
      uint64_t v97 = v90;
      uint64_t v105 = v19;
      unint64_t v23 = v16;
      MEMORY[0x270FA5388](v22);
      uint64_t v24 = &v90[-v104];
      char v99 = v20;
      uint64_t v103 = (unsigned char *)(v18 + 16);
      unint64_t v102 = v21;
      ((void (*)(unsigned char *, unsigned char *, unint64_t))v21)(&v90[-v104], v20, v23);
      unint64_t v104 = v15;
      int v106 = v12;
      if (v101)
      {
        uint64_t v25 = sub_25704AD30();
        unint64_t v101 = (void (*)(unsigned char *, unint64_t))*((void *)v100 + 1);
        uint64_t v26 = ((uint64_t (*)(unsigned char *, unint64_t))v101)(v24, v23);
        if (v25 > 64)
        {
          MEMORY[0x270FA5388](v26);
          unint64_t v3 = &v90[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v28 = v99;
          ((void (*)(unsigned char *, unsigned char *, unint64_t))v102)(v3, v99, v23);
          *(void *)&long long v108 = 0x8000000000000000;
          if (sub_25704AD40())
          {
            uint64_t v29 = sub_25704AD30();
            if (v29 >= 64)
            {
              char v96 = v90;
              MEMORY[0x270FA5388](v29);
              uint64_t v94 = v90;
              uint64_t v54 = &v90[-((v53 + 15) & 0xFFFFFFFFFFFFFFF0)];
              sub_256FC9A38();
              sub_25704AD10();
              char v55 = sub_25704A6D0();
              uint64_t v56 = v54;
              uint64_t v57 = v101;
              v101(v56, v23);
              v57(v3, v23);
              unint64_t v3 = v100;
              if ((v55 & 1) == 0) {
                goto LABEL_63;
              }
            }
            else
            {
              uint64_t v30 = sub_25704AD20();
              v101(v3, v23);
              unint64_t v3 = v100;
              if (v30 >= (uint64_t)v108) {
                goto LABEL_63;
              }
            }
            goto LABEL_61;
          }
          uint64_t v94 = v90;
          char v46 = sub_25704AD40();
          uint64_t v47 = sub_25704AD30();
          if (v46)
          {
            if (v47 > 64)
            {
              char v96 = v90;
              MEMORY[0x270FA5388](v47);
              uint64_t v49 = &v90[-((v48 + 15) & 0xFFFFFFFFFFFFFFF0)];
              sub_256FC9A38();
              sub_25704AD10();
              char v50 = sub_25704A6D0();
              uint64_t v51 = v49;
              uint64_t v52 = v101;
              v101(v51, v23);
              v52(v3, v23);
              unint64_t v3 = v100;
              if ((v50 & 1) == 0) {
                goto LABEL_63;
              }
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }
            unint64_t v95 = v8;
            char v96 = 0;
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
            long long v93 = v90;
            MEMORY[0x270FA5388](AssociatedTypeWitness);
            swift_getAssociatedConformanceWitness();
            uint64_t v61 = sub_25704B210();
            long long v92 = v90;
            unint64_t v62 = v23;
            uint64_t v63 = v105;
            MEMORY[0x270FA5388](v61);
            unint64_t v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF0;
            sub_25704B1C0();
            int v91 = sub_25704A6D0();
            uint64_t v65 = v3;
            unint64_t v3 = v101;
            uint64_t v66 = ((uint64_t (*)(unsigned char *, unint64_t))v101)(&v90[-v64], v62);
            unint64_t v23 = v62;
            MEMORY[0x270FA5388](v66);
            uint64_t v37 = (uint64_t)&v90[-v64];
            (*((void (**)(unsigned char *, unsigned char *, unint64_t))v100 + 4))(&v90[-v64], v65, v23);
            if (v91)
            {
LABEL_81:
              uint64_t result = ((uint64_t (*)(uint64_t, unint64_t))v3)(v37, v23);
              __break(1u);
              __break(1u);
              __break(1u);
              __break(1u);
              __break(1u);
              __break(1u);
              __break(1u);
              __break(1u);
              __break(1u);
              __break(1u);
              return result;
            }
            uint64_t v67 = v108;
            uint64_t v68 = sub_25704AD20();
            ((void (*)(uint64_t, unint64_t))v3)(v37, v23);
            BOOL v59 = v68 < v67;
          }
          else
          {
            if (v47 >= 64)
            {
LABEL_62:
              v101(v3, v23);
              unint64_t v3 = v100;
              goto LABEL_63;
            }
            uint64_t v58 = sub_25704AD20();
            v101(v3, v23);
            BOOL v59 = v58 < (uint64_t)v108;
          }
          unint64_t v3 = v100;
          if (!v59)
          {
LABEL_63:
            uint64_t v69 = sub_25704AD30();
            char v100 = v90;
            MEMORY[0x270FA5388](v69);
            uint64_t v71 = &v90[-((v70 + 15) & 0xFFFFFFFFFFFFFFF0)];
            ((void (*)(unsigned char *, unsigned char *, unint64_t))v102)(v71, v28, v23);
            if (v69 < 65)
            {
              uint64_t v81 = sub_25704AD30();
              unint64_t v82 = v71;
              uint64_t v83 = v101;
              v101(v82, v23);
              BOOL v84 = v81 == 64;
              uint64_t v80 = v83;
              if (!v84) {
                goto LABEL_76;
              }
              uint64_t v72 = sub_25704AD40();
              if (v72) {
                goto LABEL_76;
              }
            }
            else
            {
              uint64_t v72 = ((uint64_t (*)(unsigned char *, unint64_t))v101)(v71, v23);
            }
            char v96 = v90;
            MEMORY[0x270FA5388](v72);
            uint64_t v74 = &v90[-((v73 + 15) & 0xFFFFFFFFFFFFFFF0)];
            ((void (*)(unsigned char *, unsigned char *, unint64_t))v102)(v74, v28, v23);
            *(void *)&long long v108 = 0x7FFFFFFFFFFFFFFFLL;
            char v75 = sub_25704AD40();
            uint64_t v76 = sub_25704AD30();
            if (v75)
            {
              if (v76 > 64)
              {
                MEMORY[0x270FA5388](v76);
                uint64_t v78 = &v90[-((v77 + 15) & 0xFFFFFFFFFFFFFFF0)];
                sub_256FC9A38();
                sub_25704AD10();
                uint64_t v37 = sub_25704A6D0();
                uint64_t v79 = v78;
                uint64_t v80 = v101;
                v101(v79, v23);
                v80(v74, v23);
                uint64_t v28 = v99;
                if (v37) {
                  goto LABEL_80;
                }
                goto LABEL_76;
              }
            }
            else if (v76 > 63)
            {
              uint64_t v103 = v90;
              v107[0] = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v85 = v105;
              MEMORY[0x270FA5388](v76);
              unint64_t v86 = &v90[-((v85 + 15) & 0xFFFFFFFFFFFFFFF0)];
              uint64_t v87 = (*((uint64_t (**)(unsigned char *, unsigned char *, unint64_t))v3 + 4))(v86, v74, v23);
              unint64_t v102 = v90;
              MEMORY[0x270FA5388](v87);
              sub_256FC9A38();
              sub_25704AD10();
              uint64_t v37 = sub_25704A6D0();
              uint64_t v28 = v99;
              uint64_t v88 = v101;
              v101(v86, v23);
              uint64_t v89 = v86;
              uint64_t v80 = v88;
              v88(v89, v23);
              if (v37)
              {
LABEL_80:
                __break(1u);
                goto LABEL_81;
              }
LABEL_76:
              sub_25704AD20();
              v80(v28, v23);
              mlx_default_device();
            }
            sub_25704AD20();
            uint64_t v80 = v101;
            v101(v74, v23);
            goto LABEL_76;
          }
          goto LABEL_61;
        }
        unint64_t v3 = v100;
      }
      else
      {
        unint64_t v3 = v100;
        unint64_t v101 = (void (*)(unsigned char *, unint64_t))*((void *)v100 + 1);
        v101(v24, v23);
      }
      uint64_t v28 = v99;
      goto LABEL_63;
    }
LABEL_22:
    long long v108 = 0u;
    long long v109 = 0u;
    uint64_t v110 = 0;
    goto LABEL_23;
  }
  return result;
}

void *sub_25701A3F0(uint64_t a1)
{
  sub_25701A578(a1, (uint64_t)v8);
  if (v9)
  {
    sub_256F9ABF4(v8, v10);
    v8[0] = 7;
    uint64_t v1 = sub_2570049DC((uint64_t)v10, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    sub_256FB11E8((uint64_t)v8, &qword_269FDC6E0);
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_25704A550();
    __swift_project_value_buffer(v2, (uint64_t)qword_269FDD648);
    unint64_t v3 = sub_25704A530();
    os_log_type_t v4 = sub_25704AC60();
    uint64_t v1 = (void *)v4;
    if (os_log_type_enabled(v3, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl(&dword_256D65000, v3, (os_log_type_t)v1, "Failed to convert to MLXArray", v5, 2u);
      MEMORY[0x25A2B1FA0](v5, -1, -1);
    }

    sub_256F92DE8();
    swift_allocError();
    *unint64_t v6 = 37;
    swift_willThrow();
  }
  return v1;
}

ValueMetadata *type metadata accessor for Numpy()
{
  return &type metadata for Numpy;
}

uint64_t sub_25701A578(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25701A5E0()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25701A618(uint64_t a1)
{
  uint64_t v2 = MLXArray.shape.getter();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    unint64_t v6 = v4;
    do
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v6 = sub_256FA6614(0, v6[2] + 1, 1, v6);
      }
      unint64_t v8 = v6[2];
      unint64_t v7 = v6[3];
      if (v8 >= v7 >> 1) {
        unint64_t v6 = sub_256FA6614((void *)(v7 > 1), v8 + 1, 1, v6);
      }
      _OWORD v6[2] = v8 + 1;
      v6[v8 + 4] = v4;
      --v5;
    }
    while (v5);
    *(void *)(v3 + 16) = v6;
  }
  uint64_t v9 = MEMORY[0x263F8EE78];
  sub_25700CEEC(a1);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v10 = *(void *)(*(void *)(v3 + 16) + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    sub_25704AEE0();
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v11 + 1;
      uint64_t v13 = swift_bridgeObjectRetain();
      sub_256FCED74(v13, 0);
      swift_bridgeObjectRelease();
      sub_25704AEB0();
      sub_25704AEF0();
      sub_25704AF00();
      sub_25704AEC0();
      uint64_t v11 = v12;
    }
    while (v10 != v12);
    uint64_t v14 = v9;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v14;
}

uint64_t sub_25701A80C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25701A898(char *a1, char *a2)
{
  return sub_256FF21D4(*a1, *a2);
}

uint64_t sub_25701A8A4()
{
  return sub_25704B2B0();
}

uint64_t sub_25701A918()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25701A978()
{
  return sub_25704B2B0();
}

uint64_t sub_25701A9E8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_25701AA48(uint64_t *a1@<X8>)
{
  uint64_t v2 = 28783;
  if (*v1) {
    uint64_t v2 = 0x7365756C6176;
  }
  unint64_t v3 = 0xE200000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_25701AA78()
{
  if (*v0) {
    return 0x7365756C6176;
  }
  else {
    return 28783;
  }
}

uint64_t sub_25701AAA4@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_25701AB08(uint64_t a1)
{
  unint64_t v2 = sub_25701B778();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25701AB44(uint64_t a1)
{
  unint64_t v2 = sub_25701B778();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25701AB80(void *a1)
{
  return sub_25701ABCC(a1);
}

uint64_t sub_25701ABCC(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD060);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (void *)((char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25701B778();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for BoolOp();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v12[0]) = 0;
    v1[6] = sub_25704B0F0();
    v1[7] = v10;
    v1[5] = sub_25703F9A4(v8, 1);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_25701AE04@<X0>(uint64_t *a1@<X8>)
{
  void (*v20)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned char *v53;
  uint64_t v55;
  void v56[5];
  long long v57;
  uint64_t v58;
  char v59;
  void v60[3];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  uint64_t v3 = v1;
  char v4 = (void *)v1[5];
  if (v4[2] != 2)
  {
    if (qword_269FDC650 == -1)
    {
LABEL_9:
      uint64_t v26 = sub_25704A550();
      __swift_project_value_buffer(v26, (uint64_t)qword_269FDD648);
      swift_retain();
      uint64_t v27 = sub_25704A530();
      uint64_t v28 = sub_25704AC60();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 134218240;
        v60[0] = *(void *)(v3[5] + 16);
        sub_25704AC90();
        *(_WORD *)(v29 + 12) = 2048;
        v60[0] = v3[2];
        sub_25704AC90();
        swift_release();
        _os_log_impl(&dword_256D65000, v27, v28, "BoolOp> Only 2 values are supported, but got %ld. line %ld", (uint8_t *)v29, 0x16u);
        MEMORY[0x25A2B1FA0](v29, -1, -1);
      }
      else
      {

        swift_release();
      }
      sub_256F92DE8();
      swift_allocError();
      unint64_t v31 = 31;
      goto LABEL_13;
    }
LABEL_41:
    swift_once();
    goto LABEL_9;
  }
  char v55 = v2;
  uint64_t v5 = v4[5];
  swift_bridgeObjectRetain();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v8 = v1[4];
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  uint64_t v10 = v8;
  uint64_t v11 = v1;
  v9(v7, v10, ObjectType, v5);
  swift_unknownObjectRelease();
  uint64_t v12 = v4[7];
  uint64_t v13 = swift_getObjectType();
  uint64_t v14 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v15 = v1[4];
  uint64_t v3 = (void *)(v12 + 48);
  unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
  swift_unknownObjectRetain();
  v16(v14, v15, v13, v12);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v17 = v1[5];
  if (!*(void *)(v17 + 16))
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v18 = *(void *)(v17 + 40);
  uint64_t v19 = swift_getObjectType();
  char v20 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v18 + 64);
  swift_unknownObjectRetain();
  v20(v56, v19, v18);
  uint64_t result = swift_unknownObjectRelease();
  if (v55) {
    return result;
  }
  sub_2570430C8((uint64_t)&v57);
  sub_256FEA220((uint64_t)v56);
  if (!v58)
  {
    sub_256FB11E8((uint64_t)&v57, &qword_269FDCAA0);
    goto LABEL_18;
  }
  sub_256FA81EC(&v57, (uint64_t)v60);
  uint64_t v22 = v1[5];
  if (*(void *)(v22 + 16) < 2uLL)
  {
    __break(1u);
    goto LABEL_43;
  }
  unint64_t v23 = *(void *)(v22 + 56);
  uint64_t v24 = swift_getObjectType();
  uint64_t v25 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v23 + 64);
  swift_unknownObjectRetain();
  v25(&v57, v24, v23);
  swift_unknownObjectRelease();
  if (!v59)
  {
    sub_256FEEC3C((uint64_t)&v57, (uint64_t)v56);
    uint64_t v36 = v1[6];
    uint64_t v37 = v11[7];
    if (v36 == 29295 && v37 == 0xE200000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      uint64_t v38 = v61;
      uint64_t v39 = v62;
      __swift_project_boxed_opaque_existential_1(v60, v61);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39))
      {
LABEL_27:
        id v40 = v61;
        unint64_t v41 = __swift_project_boxed_opaque_existential_1(v60, v61);
        id v42 = a1;
        a1[3] = v40;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a1);
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(boxed_opaque_existential_0, v41, v40);
        sub_256FB11E8((uint64_t)v56, &qword_269FDC6E0);
LABEL_33:
        *((unsigned char *)v42 + 32) = 0;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
      }
    }
    else
    {
      if ((v36 != 6581857 || v37 != 0xE300000000000000) && (sub_25704B1E0() & 1) == 0)
      {
        if (qword_269FDC650 != -1) {
          swift_once();
        }
        char v46 = sub_25704A550();
        __swift_project_value_buffer(v46, (uint64_t)qword_269FDD648);
        swift_retain();
        uint64_t v47 = sub_25704A530();
        uint64_t v48 = sub_25704AC60();
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = swift_slowAlloc();
          char v50 = swift_slowAlloc();
          *(void *)&uint64_t v57 = v50;
          *(_DWORD *)uint64_t v49 = 136315394;
          uint64_t v51 = v11[6];
          uint64_t v52 = v11[7];
          swift_bridgeObjectRetain();
          uint64_t v63 = sub_256FFE924(v51, v52, (uint64_t *)&v57);
          sub_25704AC90();
          swift_bridgeObjectRelease();
          *(_WORD *)(v49 + 12) = 2048;
          uint64_t v63 = v11[2];
          sub_25704AC90();
          swift_release();
          _os_log_impl(&dword_256D65000, v47, v48, "BoolOp> Op %s is not supported yet. line %ld", (uint8_t *)v49, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25A2B1FA0](v50, -1, -1);
          MEMORY[0x25A2B1FA0](v49, -1, -1);
        }
        else
        {

          swift_release();
        }
        sub_256F92DE8();
        swift_allocError();
        *uint64_t v53 = 32;
        swift_willThrow();
        sub_256FB11E8((uint64_t)v56, &qword_269FDC6E0);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
      }
      unint64_t v44 = v61;
      uint64_t v45 = v62;
      __swift_project_boxed_opaque_existential_1(v60, v61);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45) & 1) == 0) {
        goto LABEL_27;
      }
    }
    id v42 = a1;
    sub_256FEEC3C((uint64_t)v56, (uint64_t)a1);
    goto LABEL_33;
  }
  sub_256FEA220((uint64_t)&v57);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
LABEL_18:
  if (qword_269FDC650 != -1) {
LABEL_43:
  }
    swift_once();
  char v32 = sub_25704A550();
  __swift_project_value_buffer(v32, (uint64_t)qword_269FDD648);
  swift_retain();
  uint64_t v33 = sub_25704A530();
  unint64_t v34 = sub_25704AC60();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 134217984;
    v60[0] = v11[2];
    sub_25704AC90();
    swift_release();
    _os_log_impl(&dword_256D65000, v33, v34, "BoolOp> Left or/add right operand are not returning Truthiness. line %ld", v35, 0xCu);
    MEMORY[0x25A2B1FA0](v35, -1, -1);
  }
  else
  {

    swift_release();
  }
  sub_256F92DE8();
  swift_allocError();
  unint64_t v31 = 29;
LABEL_13:
  *uint64_t v30 = v31;
  return swift_willThrow();
}

uint64_t sub_25701B5F0()
{
  if (*(void *)(*(void *)(v0 + 40) + 16))
  {
    swift_getObjectType();
    sub_25704B1B0();
    sub_25704A850();
    swift_bridgeObjectRetain();
    sub_25704A850();
    swift_bridgeObjectRelease();
    uint64_t result = sub_25704A850();
    if (*(void *)(*(void *)(v0 + 40) + 16) >= 2uLL)
    {
      swift_getObjectType();
      sub_25704B1B0();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_25701B6DC()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25701B70C()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 64, 7);
}

uint64_t type metadata accessor for BoolOp()
{
  return self;
}

unint64_t sub_25701B778()
{
  unint64_t result = qword_269FDD068;
  if (!qword_269FDD068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD068);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BoolOp.StrideCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25701B898);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BoolOp.StrideCodingKeys()
{
  return &type metadata for BoolOp.StrideCodingKeys;
}

unint64_t sub_25701B8D4()
{
  unint64_t result = qword_269FDD070;
  if (!qword_269FDD070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD070);
  }
  return result;
}

unint64_t sub_25701B92C()
{
  unint64_t result = qword_269FDD078;
  if (!qword_269FDD078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD078);
  }
  return result;
}

unint64_t sub_25701B984()
{
  unint64_t result = qword_269FDD080;
  if (!qword_269FDD080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD080);
  }
  return result;
}

uint64_t sub_25701B9D8()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25701BB30(char a1)
{
  uint64_t result = 0x6E6F6974636E7566;
  switch(a1)
  {
    case 1:
      uint64_t result = 1936159329;
      break;
    case 2:
      uint64_t result = 0x61796C6E6F736F70;
      break;
    case 3:
      uint64_t result = 0x7261796C6E6F776BLL;
      break;
    case 4:
      uint64_t result = 0x6C7561666544776BLL;
      break;
    case 5:
      uint64_t result = 0x73746C7561666564;
      break;
    case 6:
      uint64_t result = 2036625250;
      break;
    case 7:
      uint64_t result = 0x677261726176;
      break;
    case 8:
      uint64_t result = 0x677261776BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25701BC54(char a1)
{
  uint64_t result = 0x6E6F6974636E7566;
  switch(a1)
  {
    case 1:
      uint64_t result = 1936159329;
      break;
    case 2:
      uint64_t result = 0x61796C6E6F736F70;
      break;
    case 3:
      uint64_t result = 0x7261796C6E6F776BLL;
      break;
    case 4:
      uint64_t result = 0x6C7561666544776BLL;
      break;
    case 5:
      uint64_t result = 0x73746C7561666564;
      break;
    case 6:
      uint64_t result = 2036625250;
      break;
    case 7:
      uint64_t result = 0x677261726176;
      break;
    case 8:
      uint64_t result = 0x677261776BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25701BD78(unsigned __int8 *a1, char *a2)
{
  return sub_256FF29AC(*a1, *a2);
}

uint64_t sub_25701BD84()
{
  return sub_25704B2B0();
}

uint64_t sub_25701BDCC()
{
  return sub_25701B9D8();
}

uint64_t sub_25701BDD4()
{
  return sub_25704B2B0();
}

uint64_t sub_25701BE18@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25701CF88();
  *a1 = result;
  return result;
}

uint64_t sub_25701BE48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25701BB30(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_25701BE74()
{
  return sub_25701BC54(*v0);
}

uint64_t sub_25701BE7C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25701CF88();
  *a1 = result;
  return result;
}

void sub_25701BEA4(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_25701BEB0(uint64_t a1)
{
  unint64_t v2 = sub_25701CC2C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25701BEEC(uint64_t a1)
{
  unint64_t v2 = sub_25701CC2C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25701BF28(void *a1)
{
  return sub_25701BF74(a1);
}

uint64_t sub_25701BF74(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD088);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25701CC2C();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for FunctionDef();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v14[0]) = 0;
    *(void *)(v1 + 40) = sub_25704B0F0();
    *(void *)(v1 + 48) = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC970);
    char v15 = 1;
    sub_25701CC80();
    sub_25704B130();
    *(void *)(v1 + 56) = v14[0];
    char v15 = 2;
    uint64_t v13 = 0;
    sub_25704B130();
    *(void *)(v1 + 64) = v14[0];
    char v15 = 3;
    sub_25704B130();
    *(void *)(v1 + 72) = v14[0];
    LOBYTE(v14[0]) = 7;
    *(void *)(v1 + 80) = sub_25704B0F0();
    *(void *)(v1 + 88) = v11;
    swift_bridgeObjectRelease();
    LOBYTE(v14[0]) = 8;
    *(void *)(v1 + 96) = sub_25704B0F0();
    *(void *)(v1 + 104) = v12;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 112) = sub_25703FA58(v8, 4);
    *(void *)(v1 + 120) = sub_25703FA58(v8, 5);
    char v15 = 6;
    type metadata accessor for LexicalBlock();
    sub_257008044();
    sub_25704B130();
    MEMORY[0x80] = v14[0];
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v14);
    uint64_t v3 = sub_257046164(v14);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_25701C4F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = v1[16];
  MEMORY[0x25A2B2020](v1 + 3);
  *(void *)(v4 + 32) = v1[4];
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  uint64_t result = MEMORY[0x25A2B2020](v1 + 3);
  if (result)
  {
    uint64_t v6 = v1[4];
    uint64_t v7 = v1[5];
    uint64_t v8 = v1[6];
    swift_bridgeObjectRetain_n();
    sub_25701C73C((uint64_t)v19);
    if (v2)
    {
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
    uint64_t ObjectType = swift_getObjectType();
    long long v14 = v19[3];
    long long v15 = v19[2];
    uint64_t v13 = v20;
    swift_retain();
    uint64_t v18 = v6;
    uint64_t v9 = MEMORY[0x263F8EE78];
    unint64_t v16 = sub_256FEB040(MEMORY[0x263F8EE78]);
    uint64_t v17 = type metadata accessor for Function();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 32) = v9;
    *(void *)(v10 + 40) = v9;
    *(void *)(v10 + 48) = v9;
    *(void *)(v10 + 56) = v9;
    *(void *)(v10 + 64) = v9;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(void *)(v10 + 104) = sub_256FEB040(v9);
    *(void *)(v10 + 16) = v7;
    *(void *)(v10 + 24) = v8;
    long long v11 = v19[1];
    *(_OWORD *)(v10 + 32) = v19[0];
    *(_OWORD *)(v10 + 48) = v11;
    *(_OWORD *)(v10 + 64) = v15;
    *(_OWORD *)(v10 + 80) = v14;
    *(void *)(v10 + 96) = v13;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(void *)(v10 + 104) = v16;
    swift_bridgeObjectRelease();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = sub_25701CBD8;
    *(void *)(v12 + 24) = v1;
    *(void *)(v10 + 112) = sub_256FF8190;
    *(void *)(v10 + 120) = v12;
    _OWORD v21[3] = v17;
    v21[0] = v10;
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(v18 + 64))(v7, v8, v21, ObjectType);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_25701C73C@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_257025014(v4, v1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (!v2)
  {
    swift_retain();
    uint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = sub_257025014(v7, v1);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v9 = *(void *)(v1 + 56);
    uint64_t v10 = *(void *)(v1 + 64);
    uint64_t v11 = *(void *)(v1 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_257022D3C(v5);
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_257022D3C(v8);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void *)(v1 + 80);
    uint64_t v15 = *(void *)(v1 + 104);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v14;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v1 + 88);
    *(void *)(a1 + 64) = v15;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25701C878@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = *(void *)(v2 + 128);
  MEMORY[0x25A2B2020](v2 + 24);
  *(void *)(v6 + 32) = *(void *)(v2 + 32);
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_retain();
  sub_2570442EC(a1);
  if (v3) {
    return swift_release();
  }
  sub_257043F7C((uint64_t)v8);
  swift_release();
  sub_257046318(v9);
  sub_256FEA220((uint64_t)v8);
  sub_25702B5F8((uint64_t)v9, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

_OWORD *sub_25701C958@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = (_OWORD *)sub_25701C878(a1, (uint64_t *)v5);
  if (!v2) {
    return sub_256F9ABF4(v5, a2);
  }
  return result;
}

uint64_t sub_25701C9A4()
{
  swift_bridgeObjectRetain();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  swift_retain();
  unint64_t v0 = sub_25704413C();
  unint64_t v2 = v1;
  swift_release();
  sub_257027BBC(v0, v2);
  swift_bridgeObjectRelease();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  sub_25704A850();
  swift_bridgeObjectRelease();
  return 543581540;
}

uint64_t sub_25701CAB0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_25701CB18()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_25701CB80()
{
  sub_25701CB18();
  return MEMORY[0x270FA0228](v0, 136, 7);
}

uint64_t type metadata accessor for FunctionDef()
{
  return self;
}

_OWORD *sub_25701CBD8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_25701C958(a1, a2);
}

uint64_t sub_25701CBF4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

unint64_t sub_25701CC2C()
{
  unint64_t result = qword_269FDD090;
  if (!qword_269FDD090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD090);
  }
  return result;
}

unint64_t sub_25701CC80()
{
  unint64_t result = qword_269FDD098;
  if (!qword_269FDD098)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269FDC970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD098);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FunctionDef.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FunctionDef.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25701CE48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FunctionDef.CodingKeys()
{
  return &type metadata for FunctionDef.CodingKeys;
}

unint64_t sub_25701CE84()
{
  unint64_t result = qword_269FDD0A0;
  if (!qword_269FDD0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD0A0);
  }
  return result;
}

unint64_t sub_25701CEDC()
{
  unint64_t result = qword_269FDD0A8;
  if (!qword_269FDD0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD0A8);
  }
  return result;
}

unint64_t sub_25701CF34()
{
  unint64_t result = qword_269FDD0B0;
  if (!qword_269FDD0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD0B0);
  }
  return result;
}

uint64_t sub_25701CF88()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 9) {
    return 9;
  }
  else {
    return v0;
  }
}

uint64_t sub_25701CFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3);
  unsigned int v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);
  return v6(boxed_opaque_existential_0, v3, a1);
}

uint64_t sub_25701D03C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for _ConcreteComparableBox();
  uint64_t v9 = sub_25704AC70();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20[-1] - v11;
  v20[3] = a1;
  v20[4] = (uint64_t)&off_27063BC38;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_0, v4, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD0D8);
  int v14 = swift_dynamicCast();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  if (v14)
  {
    uint64_t v16 = *(void *)(v8 - 8);
    v15(v12, 0, 1, v8);
    uint64_t v17 = *(void *)(a2 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a3, v12, a2);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a3, 0, 1, a2);
  }
  else
  {
    v15(v12, 1, 1, v8);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
}

uint64_t sub_25701D2BC(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = sub_25704AC70();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 32))(v4, *(void *)(a2 + 24), v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    char v15 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v4);
    char v15 = sub_25704A740();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v4);
  }
  return v15 & 1;
}

uint64_t sub_25701D4D8(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = sub_25704AC70();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 32))(v4, *(void *)(a2 + 24), v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    char v15 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v4);
    char v15 = sub_25704A6D0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v4);
  }
  return v15 & 1;
}

uint64_t sub_25701D700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_25701D03C(a2, a1, a3);
}

uint64_t sub_25701D714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = type metadata accessor for _ConcreteComparableBox();
  a3[4] = (uint64_t)&off_27063BC38;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);
  return v7(boxed_opaque_existential_0, a1, a2);
}

uint64_t sub_25701D79C(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a2, v3, v4) & 1;
}

uint64_t sub_25701D7F8(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a2, v3, v4) & 1;
}

BOOL sub_25701D854(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v3);
  return ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4) & 1) == 0;
}

BOOL sub_25701D8B8(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a2, v3, v4) & 1) == 0;
}

uint64_t sub_25701D918(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4) & 1;
}

uint64_t sub_25701D978()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 8))(v4, v1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD0D8);
  return sub_25704A7D0();
}

uint64_t static NSString.< infix(_:_:)()
{
  uint64_t v0 = sub_25704A790();
  uint64_t v2 = v1;
  if (v0 == sub_25704A790() && v2 == v3) {
    char v4 = 0;
  }
  else {
    char v4 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_25701DA7C()
{
  uint64_t v0 = sub_25704A790();
  uint64_t v2 = v1;
  if (v0 == sub_25704A790() && v2 == v3) {
    char v5 = 0;
  }
  else {
    char v5 = sub_25704B1E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL static NSNumber.< infix(_:_:)(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, sel_compare_, a2) == (id)-1;
}

BOOL sub_25701DB44(id *a1, void *a2)
{
  return objc_msgSend(*a1, sel_compare_, *a2) == (id)-1;
}

uint64_t sub_25701DB78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF2DE0(*a1, *a2);
}

uint64_t sub_25701DB84()
{
  return sub_25704B2B0();
}

uint64_t sub_25701DC20()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25701DCA8()
{
  return sub_25704B2B0();
}

uint64_t sub_25701DD40@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_257021740();
  *a1 = result;
  return result;
}

void sub_25701DD70(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE300000000000000;
  uint64_t v5 = 7565423;
  if (v2 != 1)
  {
    uint64_t v5 = 0x74617261706D6F63;
    unint64_t v4 = 0xEB0000000073726FLL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1952867692;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_25701DDC8()
{
  uint64_t v1 = 7565423;
  if (*v0 != 1) {
    uint64_t v1 = 0x74617261706D6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1952867692;
  }
}

uint64_t sub_25701DE1C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_257021740();
  *a1 = result;
  return result;
}

uint64_t sub_25701DE44(uint64_t a1)
{
  unint64_t v2 = sub_257020E50();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25701DE80(uint64_t a1)
{
  unint64_t v2 = sub_257020E50();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25701DEBC(void *a1)
{
  return sub_25701DF08(a1);
}

uint64_t sub_25701DF08(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD0E0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257020E50();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Comparison();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_257034A90((uint64_t)v8, 0);
    v1[6] = v10;
    v1[7] = sub_25703FB0C(v8, 1);
    v1[8] = sub_25703FB0C(v8, 2);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_25701E164(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_256FB118C(a1, (uint64_t)&v71);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC728);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(&v74, (uint64_t)v77);
    sub_256FB118C(a3, (uint64_t)v68);
    if (swift_dynamicCast())
    {
      sub_256FA81EC(&v71, (uint64_t)&v74);
      uint64_t v8 = v78;
      uint64_t v9 = v79;
      __swift_project_boxed_opaque_existential_1(v77, v78);
      LOBYTE(v71) = 7;
      (*(void (**)(long long *, uint64_t, uint64_t))(v9 + 8))(&v71, v8, v9);
      uint64_t v10 = *((void *)&v75 + 1);
      uint64_t v11 = v76;
      __swift_project_boxed_opaque_existential_1(&v74, *((uint64_t *)&v75 + 1));
      LOBYTE(v71) = 7;
      uint64_t v12 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v11 + 8))(&v71, v10, v11);
      switch(a2)
      {
        case 0u:
          mlx_default_device();
        case 1u:
          mlx_default_device();
        case 2u:
          mlx_default_device();
        case 3u:
          mlx_default_device();
        case 4u:
          mlx_default_device();
        case 5u:
          mlx_default_device();
        default:
          if (qword_269FDC650 != -1) {
            swift_once();
          }
          uint64_t v33 = sub_25704A550();
          __swift_project_value_buffer(v33, (uint64_t)qword_269FDD648);
          swift_retain_n();
          a3 = sub_25704A530();
          int v34 = sub_25704AC60();
          if (os_log_type_enabled((os_log_t)a3, (os_log_type_t)v34))
          {
            int v65 = v34;
            uint64_t v35 = swift_slowAlloc();
            uint64_t v64 = swift_slowAlloc();
            *(void *)&long long v71 = v64;
            *(_DWORD *)uint64_t v35 = 136315394;
            int v36 = a2;
            unint64_t v37 = 0xE100000000000000;
            uint64_t v38 = 60;
            uint64_t v80 = v12;
            switch(v36)
            {
              case 5:
                unint64_t v37 = 0xE200000000000000;
                uint64_t v38 = 15676;
                break;
              case 6:
                unint64_t v37 = 0xE600000000000000;
                uint64_t v38 = 0x6E6920746F6ELL;
                break;
              case 7:
                unint64_t v37 = 0xE200000000000000;
                uint64_t v38 = 28265;
                break;
              case 8:
                unint64_t v37 = 0xE200000000000000;
                uint64_t v38 = 29545;
                break;
              default:
                break;
            }
            v68[0] = sub_256FFE924(v38, v37, (uint64_t *)&v71);
            sub_25704AC90();
            swift_bridgeObjectRelease();
            *(_WORD *)(v35 + 12) = 2048;
            uint64_t v58 = *(void *)(v4 + 16);
            swift_release();
            v68[0] = v58;
            sub_25704AC90();
            swift_release();
            _os_log_impl(&dword_256D65000, (os_log_t)a3, (os_log_type_t)v65, "Comparison> Not supported comparison operator %s. line %ld", (uint8_t *)v35, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x25A2B1FA0](v64, -1, -1);
            MEMORY[0x25A2B1FA0](v35, -1, -1);
          }
          else
          {

            swift_release_n();
          }
          sub_256F92DE8();
          swift_allocError();
          *BOOL v59 = 16;
          swift_willThrow();
          swift_release();
          swift_release();
          break;
      }
LABEL_43:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
      return a3 & 1;
    }
    uint64_t v73 = 0;
    long long v71 = 0u;
    long long v72 = 0u;
    sub_256FB11E8((uint64_t)&v71, &qword_269FDCE80);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
  }
  else
  {
    uint64_t v76 = 0;
    long long v74 = 0u;
    long long v75 = 0u;
    sub_256FB11E8((uint64_t)&v74, &qword_269FDCE80);
  }
  sub_256FB118C(a1, (uint64_t)&v71);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD0F0);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(&v74, (uint64_t)v77);
    sub_256FB118C(a3, (uint64_t)v68);
    if (swift_dynamicCast())
    {
      sub_256FA81EC(&v71, (uint64_t)&v74);
      uint64_t v13 = v78;
      uint64_t v14 = __swift_project_boxed_opaque_existential_1(v77, v78);
      MEMORY[0x270FA5388](v14);
      uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v17 + 16))(v16);
      sub_25701D714((uint64_t)v16, v13, (uint64_t *)&v71);
      uint64_t v18 = *((void *)&v75 + 1);
      uint64_t v19 = __swift_project_boxed_opaque_existential_1(&v74, *((uint64_t *)&v75 + 1));
      MEMORY[0x270FA5388](v19);
      uint64_t v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v22 + 16))(v21);
      sub_25701D714((uint64_t)v21, v18, v68);
      switch(a2)
      {
        case 0u:
          uint64_t v23 = *((void *)&v72 + 1);
          uint64_t v24 = v73;
          __swift_project_boxed_opaque_existential_1(&v71, *((uint64_t *)&v72 + 1));
          char v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v24 + 16))(v68, v23, v24);
          goto LABEL_39;
        case 1u:
          uint64_t v39 = *((void *)&v72 + 1);
          uint64_t v40 = v73;
          __swift_project_boxed_opaque_existential_1(&v71, *((uint64_t *)&v72 + 1));
          char v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v40 + 16))(v68, v39, v40);
          sub_257020EA4((uint64_t)v68);
          sub_257020EA4((uint64_t)&v71);
          LOBYTE(a3) = v41 ^ 1;
          goto LABEL_43;
        case 2u:
          uint64_t v42 = v69;
          uint64_t v43 = v70;
          __swift_project_boxed_opaque_existential_1(v68, v69);
          char v25 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v43 + 24))(&v71, v42, v43);
          goto LABEL_39;
        case 3u:
          uint64_t v44 = *((void *)&v72 + 1);
          uint64_t v45 = v73;
          __swift_project_boxed_opaque_existential_1(&v71, *((uint64_t *)&v72 + 1));
          char v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v45 + 24))(v68, v44, v45);
          goto LABEL_41;
        case 4u:
          uint64_t v47 = *((void *)&v72 + 1);
          uint64_t v48 = v73;
          __swift_project_boxed_opaque_existential_1(&v71, *((uint64_t *)&v72 + 1));
          char v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v48 + 24))(v68, v47, v48);
LABEL_39:
          LOBYTE(a3) = v25;
          goto LABEL_42;
        case 5u:
          uint64_t v49 = v69;
          uint64_t v50 = v70;
          __swift_project_boxed_opaque_existential_1(v68, v69);
          char v46 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v50 + 24))(&v71, v49, v50);
LABEL_41:
          LOBYTE(a3) = v46 ^ 1;
LABEL_42:
          sub_257020EA4((uint64_t)v68);
          sub_257020EA4((uint64_t)&v71);
          break;
        default:
          if (qword_269FDC650 != -1) {
            swift_once();
          }
          uint64_t v52 = sub_25704A550();
          __swift_project_value_buffer(v52, (uint64_t)qword_269FDD648);
          swift_retain_n();
          a3 = sub_25704A530();
          os_log_type_t v53 = sub_25704AC60();
          if (os_log_type_enabled((os_log_t)a3, v53))
          {
            uint64_t v54 = swift_slowAlloc();
            uint64_t v80 = swift_slowAlloc();
            uint64_t v67 = v80;
            *(_DWORD *)uint64_t v54 = 136315394;
            int v55 = a2;
            unint64_t v56 = 0xE100000000000000;
            uint64_t v57 = 60;
            switch(v55)
            {
              case 5:
                unint64_t v56 = 0xE200000000000000;
                uint64_t v57 = 15676;
                break;
              case 6:
                unint64_t v56 = 0xE600000000000000;
                uint64_t v57 = 0x6E6920746F6ELL;
                break;
              case 7:
                unint64_t v56 = 0xE200000000000000;
                uint64_t v57 = 28265;
                break;
              case 8:
                unint64_t v56 = 0xE200000000000000;
                uint64_t v57 = 29545;
                break;
              default:
                break;
            }
            uint64_t v66 = sub_256FFE924(v57, v56, &v67);
            sub_25704AC90();
            swift_bridgeObjectRelease();
            *(_WORD *)(v54 + 12) = 2048;
            uint64_t v60 = *(void *)(v4 + 16);
            swift_release();
            uint64_t v66 = v60;
            sub_25704AC90();
            swift_release();
            _os_log_impl(&dword_256D65000, (os_log_t)a3, v53, "Comparison> Not supported comparison operator %s. line %ld", (uint8_t *)v54, 0x16u);
            uint64_t v61 = v80;
            swift_arrayDestroy();
            MEMORY[0x25A2B1FA0](v61, -1, -1);
            MEMORY[0x25A2B1FA0](v54, -1, -1);
          }
          else
          {

            swift_release_n();
          }
          sub_256F92DE8();
          swift_allocError();
          *unint64_t v62 = 16;
          swift_willThrow();
          sub_257020EA4((uint64_t)v68);
          sub_257020EA4((uint64_t)&v71);
          break;
      }
      goto LABEL_43;
    }
    uint64_t v73 = 0;
    long long v71 = 0u;
    long long v72 = 0u;
    sub_256FB11E8((uint64_t)&v71, &qword_269FDD0F8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
  }
  else
  {
    uint64_t v76 = 0;
    long long v74 = 0u;
    long long v75 = 0u;
    sub_256FB11E8((uint64_t)&v74, &qword_269FDD0F8);
  }
  switch(a2)
  {
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      char v26 = sub_25704B1E0();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        goto LABEL_19;
      }
      break;
    default:
      swift_bridgeObjectRelease();
      break;
  }
  char v27 = _s8Morpheus0A5UtilsO5isNilySbypFZ_0(a1);
  char v28 = _s8Morpheus0A5UtilsO5isNilySbypFZ_0(a3);
  LOBYTE(a3) = v28;
  if ((v27 & 1) == 0)
  {
    if (v28)
    {
      LOBYTE(a3) = _s8Morpheus0A5UtilsO5isNilySbypFZ_0(a1);
    }
    else
    {
LABEL_19:
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      uint64_t v29 = sub_25704A550();
      __swift_project_value_buffer(v29, (uint64_t)qword_269FDD648);
      swift_retain();
      a3 = sub_25704A530();
      os_log_type_t v30 = sub_25704AC60();
      if (os_log_type_enabled((os_log_t)a3, v30))
      {
        unint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v31 = 134217984;
        v77[0] = *(void *)(v4 + 16);
        sub_25704AC90();
        swift_release();
        _os_log_impl(&dword_256D65000, (os_log_t)a3, v30, "Comparison> Not supported comparison. line %ld", v31, 0xCu);
        MEMORY[0x25A2B1FA0](v31, -1, -1);
      }
      else
      {

        swift_release();
      }
      sub_256F92DE8();
      swift_allocError();
      *char v32 = 17;
      swift_willThrow();
    }
  }
  return a3 & 1;
}

uint64_t sub_25701F540(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_256FB118C(a3, (uint64_t)v26);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD100);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(v24, (uint64_t)v27);
    if (a2 == 6)
    {
      uint64_t v4 = v28;
      uint64_t v13 = v29;
      __swift_project_boxed_opaque_existential_1(v27, v28);
      LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, v4, v13) ^ 1;
      goto LABEL_12;
    }
    if (a2 == 7)
    {
      uint64_t v4 = v28;
      uint64_t v7 = v29;
      __swift_project_boxed_opaque_existential_1(v27, v28);
      LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, v4, v7);
LABEL_12:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      return v4 & 1;
    }
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_25704A550();
    __swift_project_value_buffer(v14, (uint64_t)qword_269FDD648);
    swift_retain_n();
    uint64_t v15 = sub_25704A530();
    os_log_type_t v16 = sub_25704AC60();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(void *)&v24[0] = v18;
      *(_DWORD *)uint64_t v17 = 136315394;
      unint64_t v19 = 0xE200000000000000;
      uint64_t v20 = 15677;
      switch("ir")
      {
        case 1u:
          uint64_t v20 = 15649;
          break;
        case 2u:
          unint64_t v19 = 0xE100000000000000;
          uint64_t v20 = 62;
          break;
        case 3u:
          uint64_t v20 = 15678;
          break;
        case 4u:
          unint64_t v19 = 0xE100000000000000;
          uint64_t v20 = 60;
          break;
        case 5u:
          uint64_t v20 = 15676;
          break;
        case 6u:
        case 7u:
          __break(1u);
          JUMPOUT(0x25701F9ECLL);
        case 8u:
          uint64_t v20 = 29545;
          break;
        default:
          break;
      }
      v26[0] = sub_256FFE924(v20, v19, (uint64_t *)v24);
      sub_25704AC90();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2048;
      uint64_t v21 = *(void *)(v4 + 16);
      swift_release();
      v26[0] = v21;
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v15, v16, "Comparison> Op %s is neither in nor notin. line %ld", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v18, -1, -1);
      MEMORY[0x25A2B1FA0](v17, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    sub_256F92DE8();
    swift_allocError();
    unsigned char *v22 = 16;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    uint64_t v25 = 0;
    memset(v24, 0, sizeof(v24));
    sub_256FB11E8((uint64_t)v24, qword_269FDD108);
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_25704A550();
    __swift_project_value_buffer(v8, (uint64_t)qword_269FDD648);
    swift_retain();
    uint64_t v9 = sub_25704A530();
    os_log_type_t v10 = sub_25704AC60();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134217984;
      v27[0] = *(void *)(v4 + 16);
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v9, v10, "Comparison> Right operand is not MembershipTestable. line %ld", v11, 0xCu);
      MEMORY[0x25A2B1FA0](v11, -1, -1);
    }
    else
    {

      swift_release();
    }
    sub_256F92DE8();
    swift_allocError();
    unsigned char *v12 = 18;
    swift_willThrow();
  }
  return v4 & 1;
}

uint64_t sub_25701FA10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (_s8Morpheus0A5UtilsO5isNilySbypFZ_0(a2)) {
    return _s8Morpheus0A5UtilsO5isNilySbypFZ_0(a1) & 1;
  }
  sub_256FB118C(a1, (uint64_t)&v26);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD0F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    sub_256FB11E8((uint64_t)&v29, &qword_269FDD0F8);
LABEL_8:
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_25704A550();
    __swift_project_value_buffer(v20, (uint64_t)qword_269FDD648);
    swift_retain();
    uint64_t v21 = sub_25704A530();
    os_log_type_t v19 = sub_25704AC60();
    if (os_log_type_enabled(v21, v19))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 134217984;
      v32[0] = *(void *)(v3 + 16);
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v21, v19, "Comparison> Left or/add right operand are not Comparable. line %ld", v22, 0xCu);
      MEMORY[0x25A2B1FA0](v22, -1, -1);
    }
    else
    {

      swift_release();
    }
    sub_256F92DE8();
    swift_allocError();
    *uint64_t v23 = 17;
    swift_willThrow();
    return v19 & 1;
  }
  sub_256FA81EC(&v29, (uint64_t)v32);
  sub_256FB118C(a2, (uint64_t)v25);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    sub_256FB11E8((uint64_t)&v26, &qword_269FDD0F8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    goto LABEL_8;
  }
  sub_256FA81EC(&v26, (uint64_t)&v29);
  uint64_t v7 = v33;
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(v32, v33);
  MEMORY[0x270FA5388](v8);
  os_log_type_t v10 = (char *)&v25[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  sub_25701D714((uint64_t)v10, v7, (uint64_t *)&v26);
  uint64_t v12 = *((void *)&v30 + 1);
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(&v29, *((uint64_t *)&v30 + 1));
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v25[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  sub_25701D714((uint64_t)v15, v12, v25);
  uint64_t v17 = *((void *)&v27 + 1);
  uint64_t v18 = v28;
  __swift_project_boxed_opaque_existential_1(&v26, *((uint64_t *)&v27 + 1));
  os_log_type_t v19 = (*(unsigned __int8 (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v25, v17, v18);
  sub_257020EA4((uint64_t)v25);
  sub_257020EA4((uint64_t)&v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  return v19 & 1;
}

uint64_t sub_25701FE34@<X0>(uint64_t a1@<X8>)
{
  void (*v28)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  unsigned char *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  char v63;
  char v64;
  uint64_t v65;
  void *v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  unsigned char *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[2];
  _OWORD v76[2];
  _OWORD v77[2];
  char v78;
  _OWORD v79[2];
  long long v80;
  uint64_t v81;
  uint64_t v82[5];
  void *v83;

  uint64_t v2 = v1[6];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = v1 + 3;
  uint64_t v5 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v6 = v1[4];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  uint64_t v8 = v2;
  uint64_t v9 = v1;
  v7(v5, v6, ObjectType, v8);
  swift_unknownObjectRelease();
  uint64_t v10 = *(void *)(v1[7] + 16);
  uint64_t v83 = v1;
  if (v10)
  {
    uint64_t v11 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v12 = *v11;
      uint64_t v13 = swift_getObjectType();
      uint64_t v14 = MEMORY[0x25A2B2020](v4);
      uint64_t v15 = v9[4];
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
      swift_unknownObjectRetain();
      v16(v14, v15, v13, v12);
      uint64_t v9 = v83;
      swift_unknownObjectRelease();
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = *(void *)(v9[8] + 16);
  if (v17)
  {
    uint64_t v18 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v19 = *v18;
      uint64_t v20 = swift_getObjectType();
      uint64_t v21 = MEMORY[0x25A2B2020](v4);
      uint64_t v22 = v9[4];
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 48);
      swift_unknownObjectRetain();
      v23(v21, v22, v20, v19);
      uint64_t v9 = v83;
      swift_unknownObjectRelease();
      v18 += 2;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v83[8] + 16);
  }
  else
  {
    uint64_t v24 = 0;
  }
  if (*(void *)(v9[7] + 16) == v24)
  {
    uint64_t v25 = v9[6];
    long long v26 = v9;
    uint64_t v27 = swift_getObjectType();
    uint64_t v28 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v25 + 64);
    swift_unknownObjectRetain();
    v28(v75, v27, v25);
    if (v72) {
      return swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
    sub_257046318(v82);
    sub_256FEA220((uint64_t)v75);
    uint64_t v35 = v26[7];
    int v36 = *(void *)(v35 + 16);
    unint64_t v37 = MEMORY[0x263F8EE78];
    if (v36)
    {
      uint64_t v73 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_256F90A58(0, v36, 0);
      unint64_t v37 = v73;
      uint64_t v38 = (uint64_t *)(v35 + 40);
      do
      {
        uint64_t v39 = *v38;
        uint64_t v40 = swift_getObjectType();
        char v41 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v39 + 64);
        swift_unknownObjectRetain();
        v41(v75, v40, v39);
        sub_256FF43DC((uint64_t)v75, (uint64_t)v77);
        if (v78 && (sub_256FEA220((uint64_t)v77), sub_256FF43DC((uint64_t)v75, (uint64_t)v77), v78 != 1))
        {
          sub_256FEA220((uint64_t)v77);
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
          uint64_t v42 = swift_allocObject();
          *(void *)&uint64_t v80 = v42;
          *(_OWORD *)(v42 + 16) = 0u;
          *(_OWORD *)(v42 + 32) = 0u;
        }
        else
        {
          sub_256FEEC3C((uint64_t)v77, (uint64_t)v79);
          sub_25702BB34((uint64_t)v79, (uint64_t *)&v80);
          sub_256FB11E8((uint64_t)v79, &qword_269FDC6E0);
        }
        sub_256FEA220((uint64_t)v75);
        swift_unknownObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_256F90A58(0, *(void *)(v37 + 16) + 1, 1);
          unint64_t v37 = v73;
        }
        uint64_t v44 = *(void *)(v37 + 16);
        uint64_t v43 = *(void *)(v37 + 24);
        if (v44 >= v43 >> 1)
        {
          sub_256F90A58(v43 > 1, v44 + 1, 1);
          unint64_t v37 = v73;
        }
        *(void *)(v37 + 16) = v44 + 1;
        sub_256F9ABF4(&v80, (_OWORD *)(v37 + 32 * v44 + 32));
        v38 += 2;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease();
      uint64_t v45 = v83;
    }
    else
    {
      uint64_t v45 = v26;
    }
    char v46 = v45[8];
    uint64_t v47 = *(void *)(v46 + 16);
    uint64_t v48 = MEMORY[0x263F8EE78];
    if (v47)
    {
      long long v74 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_256F90A58(0, v47, 0);
      uint64_t v48 = v74;
      uint64_t v49 = (uint64_t *)(v46 + 40);
      do
      {
        uint64_t v50 = *v49;
        uint64_t v51 = swift_getObjectType();
        uint64_t v52 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v50 + 64);
        swift_unknownObjectRetain();
        v52(v75, v51, v50);
        sub_256FF43DC((uint64_t)v75, (uint64_t)v77);
        if (v78 && (sub_256FEA220((uint64_t)v77), sub_256FF43DC((uint64_t)v75, (uint64_t)v77), v78 != 1))
        {
          sub_256FEA220((uint64_t)v77);
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
          os_log_type_t v53 = swift_allocObject();
          *(void *)&uint64_t v80 = v53;
          *(_OWORD *)(v53 + 16) = 0u;
          *(_OWORD *)(v53 + 32) = 0u;
        }
        else
        {
          sub_256FEEC3C((uint64_t)v77, (uint64_t)v79);
          sub_25702BB34((uint64_t)v79, (uint64_t *)&v80);
          sub_256FB11E8((uint64_t)v79, &qword_269FDC6E0);
        }
        sub_256FEA220((uint64_t)v75);
        swift_unknownObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_256F90A58(0, *(void *)(v48 + 16) + 1, 1);
          uint64_t v48 = v74;
        }
        int v55 = *(void *)(v48 + 16);
        uint64_t v54 = *(void *)(v48 + 24);
        if (v55 >= v54 >> 1)
        {
          sub_256F90A58(v54 > 1, v55 + 1, 1);
          uint64_t v48 = v74;
        }
        *(void *)(v48 + 16) = v55 + 1;
        sub_256F9ABF4(&v80, (_OWORD *)(v48 + 32 * v55 + 32));
        v49 += 2;
        --v47;
      }
      while (v47);
      swift_bridgeObjectRelease();
      uint64_t v45 = v83;
    }
    sub_256FB118C((uint64_t)v82, (uint64_t)v77);
    unint64_t v56 = *(void *)(v37 + 16);
    if (v56)
    {
      uint64_t v57 = 0;
      uint64_t v58 = 1;
      BOOL v59 = 32;
      while (2)
      {
        if (v57 >= v56)
        {
          __break(1u);
          goto LABEL_77;
        }
        sub_256FB118C(v37 + v59, (uint64_t)&v80);
        uint64_t v60 = *(void *)(v48 + 16);
        if (v57 != v60)
        {
          if (v57 < v60)
          {
            sub_256F9ABF4(&v80, v75);
            sub_256FB118C(v48 + v59, (uint64_t)v76);
            sub_256F9ABF4(v76, &v80);
            sub_256F9ABF4(v75, v79);
            if (swift_dynamicCast())
            {
              uint64_t v61 = sub_25704B0C0();
              swift_bridgeObjectRelease();
              unint64_t v62 = 1;
              switch(v61)
              {
                case 0:
                  unint64_t v62 = 0;
                  goto LABEL_58;
                case 1:
                  goto LABEL_58;
                case 2:
                  unint64_t v62 = 2;
                  goto LABEL_58;
                case 3:
                  unint64_t v62 = 3;
                  goto LABEL_58;
                case 4:
                  unint64_t v62 = 4;
                  goto LABEL_58;
                case 5:
                  unint64_t v62 = 5;
LABEL_58:
                  sub_256FB118C((uint64_t)&v80, (uint64_t)v79);
                  if ((v58 & 1) == 0) {
                    goto LABEL_46;
                  }
                  uint64_t v63 = sub_25701E164((uint64_t)v77, v62, (uint64_t)v79);
                  goto LABEL_67;
                case 6:
                  sub_256FB118C((uint64_t)&v80, (uint64_t)v79);
                  if ((v58 & 1) == 0) {
                    goto LABEL_46;
                  }
                  uint64_t v64 = 6;
                  goto LABEL_64;
                case 7:
                  sub_256FB118C((uint64_t)&v80, (uint64_t)v79);
                  if ((v58 & 1) == 0) {
                    goto LABEL_46;
                  }
                  uint64_t v64 = 7;
LABEL_64:
                  uint64_t v63 = sub_25701F540((uint64_t)v77, v64, (uint64_t)v79);
                  goto LABEL_67;
                case 8:
                  sub_256FB118C((uint64_t)&v80, (uint64_t)v79);
                  if (v58)
                  {
                    uint64_t v63 = sub_25701FA10((uint64_t)v77, (uint64_t)v79);
LABEL_67:
                    uint64_t v58 = v63;
                  }
                  else
                  {
LABEL_46:
                    uint64_t v58 = 0;
                  }
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
                  ++v57;
                  sub_256F9ABF4(&v80, v77);
                  unint64_t v56 = *(void *)(v37 + 16);
                  v59 += 32;
                  if (v57 != v56) {
                    continue;
                  }
                  goto LABEL_73;
                default:
                  break;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (qword_269FDC650 == -1) {
              goto LABEL_70;
            }
            goto LABEL_78;
          }
LABEL_77:
          __break(1u);
LABEL_78:
          swift_once();
LABEL_70:
          int v65 = sub_25704A550();
          __swift_project_value_buffer(v65, (uint64_t)qword_269FDD648);
          uint64_t v66 = v45;
          swift_retain();
          uint64_t v67 = sub_25704A530();
          uint64_t v68 = sub_25704AC60();
          if (os_log_type_enabled(v67, v68))
          {
            uint64_t v69 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v69 = 134217984;
            *(void *)&v79[0] = v66[2];
            sub_25704AC90();
            swift_release();
            _os_log_impl(&dword_256D65000, v67, v68, "Comparison> Not supported comparison operator. line %ld", v69, 0xCu);
            MEMORY[0x25A2B1FA0](v69, -1, -1);
          }
          else
          {

            swift_release();
          }
          sub_256F92DE8();
          swift_allocError();
          char *v70 = 16;
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
        }
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
    }
    else
    {
      uint64_t v58 = 1;
    }
LABEL_73:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 24) = MEMORY[0x263F8D4F8];
    *(unsigned char *)a1 = v58 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
    *(unsigned char *)(a1 + 32) = 0;
    return result;
  }
  if (qword_269FDC650 != -1) {
    swift_once();
  }
  long long v30 = sub_25704A550();
  __swift_project_value_buffer(v30, (uint64_t)qword_269FDD648);
  swift_retain();
  uint64_t v31 = sub_25704A530();
  char v32 = sub_25704AC60();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 134217984;
    *(void *)&v75[0] = v9[2];
    sub_25704AC90();
    swift_release();
    _os_log_impl(&dword_256D65000, v31, v32, "Comparison> ops and comparators do not match. line %ld", v33, 0xCu);
    MEMORY[0x25A2B1FA0](v33, -1, -1);
  }
  else
  {

    swift_release();
  }
  sub_256F92DE8();
  swift_allocError();
  *int v34 = 19;
  return swift_willThrow();
}

uint64_t sub_257020978()
{
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v5 = sub_25704A7E0();
  sub_25704A850();
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D0);
  MEMORY[0x25A2B0AA0](v1, v2);
  swift_bridgeObjectRelease();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  uint64_t v3 = swift_bridgeObjectRetain();
  MEMORY[0x25A2B0AA0](v3, v2);
  swift_bridgeObjectRelease();
  sub_25704A850();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_257020A98()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_257020AD0()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 72, 7);
}

uint64_t sub_257020B20()
{
  return sub_257020B80(&qword_269FDD0B8, &qword_269FDD0C0);
}

uint64_t sub_257020B50()
{
  return sub_257020B80(&qword_269FDD0C8, (unint64_t *)&qword_269FDC818);
}

uint64_t sub_257020B80(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_257020BD0(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_257020BD0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for Comparison()
{
  return self;
}

uint64_t destroy for AnyComparable(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for AnyComparable(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyComparable(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnyComparable(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyComparable(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyComparable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyComparable()
{
  return &type metadata for AnyComparable;
}

unint64_t sub_257020DBC()
{
  unint64_t result = qword_269FDD0D0;
  if (!qword_269FDD0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD0D0);
  }
  return result;
}

uint64_t sub_257020E10()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t sub_257020E50()
{
  unint64_t result = qword_269FDD0E8;
  if (!qword_269FDD0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD0E8);
  }
  return result;
}

uint64_t sub_257020EA4(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for _ConcreteComparableBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_257020EE4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_257020F74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *long long v3 = *a2;
    long long v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_25702102C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_257021058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_2570210A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_2570210F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_257021148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_257021198(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_2570212F4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x25702150CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for Comparison.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257021600);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Comparison.CodingKeys()
{
  return &type metadata for Comparison.CodingKeys;
}

unint64_t sub_25702163C()
{
  unint64_t result = qword_269FDD190;
  if (!qword_269FDD190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD190);
  }
  return result;
}

unint64_t sub_257021694()
{
  unint64_t result = qword_269FDD198;
  if (!qword_269FDD198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD198);
  }
  return result;
}

unint64_t sub_2570216EC()
{
  unint64_t result = qword_269FDD1A0;
  if (!qword_269FDD1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD1A0);
  }
  return result;
}

uint64_t sub_257021740()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

Morpheus::MorpheusError_optional __swiftcall MorpheusError.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 0;
  char v3 = 44;
  switch(rawValue)
  {
    case 9201:
      goto LABEL_45;
    case 9202:
      char v2 = 1;
      goto LABEL_45;
    case 9203:
      char v2 = 2;
      goto LABEL_45;
    case 9204:
      char v2 = 3;
      goto LABEL_45;
    case 9205:
      char v2 = 4;
      goto LABEL_45;
    case 9206:
      char v2 = 5;
      goto LABEL_45;
    case 9207:
      char v2 = 6;
      goto LABEL_45;
    case 9208:
      char v2 = 7;
      goto LABEL_45;
    case 9209:
      char v2 = 8;
      goto LABEL_45;
    case 9210:
      char v2 = 9;
      goto LABEL_45;
    case 9211:
      char v2 = 10;
      goto LABEL_45;
    case 9212:
      char v2 = 11;
      goto LABEL_45;
    case 9213:
      char v2 = 12;
      goto LABEL_45;
    case 9214:
      char v2 = 13;
      goto LABEL_45;
    case 9215:
      char v2 = 14;
      goto LABEL_45;
    case 9216:
      char v2 = 15;
      goto LABEL_45;
    case 9217:
      char v2 = 16;
      goto LABEL_45;
    case 9218:
      char v2 = 17;
      goto LABEL_45;
    case 9219:
      char v2 = 18;
      goto LABEL_45;
    case 9220:
      char v2 = 19;
      goto LABEL_45;
    case 9221:
      char v2 = 20;
      goto LABEL_45;
    case 9222:
      char v2 = 21;
      goto LABEL_45;
    case 9223:
      char v2 = 22;
      goto LABEL_45;
    case 9224:
      char v2 = 23;
      goto LABEL_45;
    case 9225:
      char v2 = 24;
      goto LABEL_45;
    case 9226:
      char v2 = 25;
      goto LABEL_45;
    case 9227:
      char v2 = 26;
      goto LABEL_45;
    case 9228:
      char v2 = 27;
      goto LABEL_45;
    case 9229:
      char v2 = 28;
      goto LABEL_45;
    case 9230:
      char v2 = 29;
      goto LABEL_45;
    case 9231:
      char v2 = 30;
      goto LABEL_45;
    case 9232:
      char v2 = 31;
      goto LABEL_45;
    case 9233:
      char v2 = 32;
      goto LABEL_45;
    case 9234:
      char v2 = 33;
      goto LABEL_45;
    case 9235:
      char v2 = 34;
      goto LABEL_45;
    case 9236:
      char v2 = 35;
      goto LABEL_45;
    case 9237:
      char v2 = 36;
      goto LABEL_45;
    case 9238:
      char v2 = 37;
      goto LABEL_45;
    case 9239:
      char v2 = 38;
      goto LABEL_45;
    case 9240:
      char v2 = 39;
      goto LABEL_45;
    case 9241:
      char v2 = 40;
      goto LABEL_45;
    case 9242:
      char v2 = 41;
      goto LABEL_45;
    case 9243:
      char v2 = 42;
      goto LABEL_45;
    case 9244:
      char v2 = 43;
LABEL_45:
      char v3 = v2;
      goto LABEL_46;
    case 9245:
LABEL_46:
      char *v1 = v3;
      break;
    case 9246:
      char *v1 = 45;
      break;
    case 9247:
      char *v1 = 46;
      break;
    case 9248:
      char *v1 = 47;
      break;
    case 9249:
      char *v1 = 48;
      break;
    case 9250:
      char *v1 = 49;
      break;
    case 9251:
      char *v1 = 50;
      break;
    case 9252:
      char *v1 = 51;
      break;
    case 9253:
      char *v1 = 52;
      break;
    case 9254:
      char *v1 = 53;
      break;
    case 9255:
      char *v1 = 54;
      break;
    case 9256:
      char *v1 = 55;
      break;
    case 9257:
      char *v1 = 56;
      break;
    case 9258:
      char *v1 = 57;
      break;
    case 9259:
      char *v1 = 58;
      break;
    case 9260:
      char *v1 = 59;
      break;
    case 9261:
      char *v1 = 60;
      break;
    case 9299:
      char *v1 = 61;
      break;
    default:
      char *v1 = 62;
      break;
  }
  return (Morpheus::MorpheusError_optional)rawValue;
}

uint64_t MorpheusError.rawValue.getter()
{
  return qword_257071988[*v0];
}

BOOL sub_257021B9C(char *a1, char *a2)
{
  return qword_257071988[*a1] == qword_257071988[*a2];
}

unint64_t sub_257021BC4()
{
  unint64_t result = qword_269FDD1A8;
  if (!qword_269FDD1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD1A8);
  }
  return result;
}

uint64_t sub_257021C18()
{
  return sub_25704B2B0();
}

uint64_t sub_257021C68()
{
  return sub_25704B2A0();
}

uint64_t sub_257021CA0()
{
  return sub_25704B2B0();
}

Morpheus::MorpheusError_optional sub_257021CEC(Swift::Int *a1)
{
  return MorpheusError.init(rawValue:)(*a1);
}

void sub_257021CF4(void *a1@<X8>)
{
  *a1 = qword_257071988[*v1];
}

uint64_t sub_257021D0C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_257021EF8();
  unint64_t v5 = sub_257021F4C();
  return MEMORY[0x270F9FB50](a1, a2, v4, v5);
}

uint64_t getEnumTagSinglePayload for MorpheusError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xC3) {
    goto LABEL_17;
  }
  if (a2 + 61 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 61) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 61;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 61;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 61;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x3E;
  int v8 = v6 - 62;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MorpheusError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 61 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 61) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xC3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xC2)
  {
    unsigned int v6 = ((a2 - 195) >> 8) + 1;
    *unint64_t result = a2 + 61;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257021EC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 61;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MorpheusError()
{
  return &type metadata for MorpheusError;
}

unint64_t sub_257021EF8()
{
  unint64_t result = qword_269FDD1B0;
  if (!qword_269FDD1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD1B0);
  }
  return result;
}

unint64_t sub_257021F4C()
{
  unint64_t result = qword_269FDD1B8;
  if (!qword_269FDD1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD1B8);
  }
  return result;
}

void Int.add(_:)(uint64_t a1, uint64_t a2)
{
  if (a2 == (int)a2) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
}

uint64_t sub_257022064()
{
  uint64_t result = *v0;
  if (*v0 == (int)*v0) {
    mlx_array_from_int();
  }
  __break(1u);
  __break(1u);
  return result;
}

void Int32.add(_:)()
{
}

void sub_2570221E0()
{
}

atomic_ullong *UInt32.add(_:)(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = a2;
  int v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)&v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(0, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_257022388(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x257022390);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_2570223A8(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = *v1;
  int v3 = (atomic_ullong *)mlx_array_from_data((uint64_t)&v6, (char *)(MEMORY[0x263F8EE78] + 32), 0, 2);
  if (!v3) {
    __break(1u);
  }
  type metadata accessor for MLXArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v3;
  sub_25702B250(0, inited, a1);
  swift_setDeallocating();
  return mlx_free(v3);
}

void sub_25702249C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x2570224A4);
  }
  _Unwind_Resume(a1);
}

void Float.add(_:)()
{
}

void sub_257022570()
{
}

void Double.add(_:)()
{
}

void sub_2570226E0()
{
}

void *MLXArray.add(_:)(uint64_t a1)
{
  unsigned __int8 v3 = 7;
  uint64_t result = sub_2570049DC(a1, &v3);
  if (!v1) {
    mlx_default_device();
  }
  return result;
}

void *sub_2570228A8(uint64_t a1)
{
  return MLXArray.add(_:)(a1);
}

uint64_t SharedMutableArray.add(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(v12, (uint64_t)v15);
    uint64_t v3 = SharedMutableArray.anyArray.getter();
    uint64_t v4 = v16;
    uint64_t v5 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    *(void *)&v12[0] = v3;
    sub_256FA4470(v6);
    uint64_t v7 = *(void *)&v12[0];
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAE8);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v7;
    a2[3] = v8;
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v13 = 0;
    memset(v12, 0, sizeof(v12));
    sub_257022CB4((uint64_t)v12);
    sub_256F92DE8();
    swift_allocError();
    unsigned char *v11 = 15;
    return swift_willThrow();
  }
}

uint64_t sub_257022A10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return SharedMutableArray.add(_:)(a1, a2);
}

uint64_t Array.add(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(v12, (uint64_t)v15);
    uint64_t v3 = sub_25704AF50();
    uint64_t v4 = v16;
    uint64_t v5 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    *(void *)&v12[0] = v3;
    sub_256FA4470(v6);
    uint64_t v7 = *(void *)&v12[0];
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAE8);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v7;
    a2[3] = v8;
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v13 = 0;
    memset(v12, 0, sizeof(v12));
    sub_257022CB4((uint64_t)v12);
    sub_256F92DE8();
    swift_allocError();
    unsigned char *v11 = 15;
    return swift_willThrow();
  }
}

uint64_t sub_257022B90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Array.add(_:)(a1, a2);
}

uint64_t String.add(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_256FB118C(a1, (uint64_t)&v12);
  uint64_t v7 = MEMORY[0x263F8D310];
  if (swift_dynamicCast())
  {
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    swift_bridgeObjectRetain();
    sub_25704A850();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v9 = v12;
    uint64_t v10 = v13;
    a4[3] = v7;
    *a4 = v9;
    a4[1] = v10;
  }
  else
  {
    sub_256F92DE8();
    swift_allocError();
    unsigned char *v11 = 15;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_257022C98@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return String.add(_:)(a1, *v2, v2[1], a2);
}

uint64_t sub_257022CB4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of Summable.add(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_257022D3C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
    sub_256F90BB8(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v10;
    do
    {
      sub_256FB118C(v4, (uint64_t)v8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256F90BB8(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v10;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_256F90BB8(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v10;
      }
      *(void *)(v2 + 16) = v6 + 1;
      sub_256FEEC3C((uint64_t)v9, v2 + 32 * v6 + 32);
      v4 += 32;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_257022E6C(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_256F908EC(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    unint64_t v5 = *(void *)(v9 + 16);
    do
    {
      uint64_t v7 = *v4++;
      uint64_t v6 = v7;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 24);
      if (v5 >= v8 >> 1)
      {
        sub_256F908EC(v8 > 1, v5 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v5 + 1;
      *(void *)(result + 8 * v5++ + 32) = v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_257022F2C(uint64_t a1)
{
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(a1 + 16);
  sub_25704AEE0();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    sub_256FB118C(i, (uint64_t)v5);
    sub_256FABC94();
    if (!swift_dynamicCast()) {
      break;
    }
    sub_25704AEB0();
    sub_25704AEF0();
    sub_25704AF00();
    sub_25704AEC0();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

uint64_t sub_257023028(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  sub_256F908EC(0, v2, 0);
  uint64_t v3 = v10;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_256FB118C(i, (uint64_t)v9);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256F908EC(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v10;
      }
      unint64_t v6 = *(void *)(v3 + 16);
      unint64_t v5 = *(void *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_256F908EC(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v10;
      }
      *(void *)(v3 + 16) = v6 + 1;
      *(void *)(v3 + 8 * v6 + 32) = v8;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    return 0;
  }
  return v3;
}

uint64_t sub_257023168(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v12 = MEMORY[0x263F8EE78];
  sub_256F90BF8(0, v2, 0);
  uint64_t v3 = v12;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_256FB118C(i, (uint64_t)v10);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC728);
      if (!swift_dynamicCast()) {
        break;
      }
      sub_256FA81EC(v8, (uint64_t)v11);
      sub_256FA81EC(v11, (uint64_t)v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256F90BF8(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = *(void *)(v3 + 16);
      unint64_t v5 = *(void *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_256F90BF8(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      *(void *)(v3 + 16) = v6 + 1;
      sub_256FA81EC(v8, v3 + 40 * v6 + 32);
      if (!--v2) {
        return v3;
      }
    }
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    swift_release();
    sub_256FB11E8((uint64_t)v8, &qword_269FDCE80);
    return 0;
  }
  return v3;
}

uint64_t sub_2570232E0(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(a1 + 16);
  sub_25704AEE0();
  if (!v2) {
    return v5;
  }
  uint64_t v3 = a1 + 32;
  type metadata accessor for FunctionDef();
  while (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
    sub_25704AEB0();
    sub_25704AEF0();
    sub_25704AF00();
    sub_25704AEC0();
    v3 += 16;
    if (!--v2) {
      return v5;
    }
  }
  swift_release();
  return 0;
}

uint64_t sub_2570233BC(char *a1, char *a2)
{
  return sub_256FF1E40(*a1, *a2);
}

uint64_t sub_2570233C8()
{
  return sub_25704B2B0();
}

uint64_t sub_257023448()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2570234B4()
{
  return sub_25704B2B0();
}

uint64_t sub_257023530@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_257023590(uint64_t *a1@<X8>)
{
  uint64_t v2 = 2036625250;
  if (!*v1) {
    uint64_t v2 = 0x6D614E7373616C63;
  }
  unint64_t v3 = 0xE900000000000065;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2570235CC()
{
  if (*v0) {
    return 2036625250;
  }
  else {
    return 0x6D614E7373616C63;
  }
}

uint64_t sub_257023604@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_257023668(uint64_t a1)
{
  unint64_t v2 = sub_25702535C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2570236A4(uint64_t a1)
{
  unint64_t v2 = sub_25702535C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2570236E0(void *a1)
{
  return sub_25702372C(a1);
}

uint64_t sub_25702372C(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD1C0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25702535C();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for ClassDef();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v12[0]) = 0;
    v1[5] = sub_25704B0F0();
    v1[6] = v10;
    v1[7] = sub_25703FBC0(v8, 1);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_257023964@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1[7] + 16);
  if (!v3) {
    goto LABEL_39;
  }
  uint64_t v57 = (uint64_t)(v1 + 3);
  char v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  do
  {
    uint64_t v5 = *v4;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = MEMORY[0x25A2B2020](v57);
    uint64_t v8 = v1[4];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
    swift_unknownObjectRetain();
    v9(v7, v8, ObjectType, v5);
    swift_unknownObjectRelease();
    v4 += 2;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v1[7] + 16);
  uint64_t v2 = v1;
  if (!v10)
  {
LABEL_39:
    uint64_t v29 = 0;
    *(void *)&long long v54 = MEMORY[0x263F8EE78];
    *((void *)&v54 + 1) = MEMORY[0x263F8EE78];
    *(void *)&long long v55 = MEMORY[0x263F8EE78];
    *((void *)&v55 + 1) = MEMORY[0x263F8EE78];
    *(void *)&v56[0] = MEMORY[0x263F8EE78];
    memset((char *)v56 + 8, 0, 32);
    goto LABEL_40;
  }
  uint64_t v45 = v1;
  uint64_t v57 = type metadata accessor for FunctionDef();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = 32;
  while (1)
  {
    uint64_t v12 = swift_dynamicCastClass();
    if (!v12) {
      goto LABEL_7;
    }
    uint64_t v14 = *(void *)(v12 + 56);
    uint64_t v13 = *(void **)(v12 + 64);
    uint64_t v15 = *(void *)(v14 + 16);
    int64_t v16 = v13[2];
    int64_t v17 = v16 + v15;
    if (__OFADD__(v16, v15))
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      uint64_t result = sub_25704B090();
      __break(1u);
      return result;
    }
    uint64_t v18 = v12;
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v17 <= v13[3] >> 1)
    {
      if (!*(void *)(v14 + 16)) {
        goto LABEL_26;
      }
    }
    else
    {
      if (v16 <= v17) {
        int64_t v26 = v16 + v15;
      }
      else {
        int64_t v26 = v16;
      }
      uint64_t v13 = sub_256FA6500(isUniquelyReferenced_nonNull_native, v26, 1, v13);
      if (!*(void *)(v14 + 16))
      {
LABEL_26:
        if (v15) {
          goto LABEL_50;
        }
        goto LABEL_27;
      }
    }
    uint64_t v20 = v13[2];
    if ((v13[3] >> 1) - v20 < v15) {
      goto LABEL_51;
    }
    unint64_t v21 = (unint64_t)&v13[2 * v20 + 4];
    if (v14 + 32 < v21 + 16 * v15 && v21 < v14 + 32 + 16 * v15) {
      goto LABEL_53;
    }
    swift_arrayInitWithCopy();
    if (v15)
    {
      uint64_t v23 = v13[2];
      BOOL v24 = __OFADD__(v23, v15);
      uint64_t v25 = v23 + v15;
      if (v24) {
        goto LABEL_52;
      }
      v13[2] = v25;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    if (v13[2])
    {
      uint64_t v28 = v13[4];
      uint64_t v27 = v13[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v29 = v18;
      if (*(void *)(v18 + 40) == 0x5F5F74696E695F5FLL && *(void *)(v18 + 48) == 0xE800000000000000) {
        break;
      }
      if (sub_25704B1E0()) {
        break;
      }
    }
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_7:
    v11 += 16;
    if (!--v10)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v2 = v45;
      goto LABEL_39;
    }
  }
  if (v28 == 1718379891 && v27 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    goto LABEL_46;
  }
  char v31 = sub_25704B1E0();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((v31 & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_46:
  swift_bridgeObjectRelease();
  swift_retain();
  sub_25701C73C((uint64_t)&v49);
  swift_release();
  uint64_t v2 = v45;
  if (v47) {
    return swift_release();
  }
  long long v54 = v49;
  long long v55 = v50;
  *(void *)&v56[0] = v51;
  *(_OWORD *)((char *)v56 + 8) = v52;
  *(_OWORD *)((char *)&v56[1] + 8) = v53;
LABEL_40:
  sub_256FFC8DC();
  if (MEMORY[0x25A2B2020](v2 + 3))
  {
    uint64_t v48 = v2[4];
    uint64_t v57 = swift_getObjectType();
    uint64_t v32 = v2[5];
    uint64_t v33 = v2[6];
    long long v43 = v56[1];
    long long v44 = v56[0];
    uint64_t v42 = *(void *)&v56[2];
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = v2;
    *(void *)(v34 + 24) = v29;
    swift_retain();
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v35 = MEMORY[0x263F8EE78];
    unint64_t v36 = sub_256FEB040(MEMORY[0x263F8EE78]);
    uint64_t v37 = type metadata accessor for Function();
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 32) = v35;
    *(void *)(v38 + 40) = v35;
    *(void *)(v38 + 48) = v35;
    *(void *)(v38 + 56) = v35;
    *(void *)(v38 + 64) = v35;
    *(_OWORD *)(v38 + 72) = 0u;
    *(_OWORD *)(v38 + 88) = 0u;
    *(void *)(v38 + 104) = sub_256FEB040(v35);
    *(void *)(v38 + 16) = v32;
    *(void *)(v38 + 24) = v33;
    long long v39 = v55;
    *(_OWORD *)(v38 + 32) = v54;
    *(_OWORD *)(v38 + 48) = v39;
    *(_OWORD *)(v38 + 64) = v44;
    *(_OWORD *)(v38 + 80) = v43;
    *(void *)(v38 + 96) = v42;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    *(void *)(v38 + 104) = v36;
    swift_bridgeObjectRelease();
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = sub_257024FC0;
    *(void *)(v40 + 24) = v34;
    *(void *)(v38 + 112) = sub_256FF8190;
    *(void *)(v38 + 120) = v40;
    *((void *)&v50 + 1) = v37;
    *(void *)&long long v49 = v38;
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t))(v48 + 64))(v32, v33, &v49, v57);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_257023FA4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v95 = type metadata accessor for LexicalContext();
  uint64_t v5 = (void *)swift_allocObject();
  _OWORD v5[2] = 0x6E776F6E6B6E55;
  v5[3] = 0xE700000000000000;
  uint64_t v6 = MEMORY[0x263F8EE78];
  unint64_t v7 = sub_256FEAEFC(MEMORY[0x263F8EE78]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB60);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = MEMORY[0x263F8EE80];
  swift_beginAccess();
  *(void *)(v8 + 16) = v7;
  swift_bridgeObjectRelease();
  uint64_t v5[4] = v8;
  v5[5] = sub_256FEB2B0(v6);
  uint64_t v9 = a2[6];
  _OWORD v5[2] = a2[5];
  v5[3] = v9;
  uint64_t v97 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[7];
  uint64_t v101 = *(void *)(v10 + 16);
  if (!v101)
  {
    uint64_t v98 = v6;
LABEL_44:
    uint64_t v16 = sub_2570232E0(v98);
    uint64_t result = swift_release();
    uint64_t v10 = a3;
    if (v16)
    {
      if ((unint64_t)v16 >> 62) {
        goto LABEL_93;
      }
      uint64_t v34 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v35 = v97;
      if (v34) {
        goto LABEL_47;
      }
LABEL_78:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v80 = v95;
      if (!v10) {
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v35 = v97;
      uint64_t v80 = v95;
      if (!a3)
      {
LABEL_87:
        a4[3] = v80;
        *a4 = v35;
        return result;
      }
    }
    *((void *)&v115 + 1) = v80;
    *(void *)&long long v114 = v35;
    sub_256F9ABF4(&v114, v111);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v108[0] = a1;
    sub_256FED5FC(v111, 1718379891, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    uint64_t v82 = v108[0];
    swift_bridgeObjectRelease();
    sub_25701C878(v82, (uint64_t *)&v114);
    if (v107)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_87;
  }
  type metadata accessor for FunctionDef();
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  uint64_t v98 = MEMORY[0x263F8EE78];
  while (1)
  {
    long long v105 = *(_OWORD *)(v10 + 16 * v11 + 32);
    uint64_t v12 = swift_dynamicCastClass();
    if (!v12) {
      goto LABEL_4;
    }
    uint64_t v13 = v12;
    uint64_t v15 = *(void *)(v12 + 56);
    uint64_t v14 = *(void **)(v12 + 64);
    uint64_t v16 = *(void *)(v15 + 16);
    int64_t v17 = v14[2];
    int64_t v18 = v17 + v16;
    if (__OFADD__(v17, v16)) {
      break;
    }
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (v19 && v18 <= v14[3] >> 1)
    {
      if (!*(void *)(v15 + 16)) {
        goto LABEL_23;
      }
    }
    else
    {
      if (v17 <= v18) {
        int64_t v26 = v17 + v16;
      }
      else {
        int64_t v26 = v17;
      }
      uint64_t v14 = sub_256FA6500(v19, v26, 1, v14);
      if (!*(void *)(v15 + 16))
      {
LABEL_23:
        if (v16) {
          goto LABEL_89;
        }
        goto LABEL_24;
      }
    }
    uint64_t v20 = v14[2];
    if ((v14[3] >> 1) - v20 < v16) {
      goto LABEL_90;
    }
    unint64_t v21 = (unint64_t)&v14[2 * v20 + 4];
    if (v15 + 32 < v21 + 16 * v16 && v21 < v15 + 32 + 16 * v16)
    {
      uint64_t result = sub_25704B090();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
    if (v16)
    {
      uint64_t v23 = v14[2];
      BOOL v24 = __OFADD__(v23, v16);
      uint64_t v25 = v23 + v16;
      if (v24) {
        goto LABEL_91;
      }
      void v14[2] = v25;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    if (v14[2])
    {
      uint64_t v28 = v14[4];
      uint64_t v27 = v14[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v28 == 1718379891 && v27 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v30 = sub_25704B1E0();
        swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
        {
LABEL_34:
          swift_unknownObjectRelease_n();
          goto LABEL_4;
        }
      }
      if (*(void *)(v13 + 40) != 0x5F5F74696E695F5FLL || *(void *)(v13 + 48) != 0xE800000000000000)
      {
        char v31 = sub_25704B1E0();
        swift_unknownObjectRelease();
        if (v31)
        {
          swift_unknownObjectRelease();
        }
        else
        {
          *(void *)&long long v114 = v98;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_256F90C18(0, *(void *)(v98 + 16) + 1, 1);
            uint64_t v98 = v114;
          }
          unint64_t v33 = *(void *)(v98 + 16);
          unint64_t v32 = *(void *)(v98 + 24);
          if (v33 >= v32 >> 1)
          {
            sub_256F90C18(v32 > 1, v33 + 1, 1);
            uint64_t v98 = v114;
          }
          *(void *)(v98 + 16) = v33 + 1;
          *(_OWORD *)(v98 + 16 * v33 + 32) = v105;
        }
        goto LABEL_4;
      }
      goto LABEL_34;
    }
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_4:
    if (v101 == ++v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  swift_bridgeObjectRetain();
  uint64_t v34 = sub_25704B040();
  swift_bridgeObjectRelease();
  uint64_t v35 = v97;
  if (!v34) {
    goto LABEL_78;
  }
LABEL_47:
  uint64_t v36 = 0;
  unint64_t v37 = v16 & 0xC000000000000001;
  uint64_t v84 = v16 + 32;
  uint64_t v100 = v16;
  unint64_t v90 = v16 & 0xC000000000000001;
  uint64_t v91 = v34;
  while (1)
  {
    if (v37)
    {
      uint64_t v38 = (void *)MEMORY[0x25A2B0EE0](v36, v16);
      BOOL v24 = __OFADD__(v36, 1);
      uint64_t v39 = v36 + 1;
      if (v24) {
        goto LABEL_92;
      }
    }
    else
    {
      uint64_t v38 = *(void **)(v84 + 8 * v36);
      swift_retain();
      BOOL v24 = __OFADD__(v36, 1);
      uint64_t v39 = v36 + 1;
      if (v24) {
        goto LABEL_92;
      }
    }
    uint64_t v40 = v38[14];
    int64_t v41 = *(void *)(v40 + 16);
    int v106 = v38;
    uint64_t v99 = v39;
    if (v41) {
      break;
    }
    uint64_t v53 = MEMORY[0x263F8EE78];
    uint64_t v42 = MEMORY[0x263F8EE78];
LABEL_65:
    uint64_t v54 = v38[15];
    int64_t v55 = *(void *)(v54 + 16);
    if (v55)
    {
      uint64_t v119 = v53;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_256F90A58(0, v55, 0);
      uint64_t v56 = v119;
      uint64_t v103 = v38 + 3;
      uint64_t v57 = (uint64_t *)(v54 + 40);
      while (1)
      {
        uint64_t v58 = *v57;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v60 = MEMORY[0x25A2B2020](v103);
        uint64_t v61 = v38[4];
        unint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 48);
        swift_unknownObjectRetain();
        v62(v60, v61, ObjectType, v58);
        (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v58 + 64))(v111, ObjectType, v58);
        if (v107) {
          break;
        }
        sub_256FF43DC((uint64_t)v111, (uint64_t)v108);
        if (v109 && (sub_256FEA220((uint64_t)v108), sub_256FF43DC((uint64_t)v111, (uint64_t)v108), v109 != 1))
        {
          sub_256FEA220((uint64_t)v108);
          uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
          uint64_t v63 = swift_allocObject();
          *(void *)&long long v112 = v63;
          *(_OWORD *)(v63 + 16) = 0u;
          *(_OWORD *)(v63 + 32) = 0u;
        }
        else
        {
          sub_256FEEC3C((uint64_t)v108, (uint64_t)v110);
          sub_25702BB34((uint64_t)v110, (uint64_t *)&v112);
          sub_256FB11E8((uint64_t)v110, &qword_269FDC6E0);
        }
        sub_256FEA220((uint64_t)v111);
        swift_unknownObjectRelease();
        uint64_t v119 = v56;
        unint64_t v65 = *(void *)(v56 + 16);
        unint64_t v64 = *(void *)(v56 + 24);
        if (v65 >= v64 >> 1)
        {
          sub_256F90A58(v64 > 1, v65 + 1, 1);
          uint64_t v56 = v119;
        }
        *(void *)(v56 + 16) = v65 + 1;
        sub_256F9ABF4(&v112, (_OWORD *)(v56 + 32 * v65 + 32));
        v57 += 2;
        --v55;
        uint64_t v38 = v106;
        if (!v55)
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v53 = MEMORY[0x263F8EE78];
          goto LABEL_77;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    uint64_t v56 = v53;
LABEL_77:
    uint64_t v66 = v38;
    uint64_t v67 = v38[7];
    uint64_t v68 = v38[8];
    uint64_t v69 = v66[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v70 = sub_257022D3C(v42);
    swift_bridgeObjectRelease();
    uint64_t v71 = sub_257022D3C(v56);
    swift_bridgeObjectRelease();
    uint64_t v72 = v66[10];
    uint64_t v73 = v66[13];
    *(void *)&long long v114 = v67;
    *((void *)&v114 + 1) = v68;
    *(void *)&long long v115 = v69;
    *((void *)&v115 + 1) = v70;
    uint64_t v116 = v71;
    *(void *)uint64_t v117 = v72;
    *(_OWORD *)&v117[8] = *(_OWORD *)(v66 + 11);
    uint64_t v118 = v73;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_256FFC8DC();
    uint64_t v74 = v66[5];
    uint64_t v75 = v66[6];
    uint64_t v89 = v116;
    long long v88 = *(_OWORD *)v117;
    uint64_t v86 = v118;
    uint64_t v87 = *(void *)&v117[16];
    uint64_t v92 = swift_allocObject();
    uint64_t v35 = v97;
    swift_weakInit();
    uint64_t v104 = swift_allocObject();
    *(void *)(v104 + 16) = v92;
    *(void *)(v104 + 24) = v66;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    unint64_t v85 = sub_256FEB040(v53);
    type metadata accessor for Function();
    uint64_t v76 = swift_allocObject();
    *(void *)(v76 + 32) = v53;
    *(void *)(v76 + 40) = v53;
    *(void *)(v76 + 48) = v53;
    *(void *)(v76 + 56) = v53;
    *(void *)(v76 + 64) = v53;
    *(_OWORD *)(v76 + 72) = 0u;
    *(_OWORD *)(v76 + 88) = 0u;
    *(void *)(v76 + 104) = sub_256FEB040(v53);
    *(void *)(v76 + 16) = v74;
    *(void *)(v76 + 24) = v75;
    long long v77 = v115;
    *(_OWORD *)(v76 + 32) = v114;
    *(_OWORD *)(v76 + 48) = v77;
    *(void *)(v76 + 64) = v89;
    *(_OWORD *)(v76 + 72) = v88;
    *(void *)(v76 + 88) = v87;
    *(void *)(v76 + 96) = v86;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v76 + 104) = v85;
    swift_bridgeObjectRelease();
    uint64_t v78 = swift_allocObject();
    *(void *)(v78 + 16) = sub_257025340;
    *(void *)(v78 + 24) = v104;
    *(void *)(v76 + 112) = sub_256FF8224;
    *(void *)(v76 + 120) = v78;
    swift_release();
    swift_beginAccess();
    char v79 = swift_isUniquelyReferenced_nonNull_native();
    v108[0] = v97[5];
    v97[5] = 0x8000000000000000;
    sub_256FED898(v76, v74, v75, v79);
    v97[5] = v108[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    unint64_t v37 = v90;
    uint64_t v36 = v99;
    uint64_t v16 = v100;
    uint64_t v10 = a3;
    if (v99 == v91) {
      goto LABEL_78;
    }
  }
  uint64_t v119 = MEMORY[0x263F8EE78];
  swift_retain();
  swift_bridgeObjectRetain();
  sub_256F90A58(0, v41, 0);
  uint64_t v42 = v119;
  unint64_t v102 = v38 + 3;
  long long v43 = (uint64_t *)(v40 + 40);
  while (1)
  {
    uint64_t v44 = v42;
    uint64_t v45 = *v43;
    uint64_t v46 = swift_getObjectType();
    uint64_t v47 = MEMORY[0x25A2B2020](v102);
    uint64_t v48 = v38[4];
    long long v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 48);
    swift_unknownObjectRetain();
    v49(v47, v48, v46, v45);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v45 + 64))(v111, v46, v45);
    if (v107) {
      break;
    }
    sub_256FF43DC((uint64_t)v111, (uint64_t)v108);
    uint64_t v42 = v44;
    if (v109 && (sub_256FEA220((uint64_t)v108), sub_256FF43DC((uint64_t)v111, (uint64_t)v108), v109 != 1))
    {
      sub_256FEA220((uint64_t)v108);
      uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
      uint64_t v50 = swift_allocObject();
      *(void *)&long long v112 = v50;
      *(_OWORD *)(v50 + 16) = 0u;
      *(_OWORD *)(v50 + 32) = 0u;
    }
    else
    {
      sub_256FEEC3C((uint64_t)v108, (uint64_t)v110);
      sub_25702BB34((uint64_t)v110, (uint64_t *)&v112);
      sub_256FB11E8((uint64_t)v110, &qword_269FDC6E0);
    }
    sub_256FEA220((uint64_t)v111);
    swift_unknownObjectRelease();
    uint64_t v119 = v44;
    unint64_t v52 = *(void *)(v44 + 16);
    unint64_t v51 = *(void *)(v44 + 24);
    if (v52 >= v51 >> 1)
    {
      sub_256F90A58(v51 > 1, v52 + 1, 1);
      uint64_t v42 = v119;
    }
    *(void *)(v42 + 16) = v52 + 1;
    sub_256F9ABF4(&v112, (_OWORD *)(v42 + 32 * v52 + 32));
    v43 += 2;
    --v41;
    uint64_t v38 = v106;
    if (!v41)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v53 = MEMORY[0x263F8EE78];
      goto LABEL_65;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_257024CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v9 = type metadata accessor for LexicalContext();
    *(void *)&long long v8 = v5;
    sub_256F9ABF4(&v8, v7);
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_256FED5FC(v7, 1718379891, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_25701C878(a1, (uint64_t *)a2);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_257024DBC()
{
  swift_bridgeObjectRetain();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v1 + 40;
    do
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      unint64_t v4 = sub_25704B150();
      sub_257027BBC(v4, v5);
      swift_bridgeObjectRelease();
      sub_25704A850();
      swift_bridgeObjectRelease();
      sub_25704A850();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  sub_25704A850();
  return 0x207373616C63;
}

uint64_t sub_257024F20()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_257024F50()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 64, 7);
}

uint64_t type metadata accessor for ClassDef()
{
  return self;
}

uint64_t sub_257024FC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_257023FA4(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_257024FDC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_257025014(uint64_t a1, uint64_t a2)
{
  return sub_25702502C(a1, a2);
}

uint64_t sub_25702502C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    sub_256F90A58(0, v4, 0);
    uint64_t v5 = v28;
    uint64_t v19 = a2 + 24;
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      int64_t v20 = v4;
      uint64_t v21 = v5;
      uint64_t v9 = *i;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = MEMORY[0x25A2B2020](v19);
      uint64_t v5 = a2;
      uint64_t v12 = *(void *)(a2 + 32);
      uint64_t v13 = v3;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain();
      v14(v11, v12, ObjectType, v9);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 64))(v25, ObjectType, v9);
      uint64_t v3 = v13;
      if (v13) {
        break;
      }
      sub_256FF43DC((uint64_t)v25, (uint64_t)v22);
      if (v23)
      {
        sub_256FEA220((uint64_t)v22);
        sub_256FF43DC((uint64_t)v25, (uint64_t)v22);
        a2 = v5;
        if (v23 == 1)
        {
          sub_256FEEC3C((uint64_t)v22, (uint64_t)v24);
          sub_25702BB34((uint64_t)v24, v26);
          sub_256FB11E8((uint64_t)v24, &qword_269FDC6E0);
        }
        else
        {
          sub_256FEA220((uint64_t)v22);
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
          uint64_t v15 = swift_allocObject();
          v26[0] = v15;
          *(_OWORD *)(v15 + 16) = 0u;
          *(_OWORD *)(v15 + 32) = 0u;
        }
      }
      else
      {
        sub_256FEEC3C((uint64_t)v22, (uint64_t)v24);
        sub_25702BB34((uint64_t)v24, v26);
        sub_256FB11E8((uint64_t)v24, &qword_269FDC6E0);
        a2 = v5;
      }
      uint64_t v5 = v21;
      sub_256FEA220((uint64_t)v25);
      swift_unknownObjectRelease();
      uint64_t v28 = v21;
      unint64_t v17 = *(void *)(v21 + 16);
      unint64_t v16 = *(void *)(v21 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_256F90A58(v16 > 1, v17 + 1, 1);
        uint64_t v5 = v28;
      }
      *(void *)(v5 + 16) = v17 + 1;
      sub_256F9ABF4(v26, (_OWORD *)(v5 + 32 * v17 + 32));
      int64_t v4 = v20 - 1;
      if (v20 == 1) {
        return v5;
      }
    }
    swift_release();
    swift_unknownObjectRelease();
  }
  return v5;
}

uint64_t sub_257025284()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_2570252C4()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_257025340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_257024CB8(a1, a2);
}

unint64_t sub_25702535C()
{
  unint64_t result = qword_269FDD1C8;
  if (!qword_269FDD1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD1C8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ClassDef.StrideCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25702547CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClassDef.StrideCodingKeys()
{
  return &type metadata for ClassDef.StrideCodingKeys;
}

unint64_t sub_2570254B8()
{
  unint64_t result = qword_269FDD1D0;
  if (!qword_269FDD1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD1D0);
  }
  return result;
}

unint64_t sub_257025510()
{
  unint64_t result = qword_269FDD1D8;
  if (!qword_269FDD1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD1D8);
  }
  return result;
}

unint64_t sub_257025568()
{
  unint64_t result = qword_269FDD1E0;
  if (!qword_269FDD1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD1E0);
  }
  return result;
}

uint64_t sub_2570255C0(char *a1, char *a2)
{
  return sub_256FF279C(*a1, *a2);
}

uint64_t sub_2570255CC()
{
  return sub_25704B2B0();
}

uint64_t sub_257025650()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2570256C0()
{
  return sub_25704B2B0();
}

uint64_t sub_257025740@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_2570257A0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65756C6176;
  if (*v1) {
    uint64_t v2 = 0x69737265766E6F63;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xEA00000000006E6FLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2570257E0()
{
  if (*v0) {
    return 0x69737265766E6F63;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t sub_25702581C@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_257025880(uint64_t a1)
{
  unint64_t v2 = sub_257025D68();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2570258BC(uint64_t a1)
{
  unint64_t v2 = sub_257025D68();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2570258F8(void *a1)
{
  return sub_257025944(a1);
}

uint64_t sub_257025944(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD1E8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257025D68();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for FormattedValue();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_257034AB0((uint64_t)v8, 0);
    v1[6] = v10;
    LOBYTE(v12[0]) = 1;
    v1[7] = sub_25704B120();
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_257025B80@<X0>(uint64_t a1@<X8>)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  void v14[5];

  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = MEMORY[0x25A2B2020](v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  uint64_t v10 = *(void *)(v1 + 48);
  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 64);
  swift_unknownObjectRetain();
  v12(v14, v11, v10);
  uint64_t result = swift_unknownObjectRelease();
  if (!v3)
  {
    sub_257046318((uint64_t *)a1);
    uint64_t result = sub_256FEA220((uint64_t)v14);
    *(unsigned char *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_257025C90()
{
  return 123;
}

uint64_t sub_257025D04()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 64, 7);
}

uint64_t type metadata accessor for FormattedValue()
{
  return self;
}

unint64_t sub_257025D68()
{
  unint64_t result = qword_269FDD1F0;
  if (!qword_269FDD1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD1F0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormattedValue.StrideCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257025E88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormattedValue.StrideCodingKeys()
{
  return &type metadata for FormattedValue.StrideCodingKeys;
}

unint64_t sub_257025EC4()
{
  unint64_t result = qword_269FDD1F8;
  if (!qword_269FDD1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD1F8);
  }
  return result;
}

unint64_t sub_257025F1C()
{
  unint64_t result = qword_269FDD200;
  if (!qword_269FDD200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD200);
  }
  return result;
}

unint64_t sub_257025F74()
{
  unint64_t result = qword_269FDD208;
  if (!qword_269FDD208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD208);
  }
  return result;
}

uint64_t sub_257025FC8()
{
  return sub_25704B2B0();
}

uint64_t sub_257026014()
{
  return sub_25704A810();
}

uint64_t sub_257026024()
{
  return sub_25704B2B0();
}

uint64_t sub_25702606C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_2570260C0(void *a1@<X8>)
{
  *a1 = 6518885;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_2570260D4()
{
  return 6518885;
}

uint64_t sub_2570260E4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_25702613C(uint64_t a1)
{
  unint64_t v2 = sub_257026728();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_257026178(uint64_t a1)
{
  unint64_t v2 = sub_257026728();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2570261B4(void *a1)
{
  return sub_257026200(a1);
}

uint64_t sub_257026200(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD210);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257026728();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Raise();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v3 + 40) = sub_257034AD0((uint64_t)v8);
    *(void *)(v3 + 48) = v11;
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v13);
    uint64_t v9 = sub_257046164(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

uint64_t sub_2570263DC()
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  char *v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void v19[5];
  uint64_t v20[4];

  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = MEMORY[0x25A2B2020](v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  v8(v6, v7, ObjectType, v4);
  swift_unknownObjectRelease();
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v10 = swift_getObjectType();
  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 64);
  swift_unknownObjectRetain();
  v11(v19, v10, v9);
  uint64_t result = swift_unknownObjectRelease();
  if (!v2)
  {
    sub_257046318(v20);
    sub_256FEA220((uint64_t)v19);
    sub_256FB118C((uint64_t)v20, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC968);
    if (!swift_dynamicCast())
    {
      if (_s8Morpheus0A5UtilsO5isNilySbypFZ_0((uint64_t)v20))
      {
        sub_256F92DE8();
        swift_allocError();
        uint64_t v14 = 22;
      }
      else
      {
        if (qword_269FDC650 != -1) {
          swift_once();
        }
        uint64_t v15 = sub_25704A550();
        __swift_project_value_buffer(v15, (uint64_t)qword_269FDD648);
        swift_retain();
        unint64_t v16 = sub_25704A530();
        unint64_t v17 = sub_25704AC60();
        if (os_log_type_enabled(v16, v17))
        {
          int64_t v18 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)int64_t v18 = 134217984;
          v19[0] = *(void *)(v3 + 16);
          sub_25704AC90();
          swift_release();
          _os_log_impl(&dword_256D65000, v16, v17, "Raise> Invalid exc. lino %ld", v18, 0xCu);
          MEMORY[0x25A2B1FA0](v18, -1, -1);
        }
        else
        {

          swift_release();
        }
        sub_256F92DE8();
        swift_allocError();
        uint64_t v14 = 23;
      }
      void *v13 = v14;
    }
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  return result;
}

uint64_t sub_257026694()
{
  return 0;
}

uint64_t type metadata accessor for Raise()
{
  return self;
}

unint64_t sub_257026728()
{
  unint64_t result = qword_269FDD218;
  if (!qword_269FDD218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD218);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Raise.StrideCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x257026818);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Raise.StrideCodingKeys()
{
  return &type metadata for Raise.StrideCodingKeys;
}

unint64_t sub_257026854()
{
  unint64_t result = qword_269FDD220;
  if (!qword_269FDD220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD220);
  }
  return result;
}

unint64_t sub_2570268AC()
{
  unint64_t result = qword_269FDD228;
  if (!qword_269FDD228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD228);
  }
  return result;
}

unint64_t sub_257026904()
{
  unint64_t result = qword_269FDD230;
  if (!qword_269FDD230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD230);
  }
  return result;
}

uint64_t SharedMutableArray<A>.isIn(value:)(uint64_t a1)
{
  sub_256FB118C(a1, (uint64_t)&v21);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD0F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    sub_256FB11E8((uint64_t)&v24, &qword_269FDD0F8);
    goto LABEL_9;
  }
  sub_256FA81EC(&v24, (uint64_t)v27);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
LABEL_9:
    char v5 = 0;
    return v5 & 1;
  }
  uint64_t v4 = v2 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_256FB118C(v4, (uint64_t)v20);
    if (swift_dynamicCast()) {
      break;
    }
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    sub_256FB11E8((uint64_t)&v21, &qword_269FDD0F8);
    v4 += 32;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  sub_256FA81EC(&v21, (uint64_t)&v24);
  uint64_t v7 = v28;
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(v27, v28);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  sub_25701D714((uint64_t)v10, v7, (uint64_t *)&v21);
  uint64_t v12 = *((void *)&v25 + 1);
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v20[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  sub_25701D714((uint64_t)v15, v12, v20);
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  __swift_project_boxed_opaque_existential_1(&v21, *((uint64_t *)&v22 + 1));
  char v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v20, v17, v18);
  sub_257020EA4((uint64_t)v20);
  sub_257020EA4((uint64_t)&v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return v5 & 1;
}

uint64_t sub_257026C70(uint64_t a1)
{
  return SharedMutableArray<A>.isIn(value:)(a1) & 1;
}

uint64_t String.isIn(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_256FB118C(a1, (uint64_t)v7);
  if (swift_dynamicCast())
  {
    v7[0] = a2;
    v7[1] = a3;
    sub_256FC9544();
    char v5 = sub_25704AD00();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_257026D44(uint64_t a1)
{
  return String.isIn(value:)(a1, *v1, v1[1]);
}

uint64_t SharedMutableDict<A>.isIn(value:)(uint64_t a1)
{
  sub_256FB118C(a1, (uint64_t)v8);
  if (swift_dynamicCast())
  {
    v9[0] = v5;
    v9[1] = v6;
    uint64_t v10 = v7;
    swift_beginAccess();
    if (*(void *)(*(void *)(v1 + 16) + 16))
    {
      swift_bridgeObjectRetain();
      sub_256FED0C8((uint64_t)v9);
      char v3 = v2;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v3 = 0;
    }
    sub_256F9AC98((uint64_t)v9);
  }
  else
  {
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    sub_256FB11E8((uint64_t)&v5, &qword_269FDC6F0);
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_257026E24(uint64_t a1)
{
  return SharedMutableDict<A>.isIn(value:)(a1) & 1;
}

uint64_t dispatch thunk of MembershipTestable.isIn(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t SharedMutableDict.anyDict.getter()
{
  sub_256FF0AEC();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_25704AFE0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_257026EE4()
{
  return SharedMutableDict.anyDict.getter();
}

uint64_t Dictionary.anyDict.getter()
{
  return sub_25704AFE0();
}

uint64_t sub_257026F2C()
{
  return Dictionary.anyDict.getter();
}

uint64_t dispatch thunk of AnyDictContainer.anyDict.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t Negatable<>.negation()()
{
  return sub_25704AE80();
}

void sub_257026F80(void *a1@<X8>)
{
  if (__OFSUB__(0, *v1)) {
    __break(1u);
  }
  else {
    *a1 = -*v1;
  }
}

float sub_257026F98@<S0>(float *a1@<X8>)
{
  float result = -*v1;
  *a1 = result;
  return result;
}

double sub_257026FA8@<D0>(double *a1@<X8>)
{
  double result = -*v1;
  *a1 = result;
  return result;
}

void sub_257026FB8(_DWORD *a1@<X8>)
{
  if (__OFSUB__(0, *v1)) {
    __break(1u);
  }
  else {
    *a1 = -*v1;
  }
}

uint64_t dispatch thunk of Negatable.negation()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_257026FE4(char *a1, char *a2)
{
  return sub_256FF3120(*a1, *a2);
}

uint64_t sub_257026FF0()
{
  return sub_25704B2B0();
}

uint64_t sub_257027068()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2570270CC()
{
  return sub_25704B2B0();
}

uint64_t sub_257027140@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_2570271A0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7894115;
  if (!*v1) {
    uint64_t v2 = 0x7961727261;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2570271D4()
{
  if (*v0) {
    return 7894115;
  }
  else {
    return 0x7961727261;
  }
}

uint64_t sub_257027204@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_257027268(uint64_t a1)
{
  unint64_t v2 = sub_25702795C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2570272A4(uint64_t a1)
{
  unint64_t v2 = sub_25702795C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2570272E0(void *a1)
{
  return sub_25702732C(a1);
}

uint64_t sub_25702732C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD238);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25702795C();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for MorpheusArray();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v1 + 40) = sub_25703FC74(v8, 0);
    char v12 = 1;
    sub_256FF6888();
    sub_25704B130();
    *(unsigned char *)(v1 + 48) = v11[0];
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v11);
    uint64_t v3 = sub_257046164(v11);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_257027584@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_2570276C0(v4, v1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (!v2)
  {
    if (*(unsigned char *)(v1 + 48))
    {
      if (*(unsigned char *)(v1 + 48) == 1)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC890);
        *(void *)(a1 + 24) = result;
        *(void *)a1 = v5;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
      }
    }
    else
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAE8);
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v5;
      *(void *)(a1 + 24) = v7;
      *(void *)a1 = result;
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_25702765C()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 49, 7);
}

uint64_t type metadata accessor for MorpheusArray()
{
  return self;
}

uint64_t sub_2570276C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    sub_256F90A58(0, v4, 0);
    uint64_t v5 = v28;
    uint64_t v19 = a2 + 24;
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      int64_t v20 = v4;
      uint64_t v21 = v5;
      uint64_t v9 = *i;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = MEMORY[0x25A2B2020](v19);
      uint64_t v5 = a2;
      uint64_t v12 = *(void *)(a2 + 32);
      uint64_t v13 = v3;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain();
      v14(v11, v12, ObjectType, v9);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 64))(v25, ObjectType, v9);
      uint64_t v3 = v13;
      if (v13) {
        break;
      }
      sub_256FF43DC((uint64_t)v25, (uint64_t)v22);
      if (v23)
      {
        sub_256FEA220((uint64_t)v22);
        sub_256FF43DC((uint64_t)v25, (uint64_t)v22);
        a2 = v5;
        if (v23 == 1)
        {
          sub_256FEEC3C((uint64_t)v22, (uint64_t)v24);
          sub_25702BB34((uint64_t)v24, v26);
          sub_256FF0EF4((uint64_t)v24);
        }
        else
        {
          sub_256FEA220((uint64_t)v22);
          uint64_t v26[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
          uint64_t v15 = swift_allocObject();
          v26[0] = v15;
          *(_OWORD *)(v15 + 16) = 0u;
          *(_OWORD *)(v15 + 32) = 0u;
        }
      }
      else
      {
        sub_256FEEC3C((uint64_t)v22, (uint64_t)v24);
        sub_25702BB34((uint64_t)v24, v26);
        sub_256FF0EF4((uint64_t)v24);
        a2 = v5;
      }
      uint64_t v5 = v21;
      sub_256FEA220((uint64_t)v25);
      sub_25702B5F8((uint64_t)v26, v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      swift_unknownObjectRelease();
      uint64_t v28 = v21;
      unint64_t v17 = *(void *)(v21 + 16);
      unint64_t v16 = *(void *)(v21 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_256F90A58(v16 > 1, v17 + 1, 1);
        uint64_t v5 = v28;
      }
      *(void *)(v5 + 16) = v17 + 1;
      sub_256F9ABF4(v27, (_OWORD *)(v5 + 32 * v17 + 32));
      int64_t v4 = v20 - 1;
      if (v20 == 1) {
        return v5;
      }
    }
    swift_release();
    swift_unknownObjectRelease();
  }
  return v5;
}

uint64_t sub_25702791C()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t sub_25702795C()
{
  unint64_t result = qword_269FDD240;
  if (!qword_269FDD240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD240);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MorpheusArray.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257027A7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MorpheusArray.CodingKeys()
{
  return &type metadata for MorpheusArray.CodingKeys;
}

unint64_t sub_257027AB8()
{
  unint64_t result = qword_269FDD248;
  if (!qword_269FDD248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD248);
  }
  return result;
}

unint64_t sub_257027B10()
{
  unint64_t result = qword_269FDD250;
  if (!qword_269FDD250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD250);
  }
  return result;
}

unint64_t sub_257027B68()
{
  unint64_t result = qword_269FDD258[0];
  if (!qword_269FDD258[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269FDD258);
  }
  return result;
}

uint64_t sub_257027BBC(unint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_257027D64(0x7FFFFFFFFFFFFFFFLL, 1, a1, a2);
  int64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_256F909F0(0, v5, 0);
    unsigned int v6 = (uint64_t *)(v4 + 56);
    do
    {
      uint64_t v7 = *(v6 - 3);
      uint64_t v8 = *(v6 - 2);
      uint64_t v9 = *(v6 - 1);
      uint64_t v10 = *v6;
      swift_bridgeObjectRetain();
      MEMORY[0x25A2B0870](v7, v8, v9, v10);
      sub_25704A850();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v12 = *(void *)(v16 + 16);
      unint64_t v11 = *(void *)(v16 + 24);
      if (v12 >= v11 >> 1) {
        sub_256F909F0(v11 > 1, v12 + 1, 1);
      }
      *(void *)(v16 + 16) = v12 + 1;
      uint64_t v13 = v16 + 16 * v12;
      *(void *)(v13 + 32) = 9;
      *(void *)(v13 + 40) = 0xE100000000000000;
      v6 += 4;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC970);
  sub_256FE0A48();
  uint64_t v14 = sub_25704A6B0();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_257027D64(uint64_t a1, char a2, unint64_t a3, unint64_t a4)
{
  if (a1 < 0)
  {
LABEL_50:
    uint64_t result = sub_25704AFC0();
    __break(1u);
  }
  else
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = MEMORY[0x263F8EE78];
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v9;
    *(void *)(v9 + 16) = 15;
    uint64_t v11 = HIBYTE(a4) & 0xF;
    if (a1)
    {
      uint64_t v12 = (a4 & 0x2000000000000000) != 0 ? HIBYTE(a4) & 0xF : a3 & 0xFFFFFFFFFFFFLL;
      if (v12)
      {
        uint64_t v41 = a1;
        unint64_t v45 = 4 * v12;
        uint64_t v13 = (void *)MEMORY[0x263F8EE78];
        unint64_t v14 = 15;
        unint64_t v15 = 15;
        uint64_t v42 = (void *)a3;
        uint64_t v43 = v9;
        while (1)
        {
          uint64_t v16 = sub_25704A900();
          unint64_t v18 = v17;
          if (!((v17 & 0x2000000000000000) != 0 ? HIBYTE(v17) & 0xF : v16 & 0xFFFFFFFFFFFFLL)) {
            break;
          }
          if ((v17 & 0x1000000000000000) != 0)
          {
            uint64_t v20 = sub_25704ADE0();
          }
          else
          {
            if ((v17 & 0x2000000000000000) == 0 && (v16 & 0x1000000000000000) == 0) {
              sub_25704AE90();
            }
            uint64_t v20 = sub_25704AEA0();
          }
          uint64_t v4 = v20;
          swift_bridgeObjectRelease();
          if ((v4 - 14) > 0xFFFFFFFB || (v4 - 8232) < 2 || v4 == 133)
          {
            if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
            {
              unint64_t v14 = sub_25704A830();
              *(void *)(v10 + 16) = v14;
              unint64_t v15 = v14;
            }
            else
            {
              if (v14 >> 14 < v15 >> 14) {
                goto LABEL_49;
              }
              unint64_t v21 = a4;
              uint64_t v22 = sub_25704A920();
              uint64_t v24 = v23;
              uint64_t v26 = v25;
              uint64_t v4 = v27;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v13 = sub_256FA5B34(0, v13[2] + 1, 1, v13);
              }
              uint64_t v28 = v13;
              unint64_t v29 = v13[2];
              char v30 = v28;
              unint64_t v31 = v28[3];
              if (v29 >= v31 >> 1) {
                char v30 = sub_256FA5B34((void *)(v31 > 1), v29 + 1, 1, v30);
              }
              v30[2] = v29 + 1;
              unint64_t v32 = &v30[4 * v29];
              uint64_t v13 = v30;
              void v32[4] = v22;
              v32[5] = v24;
              v32[6] = v26;
              v32[7] = v4;
              *(void *)(v8 + 16) = v30;
              a4 = v21;
              a3 = (unint64_t)v42;
              unint64_t v15 = sub_25704A830();
              uint64_t v10 = v43;
              *(void *)(v43 + 16) = v15;
              unint64_t v14 = v15;
              if (v13[2] == v41)
              {
LABEL_38:
                if (v45 == v15 >> 14 && (a2 & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_46;
                }
                if (v45 < v15 >> 14)
                {
LABEL_49:
                  sub_25704AFC0();
                  __break(1u);
                  goto LABEL_50;
                }
                a3 = (unint64_t)v13;
                unint64_t v15 = sub_25704A920();
                unint64_t v18 = v34;
                uint64_t v13 = v35;
                uint64_t v4 = v36;
                swift_bridgeObjectRelease();
                if (swift_isUniquelyReferenced_nonNull_native())
                {
LABEL_43:
                  unint64_t v38 = *(void *)(a3 + 16);
                  unint64_t v37 = *(void *)(a3 + 24);
                  if (v38 >= v37 >> 1) {
                    a3 = (unint64_t)sub_256FA5B34((void *)(v37 > 1), v38 + 1, 1, (void *)a3);
                  }
                  *(void *)(a3 + 16) = v38 + 1;
                  uint64_t v39 = (void *)(a3 + 32 * v38);
                  v39[4] = v15;
                  v39[5] = v18;
                  v39[6] = v13;
                  v39[7] = v4;
                  uint64_t v13 = (void *)a3;
                  *(void *)(v8 + 16) = a3;
                  goto LABEL_46;
                }
LABEL_48:
                a3 = (unint64_t)sub_256FA5B34(0, *(void *)(a3 + 16) + 1, 1, (void *)a3);
                goto LABEL_43;
              }
            }
          }
          else
          {
            unint64_t v14 = sub_25704A830();
          }
          if (v45 == v14 >> 14) {
            goto LABEL_38;
          }
        }
        __break(1u);
        goto LABEL_48;
      }
    }
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v33 = 7;
    if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0) {
      uint64_t v33 = 11;
    }
    sub_257028238(v33 | (v11 << 16), v9, a2 & 1, v8);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)(v8 + 16);
LABEL_46:
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_257028238(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = sub_25704A920();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_256FA5B34(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_256FA5B34((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    void v14[2] = v17 + 1;
    unint64_t v18 = &v14[4 * v17];
    void v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = sub_25704AFC0();
  __break(1u);
  return result;
}

uint64_t sub_257028394(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_25704A8E0();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x25A2B0930](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_257028410()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_257028448()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t SharedMutableDict.__allocating_init(dict:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  SharedMutableDict.init(dict:)(a1);
  return v2;
}

uint64_t SharedMutableDict.init(dict:)(uint64_t a1)
{
  *(void *)(v1 + 16) = sub_25704A560();
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  swift_bridgeObjectRelease();
  return v1;
}

double sub_25702851C@<D0>(uint64_t a1@<X8>)
{
  sub_25702A090(v5);
  uint64_t v2 = sub_25704A620();
  (*(void (**)(unsigned char *, _OWORD *, uint64_t))(*(void *)(v2 - 8) + 32))(v7, v5, v2);
  sub_25702A104((uint64_t)v7);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_2570285D0()
{
  return sub_25704ABB0();
}

uint64_t _s8Morpheus17SharedMutableDictC3lenSiyF_0()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v0 = _sSD8MorpheusE3lenSiyF_0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2570286FC()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_25704A600();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2570287BC()
{
  return sub_2570287EC(MEMORY[0x263F8CFC8]);
}

uint64_t sub_2570287D4()
{
  return sub_2570287EC(MEMORY[0x263F8D058]);
}

uint64_t sub_2570287EC(uint64_t (*a1)(uint64_t, void, uint64_t, void))
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = a1(v5, MEMORY[0x263F8DB68], v4, MEMORY[0x263F8DB70]);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_257028890()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_257028954()
{
  swift_beginAccess();
  nullsub_1(*(void *)(v0 + 16));
  sub_25704A5E0();
  swift_getWitnessTable();
  return sub_25704A9E0() & 1;
}

uint64_t sub_257028A2C()
{
  return swift_endAccess();
}

uint64_t sub_257028AB8(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = v1[2];
  uint64_t v5 = *(void *)(v3 + 80);
  swift_bridgeObjectRetain();
  MEMORY[0x25A2B06F0](a1, v4, MEMORY[0x263F8DB68], v5, MEMORY[0x263F8DB70]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_257028B58(uint64_t a1, uint64_t a2)
{
  sub_25702A350(a1, a2);
  uint64_t v3 = sub_25704AC70();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(a1, v3);
}

void (*sub_257028BE0(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[5] = v2;
  uint64_t v6 = sub_25704AC70();
  v5[6] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[7] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[8] = malloc(v8);
  v5[9] = malloc(v8);
  sub_256F9AC04(a2, (uint64_t)v5);
  sub_257028AB8(a2);
  return sub_257028CD8;
}

void sub_257028CD8(uint64_t a1, char a2)
{
  uint64_t v2 = *(_OWORD **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    long long v7 = v2[1];
    v9[0] = *v2;
    v9[1] = v7;
    uint64_t v10 = *((void *)v2 + 4);
    sub_25702A350((uint64_t)v3, (uint64_t)v9);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_25702A350(*(void *)(*(void *)a1 + 72), (uint64_t)v2);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t SharedMutableDict.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharedMutableDict.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_257028E2C@<X0>(uint64_t a1@<X8>)
{
  return sub_257028E5C(sub_2570287BC, a1);
}

uint64_t sub_257028E44@<X0>(uint64_t a1@<X8>)
{
  return sub_257028E5C(sub_2570287D4, a1);
}

uint64_t sub_257028E5C@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 & 1;
  return result;
}

void (*sub_257028E94(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  char v5 = (uint64_t *)malloc(0x40uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a3 + 80);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5[4] = TupleTypeMetadata2;
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  v5[5] = v8;
  uint64_t v9 = (char *)malloc(*(void *)(v8 + 64));
  v5[6] = (uint64_t)v9;
  uint64_t v10 = sub_257028FDC(v5);
  uint64_t v12 = v11;
  v5[7] = (uint64_t)v10;
  sub_256F9AC04(v13, (uint64_t)v9);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(&v9[*(int *)(TupleTypeMetadata2 + 48)], v12, v6);
  return sub_256FE01C4;
}

void (*sub_257028FDC(uint64_t *a1))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v3 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(void *)(v3 + 64));
  sub_257028890();
  return sub_256FE034C;
}

uint64_t sub_2570290E4()
{
  type metadata accessor for SharedMutableDict();
  return sub_25704AC10();
}

uint64_t sub_257029140()
{
  type metadata accessor for SharedMutableDict();
  return sub_25704AC00();
}

uint64_t sub_257029190()
{
  return _s8Morpheus17SharedMutableDictC3lenSiyF_0();
}

uint64_t sub_2570291B4()
{
  type metadata accessor for SharedMutableDict();
  return sub_25704ABD0();
}

uint64_t sub_257029220()
{
  type metadata accessor for SharedMutableDict();
  return sub_25704ABC0();
}

uint64_t sub_257029294()
{
  type metadata accessor for SharedMutableDict();
  return sub_25704ABF0();
}

uint64_t sub_2570292F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for SharedMutableDict();
  return sub_257029E20(a1, a2, v7, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

uint64_t sub_257029368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for SharedMutableDict();
  return sub_257029E20(a1, a2, v7, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

uint64_t sub_2570293E0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SharedMutableDict();
  return sub_25702A144(a1, a2);
}

uint64_t sub_25702943C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_2570286FC();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_25702947C(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = sub_2570286FC();
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t result = sub_256F9ACEC(v2, v3, v4);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9 & 1;
  return result;
}

double sub_2570294F8@<D0>(uint64_t a1@<X8>)
{
  sub_25702A090(v5);
  uint64_t v2 = sub_25704A620();
  (*(void (**)(unsigned char *, _OWORD *, uint64_t))(*(void *)(v2 - 8) + 32))(v7, v5, v2);
  sub_25702A104((uint64_t)v7);
  swift_release();
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_2570295A8()
{
  return sub_2570285D0();
}

uint64_t sub_2570295CC()
{
  type metadata accessor for SharedMutableDict();
  swift_getWitnessTable();
  uint64_t v0 = sub_25702A140();
  swift_release();
  return v0;
}

void sub_257029634()
{
  type metadata accessor for SharedMutableDict();
  JUMPOUT(0x25A2B09F0);
}

uint64_t sub_2570296A0()
{
  return sub_25704A980();
}

_OWORD *SharedMutableDict<A>.attribute(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void (*v12)(long long *__return_ptr, void *);
  uint64_t v14;
  unint64_t v15;
  char v16;
  void v17[5];
  long long v18;
  long long v19;

  uint64_t v4 = v3;
  uint64_t v8 = sub_256FF0508();
  swift_beginAccess();
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(void *)(v9 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_256FED050(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    unint64_t v18 = 0u;
    uint64_t v19 = 0u;
    goto LABEL_7;
  }
  uint64_t v12 = *(void (**)(long long *__return_ptr, void *))(*(void *)(v9 + 56) + 16 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12(&v18, v17);
  swift_release();
  if (*((void *)&v19 + 1)) {
    return sub_256F9ABF4(&v18, a3);
  }
LABEL_7:
  swift_bridgeObjectRetain();
  sub_25704ADA0();
  swift_beginAccess();
  unint64_t v14 = *(void *)(v4 + 16);
  if (*(void *)(v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_256FED0C8((uint64_t)v17);
    if (v16)
    {
      sub_256FB118C(*(void *)(v14 + 56) + 32 * v15, (uint64_t)a3);
    }
    else
    {
      *a3 = 0u;
      a3[1] = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  sub_256F9AC98((uint64_t)v17);
  return (_OWORD *)sub_256FB11E8((uint64_t)&v18, &qword_269FDC6E0);
}

uint64_t SharedMutableDict<A>.has(attribute:)(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v14 = a1;
  *((void *)&v14 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_25704ADA0();
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_256FED0C8((uint64_t)v16);
    if (v7)
    {
      sub_256FB118C(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v14);
    }
    else
    {
      long long v14 = 0u;
      long long v15 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
  }
  sub_256F9AC98((uint64_t)v16);
  uint64_t v8 = *((void *)&v15 + 1);
  sub_256FB11E8((uint64_t)&v14, &qword_269FDC6E0);
  if (v8)
  {
    char v9 = 1;
  }
  else
  {
    uint64_t v10 = sub_256FF0508();
    swift_beginAccess();
    uint64_t v11 = *(void *)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v11 + 16))
    {
      swift_bridgeObjectRetain();
      sub_256FED050(a1, a2);
      char v9 = v12;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = 0;
    }
    swift_bridgeObjectRelease();
  }
  return v9 & 1;
}

_OWORD *sub_257029A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return SharedMutableDict<A>.attribute(for:)(a1, a2, a3);
}

uint64_t sub_257029A3C(uint64_t a1, uint64_t a2)
{
  return SharedMutableDict<A>.has(attribute:)(a1, a2) & 1;
}

uint64_t SharedMutableDict<A>.store(key:obj:)(uint64_t a1, uint64_t a2)
{
  sub_256FB118C(a1, (uint64_t)v5);
  if (swift_dynamicCast())
  {
    v10[0] = v7;
    v10[1] = v8;
    uint64_t v11 = v9;
    sub_256F9AC04((uint64_t)v10, (uint64_t)&v7);
    sub_256FB118C(a2, (uint64_t)v6);
    sub_256F9AC04((uint64_t)&v7, (uint64_t)v5);
    sub_25701A578((uint64_t)v6, (uint64_t)v4);
    swift_beginAccess();
    sub_256FEAC24((uint64_t)v4, (uint64_t)v5);
    swift_endAccess();
    sub_256F9AC98((uint64_t)&v7);
    sub_256FB11E8((uint64_t)v6, &qword_269FDC6E0);
    return sub_256F9AC98((uint64_t)v10);
  }
  else
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    return sub_256FB11E8((uint64_t)&v7, &qword_269FDC6F0);
  }
}

uint64_t sub_257029B70(uint64_t a1, uint64_t a2)
{
  return SharedMutableDict<A>.store(key:obj:)(a1, a2);
}

uint64_t SharedMutableDict<A>.description.getter()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_25704A5A0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_257029C20()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_25704A5A0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharedMutableDict<A>.get(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v11);
  if (swift_dynamicCast())
  {
    v12[0] = v8;
    v12[1] = v9;
    uint64_t v13 = v10;
    swift_beginAccess();
    uint64_t v4 = *(void *)(v2 + 16);
    if (*(void *)(v4 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v5 = sub_256FED0C8((uint64_t)v12);
      if (v6)
      {
        sub_256FB118C(*(void *)(v4 + 56) + 32 * v5, (uint64_t)a2);
      }
      else
      {
        *a2 = 0u;
        a2[1] = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      *a2 = 0u;
      a2[1] = 0u;
    }
    return sub_256F9AC98((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    uint64_t result = sub_256FB11E8((uint64_t)&v8, &qword_269FDC6F0);
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_257029DA4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return SharedMutableDict<A>.get(_:)(a1, a2);
}

uint64_t sub_257029DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_257029E20(a1, a2, a3, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

uint64_t sub_257029DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_257029E20(a1, a2, a3, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

uint64_t sub_257029E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  long long v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v18 = (char *)&v22 - v17;
  char v19 = sub_25704A6F0();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_25702A090@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  *a1 = v4;
  uint64_t v9 = *(void *)(v4 + 64);
  uint64_t v7 = v4 + 64;
  uint64_t v8 = v9;
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  a1[1] = v7;
  a1[2] = ~v6;
  a1[3] = 0;
  a1[4] = v5 & v8;
  return result;
}

uint64_t sub_25702A104(uint64_t a1)
{
  return a1;
}

uint64_t sub_25702A138()
{
  return swift_retain();
}

uint64_t sub_25702A144(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_25704AC40();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = sub_25704A6F0();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v9, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v9, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = sub_25704A6F0();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_25702A350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25704AC70();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v9[-v6];
  sub_256F9AC04(a2, (uint64_t)v10);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  swift_beginAccess();
  sub_25704A650();
  sub_25704A680();
  swift_endAccess();
  return sub_256F9AC98(a2);
}

uint64_t sub_25702A4A0()
{
  return swift_getWitnessTable();
}

uint64_t sub_25702A4BC()
{
  return swift_getWitnessTable();
}

uint64_t sub_25702A4D8@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_256FF0AEC();
  return swift_bridgeObjectRetain();
}

uint64_t sub_25702A514()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return sub_256FEEEC0(v0);
}

uint64_t sub_25702A540()
{
  return 8;
}

void *sub_25702A54C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_25702A558(uint64_t a1, uint64_t a2)
{
  return sub_257028AB8(a2);
}

uint64_t sub_25702A580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_256F9AC04(a3, (uint64_t)v5);
  return sub_25702A350(a1, (uint64_t)v5);
}

uint64_t sub_25702A5D0()
{
  return 8;
}

uint64_t type metadata accessor for SharedMutableDict()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for SharedMutableDict(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SharedMutableDict);
}

uint64_t dispatch thunk of SharedMutableDict.dict.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SharedMutableDict.__allocating_init(dict:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SharedMutableDict.makeIterator()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SharedMutableDict.underestimatedCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SharedMutableDict.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SharedMutableDict.index(after:)(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 152))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of SharedMutableDict.startIndex.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SharedMutableDict.endIndex.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SharedMutableDict.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 176))(a1, a2, a3, a4, a5 & 1);
}

uint64_t dispatch thunk of SharedMutableDict.contains(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SharedMutableDict.clear()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SharedMutableDict.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SharedMutableDict.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SharedMutableDict.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t sub_25702A860(char *a1, char *a2)
{
  return sub_256FF1EE4(*a1, *a2);
}

uint64_t sub_25702A86C()
{
  return sub_25704B2B0();
}

uint64_t sub_25702A8E4()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25702A948()
{
  return sub_25704B2B0();
}

uint64_t sub_25702A9BC@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_25702AA1C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7894115;
  if (!*v1) {
    uint64_t v2 = 0x65756C6176;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_25702AA50()
{
  if (*v0) {
    return 7894115;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t sub_25702AA80@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_25702AAE4(uint64_t a1)
{
  unint64_t v2 = sub_25702AFF0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25702AB20(uint64_t a1)
{
  unint64_t v2 = sub_25702AFF0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25702AB5C(void *a1)
{
  return sub_25702ABA8(a1);
}

uint64_t sub_25702ABA8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD2E0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25702AFF0();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Starred();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v1 + 40) = sub_257036C30((uint64_t)v8, 0);
    *(void *)(v1 + 48) = v10;
    char v13 = 1;
    sub_256FF6888();
    sub_25704B130();
    *(unsigned char *)(v1 + 56) = v12[0];
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_25702AE00@<X0>(uint64_t a1@<X8>)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  void v14[5];
  _OWORD v15[2];

  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = MEMORY[0x25A2B2020](v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  uint64_t v10 = *(void *)(v1 + 48);
  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 64);
  swift_unknownObjectRetain();
  v12(v14, v11, v10);
  uint64_t result = swift_unknownObjectRelease();
  if (!v3)
  {
    sub_257042F14(v15);
    sub_256FEA220((uint64_t)v14);
    sub_25702BB34((uint64_t)v15, (uint64_t *)a1);
    uint64_t result = sub_256FF0EF4((uint64_t)v15);
    *(unsigned char *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_25702AF24()
{
  return 0;
}

uint64_t sub_25702AF8C()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 57, 7);
}

uint64_t type metadata accessor for Starred()
{
  return self;
}

unint64_t sub_25702AFF0()
{
  unint64_t result = qword_269FDD2E8;
  if (!qword_269FDD2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD2E8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Starred.StarredCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25702B110);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Starred.StarredCodingKeys()
{
  return &type metadata for Starred.StarredCodingKeys;
}

unint64_t sub_25702B14C()
{
  unint64_t result = qword_269FDD2F0;
  if (!qword_269FDD2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD2F0);
  }
  return result;
}

unint64_t sub_25702B1A4()
{
  unint64_t result = qword_269FDD2F8;
  if (!qword_269FDD2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD2F8);
  }
  return result;
}

unint64_t sub_25702B1FC()
{
  unint64_t result = qword_269FDD300;
  if (!qword_269FDD300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD300);
  }
  return result;
}

void *sub_25702B250(char a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 7;
  unint64_t result = sub_2570049DC(a3, v6);
  if (!v3)
  {
    switch(a1)
    {
      case 1:
        mlx_default_device();
      case 2:
        mlx_default_device();
      case 3:
        mlx_default_device();
      case 4:
        mlx_default_device();
      case 5:
        mlx_default_device();
      default:
        mlx_default_device();
    }
  }
  return result;
}

uint64_t sub_25702B5F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v37 = a2;
  uint64_t v3 = sub_25704B2D0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v32 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD308);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD310);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v34 = (uint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  long long v15 = (char *)&v32 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v18 = sub_25704B300();
  uint64_t v35 = *(void *)(v18 - 8);
  uint64_t v36 = v18;
  MEMORY[0x270FA5388](v18);
  char v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)&v42[0] + 1) = MEMORY[0x263F8EE58] + 8;
  *(void *)&long long v41 = swift_allocObject();
  uint64_t v33 = a1;
  sub_256FB118C(a1, v41 + 16);
  sub_25704B2C0();
  sub_25704B2E0();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v15, *MEMORY[0x263F8E810], v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v3);
  uint64_t v21 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_256FEED0C((uint64_t)v17, (uint64_t)v9, &qword_269FDD310);
  sub_256FEED0C((uint64_t)v15, v21, &qword_269FDD310);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v22((uint64_t)v9, 1, v3) == 1)
  {
    sub_256FB11E8((uint64_t)v15, &qword_269FDD310);
    sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
    if (v22(v21, 1, v3) == 1)
    {
      sub_256FB11E8((uint64_t)v9, &qword_269FDD310);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v23 = &qword_269FDD308;
    uint64_t v24 = (long long *)v9;
LABEL_11:
    sub_256FB11E8((uint64_t)v24, v23);
    goto LABEL_12;
  }
  sub_256FEED0C((uint64_t)v9, v34, &qword_269FDD310);
  if (v22(v21, 1, v3) == 1)
  {
    sub_256FB11E8((uint64_t)v15, &qword_269FDD310);
    sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v34, v3);
    goto LABEL_6;
  }
  uint64_t v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v32, v21, v3);
  uint64_t v26 = v34;
  char v27 = sub_25704A740();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v4 + 8);
  v28(v25, v3);
  sub_256FB11E8((uint64_t)v15, &qword_269FDD310);
  sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
  v28((char *)v26, v3);
  sub_256FB11E8((uint64_t)v9, &qword_269FDD310);
  if ((v27 & 1) == 0)
  {
LABEL_12:
    unint64_t v29 = v37;
    v37[3] = MEMORY[0x263F8EE58] + 8;
    uint64_t v30 = swift_allocObject();
    *unint64_t v29 = v30;
    sub_256FB118C(v33, v30 + 16);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v20, v36);
  }
LABEL_8:
  sub_25704B2F0();
  sub_25702DD14(&v38);
  swift_release();
  if (!v40)
  {
    uint64_t v23 = (uint64_t *)&unk_269FDD318;
    uint64_t v24 = &v38;
    goto LABEL_11;
  }
  long long v41 = v38;
  sub_256F9ABF4(&v39, v42);
  sub_25702B5F8(v42);
  sub_256FB11E8((uint64_t)&v41, &qword_269FDD320);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v20, v36);
}

uint64_t sub_25702BB34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v39 = a2;
  uint64_t v3 = sub_25704B2D0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v33 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD308);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD310);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v36 = (uint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  long long v15 = (char *)&v32 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v18 = sub_25704B300();
  uint64_t v37 = *(void *)(v18 - 8);
  uint64_t v38 = v18;
  MEMORY[0x270FA5388](v18);
  char v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
  *((void *)&v44[0] + 1) = v34;
  *(void *)&long long v43 = swift_allocObject();
  uint64_t v35 = a1;
  sub_256FEED0C(a1, v43 + 16, &qword_269FDC6E0);
  sub_25704B2C0();
  sub_25704B2E0();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v15, *MEMORY[0x263F8E810], v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v3);
  uint64_t v21 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_256FEED0C((uint64_t)v17, (uint64_t)v9, &qword_269FDD310);
  sub_256FEED0C((uint64_t)v15, v21, &qword_269FDD310);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v22((uint64_t)v9, 1, v3) == 1)
  {
    sub_256FB11E8((uint64_t)v15, &qword_269FDD310);
    sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
    if (v22(v21, 1, v3) == 1)
    {
      sub_256FB11E8((uint64_t)v9, &qword_269FDD310);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v23 = &qword_269FDD308;
    uint64_t v24 = (long long *)v9;
LABEL_11:
    sub_256FB11E8((uint64_t)v24, v23);
    goto LABEL_12;
  }
  sub_256FEED0C((uint64_t)v9, v36, &qword_269FDD310);
  if (v22(v21, 1, v3) == 1)
  {
    sub_256FB11E8((uint64_t)v15, &qword_269FDD310);
    sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v36, v3);
    goto LABEL_6;
  }
  uint64_t v25 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v33, v21, v3);
  uint64_t v26 = v36;
  char v27 = sub_25704A740();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v4 + 8);
  v28(v25, v3);
  sub_256FB11E8((uint64_t)v15, &qword_269FDD310);
  sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
  v28((char *)v26, v3);
  sub_256FB11E8((uint64_t)v9, &qword_269FDD310);
  if ((v27 & 1) == 0)
  {
LABEL_12:
    unint64_t v29 = v39;
    v39[3] = v34;
    uint64_t v30 = swift_allocObject();
    *unint64_t v29 = v30;
    sub_256FEED0C(v35, v30 + 16, &qword_269FDC6E0);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v20, v38);
  }
LABEL_8:
  sub_25704B2F0();
  sub_25702DD14(&v40);
  swift_release();
  if (!v42)
  {
    uint64_t v23 = (uint64_t *)&unk_269FDD318;
    uint64_t v24 = &v40;
    goto LABEL_11;
  }
  long long v43 = v40;
  sub_256F9ABF4(&v41, v44);
  sub_25702B5F8((uint64_t)v44, v39);
  sub_256FB11E8((uint64_t)&v43, &qword_269FDD320);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v20, v38);
}

uint64_t sub_25702C07C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v40 = a2;
  uint64_t v3 = sub_25704B2D0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v34 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD308);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD310);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v37 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  long long v15 = (char *)&v33 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v18 = sub_25704B300();
  uint64_t v38 = *(void *)(v18 - 8);
  uint64_t v39 = v18;
  MEMORY[0x270FA5388](v18);
  char v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD338);
  uint64_t v36 = a1;
  *((void *)&v45[0] + 1) = v35;
  *(void *)&long long v44 = a1;
  swift_retain();
  sub_25704B2C0();
  sub_25704B2E0();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v15, *MEMORY[0x263F8E810], v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v3);
  uint64_t v21 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_256FEED0C((uint64_t)v17, (uint64_t)v9, &qword_269FDD310);
  sub_256FEED0C((uint64_t)v15, v21, &qword_269FDD310);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v22((uint64_t)v9, 1, v3) == 1)
  {
    sub_256FB11E8((uint64_t)v15, &qword_269FDD310);
    sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
    if (v22(v21, 1, v3) == 1)
    {
      sub_256FB11E8((uint64_t)v9, &qword_269FDD310);
LABEL_8:
      sub_25704B2F0();
      sub_25702DD14(&v41);
      swift_release();
      if (v43)
      {
        long long v44 = v41;
        sub_256F9ABF4(&v42, v45);
        sub_25702B5F8((uint64_t)v45, v40);
        sub_256FB11E8((uint64_t)&v44, &qword_269FDD320);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v20, v39);
      }
      uint64_t v23 = (uint64_t *)&unk_269FDD318;
      uint64_t v24 = &v41;
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v23 = &qword_269FDD308;
    uint64_t v24 = (long long *)v9;
LABEL_11:
    sub_256FB11E8((uint64_t)v24, v23);
    goto LABEL_12;
  }
  sub_256FEED0C((uint64_t)v9, v37, &qword_269FDD310);
  if (v22(v21, 1, v3) == 1)
  {
    sub_256FB11E8((uint64_t)v15, &qword_269FDD310);
    sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v37, v3);
    goto LABEL_6;
  }
  uint64_t v25 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v34, v21, v3);
  uint64_t v26 = v37;
  char v27 = sub_25704A740();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v4 + 8);
  v28(v25, v3);
  sub_256FB11E8((uint64_t)v15, &qword_269FDD310);
  sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
  v28((char *)v26, v3);
  sub_256FB11E8((uint64_t)v9, &qword_269FDD310);
  if (v27) {
    goto LABEL_8;
  }
LABEL_12:
  uint64_t v30 = v40;
  uint64_t v31 = v36;
  v40[3] = v35;
  *uint64_t v30 = v31;
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v38 + 8);
  swift_retain();
  return v32(v20, v39);
}

uint64_t static MorpheusUtils.unwrap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v5 = sub_25704B2D0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD308);
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD310);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v44 = (uint64_t)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v38 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = sub_25704B300();
  uint64_t v45 = *(void *)(v20 - 8);
  uint64_t v46 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)&v52[0] + 1) = a2;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v51);
  uint64_t v24 = *(void *)(a2 - 8);
  uint64_t v25 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v40 = v24 + 16;
  long long v41 = v25;
  v25(boxed_opaque_existential_0, a1, a2);
  sub_25704B2C0();
  sub_25704B2E0();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v17, *MEMORY[0x263F8E810], v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  uint64_t v26 = (uint64_t)&v11[*(int *)(v9 + 56)];
  sub_256FEED0C((uint64_t)v19, (uint64_t)v11, &qword_269FDD310);
  sub_256FEED0C((uint64_t)v17, v26, &qword_269FDD310);
  char v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v27((uint64_t)v11, 1, v5) == 1)
  {
    sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
    sub_256FB11E8((uint64_t)v19, &qword_269FDD310);
    if (v27(v26, 1, v5) == 1)
    {
      sub_256FB11E8((uint64_t)v11, &qword_269FDD310);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v28 = &qword_269FDD308;
    unint64_t v29 = (long long *)v11;
LABEL_11:
    sub_256FB11E8((uint64_t)v29, v28);
    goto LABEL_12;
  }
  sub_256FEED0C((uint64_t)v11, v44, &qword_269FDD310);
  if (v27(v26, 1, v5) == 1)
  {
    sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
    sub_256FB11E8((uint64_t)v19, &qword_269FDD310);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v44, v5);
    goto LABEL_6;
  }
  uint64_t v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v39, v26, v5);
  uint64_t v31 = v44;
  char v32 = sub_25704A740();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v6 + 8);
  v33(v30, v5);
  sub_256FB11E8((uint64_t)v17, &qword_269FDD310);
  sub_256FB11E8((uint64_t)v19, &qword_269FDD310);
  v33((char *)v31, v5);
  sub_256FB11E8((uint64_t)v11, &qword_269FDD310);
  if ((v32 & 1) == 0)
  {
LABEL_12:
    uint64_t v34 = v47;
    uint64_t v35 = v43;
    v47[3] = v43;
    uint64_t v36 = __swift_allocate_boxed_opaque_existential_0(v34);
    v41(v36, v42, v35);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v22, v46);
  }
LABEL_8:
  sub_25704B2F0();
  sub_25702DD14(&v48);
  swift_release();
  if (!v50)
  {
    uint64_t v28 = (uint64_t *)&unk_269FDD318;
    unint64_t v29 = &v48;
    goto LABEL_11;
  }
  long long v51 = v48;
  sub_256F9ABF4(&v49, v52);
  sub_25702B5F8((uint64_t)v52, v47);
  sub_256FB11E8((uint64_t)&v51, &qword_269FDD320);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v22, v46);
}

uint64_t static MorpheusUtils.getShape(_:)(uint64_t a1)
{
  sub_256FB118C(a1, (uint64_t)&v36);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if (!swift_dynamicCast())
  {
    uint64_t v35 = 0;
    memset(v34, 0, sizeof(v34));
    sub_256FB11E8((uint64_t)v34, &qword_269FDCAE0);
    return MEMORY[0x263F8EE78];
  }
  sub_256FA81EC(v34, (uint64_t)v37);
  uint64_t v2 = v38;
  uint64_t v3 = v39;
  __swift_project_boxed_opaque_existential_1(v37, v38);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  int64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v36 = (void *)MEMORY[0x263F8EE78];
    sub_256F90A98(0, v5, 0);
    uint64_t v6 = v4 + 32;
    int64_t v7 = v5;
    while (1)
    {
      sub_256FB118C(v6, (uint64_t)v34);
      uint64_t v8 = static MorpheusUtils.getShape(_:)(v34);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      if (v1) {
        break;
      }
      uint64_t v9 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256F90A98(0, v9[2] + 1, 1);
        uint64_t v9 = v36;
      }
      unint64_t v11 = v9[2];
      unint64_t v10 = v9[3];
      unint64_t v12 = v11 + 1;
      if (v11 >= v10 >> 1)
      {
        sub_256F90A98(v10 > 1, v11 + 1, 1);
        uint64_t v9 = v36;
      }
      _OWORD v9[2] = v12;
      v9[v11 + 4] = v8;
      v6 += 32;
      if (!--v7) {
        goto LABEL_13;
      }
    }
    uint64_t v13 = v36;
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_36;
  }
  uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_13:
  unint64_t v14 = v12 != 0;
  if (v12 != v14)
  {
    uint64_t v18 = v9 + 4;
    while (1)
    {
      if (v14 >= v12)
      {
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v19 = (void *)v18[v14];
      uint64_t v20 = (void *)*v18;
      uint64_t v21 = v19[2];
      if (v21 != *(void *)(*v18 + 16)) {
        break;
      }
      if (v21) {
        BOOL v22 = v19 == v20;
      }
      else {
        BOOL v22 = 1;
      }
      if (!v22)
      {
        if (v19[4] != v20[4]) {
          break;
        }
        uint64_t v23 = v21 - 1;
        if (v23)
        {
          uint64_t v24 = v19 + 5;
          uint64_t v25 = v20 + 5;
          do
          {
            uint64_t v27 = *v24++;
            uint64_t v26 = v27;
            uint64_t v28 = *v25++;
            if (v26 != v28) {
              goto LABEL_32;
            }
          }
          while (--v23);
        }
      }
      if (++v14 == v12) {
        goto LABEL_14;
      }
    }
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_269FDC650 == -1) {
      goto LABEL_33;
    }
LABEL_41:
    swift_once();
LABEL_33:
    uint64_t v29 = sub_25704A550();
    __swift_project_value_buffer(v29, (uint64_t)qword_269FDD648);
    uint64_t v30 = sub_25704A530();
    os_log_type_t v31 = sub_25704AC60();
    uint64_t v13 = (void *)v31;
    if (os_log_type_enabled(v30, v31))
    {
      char v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v32 = 0;
      _os_log_impl(&dword_256D65000, v30, (os_log_type_t)v13, "Inhomogeneous shape", v32, 2u);
      MEMORY[0x25A2B1FA0](v32, -1, -1);
    }

    sub_256F92DE8();
    swift_allocError();
    *uint64_t v33 = 35;
    swift_willThrow();
LABEL_36:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    return (uint64_t)v13;
  }
LABEL_14:
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC790);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_25706E4C0;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v15 + 32) = v5;
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x263F8EE78];
    goto LABEL_38;
  }
  if (v9[2])
  {
    uint64_t v17 = v9[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_38:
    *(void *)&v34[0] = v15;
    sub_256FA39B8(v17);
    uint64_t v13 = *(void **)&v34[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    return (uint64_t)v13;
  }
  __break(1u);
  return result;
}

uint64_t static MorpheusUtils.flattenNumericArray(_:)(uint64_t a1)
{
  uint64_t v22 = MEMORY[0x263F8EE78];
  sub_256FB118C(a1, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if (swift_dynamicCast())
  {
    sub_256FA81EC(v16, (uint64_t)v19);
    uint64_t v3 = v20;
    uint64_t v4 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      uint64_t v7 = v5 + 32;
      while (1)
      {
        sub_256FB118C(v7, (uint64_t)v16);
        unint64_t v8 = static MorpheusUtils.flattenNumericArray(_:)(v16);
        if (v1) {
          break;
        }
        sub_256FA3F6C(v8);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        v7 += 32;
        if (!--v6) {
          goto LABEL_6;
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    else
    {
LABEL_6:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      return v22;
    }
  }
  else
  {
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    sub_256FB11E8((uint64_t)v16, &qword_269FDCAE0);
    sub_256FB118C(a1, (uint64_t)v19);
    sub_256FABC94();
    if (swift_dynamicCast())
    {
      id v10 = *(id *)&v16[0];
      MEMORY[0x25A2B0A90]();
      if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_25704AA60();
      }
      sub_25704AAC0();
      sub_25704AA30();

      return v22;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      uint64_t v11 = sub_25704A550();
      __swift_project_value_buffer(v11, (uint64_t)qword_269FDD648);
      unint64_t v12 = sub_25704A530();
      os_log_type_t v13 = sub_25704AC60();
      if (os_log_type_enabled(v12, v13))
      {
        unint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v14 = 0;
        _os_log_impl(&dword_256D65000, v12, v13, "Array contains non NSNumber", v14, 2u);
        MEMORY[0x25A2B1FA0](v14, -1, -1);
      }

      sub_256F92DE8();
      swift_allocError();
      *uint64_t v15 = 12;
      return swift_willThrow();
    }
  }
}

uint64_t static MorpheusUtils.getType(of:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  sub_256FB118C(a1, (uint64_t)v45);
  uint64_t result = swift_dynamicCast();
  if (result || (sub_256FB118C(a1, (uint64_t)v45), uint64_t result = swift_dynamicCast(), result))
  {
    *a2 = 6;
    return result;
  }
  sub_256FB118C(a1, (uint64_t)v45);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *a2 = 5;
    return result;
  }
  sub_256FB118C(a1, (uint64_t)v45);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *a2 = 0;
    return result;
  }
  sub_256FB118C(a1, (uint64_t)v45);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *a2 = 1;
    return result;
  }
  sub_256FB118C(a1, (uint64_t)v45);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *a2 = 2;
    return result;
  }
  sub_256FB118C(a1, (uint64_t)v45);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *a2 = 3;
    return result;
  }
  sub_256FB118C(a1, (uint64_t)v45);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *a2 = 4;
    return result;
  }
  sub_256FB118C(a1, (uint64_t)v44);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if (!swift_dynamicCast())
  {
    uint64_t v43 = 0;
    memset(v42, 0, sizeof(v42));
    sub_256FB11E8((uint64_t)v42, &qword_269FDCAE0);
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_25704A550();
    __swift_project_value_buffer(v19, (uint64_t)qword_269FDD648);
    uint64_t v20 = sub_25704A530();
    os_log_type_t v21 = sub_25704AC60();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_256D65000, v20, v21, "Invalid numeric type", v22, 2u);
      MEMORY[0x25A2B1FA0](v22, -1, -1);
    }

    sub_256F92DE8();
    swift_allocError();
    *uint64_t v23 = 36;
    return swift_willThrow();
  }
  sub_256FA81EC(v42, (uint64_t)v45);
  uint64_t v6 = v46;
  uint64_t v7 = v47;
  __swift_project_boxed_opaque_existential_1(v45, v46);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = v8 + 32;
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
    do
    {
      sub_256FB118C(v10, (uint64_t)v42);
      static MorpheusUtils.getType(of:)(v44, v42);
      if (v2)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      char v12 = v44[0];
      if (LOBYTE(v44[0]) != 7)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = sub_256FA6098(0, *((void *)v11 + 2) + 1, 1, v11);
        }
        unint64_t v13 = *((void *)v11 + 2);
        unint64_t v14 = *((void *)v11 + 3);
        unint64_t v15 = v13 + 1;
        if (v13 >= v14 >> 1)
        {
          unint64_t v48 = v13 + 1;
          uint64_t v16 = v11;
          unint64_t v17 = v13;
          uint64_t v18 = sub_256FA6098((char *)(v14 > 1), v13 + 1, 1, v16);
          unint64_t v13 = v17;
          unint64_t v15 = v48;
          uint64_t v11 = v18;
        }
        *((void *)v11 + 2) = v15;
        v11[v13 + 32] = v12;
      }
      v10 += 32;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v24 = *((void *)v11 + 2);
  if (!v24)
  {
    LOBYTE(v25) = 7;
    goto LABEL_55;
  }
  unsigned int v25 = v11[32];
  unint64_t v26 = v24 - 1;
  if (v24 == 1) {
    goto LABEL_55;
  }
  if (v24 < 9)
  {
    uint64_t v27 = 1;
    goto LABEL_51;
  }
  if (v24 < 0x21)
  {
    uint64_t v28 = 0;
LABEL_46:
    uint64_t v27 = v26 & 0xFFFFFFFFFFFFFFF8 | 1;
    uint8x8_t v34 = (uint8x8_t)vdup_n_s8(v25);
    uint64_t v35 = (uint8x8_t *)&v11[v28 + 33];
    uint64_t v36 = v28 - (v26 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v37 = *v35++;
      uint8x8_t v34 = vmax_u8(v34, v37);
      v36 += 8;
    }
    while (v36);
    LOBYTE(v25) = vmaxv_u8(v34);
    if (v26 == (v26 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_55;
    }
    goto LABEL_51;
  }
  uint64_t v28 = v26 & 0xFFFFFFFFFFFFFFE0;
  uint8x16_t v29 = (uint8x16_t)vdupq_n_s8(v25);
  uint64_t v30 = (uint8x16_t *)(v11 + 49);
  unint64_t v31 = v26 & 0xFFFFFFFFFFFFFFE0;
  uint8x16_t v32 = v29;
  do
  {
    uint8x16_t v29 = vmaxq_u8(v29, v30[-1]);
    uint8x16_t v32 = vmaxq_u8(v32, *v30);
    v30 += 2;
    v31 -= 32;
  }
  while (v31);
  uint8x16_t v33 = vmaxq_u8(v29, v32);
  v33.i8[0] = vmaxvq_u8(v33);
  unsigned int v25 = v33.i32[0];
  if (v26 == v28) {
    goto LABEL_55;
  }
  if ((v26 & 0x18) != 0) {
    goto LABEL_46;
  }
  uint64_t v27 = v28 | 1;
LABEL_51:
  unint64_t v38 = v24 - v27;
  uint64_t v39 = &v11[v27 + 32];
  do
  {
    unsigned int v41 = *v39++;
    char v40 = v41;
    if (v25 <= v41) {
      LOBYTE(v25) = v40;
    }
    --v38;
  }
  while (v38);
LABEL_55:
  *a2 = v25;
LABEL_56:
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
}

uint64_t sub_25702D748(uint64_t a1, uint64_t a2)
{
  sub_256FB118C(a2, (uint64_t)&v31);
  if (swift_dynamicCast())
  {
    v43[0] = v38;
    v43[1] = v39;
    uint64_t v44 = v40;
    long long v41 = v36;
    long long v42 = v37;
    uint64_t v5 = *((void *)&v37 + 1);
    uint64_t v6 = v38;
    __swift_project_boxed_opaque_existential_1(&v41, *((uint64_t *)&v37 + 1));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 8))((char *)v43 + 8, a1, v5, v6);
    return sub_25702EC0C((uint64_t)&v41);
  }
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  sub_256FB11E8((uint64_t)&v36, &qword_269FDD330);
  sub_256FB118C(a2, (uint64_t)&v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)&long long v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    sub_256FB11E8((uint64_t)&v36, &qword_269FDCAE0);
LABEL_15:
    sub_256F92DE8();
    swift_allocError();
    unsigned char *v26 = 60;
    return swift_willThrow();
  }
  sub_256FA81EC(&v36, (uint64_t)&v41);
  sub_256FB118C(a1, (uint64_t)&v34);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD78);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t AssociatedConformanceWitness = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    sub_256FB11E8((uint64_t)&v31, &qword_269FDCD60);
LABEL_14:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    goto LABEL_15;
  }
  sub_256FA81EC(&v31, (uint64_t)&v36);
  uint64_t v8 = *((void *)&v42 + 1);
  uint64_t v9 = *(void *)&v43[0];
  __swift_project_boxed_opaque_existential_1(&v41, *((uint64_t *)&v42 + 1));
  uint64_t v10 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9) + 16);
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(&v36, *((uint64_t *)&v37 + 1));
  if (v10 != sub_25704AB90())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    goto LABEL_14;
  }
  uint64_t v45 = v2;
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(&v36, *((uint64_t *)&v37 + 1));
  MEMORY[0x270FA5388](v11);
  (*(void (**)(char *))(v13 + 16))((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  *((void *)&v32 + 1) = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v31);
  sub_25704A930();
  uint64_t v27 = 32;
  for (unint64_t i = 0; ; unint64_t i = v23 + 1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v31, *((uint64_t *)&v32 + 1));
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v15 = sub_25704AC70();
    uint64_t v16 = *(void *)(v15 - 8);
    MEMORY[0x270FA5388](v15);
    uint64_t v18 = (char *)&v27 - v17;
    sub_25704AC80();
    uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    }
    uint64_t v35 = AssociatedTypeWitness;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v34);
    (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_0, v18, AssociatedTypeWitness);
    sub_256F9ABF4(&v34, v30);
    uint64_t v21 = *((void *)&v42 + 1);
    uint64_t v22 = *(void *)&v43[0];
    __swift_project_boxed_opaque_existential_1(&v41, *((uint64_t *)&v42 + 1));
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
    unint64_t v23 = i;
    if (i >= *(void *)(result + 16)) {
      break;
    }
    uint64_t v24 = v27;
    sub_256FB118C(result + v27, (uint64_t)v29);
    swift_bridgeObjectRelease();
    uint64_t v25 = v45;
    sub_25702D748(v30, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    if (v25)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    }
    uint64_t v45 = 0;
    uint64_t v27 = v24 + 32;
  }
  __break(1u);
  return result;
}

uint64_t sub_25702DD14@<X0>(_OWORD *a1@<X8>)
{
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v2 = sub_25704AE20();
  swift_getObjectType();
  uint64_t result = sub_25704AE20();
  if (v2 == result)
  {
    char v4 = sub_25704AE30();
    swift_unknownObjectRelease();
    if (v4)
    {
      uint64_t result = swift_unknownObjectRelease();
      a1[1] = 0u;
      a1[2] = 0u;
      *a1 = 0u;
    }
    else
    {
      sub_25704AF80();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL static NumericType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NumericType.hash(into:)()
{
  return sub_25704B2A0();
}

BOOL static NumericType.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

uint64_t NumericType.hashValue.getter()
{
  return sub_25704B2B0();
}

BOOL sub_25702DECC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_25702DEE0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_25702DEF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_25702DF08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t sub_25702DF1C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_256FB118C(a2, (uint64_t)&v35);
  if (swift_dynamicCast())
  {
    v47[0] = v42;
    v47[1] = v43;
    uint64_t v48 = v44;
    long long v45 = v40;
    long long v46 = v41;
    uint64_t v7 = a3[3];
    uint64_t v8 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v7);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 8))((char *)v47 + 8, a1, v7, v8);
    return sub_25702EC0C((uint64_t)&v45);
  }
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  sub_256FB11E8((uint64_t)&v40, &qword_269FDD330);
  sub_256FB118C(a2, (uint64_t)&v35);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCAD8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)&long long v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_256FB11E8((uint64_t)&v40, &qword_269FDCAE0);
LABEL_15:
    sub_256F92DE8();
    swift_allocError();
    *uint64_t v28 = 60;
    return swift_willThrow();
  }
  sub_256FA81EC(&v40, (uint64_t)&v45);
  sub_256FB118C(a1, (uint64_t)&v38);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCD78);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t AssociatedConformanceWitness = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    sub_256FB11E8((uint64_t)&v35, &qword_269FDCD60);
LABEL_14:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    goto LABEL_15;
  }
  sub_256FA81EC(&v35, (uint64_t)&v40);
  uint64_t v10 = *((void *)&v46 + 1);
  uint64_t v11 = *(void *)&v47[0];
  __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
  uint64_t v12 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11) + 16);
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(&v40, *((uint64_t *)&v41 + 1));
  if (v12 != sub_25704AB90())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
    goto LABEL_14;
  }
  uint64_t v30 = a3;
  uint64_t v49 = v3;
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(&v40, *((uint64_t *)&v41 + 1));
  MEMORY[0x270FA5388](v13);
  (*(void (**)(char *))(v15 + 16))((char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  *((void *)&v36 + 1) = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v35);
  sub_25704A930();
  uint64_t v31 = 32;
  for (unint64_t i = 0; ; unint64_t i = v25 + 1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v35, *((uint64_t *)&v36 + 1));
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v17 = sub_25704AC70();
    uint64_t v18 = *(void *)(v17 - 8);
    MEMORY[0x270FA5388](v17);
    uint64_t v20 = (char *)&v29 - v19;
    sub_25704AC80();
    uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    }
    uint64_t v39 = AssociatedTypeWitness;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v38);
    (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 32))(boxed_opaque_existential_0, v20, AssociatedTypeWitness);
    sub_256F9ABF4(&v38, v34);
    uint64_t v23 = *((void *)&v46 + 1);
    uint64_t v24 = *(void *)&v47[0];
    __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    unint64_t v25 = i;
    if (i >= *(void *)(result + 16)) {
      break;
    }
    uint64_t v26 = v31;
    sub_256FB118C(result + v31, (uint64_t)v33);
    swift_bridgeObjectRelease();
    uint64_t v27 = v49;
    sub_25702DF1C(v34, v33, v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    if (v27)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    }
    uint64_t v49 = 0;
    uint64_t v31 = v26 + 32;
  }
  __break(1u);
  return result;
}

uint64_t _s8Morpheus0A5UtilsO5isNilySbypFZ_0(uint64_t a1)
{
  uint64_t v2 = sub_25704B2D0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint8x16_t v33 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD308);
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD310);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  long long v34 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v33 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v36 = sub_25704B300();
  uint64_t v17 = *(void *)(v36 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v36);
  long long v35 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v33 - v20;
  sub_256FB118C(a1, (uint64_t)v37);
  sub_25704B2C0();
  sub_25704B2E0();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v14, *MEMORY[0x263F8E810], v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  uint64_t v22 = (uint64_t)&v8[*(int *)(v6 + 56)];
  sub_256FEED0C((uint64_t)v16, (uint64_t)v8, &qword_269FDD310);
  sub_256FEED0C((uint64_t)v14, v22, &qword_269FDD310);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v23((uint64_t)v8, 1, v2) == 1)
  {
    sub_256FB11E8((uint64_t)v14, &qword_269FDD310);
    sub_256FB11E8((uint64_t)v16, &qword_269FDD310);
    if (v23(v22, 1, v2) == 1)
    {
      sub_256FB11E8((uint64_t)v8, &qword_269FDD310);
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v35, v21, v36);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_256FEED0C((uint64_t)v8, (uint64_t)v34, &qword_269FDD310);
  if (v23(v22, 1, v2) == 1)
  {
    sub_256FB11E8((uint64_t)v14, &qword_269FDD310);
    sub_256FB11E8((uint64_t)v16, &qword_269FDD310);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v34, v2);
LABEL_6:
    sub_256FB11E8((uint64_t)v8, &qword_269FDD308);
    unint64_t v25 = v35;
    uint64_t v24 = v36;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v35, v21, v36);
LABEL_10:
    char v31 = 0;
    goto LABEL_11;
  }
  uint64_t v26 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v33, v22, v2);
  char v27 = sub_25704A740();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v3 + 8);
  v28(v26, v2);
  sub_256FB11E8((uint64_t)v14, &qword_269FDD310);
  sub_256FB11E8((uint64_t)v16, &qword_269FDD310);
  v28(v34, v2);
  sub_256FB11E8((uint64_t)v8, &qword_269FDD310);
  unint64_t v25 = v35;
  uint64_t v24 = v36;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v35, v21, v36);
  if ((v27 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  sub_25704B2F0();
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v29 = sub_25704AE20();
  swift_getObjectType();
  uint64_t result = sub_25704AE20();
  if (v29 == result)
  {
    char v31 = sub_25704AE30();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v25 = v35;
    uint64_t v24 = v36;
LABEL_11:
    long long v32 = *(void (**)(char *, uint64_t))(v17 + 8);
    v32(v25, v24);
    v32(v21, v24);
    return v31 & 1;
  }
  __break(1u);
  return result;
}

unint64_t sub_25702EAA4()
{
  unint64_t result = qword_269FDD328;
  if (!qword_269FDD328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD328);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NumericType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25702EBC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NumericType()
{
  return &type metadata for NumericType;
}

ValueMetadata *type metadata accessor for MorpheusUtils()
{
  return &type metadata for MorpheusUtils;
}

uint64_t sub_25702EC0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_25702EC60()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25702ECA0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25702ECD8(unsigned __int8 *a1, char *a2)
{
  return sub_256FF2844(*a1, *a2);
}

uint64_t sub_25702ECE4()
{
  return sub_25704B2B0();
}

uint64_t sub_25702EDAC()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25702EE5C()
{
  return sub_25704B2B0();
}

uint64_t sub_25702EF20@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25702F728();
  *a1 = result;
  return result;
}

void sub_25702EF50(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x746567726174;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1919251561;
      goto LABEL_3;
    case 2:
      *a1 = 7562857;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 0x636E7973417369;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_25702EFD8()
{
  uint64_t result = 0x746567726174;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1919251561;
      break;
    case 2:
      uint64_t result = 7562857;
      break;
    case 3:
      uint64_t result = 0x636E7973417369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25702F054@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25702F728();
  *a1 = result;
  return result;
}

uint64_t sub_25702F07C(uint64_t a1)
{
  unint64_t v2 = sub_25702F438();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25702F0B8(uint64_t a1)
{
  unint64_t v2 = sub_25702F438();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25702F0F4(void *a1)
{
  return sub_25702F140(a1);
}

uint64_t sub_25702F140(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD340);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25702F438();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Comprehension();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v13[0]) = 3;
    v1[10] = sub_25704B120();
    v1[5] = sub_257036C50((uint64_t)v8, 0);
    v1[6] = v10;
    v1[7] = sub_257036C50((uint64_t)v8, 1);
    v1[8] = v11;
    v1[9] = sub_25703FD28(v8, 2);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v13);
    uint64_t v3 = sub_257046164(v13);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_25702F3C4()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 88, 7);
}

uint64_t type metadata accessor for Comprehension()
{
  return self;
}

unint64_t sub_25702F438()
{
  unint64_t result = qword_269FDD348;
  if (!qword_269FDD348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD348);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Comprehension.NameCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Comprehension.NameCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25702F5E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Comprehension.NameCodingKeys()
{
  return &type metadata for Comprehension.NameCodingKeys;
}

unint64_t sub_25702F624()
{
  unint64_t result = qword_269FDD350;
  if (!qword_269FDD350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD350);
  }
  return result;
}

unint64_t sub_25702F67C()
{
  unint64_t result = qword_269FDD358;
  if (!qword_269FDD358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD358);
  }
  return result;
}

unint64_t sub_25702F6D4()
{
  unint64_t result = qword_269FDD360;
  if (!qword_269FDD360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD360);
  }
  return result;
}

uint64_t sub_25702F728()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

uint64_t sub_25702F774(char *a1, char *a2)
{
  return sub_256FF23F4(*a1, *a2);
}

uint64_t sub_25702F780()
{
  return sub_25704B2B0();
}

uint64_t sub_25702F7F0()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25702F84C()
{
  return sub_25704B2B0();
}

uint64_t sub_25702F8B8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_25702F918(uint64_t *a1@<X8>)
{
  uint64_t v2 = 25705;
  if (*v1) {
    uint64_t v2 = 7894115;
  }
  unint64_t v3 = 0xE200000000000000;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_25702F944()
{
  if (*v0) {
    return 7894115;
  }
  else {
    return 25705;
  }
}

uint64_t sub_25702F96C@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_25702F9D0(uint64_t a1)
{
  unint64_t v2 = sub_257030258();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25702FA0C(uint64_t a1)
{
  unint64_t v2 = sub_257030258();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25702FA48(void *a1)
{
  return sub_25702FA94(a1);
}

uint64_t sub_25702FA94(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD368);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257030258();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Name();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v12[0]) = 0;
    *(void *)(v1 + 40) = sub_25704B0F0();
    *(void *)(v1 + 48) = v10;
    char v13 = 1;
    sub_256FF6888();
    sub_25704B130();
    *(unsigned char *)(v1 + 56) = v12[0];
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v12);
    uint64_t v3 = sub_257046164(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

void sub_25702FCF4(uint64_t a1@<X8>)
{
  void (*v17)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char *v30;
  long long v31;
  long long v32;
  _OWORD v33[2];

  uint64_t v2 = (void *)v1;
  if (*(unsigned char *)(v1 + 56))
  {
    if (*(unsigned char *)(v1 + 56) != 1)
    {
      *(unsigned char *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return;
    }
    if (MEMORY[0x25A2B2020](v1 + 24))
    {
      uint64_t v4 = *(void *)(v1 + 32);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v6 = *(void *)(v1 + 40);
      uint64_t v7 = *(void *)(v1 + 48);
      int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 40);
      swift_bridgeObjectRetain();
      uint64_t v9 = v8(v6, v7, ObjectType, v4);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = &type metadata for Store;
      uint64_t v10 = (void *)swift_allocObject();
      *(void *)a1 = v10;
      v10[5] = type metadata accessor for LexicalContext();
      v10[6] = &off_27063C628;
      _OWORD v10[2] = v9;
      uint64_t v12 = *(void *)(v1 + 40);
      uint64_t v11 = *(void *)(v1 + 48);
      v10[10] = MEMORY[0x263F8D310];
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      v10[7] = v12;
      v10[8] = v11;
LABEL_8:
      *(unsigned char *)(a1 + 32) = 0;
      return;
    }
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_25704A550();
    __swift_project_value_buffer(v18, (uint64_t)qword_269FDD648);
    swift_retain();
    uint64_t v19 = sub_25704A530();
    uint64_t v20 = sub_25704AC60();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 134217984;
      *(void *)&v33[0] = v2[2];
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v19, v20, "Name> ParentBlock not found. line %ld", v21, 0xCu);
      MEMORY[0x25A2B1FA0](v21, -1, -1);
    }
    else
    {

      swift_release();
    }
    uint64_t v29 = 21;
  }
  else
  {
    if (MEMORY[0x25A2B2020](v1 + 24))
    {
      uint64_t v13 = *(void *)(v1 + 32);
      uint64_t v14 = swift_getObjectType();
      uint64_t v15 = *(void *)(v1 + 40);
      uint64_t v16 = *(void *)(v1 + 48);
      uint64_t v17 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48);
      swift_bridgeObjectRetain();
      v17(&v31, v15, v16, v14, v13);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v32 + 1))
      {
        sub_256F9ABF4(&v31, v33);
        sub_256F9ABF4(v33, (_OWORD *)a1);
        goto LABEL_8;
      }
    }
    else
    {
      char v31 = 0u;
      long long v32 = 0u;
    }
    sub_256FF0EF4((uint64_t)&v31);
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_25704A550();
    __swift_project_value_buffer(v22, (uint64_t)qword_269FDD648);
    swift_retain();
    uint64_t v23 = sub_25704A530();
    uint64_t v24 = sub_25704AC60();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(void *)&v33[0] = v26;
      *(_DWORD *)unint64_t v25 = 136315394;
      char v27 = v2[5];
      uint64_t v28 = v2[6];
      swift_bridgeObjectRetain();
      *(void *)&char v31 = sub_256FFE924(v27, v28, (uint64_t *)v33);
      sub_25704AC90();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2048;
      *(void *)&char v31 = v2[2];
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v23, v24, "Name> Id %s not found. line %ld", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v26, -1, -1);
      MEMORY[0x25A2B1FA0](v25, -1, -1);
    }
    else
    {

      swift_release();
    }
    uint64_t v29 = 20;
  }
  sub_256F92DE8();
  swift_allocError();
  *uint64_t v30 = v29;
  swift_willThrow();
}

uint64_t sub_25703017C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2570301AC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_2570301B4()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 57, 7);
}

uint64_t type metadata accessor for Name()
{
  return self;
}

uint64_t sub_257030218()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return MEMORY[0x270FA0238](v0, 88, 7);
}

unint64_t sub_257030258()
{
  unint64_t result = qword_269FDD370;
  if (!qword_269FDD370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD370);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Name.NameCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257030378);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Name.NameCodingKeys()
{
  return &type metadata for Name.NameCodingKeys;
}

unint64_t sub_2570303B4()
{
  unint64_t result = qword_269FDD378;
  if (!qword_269FDD378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD378);
  }
  return result;
}

unint64_t sub_25703040C()
{
  unint64_t result = qword_269FDD380;
  if (!qword_269FDD380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD380);
  }
  return result;
}

unint64_t sub_257030464()
{
  unint64_t result = qword_269FDD388;
  if (!qword_269FDD388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD388);
  }
  return result;
}

uint64_t sub_2570304B8(uint64_t a1, char a2)
{
  return sub_257030518(a1, a2, &qword_269FDC7A0);
}

uint64_t sub_2570304D8(uint64_t a1, char a2)
{
  return sub_257032774(a1, a2, &qword_269FDCAF8);
}

uint64_t sub_2570304F8(uint64_t a1, char a2)
{
  return sub_257030518(a1, a2, &qword_269FDCB20);
}

uint64_t sub_257030518(uint64_t a1, char a2, uint64_t *a3)
{
  char v6 = a2 & 1;
  uint64_t v7 = sub_25704A550();
  uint64_t v40 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD3A8);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v43 = v6;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  sub_257038A18();
  uint64_t v14 = a1;
  sub_25704B0E0();
  if (!v3)
  {
    uint64_t v36 = v9;
    uint64_t v37 = v7;
    long long v38 = (uint8_t *)a1;
    uint64_t v39 = v11;
    LOBYTE(v42) = 0;
    uint64_t v16 = sub_25704B0F0();
    unint64_t v17 = v15;
    BOOL v18 = v16 == 0x656D6E6769737341 && v15 == 0xEA0000000000746ELL;
    if (v18 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Assignment();
      sub_257038A6C(&qword_269FDD570, 255, (void (*)(uint64_t))type metadata accessor for Assignment);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD578;
      uint64_t v21 = type metadata accessor for Assignment;
LABEL_9:
      uint64_t v22 = v21;
      uint64_t v23 = 255;
LABEL_10:
      sub_257038A6C(v20, v23, (void (*)(uint64_t))v22);
      return v14;
    }
    BOOL v24 = v16 == 0x7069726373627553 && v17 == 0xE900000000000074;
    if (v24 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Subscript();
      sub_257038A6C(&qword_269FDD560, 255, (void (*)(uint64_t))type metadata accessor for Subscript);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD568;
      uint64_t v21 = type metadata accessor for Subscript;
      goto LABEL_9;
    }
    BOOL v25 = v16 == 0x6563696F6843 && v17 == 0xE600000000000000;
    if (v25 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Choice();
      sub_257038A6C(&qword_269FDD550, 255, (void (*)(uint64_t))type metadata accessor for Choice);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD558;
      uint64_t v21 = type metadata accessor for Choice;
      goto LABEL_9;
    }
    BOOL v26 = v16 == 0x746E6174736E6F43 && v17 == 0xE800000000000000;
    if (v26 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Constant();
      sub_257038A6C(&qword_269FDD540, 255, (void (*)(uint64_t))type metadata accessor for Constant);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD548;
      uint64_t v21 = type metadata accessor for Constant;
      goto LABEL_9;
    }
    if (v16 == 1751343429 && v17 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Each();
      sub_257038A6C(&qword_269FDD530, v27, (void (*)(uint64_t))type metadata accessor for Each);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD538;
      uint64_t v22 = type metadata accessor for Each;
      goto LABEL_10;
    }
    if (v16 == 0x426C61636978654CLL && v17 == 0xEC0000006B636F6CLL || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for LexicalBlock();
      sub_257038A6C((unint64_t *)&qword_269FDCB58, 255, (void (*)(uint64_t))type metadata accessor for LexicalBlock);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD528;
      uint64_t v21 = type metadata accessor for LexicalBlock;
      goto LABEL_9;
    }
    if (v16 == 0x6E7275746552 && v17 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Return();
      sub_257038A6C(&qword_269FDD518, 255, (void (*)(uint64_t))type metadata accessor for Return);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD520;
      uint64_t v21 = type metadata accessor for Return;
      goto LABEL_9;
    }
    if (v16 == 0x73697261706D6F43 && v17 == 0xEA00000000006E6FLL || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Comparison();
      sub_257038A6C(&qword_269FDD508, 255, (void (*)(uint64_t))type metadata accessor for Comparison);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD510;
      uint64_t v21 = type metadata accessor for Comparison;
      goto LABEL_9;
    }
    if (v16 == 0x704F6E6942 && v17 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BinOp();
      sub_257038A6C(&qword_269FDD4F8, 255, (void (*)(uint64_t))type metadata accessor for BinOp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD500;
      uint64_t v21 = type metadata accessor for BinOp;
      goto LABEL_9;
    }
    if (v16 == 1819042115 && v17 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Call();
      sub_257038A6C(&qword_269FDD4E8, 255, (void (*)(uint64_t))type metadata accessor for Call);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4F0;
      uint64_t v21 = type metadata accessor for Call;
      goto LABEL_9;
    }
    if (v16 == 1701667150 && v17 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Name();
      sub_257038A6C(&qword_269FDD4D8, 255, (void (*)(uint64_t))type metadata accessor for Name);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4E0;
      uint64_t v21 = type metadata accessor for Name;
      goto LABEL_9;
    }
    if (v16 == 0x7475626972747441 && v17 == 0xE900000000000065 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Attribute();
      sub_257038A6C(&qword_269FDD4C8, 255, (void (*)(uint64_t))type metadata accessor for Attribute);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4D0;
      uint64_t v21 = type metadata accessor for Attribute;
      goto LABEL_9;
    }
    if (v16 == 0x64726F7779654BLL && v17 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Keyword();
      sub_257038A6C(&qword_269FDD4B8, 255, (void (*)(uint64_t))type metadata accessor for Keyword);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4C0;
      uint64_t v21 = type metadata accessor for Keyword;
      goto LABEL_9;
    }
    if (v16 == 0x7375656870726F4DLL && v17 == 0xED00007961727241 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusArray();
      sub_257038A6C(&qword_269FDD4A8, 255, (void (*)(uint64_t))type metadata accessor for MorpheusArray);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4B0;
      uint64_t v21 = type metadata accessor for MorpheusArray;
      goto LABEL_9;
    }
    if (v16 == 0x7375656870726F4DLL && v17 == 0xEC00000074636944 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusDict();
      sub_257038A6C(&qword_269FDD498, 255, (void (*)(uint64_t))type metadata accessor for MorpheusDict);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4A0;
      uint64_t v21 = type metadata accessor for MorpheusDict;
      goto LABEL_9;
    }
    if (v16 == 0x7375656870726F4DLL && v17 == 0xED00006563696C53 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusSlice();
      sub_257038A6C(&qword_269FDD488, 255, (void (*)(uint64_t))type metadata accessor for MorpheusSlice);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD490;
      uint64_t v21 = type metadata accessor for MorpheusSlice;
      goto LABEL_9;
    }
    if (v16 == 0x6E6F6974636E7546 && v17 == 0xEB00000000666544 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FunctionDef();
      sub_257038A6C(&qword_269FDD478, 255, (void (*)(uint64_t))type metadata accessor for FunctionDef);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD480;
      uint64_t v21 = type metadata accessor for FunctionDef;
      goto LABEL_9;
    }
    if (v16 == 0x6665447373616C43 && v17 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ClassDef();
      sub_257038A6C(&qword_269FDD468, 255, (void (*)(uint64_t))type metadata accessor for ClassDef);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD470;
      uint64_t v21 = type metadata accessor for ClassDef;
      goto LABEL_9;
    }
    if (v16 == 0x7972616E55 && v17 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Unary();
      sub_257038A6C(&qword_269FDD458, 255, (void (*)(uint64_t))type metadata accessor for Unary);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD460;
      uint64_t v21 = type metadata accessor for Unary;
      goto LABEL_9;
    }
    if (v16 == 0x6573696152 && v17 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Raise();
      sub_257038A6C(&qword_269FDD448, 255, (void (*)(uint64_t))type metadata accessor for Raise);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD450;
      uint64_t v21 = type metadata accessor for Raise;
      goto LABEL_9;
    }
    if (v16 == 0x745364656E696F4ALL && v17 == 0xE900000000000072 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for JoinedStr();
      sub_257038A6C(&qword_269FDD438, 255, (void (*)(uint64_t))type metadata accessor for JoinedStr);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD440;
      uint64_t v21 = type metadata accessor for JoinedStr;
      goto LABEL_9;
    }
    if (v16 == 0x657474616D726F46 && v17 == 0xEE0065756C615664 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FormattedValue();
      sub_257038A6C(&qword_269FDD428, 255, (void (*)(uint64_t))type metadata accessor for FormattedValue);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD430;
      uint64_t v21 = type metadata accessor for FormattedValue;
      goto LABEL_9;
    }
    if (v16 == 0x704F6C6F6F42 && v17 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BoolOp();
      sub_257038A6C(&qword_269FDD418, 255, (void (*)(uint64_t))type metadata accessor for BoolOp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD420;
      uint64_t v21 = type metadata accessor for BoolOp;
      goto LABEL_9;
    }
    if (v16 == 0x65756E69746E6F43 && v17 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Continue();
      sub_257038A6C(&qword_269FDD408, 255, (void (*)(uint64_t))type metadata accessor for Continue);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD410;
      uint64_t v21 = type metadata accessor for Continue;
      goto LABEL_9;
    }
    if (v16 == 0x6B61657242 && v17 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Break();
      sub_257038A6C(&qword_269FDD3F8, 255, (void (*)(uint64_t))type metadata accessor for Break);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD400;
      uint64_t v21 = type metadata accessor for Break;
      goto LABEL_9;
    }
    if (v16 == 0x65686572706D6F43 && v17 == 0xED00006E6F69736ELL || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Comprehension();
      sub_257038A6C(&qword_269FDD3E8, 255, (void (*)(uint64_t))type metadata accessor for Comprehension);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD3F0;
      uint64_t v21 = type metadata accessor for Comprehension;
      goto LABEL_9;
    }
    if (v16 == 0x706D6F437473694CLL && v17 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ListComp();
      sub_257038A6C(&qword_269FDD3D8, 255, (void (*)(uint64_t))type metadata accessor for ListComp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD3E0;
      uint64_t v21 = type metadata accessor for ListComp;
      goto LABEL_9;
    }
    if (v16 == 0x706D6F43746553 && v17 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for SetComp();
      sub_257038A6C(&qword_269FDD3C8, 255, (void (*)(uint64_t))type metadata accessor for SetComp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD3D0;
      uint64_t v21 = type metadata accessor for SetComp;
      goto LABEL_9;
    }
    if (v16 == 0x706D6F4374636944 && v17 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for DictComp();
      sub_257038A6C(&qword_269FDD3B8, 255, (void (*)(uint64_t))type metadata accessor for DictComp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD3C0;
      uint64_t v21 = type metadata accessor for DictComp;
      goto LABEL_9;
    }
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v28 = v37;
    uint64_t v29 = __swift_project_value_buffer(v37, (uint64_t)qword_269FDD648);
    uint64_t v14 = (uint64_t)v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v36, v29, v28);
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_25704A530();
    os_log_type_t v31 = sub_25704AC60();
    if (os_log_type_enabled(v30, v31))
    {
      long long v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v42 = v33;
      *(_DWORD *)long long v32 = 136315138;
      uint64_t v14 = (uint64_t)(v32 + 12);
      long long v38 = v32 + 4;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_256FFE924(v16, v17, &v42);
      sub_25704AC90();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_256D65000, v30, v31, "Operation %s not supported yet", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v33, -1, -1);
      MEMORY[0x25A2B1FA0](v32, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v37);
    sub_256F92DE8();
    swift_allocError();
    *long long v34 = 43;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
  }
  return v14;
}

uint64_t sub_257032734(uint64_t a1)
{
  return sub_257034AF0(a1, &qword_269FDCCE0);
}

uint64_t sub_257032754(uint64_t a1, char a2)
{
  return sub_257032774(a1, a2, &qword_269FDCD20);
}

uint64_t sub_257032774(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v7 = sub_25704A550();
  uint64_t v40 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD3A8);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v43 = a2;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  sub_257038A18();
  uint64_t v14 = a1;
  sub_25704B0E0();
  if (!v3)
  {
    uint64_t v36 = v9;
    uint64_t v37 = v7;
    long long v38 = (uint8_t *)a1;
    uint64_t v39 = v11;
    LOBYTE(v42) = 0;
    uint64_t v16 = sub_25704B0F0();
    unint64_t v17 = v15;
    BOOL v18 = v16 == 0x656D6E6769737341 && v15 == 0xEA0000000000746ELL;
    if (v18 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Assignment();
      sub_257038A6C(&qword_269FDD570, 255, (void (*)(uint64_t))type metadata accessor for Assignment);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD578;
      uint64_t v21 = type metadata accessor for Assignment;
LABEL_9:
      uint64_t v22 = v21;
      uint64_t v23 = 255;
LABEL_10:
      sub_257038A6C(v20, v23, (void (*)(uint64_t))v22);
      return v14;
    }
    BOOL v24 = v16 == 0x7069726373627553 && v17 == 0xE900000000000074;
    if (v24 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Subscript();
      sub_257038A6C(&qword_269FDD560, 255, (void (*)(uint64_t))type metadata accessor for Subscript);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD568;
      uint64_t v21 = type metadata accessor for Subscript;
      goto LABEL_9;
    }
    BOOL v25 = v16 == 0x6563696F6843 && v17 == 0xE600000000000000;
    if (v25 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Choice();
      sub_257038A6C(&qword_269FDD550, 255, (void (*)(uint64_t))type metadata accessor for Choice);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD558;
      uint64_t v21 = type metadata accessor for Choice;
      goto LABEL_9;
    }
    BOOL v26 = v16 == 0x746E6174736E6F43 && v17 == 0xE800000000000000;
    if (v26 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Constant();
      sub_257038A6C(&qword_269FDD540, 255, (void (*)(uint64_t))type metadata accessor for Constant);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD548;
      uint64_t v21 = type metadata accessor for Constant;
      goto LABEL_9;
    }
    if (v16 == 1751343429 && v17 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Each();
      sub_257038A6C(&qword_269FDD530, v27, (void (*)(uint64_t))type metadata accessor for Each);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD538;
      uint64_t v22 = type metadata accessor for Each;
      goto LABEL_10;
    }
    if (v16 == 0x426C61636978654CLL && v17 == 0xEC0000006B636F6CLL || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for LexicalBlock();
      sub_257038A6C((unint64_t *)&qword_269FDCB58, 255, (void (*)(uint64_t))type metadata accessor for LexicalBlock);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD528;
      uint64_t v21 = type metadata accessor for LexicalBlock;
      goto LABEL_9;
    }
    if (v16 == 0x6E7275746552 && v17 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Return();
      sub_257038A6C(&qword_269FDD518, 255, (void (*)(uint64_t))type metadata accessor for Return);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD520;
      uint64_t v21 = type metadata accessor for Return;
      goto LABEL_9;
    }
    if (v16 == 0x73697261706D6F43 && v17 == 0xEA00000000006E6FLL || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Comparison();
      sub_257038A6C(&qword_269FDD508, 255, (void (*)(uint64_t))type metadata accessor for Comparison);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD510;
      uint64_t v21 = type metadata accessor for Comparison;
      goto LABEL_9;
    }
    if (v16 == 0x704F6E6942 && v17 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BinOp();
      sub_257038A6C(&qword_269FDD4F8, 255, (void (*)(uint64_t))type metadata accessor for BinOp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD500;
      uint64_t v21 = type metadata accessor for BinOp;
      goto LABEL_9;
    }
    if (v16 == 1819042115 && v17 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Call();
      sub_257038A6C(&qword_269FDD4E8, 255, (void (*)(uint64_t))type metadata accessor for Call);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4F0;
      uint64_t v21 = type metadata accessor for Call;
      goto LABEL_9;
    }
    if (v16 == 1701667150 && v17 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Name();
      sub_257038A6C(&qword_269FDD4D8, 255, (void (*)(uint64_t))type metadata accessor for Name);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4E0;
      uint64_t v21 = type metadata accessor for Name;
      goto LABEL_9;
    }
    if (v16 == 0x7475626972747441 && v17 == 0xE900000000000065 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Attribute();
      sub_257038A6C(&qword_269FDD4C8, 255, (void (*)(uint64_t))type metadata accessor for Attribute);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4D0;
      uint64_t v21 = type metadata accessor for Attribute;
      goto LABEL_9;
    }
    if (v16 == 0x64726F7779654BLL && v17 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Keyword();
      sub_257038A6C(&qword_269FDD4B8, 255, (void (*)(uint64_t))type metadata accessor for Keyword);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4C0;
      uint64_t v21 = type metadata accessor for Keyword;
      goto LABEL_9;
    }
    if (v16 == 0x7375656870726F4DLL && v17 == 0xED00007961727241 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusArray();
      sub_257038A6C(&qword_269FDD4A8, 255, (void (*)(uint64_t))type metadata accessor for MorpheusArray);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4B0;
      uint64_t v21 = type metadata accessor for MorpheusArray;
      goto LABEL_9;
    }
    if (v16 == 0x7375656870726F4DLL && v17 == 0xEC00000074636944 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusDict();
      sub_257038A6C(&qword_269FDD498, 255, (void (*)(uint64_t))type metadata accessor for MorpheusDict);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD4A0;
      uint64_t v21 = type metadata accessor for MorpheusDict;
      goto LABEL_9;
    }
    if (v16 == 0x7375656870726F4DLL && v17 == 0xED00006563696C53 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusSlice();
      sub_257038A6C(&qword_269FDD488, 255, (void (*)(uint64_t))type metadata accessor for MorpheusSlice);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD490;
      uint64_t v21 = type metadata accessor for MorpheusSlice;
      goto LABEL_9;
    }
    if (v16 == 0x6E6F6974636E7546 && v17 == 0xEB00000000666544 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FunctionDef();
      sub_257038A6C(&qword_269FDD478, 255, (void (*)(uint64_t))type metadata accessor for FunctionDef);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD480;
      uint64_t v21 = type metadata accessor for FunctionDef;
      goto LABEL_9;
    }
    if (v16 == 0x6665447373616C43 && v17 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ClassDef();
      sub_257038A6C(&qword_269FDD468, 255, (void (*)(uint64_t))type metadata accessor for ClassDef);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD470;
      uint64_t v21 = type metadata accessor for ClassDef;
      goto LABEL_9;
    }
    if (v16 == 0x7972616E55 && v17 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Unary();
      sub_257038A6C(&qword_269FDD458, 255, (void (*)(uint64_t))type metadata accessor for Unary);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD460;
      uint64_t v21 = type metadata accessor for Unary;
      goto LABEL_9;
    }
    if (v16 == 0x6573696152 && v17 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Raise();
      sub_257038A6C(&qword_269FDD448, 255, (void (*)(uint64_t))type metadata accessor for Raise);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD450;
      uint64_t v21 = type metadata accessor for Raise;
      goto LABEL_9;
    }
    if (v16 == 0x745364656E696F4ALL && v17 == 0xE900000000000072 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for JoinedStr();
      sub_257038A6C(&qword_269FDD438, 255, (void (*)(uint64_t))type metadata accessor for JoinedStr);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD440;
      uint64_t v21 = type metadata accessor for JoinedStr;
      goto LABEL_9;
    }
    if (v16 == 0x657474616D726F46 && v17 == 0xEE0065756C615664 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FormattedValue();
      sub_257038A6C(&qword_269FDD428, 255, (void (*)(uint64_t))type metadata accessor for FormattedValue);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD430;
      uint64_t v21 = type metadata accessor for FormattedValue;
      goto LABEL_9;
    }
    if (v16 == 0x704F6C6F6F42 && v17 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BoolOp();
      sub_257038A6C(&qword_269FDD418, 255, (void (*)(uint64_t))type metadata accessor for BoolOp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD420;
      uint64_t v21 = type metadata accessor for BoolOp;
      goto LABEL_9;
    }
    if (v16 == 0x65756E69746E6F43 && v17 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Continue();
      sub_257038A6C(&qword_269FDD408, 255, (void (*)(uint64_t))type metadata accessor for Continue);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD410;
      uint64_t v21 = type metadata accessor for Continue;
      goto LABEL_9;
    }
    if (v16 == 0x6B61657242 && v17 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Break();
      sub_257038A6C(&qword_269FDD3F8, 255, (void (*)(uint64_t))type metadata accessor for Break);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD400;
      uint64_t v21 = type metadata accessor for Break;
      goto LABEL_9;
    }
    if (v16 == 0x65686572706D6F43 && v17 == 0xED00006E6F69736ELL || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Comprehension();
      sub_257038A6C(&qword_269FDD3E8, 255, (void (*)(uint64_t))type metadata accessor for Comprehension);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD3F0;
      uint64_t v21 = type metadata accessor for Comprehension;
      goto LABEL_9;
    }
    if (v16 == 0x706D6F437473694CLL && v17 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ListComp();
      sub_257038A6C(&qword_269FDD3D8, 255, (void (*)(uint64_t))type metadata accessor for ListComp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD3E0;
      uint64_t v21 = type metadata accessor for ListComp;
      goto LABEL_9;
    }
    if (v16 == 0x706D6F43746553 && v17 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for SetComp();
      sub_257038A6C(&qword_269FDD3C8, 255, (void (*)(uint64_t))type metadata accessor for SetComp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD3D0;
      uint64_t v21 = type metadata accessor for SetComp;
      goto LABEL_9;
    }
    if (v16 == 0x706D6F4374636944 && v17 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for DictComp();
      sub_257038A6C(&qword_269FDD3B8, 255, (void (*)(uint64_t))type metadata accessor for DictComp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      uint64_t v14 = v42;
      uint64_t v20 = (unint64_t *)&unk_269FDD3C0;
      uint64_t v21 = type metadata accessor for DictComp;
      goto LABEL_9;
    }
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v28 = v37;
    uint64_t v29 = __swift_project_value_buffer(v37, (uint64_t)qword_269FDD648);
    uint64_t v14 = (uint64_t)v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v36, v29, v28);
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_25704A530();
    os_log_type_t v31 = sub_25704AC60();
    if (os_log_type_enabled(v30, v31))
    {
      long long v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v42 = v33;
      *(_DWORD *)long long v32 = 136315138;
      uint64_t v14 = (uint64_t)(v32 + 12);
      long long v38 = v32 + 4;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_256FFE924(v16, v17, &v42);
      sub_25704AC90();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_256D65000, v30, v31, "Operation %s not supported yet", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v33, -1, -1);
      MEMORY[0x25A2B1FA0](v32, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v37);
    sub_256F92DE8();
    swift_allocError();
    *long long v34 = 43;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
  }
  return v14;
}

uint64_t sub_257034990(uint64_t a1, char a2)
{
  return sub_257030518(a1, a2, &qword_269FDCD88);
}

uint64_t sub_2570349B0(uint64_t a1, char a2)
{
  return sub_257032774(a1, a2, &qword_269FDCDC0);
}

uint64_t sub_2570349D0(uint64_t a1, char a2)
{
  return sub_257032774(a1, a2, &qword_269FDCE50);
}

uint64_t sub_2570349F0(uint64_t a1, char a2)
{
  return sub_257032774(a1, a2, &qword_269FDCEB8);
}

uint64_t sub_257034A10(uint64_t a1, char a2)
{
  return sub_257032774(a1, a2, &qword_269FDCEE8);
}

uint64_t sub_257034A30(uint64_t a1, char a2)
{
  return sub_257030518(a1, a2, &qword_269FDCF20);
}

uint64_t sub_257034A50(uint64_t a1, char a2)
{
  return sub_257030518(a1, a2, &qword_269FDCF48);
}

uint64_t sub_257034A70(uint64_t a1, char a2)
{
  return sub_257032774(a1, a2, &qword_269FDD028);
}

uint64_t sub_257034A90(uint64_t a1, char a2)
{
  return sub_257032774(a1, a2, &qword_269FDD0E0);
}

uint64_t sub_257034AB0(uint64_t a1, char a2)
{
  return sub_257030518(a1, a2, &qword_269FDD1E8);
}

uint64_t sub_257034AD0(uint64_t a1)
{
  return sub_257034AF0(a1, &qword_269FDD210);
}

uint64_t sub_257034AF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = sub_25704A550();
  uint64_t v41 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD3A8);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a2);
  sub_257038A18();
  uint64_t v13 = a1;
  sub_25704B0E0();
  if (!v2)
  {
    uint64_t v36 = v7;
    uint64_t v37 = v5;
    uint64_t v38 = v12;
    uint64_t v39 = (uint8_t *)a1;
    uint64_t v40 = v9;
    LOBYTE(v43) = 0;
    uint64_t v15 = sub_25704B0F0();
    unint64_t v16 = v14;
    unint64_t v17 = v11;
    BOOL v18 = v15 == 0x656D6E6769737341 && v14 == 0xEA0000000000746ELL;
    if (v18 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Assignment();
      sub_257038A6C(&qword_269FDD570, 255, (void (*)(uint64_t))type metadata accessor for Assignment);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD578;
      uint64_t v21 = type metadata accessor for Assignment;
LABEL_9:
      uint64_t v22 = v21;
      uint64_t v23 = 255;
LABEL_10:
      sub_257038A6C(v20, v23, (void (*)(uint64_t))v22);
      return v13;
    }
    BOOL v24 = v15 == 0x7069726373627553 && v16 == 0xE900000000000074;
    if (v24 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Subscript();
      sub_257038A6C(&qword_269FDD560, 255, (void (*)(uint64_t))type metadata accessor for Subscript);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD568;
      uint64_t v21 = type metadata accessor for Subscript;
      goto LABEL_9;
    }
    BOOL v25 = v15 == 0x6563696F6843 && v16 == 0xE600000000000000;
    if (v25 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Choice();
      sub_257038A6C(&qword_269FDD550, 255, (void (*)(uint64_t))type metadata accessor for Choice);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD558;
      uint64_t v21 = type metadata accessor for Choice;
      goto LABEL_9;
    }
    BOOL v26 = v15 == 0x746E6174736E6F43 && v16 == 0xE800000000000000;
    if (v26 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Constant();
      sub_257038A6C(&qword_269FDD540, 255, (void (*)(uint64_t))type metadata accessor for Constant);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD548;
      uint64_t v21 = type metadata accessor for Constant;
      goto LABEL_9;
    }
    if (v15 == 1751343429 && v16 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Each();
      sub_257038A6C(&qword_269FDD530, v27, (void (*)(uint64_t))type metadata accessor for Each);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD538;
      uint64_t v22 = type metadata accessor for Each;
      goto LABEL_10;
    }
    if (v15 == 0x426C61636978654CLL && v16 == 0xEC0000006B636F6CLL || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for LexicalBlock();
      sub_257038A6C((unint64_t *)&qword_269FDCB58, 255, (void (*)(uint64_t))type metadata accessor for LexicalBlock);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD528;
      uint64_t v21 = type metadata accessor for LexicalBlock;
      goto LABEL_9;
    }
    if (v15 == 0x6E7275746552 && v16 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Return();
      sub_257038A6C(&qword_269FDD518, 255, (void (*)(uint64_t))type metadata accessor for Return);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD520;
      uint64_t v21 = type metadata accessor for Return;
      goto LABEL_9;
    }
    if (v15 == 0x73697261706D6F43 && v16 == 0xEA00000000006E6FLL || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Comparison();
      sub_257038A6C(&qword_269FDD508, 255, (void (*)(uint64_t))type metadata accessor for Comparison);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD510;
      uint64_t v21 = type metadata accessor for Comparison;
      goto LABEL_9;
    }
    if (v15 == 0x704F6E6942 && v16 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BinOp();
      sub_257038A6C(&qword_269FDD4F8, 255, (void (*)(uint64_t))type metadata accessor for BinOp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD500;
      uint64_t v21 = type metadata accessor for BinOp;
      goto LABEL_9;
    }
    if (v15 == 1819042115 && v16 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Call();
      sub_257038A6C(&qword_269FDD4E8, 255, (void (*)(uint64_t))type metadata accessor for Call);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD4F0;
      uint64_t v21 = type metadata accessor for Call;
      goto LABEL_9;
    }
    if (v15 == 1701667150 && v16 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Name();
      sub_257038A6C(&qword_269FDD4D8, 255, (void (*)(uint64_t))type metadata accessor for Name);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD4E0;
      uint64_t v21 = type metadata accessor for Name;
      goto LABEL_9;
    }
    if (v15 == 0x7475626972747441 && v16 == 0xE900000000000065 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Attribute();
      sub_257038A6C(&qword_269FDD4C8, 255, (void (*)(uint64_t))type metadata accessor for Attribute);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD4D0;
      uint64_t v21 = type metadata accessor for Attribute;
      goto LABEL_9;
    }
    if (v15 == 0x64726F7779654BLL && v16 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Keyword();
      sub_257038A6C(&qword_269FDD4B8, 255, (void (*)(uint64_t))type metadata accessor for Keyword);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD4C0;
      uint64_t v21 = type metadata accessor for Keyword;
      goto LABEL_9;
    }
    if (v15 == 0x7375656870726F4DLL && v16 == 0xED00007961727241 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusArray();
      sub_257038A6C(&qword_269FDD4A8, 255, (void (*)(uint64_t))type metadata accessor for MorpheusArray);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD4B0;
      uint64_t v21 = type metadata accessor for MorpheusArray;
      goto LABEL_9;
    }
    if (v15 == 0x7375656870726F4DLL && v16 == 0xEC00000074636944 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusDict();
      sub_257038A6C(&qword_269FDD498, 255, (void (*)(uint64_t))type metadata accessor for MorpheusDict);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD4A0;
      uint64_t v21 = type metadata accessor for MorpheusDict;
      goto LABEL_9;
    }
    if (v15 == 0x7375656870726F4DLL && v16 == 0xED00006563696C53 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MorpheusSlice();
      sub_257038A6C(&qword_269FDD488, 255, (void (*)(uint64_t))type metadata accessor for MorpheusSlice);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD490;
      uint64_t v21 = type metadata accessor for MorpheusSlice;
      goto LABEL_9;
    }
    if (v15 == 0x6E6F6974636E7546 && v16 == 0xEB00000000666544 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FunctionDef();
      sub_257038A6C(&qword_269FDD478, 255, (void (*)(uint64_t))type metadata accessor for FunctionDef);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD480;
      uint64_t v21 = type metadata accessor for FunctionDef;
      goto LABEL_9;
    }
    if (v15 == 0x6665447373616C43 && v16 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ClassDef();
      sub_257038A6C(&qword_269FDD468, 255, (void (*)(uint64_t))type metadata accessor for ClassDef);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD470;
      uint64_t v21 = type metadata accessor for ClassDef;
      goto LABEL_9;
    }
    if (v15 == 0x7972616E55 && v16 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Unary();
      sub_257038A6C(&qword_269FDD458, 255, (void (*)(uint64_t))type metadata accessor for Unary);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD460;
      uint64_t v21 = type metadata accessor for Unary;
      goto LABEL_9;
    }
    if (v15 == 0x6573696152 && v16 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Raise();
      sub_257038A6C(&qword_269FDD448, 255, (void (*)(uint64_t))type metadata accessor for Raise);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD450;
      uint64_t v21 = type metadata accessor for Raise;
      goto LABEL_9;
    }
    if (v15 == 0x745364656E696F4ALL && v16 == 0xE900000000000072 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for JoinedStr();
      sub_257038A6C(&qword_269FDD438, 255, (void (*)(uint64_t))type metadata accessor for JoinedStr);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD440;
      uint64_t v21 = type metadata accessor for JoinedStr;
      goto LABEL_9;
    }
    if (v15 == 0x657474616D726F46 && v16 == 0xEE0065756C615664 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for FormattedValue();
      sub_257038A6C(&qword_269FDD428, 255, (void (*)(uint64_t))type metadata accessor for FormattedValue);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD430;
      uint64_t v21 = type metadata accessor for FormattedValue;
      goto LABEL_9;
    }
    if (v15 == 0x704F6C6F6F42 && v16 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for BoolOp();
      sub_257038A6C(&qword_269FDD418, 255, (void (*)(uint64_t))type metadata accessor for BoolOp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD420;
      uint64_t v21 = type metadata accessor for BoolOp;
      goto LABEL_9;
    }
    if (v15 == 0x65756E69746E6F43 && v16 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Continue();
      sub_257038A6C(&qword_269FDD408, 255, (void (*)(uint64_t))type metadata accessor for Continue);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD410;
      uint64_t v21 = type metadata accessor for Continue;
      goto LABEL_9;
    }
    if (v15 == 0x6B61657242 && v16 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Break();
      sub_257038A6C(&qword_269FDD3F8, 255, (void (*)(uint64_t))type metadata accessor for Break);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD400;
      uint64_t v21 = type metadata accessor for Break;
      goto LABEL_9;
    }
    if (v15 == 0x65686572706D6F43 && v16 == 0xED00006E6F69736ELL || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Comprehension();
      sub_257038A6C(&qword_269FDD3E8, 255, (void (*)(uint64_t))type metadata accessor for Comprehension);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD3F0;
      uint64_t v21 = type metadata accessor for Comprehension;
      goto LABEL_9;
    }
    if (v15 == 0x706D6F437473694CLL && v16 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ListComp();
      sub_257038A6C(&qword_269FDD3D8, 255, (void (*)(uint64_t))type metadata accessor for ListComp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD3E0;
      uint64_t v21 = type metadata accessor for ListComp;
      goto LABEL_9;
    }
    if (v15 == 0x706D6F43746553 && v16 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for SetComp();
      sub_257038A6C(&qword_269FDD3C8, 255, (void (*)(uint64_t))type metadata accessor for SetComp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD3D0;
      uint64_t v21 = type metadata accessor for SetComp;
      goto LABEL_9;
    }
    if (v15 == 0x706D6F4374636944 && v16 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for DictComp();
      sub_257038A6C(&qword_269FDD3B8, 255, (void (*)(uint64_t))type metadata accessor for DictComp);
      sub_25704B130();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v8);
      uint64_t v13 = v43;
      uint64_t v20 = (unint64_t *)&unk_269FDD3C0;
      uint64_t v21 = type metadata accessor for DictComp;
      goto LABEL_9;
    }
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v28 = v37;
    uint64_t v29 = __swift_project_value_buffer(v37, (uint64_t)qword_269FDD648);
    uint64_t v13 = (uint64_t)v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v36, v29, v28);
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_25704A530();
    os_log_type_t v31 = sub_25704AC60();
    if (os_log_type_enabled(v30, v31))
    {
      long long v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v43 = v33;
      *(_DWORD *)long long v32 = 136315138;
      uint64_t v13 = (uint64_t)(v32 + 12);
      uint64_t v39 = v32 + 4;
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_256FFE924(v15, v16, &v43);
      sub_25704AC90();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_256D65000, v30, v31, "Operation %s not supported yet", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v33, -1, -1);
      MEMORY[0x25A2B1FA0](v32, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v37);
    sub_256F92DE8();
    swift_allocError();
    *long long v34 = 43;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v8);
  }
  return v13;
}

uint64_t sub_257036C30(uint64_t a1, char a2)
{
  return sub_257030518(a1, a2, &qword_269FDD2E0);
}

uint64_t sub_257036C50(uint64_t a1, char a2)
{
  return sub_257032774(a1, a2, &qword_269FDD340);
}

unint64_t sub_257036C70(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCBC8);
    uint64_t v2 = (void *)sub_25704B080();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v36;
  uint64_t v7 = &v38;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = MEMORY[0x263F8EE58] + 8;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_256FABF38();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = v18 | (i << 6))
  {
    BOOL v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v34 = *v24;
    uint64_t v35 = v24[1];
    type metadata accessor for Function();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_dynamicCast();
    sub_256F9ABF4(v6, v7);
    sub_256F9ABF4(v7, v39);
    sub_256F9ABF4(v39, &v37);
    unint64_t result = sub_256FED050(v34, v35);
    unint64_t v25 = result;
    if (v26)
    {
      unint64_t v33 = v5;
      uint64_t v11 = v7;
      uint64_t v12 = v6;
      uint64_t v13 = v1;
      int64_t v14 = i;
      uint64_t v15 = v10;
      unint64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *unint64_t v16 = v34;
      v16[1] = v35;
      uint64_t v10 = v15;
      int64_t i = v14;
      uint64_t v1 = v13;
      uint64_t v6 = v12;
      uint64_t v7 = v11;
      unint64_t v5 = v33;
      unint64_t v17 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      unint64_t result = (unint64_t)sub_256F9ABF4(&v37, v17);
      if (!v33) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v27 = v34;
    v27[1] = v35;
    unint64_t result = (unint64_t)sub_256F9ABF4(&v37, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v18 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_257036FCC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB88);
    uint64_t v2 = sub_25704B080();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v25 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v24) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v24) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v24) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v24) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v25 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    sub_256F9AC04(*(void *)(a1 + 48) + 40 * v12, (uint64_t)&v40);
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v42 + 8);
    v38[0] = v42[0];
    v38[1] = v42[1];
    uint64_t v39 = v43;
    _OWORD v37[2] = v40;
    void v37[3] = v41;
    long long v26 = v40;
    long long v28 = v41;
    uint64_t v30 = *(void *)&v42[0];
    sub_256F9ABF4((_OWORD *)((char *)v38 + 8), v32);
    long long v33 = v26;
    long long v34 = v28;
    uint64_t v35 = v30;
    sub_256F9ABF4(v32, v36);
    long long v27 = v33;
    long long v29 = v34;
    uint64_t v31 = v35;
    sub_256F9ABF4(v36, v37);
    sub_256F9ABF4(v37, &v33);
    uint64_t result = sub_25704AD80();
    uint64_t v17 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v6 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v18) & ~*(void *)(v6 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)(v6 + 8 * v19);
      }
      while (v23 == -1);
      unint64_t v9 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v27;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_256F9ABF4(&v33, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v24)
  {
LABEL_37:
    swift_release();
    sub_256FABF38();
    return v2;
  }
  unint64_t v14 = *(void *)(v25 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v24) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_257037378(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCBC8);
    uint64_t v2 = (void *)sub_25704B080();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v35 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v34 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v47;
  uint64_t v7 = v45;
  int64_t v8 = &v41;
  unint64_t v9 = &v43;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v36 = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = v36 + 1;
  if (__OFADD__(v36, 1)) {
    goto LABEL_35;
  }
  if (v19 >= v34) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v19);
  int64_t v21 = v36 + 1;
  if (!v20)
  {
    int64_t v21 = v36 + 2;
    if (v36 + 2 >= v34) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = v36 + 3;
      if (v36 + 3 >= v34) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v36 + 4;
        if (v36 + 4 >= v34) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = v36 + 5;
          if (v36 + 5 < v34)
          {
            unint64_t v20 = *(void *)(v35 + 8 * v22);
            if (v20)
            {
              int64_t v21 = v36 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_36;
              }
              if (v21 >= v34) {
                break;
              }
              unint64_t v20 = *(void *)(v35 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_256FABF38();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  int64_t v36 = v21;
  uint64_t v37 = (v20 - 1) & v20;
  for (unint64_t i = __clz(__rbit64(v20)) + (v21 << 6); ; unint64_t i = __clz(__rbit64(v5)) | (v36 << 6))
  {
    uint64_t v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    sub_25701A578(*(void *)(v1 + 56) + 32 * i, (uint64_t)v6);
    *(void *)&long long v46 = v25;
    *((void *)&v46 + 1) = v24;
    uint64_t v44[2] = v46;
    v45[0] = v47[0];
    v45[1] = v47[1];
    uint64_t v39 = v25;
    uint64_t v40 = v24;
    sub_256FEEC3C((uint64_t)v7, (uint64_t)v38);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
    swift_dynamicCast();
    uint64_t v27 = v39;
    uint64_t v26 = v40;
    sub_256F9ABF4(v8, v9);
    sub_256F9ABF4(v9, v44);
    sub_256F9ABF4(v44, &v42);
    unint64_t result = sub_256FED050(v27, v26);
    unint64_t v28 = result;
    if (v29)
    {
      unint64_t v11 = v9;
      unint64_t v12 = v8;
      uint64_t v13 = v1;
      unint64_t v14 = v7;
      int64_t v15 = v6;
      int64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int64_t v16 = v27;
      v16[1] = v26;
      uint64_t v6 = v15;
      uint64_t v7 = v14;
      uint64_t v1 = v13;
      int64_t v8 = v12;
      unint64_t v9 = v11;
      uint64_t v17 = (_OWORD *)(v2[7] + 32 * v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      unint64_t result = (unint64_t)sub_256F9ABF4(&v42, v17);
      unint64_t v5 = v37;
      if (!v37) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v30 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v30 = v27;
    v30[1] = v26;
    unint64_t result = (unint64_t)sub_256F9ABF4(&v42, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v31 = v2[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_34;
    }
    v2[2] = v33;
    unint64_t v5 = v37;
    if (!v37) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v37 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_257037724(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256FF2488(*a1, *a2);
}

uint64_t sub_257037730()
{
  return sub_25704B2B0();
}

uint64_t sub_2570377C8()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25703784C()
{
  return sub_25704B2B0();
}

uint64_t sub_2570378E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_257038CC0();
  *a1 = result;
  return result;
}

void sub_257037910(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xE600000000000000;
  uint64_t v5 = 0x746567726174;
  if (v2 != 1)
  {
    uint64_t v5 = 2036625250;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x65636E6575716573;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_257037964()
{
  uint64_t v1 = 0x746567726174;
  if (*v0 != 1) {
    uint64_t v1 = 2036625250;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65636E6575716573;
  }
}

uint64_t sub_2570379B4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_257038CC0();
  *a1 = result;
  return result;
}

uint64_t sub_2570379DC(uint64_t a1)
{
  unint64_t v2 = sub_2570389C4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_257037A18(uint64_t a1)
{
  unint64_t v2 = sub_2570389C4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_257037A54(void *a1)
{
  return sub_257037AA0(a1);
}

uint64_t sub_257037AA0(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD398);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2570389C4();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Each();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v1[5] = sub_257032774((uint64_t)v8, 0, &qword_269FDD398);
    v1[6] = v10;
    v1[7] = sub_257032774((uint64_t)v8, 1, &qword_269FDD398);
    v1[8] = v11;
    char v14 = 2;
    type metadata accessor for LexicalBlock();
    sub_257038A6C((unint64_t *)&qword_269FDCB58, 255, (void (*)(uint64_t))type metadata accessor for LexicalBlock);
    sub_25704B130();
    v1[9] = v13[0];
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v13);
    uint64_t v3 = sub_257046164(v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_257037D7C@<X0>(uint64_t a1@<X8>)
{
  void (*v18)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned char *v42;
  _OWORD *v43;
  _OWORD v44[2];
  long long v45;
  uint64_t v46;
  uint64_t v47[5];
  long long v48;
  uint64_t v49;
  _UNKNOWN **v50;
  uint64_t v51[3];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  uint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v54 = a1;
  uint64_t v5 = v1[6];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v8 = v1[4];
  unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  v9(v7, v8, ObjectType, v5);
  swift_unknownObjectRelease();
  uint64_t v10 = v1[8];
  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = MEMORY[0x25A2B2020](v1 + 3);
  uint64_t v13 = v1[4];
  char v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  v14(v12, v13, v11, v10);
  swift_unknownObjectRelease();
  uint64_t v15 = v1[9];
  MEMORY[0x25A2B2020](v4 + 3);
  *(void *)(v15 + 32) = v4[4];
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  uint64_t v16 = v4[6];
  uint64_t v17 = swift_getObjectType();
  unint64_t v18 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 64);
  swift_unknownObjectRetain();
  v18(v47, v17, v16);
  if (v3) {
    return swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  sub_25704319C((uint64_t)&v48);
  sub_256FEA220((uint64_t)v47);
  if (v49)
  {
    sub_256FA81EC(&v48, (uint64_t)v51);
    unint64_t v20 = v4[8];
    int64_t v21 = swift_getObjectType();
    int64_t v22 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v20 + 64);
    swift_unknownObjectRetain();
    v22(&v48, v21, v20);
    swift_unknownObjectRelease();
    sub_257046318(v47);
    sub_256FEA220((uint64_t)&v48);
    BOOL v32 = v52;
    uint64_t v33 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
    while (1)
    {
      sub_25704B0A0();
      if (!v46) {
        break;
      }
      sub_256F9ABF4(&v45, v44);
      int64_t v34 = type metadata accessor for LexicalContext();
      uint64_t v35 = (void *)swift_allocObject();
      _OWORD v35[2] = 0x6E776F6E6B6E55;
      v35[3] = 0xE700000000000000;
      int64_t v36 = MEMORY[0x263F8EE78];
      uint64_t v37 = sub_256FEAEFC(MEMORY[0x263F8EE78]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB60);
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = MEMORY[0x263F8EE80];
      swift_beginAccess();
      *(void *)(v38 + 16) = v37;
      swift_bridgeObjectRelease();
      v35[4] = v38;
      v35[5] = sub_256FEB2B0(v36);
      uint64_t v49 = v34;
      uint64_t v50 = &off_27063C628;
      *(void *)&uint64_t v48 = v35;
      swift_retain();
      sub_25702DF1C((uint64_t)v44, (uint64_t)v47, &v48);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
      swift_beginAccess();
      swift_retain();
      swift_retain();
      uint64_t v39 = swift_bridgeObjectRetain();
      uint64_t v40 = sub_257036FCC(v39);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v41 = sub_2570383FC(v40);
      swift_bridgeObjectRelease();
      sub_2570442EC(v41);
      sub_257043F7C((uint64_t)&v48);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      sub_256FEA220((uint64_t)&v48);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    swift_release();
    uint64_t v43 = (_OWORD *)v54;
    *(unsigned char *)(v54 + 32) = 0;
    uint64_t *v43 = 0u;
    v43[1] = 0u;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  }
  else
  {
    sub_257038964((uint64_t)&v48);
    if (qword_269FDC650 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_25704A550();
    __swift_project_value_buffer(v23, (uint64_t)qword_269FDD648);
    swift_retain_n();
    uint64_t v24 = sub_25704A530();
    uint64_t v25 = sub_25704AC60();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      v51[0] = v27;
      *(_DWORD *)uint64_t v26 = 136315394;
      unint64_t v28 = v4[5];
      swift_getObjectType();
      *(void *)&uint64_t v48 = v28;
      char v29 = sub_25704B150();
      *(void *)&uint64_t v48 = sub_256FFE924(v29, v30, v51);
      sub_25704AC90();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2048;
      uint64_t v31 = v4[2];
      swift_release();
      *(void *)&uint64_t v48 = v31;
      sub_25704AC90();
      swift_release();
      _os_log_impl(&dword_256D65000, v24, v25, "Each> %s did not return Sequence. line %ld", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B1FA0](v27, -1, -1);
      MEMORY[0x25A2B1FA0](v26, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    sub_256F92DE8();
    swift_allocError();
    *long long v42 = 40;
    return swift_willThrow();
  }
}

unint64_t sub_2570383FC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCBC8);
    uint64_t v2 = (void *)sub_25704B080();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v24 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)v35 + 8;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v13 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v13 >= v23) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v13);
  int64_t v15 = i + 1;
  if (!v14)
  {
    int64_t v15 = i + 2;
    if (i + 2 >= v23) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v15);
    if (!v14)
    {
      int64_t v15 = i + 3;
      if (i + 3 >= v23) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = i + 4;
        if (i + 4 >= v23) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v15);
        if (!v14)
        {
          int64_t v16 = i + 5;
          if (i + 5 < v23)
          {
            unint64_t v14 = *(void *)(v24 + 8 * v16);
            if (v14)
            {
              int64_t v15 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v15 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_36;
              }
              if (v15 >= v23) {
                break;
              }
              unint64_t v14 = *(void *)(v24 + 8 * v15);
              ++v16;
              if (v14) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_256FABF38();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v14 - 1) & v14;
  unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
  for (i = v15; ; unint64_t v12 = v11 | (i << 6))
  {
    sub_256F9AC04(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v34);
    sub_256FB118C(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v6);
    v32[0] = v35[0];
    v32[1] = v35[1];
    uint64_t v33 = v36;
    _OWORD v31[2] = v34[0];
    void v31[3] = v34[1];
    swift_dynamicCast();
    sub_256F9ABF4((_OWORD *)((char *)v32 + 8), v28);
    sub_256F9ABF4(v28, v30);
    sub_256F9ABF4(v30, v31);
    sub_256F9ABF4(v31, &v29);
    unint64_t result = sub_256FED050(v26, v27);
    unint64_t v17 = result;
    if (v18)
    {
      uint64_t v8 = v6;
      unint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v9 = v26;
      v9[1] = v27;
      uint64_t v6 = v8;
      uint64_t v10 = (_OWORD *)(v2[7] + 32 * v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      unint64_t result = (unint64_t)sub_256F9ABF4(&v29, v10);
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int64_t v19 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v19 = v26;
    v19[1] = v27;
    unint64_t result = (unint64_t)sub_256F9ABF4(&v29, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v20 = v2[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_34;
    }
    v2[2] = v22;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v11 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_25703876C()
{
  sub_25704ADF0();
  swift_bridgeObjectRelease();
  swift_getObjectType();
  sub_25704B150();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  swift_getObjectType();
  sub_25704B150();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  swift_retain();
  unint64_t v0 = sub_25704413C();
  unint64_t v2 = v1;
  swift_release();
  sub_257027BBC(v0, v2);
  swift_bridgeObjectRelease();
  sub_25704A850();
  swift_bridgeObjectRelease();
  sub_25704A850();
  return 544370534;
}

uint64_t sub_2570388B8()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_2570388F0()
{
  sub_256F92F88(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0228](v0, 80, 7);
}

uint64_t type metadata accessor for Each()
{
  return self;
}

uint64_t sub_257038964(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD390);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2570389C4()
{
  unint64_t result = qword_269FDD3A0;
  if (!qword_269FDD3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD3A0);
  }
  return result;
}

unint64_t sub_257038A18()
{
  unint64_t result = qword_269FDD3B0;
  if (!qword_269FDD3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD3B0);
  }
  return result;
}

uint64_t sub_257038A6C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Each.EachCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257038B80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Each.EachCodingKeys()
{
  return &type metadata for Each.EachCodingKeys;
}

unint64_t sub_257038BBC()
{
  unint64_t result = qword_269FDD580;
  if (!qword_269FDD580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD580);
  }
  return result;
}

unint64_t sub_257038C14()
{
  unint64_t result = qword_269FDD588;
  if (!qword_269FDD588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD588);
  }
  return result;
}

unint64_t sub_257038C6C()
{
  unint64_t result = qword_269FDD590;
  if (!qword_269FDD590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD590);
  }
  return result;
}

uint64_t sub_257038CC0()
{
  unint64_t v0 = sub_25704B0C0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

_OWORD *sub_257038D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(v3 + 32);
  *(void *)&long long v17 = a1;
  *((void *)&v17 + 1) = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_25704ADA0();
  swift_beginAccess();
  uint64_t v9 = *(void *)(v8 + 16);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_256FED0C8((uint64_t)v19);
    if (v11)
    {
      sub_256FB118C(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v17);
    }
    else
    {
      long long v17 = 0u;
      long long v18 = 0u;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    swift_release();
  }
  sub_256F9AC98((uint64_t)v19);
  if (*((void *)&v18 + 1)) {
    return sub_256F9ABF4(&v17, (_OWORD *)a3);
  }
  swift_beginAccess();
  uint64_t v13 = *(void *)(v4 + 40);
  if (!*(void *)(v13 + 16)) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_256FED050(a1, a2);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return (_OWORD *)sub_256FF0EF4((uint64_t)&v17);
  }
  uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(a3 + 24) = type metadata accessor for Function();
  *(void *)a3 = v16;
  return (_OWORD *)sub_256FF0EF4((uint64_t)&v17);
}

uint64_t sub_257038EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 32);
  *(void *)&long long v14 = a1;
  *((void *)&v14 + 1) = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_25704ADA0();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 16);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_256FED0C8((uint64_t)v16);
    if (v9)
    {
      sub_256FB118C(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v14);
    }
    else
    {
      long long v14 = 0u;
      long long v15 = 0u;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
    swift_release();
  }
  sub_256F9AC98((uint64_t)v16);
  uint64_t v10 = *((void *)&v15 + 1);
  sub_256FF0EF4((uint64_t)&v14);
  if (v10)
  {
    char v11 = 1;
  }
  else
  {
    swift_beginAccess();
    if (*(void *)(*(void *)(v3 + 40) + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_256FED050(a1, a2);
      char v11 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v11 = 0;
    }
  }
  return v11 & 1;
}

uint64_t sub_257039010(uint64_t a1, uint64_t a2)
{
  sub_256FB118C(a1, (uint64_t)v7);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    swift_retain();
    sub_25704ADA0();
    sub_256FB118C(a2, (uint64_t)v6);
    sub_256F9AC04((uint64_t)v7, (uint64_t)&v5);
    sub_25701A578((uint64_t)v6, (uint64_t)v4);
    swift_beginAccess();
    sub_256FEAC24((uint64_t)v4, (uint64_t)&v5);
    swift_endAccess();
    sub_256F9AC98((uint64_t)v7);
    sub_256FF0EF4((uint64_t)v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_257039108()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 48, 7);
}

uint64_t type metadata accessor for LexicalContext()
{
  return self;
}

uint64_t sub_257039174(uint64_t a1, uint64_t a2)
{
  return sub_257039010(a1, a2);
}

_OWORD *sub_2570391A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_257038D0C(a1, a2, a3);
}

uint64_t sub_2570391C4(uint64_t a1, uint64_t a2)
{
  return sub_257038EAC(a1, a2) & 1;
}

void *sub_2570391EC(void *a1, char a2)
{
  return sub_257039354(a1, a2, &qword_269FDC7A0, (uint64_t)&unk_27063D018, (uint64_t)&unk_27063D040, (uint64_t)&unk_27063D068, (uint64_t)&unk_27063D090, sub_257045194, (uint64_t)&unk_27063D0B8, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_2570392A0(void *a1, char a2)
{
  return sub_257039354(a1, a2, &qword_269FDCB20, (uint64_t)&unk_27063CF50, (uint64_t)&unk_27063CF78, (uint64_t)&unk_27063CFA0, (uint64_t)&unk_27063CFC8, sub_257045194, (uint64_t)&unk_27063CFF0, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_257039354(void *a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, NSObject *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  long long v114 = a8;
  uint64_t v113 = a7;
  uint64_t v112 = a6;
  uint64_t v111 = a5;
  uint64_t v110 = a4;
  char v16 = a2 & 1;
  uint64_t v17 = sub_25704A550();
  uint64_t v115 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  int64_t v19 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD3A8);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  int64_t v23 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v123 = v16;
  uint64_t v122 = (void *)MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(a3);
  sub_25704B0D0();
  if (!v13)
  {
    long long v108 = v23;
    uint64_t v109 = v20;
    int v106 = v19;
    uint64_t v107 = v17;
    sub_256F92F24((uint64_t)&v120, (uint64_t)v118);
    __swift_project_boxed_opaque_existential_1(&v120, v121);
    if (sub_25704B190())
    {
LABEL_3:
      a1 = v122;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
      return a1;
    }
    uint64_t v101 = a13;
    uint64_t v25 = (void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v105 = a12;
    uint64_t v104 = a11;
    uint64_t v103 = a10;
    uint64_t v102 = a9;
    uint64_t v26 = v109;
    uint64_t v27 = v108;
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v118, v119);
      if (sub_25704B190()) {
        goto LABEL_3;
      }
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v118, v119);
      sub_257038A18();
      sub_25704B170();
      LOBYTE(v117) = 0;
      uint64_t v29 = sub_25704B0F0();
      unint64_t v30 = v28;
      BOOL v31 = v29 == 0x656D6E6769737341 && v28 == 0xEA0000000000746ELL;
      if (v31 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Assignment();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD570, 255, (void (*)(uint64_t))type metadata accessor for Assignment);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v34 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v34 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v34 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Assignment;
        uint64_t v38 = (unint64_t *)&unk_269FDD578;
      }
      else if (v29 == 0x7069726373627553 && v30 == 0xE900000000000074 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Subscript();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD560, 255, (void (*)(uint64_t))type metadata accessor for Subscript);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v42 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v42 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v42 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Subscript;
        uint64_t v38 = (unint64_t *)&unk_269FDD568;
      }
      else if (v29 == 0x6563696F6843 && v30 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Choice();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD550, 255, (void (*)(uint64_t))type metadata accessor for Choice);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v43 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v43 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v43 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Choice;
        uint64_t v38 = (unint64_t *)&unk_269FDD558;
      }
      else if (v29 == 0x746E6174736E6F43 && v30 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Constant();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD540, 255, (void (*)(uint64_t))type metadata accessor for Constant);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v44 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v44 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v44 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Constant;
        uint64_t v38 = (unint64_t *)&unk_269FDD548;
      }
      else if (v29 == 1751343429 && v30 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Each();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD530, 255, (void (*)(uint64_t))type metadata accessor for Each);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v45 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v45 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v45 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Each;
        uint64_t v38 = (unint64_t *)&unk_269FDD538;
      }
      else
      {
        if (v29 == 0x426C61636978654CLL && v30 == 0xEC0000006B636F6CLL || (sub_25704B1E0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for LexicalBlock();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
          sub_257044D78((unint64_t *)&qword_269FDCB58, v46, (void (*)(uint64_t))type metadata accessor for LexicalBlock);
          sub_25704B180();
          uint64_t v32 = v117;
          uint64_t v33 = v122;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
          }
          unint64_t v35 = v33[2];
          unint64_t v47 = v33[3];
          unint64_t v36 = v35 + 1;
          if (v35 >= v47 >> 1) {
            uint64_t v33 = sub_256FA5F84((void *)(v47 > 1), v35 + 1, 1, v33);
          }
          uint64_t v37 = type metadata accessor for LexicalBlock;
          uint64_t v38 = (unint64_t *)&unk_269FDD528;
          goto LABEL_18;
        }
        if ((v29 != 0x6E7275746552 || v30 != 0xE600000000000000) && (sub_25704B1E0() & 1) == 0)
        {
          if (v29 == 0x73697261706D6F43 && v30 == 0xEA00000000006E6FLL || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Comparison();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD508, 255, (void (*)(uint64_t))type metadata accessor for Comparison);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v51 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v51 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v51 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for Comparison;
            int64_t v55 = (unint64_t *)&unk_269FDD510;
            goto LABEL_77;
          }
          if (v29 == 0x704F6E6942 && v30 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for BinOp();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4F8, 255, (void (*)(uint64_t))type metadata accessor for BinOp);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v58 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v58 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v58 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for BinOp;
            int64_t v55 = (unint64_t *)&unk_269FDD500;
            goto LABEL_77;
          }
          if (v29 == 1819042115 && v30 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Call();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4E8, 255, (void (*)(uint64_t))type metadata accessor for Call);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v59 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v59 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v59 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for Call;
            int64_t v55 = (unint64_t *)&unk_269FDD4F0;
            goto LABEL_77;
          }
          if (v29 == 1701667150 && v30 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Name();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4D8, 255, (void (*)(uint64_t))type metadata accessor for Name);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v60 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v60 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v60 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for Name;
            int64_t v55 = (unint64_t *)&unk_269FDD4E0;
            goto LABEL_77;
          }
          if (v29 == 0x7475626972747441 && v30 == 0xE900000000000065 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Attribute();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4C8, 255, (void (*)(uint64_t))type metadata accessor for Attribute);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v61 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v61 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v61 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for Attribute;
            int64_t v55 = (unint64_t *)&unk_269FDD4D0;
            goto LABEL_77;
          }
          if (v29 == 0x64726F7779654BLL && v30 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Keyword();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4B8, 255, (void (*)(uint64_t))type metadata accessor for Keyword);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v62 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v62 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v62 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for Keyword;
            int64_t v55 = (unint64_t *)&unk_269FDD4C0;
            goto LABEL_77;
          }
          if (v29 == 0x7375656870726F4DLL && v30 == 0xED00007961727241 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for MorpheusArray();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4A8, 255, (void (*)(uint64_t))type metadata accessor for MorpheusArray);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v63 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v63 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v63 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for MorpheusArray;
            int64_t v55 = (unint64_t *)&unk_269FDD4B0;
            goto LABEL_77;
          }
          if (v29 == 0x7375656870726F4DLL && v30 == 0xEC00000074636944 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for MorpheusDict();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD498, 255, (void (*)(uint64_t))type metadata accessor for MorpheusDict);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v64 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v64 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v64 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for MorpheusDict;
            int64_t v55 = (unint64_t *)&unk_269FDD4A0;
LABEL_77:
            uint64_t v56 = sub_257044D78(v55, 255, (void (*)(uint64_t))v54);
            v50[2] = v53;
            uint64_t v57 = &v50[2 * v52];
            v57[4] = v49;
            v57[5] = v56;
            uint64_t v122 = v50;
          }
          else
          {
            if (v29 == 0x7375656870726F4DLL && v30 == 0xED00006563696C53 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for MorpheusSlice();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD488, 255, (void (*)(uint64_t))type metadata accessor for MorpheusSlice);
              sub_25704B180();
              uint64_t v65 = v117;
              uint64_t v66 = v122;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v122 = v66;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                uint64_t v66 = sub_256FA5F84(0, v66[2] + 1, 1, v66);
                uint64_t v122 = v66;
              }
              unint64_t v69 = v66[2];
              unint64_t v68 = v66[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v68 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v68 > 1), v69 + 1, 1, v66);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for MorpheusSlice;
              uint64_t v72 = (unint64_t *)&unk_269FDD490;
            }
            else if (v29 == 0x6E6F6974636E7546 && v30 == 0xEB00000000666544 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for FunctionDef();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD478, 255, (void (*)(uint64_t))type metadata accessor for FunctionDef);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v75 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v75 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v75 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for FunctionDef;
              uint64_t v72 = (unint64_t *)&unk_269FDD480;
            }
            else if (v29 == 0x6665447373616C43 && v30 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for ClassDef();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD468, 255, (void (*)(uint64_t))type metadata accessor for ClassDef);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v76 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v76 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v76 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for ClassDef;
              uint64_t v72 = (unint64_t *)&unk_269FDD470;
            }
            else if (v29 == 0x7972616E55 && v30 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Unary();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD458, 255, (void (*)(uint64_t))type metadata accessor for Unary);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v77 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v77 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v77 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for Unary;
              uint64_t v72 = (unint64_t *)&unk_269FDD460;
            }
            else if (v29 == 0x6573696152 && v30 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Raise();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD448, 255, (void (*)(uint64_t))type metadata accessor for Raise);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v78 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v78 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v78 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for Raise;
              uint64_t v72 = (unint64_t *)&unk_269FDD450;
            }
            else if (v29 == 0x745364656E696F4ALL && v30 == 0xE900000000000072 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for JoinedStr();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD438, 255, (void (*)(uint64_t))type metadata accessor for JoinedStr);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v79 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v79 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v79 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for JoinedStr;
              uint64_t v72 = (unint64_t *)&unk_269FDD440;
            }
            else if (v29 == 0x657474616D726F46 && v30 == 0xEE0065756C615664 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for FormattedValue();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD428, 255, (void (*)(uint64_t))type metadata accessor for FormattedValue);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v80 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v80 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v80 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for FormattedValue;
              uint64_t v72 = (unint64_t *)&unk_269FDD430;
            }
            else if (v29 == 0x704F6C6F6F42 && v30 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for BoolOp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD418, 255, (void (*)(uint64_t))type metadata accessor for BoolOp);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v81 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v81 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v81 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for BoolOp;
              uint64_t v72 = (unint64_t *)&unk_269FDD420;
            }
            else if (v29 == 0x65756E69746E6F43 && v30 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Continue();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD408, 255, (void (*)(uint64_t))type metadata accessor for Continue);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v82 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v82 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v82 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for Continue;
              uint64_t v72 = (unint64_t *)&unk_269FDD410;
            }
            else if (v29 == 0x6B61657242 && v30 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Break();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD3F8, 255, (void (*)(uint64_t))type metadata accessor for Break);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v83 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v83 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v83 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for Break;
              uint64_t v72 = (unint64_t *)&unk_269FDD400;
            }
            else if (v29 == 0x65686572706D6F43 && v30 == 0xED00006E6F69736ELL || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Comprehension();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD3E8, 255, (void (*)(uint64_t))type metadata accessor for Comprehension);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v84 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v84 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v84 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for Comprehension;
              uint64_t v72 = (unint64_t *)&unk_269FDD3F0;
            }
            else if (v29 == 0x706D6F437473694CLL && v30 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for ListComp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD3D8, 255, (void (*)(uint64_t))type metadata accessor for ListComp);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v85 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v85 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v85 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for ListComp;
              uint64_t v72 = (unint64_t *)&unk_269FDD3E0;
            }
            else if (v29 == 0x706D6F43746553 && v30 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for SetComp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD3C8, 255, (void (*)(uint64_t))type metadata accessor for SetComp);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v86 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v86 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v86 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for SetComp;
              uint64_t v72 = (unint64_t *)&unk_269FDD3D0;
            }
            else
            {
              if ((v29 != 0x706D6F4374636944 || v30 != 0xE800000000000000) && (sub_25704B1E0() & 1) == 0)
              {
                swift_bridgeObjectRelease();
                if (qword_269FDC650 != -1) {
                  swift_once();
                }
                uint64_t v88 = v107;
                uint64_t v89 = __swift_project_value_buffer(v107, (uint64_t)qword_269FDD648);
                (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v106, v89, v88);
                uint64_t v90 = swift_allocObject();
                *(void *)(v90 + 16) = v29;
                *(void *)(v90 + 24) = v30;
                swift_bridgeObjectRetain();
                uint64_t v91 = sub_25704A530();
                LODWORD(v110) = sub_25704AC60();
                uint64_t v92 = swift_allocObject();
                *(unsigned char *)(v92 + 16) = 32;
                uint64_t v93 = swift_allocObject();
                *(unsigned char *)(v93 + 16) = 8;
                a1 = (void *)swift_allocObject();
                a1[2] = v114;
                a1[3] = v90;
                uint64_t v94 = swift_allocObject();
                *(void *)(v94 + 16) = v103;
                *(void *)(v94 + 24) = a1;
                __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD5A8);
                uint64_t inited = swift_initStackObject();
                *(_OWORD *)(inited + 16) = xmmword_257072C60;
                *(void *)(inited + 32) = v104;
                *(void *)(inited + 40) = v92;
                *(void *)(inited + 48) = v105;
                *(void *)(inited + 56) = v93;
                *(void *)(inited + 64) = v101;
                *(void *)(inited + 72) = v94;
                swift_retain();
                swift_retain();
                uint64_t v113 = v92;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                os_log_type_t v96 = v110;
                long long v114 = v91;
                if (os_log_type_enabled(v91, (os_log_type_t)v110))
                {
                  uint64_t v97 = (uint8_t *)swift_slowAlloc();
                  uint64_t v112 = swift_slowAlloc();
                  uint64_t v117 = v112;
                  *(_WORD *)uint64_t v97 = 258;
                  v97[2] = 32;
                  swift_release();
                  v97[3] = 8;
                  swift_release();
                  swift_bridgeObjectRetain();
                  uint64_t v116 = sub_256FFE924(v29, v30, &v117);
                  sub_25704AC90();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease_n();
                  uint64_t v98 = v114;
                  _os_log_impl(&dword_256D65000, v114, v96, "Operation %s not supported yet", v97, 0xCu);
                  a1 = (void *)v112;
                  swift_arrayDestroy();
                  MEMORY[0x25A2B1FA0](a1, -1, -1);
                  MEMORY[0x25A2B1FA0](v97, -1, -1);
                }
                else
                {

                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                }
                (*(void (**)(char *, uint64_t))(v115 + 8))(v106, v107);
                sub_256F92DE8();
                swift_allocError();
                *uint64_t v99 = 43;
                swift_willThrow();
                (*v25)(v108, v109);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
                return a1;
              }
              swift_bridgeObjectRelease();
              type metadata accessor for DictComp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD3B8, 255, (void (*)(uint64_t))type metadata accessor for DictComp);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v87 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v87 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v87 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for DictComp;
              uint64_t v72 = (unint64_t *)&unk_269FDD3C0;
            }
            uint64_t v73 = sub_257044D78(v72, 255, (void (*)(uint64_t))v71);
            long long v66[2] = v70;
            uint64_t v74 = &v66[2 * v69];
            v74[4] = v65;
            v74[5] = v73;
          }
          uint64_t v27 = v108;
          uint64_t v26 = v109;
          (*v25)(v108, v109);
          goto LABEL_19;
        }
        swift_bridgeObjectRelease();
        type metadata accessor for Return();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD518, 255, (void (*)(uint64_t))type metadata accessor for Return);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v48 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v48 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v48 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Return;
        uint64_t v38 = (unint64_t *)&unk_269FDD520;
      }
      uint64_t v39 = 255;
LABEL_18:
      uint64_t v40 = sub_257044D78(v38, v39, (void (*)(uint64_t))v37);
      v33[2] = v36;
      uint64_t v41 = &v33[2 * v35];
      v41[4] = v32;
      v41[5] = v40;
      uint64_t v122 = v33;
      (*v25)(v27, v26);
LABEL_19:
      __swift_project_boxed_opaque_existential_1(&v120, v121);
      if (sub_25704B190()) {
        goto LABEL_3;
      }
    }
  }
  return a1;
}

void *sub_25703C518(void *a1, char a2)
{
  return sub_257039354(a1, a2, &qword_269FDCCB8, (uint64_t)&unk_27063CE88, (uint64_t)&unk_27063CEB0, (uint64_t)&unk_27063CED8, (uint64_t)&unk_27063CF00, sub_257045194, (uint64_t)&unk_27063CF28, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_25703C5CC(void *a1, char a2)
{
  return sub_25703C734(a1, a2, &qword_269FDCDC0, (uint64_t)&unk_27063CDC0, (uint64_t)&unk_27063CDE8, (uint64_t)&unk_27063CE10, (uint64_t)&unk_27063CE38, sub_257045194, (uint64_t)&unk_27063CE60, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_25703C680(void *a1, char a2)
{
  return sub_25703C734(a1, a2, &qword_269FDCEB8, (uint64_t)&unk_27063CCF8, (uint64_t)&unk_27063CD20, (uint64_t)&unk_27063CD48, (uint64_t)&unk_27063CD70, sub_257045194, (uint64_t)&unk_27063CD98, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_25703C734(void *a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, NSObject *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  long long v114 = a8;
  uint64_t v113 = a7;
  uint64_t v112 = a6;
  uint64_t v111 = a5;
  uint64_t v110 = a4;
  uint64_t v17 = sub_25704A550();
  uint64_t v115 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  int64_t v19 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD3A8);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  int64_t v23 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v123 = a2;
  uint64_t v122 = (void *)MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(a3);
  sub_25704B0D0();
  if (!v13)
  {
    long long v108 = v23;
    uint64_t v109 = v20;
    uint64_t v107 = v19;
    sub_256F92F24((uint64_t)&v120, (uint64_t)v118);
    __swift_project_boxed_opaque_existential_1(&v120, v121);
    if (sub_25704B190())
    {
LABEL_3:
      a1 = v122;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
      return a1;
    }
    uint64_t v106 = v17;
    uint64_t v101 = a13;
    uint64_t v25 = (void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v105 = a12;
    uint64_t v104 = a11;
    uint64_t v103 = a10;
    uint64_t v102 = a9;
    uint64_t v26 = v109;
    uint64_t v27 = v108;
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v118, v119);
      if (sub_25704B190()) {
        goto LABEL_3;
      }
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v118, v119);
      sub_257038A18();
      sub_25704B170();
      LOBYTE(v117) = 0;
      uint64_t v29 = sub_25704B0F0();
      unint64_t v30 = v28;
      BOOL v31 = v29 == 0x656D6E6769737341 && v28 == 0xEA0000000000746ELL;
      if (v31 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Assignment();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD570, 255, (void (*)(uint64_t))type metadata accessor for Assignment);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v34 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v34 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v34 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Assignment;
        uint64_t v38 = (unint64_t *)&unk_269FDD578;
      }
      else if (v29 == 0x7069726373627553 && v30 == 0xE900000000000074 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Subscript();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD560, 255, (void (*)(uint64_t))type metadata accessor for Subscript);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v42 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v42 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v42 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Subscript;
        uint64_t v38 = (unint64_t *)&unk_269FDD568;
      }
      else if (v29 == 0x6563696F6843 && v30 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Choice();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD550, 255, (void (*)(uint64_t))type metadata accessor for Choice);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v43 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v43 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v43 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Choice;
        uint64_t v38 = (unint64_t *)&unk_269FDD558;
      }
      else if (v29 == 0x746E6174736E6F43 && v30 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Constant();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD540, 255, (void (*)(uint64_t))type metadata accessor for Constant);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v44 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v44 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v44 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Constant;
        uint64_t v38 = (unint64_t *)&unk_269FDD548;
      }
      else if (v29 == 1751343429 && v30 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Each();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD530, 255, (void (*)(uint64_t))type metadata accessor for Each);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v45 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v45 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v45 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Each;
        uint64_t v38 = (unint64_t *)&unk_269FDD538;
      }
      else
      {
        if (v29 == 0x426C61636978654CLL && v30 == 0xEC0000006B636F6CLL || (sub_25704B1E0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for LexicalBlock();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
          sub_257044D78((unint64_t *)&qword_269FDCB58, v46, (void (*)(uint64_t))type metadata accessor for LexicalBlock);
          sub_25704B180();
          uint64_t v32 = v117;
          uint64_t v33 = v122;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
          }
          unint64_t v35 = v33[2];
          unint64_t v47 = v33[3];
          unint64_t v36 = v35 + 1;
          if (v35 >= v47 >> 1) {
            uint64_t v33 = sub_256FA5F84((void *)(v47 > 1), v35 + 1, 1, v33);
          }
          uint64_t v37 = type metadata accessor for LexicalBlock;
          uint64_t v38 = (unint64_t *)&unk_269FDD528;
          goto LABEL_18;
        }
        if ((v29 != 0x6E7275746552 || v30 != 0xE600000000000000) && (sub_25704B1E0() & 1) == 0)
        {
          if (v29 == 0x73697261706D6F43 && v30 == 0xEA00000000006E6FLL || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Comparison();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD508, 255, (void (*)(uint64_t))type metadata accessor for Comparison);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v51 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v51 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v51 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for Comparison;
            int64_t v55 = (unint64_t *)&unk_269FDD510;
            goto LABEL_77;
          }
          if (v29 == 0x704F6E6942 && v30 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for BinOp();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4F8, 255, (void (*)(uint64_t))type metadata accessor for BinOp);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v58 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v58 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v58 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for BinOp;
            int64_t v55 = (unint64_t *)&unk_269FDD500;
            goto LABEL_77;
          }
          if (v29 == 1819042115 && v30 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Call();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4E8, 255, (void (*)(uint64_t))type metadata accessor for Call);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v59 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v59 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v59 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for Call;
            int64_t v55 = (unint64_t *)&unk_269FDD4F0;
            goto LABEL_77;
          }
          if (v29 == 1701667150 && v30 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Name();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4D8, 255, (void (*)(uint64_t))type metadata accessor for Name);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v60 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v60 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v60 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for Name;
            int64_t v55 = (unint64_t *)&unk_269FDD4E0;
            goto LABEL_77;
          }
          if (v29 == 0x7475626972747441 && v30 == 0xE900000000000065 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Attribute();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4C8, 255, (void (*)(uint64_t))type metadata accessor for Attribute);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v61 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v61 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v61 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for Attribute;
            int64_t v55 = (unint64_t *)&unk_269FDD4D0;
            goto LABEL_77;
          }
          if (v29 == 0x64726F7779654BLL && v30 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Keyword();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4B8, 255, (void (*)(uint64_t))type metadata accessor for Keyword);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v62 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v62 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v62 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for Keyword;
            int64_t v55 = (unint64_t *)&unk_269FDD4C0;
            goto LABEL_77;
          }
          if (v29 == 0x7375656870726F4DLL && v30 == 0xED00007961727241 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for MorpheusArray();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD4A8, 255, (void (*)(uint64_t))type metadata accessor for MorpheusArray);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v63 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v63 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v63 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for MorpheusArray;
            int64_t v55 = (unint64_t *)&unk_269FDD4B0;
            goto LABEL_77;
          }
          if (v29 == 0x7375656870726F4DLL && v30 == 0xEC00000074636944 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for MorpheusDict();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
            sub_257044D78(&qword_269FDD498, 255, (void (*)(uint64_t))type metadata accessor for MorpheusDict);
            sub_25704B180();
            uint64_t v49 = v117;
            uint64_t v50 = v122;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v50 = sub_256FA5F84(0, v50[2] + 1, 1, v50);
            }
            unint64_t v52 = v50[2];
            unint64_t v64 = v50[3];
            unint64_t v53 = v52 + 1;
            if (v52 >= v64 >> 1) {
              uint64_t v50 = sub_256FA5F84((void *)(v64 > 1), v52 + 1, 1, v50);
            }
            uint64_t v54 = type metadata accessor for MorpheusDict;
            int64_t v55 = (unint64_t *)&unk_269FDD4A0;
LABEL_77:
            uint64_t v56 = sub_257044D78(v55, 255, (void (*)(uint64_t))v54);
            v50[2] = v53;
            uint64_t v57 = &v50[2 * v52];
            v57[4] = v49;
            v57[5] = v56;
            uint64_t v122 = v50;
          }
          else
          {
            if (v29 == 0x7375656870726F4DLL && v30 == 0xED00006563696C53 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for MorpheusSlice();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD488, 255, (void (*)(uint64_t))type metadata accessor for MorpheusSlice);
              sub_25704B180();
              uint64_t v65 = v117;
              uint64_t v66 = v122;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v122 = v66;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                uint64_t v66 = sub_256FA5F84(0, v66[2] + 1, 1, v66);
                uint64_t v122 = v66;
              }
              unint64_t v69 = v66[2];
              unint64_t v68 = v66[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v68 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v68 > 1), v69 + 1, 1, v66);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for MorpheusSlice;
              uint64_t v72 = (unint64_t *)&unk_269FDD490;
            }
            else if (v29 == 0x6E6F6974636E7546 && v30 == 0xEB00000000666544 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for FunctionDef();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD478, 255, (void (*)(uint64_t))type metadata accessor for FunctionDef);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v75 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v75 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v75 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for FunctionDef;
              uint64_t v72 = (unint64_t *)&unk_269FDD480;
            }
            else if (v29 == 0x6665447373616C43 && v30 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for ClassDef();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD468, 255, (void (*)(uint64_t))type metadata accessor for ClassDef);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v76 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v76 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v76 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for ClassDef;
              uint64_t v72 = (unint64_t *)&unk_269FDD470;
            }
            else if (v29 == 0x7972616E55 && v30 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Unary();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD458, 255, (void (*)(uint64_t))type metadata accessor for Unary);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v77 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v77 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v77 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for Unary;
              uint64_t v72 = (unint64_t *)&unk_269FDD460;
            }
            else if (v29 == 0x6573696152 && v30 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Raise();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD448, 255, (void (*)(uint64_t))type metadata accessor for Raise);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v78 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v78 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v78 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for Raise;
              uint64_t v72 = (unint64_t *)&unk_269FDD450;
            }
            else if (v29 == 0x745364656E696F4ALL && v30 == 0xE900000000000072 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for JoinedStr();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD438, 255, (void (*)(uint64_t))type metadata accessor for JoinedStr);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v79 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v79 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v79 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for JoinedStr;
              uint64_t v72 = (unint64_t *)&unk_269FDD440;
            }
            else if (v29 == 0x657474616D726F46 && v30 == 0xEE0065756C615664 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for FormattedValue();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD428, 255, (void (*)(uint64_t))type metadata accessor for FormattedValue);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v80 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v80 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v80 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for FormattedValue;
              uint64_t v72 = (unint64_t *)&unk_269FDD430;
            }
            else if (v29 == 0x704F6C6F6F42 && v30 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for BoolOp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD418, 255, (void (*)(uint64_t))type metadata accessor for BoolOp);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v81 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v81 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v81 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for BoolOp;
              uint64_t v72 = (unint64_t *)&unk_269FDD420;
            }
            else if (v29 == 0x65756E69746E6F43 && v30 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Continue();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD408, 255, (void (*)(uint64_t))type metadata accessor for Continue);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v82 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v82 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v82 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for Continue;
              uint64_t v72 = (unint64_t *)&unk_269FDD410;
            }
            else if (v29 == 0x6B61657242 && v30 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Break();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD3F8, 255, (void (*)(uint64_t))type metadata accessor for Break);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v83 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v83 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v83 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for Break;
              uint64_t v72 = (unint64_t *)&unk_269FDD400;
            }
            else if (v29 == 0x65686572706D6F43 && v30 == 0xED00006E6F69736ELL || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Comprehension();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD3E8, 255, (void (*)(uint64_t))type metadata accessor for Comprehension);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v84 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v84 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v84 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for Comprehension;
              uint64_t v72 = (unint64_t *)&unk_269FDD3F0;
            }
            else if (v29 == 0x706D6F437473694CLL && v30 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for ListComp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD3D8, 255, (void (*)(uint64_t))type metadata accessor for ListComp);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v85 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v85 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v85 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for ListComp;
              uint64_t v72 = (unint64_t *)&unk_269FDD3E0;
            }
            else if (v29 == 0x706D6F43746553 && v30 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for SetComp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD3C8, 255, (void (*)(uint64_t))type metadata accessor for SetComp);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v86 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v86 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v86 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for SetComp;
              uint64_t v72 = (unint64_t *)&unk_269FDD3D0;
            }
            else
            {
              if ((v29 != 0x706D6F4374636944 || v30 != 0xE800000000000000) && (sub_25704B1E0() & 1) == 0)
              {
                swift_bridgeObjectRelease();
                if (qword_269FDC650 != -1) {
                  swift_once();
                }
                uint64_t v88 = v106;
                uint64_t v89 = __swift_project_value_buffer(v106, (uint64_t)qword_269FDD648);
                (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v107, v89, v88);
                uint64_t v90 = swift_allocObject();
                *(void *)(v90 + 16) = v29;
                *(void *)(v90 + 24) = v30;
                swift_bridgeObjectRetain();
                uint64_t v91 = sub_25704A530();
                LODWORD(v110) = sub_25704AC60();
                uint64_t v92 = swift_allocObject();
                *(unsigned char *)(v92 + 16) = 32;
                uint64_t v93 = swift_allocObject();
                *(unsigned char *)(v93 + 16) = 8;
                a1 = (void *)swift_allocObject();
                a1[2] = v114;
                a1[3] = v90;
                uint64_t v94 = swift_allocObject();
                *(void *)(v94 + 16) = v103;
                *(void *)(v94 + 24) = a1;
                __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD5A8);
                uint64_t inited = swift_initStackObject();
                *(_OWORD *)(inited + 16) = xmmword_257072C60;
                *(void *)(inited + 32) = v104;
                *(void *)(inited + 40) = v92;
                *(void *)(inited + 48) = v105;
                *(void *)(inited + 56) = v93;
                *(void *)(inited + 64) = v101;
                *(void *)(inited + 72) = v94;
                swift_retain();
                swift_retain();
                uint64_t v113 = v92;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                os_log_type_t v96 = v110;
                long long v114 = v91;
                if (os_log_type_enabled(v91, (os_log_type_t)v110))
                {
                  uint64_t v97 = (uint8_t *)swift_slowAlloc();
                  uint64_t v112 = swift_slowAlloc();
                  uint64_t v117 = v112;
                  *(_WORD *)uint64_t v97 = 258;
                  v97[2] = 32;
                  swift_release();
                  v97[3] = 8;
                  swift_release();
                  swift_bridgeObjectRetain();
                  uint64_t v116 = sub_256FFE924(v29, v30, &v117);
                  sub_25704AC90();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease_n();
                  uint64_t v98 = v114;
                  _os_log_impl(&dword_256D65000, v114, v96, "Operation %s not supported yet", v97, 0xCu);
                  a1 = (void *)v112;
                  swift_arrayDestroy();
                  MEMORY[0x25A2B1FA0](a1, -1, -1);
                  MEMORY[0x25A2B1FA0](v97, -1, -1);
                }
                else
                {

                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                }
                (*(void (**)(char *, uint64_t))(v115 + 8))(v107, v106);
                sub_256F92DE8();
                swift_allocError();
                *uint64_t v99 = 43;
                swift_willThrow();
                (*v25)(v108, v109);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
                return a1;
              }
              swift_bridgeObjectRelease();
              type metadata accessor for DictComp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
              sub_257044D78(&qword_269FDD3B8, 255, (void (*)(uint64_t))type metadata accessor for DictComp);
              sub_25704B180();
              uint64_t v65 = v117;
              sub_257044CB4();
              uint64_t v66 = v122;
              unint64_t v69 = v122[2];
              unint64_t v87 = v122[3];
              unint64_t v70 = v69 + 1;
              if (v69 >= v87 >> 1)
              {
                uint64_t v66 = sub_256FA5F84((void *)(v87 > 1), v69 + 1, 1, v122);
                uint64_t v122 = v66;
              }
              uint64_t v71 = type metadata accessor for DictComp;
              uint64_t v72 = (unint64_t *)&unk_269FDD3C0;
            }
            uint64_t v73 = sub_257044D78(v72, 255, (void (*)(uint64_t))v71);
            long long v66[2] = v70;
            uint64_t v74 = &v66[2 * v69];
            v74[4] = v65;
            v74[5] = v73;
          }
          uint64_t v27 = v108;
          uint64_t v26 = v109;
          (*v25)(v108, v109);
          goto LABEL_19;
        }
        swift_bridgeObjectRelease();
        type metadata accessor for Return();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, v121);
        sub_257044D78(&qword_269FDD518, 255, (void (*)(uint64_t))type metadata accessor for Return);
        sub_25704B180();
        uint64_t v32 = v117;
        uint64_t v33 = v122;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = sub_256FA5F84(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v48 = v33[3];
        unint64_t v36 = v35 + 1;
        if (v35 >= v48 >> 1) {
          uint64_t v33 = sub_256FA5F84((void *)(v48 > 1), v35 + 1, 1, v33);
        }
        uint64_t v37 = type metadata accessor for Return;
        uint64_t v38 = (unint64_t *)&unk_269FDD520;
      }
      uint64_t v39 = 255;
LABEL_18:
      uint64_t v40 = sub_257044D78(v38, v39, (void (*)(uint64_t))v37);
      v33[2] = v36;
      uint64_t v41 = &v33[2 * v35];
      v41[4] = v32;
      v41[5] = v40;
      uint64_t v122 = v33;
      (*v25)(v27, v26);
LABEL_19:
      __swift_project_boxed_opaque_existential_1(&v120, v121);
      if (sub_25704B190()) {
        goto LABEL_3;
      }
    }
  }
  return a1;
}

void *sub_25703F8F0(void *a1)
{
  return sub_25703FDDC(a1, &qword_269FDCFF8, (uint64_t)&unk_27063CC30, (uint64_t)&unk_27063CC58, (uint64_t)&unk_27063CC80, (uint64_t)&unk_27063CCA8, (uint64_t)sub_257045194, &unk_27063CCD0, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_25703F9A4(void *a1, char a2)
{
  return sub_257039354(a1, a2, &qword_269FDD060, (uint64_t)&unk_27063CB68, (uint64_t)&unk_27063CB90, (uint64_t)&unk_27063CBB8, (uint64_t)&unk_27063CBE0, sub_257045194, (uint64_t)&unk_27063CC08, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_25703FA58(void *a1, char a2)
{
  return sub_25703C734(a1, a2, &qword_269FDD088, (uint64_t)&unk_27063CA78, (uint64_t)&unk_27063CAA0, (uint64_t)&unk_27063CAC8, (uint64_t)&unk_27063CAF0, sub_257045194, (uint64_t)&unk_27063CB18, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_25703FB0C(void *a1, char a2)
{
  return sub_25703C734(a1, a2, &qword_269FDD0E0, (uint64_t)&unk_27063C9B0, (uint64_t)&unk_27063C9D8, (uint64_t)&unk_27063CA00, (uint64_t)&unk_27063CA28, sub_257045194, (uint64_t)&unk_27063CA50, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_25703FBC0(void *a1, char a2)
{
  return sub_257039354(a1, a2, &qword_269FDD1C0, (uint64_t)&unk_27063C8E8, (uint64_t)&unk_27063C910, (uint64_t)&unk_27063C938, (uint64_t)&unk_27063C960, sub_257045194, (uint64_t)&unk_27063C988, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_25703FC74(void *a1, char a2)
{
  return sub_257039354(a1, a2, &qword_269FDD238, (uint64_t)&unk_27063C820, (uint64_t)&unk_27063C848, (uint64_t)&unk_27063C870, (uint64_t)&unk_27063C898, sub_257045194, (uint64_t)&unk_27063C8C0, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_25703FD28(void *a1, char a2)
{
  return sub_25703C734(a1, a2, &qword_269FDD340, (uint64_t)&unk_27063C758, (uint64_t)&unk_27063C780, (uint64_t)&unk_27063C7A8, (uint64_t)&unk_27063C7D0, sub_257045194, (uint64_t)&unk_27063C7F8, (uint64_t)sub_257045198, (uint64_t)sub_2570451A0, (uint64_t)sub_2570451A0, (uint64_t)sub_25704519C);
}

void *sub_25703FDDC(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, NSObject *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v113 = a8;
  uint64_t v108 = a7;
  uint64_t v112 = a6;
  uint64_t v111 = a5;
  uint64_t v110 = a4;
  uint64_t v109 = a3;
  uint64_t v15 = sub_25704A550();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD3A8);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = (void *)MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  sub_25704B0D0();
  if (!v12)
  {
    uint64_t v106 = v22;
    uint64_t v107 = v19;
    uint64_t v104 = v18;
    uint64_t v105 = v16;
    sub_256F92F24((uint64_t)&v118, (uint64_t)v116);
    __swift_project_boxed_opaque_existential_1(&v118, v119);
    if (sub_25704B190())
    {
LABEL_3:
      a1 = v120;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
      return a1;
    }
    uint64_t v103 = v15;
    uint64_t v24 = (void (**)(char *, uint64_t))(v20 + 8);
    uint64_t v102 = a12;
    uint64_t v101 = a11;
    uint64_t v100 = a10;
    uint64_t v99 = a9;
    uint64_t v25 = v107;
    uint64_t v26 = v106;
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v116, v117);
      if (sub_25704B190()) {
        goto LABEL_3;
      }
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v116, v117);
      sub_257038A18();
      sub_25704B170();
      LOBYTE(v115) = 0;
      uint64_t v28 = sub_25704B0F0();
      unint64_t v29 = v27;
      BOOL v30 = v28 == 0x656D6E6769737341 && v27 == 0xEA0000000000746ELL;
      if (v30 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Assignment();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
        sub_257044D78(&qword_269FDD570, 255, (void (*)(uint64_t))type metadata accessor for Assignment);
        sub_25704B180();
        uint64_t v31 = v115;
        uint64_t v32 = v120;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = sub_256FA5F84(0, v32[2] + 1, 1, v32);
        }
        unint64_t v34 = v32[2];
        unint64_t v33 = v32[3];
        unint64_t v35 = v34 + 1;
        if (v34 >= v33 >> 1) {
          uint64_t v32 = sub_256FA5F84((void *)(v33 > 1), v34 + 1, 1, v32);
        }
        unint64_t v36 = type metadata accessor for Assignment;
        uint64_t v37 = (unint64_t *)&unk_269FDD578;
      }
      else if (v28 == 0x7069726373627553 && v29 == 0xE900000000000074 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Subscript();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
        sub_257044D78(&qword_269FDD560, 255, (void (*)(uint64_t))type metadata accessor for Subscript);
        sub_25704B180();
        uint64_t v31 = v115;
        uint64_t v32 = v120;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = sub_256FA5F84(0, v32[2] + 1, 1, v32);
        }
        unint64_t v34 = v32[2];
        unint64_t v41 = v32[3];
        unint64_t v35 = v34 + 1;
        if (v34 >= v41 >> 1) {
          uint64_t v32 = sub_256FA5F84((void *)(v41 > 1), v34 + 1, 1, v32);
        }
        unint64_t v36 = type metadata accessor for Subscript;
        uint64_t v37 = (unint64_t *)&unk_269FDD568;
      }
      else if (v28 == 0x6563696F6843 && v29 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Choice();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
        sub_257044D78(&qword_269FDD550, 255, (void (*)(uint64_t))type metadata accessor for Choice);
        sub_25704B180();
        uint64_t v31 = v115;
        uint64_t v32 = v120;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = sub_256FA5F84(0, v32[2] + 1, 1, v32);
        }
        unint64_t v34 = v32[2];
        unint64_t v42 = v32[3];
        unint64_t v35 = v34 + 1;
        if (v34 >= v42 >> 1) {
          uint64_t v32 = sub_256FA5F84((void *)(v42 > 1), v34 + 1, 1, v32);
        }
        unint64_t v36 = type metadata accessor for Choice;
        uint64_t v37 = (unint64_t *)&unk_269FDD558;
      }
      else if (v28 == 0x746E6174736E6F43 && v29 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Constant();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
        sub_257044D78(&qword_269FDD540, 255, (void (*)(uint64_t))type metadata accessor for Constant);
        sub_25704B180();
        uint64_t v31 = v115;
        uint64_t v32 = v120;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = sub_256FA5F84(0, v32[2] + 1, 1, v32);
        }
        unint64_t v34 = v32[2];
        unint64_t v43 = v32[3];
        unint64_t v35 = v34 + 1;
        if (v34 >= v43 >> 1) {
          uint64_t v32 = sub_256FA5F84((void *)(v43 > 1), v34 + 1, 1, v32);
        }
        unint64_t v36 = type metadata accessor for Constant;
        uint64_t v37 = (unint64_t *)&unk_269FDD548;
      }
      else if (v28 == 1751343429 && v29 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for Each();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
        sub_257044D78(&qword_269FDD530, 255, (void (*)(uint64_t))type metadata accessor for Each);
        sub_25704B180();
        uint64_t v31 = v115;
        uint64_t v32 = v120;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = sub_256FA5F84(0, v32[2] + 1, 1, v32);
        }
        unint64_t v34 = v32[2];
        unint64_t v44 = v32[3];
        unint64_t v35 = v34 + 1;
        if (v34 >= v44 >> 1) {
          uint64_t v32 = sub_256FA5F84((void *)(v44 > 1), v34 + 1, 1, v32);
        }
        unint64_t v36 = type metadata accessor for Each;
        uint64_t v37 = (unint64_t *)&unk_269FDD538;
      }
      else
      {
        if (v28 == 0x426C61636978654CLL && v29 == 0xEC0000006B636F6CLL || (sub_25704B1E0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for LexicalBlock();
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
          sub_257044D78((unint64_t *)&qword_269FDCB58, v45, (void (*)(uint64_t))type metadata accessor for LexicalBlock);
          sub_25704B180();
          uint64_t v31 = v115;
          uint64_t v32 = v120;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v32 = sub_256FA5F84(0, v32[2] + 1, 1, v32);
          }
          unint64_t v34 = v32[2];
          unint64_t v46 = v32[3];
          unint64_t v35 = v34 + 1;
          if (v34 >= v46 >> 1) {
            uint64_t v32 = sub_256FA5F84((void *)(v46 > 1), v34 + 1, 1, v32);
          }
          unint64_t v36 = type metadata accessor for LexicalBlock;
          uint64_t v37 = (unint64_t *)&unk_269FDD528;
          goto LABEL_18;
        }
        if ((v28 != 0x6E7275746552 || v29 != 0xE600000000000000) && (sub_25704B1E0() & 1) == 0)
        {
          if (v28 == 0x73697261706D6F43 && v29 == 0xEA00000000006E6FLL || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Comparison();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
            sub_257044D78(&qword_269FDD508, 255, (void (*)(uint64_t))type metadata accessor for Comparison);
            sub_25704B180();
            uint64_t v48 = v115;
            uint64_t v49 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v49 = sub_256FA5F84(0, v49[2] + 1, 1, v49);
            }
            unint64_t v51 = v49[2];
            unint64_t v50 = v49[3];
            unint64_t v52 = v51 + 1;
            if (v51 >= v50 >> 1) {
              uint64_t v49 = sub_256FA5F84((void *)(v50 > 1), v51 + 1, 1, v49);
            }
            unint64_t v53 = type metadata accessor for Comparison;
            uint64_t v54 = (unint64_t *)&unk_269FDD510;
            goto LABEL_77;
          }
          if (v28 == 0x704F6E6942 && v29 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for BinOp();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
            sub_257044D78(&qword_269FDD4F8, 255, (void (*)(uint64_t))type metadata accessor for BinOp);
            sub_25704B180();
            uint64_t v48 = v115;
            uint64_t v49 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v49 = sub_256FA5F84(0, v49[2] + 1, 1, v49);
            }
            unint64_t v51 = v49[2];
            unint64_t v57 = v49[3];
            unint64_t v52 = v51 + 1;
            if (v51 >= v57 >> 1) {
              uint64_t v49 = sub_256FA5F84((void *)(v57 > 1), v51 + 1, 1, v49);
            }
            unint64_t v53 = type metadata accessor for BinOp;
            uint64_t v54 = (unint64_t *)&unk_269FDD500;
            goto LABEL_77;
          }
          if (v28 == 1819042115 && v29 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Call();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
            sub_257044D78(&qword_269FDD4E8, 255, (void (*)(uint64_t))type metadata accessor for Call);
            sub_25704B180();
            uint64_t v48 = v115;
            uint64_t v49 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v49 = sub_256FA5F84(0, v49[2] + 1, 1, v49);
            }
            unint64_t v51 = v49[2];
            unint64_t v58 = v49[3];
            unint64_t v52 = v51 + 1;
            if (v51 >= v58 >> 1) {
              uint64_t v49 = sub_256FA5F84((void *)(v58 > 1), v51 + 1, 1, v49);
            }
            unint64_t v53 = type metadata accessor for Call;
            uint64_t v54 = (unint64_t *)&unk_269FDD4F0;
            goto LABEL_77;
          }
          if (v28 == 1701667150 && v29 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Name();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
            sub_257044D78(&qword_269FDD4D8, 255, (void (*)(uint64_t))type metadata accessor for Name);
            sub_25704B180();
            uint64_t v48 = v115;
            uint64_t v49 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v49 = sub_256FA5F84(0, v49[2] + 1, 1, v49);
            }
            unint64_t v51 = v49[2];
            unint64_t v59 = v49[3];
            unint64_t v52 = v51 + 1;
            if (v51 >= v59 >> 1) {
              uint64_t v49 = sub_256FA5F84((void *)(v59 > 1), v51 + 1, 1, v49);
            }
            unint64_t v53 = type metadata accessor for Name;
            uint64_t v54 = (unint64_t *)&unk_269FDD4E0;
            goto LABEL_77;
          }
          if (v28 == 0x7475626972747441 && v29 == 0xE900000000000065 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Attribute();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
            sub_257044D78(&qword_269FDD4C8, 255, (void (*)(uint64_t))type metadata accessor for Attribute);
            sub_25704B180();
            uint64_t v48 = v115;
            uint64_t v49 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v49 = sub_256FA5F84(0, v49[2] + 1, 1, v49);
            }
            unint64_t v51 = v49[2];
            unint64_t v60 = v49[3];
            unint64_t v52 = v51 + 1;
            if (v51 >= v60 >> 1) {
              uint64_t v49 = sub_256FA5F84((void *)(v60 > 1), v51 + 1, 1, v49);
            }
            unint64_t v53 = type metadata accessor for Attribute;
            uint64_t v54 = (unint64_t *)&unk_269FDD4D0;
            goto LABEL_77;
          }
          if (v28 == 0x64726F7779654BLL && v29 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for Keyword();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
            sub_257044D78(&qword_269FDD4B8, 255, (void (*)(uint64_t))type metadata accessor for Keyword);
            sub_25704B180();
            uint64_t v48 = v115;
            uint64_t v49 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v49 = sub_256FA5F84(0, v49[2] + 1, 1, v49);
            }
            unint64_t v51 = v49[2];
            unint64_t v61 = v49[3];
            unint64_t v52 = v51 + 1;
            if (v51 >= v61 >> 1) {
              uint64_t v49 = sub_256FA5F84((void *)(v61 > 1), v51 + 1, 1, v49);
            }
            unint64_t v53 = type metadata accessor for Keyword;
            uint64_t v54 = (unint64_t *)&unk_269FDD4C0;
            goto LABEL_77;
          }
          if (v28 == 0x7375656870726F4DLL && v29 == 0xED00007961727241 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for MorpheusArray();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
            sub_257044D78(&qword_269FDD4A8, 255, (void (*)(uint64_t))type metadata accessor for MorpheusArray);
            sub_25704B180();
            uint64_t v48 = v115;
            uint64_t v49 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v49 = sub_256FA5F84(0, v49[2] + 1, 1, v49);
            }
            unint64_t v51 = v49[2];
            unint64_t v62 = v49[3];
            unint64_t v52 = v51 + 1;
            if (v51 >= v62 >> 1) {
              uint64_t v49 = sub_256FA5F84((void *)(v62 > 1), v51 + 1, 1, v49);
            }
            unint64_t v53 = type metadata accessor for MorpheusArray;
            uint64_t v54 = (unint64_t *)&unk_269FDD4B0;
            goto LABEL_77;
          }
          if (v28 == 0x7375656870726F4DLL && v29 == 0xEC00000074636944 || (sub_25704B1E0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for MorpheusDict();
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
            sub_257044D78(&qword_269FDD498, 255, (void (*)(uint64_t))type metadata accessor for MorpheusDict);
            sub_25704B180();
            uint64_t v48 = v115;
            uint64_t v49 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v49 = sub_256FA5F84(0, v49[2] + 1, 1, v49);
            }
            unint64_t v51 = v49[2];
            unint64_t v63 = v49[3];
            unint64_t v52 = v51 + 1;
            if (v51 >= v63 >> 1) {
              uint64_t v49 = sub_256FA5F84((void *)(v63 > 1), v51 + 1, 1, v49);
            }
            unint64_t v53 = type metadata accessor for MorpheusDict;
            uint64_t v54 = (unint64_t *)&unk_269FDD4A0;
LABEL_77:
            uint64_t v55 = sub_257044D78(v54, 255, (void (*)(uint64_t))v53);
            _OWORD v49[2] = v52;
            uint64_t v56 = &v49[2 * v51];
            _OWORD v56[4] = v48;
            v56[5] = v55;
            uint64_t v120 = v49;
          }
          else
          {
            if (v28 == 0x7375656870726F4DLL && v29 == 0xED00006563696C53 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for MorpheusSlice();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD488, 255, (void (*)(uint64_t))type metadata accessor for MorpheusSlice);
              sub_25704B180();
              uint64_t v64 = v115;
              uint64_t v65 = v120;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v120 = v65;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                uint64_t v65 = sub_256FA5F84(0, v65[2] + 1, 1, v65);
                uint64_t v120 = v65;
              }
              unint64_t v68 = v65[2];
              unint64_t v67 = v65[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v67 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v67 > 1), v68 + 1, 1, v65);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for MorpheusSlice;
              uint64_t v71 = (unint64_t *)&unk_269FDD490;
            }
            else if (v28 == 0x6E6F6974636E7546 && v29 == 0xEB00000000666544 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for FunctionDef();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD478, 255, (void (*)(uint64_t))type metadata accessor for FunctionDef);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v74 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v74 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v74 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for FunctionDef;
              uint64_t v71 = (unint64_t *)&unk_269FDD480;
            }
            else if (v28 == 0x6665447373616C43 && v29 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for ClassDef();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD468, 255, (void (*)(uint64_t))type metadata accessor for ClassDef);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v75 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v75 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v75 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for ClassDef;
              uint64_t v71 = (unint64_t *)&unk_269FDD470;
            }
            else if (v28 == 0x7972616E55 && v29 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Unary();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD458, 255, (void (*)(uint64_t))type metadata accessor for Unary);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v76 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v76 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v76 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for Unary;
              uint64_t v71 = (unint64_t *)&unk_269FDD460;
            }
            else if (v28 == 0x6573696152 && v29 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Raise();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD448, 255, (void (*)(uint64_t))type metadata accessor for Raise);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v77 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v77 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v77 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for Raise;
              uint64_t v71 = (unint64_t *)&unk_269FDD450;
            }
            else if (v28 == 0x745364656E696F4ALL && v29 == 0xE900000000000072 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for JoinedStr();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD438, 255, (void (*)(uint64_t))type metadata accessor for JoinedStr);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v78 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v78 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v78 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for JoinedStr;
              uint64_t v71 = (unint64_t *)&unk_269FDD440;
            }
            else if (v28 == 0x657474616D726F46 && v29 == 0xEE0065756C615664 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for FormattedValue();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD428, 255, (void (*)(uint64_t))type metadata accessor for FormattedValue);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v79 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v79 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v79 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for FormattedValue;
              uint64_t v71 = (unint64_t *)&unk_269FDD430;
            }
            else if (v28 == 0x704F6C6F6F42 && v29 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for BoolOp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD418, 255, (void (*)(uint64_t))type metadata accessor for BoolOp);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v80 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v80 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v80 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for BoolOp;
              uint64_t v71 = (unint64_t *)&unk_269FDD420;
            }
            else if (v28 == 0x65756E69746E6F43 && v29 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Continue();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD408, 255, (void (*)(uint64_t))type metadata accessor for Continue);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v81 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v81 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v81 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for Continue;
              uint64_t v71 = (unint64_t *)&unk_269FDD410;
            }
            else if (v28 == 0x6B61657242 && v29 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Break();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD3F8, 255, (void (*)(uint64_t))type metadata accessor for Break);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v82 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v82 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v82 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for Break;
              uint64_t v71 = (unint64_t *)&unk_269FDD400;
            }
            else if (v28 == 0x65686572706D6F43 && v29 == 0xED00006E6F69736ELL || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for Comprehension();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD3E8, 255, (void (*)(uint64_t))type metadata accessor for Comprehension);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v83 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v83 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v83 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for Comprehension;
              uint64_t v71 = (unint64_t *)&unk_269FDD3F0;
            }
            else if (v28 == 0x706D6F437473694CLL && v29 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for ListComp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD3D8, 255, (void (*)(uint64_t))type metadata accessor for ListComp);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v84 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v84 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v84 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for ListComp;
              uint64_t v71 = (unint64_t *)&unk_269FDD3E0;
            }
            else if (v28 == 0x706D6F43746553 && v29 == 0xE700000000000000 || (sub_25704B1E0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for SetComp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD3C8, 255, (void (*)(uint64_t))type metadata accessor for SetComp);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v85 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v85 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v85 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for SetComp;
              uint64_t v71 = (unint64_t *)&unk_269FDD3D0;
            }
            else
            {
              if ((v28 != 0x706D6F4374636944 || v29 != 0xE800000000000000) && (sub_25704B1E0() & 1) == 0)
              {
                swift_bridgeObjectRelease();
                if (qword_269FDC650 != -1) {
                  swift_once();
                }
                uint64_t v87 = v103;
                uint64_t v88 = __swift_project_value_buffer(v103, (uint64_t)qword_269FDD648);
                (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v104, v88, v87);
                uint64_t v89 = swift_allocObject();
                *(void *)(v89 + 16) = v28;
                *(void *)(v89 + 24) = v29;
                swift_bridgeObjectRetain();
                uint64_t v90 = sub_25704A530();
                LODWORD(v109) = sub_25704AC60();
                uint64_t v91 = swift_allocObject();
                *(unsigned char *)(v91 + 16) = 32;
                uint64_t v92 = swift_allocObject();
                *(unsigned char *)(v92 + 16) = 8;
                a1 = (void *)swift_allocObject();
                a1[2] = v108;
                a1[3] = v89;
                uint64_t v93 = swift_allocObject();
                *(void *)(v93 + 16) = v99;
                *(void *)(v93 + 24) = a1;
                __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD5A8);
                uint64_t inited = swift_initStackObject();
                *(_OWORD *)(inited + 16) = xmmword_257072C60;
                *(void *)(inited + 32) = v100;
                *(void *)(inited + 40) = v91;
                *(void *)(inited + 48) = v101;
                *(void *)(inited + 56) = v92;
                *(void *)(inited + 64) = v102;
                *(void *)(inited + 72) = v93;
                swift_retain();
                swift_retain();
                uint64_t v112 = v91;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                os_log_type_t v95 = v109;
                uint64_t v113 = v90;
                if (os_log_type_enabled(v90, (os_log_type_t)v109))
                {
                  os_log_type_t v96 = (uint8_t *)swift_slowAlloc();
                  uint64_t v111 = swift_slowAlloc();
                  uint64_t v115 = v111;
                  *(_WORD *)os_log_type_t v96 = 258;
                  v96[2] = 32;
                  swift_release();
                  v96[3] = 8;
                  swift_release();
                  swift_bridgeObjectRetain();
                  uint64_t v114 = sub_256FFE924(v28, v29, &v115);
                  sub_25704AC90();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease_n();
                  uint64_t v97 = v113;
                  _os_log_impl(&dword_256D65000, v113, v95, "Operation %s not supported yet", v96, 0xCu);
                  a1 = (void *)v111;
                  swift_arrayDestroy();
                  MEMORY[0x25A2B1FA0](a1, -1, -1);
                  MEMORY[0x25A2B1FA0](v96, -1, -1);
                }
                else
                {

                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                }
                (*(void (**)(char *, uint64_t))(v105 + 8))(v104, v103);
                sub_256F92DE8();
                swift_allocError();
                unsigned char *v98 = 43;
                swift_willThrow();
                (*v24)(v106, v107);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
                return a1;
              }
              swift_bridgeObjectRelease();
              type metadata accessor for DictComp();
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
              sub_257044D78(&qword_269FDD3B8, 255, (void (*)(uint64_t))type metadata accessor for DictComp);
              sub_25704B180();
              uint64_t v64 = v115;
              sub_257044CB4();
              uint64_t v65 = v120;
              unint64_t v68 = v120[2];
              unint64_t v86 = v120[3];
              unint64_t v69 = v68 + 1;
              if (v68 >= v86 >> 1)
              {
                uint64_t v65 = sub_256FA5F84((void *)(v86 > 1), v68 + 1, 1, v120);
                uint64_t v120 = v65;
              }
              unint64_t v70 = type metadata accessor for DictComp;
              uint64_t v71 = (unint64_t *)&unk_269FDD3C0;
            }
            uint64_t v72 = sub_257044D78(v71, 255, (void (*)(uint64_t))v70);
            v65[2] = v69;
            uint64_t v73 = &v65[2 * v68];
            v73[4] = v64;
            v73[5] = v72;
          }
          uint64_t v26 = v106;
          uint64_t v25 = v107;
          (*v24)(v106, v107);
          goto LABEL_19;
        }
        swift_bridgeObjectRelease();
        type metadata accessor for Return();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v118, v119);
        sub_257044D78(&qword_269FDD518, 255, (void (*)(uint64_t))type metadata accessor for Return);
        sub_25704B180();
        uint64_t v31 = v115;
        uint64_t v32 = v120;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = sub_256FA5F84(0, v32[2] + 1, 1, v32);
        }
        unint64_t v34 = v32[2];
        unint64_t v47 = v32[3];
        unint64_t v35 = v34 + 1;
        if (v34 >= v47 >> 1) {
          uint64_t v32 = sub_256FA5F84((void *)(v47 > 1), v34 + 1, 1, v32);
        }
        unint64_t v36 = type metadata accessor for Return;
        uint64_t v37 = (unint64_t *)&unk_269FDD520;
      }
      uint64_t v38 = 255;
LABEL_18:
      uint64_t v39 = sub_257044D78(v37, v38, (void (*)(uint64_t))v36);
      _OWORD v32[2] = v35;
      uint64_t v40 = &v32[2 * v34];
      v40[4] = v31;
      v40[5] = v39;
      uint64_t v120 = v32;
      (*v24)(v26, v25);
LABEL_19:
      __swift_project_boxed_opaque_existential_1(&v118, v119);
      if (sub_25704B190()) {
        goto LABEL_3;
      }
    }
  }
  return a1;
}

double sub_257042F14@<D0>(_OWORD *a1@<X8>)
{
  sub_256FF43DC(v1, (uint64_t)v4);
  if (v5)
  {
    sub_256FEA220((uint64_t)v4);
    sub_256FF43DC(v1, (uint64_t)v4);
    if (v5 != 1)
    {
      sub_256FEA220((uint64_t)v4);
      goto LABEL_6;
    }
  }
  sub_256FF4438((uint64_t)v4, (uint64_t)v6, &qword_269FDC6E0);
  sub_256FF4438((uint64_t)v6, (uint64_t)v4, &qword_269FDC6E0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double sub_257042FD8@<D0>(uint64_t a1@<X8>)
{
  return sub_257042FF0(&qword_269FDD5C0, a1);
}

double sub_257042FE4@<D0>(uint64_t a1@<X8>)
{
  return sub_257042FF0(&qword_269FDD5B8, a1);
}

double sub_257042FF0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_256FF43DC(v2, (uint64_t)v6);
  if (v7)
  {
    sub_256FEA220((uint64_t)v6);
    sub_256FF43DC(v2, (uint64_t)v6);
    if (v7 != 1)
    {
      sub_256FEA220((uint64_t)v6);
      goto LABEL_6;
    }
  }
  sub_256FF4438((uint64_t)v6, (uint64_t)v8, &qword_269FDC6E0);
  sub_256FF4438((uint64_t)v8, (uint64_t)v6, &qword_269FDC6E0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

double sub_2570430C8@<D0>(uint64_t a1@<X8>)
{
  sub_256FF43DC(v1, (uint64_t)v5);
  if (v6 && (sub_256FEA220((uint64_t)v5), sub_256FF43DC(v1, (uint64_t)v5), v6 != 1))
  {
    sub_256FEA220((uint64_t)v5);
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    sub_256FF4438((uint64_t)v5, (uint64_t)v7, &qword_269FDC6E0);
    *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
    *(void *)(a1 + 32) = &protocol witness table for A?;
    uint64_t v3 = swift_allocObject();
    *(void *)a1 = v3;
    sub_256FF4438((uint64_t)v7, v3 + 16, &qword_269FDC6E0);
  }
  return result;
}

double sub_257043190@<D0>(uint64_t a1@<X8>)
{
  return sub_257042FF0(&qword_269FDD5C8, a1);
}

double sub_25704319C@<D0>(uint64_t a1@<X8>)
{
  return sub_257042FF0(&qword_269FDD5B0, a1);
}

uint64_t sub_2570431A8()
{
  sub_256FF43DC(v0, (uint64_t)v2);
  if (v3 && (sub_256FEA220((uint64_t)v2), sub_256FF43DC(v0, (uint64_t)v2), v3 != 1))
  {
    sub_256FEA220((uint64_t)v2);
  }
  else
  {
    sub_256FF4438((uint64_t)v2, (uint64_t)v4, &qword_269FDC6E0);
    sub_256FF4438((uint64_t)v4, (uint64_t)v2, &qword_269FDC6E0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
    type metadata accessor for Function();
    if (swift_dynamicCast()) {
      return v5;
    }
  }
  return 0;
}

double sub_25704326C@<D0>(uint64_t a1@<X8>)
{
  return sub_257042FF0(&qword_269FDCD58, a1);
}

uint64_t sub_257043278(uint64_t a1)
{
  uint64_t v2 = v1[1];
  if ((v2 & 0x2000000000000000) == 0)
  {
    if ((*v1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if ((v2 & 0xF00000000000000) == 0)
  {
    __break(1u);
    return MEMORY[0x270F9D7B8](a1);
  }
LABEL_5:
  a1 = sub_25704A840();
  return MEMORY[0x270F9D7B8](a1);
}

uint64_t sub_2570432E0()
{
  return sub_25704B2B0();
}

uint64_t sub_25704332C()
{
  return sub_25704A810();
}

uint64_t sub_25704333C()
{
  return sub_25704B2B0();
}

uint64_t sub_257043384@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_2570433D8(void *a1@<X8>)
{
  *a1 = 7565423;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_2570433EC()
{
  return 7565423;
}

uint64_t sub_2570433FC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_257043454(uint64_t a1)
{
  unint64_t v2 = sub_257044C60();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_257043490(uint64_t a1)
{
  unint64_t v2 = sub_257044C60();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2570434CC(void *a1)
{
  return sub_257043518(a1);
}

uint64_t sub_257043518(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD598);
  uint64_t v25 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LexicalContext();
  char v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0x6E776F6E6B6E55;
  v7[3] = 0xE700000000000000;
  swift_retain();
  uint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t v9 = sub_256FEAEFC(MEMORY[0x263F8EE78]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269FDCB60);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE80];
  swift_beginAccess();
  *(void *)(v10 + 16) = v9;
  char v11 = v6;
  uint64_t v12 = (uint64_t)a1;
  swift_bridgeObjectRelease();
  void v7[4] = v10;
  v7[5] = sub_256FEB2B0(v8);
  *(void *)(v2 + 48) = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257044C60();
  uint64_t v13 = v27;
  sub_25704B310();
  if (v13)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_release();
    type metadata accessor for LexicalBlock();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v2 + 40) = sub_25703FDDC(v11, &qword_269FDD598, (uint64_t)&unk_27063C690, (uint64_t)&unk_27063C6B8, (uint64_t)&unk_27063C6E0, (uint64_t)&unk_27063C708, (uint64_t)sub_257044D38, &unk_27063C730, (uint64_t)sub_257044D68, (uint64_t)sub_257044D50, (uint64_t)sub_2570451A0, (uint64_t)sub_257044D70);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v26);
    uint64_t v15 = sub_257046164(v26);
    uint64_t v2 = v15;
    uint64_t v16 = *(void *)(v15 + 40);
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      int64_t v23 = a1;
      uint64_t v24 = v11;
      uint64_t v27 = v4;
      swift_bridgeObjectRetain_n();
      swift_retain();
      uint64_t v18 = (uint64_t *)(v16 + 40);
      do
      {
        uint64_t v19 = *v18;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v21 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v19 + 48);
        swift_retain();
        swift_unknownObjectRetain();
        v21(v2, &off_27063C638, ObjectType, v19);
        swift_unknownObjectRelease();
        v18 += 2;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease_n();
      uint64_t v4 = v27;
      uint64_t v12 = (uint64_t)v23;
      char v11 = v24;
    }
    else
    {
      swift_retain();
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v11, v4);
    __swift_destroy_boxed_opaque_existential_1(v12);
    swift_release();
  }
  return v2;
}

double sub_257043924@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  swift_retain();
  sub_257038D0C(a1, a2, (uint64_t)v15);
  swift_release();
  if (v16)
  {
    sub_256F9ABF4(v15, a3);
  }
  else
  {
    sub_256FF0EF4((uint64_t)v15);
    if (MEMORY[0x25A2B2020](v3 + 24))
    {
      uint64_t v8 = *(void *)(v3 + 32);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, ObjectType, v8);
      swift_unknownObjectRelease();
    }
    else
    {
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      uint64_t v10 = sub_25704A550();
      __swift_project_value_buffer(v10, (uint64_t)qword_269FDD648);
      swift_bridgeObjectRetain_n();
      char v11 = sub_25704A530();
      os_log_type_t v12 = sub_25704AC60();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        v15[0] = v14;
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_bridgeObjectRetain();
        sub_256FFE924(a1, a2, v15);
        sub_25704AC90();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_256D65000, v11, v12, "LexicalBlock> Can't locate name %s", v13, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v14, -1, -1);
        MEMORY[0x25A2B1FA0](v13, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      double result = 0.0;
      *a3 = 0u;
      a3[1] = 0u;
    }
  }
  return result;
}

uint64_t sub_257043B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[3] = MEMORY[0x263F8D310];
  v9[0] = a1;
  v9[1] = a2;
  sub_256FB118C((uint64_t)v9, (uint64_t)v8);
  swift_retain();
  swift_bridgeObjectRetain();
  if (swift_dynamicCast())
  {
    swift_retain();
    sub_25704ADA0();
    sub_256FB118C(a3, (uint64_t)v7);
    sub_256F9AC04((uint64_t)v8, (uint64_t)&v6);
    sub_25701A578((uint64_t)v7, (uint64_t)v5);
    swift_beginAccess();
    sub_256FEAC24((uint64_t)v5, (uint64_t)&v6);
    swift_endAccess();
    sub_256F9AC98((uint64_t)v8);
    sub_256FF0EF4((uint64_t)v7);
    swift_release();
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t sub_257043CB4(uint64_t a1, uint64_t a2)
{
  swift_retain_n();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = &off_27063C638;
  sub_257044C4C();
  uint64_t v14 = a1;
  char v6 = sub_257038EAC(a1, a2);
  swift_release();
  if (v6)
  {
    uint64_t v7 = ((uint64_t (*)(uint64_t, _UNKNOWN **))sub_257044C4C)(ObjectType, &off_27063C638);
LABEL_6:
    uint64_t v12 = v7;
    swift_unknownObjectRelease_n();
    return v12;
  }
  else
  {
    while (1)
    {
      uint64_t v8 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v5[2])(ObjectType, v5);
      uint64_t v5 = v9;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (!v8) {
        break;
      }
      swift_unknownObjectRetain();
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v10 = (void (*)(uint64_t, _UNKNOWN **))v5[1];
      v10(ObjectType, v5);
      char v11 = sub_257038EAC(v14, a2);
      swift_release();
      if (v11)
      {
        uint64_t v7 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v10)(ObjectType, v5);
        goto LABEL_6;
      }
    }
    return swift_retain();
  }
}

void sub_257043E74()
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  unsigned char v8[40];
  void v9[5];

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (int64_t i = (uint64_t *)(v2 + 40); ; i += 2)
    {
      uint64_t v5 = *i;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 64);
      swift_unknownObjectRetain();
      v7(v9, ObjectType, v5);
      if (v1)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return;
      }
      swift_unknownObjectRelease();
      sub_257007F94((uint64_t)v9, (uint64_t)v8);
      if (v8[32]) {
        break;
      }
      sub_256FEA220((uint64_t)v8);
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    swift_bridgeObjectRelease();
    sub_256FEA220((uint64_t)v8);
  }
}

uint64_t sub_257043F7C@<X0>(uint64_t a1@<X8>)
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void v14[4];
  char v15;
  _OWORD v16[2];
  char v17;
  uint64_t v18;

  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v18 = a1;
    swift_bridgeObjectRetain();
    uint64_t v5 = (uint64_t *)(v3 + 40);
    while (1)
    {
      uint64_t v6 = *v5;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 64);
      swift_unknownObjectRetain();
      v8(v14, ObjectType, v6);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return sub_256FEA220((uint64_t)v16);
      }
      swift_unknownObjectRelease();
      sub_256FEA220((uint64_t)v16);
      sub_257007F94((uint64_t)v14, (uint64_t)v16);
      sub_256FF43DC((uint64_t)v16, (uint64_t)v14);
      if (v15) {
        break;
      }
      sub_256FEA220((uint64_t)v14);
      v5 += 2;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        a1 = v18;
        uint64_t v1 = v13;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_256FEA220((uint64_t)v14);
    return sub_257007F94((uint64_t)v16, v18);
  }
  else
  {
LABEL_7:
    sub_256FF43DC((uint64_t)v16, a1);
    unint64_t v9 = *(void *)(v1 + 48);
    uint64_t v10 = *(void *)(v9 + 32);
    swift_beginAccess();
    char v11 = MEMORY[0x263F8EE80];
    *(void *)(v10 + 16) = MEMORY[0x263F8EE80];
    swift_retain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v9 + 40) = v11;
    swift_release();
    swift_bridgeObjectRelease();
    return sub_256FEA220((uint64_t)v16);
  }
}

uint64_t sub_25704413C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_256F909F0(0, v2, 0);
    uint64_t v3 = v16;
    uint64_t v4 = v1 + 40;
    do
    {
      swift_getObjectType();
      uint64_t v5 = sub_25704B150();
      uint64_t v7 = v6;
      unint64_t v9 = *(void *)(v16 + 16);
      unint64_t v8 = *(void *)(v16 + 24);
      if (v9 >= v8 >> 1) {
        sub_256F909F0(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v16 + 16) = v9 + 1;
      uint64_t v10 = v16 + 16 * v9;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 40) = v7;
      v4 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = *(void *)(v3 + 16);
  if (v11)
  {
    uint64_t v12 = v3 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_25704A850();
      swift_bridgeObjectRelease();
      sub_25704A850();
      swift_bridgeObjectRelease();
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v13 = _sSS8MorpheusE3lenSiyF_0();
  uint64_t v14 = swift_bridgeObjectRelease();
  if (v13 >= 1)
  {
    sub_257043278(v14);
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_2570442EC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v51 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v52 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v7 = MEMORY[0x263F8D310];
  if (!v5) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v6 << 6);
LABEL_5:
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = (void *)(*(void *)(a1 + 48) + 16 * v9);
  uint64_t v12 = v11[1];
  *(void *)&long long v68 = *v11;
  *((void *)&v68 + 1) = v12;
  sub_256FB118C(v10 + 32 * v9, (uint64_t)v69);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_256FF4438((uint64_t)&v68, (uint64_t)&v70, &qword_269FDCEA0);
    unint64_t v15 = v71;
    if (!v71) {
      return swift_release();
    }
    uint64_t v16 = v70;
    sub_256F9ABF4(v72, v67);
    sub_256FB118C((uint64_t)v67, (uint64_t)&v68);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6D0);
    if (!swift_dynamicCast())
    {
      uint64_t v19 = *(void *)(v54 + 48);
      uint64_t v66 = v7;
      *(void *)&long long v65 = v16;
      *((void *)&v65 + 1) = v15;
      sub_256FB118C((uint64_t)&v65, (uint64_t)&v68);
      swift_bridgeObjectRetain();
      swift_retain();
      if (swift_dynamicCast())
      {
        unint64_t v73 = v5;
        uint64_t v53 = v2;
        uint64_t v20 = *(void *)(v19 + 32);
        swift_retain();
        sub_25704ADA0();
        sub_256FB118C((uint64_t)v67, (uint64_t)&v63);
        sub_256F9AC04((uint64_t)&v68, (uint64_t)v61);
        sub_25701A578((uint64_t)&v63, (uint64_t)&v59);
        uint64_t v21 = (uint64_t *)(v20 + 16);
        swift_beginAccess();
        if (v60)
        {
          sub_256F9ABF4(&v59, v58);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          int64_t v23 = (void *)*v21;
          uint64_t v56 = (void *)*v21;
          *uint64_t v21 = 0x8000000000000000;
          unint64_t v25 = sub_256FED0C8((uint64_t)v61);
          uint64_t v26 = v23[2];
          BOOL v27 = (v24 & 1) == 0;
          uint64_t v28 = v26 + v27;
          if (__OFADD__(v26, v27)) {
            goto LABEL_71;
          }
          char v29 = v24;
          if (v23[3] >= v28)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_256FEDB84();
            }
          }
          else
          {
            sub_256FFEF94(v28, isUniquelyReferenced_nonNull_native);
            unint64_t v30 = sub_256FED0C8((uint64_t)v61);
            if ((v29 & 1) != (v31 & 1)) {
              goto LABEL_74;
            }
            unint64_t v25 = v30;
          }
          uint64_t v7 = MEMORY[0x263F8D310];
          if (v29)
          {
            unint64_t v44 = (_OWORD *)(v56[7] + 32 * v25);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
            sub_256F9ABF4(v58, v44);
          }
          else
          {
            v56[(v25 >> 6) + 8] |= 1 << v25;
            sub_256F9AC04((uint64_t)v61, v56[6] + 40 * v25);
            sub_256F9ABF4(v58, (_OWORD *)(v56[7] + 32 * v25));
            uint64_t v45 = v56[2];
            BOOL v46 = __OFADD__(v45, 1);
            uint64_t v47 = v45 + 1;
            if (v46) {
              goto LABEL_72;
            }
            v56[2] = v47;
          }
          *uint64_t v21 = (uint64_t)v56;
          swift_bridgeObjectRelease();
          sub_256F9AC98((uint64_t)v61);
          uint64_t v2 = v53;
        }
        else
        {
          sub_256FF0EF4((uint64_t)&v59);
          swift_bridgeObjectRetain();
          unint64_t v39 = sub_256FED0C8((uint64_t)v61);
          char v41 = v40;
          swift_bridgeObjectRelease();
          if (v41)
          {
            char v42 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v43 = *v21;
            uint64_t v57 = *v21;
            *uint64_t v21 = 0x8000000000000000;
            if ((v42 & 1) == 0)
            {
              sub_256FEDB84();
              uint64_t v43 = v57;
            }
            sub_256F9AC98(*(void *)(v43 + 48) + 40 * v39);
            sub_256F9ABF4((_OWORD *)(*(void *)(v43 + 56) + 32 * v39), v58);
            sub_256FED10C(v39, v43);
            *uint64_t v21 = v43;
            swift_bridgeObjectRelease();
          }
          else
          {
            memset(v58, 0, sizeof(v58));
          }
          uint64_t v2 = v53;
          sub_256F9AC98((uint64_t)v61);
          sub_256FF0EF4((uint64_t)v58);
        }
        unint64_t v5 = v73;
        swift_endAccess();
        sub_256F9AC98((uint64_t)&v68);
        sub_256FF0EF4((uint64_t)&v63);
        swift_release();
      }
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_6;
    }
    unint64_t v73 = v5;
    uint64_t v18 = v61[0];
    uint64_t v17 = v61[1];
    swift_getObjectType();
    (*(void (**)(long long *__return_ptr))(v17 + 64))(&v68);
    if (v2)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
      return swift_release();
    }
    sub_256FF43DC((uint64_t)&v68, (uint64_t)v61);
    if (!v62 || (sub_256FEA220((uint64_t)v61), sub_256FF43DC((uint64_t)&v68, (uint64_t)v61), v62 == 1))
    {
      sub_256FF4438((uint64_t)v61, (uint64_t)&v59, &qword_269FDC6E0);
      sub_256FF4438((uint64_t)&v59, (uint64_t)v61, &qword_269FDC6E0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
      if (swift_dynamicCast()) {
        goto LABEL_30;
      }
    }
    else
    {
      sub_256FEA220((uint64_t)v61);
    }
    long long v63 = 0u;
    long long v64 = 0u;
LABEL_30:
    sub_256FEA220((uint64_t)&v68);
    if (*((void *)&v64 + 1))
    {
      sub_256F9ABF4(&v63, &v65);
      sub_25702B5F8((uint64_t)&v65, (uint64_t *)&v68);
      sub_257043B74(v16, v15, (uint64_t)&v68);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
    }
    else
    {
      sub_256FF0EF4((uint64_t)&v63);
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      uint64_t v32 = sub_25704A550();
      __swift_project_value_buffer(v32, (uint64_t)qword_269FDD648);
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      unint64_t v33 = sub_25704A530();
      os_log_type_t v34 = sub_25704AC60();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(void *)&long long v68 = v50;
        *(_DWORD *)uint64_t v35 = 136315394;
        v61[0] = v18;
        uint64_t v36 = sub_25704B150();
        *(void *)(v35 + 4) = sub_256FFE924(v36, v37, (uint64_t *)&v68);
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v35 + 14) = sub_256FFE924(v16, v15, (uint64_t *)&v68);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_256D65000, v33, v34, "Operation: %s did not return value type, ignore the input %s", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v50, -1, -1);
        uint64_t v38 = v35;
        uint64_t v2 = 0;
        MEMORY[0x25A2B1FA0](v38, -1, -1);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    uint64_t v7 = MEMORY[0x263F8D310];
    unint64_t v5 = v73;
    if (v73) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    if (v13 < v52)
    {
      unint64_t v14 = *(void *)(v51 + 8 * v13);
      if (v14) {
        goto LABEL_9;
      }
      v6 += 2;
      if (v13 + 1 >= v52)
      {
        int64_t v6 = v13;
        goto LABEL_14;
      }
      unint64_t v14 = *(void *)(v51 + 8 * v6);
      if (v14)
      {
        ++v13;
LABEL_9:
        unint64_t v5 = (v14 - 1) & v14;
        unint64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
        int64_t v6 = v13;
        goto LABEL_5;
      }
      if (v13 + 2 < v52) {
        break;
      }
    }
LABEL_14:
    unint64_t v5 = 0;
    memset(v69, 0, sizeof(v69));
    long long v68 = 0u;
  }
  unint64_t v14 = *(void *)(v51 + 8 * (v13 + 2));
  if (v14)
  {
    v13 += 2;
    goto LABEL_9;
  }
  int64_t v48 = v13 + 3;
  if (v13 + 3 >= v52)
  {
    int64_t v6 = v13 + 2;
    goto LABEL_14;
  }
  unint64_t v14 = *(void *)(v51 + 8 * v48);
  if (v14)
  {
    v13 += 3;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v13 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      break;
    }
    if (v13 >= v52)
    {
      int64_t v6 = v52 - 1;
      goto LABEL_14;
    }
    unint64_t v14 = *(void *)(v51 + 8 * v13);
    ++v48;
    if (v14) {
      goto LABEL_9;
    }
  }
LABEL_73:
  __break(1u);
LABEL_74:
  uint64_t result = sub_25704B230();
  __break(1u);
  return result;
}

uint64_t sub_257044BB0()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_257044BE0()
{
  sub_256F92F88(v0 + 24);
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t type metadata accessor for LexicalBlock()
{
  return self;
}

uint64_t sub_257044C4C()
{
  return swift_retain();
}

unint64_t sub_257044C60()
{
  unint64_t result = qword_269FDD5A0;
  if (!qword_269FDD5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD5A0);
  }
  return result;
}

void *sub_257044CB4()
{
  uint64_t v1 = *v0;
  unint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  unsigned char *v0 = v1;
  if (!result)
  {
    unint64_t result = sub_256FA5F84(result, v1[2] + 1, 1, v1);
    unsigned char *v0 = result;
  }
  return result;
}

uint64_t sub_257044D00()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_257044D38()
{
  return sub_256FF823C(*(void *)(v0 + 16));
}

uint64_t sub_257044D40()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

unsigned char **sub_257044D50(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return sub_256FFEF84(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_257044D58()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044D68()
{
  return sub_256FFE884(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_257044D70(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_256FFE8AC(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_257044D78(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_257044DC0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044DD0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044DE0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044DF0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044E00()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044E10()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044E20()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044E30()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044E40()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_257044E78()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044E88()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044E98()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_257044ED8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044EE8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044EF8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044F08()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044F18()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044F28()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044F38()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044F48()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044F58()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044F68()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044F78()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044F88()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044F98()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_257044FA8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

unsigned char *storeEnumTagSinglePayload for LexicalBlock.BlockCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x257045054);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LexicalBlock.BlockCodingKeys()
{
  return &type metadata for LexicalBlock.BlockCodingKeys;
}

unint64_t sub_257045090()
{
  unint64_t result = qword_269FDD5D0;
  if (!qword_269FDD5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD5D0);
  }
  return result;
}

unint64_t sub_2570450E8()
{
  unint64_t result = qword_269FDD5D8;
  if (!qword_269FDD5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD5D8);
  }
  return result;
}

unint64_t sub_257045140()
{
  unint64_t result = qword_269FDD5E0;
  if (!qword_269FDD5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD5E0);
  }
  return result;
}

void sub_257045238(char a1@<W1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v23 = a1 & 1;
  if (a2 == 1819047278 && a3 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
  {
LABEL_4:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    return;
  }
  if (a2 == 7630441 && a3 == 0xE300000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD5E8);
    uint64_t v8 = sub_25704B120();
    if (!v4)
    {
      *(void *)(a4 + 24) = MEMORY[0x263F8D6C8];
      *(void *)a4 = v8;
    }
  }
  else if (a2 == 1819242338 && a3 == 0xE400000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD5E8);
    char v9 = sub_25704B100();
    if (!v4)
    {
      *(void *)(a4 + 24) = MEMORY[0x263F8D4F8];
      *(unsigned char *)a4 = v9 & 1;
    }
  }
  else if (a2 == 7500915 && a3 == 0xE300000000000000 || (sub_25704B1E0() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD5E8);
    uint64_t v10 = sub_25704B0F0();
    if (!v4)
    {
      *(void *)(a4 + 24) = MEMORY[0x263F8D310];
      *(void *)a4 = v10;
      *(void *)(a4 + 8) = v11;
    }
  }
  else
  {
    if (a2 == 0x73697370696C6C65 && a3 == 0xE800000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      *(void *)(a4 + 24) = &type metadata for Ellipsis;
      return;
    }
    if (a2 == 0x656C62756F64 && a3 == 0xE600000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD5E8);
      sub_25704B110();
      if (!v4)
      {
        *(void *)(a4 + 24) = MEMORY[0x263F8D538];
        *(void *)a4 = v12;
      }
    }
    else if (a2 == 0x7365747962 && a3 == 0xE500000000000000 || (sub_25704B1E0() & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD5E8);
      sub_25704B0F0();
      if (!v4)
      {
        uint64_t v13 = sub_25704A510();
        unint64_t v15 = v14;
        swift_bridgeObjectRelease();
        if (v15 >> 60 != 15)
        {
          *(void *)(a4 + 24) = MEMORY[0x263F06F78];
          *(void *)a4 = v13;
          *(void *)(a4 + 8) = v15;
          return;
        }
        goto LABEL_4;
      }
    }
    else
    {
      if (qword_269FDC650 != -1) {
        swift_once();
      }
      uint64_t v16 = sub_25704A550();
      __swift_project_value_buffer(v16, (uint64_t)qword_269FDD648);
      swift_bridgeObjectRetain_n();
      uint64_t v17 = sub_25704A530();
      os_log_type_t v18 = sub_25704AC60();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        uint64_t v22 = v20;
        *(_DWORD *)uint64_t v19 = 136315138;
        swift_bridgeObjectRetain();
        sub_256FFE924(a2, a3, &v22);
        sub_25704AC90();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_256D65000, v17, v18, "Constant type %s not supported yet", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x25A2B1FA0](v20, -1, -1);
        MEMORY[0x25A2B1FA0](v19, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_256F92DE8();
      swift_allocError();
      *uint64_t v21 = 42;
      swift_willThrow();
    }
  }
}

uint64_t sub_25704574C(char *a1, char *a2)
{
  return sub_256FF1D98(*a1, *a2);
}

uint64_t sub_257045758()
{
  return sub_25704B2B0();
}

uint64_t sub_2570457DC()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25704584C()
{
  return sub_25704B2B0();
}

uint64_t sub_2570458CC@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_25704592C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65756C6176;
  if (*v1) {
    uint64_t v2 = 0x70795465756C6176;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE900000000000065;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_25704596C()
{
  if (*v0) {
    return 0x70795465756C6176;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t sub_2570459A8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_257045A0C(uint64_t a1)
{
  unint64_t v2 = sub_257045E40();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_257045A48(uint64_t a1)
{
  unint64_t v2 = sub_257045E40();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_257045A84(void *a1)
{
  return sub_257045AD0(a1);
}

uint64_t sub_257045AD0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD5E8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257045E40();
  swift_retain();
  sub_25704B310();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for Constant();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v14[0]) = 1;
    uint64_t v10 = sub_25704B0F0();
    sub_257045238(0, v10, v11, (uint64_t)v14);
    swift_bridgeObjectRelease();
    sub_256FEEC3C((uint64_t)v14, v3 + 40);
    swift_release();
    sub_256F92F24((uint64_t)a1, (uint64_t)v14);
    uint64_t v9 = sub_257046164(v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

uint64_t sub_257045D08@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_25701A578(v1 + 40, a1);
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_257045D40()
{
  sub_25701A578(v0 + 40, (uint64_t)&v3);
  if (v4)
  {
    sub_256F9ABF4(&v3, v5);
    sub_256FB118C((uint64_t)v5, (uint64_t)&v3);
    uint64_t v1 = sub_25704A7D0();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  else
  {
    sub_256FF0EF4((uint64_t)&v3);
    return 7104878;
  }
  return v1;
}

uint64_t sub_257045DD4()
{
  return sub_256FF0EF4(v0 + 40);
}

uint64_t sub_257045DDC()
{
  sub_256F92F88(v0 + 24);
  sub_256FF0EF4(v0 + 40);
  return MEMORY[0x270FA0228](v0, 72, 7);
}

uint64_t type metadata accessor for Constant()
{
  return self;
}

unint64_t sub_257045E40()
{
  unint64_t result = qword_269FDD5F0;
  if (!qword_269FDD5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD5F0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Constant.ConstantCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257045F60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Constant.ConstantCodingKeys()
{
  return &type metadata for Constant.ConstantCodingKeys;
}

unint64_t sub_257045F9C()
{
  unint64_t result = qword_269FDD5F8;
  if (!qword_269FDD5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD5F8);
  }
  return result;
}

unint64_t sub_257045FF4()
{
  unint64_t result = qword_269FDD600;
  if (!qword_269FDD600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD600);
  }
  return result;
}

unint64_t sub_25704604C()
{
  unint64_t result = qword_269FDD608;
  if (!qword_269FDD608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD608);
  }
  return result;
}

uint64_t SharedMutableArray.anyArray.getter()
{
  sub_256FF0AEC();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_25704AF50();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Array.anyArray.getter()
{
  return sub_25704AF50();
}

uint64_t sub_25704611C()
{
  return SharedMutableArray.anyArray.getter();
}

uint64_t sub_257046140()
{
  return Array.anyArray.getter();
}

uint64_t dispatch thunk of AnyArrayContainer.anyArray.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_257046164(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDD3A8);
  uint64_t v12 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_257038A18();
  sub_25704B310();
  if (v2)
  {
    sub_256F92F88(v1 + 24);
    type metadata accessor for BaseOp();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v8 = v12;
    char v13 = 1;
    uint64_t v9 = sub_25704B120();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v5);
    *(void *)(v3 + 16) = v9;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

double sub_257046318@<D0>(uint64_t *a1@<X8>)
{
  sub_256FF43DC(v1, (uint64_t)v5);
  if (v6 && (sub_256FEA220((uint64_t)v5), sub_256FF43DC(v1, (uint64_t)v5), v6 != 1))
  {
    sub_256FEA220((uint64_t)v5);
    a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_269FDC6E0);
    uint64_t v4 = swift_allocObject();
    *a1 = v4;
    double result = 0.0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
  }
  else
  {
    sub_256FEEC3C((uint64_t)v5, (uint64_t)v7);
    sub_25702BB34((uint64_t)v7, a1);
    sub_256FF0EF4((uint64_t)v7);
  }
  return result;
}

uint64_t sub_2570463D0()
{
  return MEMORY[0x25A2B2020](v0 + 24);
}

uint64_t sub_2570463F0(char *a1, char *a2)
{
  return sub_256FF2698(*a1, *a2);
}

uint64_t sub_2570463FC()
{
  return sub_25704B2B0();
}

uint64_t sub_257046474()
{
  sub_25704A810();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2570464D8()
{
  return sub_25704B2B0();
}

uint64_t sub_25704654C@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_2570465AC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701869940;
  if (*v1) {
    uint64_t v2 = 0x6F6E656E696CLL;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2570465E0()
{
  if (*v0) {
    return 0x6F6E656E696CLL;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_257046610@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_25704B0C0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_257046674(uint64_t a1)
{
  unint64_t v2 = sub_257038A18();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2570466B0(uint64_t a1)
{
  unint64_t v2 = sub_257038A18();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2570466EC(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_257046164(a1);
  return v2;
}

double sub_25704673C@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t type metadata accessor for BaseOp()
{
  return self;
}

uint64_t sub_257046770(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t sub_2570467B4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t sub_2570467EC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t sub_257046830(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_257046898(&qword_269FDD610);
  uint64_t result = sub_257046898(&qword_269FDD618);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_257046898(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for BaseOp();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2570468D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 144))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_257046914()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t destroy for OpResult(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 32);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1)
  {
    if (*(void *)(result + 24) < 0xFFFFFFFFuLL) {
      return result;
    }
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  if (!v1 && *(void *)(result + 24) > 0xFFFFFFFEuLL) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for OpResult(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    unint64_t v5 = *(void *)(a2 + 24);
    if (v5 < 0xFFFFFFFF)
    {
      long long v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      *(void *)(a1 + 24) = v5;
      (**(void (***)(uint64_t))(v5 - 8))(a1);
    }
    char v7 = 1;
    goto LABEL_13;
  }
  if (v3)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    char v7 = *(unsigned char *)(a2 + 32);
LABEL_13:
    *(unsigned char *)(a1 + 32) = v7;
    return a1;
  }
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 < 0xFFFFFFFF)
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 32) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for OpResult(uint64_t a1, long long *a2)
{
  if ((long long *)a1 == a2) {
    return a1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 32);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1)
  {
    if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL) {
      goto LABEL_8;
    }
  }
  else if (v4 || *(void *)(a1 + 24) <= 0xFFFFFFFEuLL)
  {
    goto LABEL_8;
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
LABEL_8:
  unsigned int v5 = *((unsigned __int8 *)a2 + 32);
  if (v5 >= 2) {
    unsigned int v5 = *(_DWORD *)a2 + 2;
  }
  if (v5 == 1)
  {
    unint64_t v7 = *((void *)a2 + 3);
    if (v7 < 0xFFFFFFFF)
    {
      long long v11 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v11;
    }
    else
    {
      *(void *)(a1 + 24) = v7;
      (**(void (***)(uint64_t, long long *))(v7 - 8))(a1, a2);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
  else if (v5)
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
  }
  else
  {
    unint64_t v6 = *((void *)a2 + 3);
    if (v6 < 0xFFFFFFFF)
    {
      long long v10 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v10;
    }
    else
    {
      *(void *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OpResult(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL) {
        goto LABEL_10;
      }
    }
    else if (v4 || *(void *)(a1 + 24) <= 0xFFFFFFFEuLL)
    {
LABEL_10:
      unsigned int v5 = *(unsigned __int8 *)(a2 + 32);
      if (v5 >= 2) {
        unsigned int v5 = *(_DWORD *)a2 + 2;
      }
      if (v5 == 1)
      {
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
      }
      else
      {
        if (!v5)
        {
          long long v6 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v6;
          *(unsigned char *)(a1 + 32) = 0;
          return a1;
        }
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        LOBYTE(v5) = *(unsigned char *)(a2 + 32);
      }
      *(unsigned char *)(a1 + 32) = v5;
      return a1;
    }
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_10;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for OpResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for OpResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 32) = 0;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_257046D78(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 32);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_257046D94(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for OpResult()
{
  return &type metadata for OpResult;
}

unsigned char *storeEnumTagSinglePayload for MetadataCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257046E94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetadataCodingKeys()
{
  return &type metadata for MetadataCodingKeys;
}

unint64_t sub_257046ED0()
{
  unint64_t result = qword_269FDD620;
  if (!qword_269FDD620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD620);
  }
  return result;
}

unint64_t sub_257046F28()
{
  unint64_t result = qword_269FDD628;
  if (!qword_269FDD628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD628);
  }
  return result;
}

unint64_t sub_257046F80()
{
  unint64_t result = qword_269FDD630;
  if (!qword_269FDD630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269FDD630);
  }
  return result;
}

void mlx::core::arange()
{
  __assert_rtn("arange", "arange.h", 29, "inputs.size() == 0");
}

void mlx::core::Abs::eval()
{
  __assert_rtn("eval", "primitives.cpp", 23, "inputs.size() == 1");
}

void mlx::core::ArcCos::eval()
{
  __assert_rtn("eval", "primitives.cpp", 38, "inputs.size() == 1");
}

void mlx::core::ArcCosh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 50, "inputs.size() == 1");
}

void mlx::core::ArcSin::eval()
{
  __assert_rtn("eval", "primitives.cpp", 62, "inputs.size() == 1");
}

void mlx::core::ArcSinh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 74, "inputs.size() == 1");
}

void mlx::core::ArcTan::eval()
{
  __assert_rtn("eval", "primitives.cpp", 86, "inputs.size() == 1");
}

void mlx::core::ArcTanh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 98, "inputs.size() == 1");
}

void mlx::core::AsType::eval()
{
  __assert_rtn("eval", "primitives.cpp", 110, "inputs.size() == 1");
}

void mlx::core::Ceil::eval()
{
  __assert_rtn("eval", "primitives.cpp", 117, "inputs.size() == 1");
}

void mlx::core::Cos::eval()
{
  __assert_rtn("eval", "primitives.cpp", 165, "inputs.size() == 1");
}

void mlx::core::Cosh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 177, "inputs.size() == 1");
}

void mlx::core::Erf::eval()
{
  __assert_rtn("eval", "primitives.cpp", 189, "inputs.size() == 1");
}

void mlx::core::ErfInv::eval()
{
  __assert_rtn("eval", "primitives.cpp", 209, "inputs.size() == 1");
}

void mlx::core::Exp::eval()
{
  __assert_rtn("eval", "primitives.cpp", 229, "inputs.size() == 1");
}

void mlx::core::Expm1::eval()
{
  __assert_rtn("eval", "primitives.cpp", 241, "inputs.size() == 1");
}

void mlx::core::Floor::eval()
{
  __assert_rtn("eval", "primitives.cpp", 253, "inputs.size() == 1");
}

void mlx::core::Full::eval()
{
  __assert_rtn("eval", "primitives.cpp", 266, "in.dtype() == out.dtype()");
}

{
  __assert_rtn("eval", "primitives.cpp", 264, "inputs.size() == 1");
}

void mlx::core::Log::eval()
{
  __assert_rtn("eval", "primitives.cpp", 279, "inputs.size() == 1");
}

void mlx::core::Log1p::eval()
{
  __assert_rtn("eval", "primitives.cpp", 301, "inputs.size() == 1");
}

void mlx::core::LogicalNot::eval()
{
  __assert_rtn("eval", "primitives.cpp", 313, "inputs.size() == 1");
}

void mlx::core::LogicalAnd::eval()
{
  __assert_rtn("eval", "primitives.cpp", 319, "inputs.size() == 2");
}

void mlx::core::LogicalOr::eval()
{
  __assert_rtn("eval", "primitives.cpp", 326, "inputs.size() == 2");
}

void mlx::core::Negative::eval()
{
  __assert_rtn("eval", "primitives.cpp", 333, "inputs.size() == 1");
}

void mlx::core::Pad::eval()
{
  __assert_rtn("eval", "primitives.cpp", 348, "val.dtype() == in.dtype() && in.dtype() == out.dtype()");
}

{
  __assert_rtn("eval", "primitives.cpp", 345, "val.size() == 1");
}

{
  __assert_rtn("eval", "primitives.cpp", 340, "inputs.size() == 2");
}

void mlx::core::RandomBits::eval()
{
  __assert_rtn("eval", "primitives.cpp", 370, "inputs.size() == 1");
}

void mlx::core::Reshape::eval()
{
  __assert_rtn("eval", "primitives.cpp", 418, "inputs.size() == 1");
}

void mlx::core::Round::eval()
{
  __assert_rtn("eval", "primitives.cpp", 431, "inputs.size() == 1");
}

void mlx::core::Sigmoid::eval()
{
  __assert_rtn("eval", "primitives.cpp", 442, "inputs.size() == 1");
}

void mlx::core::Sign::eval()
{
  __assert_rtn("eval", "primitives.cpp", 454, "inputs.size() == 1");
}

void mlx::core::Sin::eval()
{
  __assert_rtn("eval", "primitives.cpp", 464, "inputs.size() == 1");
}

void mlx::core::Sinh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 476, "inputs.size() == 1");
}

void mlx::core::Slice::eval()
{
  __assert_rtn("eval", "primitives.cpp", 488, "inputs.size() == 1");
}

void mlx::core::SliceUpdate::eval()
{
  __assert_rtn("eval", "primitives.cpp", 519, "inputs.size() == 2");
}

void mlx::core::Square::eval()
{
  __assert_rtn("eval", "primitives.cpp", 556, "inputs.size() == 1");
}

void mlx::core::Sqrt::eval()
{
  __assert_rtn("eval", "primitives.cpp", 562, "inputs.size() == 1");
}

void mlx::core::Tan::eval()
{
  __assert_rtn("eval", "primitives.cpp", 572, "inputs.size() == 1");
}

void mlx::core::Tanh::eval()
{
  __assert_rtn("eval", "primitives.cpp", 584, "inputs.size() == 1");
}

void mlx::core::AsStrided::eval()
{
  __assert_rtn("eval", "common.cpp", 10, "inputs.size() == 1");
}

void mlx::core::Broadcast::eval()
{
  __assert_rtn("eval", "common.cpp", 46, "inputs.size() == 1");
}

void mlx::core::Copy::eval()
{
  __assert_rtn("eval", "common.cpp", 65, "inputs.size() == 1");
}

void mlx::core::CustomVJP::eval()
{
}

void mlx::core::Depends::eval()
{
}

void mlx::core::NumberOfElements::eval()
{
  __assert_rtn("eval", "common.cpp", 89, "inputs.size() == 1");
}

void mlx::core::Split::eval()
{
  __assert_rtn("eval", "common.cpp", 204, "inputs.size() == 1");
}

void mlx::core::StopGradient::eval()
{
  __assert_rtn("eval", "common.cpp", 309, "inputs.size() == 1");
}

void mlx::core::Transpose::eval()
{
  __assert_rtn("eval", "common.cpp", 314, "inputs.size() == 1");
}

void mlx::core::ArgSort::eval()
{
  __assert_rtn("eval", "sort.cpp", 261, "inputs.size() == 1");
}

void mlx::core::Sort::eval()
{
  __assert_rtn("eval", "sort.cpp", 295, "inputs.size() == 1");
}

void mlx::core::ArgPartition::eval()
{
  __assert_rtn("eval", "sort.cpp", 329, "inputs.size() == 1");
}

void mlx::core::Partition::eval()
{
  __assert_rtn("eval", "sort.cpp", 363, "inputs.size() == 1");
}

void mlx::core::Reduce::eval_cpu()
{
  __assert_rtn("eval_cpu", "reduce.cpp", 75, "inputs.size() == 1");
}

void mlx::core::Scan::eval()
{
  __assert_rtn("eval", "scan.cpp", 249, "inputs.size() == 1");
}

void mlx::core::Reduce::eval()
{
  __assert_rtn("eval", "reduce.cpp", 172, "inputs.size() == 1");
}

void mlx::core::Select::eval()
{
  __assert_rtn("eval", "select.cpp", 65, "inputs.size() == 3");
}

void mlx::core::Add::eval()
{
  __assert_rtn("eval", "binary.cpp", 74, "inputs.size() == 2");
}

void mlx::core::DivMod::eval()
{
  __assert_rtn("eval", "binary.cpp", 83, "inputs.size() == 2");
}

void mlx::core::Divide::eval()
{
  __assert_rtn("eval", "binary.cpp", 136, "inputs.size() == 2");
}

void mlx::core::Remainder::eval()
{
  __assert_rtn("eval", "binary.cpp", 143, "inputs.size() == 2");
}

void mlx::core::Equal::eval()
{
  __assert_rtn("eval", "binary.cpp", 150, "inputs.size() == 2");
}

void mlx::core::Greater::eval()
{
  __assert_rtn("eval", "binary.cpp", 159, "inputs.size() == 2");
}

void mlx::core::GreaterEqual::eval()
{
  __assert_rtn("eval", "binary.cpp", 164, "inputs.size() == 2");
}

void mlx::core::Less::eval()
{
  __assert_rtn("eval", "binary.cpp", 169, "inputs.size() == 2");
}

void mlx::core::LessEqual::eval()
{
  __assert_rtn("eval", "binary.cpp", 174, "inputs.size() == 2");
}

void mlx::core::LogAddExp::eval()
{
  __assert_rtn("eval", "binary.cpp", 179, "inputs.size() == 2");
}

void mlx::core::Maximum::eval()
{
  __assert_rtn("eval", "binary.cpp", 200, "inputs.size() == 2");
}

void mlx::core::Minimum::eval()
{
  __assert_rtn("eval", "binary.cpp", 207, "inputs.size() == 2");
}

void mlx::core::Multiply::eval()
{
  __assert_rtn("eval", "binary.cpp", 214, "inputs.size() == 2");
}

void mlx::core::NotEqual::eval()
{
  __assert_rtn("eval", "binary.cpp", 221, "inputs.size() == 2");
}

void mlx::core::Power::eval()
{
  __assert_rtn("eval", "binary.cpp", 226, "inputs.size() == 2");
}

void mlx::core::Subtract::eval()
{
  __assert_rtn("eval", "binary.cpp", 233, "inputs.size() == 2");
}

void mlx::core::BitwiseBinary::eval_cpu()
{
  __assert_rtn("eval_cpu", "binary.cpp", 240, "inputs.size() == 2");
}

void mlx::core::ArcTan2::eval()
{
  __assert_rtn("eval", "binary.cpp", 297, "inputs.size() == 2");
}

void mlx::core::Scatter::eval()
{
  __assert_rtn("eval", "indexing.cpp", 327, "inputs.size() >= 2");
}

void mlx::core::ArgReduce::eval()
{
  __assert_rtn("eval", "arg_reduce.cpp", 65, "inputs.size() == 1");
}

void mlx::core::array::ArrayDesc::ArrayDesc(uint64_t a1, void **a2, void *a3)
{
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 112);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = *a2;
  if (*a2)
  {
    *(void *)(a1 + 32) = v8;
    operator delete(v8);
  }
  long long v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *a3 = v9;
    operator delete(v9);
  }
}

void mlx::core::array::ArrayDesc::ArrayDesc(uint64_t a1, std::__shared_weak_count **a2, void **a3, void *a4)
{
  long long v8 = *(std::__shared_weak_count **)(a1 + 112);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*a2);
  }
  long long v9 = *a3;
  if (*a3)
  {
    *(void *)(a1 + 32) = v9;
    operator delete(v9);
  }
  long long v10 = *(void **)a1;
  if (*(void *)a1)
  {
    *a4 = v10;
    operator delete(v10);
  }
}

void mlx::core::Abs::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 165, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 164, "primals.size() == 1");
}

void mlx::core::Abs::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 173, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 172, "inputs.size() == 1");
}

void mlx::core::anonymous namespace'::vmap_binary_op()
{
  __assert_rtn("vmap_binary_op", "primitives.cpp", 25, "axes.size() == 2");
}

{
  __assert_rtn("vmap_binary_op", "primitives.cpp", 24, "inputs.size() == 2");
}

void mlx::core::ArcCos::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 283, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 282, "primals.size() == 1");
}

void mlx::core::ArcCos::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 294, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 293, "inputs.size() == 1");
}

void mlx::core::ArcCosh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 311, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 310, "primals.size() == 1");
}

void mlx::core::ArcCosh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 321, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 320, "inputs.size() == 1");
}

void mlx::core::ArcSin::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 338, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 337, "primals.size() == 1");
}

void mlx::core::ArcSin::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 348, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 347, "inputs.size() == 1");
}

void mlx::core::ArcSinh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 365, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 364, "primals.size() == 1");
}

void mlx::core::ArcSinh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 375, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 374, "inputs.size() == 1");
}

void mlx::core::ArcTan::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 392, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 391, "primals.size() == 1");
}

void mlx::core::ArcTan::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 402, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 401, "inputs.size() == 1");
}

void mlx::core::ArcTan2::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 419, "argnums.size() == 2");
}

{
  __assert_rtn("jvp", "primitives.cpp", 418, "primals.size() == 2");
}

void mlx::core::ArcTan2::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 431, "axes.size() == 2");
}

{
  __assert_rtn("vmap", "primitives.cpp", 430, "inputs.size() == 2");
}

void mlx::core::ArcTanh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 449, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 448, "primals.size() == 1");
}

void mlx::core::ArcTanh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 459, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 458, "inputs.size() == 1");
}

void mlx::core::ArgPartition::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 467, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 466, "inputs.size() == 1");
}

void mlx::core::ArgSort::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 501, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 500, "inputs.size() == 1");
}

void mlx::core::AsStrided::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 554, "argnums.size() == 1");
}

void mlx::core::AsStrided::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 583, "primals.size() == 1");
}

void mlx::core::Broadcast::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 637, "argnums.size() == 1");
}

void mlx::core::Broadcast::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 658, "argnums.size() == 1");
}

void mlx::core::Broadcast::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 666, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 665, "inputs.size() == 1");
}

void mlx::core::Ceil::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 699, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 698, "primals.size() == 1");
}

void mlx::core::Ceil::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 707, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 706, "inputs.size() == 1");
}

void mlx::core::Copy::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 1028, "argnums.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 1027, "primals.size() == 1");
}

void mlx::core::Copy::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1037, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1036, "primals.size() == 1");
}

void mlx::core::Copy::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1045, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1044, "inputs.size() == 1");
}

void mlx::core::Cos::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1062, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1061, "primals.size() == 1");
}

void mlx::core::Cos::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1071, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1070, "inputs.size() == 1");
}

void mlx::core::Cosh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1088, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1087, "primals.size() == 1");
}

void mlx::core::Cosh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1096, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1095, "inputs.size() == 1");
}

void mlx::core::Erf::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1302, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1301, "primals.size() == 1");
}

void mlx::core::Erf::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1315, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1314, "inputs.size() == 1");
}

void mlx::core::ErfInv::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1336, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1335, "primals.size() == 1");
}

void mlx::core::ErfInv::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1349, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1348, "inputs.size() == 1");
}

void mlx::core::Exp::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1366, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1365, "primals.size() == 1");
}

void mlx::core::Exp::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1374, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1373, "inputs.size() == 1");
}

void mlx::core::Expm1::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1394, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1393, "primals.size() == 1");
}

void mlx::core::Expm1::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1402, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1401, "inputs.size() == 1");
}

void mlx::core::Floor::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1508, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1507, "primals.size() == 1");
}

void mlx::core::Floor::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1516, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1515, "inputs.size() == 1");
}

void mlx::core::Full::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 1526, "argnums.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 1525, "primals.size() == 1");
}

void mlx::core::Full::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1535, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1534, "primals.size() == 1");
}

void mlx::core::Full::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1543, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1542, "inputs.size() == 1");
}

void mlx::core::Log::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1754, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1753, "primals.size() == 1");
}

void mlx::core::Log::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1767, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1766, "inputs.size() == 1");
}

void mlx::core::Log1p::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1791, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1790, "primals.size() == 1");
}

void mlx::core::Log1p::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1801, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1800, "inputs.size() == 1");
}

void mlx::core::LogicalNot::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1818, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1817, "primals.size() == 1");
}

void mlx::core::LogicalNot::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1826, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1825, "inputs.size() == 1");
}

void mlx::core::LogicalAnd::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 1835, "primals.size() == 2");
}

void mlx::core::LogicalAnd::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1848, "argnums.size() <= 2");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1847, "primals.size() == 2");
}

void mlx::core::LogicalAnd::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1856, "axes.size() == 2");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1855, "inputs.size() == 2");
}

void mlx::core::LogicalOr::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 1867, "primals.size() == 2");
}

void mlx::core::LogicalOr::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 1880, "argnums.size() <= 2");
}

{
  __assert_rtn("jvp", "primitives.cpp", 1879, "primals.size() == 2");
}

void mlx::core::LogicalOr::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 1889, "axes.size() == 2");
}

{
  __assert_rtn("vmap", "primitives.cpp", 1888, "inputs.size() == 2");
}

void mlx::core::Select::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2097, "tangents.size() == 3");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2096, "primals.size() == 3");
}

void mlx::core::Select::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 2131, "cotangents.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 2130, "primals.size() == 3");
}

void mlx::core::Select::vmap()
{
  __assert_rtn("vmap_ternary_op", "primitives.cpp", 61, "axes.size() == 3");
}

{
  __assert_rtn("vmap_ternary_op", "primitives.cpp", 60, "inputs.size() == 3");
}

void mlx::core::Negative::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2175, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2174, "primals.size() == 1");
}

void mlx::core::Negative::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2183, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2182, "inputs.size() == 1");
}

void mlx::core::Pad::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 2219, "argnums.size() == 1 && argnums[0] == 0");
}

void mlx::core::Pad::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2239, "argnums.size() == 1 && argnums[0] == 0");
}

void mlx::core::Partition::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2276, "tangents.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2275, "primals.size() == 1");
}

void mlx::core::Partition::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2286, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2285, "inputs.size() == 1");
}

void mlx::core::RandomBits::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2476, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2475, "inputs.size() == 1");
}

void mlx::core::Reshape::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 2546, "argnums[0] == 0");
}

{
  __assert_rtn("vjp", "primitives.cpp", 2545, "argnums.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 2544, "primals.size() == 1");
}

void mlx::core::Reshape::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2556, "argnums[0] == 0");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2555, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2554, "primals.size() == 1");
}

void mlx::core::Round::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2719, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2718, "primals.size() == 1");
}

void mlx::core::Round::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2727, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2726, "inputs.size() == 1");
}

void mlx::core::Scan::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 2754, "argnums[0] == 0");
}

{
  __assert_rtn("vjp", "primitives.cpp", 2753, "primals.size() == 1");
}

void mlx::core::Scan::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2776, "argnums[0] == 0");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2775, "tangents.size() == 1");
}

void mlx::core::Sigmoid::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2913, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2912, "primals.size() == 1");
}

void mlx::core::Sigmoid::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2924, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2923, "inputs.size() == 1");
}

void mlx::core::Sign::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2941, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2940, "primals.size() == 1");
}

void mlx::core::Sign::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2949, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2948, "inputs.size() == 1");
}

void mlx::core::Sin::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2966, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2965, "primals.size() == 1");
}

void mlx::core::Sin::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2974, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2973, "inputs.size() == 1");
}

void mlx::core::Sinh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 2991, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 2990, "primals.size() == 1");
}

void mlx::core::Sinh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 2999, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 2998, "inputs.size() == 1");
}

void mlx::core::Slice::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 3025, "primals.size() == 1");
}

void mlx::core::Slice::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3090, "primals.size() == 1");
}

void mlx::core::SliceUpdate::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3105, "axes.size() == 2");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3104, "inputs.size() == 2");
}

void mlx::core::SliceUpdate::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 3154, "primals.size() == 2");
}

void mlx::core::SliceUpdate::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3192, "primals.size() == 2");
}

void mlx::core::Sort::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3265, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3264, "inputs.size() == 1");
}

void mlx::core::Sort::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3284, "tangents.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 3283, "primals.size() == 1");
}

void mlx::core::Square::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3335, "tangents.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 3334, "primals.size() == 1");
}

void mlx::core::Square::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3346, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3345, "inputs.size() == 1");
}

void mlx::core::Sqrt::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 3356, "cotangents.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 3355, "primals.size() == 1");
}

void mlx::core::Sqrt::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3387, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3386, "inputs.size() == 1");
}

void mlx::core::Tan::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3456, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 3455, "primals.size() == 1");
}

void mlx::core::Tan::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3465, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3464, "inputs.size() == 1");
}

void mlx::core::Tanh::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3482, "argnums.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 3481, "primals.size() == 1");
}

void mlx::core::Tanh::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3491, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3490, "inputs.size() == 1");
}

void mlx::core::Transpose::vjp()
{
  __assert_rtn("vjp", "primitives.cpp", 3817, "argnums.size() == 1");
}

{
  __assert_rtn("vjp", "primitives.cpp", 3816, "primals.size() == 1");
}

void mlx::core::Transpose::jvp()
{
  __assert_rtn("jvp", "primitives.cpp", 3830, "tangents.size() == 1");
}

{
  __assert_rtn("jvp", "primitives.cpp", 3829, "primals.size() == 1");
}

void mlx::core::Transpose::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3838, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3837, "inputs.size() == 1");
}

void mlx::core::NumberOfElements::vmap()
{
  __assert_rtn("vmap", "primitives.cpp", 3860, "axes.size() == 1");
}

{
  __assert_rtn("vmap", "primitives.cpp", 3859, "inputs.size() == 1");
}

void mlx::core::Abs::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 95, "inputs.size() == 1");
}

void mlx::core::Add::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 109, "inputs.size() == 2");
}

void mlx::core::ArcCos::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 149, "inputs.size() == 1");
}

void mlx::core::ArcCosh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 161, "inputs.size() == 1");
}

void mlx::core::ArcSin::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 173, "inputs.size() == 1");
}

void mlx::core::ArcSinh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 185, "inputs.size() == 1");
}

void mlx::core::ArcTan::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 197, "inputs.size() == 1");
}

void mlx::core::ArcTan2::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 209, "inputs.size() == 2");
}

void mlx::core::ArcTanh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 229, "inputs.size() == 1");
}

void mlx::core::AsType::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 241, "inputs.size() == 1");
}

void mlx::core::Cos::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 270, "inputs.size() == 1");
}

void mlx::core::Cosh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 282, "inputs.size() == 1");
}

void mlx::core::Divide::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 294, "inputs.size() == 2");
}

void mlx::core::Exp::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 332, "inputs.size() == 1");
}

void mlx::core::Expm1::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 348, "inputs.size() == 1");
}

void mlx::core::Full::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 363, "in.dtype() == out.dtype()");
}

{
  __assert_rtn("eval_cpu", "primitives.cpp", 361, "inputs.size() == 1");
}

void mlx::core::Log::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 373, "inputs.size() == 1");
}

void mlx::core::Log1p::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 398, "inputs.size() == 1");
}

void mlx::core::Multiply::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 415, "inputs.size() == 2");
}

void mlx::core::Negative::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 440, "inputs.size() == 1");
}

void mlx::core::Power::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 451, "inputs.size() == 2");
}

void mlx::core::Scan::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 471, "inputs.size() == 1");
}

void mlx::core::Sin::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 502, "inputs.size() == 1");
}

void mlx::core::Sinh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 514, "inputs.size() == 1");
}

void mlx::core::Square::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 526, "inputs.size() == 1");
}

void mlx::core::Sqrt::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 538, "inputs.size() == 1");
}

void mlx::core::Subtract::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 554, "inputs.size() == 2");
}

void mlx::core::Tan::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 594, "inputs.size() == 1");
}

void mlx::core::Tanh::eval_cpu()
{
  __assert_rtn("eval_cpu", "primitives.cpp", 606, "inputs.size() == 1");
}

uint64_t sub_25704A440()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t sub_25704A450()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t sub_25704A460()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t sub_25704A470()
{
  return MEMORY[0x270EEE188]();
}

uint64_t sub_25704A480()
{
  return MEMORY[0x270EEE258]();
}

uint64_t sub_25704A490()
{
  return MEMORY[0x270EEE618]();
}

uint64_t sub_25704A4A0()
{
  return MEMORY[0x270EEE628]();
}

uint64_t sub_25704A4B0()
{
  return MEMORY[0x270EEE638]();
}

uint64_t sub_25704A4C0()
{
  return MEMORY[0x270EEE658]();
}

uint64_t sub_25704A4D0()
{
  return MEMORY[0x270EEE670]();
}

uint64_t sub_25704A4E0()
{
  return MEMORY[0x270EEE688]();
}

uint64_t sub_25704A4F0()
{
  return MEMORY[0x270EEFFE0]();
}

uint64_t sub_25704A500()
{
  return MEMORY[0x270EEFFE8]();
}

uint64_t sub_25704A510()
{
  return MEMORY[0x270EF0060]();
}

uint64_t sub_25704A520()
{
  return MEMORY[0x270EF0070]();
}

uint64_t sub_25704A530()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_25704A540()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t sub_25704A550()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_25704A560()
{
  return MEMORY[0x270F9CFB0]();
}

uint64_t sub_25704A570()
{
  return MEMORY[0x270F9CFC0]();
}

uint64_t sub_25704A580()
{
  return MEMORY[0x270F9D010]();
}

uint64_t sub_25704A590()
{
  return MEMORY[0x270F9D030]();
}

uint64_t sub_25704A5A0()
{
  return MEMORY[0x270F9D060]();
}

uint64_t sub_25704A5B0()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t sub_25704A5C0()
{
  return MEMORY[0x270F9D0B0]();
}

uint64_t sub_25704A5D0()
{
  return MEMORY[0x270F9D0B8]();
}

uint64_t sub_25704A5E0()
{
  return MEMORY[0x270F9D0E8]();
}

uint64_t _sSD8MorpheusE3lenSiyF_0()
{
  return MEMORY[0x270F9D120]();
}

uint64_t sub_25704A600()
{
  return MEMORY[0x270F9D128]();
}

uint64_t sub_25704A610()
{
  return MEMORY[0x270F9D168]();
}

uint64_t sub_25704A620()
{
  return MEMORY[0x270F9D180]();
}

uint64_t sub_25704A630()
{
  return MEMORY[0x270F9D1C0]();
}

uint64_t sub_25704A640()
{
  return MEMORY[0x270F9D1C8]();
}

uint64_t sub_25704A650()
{
  return MEMORY[0x270F9D1D0]();
}

uint64_t sub_25704A660()
{
  return MEMORY[0x270F9D1F0]();
}

uint64_t sub_25704A670()
{
  return MEMORY[0x270F9D208]();
}

uint64_t sub_25704A680()
{
  return MEMORY[0x270F9D210]();
}

uint64_t sub_25704A690()
{
  return MEMORY[0x270F9D218]();
}

uint64_t sub_25704A6A0()
{
  return MEMORY[0x270F9D2B8]();
}

uint64_t sub_25704A6B0()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_25704A6C0()
{
  return MEMORY[0x270F9D480]();
}

uint64_t sub_25704A6D0()
{
  return MEMORY[0x270F9D488]();
}

uint64_t sub_25704A6E0()
{
  return MEMORY[0x270F9D490]();
}

uint64_t sub_25704A6F0()
{
  return MEMORY[0x270F9D498]();
}

uint64_t sub_25704A700()
{
  return MEMORY[0x270F9D4A0]();
}

uint64_t sub_25704A710()
{
  return MEMORY[0x270F9D4A8]();
}

uint64_t sub_25704A720()
{
  return MEMORY[0x270F9D4B0]();
}

uint64_t sub_25704A730()
{
  return MEMORY[0x270F9D590]();
}

uint64_t sub_25704A740()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_25704A750()
{
  return MEMORY[0x270F9D5A0]();
}

uint64_t sub_25704A760()
{
  return MEMORY[0x270F9D5A8]();
}

uint64_t sub_25704A770()
{
  return MEMORY[0x270F9D5C0]();
}

uint64_t sub_25704A780()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_25704A790()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_25704A7A0()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t sub_25704A7B0()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t sub_25704A7C0()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t sub_25704A7D0()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_25704A7E0()
{
  return MEMORY[0x270F9D5E8]();
}

uint64_t sub_25704A7F0()
{
  return MEMORY[0x270F9D648]();
}

uint64_t sub_25704A800()
{
  return MEMORY[0x270F9D6B8]();
}

uint64_t sub_25704A810()
{
  return MEMORY[0x270F9D708]();
}

uint64_t _sSS8MorpheusE3lenSiyF_0()
{
  return MEMORY[0x270F9D740]();
}

uint64_t sub_25704A830()
{
  return MEMORY[0x270F9D748]();
}

uint64_t sub_25704A840()
{
  return MEMORY[0x270F9D750]();
}

uint64_t sub_25704A850()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_25704A870()
{
  return MEMORY[0x270F9D7C0]();
}

uint64_t sub_25704A880()
{
  return MEMORY[0x270F9D7D8]();
}

uint64_t sub_25704A890()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_25704A8A0()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t sub_25704A8B0()
{
  return MEMORY[0x270F9D800]();
}

uint64_t sub_25704A8C0()
{
  return MEMORY[0x270F9D808]();
}

uint64_t sub_25704A8D0()
{
  return MEMORY[0x270F9D810]();
}

uint64_t sub_25704A8E0()
{
  return MEMORY[0x270F9D860]();
}

uint64_t sub_25704A8F0()
{
  return MEMORY[0x270F9D898]();
}

uint64_t sub_25704A900()
{
  return MEMORY[0x270F9D8B0]();
}

uint64_t sub_25704A910()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t sub_25704A920()
{
  return MEMORY[0x270F9D8F0]();
}

uint64_t sub_25704A930()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t sub_25704A940()
{
  return MEMORY[0x270F9D908]();
}

uint64_t sub_25704A950()
{
  return MEMORY[0x270F9D938]();
}

uint64_t sub_25704A960()
{
  return MEMORY[0x270F9D940]();
}

uint64_t sub_25704A970()
{
  return MEMORY[0x270F9D948]();
}

uint64_t sub_25704A980()
{
  return MEMORY[0x270F9D968]();
}

uint64_t sub_25704A990()
{
  return MEMORY[0x270F9D980]();
}

uint64_t sub_25704A9A0()
{
  return MEMORY[0x270F9D9B0]();
}

uint64_t sub_25704A9B0()
{
  return MEMORY[0x270F9D9C0]();
}

uint64_t sub_25704A9C0()
{
  return MEMORY[0x270F9D9C8]();
}

uint64_t sub_25704A9D0()
{
  return MEMORY[0x270F9D9F0]();
}

uint64_t sub_25704A9E0()
{
  return MEMORY[0x270F9DA18]();
}

uint64_t sub_25704A9F0()
{
  return MEMORY[0x270F9DA80]();
}

uint64_t sub_25704AA00()
{
  return MEMORY[0x270F9DB00]();
}

uint64_t sub_25704AA10()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t sub_25704AA20()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t sub_25704AA30()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_25704AA40()
{
  return MEMORY[0x270F9DBC8]();
}

uint64_t sub_25704AA50()
{
  return MEMORY[0x270F9DBD0]();
}

uint64_t sub_25704AA60()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t sub_25704AA70()
{
  return MEMORY[0x270F9DC08]();
}

uint64_t sub_25704AA80()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t sub_25704AA90()
{
  return MEMORY[0x270F9DC18]();
}

uint64_t sub_25704AAA0()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_25704AAB0()
{
  return MEMORY[0x270F9DC30]();
}

uint64_t sub_25704AAC0()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t sub_25704AAD0()
{
  return MEMORY[0x270F9DC60]();
}

uint64_t sub_25704AAE0()
{
  return MEMORY[0x270F9DC88]();
}

uint64_t sub_25704AAF0()
{
  return MEMORY[0x270F9DCA8]();
}

uint64_t sub_25704AB00()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_25704AB10()
{
  return MEMORY[0x270F9DCF8]();
}

uint64_t sub_25704AB20()
{
  return MEMORY[0x270F9DD08]();
}

uint64_t sub_25704AB30()
{
  return MEMORY[0x270F9DD28]();
}

uint64_t sub_25704AB40()
{
  return MEMORY[0x270F9DE18]();
}

uint64_t sub_25704AB50()
{
  return MEMORY[0x270F9DE58]();
}

uint64_t sub_25704AB60()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t sub_25704AB70()
{
  return MEMORY[0x270F9E080]();
}

uint64_t sub_25704AB80()
{
  return MEMORY[0x270FA2B88]();
}

uint64_t sub_25704AB90()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t sub_25704ABA0()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t sub_25704ABB0()
{
  return MEMORY[0x270F9E108]();
}

uint64_t sub_25704ABC0()
{
  return MEMORY[0x270F9E148]();
}

uint64_t sub_25704ABD0()
{
  return MEMORY[0x270F9E150]();
}

uint64_t sub_25704ABE0()
{
  return MEMORY[0x270F9E178]();
}

uint64_t sub_25704ABF0()
{
  return MEMORY[0x270F9E180]();
}

uint64_t sub_25704AC00()
{
  return MEMORY[0x270F9E1B8]();
}

uint64_t sub_25704AC10()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t sub_25704AC20()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t sub_25704AC30()
{
  return MEMORY[0x270FA2BC8]();
}

uint64_t sub_25704AC40()
{
  return MEMORY[0x270F9E330]();
}

uint64_t sub_25704AC50()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t sub_25704AC60()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_25704AC70()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_25704AC80()
{
  return MEMORY[0x270F9E518]();
}

uint64_t sub_25704AC90()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_25704ACA0()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_25704ACB0()
{
  return MEMORY[0x270EF23D8]();
}

uint64_t sub_25704ACC0()
{
  return MEMORY[0x270EF23E8]();
}

uint64_t sub_25704ACD0()
{
  return MEMORY[0x270EF2478]();
}

uint64_t sub_25704ACE0()
{
  return MEMORY[0x270EF24A0]();
}

uint64_t sub_25704ACF0()
{
  return MEMORY[0x270EF2578]();
}

uint64_t sub_25704AD00()
{
  return MEMORY[0x270EF25B0]();
}

uint64_t sub_25704AD10()
{
  return MEMORY[0x270F9E5B8]();
}

uint64_t sub_25704AD20()
{
  return MEMORY[0x270F9E640]();
}

uint64_t sub_25704AD30()
{
  return MEMORY[0x270F9E648]();
}

uint64_t sub_25704AD40()
{
  return MEMORY[0x270F9E650]();
}

uint64_t sub_25704AD50()
{
  return MEMORY[0x270F9E658]();
}

uint64_t sub_25704AD60()
{
  return MEMORY[0x270F9E670]();
}

uint64_t sub_25704AD70()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_25704AD80()
{
  return MEMORY[0x270F9E8C0]();
}

uint64_t sub_25704AD90()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t sub_25704ADA0()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t sub_25704ADB0()
{
  return MEMORY[0x270F9E958]();
}

uint64_t sub_25704ADC0()
{
  return MEMORY[0x270F9E960]();
}

uint64_t sub_25704ADD0()
{
  return MEMORY[0x270F9E970]();
}

uint64_t sub_25704ADE0()
{
  return MEMORY[0x270F9E9A0]();
}

uint64_t sub_25704ADF0()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_25704AE00()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_25704AE10()
{
  return MEMORY[0x270F9E9E0]();
}

uint64_t sub_25704AE20()
{
  return MEMORY[0x270F9EA10]();
}

uint64_t sub_25704AE30()
{
  return MEMORY[0x270F9EA18]();
}

uint64_t sub_25704AE40()
{
  return MEMORY[0x270F9EA30]();
}

uint64_t sub_25704AE50()
{
  return MEMORY[0x270F9EA38]();
}

uint64_t sub_25704AE60()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_25704AE70()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t sub_25704AE80()
{
  return MEMORY[0x270F9EB00]();
}

uint64_t sub_25704AE90()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_25704AEA0()
{
  return MEMORY[0x270F9EB30]();
}

uint64_t sub_25704AEB0()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t sub_25704AEC0()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t sub_25704AED0()
{
  return MEMORY[0x270F9EBD8]();
}

uint64_t sub_25704AEE0()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t sub_25704AEF0()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t sub_25704AF00()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t sub_25704AF10()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t sub_25704AF20()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t sub_25704AF30()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t sub_25704AF40()
{
  return MEMORY[0x270F9ED00]();
}

uint64_t sub_25704AF50()
{
  return MEMORY[0x270F9ED68]();
}

uint64_t sub_25704AF60()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t sub_25704AF70()
{
  return MEMORY[0x270F9EEB0]();
}

uint64_t sub_25704AF80()
{
  return MEMORY[0x270F9EEF8]();
}

uint64_t sub_25704AF90()
{
  return MEMORY[0x270F9EF08]();
}

uint64_t sub_25704AFA0()
{
  return MEMORY[0x270F9EF28]();
}

uint64_t sub_25704AFB0()
{
  return MEMORY[0x270F9EF40]();
}

uint64_t sub_25704AFC0()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_25704AFD0()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_25704AFE0()
{
  return MEMORY[0x270F9F008]();
}

uint64_t sub_25704AFF0()
{
  return MEMORY[0x270F9F030]();
}

uint64_t sub_25704B000()
{
  return MEMORY[0x270F9F038]();
}

uint64_t sub_25704B010()
{
  return MEMORY[0x270F9F040]();
}

uint64_t sub_25704B020()
{
  return MEMORY[0x270F9F048]();
}

uint64_t sub_25704B030()
{
  return MEMORY[0x270F9F050]();
}

uint64_t sub_25704B040()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_25704B050()
{
  return MEMORY[0x270F9F088]();
}

uint64_t sub_25704B060()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_25704B070()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_25704B080()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_25704B090()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_25704B0A0()
{
  return MEMORY[0x270F9F0D0]();
}

uint64_t sub_25704B0B0()
{
  return MEMORY[0x270F9F148]();
}

uint64_t sub_25704B0C0()
{
  return MEMORY[0x270F9F230]();
}

uint64_t sub_25704B0D0()
{
  return MEMORY[0x270F9F248]();
}

uint64_t sub_25704B0E0()
{
  return MEMORY[0x270F9F250]();
}

uint64_t sub_25704B0F0()
{
  return MEMORY[0x270F9F2E8]();
}

uint64_t sub_25704B100()
{
  return MEMORY[0x270F9F2F0]();
}

uint64_t sub_25704B110()
{
  return MEMORY[0x270F9F2F8]();
}

uint64_t sub_25704B120()
{
  return MEMORY[0x270F9F308]();
}

uint64_t sub_25704B130()
{
  return MEMORY[0x270F9F318]();
}

uint64_t sub_25704B140()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_25704B150()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_25704B160()
{
  return MEMORY[0x270F9F4F8]();
}

uint64_t sub_25704B170()
{
  return MEMORY[0x270F9F508]();
}

uint64_t sub_25704B180()
{
  return MEMORY[0x270F9F578]();
}

uint64_t sub_25704B190()
{
  return MEMORY[0x270F9F5A0]();
}

uint64_t sub_25704B1A0()
{
  return MEMORY[0x270F9F770]();
}

uint64_t sub_25704B1B0()
{
  return MEMORY[0x270F9F778]();
}

uint64_t sub_25704B1C0()
{
  return MEMORY[0x270F9F7B0]();
}

uint64_t sub_25704B1D0()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t sub_25704B1E0()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_25704B1F0()
{
  return MEMORY[0x270F9F920]();
}

uint64_t sub_25704B200()
{
  return MEMORY[0x270F9FA60]();
}

uint64_t sub_25704B210()
{
  return MEMORY[0x270F9FA80]();
}

uint64_t sub_25704B220()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t sub_25704B230()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_25704B240()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_25704B250()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_25704B260()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_25704B270()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_25704B290()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_25704B2A0()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_25704B2B0()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_25704B2C0()
{
  return MEMORY[0x270F9FCA8]();
}

uint64_t sub_25704B2D0()
{
  return MEMORY[0x270F9FCB8]();
}

uint64_t sub_25704B2E0()
{
  return MEMORY[0x270F9FCC0]();
}

uint64_t sub_25704B2F0()
{
  return MEMORY[0x270F9FCD0]();
}

uint64_t sub_25704B300()
{
  return MEMORY[0x270F9FCD8]();
}

uint64_t sub_25704B310()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t sub_25704B340()
{
  return MEMORY[0x270FA0128]();
}

int BNNSFilterApplyTwoInput(void *filter, const void *inA, const void *inB, void *out)
{
  return MEMORY[0x270EDE048](filter, inA, inB, out);
}

void *__cdecl BNNSFilterCreateLayerBroadcastMatMul(const BNNSLayerParametersBroadcastMatMul *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x270EDE078](layer_params, filter_params);
}

void BNNSFilterDestroy(void *filter)
{
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x270EFDCB0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x270EFDCD0](allocator);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x270F98338](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98788]();
}

{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987C0]();
}

{
  return MEMORY[0x270F987D8]();
}

void std::shared_future<void>::~shared_future(std::shared_future<void> *this)
{
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x270F98898](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x270F989F8]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x270F98C28]();
}

void std::future<void>::~future(std::future<void> *this)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::thread::join(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

std::future<void> std::promise<void>::get_future(std::promise<void> *this)
{
  return (std::future<void>)MEMORY[0x270F98CE0](this);
}

void std::promise<void>::set_value(std::promise<void> *this)
{
}

std::promise<void> *__cdecl std::promise<void>::promise(std::promise<void> *this)
{
  return (std::promise<void> *)MEMORY[0x270F98CF8](this);
}

void std::promise<void>::~promise(std::promise<void> *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x270FA0150]();
}

float acosf(float a1)
{
  MEMORY[0x270ED8598](a1);
  return result;
}

float acoshf(float a1)
{
  MEMORY[0x270ED85A8](a1);
  return result;
}

float asinf(float a1)
{
  MEMORY[0x270ED8618](a1);
  return result;
}

float asinhf(float a1)
{
  MEMORY[0x270ED8628](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x270ED86C0](a1);
  return result;
}

float atanhf(float a1)
{
  MEMORY[0x270ED86D0](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cblas_sgemm_NEWLAPACK()
{
  return MEMORY[0x270EDE440]();
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

float coshf(float a1)
{
  MEMORY[0x270ED9140](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

float expm1f(float a1)
{
  MEMORY[0x270ED9880](a1);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x270ED99D8](a1, a2);
  return result;
}

void free(void *a1)
{
}

ldiv_t ldiv(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270EDA038](a1, a2);
  result.rem = v3;
  result.quot = v2;
  return result;
}

float log10f(float a1)
{
  MEMORY[0x270EDA0B8](a1);
  return result;
}

float log1pf(float a1)
{
  MEMORY[0x270EDA0C8](a1);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

float nextafterf(float a1, float a2)
{
  MEMORY[0x270EDA718](a1, a2);
  return result;
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

uint64_t sgeqrf_NEWLAPACK()
{
  return MEMORY[0x270EDE770]();
}

uint64_t sgesvdx_NEWLAPACK()
{
  return MEMORY[0x270EDE7C0]();
}

uint64_t sgetrf_NEWLAPACK()
{
  return MEMORY[0x270EDE7C8]();
}

uint64_t sgetri_NEWLAPACK()
{
  return MEMORY[0x270EDE7D8]();
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

float sinhf(float a1)
{
  MEMORY[0x270EDB500](a1);
  return result;
}

uint64_t sorgqr_NEWLAPACK()
{
  return MEMORY[0x270EDE828]();
}

uint64_t spotrf_NEWLAPACK()
{
  return MEMORY[0x270EDE8C0]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_deallocBox()
{
  return MEMORY[0x270FA0220]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x270FA0248]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x270FA0390]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x270FA03C8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x270FA0490]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x270FA04B8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x270FA04F8]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x270FA0630]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

float tanf(float a1)
{
  MEMORY[0x270EDB818](a1);
  return result;
}

float tanhf(float a1)
{
  MEMORY[0x270EDB828](a1);
  return result;
}

void vDSP_maxv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_minv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_svdiv(const float *__A, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
}

void vDSP_vabs(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vabsi(const int *__A, vDSP_Stride __IA, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vaddi(const int *__A, vDSP_Stride __IA, const int *__B, vDSP_Stride __IB, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vdiv(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vdivi(const int *__B, vDSP_Stride __IB, const int *__A, vDSP_Stride __IA, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfix32(const float *__A, vDSP_Stride __IA, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfixu32(const float *__A, vDSP_Stride __IA, unsigned int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vflt32(const int *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfltu32(const unsigned int *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vneg(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vrsum(const float *__A, vDSP_Stride __IA, const float *__S, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsaddi(const int *__A, vDSP_Stride __IA, const int *__B, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdivi(const int *__A, vDSP_Stride __IA, const int *__B, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsmsa(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vvacosf(float *a1, const float *a2, const int *a3)
{
}

void vvacoshf(float *a1, const float *a2, const int *a3)
{
}

void vvasinf(float *a1, const float *a2, const int *a3)
{
}

void vvasinhf(float *a1, const float *a2, const int *a3)
{
}

void vvatan2f(float *a1, const float *a2, const float *a3, const int *a4)
{
}

void vvatanf(float *a1, const float *a2, const int *a3)
{
}

void vvatanhf(float *a1, const float *a2, const int *a3)
{
}

void vvcosf(float *a1, const float *a2, const int *a3)
{
}

void vvcoshf(float *a1, const float *a2, const int *a3)
{
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
}

void vvexpm1f(float *a1, const float *a2, const int *a3)
{
}

void vvlog10f(float *a1, const float *a2, const int *a3)
{
}

void vvlog1pf(float *a1, const float *a2, const int *a3)
{
}

void vvlog2f(float *a1, const float *a2, const int *a3)
{
}

void vvlogf(float *a1, const float *a2, const int *a3)
{
}

void vvpowf(float *a1, const float *a2, const float *a3, const int *a4)
{
}

void vvrsqrtf(float *a1, const float *a2, const int *a3)
{
}

void vvsinf(float *a1, const float *a2, const int *a3)
{
}

void vvsinhf(float *a1, const float *a2, const int *a3)
{
}

void vvsqrtf(float *a1, const float *a2, const int *a3)
{
}

void vvtanf(float *a1, const float *a2, const int *a3)
{
}