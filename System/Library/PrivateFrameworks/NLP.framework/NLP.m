void OUTLINED_FUNCTION_0_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(void *)(v1 - 8) = a1;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1A625B130);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EF7CE328;
  v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x1A625B130);
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1A625B130);
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1A625B130);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

void std::__end_state<char>::~__end_state()
{
}

void *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (void *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1A4320DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A4320E68(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  __int16 v5 = __m;
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = __m;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = &this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (char *)__a.__i_, (char *)__b.__i_, &__p, __m);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)__a.__i_, (std::sub_match<std::__wrap_iter<const char *>> *)__b.__i_, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return this;
}

void sub_1A4320FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_) {
      p_unmatched = &this->__unmatched_;
    }
    else {
      p_unmatched = this->__matches_.__begin_;
    }
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    unint64_t v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        int v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        std::vector<std::csub_match>::pointer begin = this->__matches_.__begin_;
        std::vector<std::csub_match>::pointer end = this->__matches_.__end_;
        if (v16) {
          break;
        }
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l) {
          goto LABEL_14;
        }
      }
      if (end == begin) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  v41 = 0;
  v42 = 0;
  unint64_t v43 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::match_results<const char *> __p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v35 = a4;
    unint64_t v12 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 10) = a2;
    *((void *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    v13 = v42;
    *((void *)v42 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      int v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      float v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          BOOL v18 = (const char *)*((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + 8) = v18;
          *(unsigned char *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 16) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          unint64_t v19 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (void *)v42 - 12);
          v42 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          v22 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            _OWORD *v42 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + 6) = 0;
            *((void *)v22 + 7) = 0;
            v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 10) = v24;
            v42 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v13 = v42;
          ++v14;
          if (v41 != v42) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(void *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_1A43215AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v37 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_58;
  }
  signed __int8 v6 = *current;
  unsigned __int8 v125 = *current;
  signed __int8 v7 = current[1];
  unsigned __int8 v126 = v7;
  if (this->__icase_)
  {
    unsigned __int8 v125 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    unsigned __int8 v126 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124) {
      goto LABEL_8;
    }
LABEL_58:
    BOOL negate = 0;
    uint64_t v37 = 1;
    goto LABEL_59;
  }
  size_t v38 = v123;
  operator delete(__p);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second) {
        goto LABEL_218;
      }
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
    char v15 = v124;
    int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 / 48;
      char v113 = v124;
      if (v124 >= 0) {
        size_t v19 = v124;
      }
      else {
        size_t v19 = v123;
      }
      if (v124 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v18 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v16 / 48;
      }
      BOOL v22 = 1;
      while (1)
      {
        int v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0) {
          size_t size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v14->first.__r_.__value_.__l.__size_;
        }
        if (v23 >= 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v25 = v14;
        }
        else {
          std::vector<std::pair<std::string, std::string>>::pointer v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        }
        if (size >= v19) {
          size_t v26 = v19;
        }
        else {
          size_t v26 = size;
        }
        int v27 = memcmp(p_p, v25, v26);
        BOOL v28 = v19 >= size;
        if (v27) {
          BOOL v28 = v27 >= 0;
        }
        if (v28)
        {
          int v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0) {
            size_t v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v30 = v14->second.__r_.__value_.__l.__size_;
          }
          if (v29 >= 0) {
            data = &v14->second;
          }
          else {
            data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          }
          if (v19 >= v30) {
            size_t v32 = v30;
          }
          else {
            size_t v32 = v19;
          }
          int v33 = memcmp(data, p_p, v32);
          BOOL v34 = v30 >= v19;
          if (v33) {
            BOOL v34 = v33 >= 0;
          }
          if (v34) {
            break;
          }
        }
        BOOL v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          int v35 = 0;
          BOOL negate = 0;
          goto LABEL_162;
        }
      }
      BOOL negate = 1;
      int v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      char v15 = v113;
    }
    else
    {
      BOOL v22 = 0;
      int v35 = 0;
      BOOL negate = 0;
    }
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v22) {
      goto LABEL_195;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_200;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  uint64_t v90 = v124;
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    uint64_t v92 = 0;
    unint64_t v93 = v91 / 24;
    v95 = __p;
    size_t v94 = v123;
    if (v124 >= 0) {
      size_t v96 = v124;
    }
    else {
      size_t v96 = v123;
    }
    if (v93 <= 1) {
      uint64_t v97 = 1;
    }
    else {
      uint64_t v97 = v91 / 24;
    }
    BOOL v98 = 1;
    while (1)
    {
      v99 = &v89[v92];
      std::string::size_type v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      int v101 = (char)v100;
      if ((v100 & 0x80u) != 0) {
        std::string::size_type v100 = v99->__r_.__value_.__l.__size_;
      }
      if (v96 == v100)
      {
        if (v101 >= 0) {
          v102 = &v89[v92];
        }
        else {
          v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        }
        if ((v90 & 0x80) == 0)
        {
          if (v90)
          {
            v103 = &__p;
            uint64_t v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0]) {
                goto LABEL_188;
              }
              v103 = (void **)((char *)v103 + 1);
              v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            BOOL negate = 1;
            int v35 = 5;
            goto LABEL_192;
          }
          BOOL negate = 1;
          if (v98) {
            goto LABEL_220;
          }
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
            goto LABEL_213;
          }
          std::regex_traits<char>::char_class_type mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          std::ctype_base::mask v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              int v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0) {
                goto LABEL_217;
              }
              int v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0) {
                goto LABEL_217;
              }
LABEL_219:
              BOOL negate = v110;
LABEL_220:
              uint64_t v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          int v110 = 1;
          goto LABEL_219;
        }
        unint64_t v118 = v93;
        uint64_t v121 = v90;
        int v105 = memcmp(v95, v102, v94);
        unint64_t v93 = v118;
        uint64_t v90 = v121;
        if (!v105) {
          break;
        }
      }
LABEL_188:
      BOOL v98 = ++v92 < v93;
      if (v92 == v97) {
        goto LABEL_191;
      }
    }
    int v35 = 5;
    BOOL negate = 1;
    goto LABEL_193;
  }
  BOOL v98 = 0;
LABEL_191:
  int v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p);
  if (!v98) {
    goto LABEL_200;
  }
LABEL_195:
  if (v35) {
    goto LABEL_220;
  }
  uint64_t v37 = 2;
LABEL_59:
  unsigned __int8 v39 = *a2->__current_;
  unsigned __int8 v125 = v39;
  if (this->__icase_)
  {
    unsigned __int8 v39 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    unsigned __int8 v125 = v39;
  }
  std::vector<char>::pointer v40 = this->__chars_.__begin_;
  unint64_t v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_66;
      }
    }
LABEL_77:
    BOOL negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  std::regex_traits<char>::char_class_type v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end) {
      goto LABEL_77;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
    }
    else
    {
      char v124 = 1;
      LOWORD(__p) = v39;
    }
    int64_t v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      uint64_t v119 = v37;
      BOOL v116 = negate;
      uint64_t v51 = 0;
      unint64_t v52 = v50 / 48;
      char v114 = v124;
      if (v124 >= 0) {
        size_t v53 = v124;
      }
      else {
        size_t v53 = v123;
      }
      if (v124 >= 0) {
        v54 = &__p;
      }
      else {
        v54 = __p;
      }
      if (v52 <= 1) {
        uint64_t v55 = 1;
      }
      else {
        uint64_t v55 = v50 / 48;
      }
      BOOL v56 = 1;
      while (1)
      {
        int v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0) {
          size_t v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v58 = v49->first.__r_.__value_.__l.__size_;
        }
        if (v57 >= 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v59 = v49;
        }
        else {
          std::vector<std::pair<std::string, std::string>>::pointer v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        }
        if (v58 >= v53) {
          size_t v60 = v53;
        }
        else {
          size_t v60 = v58;
        }
        int v61 = memcmp(v54, v59, v60);
        BOOL v62 = v53 >= v58;
        if (v61) {
          BOOL v62 = v61 >= 0;
        }
        if (v62)
        {
          int v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0) {
            size_t v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v64 = v49->second.__r_.__value_.__l.__size_;
          }
          if (v63 >= 0) {
            v65 = &v49->second;
          }
          else {
            v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          }
          if (v53 >= v64) {
            size_t v66 = v64;
          }
          else {
            size_t v66 = v53;
          }
          int v67 = memcmp(v65, v54, v66);
          BOOL v68 = v64 >= v53;
          if (v67) {
            BOOL v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }
        BOOL v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          BOOL negate = v116;
          goto LABEL_123;
        }
      }
      BOOL negate = 1;
LABEL_123:
      uint64_t v37 = v119;
      if ((v114 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    else
    {
      BOOL v56 = 0;
      if ((v124 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    operator delete(__p);
LABEL_125:
    if (v56) {
      goto LABEL_221;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_154;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  std::vector<std::string>::pointer v69 = this->__equivalences_.__begin_;
  uint64_t v70 = v124;
  int64_t v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    uint64_t v120 = v37;
    uint64_t v72 = 0;
    unint64_t v73 = v71 / 24;
    v74 = __p;
    size_t v75 = v123;
    if (v124 >= 0) {
      size_t v76 = v124;
    }
    else {
      size_t v76 = v123;
    }
    if (v73 <= 1) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v71 / 24;
    }
    BOOL v78 = 1;
    while (1)
    {
      v79 = &v69[v72];
      std::string::size_type v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      int v81 = (char)v80;
      if ((v80 & 0x80u) != 0) {
        std::string::size_type v80 = v79->__r_.__value_.__l.__size_;
      }
      if (v76 == v80)
      {
        if (v81 >= 0) {
          v82 = &v69[v72];
        }
        else {
          v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        }
        if ((v70 & 0x80) != 0)
        {
          BOOL v117 = negate;
          unint64_t v85 = v73;
          uint64_t v115 = v77;
          int v86 = memcmp(v74, v82, v75);
          uint64_t v77 = v115;
          unint64_t v73 = v85;
          BOOL negate = v117;
          if (!v86)
          {
            BOOL negate = 1;
            uint64_t v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!v70)
          {
            BOOL negate = 1;
            uint64_t v37 = v120;
            if (!v78) {
              goto LABEL_154;
            }
            goto LABEL_221;
          }
          v83 = &__p;
          uint64_t v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            v83 = (void **)((char *)v83 + 1);
            v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              BOOL negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      BOOL v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        uint64_t v37 = v120;
        if ((v70 & 0x80) == 0) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
  }
  BOOL v78 = 0;
  if (v124 < 0) {
LABEL_152:
  }
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0) {
      goto LABEL_221;
    }
    std::regex_traits<char>::char_class_type v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      int v88 = (v87 >> 7) & 1;
      if (v125 != 95) {
        int v88 = 0;
      }
      if (v88 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    int v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    int v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  uint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  unint64_t *v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<std::pair<char, char>>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      unint64_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      size_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    unint64_t v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v4 = __sz >= v3;
  std::vector<std::csub_match>::size_type v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  std::vector<std::csub_match>::size_type v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (char *)this->__begin_;
    unint64_t v9 = __n + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      std::vector<std::csub_match>::size_type v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)p_end_cap, v12);
    }
    else {
      std::vector<std::csub_match>::size_type v13 = 0;
    }
    std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    char v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    std::vector<std::csub_match>::size_type v16 = &v14[__n];
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos) {
    this->__position_start_ = __f;
  }
  this->__ready_ = 1;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __sz)
{
  std::vector<std::ssub_match>::size_type v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v3 = __sz >= v2;
  std::vector<std::ssub_match>::size_type v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  std::vector<std::csub_match>::pointer end = p_match->__matches_.__end_;
  unint64_t v9 = &__x->__match_;
  std::vector<std::ssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  uint64_t v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::string>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      std::pair<const char *, const char *> v14 = (const void **)a2[1];
      do
      {
        char v15 = v14;
        std::pair<const char *, const char *> v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = (const void **)a2;
      do
      {
        char v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        unint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    unint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  uint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      uint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    std::vector<std::csub_match>::size_type v16 = a2;
    do
    {
      unint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      std::vector<std::csub_match>::size_type v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  BOOL v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *applesauce::CF::details::CFString_get_value<false>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr) {
    return std::string::basic_string[abi:ne180100]<0>((void *)a2, CStringPtr);
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((void *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0) {
    uint8x8_t v7 = (UInt8 *)a2;
  }
  else {
    uint8x8_t v7 = *(UInt8 **)a2;
  }
  v10.location = 0;
  v10.length = Length;
  return (void *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int8x8_t v5 = v6;
  uint8x8_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(v4, v13);
      unint64_t v8 = *a1;
      uint8x8_t v7 = a1[1];
    }
    else
    {
      std::pair<const char *, const char *> v14 = 0;
    }
    char v15 = &v14[4 * v11];
    std::vector<std::csub_match>::size_type v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    BOOL v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::csub_match>::pointer end = a1->__end_;
  uint8x8_t v7 = a2;
  do
  {
    unint64_t v8 = v7;
    uint8x8_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    unint64_t v10 = v8 + 1;
    uint64_t v11 = v8 + 1;
    do
    {
      unint64_t v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    std::vector<std::csub_match>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int8x8_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint8x8_t v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      unint64_t v8 = v5;
      int8x8_t v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  uint64_t v4 = (unsigned char *)v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::pair<const char *, const char *> v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          std::pair<const char *, const char *> v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          std::pair<const char *, const char *> v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    std::pair<const char *, const char *> v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (std::vector<std::csub_match>::size_type v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          BOOL v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        BOOL v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      BOOL v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_36;
      }
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    char v20 = 1;
    uint64_t v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  uint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    uint64_t v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    uint64_t v4 = (unsigned char *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if (v16 == 92)
    {
      if (v11) {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v20) {
    return v4;
  }
  return (unsigned char *)v6;
}

void sub_1A4323260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<std::csub_match>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      unint64_t v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        unint64_t v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    int v15 = a2 + 1;
    std::vector<std::csub_match>::size_type v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            unint64_t v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              unint64_t v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              std::pair<const char *, const char *> v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            std::pair<const char *, const char *> v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        int v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          unint64_t v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            unint64_t v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        std::string v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            unint64_t v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                unint64_t v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            std::pair<const char *, const char *> v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    unint64_t v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      unint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    unint64_t v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      unint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_1A43236E8(_Unwind_Exception *a1)
{
  MEMORY[0x1A625B130](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1A4323864(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      BOOL v8 = v6 == 40;
      unsigned int v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        int v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            int v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int marked_count = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            int v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int v13 = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
LABEL_31:
            uint64_t v3 = v12 + 1;
            std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v18.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v15 = a2[1];
    if (v15 == 66)
    {
      BOOL v16 = 1;
    }
    else
    {
      if (v15 != 98) {
        return v3;
      }
      BOOL v16 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v16);
    v3 += 2;
  }
  return v3;
}

void sub_1A4323B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v3;
  }
  int v6 = *a2;
  if (v6 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46) {
        operator new();
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_28;
      }
LABEL_34:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (a2 + 1 != a3)
    {
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        p_open_count = &this->__open_count_;
        ++this->__open_count_;
        int v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
        if (v9 == a3) {
          goto LABEL_35;
        }
        uint64_t v10 = v9;
        if (*v9 != 41) {
          goto LABEL_35;
        }
        goto LABEL_25;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      unsigned int marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      int v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v12 != a3)
      {
        uint64_t v10 = v12;
        if (*v12 == 41)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
LABEL_25:
          --*p_open_count;
          return (unsigned __int8 *)(v10 + 1);
        }
      }
    }
LABEL_35:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_34;
    }
LABEL_28:
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_1A4323FBC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x1A625B030]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA280]);
  return this;
}

void sub_1A43240DC(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = (char)*a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unsigned int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1A43243FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1A43244A8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    return std::string::basic_string[abi:ne180100]<0>((void *)a2, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex maxBufLen = 0;
    v10.location = 0;
    v10.length = Length;
    CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    std::string::basic_string[abi:ne180100]((void *)a2, maxBufLen, 0);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (UInt8 *)a2;
    }
    else {
      uint64_t v7 = *(UInt8 **)a2;
    }
    v11.location = 0;
    v11.length = Length;
    return (void *)CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
  }
}

void sub_1A43245B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *unint64_t v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t std::__split_buffer<std::vector<CFRange>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t _nlpDefaultLog()
{
  if (_nlpDefaultLog::token != -1) {
    dispatch_once(&_nlpDefaultLog::token, &__block_literal_global);
  }
  return _nlpDefaultLog::log;
}

os_log_t ___nlpDefaultLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.NLP", "NLPDefaultLog");
  _nlpDefaultLog::log = (uint64_t)result;
  return result;
}

uint64_t _nlpSignpostLog()
{
  if (_nlpSignpostLog::token != -1) {
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_3);
  }
  return _nlpSignpostLog::log;
}

os_log_t ___nlpSignpostLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.NLP", "NLPSignposts");
  _nlpSignpostLog::log = (uint64_t)result;
  return result;
}

uint64_t _CFInit_TextSlotWrapper(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF7CCB28;
  return result;
}

uint64_t createTextSlotWrapper(NLTextSlot *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_TextSlotWrapper)
  {
    qword_1EC023F48 = 0;
    unk_1EC023F58 = 0u;
    unk_1EC023F68 = 0u;
    g_CFTypeID_TextSlotWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t NLTextSlotGetRange(uint64_t a1)
{
  uint64_t v1 = *(NLTextSlot **)(a1 + 24);
  if (v1) {
    return NLTextSlot::getRange(v1);
  }
  else {
    return -1;
  }
}

NLTextSlot *NLTextSlotGetSlotID(uint64_t a1)
{
  uint64_t result = *(NLTextSlot **)(a1 + 24);
  if (result) {
    return (NLTextSlot *)NLTextSlot::getSlotID(result);
  }
  return result;
}

NLTextSlot *NLTextSlotGetResolvedDate(uint64_t a1)
{
  uint64_t result = *(NLTextSlot **)(a1 + 24);
  if (result) {
    return (NLTextSlot *)NLTextSlot::getResolvedDate(result);
  }
  return result;
}

NLTextSlot *NLTextSlotIsAllDayEvent(uint64_t a1)
{
  uint64_t result = *(NLTextSlot **)(a1 + 24);
  if (result) {
    return (NLTextSlot *)NLTextSlot::getAllDayEventFlag(result);
  }
  return result;
}

uint64_t _CFInit_TextSlotRecurrentEventWrapper(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF7CDA90;
  return result;
}

uint64_t createTextSlotRecurrentEventWrapper(NLTextSlotRecurrentEvent *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_TextSlotRecurrentEventWrapper)
  {
    qword_1EC023EE8 = 0;
    unk_1EC023EF8 = 0u;
    unk_1EC023F08 = 0u;
    g_CFTypeID_TextSlotRecurrentEventWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  return result;
}

NL::AssetResource *NLTextSlotRecurrentEventGetEventStartDate(uint64_t a1)
{
  uint64_t result = *(NL::AssetResource **)(a1 + 24);
  if (result) {
    return (NL::AssetResource *)NL::AssetResource::URL(result);
  }
  return result;
}

NLTextSlotRecurrentEvent *NLTextSlotRecurrentEventGetEventEndDate(uint64_t a1)
{
  uint64_t result = *(NLTextSlotRecurrentEvent **)(a1 + 24);
  if (result) {
    return (NLTextSlotRecurrentEvent *)NLTextSlotRecurrentEvent::getEventEndDate(result);
  }
  return result;
}

NL::Resource *NLTextSlotRecurrentEventGetEventFrequency(uint64_t a1)
{
  uint64_t result = *(NL::Resource **)(a1 + 24);
  if (result) {
    return (NL::Resource *)NL::Resource::name(result);
  }
  return result;
}

uint64_t NLTextSlotRecurrentEventGetEventRange(uint64_t a1)
{
  uint64_t v1 = *(NLTextStructuredEvent **)(a1 + 24);
  if (v1) {
    return NLTextStructuredEvent::getActionPhraseRange(v1);
  }
  else {
    return -1;
  }
}

NLTextSlotRecurrentEvent *NLTextSlotRecurrentEventIsAllDayEvent(uint64_t a1)
{
  uint64_t result = *(NLTextSlotRecurrentEvent **)(a1 + 24);
  if (result) {
    return (NLTextSlotRecurrentEvent *)NLTextSlotRecurrentEvent::getAllDayEventFlag(result);
  }
  return result;
}

uint64_t _CFInit_TextStructuredEventWrapper(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF7CD710;
  return result;
}

uint64_t createTextStructuredEventWrapper(NLTextStructuredEvent *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_TextStructuredEventWrapper)
  {
    qword_1EC0240C8 = 0;
    unk_1EC0240D8 = 0u;
    unk_1EC0240E8 = 0u;
    g_CFTypeID_TextStructuredEventWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t NLTextStructuredEventGetEventDescriptorRange(uint64_t a1)
{
  uint64_t v1 = *(NLTextSlot **)(a1 + 24);
  if (v1) {
    return NLTextSlot::getRange(v1);
  }
  else {
    return -1;
  }
}

uint64_t NLTextStructuredEventGetActionPhraseRange(uint64_t a1)
{
  uint64_t v1 = *(NLTextStructuredEvent **)(a1 + 24);
  if (v1) {
    return NLTextStructuredEvent::getActionPhraseRange(v1);
  }
  else {
    return -1;
  }
}

NL::Resource *NLTextStructuredEventGetEventFixedDateSlot(uint64_t a1)
{
  uint64_t result = *(NL::Resource **)(a1 + 24);
  if (result)
  {
    uint64_t v2 = (NLTextSlot *)NL::Resource::name(result);
    return (NL::Resource *)createTextSlotWrapper(v2);
  }
  return result;
}

NLTextStructuredEvent *NLTextStructuredEventGetRecurrentEvent(uint64_t a1)
{
  uint64_t result = *(NLTextStructuredEvent **)(a1 + 24);
  if (result)
  {
    RecurrentEvent = (NLTextSlotRecurrentEvent *)NLTextStructuredEvent::getRecurrentEvent(result);
    return (NLTextStructuredEvent *)createTextSlotRecurrentEventWrapper(RecurrentEvent);
  }
  return result;
}

__CFArray *NLTextStructuredEventGetLocationRanges(uint64_t a1)
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = *(NLTextStructuredEvent **)(a1 + 24);
  if (v3)
  {
    NLTextStructuredEvent::getLocationRanges(v3, &v8);
    int v4 = v8;
    uint64_t v5 = v9;
    if (v8 != v9)
    {
      do
      {
        TextSlotWrapper = (const void *)createTextSlotWrapper(*v4);
        CFArrayAppendValue(Mutable, TextSlotWrapper);
        CFRelease(TextSlotWrapper);
        ++v4;
      }
      while (v4 != v5);
      int v4 = v8;
    }
    if (v4)
    {
      unint64_t v9 = v4;
      operator delete(v4);
    }
  }
  return Mutable;
}

void sub_1A4324BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *NLTextStructuredEventGetPeopleRanges(uint64_t a1)
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = *(NLTextStructuredEvent **)(a1 + 24);
  if (v3)
  {
    NLTextStructuredEvent::getPeopleRanges(v3, &v8);
    int v4 = v8;
    uint64_t v5 = v9;
    if (v8 != v9)
    {
      do
      {
        TextSlotWrapper = (const void *)createTextSlotWrapper(*v4);
        CFArrayAppendValue(Mutable, TextSlotWrapper);
        CFRelease(TextSlotWrapper);
        ++v4;
      }
      while (v4 != v5);
      int v4 = v8;
    }
    if (v4)
    {
      unint64_t v9 = v4;
      operator delete(v4);
    }
  }
  return Mutable;
}

void sub_1A4324CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _CFInit_TextSlotParserWrapper(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF7CCF00;
  return result;
}

uint64_t createTextSlotParserWrapper(NLTextSlotParser *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_TextSlotParserWrapper)
  {
    qword_1EC024068 = 0;
    unk_1EC024078 = 0u;
    unk_1EC024088 = 0u;
    g_CFTypeID_TextSlotParserWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  return result;
}

CFDictionaryRef NLTextSlotParserCreate(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryGetValue(result, kNLTextSlotParserLocaleKey[0]);
    operator new();
  }
  return result;
}

#error "1A4324E84: call analysis failed (funcsize=41)"

void __clang_call_terminate(void *a1)
{
}

NLTextSlotParser *NLTextSlotParserCreateStructuredEvent(uint64_t a1, const __CFString *a2, const __CFTimeZone *a3)
{
  uint64_t result = *(NLTextSlotParser **)(a1 + 24);
  if (result)
  {
    StructuredEvent = (NLTextStructuredEvent *)NLTextSlotParser::createStructuredEvent(result, a2, a3);
    return (NLTextSlotParser *)createTextStructuredEventWrapper(StructuredEvent);
  }
  return result;
}

void TextSlotWrapper::~TextSlotWrapper(TextSlotWrapper *this)
{
  TextSlotWrapper::~TextSlotWrapper(this);

  JUMPOUT(0x1A625B130);
}

{
  NLTextSlot *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CCB28;
  uint64_t v2 = (NLTextSlot *)*((void *)this + 1);
  if (v2)
  {
    NLTextSlot::~NLTextSlot(v2);
    MEMORY[0x1A625B130]();
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

uint64_t NL::CFType::Copy(NL::CFType *this, const __CFAllocator *a2)
{
  return 0;
}

uint64_t NL::CFType::Equal(NL::CFType *this, const NL::CFType *a2)
{
  return 0;
}

uint64_t NL::CFType::Hash(NL::CFType *this)
{
  return 0;
}

uint64_t NL::CFType::CopyFormattingDesc(NL::CFType *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t NL::CFType::CopyDebugDesc(NL::CFType *this)
{
  return 0;
}

void TextSlotRecurrentEventWrapper::~TextSlotRecurrentEventWrapper(TextSlotRecurrentEventWrapper *this)
{
  TextSlotRecurrentEventWrapper::~TextSlotRecurrentEventWrapper(this);

  JUMPOUT(0x1A625B130);
}

{
  NLTextSlotRecurrentEvent *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CDA90;
  uint64_t v2 = (NLTextSlotRecurrentEvent *)*((void *)this + 1);
  if (v2)
  {
    NLTextSlotRecurrentEvent::~NLTextSlotRecurrentEvent(v2);
    MEMORY[0x1A625B130]();
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void TextStructuredEventWrapper::~TextStructuredEventWrapper(TextStructuredEventWrapper *this)
{
  TextStructuredEventWrapper::~TextStructuredEventWrapper(this);

  JUMPOUT(0x1A625B130);
}

{
  NLTextStructuredEvent *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CD710;
  uint64_t v2 = (NLTextStructuredEvent *)*((void *)this + 1);
  if (v2)
  {
    NLTextStructuredEvent::~NLTextStructuredEvent(v2);
    MEMORY[0x1A625B130]();
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void TextSlotParserWrapper::~TextSlotParserWrapper(TextSlotParserWrapper *this)
{
  TextSlotParserWrapper::~TextSlotParserWrapper(this);

  JUMPOUT(0x1A625B130);
}

{
  NLTextSlotParser *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CCF00;
  uint64_t v2 = (NLTextSlotParser *)*((void *)this + 1);
  if (v2)
  {
    NLTextSlotParser::~NLTextSlotParser(v2);
    MEMORY[0x1A625B130]();
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void NL::SpotlightParseFormatter::SpotlightParseFormatter(void *a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  unint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NL::ParseFormatter::ParseFormatter((uint64_t)a1, &v8, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  a1[18] = 0;
  a1[22] = 0;
  *a1 = &unk_1EF7CDD28;
  a1[21] = a1 + 22;
  a1[23] = 0;
  a1[25] = 0;
  a1[24] = a1 + 25;
  a1[19] = 0;
  a1[20] = 0;
  a1[26] = 0;
  a1[28] = 0;
  a1[27] = a1 + 28;
  a1[29] = 0;
  a1[31] = 0;
  a1[30] = a1 + 31;
  a1[34] = 0;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = a1 + 34;
  a1[37] = 0;
  a1[38] = 0;
  a1[36] = a1 + 37;
  operator new();
}

void sub_1A4325338(_Unwind_Exception *a1)
{
  uint64_t v8 = v6;
  MEMORY[0x1A625B130](v8, 0x1020C405730B0C9);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1 + 288, *(void **)(v1 + 296));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1 + 264, *(void **)(v1 + 272));
  std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::destroy(v7, *(void **)(v1 + 248));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v5, *(void **)(v1 + 224));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v4, *(void **)(v1 + 200));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v3, *(void **)(v1 + 176));
  uint64_t v10 = *(std::__shared_weak_count **)(v1 + 160);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::unique_ptr<NL::SpotlightUserContext>::reset[abi:ne180100](v2, 0);
  NL::ParseFormatter::~ParseFormatter((const void **)v1);
  _Unwind_Resume(a1);
}

const void **std::unique_ptr<NL::SpotlightUserContext>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::SpotlightUserContext::~SpotlightUserContext(result);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

void NL::SpotlightParseFormatter::loadDates(NL::SpotlightParseFormatter *this)
{
  uint64_t v1 = (uint64_t **)((char *)this + 264);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
  int v27 = __p;
  uint64_t v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v2 + 56, "kMDItemUserSharedSentDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
  int v27 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "com_apple_mail_dateSent");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
  int v27 = __p;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v4 + 56, "kMDItemContentCreationDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGESENT");
  int v27 = __p;
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "kMDItemContentCreationDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGESENT");
  int v27 = __p;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v6 + 56, "kMDItemContentCreationDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
  int v27 = __p;
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "kMDItemUserSharedReceivedDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
  int v27 = __p;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v8 + 56, "com_apple_mail_dateReceived");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
  int v27 = __p;
  unint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "com_apple_mail_dateReceived");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGERECEIVED");
  int v27 = __p;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v10 + 56, "kMDItemDateAdded");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
  int v27 = __p;
  CFRange v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "kMDItemDateAdded");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "USERCREATED");
  int v27 = __p;
  unint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v12 + 56, "kMDItemUserCreatedDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
  int v27 = __p;
  char v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "kMDItemContentCreationDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "USERMODIFIED");
  int v27 = __p;
  uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v14 + 56, "kMDItemUserModifiedDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILMODIFIED");
  int v27 = __p;
  unint64_t v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "kMDItemUsedDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "FILEMODIFIED");
  int v27 = __p;
  float v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v16 + 56, "kMDItemContentModificationDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "USERPRINTED");
  int v27 = __p;
  float v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "kMDItemUserPrintedDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "USERWEBVIEWED");
  int v27 = __p;
  BOOL v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v18 + 56, "kMDItemDateAdded");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "FILEVIEWED");
  int v27 = __p;
  unint64_t v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "kMDItemLastUsedDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WEBVIEWED");
  int v27 = __p;
  unint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v20 + 56, "kMDItemDateAdded");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILVIEWED");
  int v27 = __p;
  size_t v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "com_apple_mail_dateLastViewed");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILVIEWED");
  int v27 = __p;
  BOOL v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v22 + 56, "com_apple_mail_dateLastViewed");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "FILEDOWNLOADED");
  int v27 = __p;
  unint64_t v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "kMDItemDownloadDate");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "FILEADDED");
  int v27 = __p;
  std::string v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  MEMORY[0x1A625AE00]((char *)v24 + 56, "kMDItemDateAdded");
  if (v26 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1A4325BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NL::SpotlightParseFormatter::load(uint64_t a1, int a2)
{
  uint64_t v4 = (uint64_t **)(a1 + 216);
  uint64_t v5 = (void *)(a1 + 224);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1 + 216, *(void **)(a1 + 224));
  *(void *)(a1 + 216) = v5;
  void *v5 = 0;
  uint64_t v6 = *(void **)(a1 + 176);
  *(void *)(a1 + 232) = 0;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1 + 168, v6);
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "TO");
  __p[0] = v37;
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  unsigned __int8 v39 = __p;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v8 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "TO");
  __p[0] = v37;
  unint64_t v9 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  unsigned __int8 v39 = __p;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v10 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "SENTO");
  __p[0] = v37;
  CFRange v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  unsigned __int8 v39 = __p;
  unint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v12 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "SENTO");
  __p[0] = v37;
  char v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  unsigned __int8 v39 = __p;
  uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v14 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "RECIPIENT");
  __p[0] = v37;
  unint64_t v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  unsigned __int8 v39 = __p;
  float v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v16 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "RECIPIENT");
  __p[0] = v37;
  float v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  unsigned __int8 v39 = __p;
  BOOL v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v18 + 56, "kMDUserQueryRecipientKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "FROM");
  __p[0] = v37;
  unint64_t v19 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  unsigned __int8 v39 = __p;
  unint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v20 + 56, "kMDUserQuerySenderKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "FROM");
  __p[0] = v37;
  size_t v21 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  unsigned __int8 v39 = __p;
  BOOL v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v22 + 56, "kMDUserQuerySenderKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "SENDER");
  __p[0] = v37;
  unint64_t v23 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  unsigned __int8 v39 = __p;
  std::string v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v24 + 56, "kMDUserQuerySenderKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "SENDER");
  __p[0] = v37;
  std::string v25 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  unsigned __int8 v39 = __p;
  char v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v26 + 56, "kMDUserQuerySenderKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "KIND");
  __p[0] = v37;
  int v27 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailKind");
  unsigned __int8 v39 = __p;
  uint64_t v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v28 + 56, "kMDUserQueryKindKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "KIND");
  __p[0] = v37;
  int v29 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageKind");
  unsigned __int8 v39 = __p;
  size_t v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v30 + 56, "kMDUserQueryKindKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "TITLED");
  __p[0] = v37;
  unsigned int v31 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  unsigned __int8 v39 = __p;
  size_t v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v32 + 56, "kMDUserQueryTitleKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "ABOUT");
  __p[0] = v37;
  int v33 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)v37, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  unsigned __int8 v39 = __p;
  BOOL v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  MEMORY[0x1A625AE00]((char *)v34 + 56, "kMDUserQueryTopicKey");
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (a2 == 1)
  {
    NL::SpotlightParseFormatter::loadMailTranslations((NL::SpotlightParseFormatter *)a1);
  }
  else if (a2 == 3)
  {
    NL::SpotlightParseFormatter::loadNotesTranslations((NL::SpotlightParseFormatter *)a1);
  }
  else
  {
    NL::SpotlightParseFormatter::loadSpotlightTranslations((NL::SpotlightParseFormatter *)a1);
  }
  NL::SpotlightParseFormatter::loadUserQueries((NL::SpotlightParseFormatter *)a1);
}

void sub_1A4326598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NL::SpotlightParseFormatter::~SpotlightParseFormatter(NL::SpotlightParseFormatter *this)
{
  *(void *)this = &unk_1EF7CDD28;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 288, *((void **)this + 37));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 264, *((void **)this + 34));
  std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::destroy((uint64_t)this + 240, *((void **)this + 31));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 216, *((void **)this + 28));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 192, *((void **)this + 25));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 168, *((void **)this + 22));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<NL::SpotlightUserContext>::reset[abi:ne180100]((const void ***)this + 18, 0);

  NL::ParseFormatter::~ParseFormatter((const void **)this);
}

{
  uint64_t vars8;

  NL::SpotlightParseFormatter::~SpotlightParseFormatter(this);

  JUMPOUT(0x1A625B130);
}

__CFDictionary *NL::SpotlightParseFormatter::copyDefaultParseResult(CFStringRef *this, char a2)
{
  NL::SpotlightParseFormatter::reset((NL::SpotlightParseFormatter *)this);
  CFStringRef v4 = this[3];
  uint64_t v5 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v4 && (CFStringRef info = (const __CFString *)v4[3].info) != 0)
  {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], info);
    uint64_t v8 = (const void **)(this + 5);
  }
  else
  {
    uint64_t v8 = (const void **)(this + 5);
    CFStringRef Copy = &stru_1EF7CF078;
  }
  nlp::CFScopedPtr<__CFString const*>::reset(v8, Copy);
  CFStringRef v9 = this[5];
  if (!v9) {
    goto LABEL_24;
  }
  BOOL v10 = LOBYTE(this[1][2].isa) != 0;
  CFIndex Length = CFStringGetLength(this[5]);
  uint64_t v12 = 200;
  if (!v10 || Length <= 200) {
    uint64_t v12 = Length;
  }
  int v13 = v12 < 801 || v10;
  v14.length = v13 ? v12 : 800;
  v14.location = 0;
  CFStringRef v15 = CFStringCreateWithSubstring(*v5, v9, v14);
  CFStringRef v25 = v15;
  if (v15)
  {
    CFStringRef v16 = v15;
    getUTF8StringFromCFString(v15, &v24);
    escapeContent(&v24);
    std::string::basic_string[abi:ne180100]<0>(&v23, "(** = \"%@*\"cdwt)");
    std::string::basic_string[abi:ne180100]<0>(__p, "%@");
    replaceAll(&v23, (char *)__p, (uint64_t)&v24);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    CFStringRef CFStringFromString = createCFStringFromString((uint64_t)&v23);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    CFRelease(v16);
    if (CFStringFromString)
    {
      BOOL v18 = (__CFArray *)this[7];
      if (v18) {
        CFArrayAppendValue(v18, CFStringFromString);
      }
    }
  }
  else
  {
LABEL_24:
    CFStringRef CFStringFromString = 0;
  }
  unint64_t v19 = NL::ParseFormatter::copyFormattedResult((NL::ParseFormatter *)this, a2);
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  return v19;
}

void sub_1A432690C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v28 - 56), 0);
  _Unwind_Resume(a1);
}

void NL::SpotlightParseFormatter::reset(NL::SpotlightParseFormatter *this)
{
  int v2 = *(_DWORD *)(*((void *)this + 1) + 40);
  if (*((_DWORD *)this + 24) != v2) {
    NL::SpotlightParseFormatter::load((uint64_t)this, v2);
  }

  NL::ParseFormatter::reset((const void **)this);
}

void nlp::CFScopedPtr<__CFString const*>::reset(const void **a1, const void *a2)
{
  CFStringRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

CFStringRef NL::SpotlightParseFormatter::copyDateRangeTerm(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFStringRef v5 = 0;
  if (a4 && a5)
  {
    uint64_t v9 = a1 + 264;
    if (a1 + 272 == std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 264, a2))return 0; {
    uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v9, a2);
    }
    CFStringRef CFStringFromString = createCFStringFromString(v10 + 56);
    if (!CFStringFromString)
    {
      return 0;
    }
    else
    {
      CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"InRange(%@,%@,%@)", CFStringFromString, a4, a5, CFStringFromString);
      CFRelease(CFStringFromString);
    }
  }
  return v5;
}

void sub_1A4326AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void *NL::SpotlightParseFormatter::copyTermForDate(uint64_t a1, uint64_t a2, void *a3, __CFCalendar **a4, unsigned int a5, __CFDictionary *a6, int a7)
{
  if (!a4) {
    return 0;
  }
  if (a7)
  {
    if (a6)
    {
      LODWORD(valuePtr[0]) = 42;
      CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
      v37[0] = v8;
      CFDictionarySetValue(a6, @"kMDUserQueryTypeKey", v8);
      if (v8) {
        CFRelease(v8);
      }
    }
    return 0;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  v37[9] = Mutable;
  if (!Mutable) {
    return 0;
  }
  CFArrayRef v15 = Mutable;
  memset(v37, 0, 64);
  memset(valuePtr, 0, sizeof(valuePtr));
  NL::DatePeriod::resolveDateComponentsAsRange((NL::DatePeriod *)a4, (NL::DateComponents *)v37, (NL::DateComponents *)valuePtr, a5);
  CFStringRef v16 = NL::DateFormatter::copyISODisplayForDateComponents((NL::DateFormatter *)(a1 + 104), a4[1], (const NL::DateComponents *)v37);
  CFTypeRef v35 = v16;
  CFStringRef v18 = NL::DateFormatter::copyISODisplayForDateComponents((NL::DateFormatter *)(a1 + 104), a4[1], (const NL::DateComponents *)valuePtr);
  CFTypeRef cf = v18;
  if (v16) {
    CFStringRef v19 = CFStringCreateWithFormat(v13, 0, @"$time.iso(%@)", v16);
  }
  else {
    CFStringRef v19 = @"0";
  }
  CFStringRef v33 = v19;
  if (v18) {
    CFStringRef v22 = CFStringCreateWithFormat(v13, 0, @"$time.iso(%@)", v18);
  }
  else {
    CFStringRef v22 = @"2147483647";
  }
  CFStringRef v32 = v22;
  if (a6)
  {
    std::string v23 = NL::DateFormatter::copyDisplayForDate((__CFDateFormatter **)(a1 + 104), (const NL::DatePeriod *)a4, a5, 0);
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    if (v23) {
      CFDictionarySetValue(a6, @"kMDUserQueryDateKey", v23);
    }
    if (v19) {
      CFDictionarySetValue(a6, @"kMDUserQueryDateStartKey", v19);
    }
    if (v22) {
      CFDictionarySetValue(a6, @"kMDUserQueryDateEndKey", v22);
    }
    if (v23) {
      CFRelease(v23);
    }
  }
  char v26 = (void *)*a3;
  std::string v24 = a3 + 1;
  CFStringRef v25 = v26;
  if (v26 != v24)
  {
    do
    {
      if (*((char *)v25 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)v25[4], v25[5]);
      }
      else {
        std::string v31 = *(std::string *)(v25 + 4);
      }
      CFStringRef value = NL::SpotlightParseFormatter::copyDateRangeTerm(a1, (const void **)&v31.__r_.__value_.__l.__data_, v17, (uint64_t)v19, (uint64_t)v22);
      if (value)
      {
        v38.length = CFArrayGetCount(v15);
        v38.location = 0;
        if (!CFArrayContainsValue(v15, v38, value)) {
          CFArrayAppendValue(v15, value);
        }
        CFRelease(value);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      int v27 = (void *)v25[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          int v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v25[2];
          BOOL v29 = *v28 == (void)v25;
          CFStringRef v25 = v28;
        }
        while (!v29);
      }
      CFStringRef v25 = v28;
    }
    while (v28 != v24);
  }
  unint64_t v20 = copyDisplayTermForTerms(v15);
  if (v22) {
    CFRelease(v22);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v35) {
    CFRelease(v35);
  }
  CFRelease(v15);
  return v20;
}

void sub_1A4326E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, const void *a18, const void *a19, const void *a20,const void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a18, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a19, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a20, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a21, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v30 - 104), 0);
  _Unwind_Resume(a1);
}

void *copyDisplayTermForTerms(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  if (!CFArrayGetCount(a1)) {
    return 0;
  }
  if (!CFArrayGetCount(a1)) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v3 = CFStringCreateByCombiningStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, @" || ");
  CFStringRef v8 = v3;
  if (!v3) {
    return 0;
  }
  CFStringRef v4 = v3;
  if (CFArrayGetCount(a1) < 2) {
    CFStringRef v5 = (void *)CFRetain(v4);
  }
  else {
    CFStringRef v5 = (void *)CFStringCreateWithFormat(v2, 0, @"(%@)", v4, v8);
  }
  uint64_t v6 = v5;
  CFRelease(v4);
  return v6;
}

void sub_1A4326FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

NL::NumericValue *NL::SpotlightParseFormatter::copyTermForValue(uint64_t a1, const void **a2, const void **a3, NL::NumericValue *a4)
{
  CFStringRef v4 = a4;
  if (a4)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v20 = Mutable;
    if (Mutable)
    {
      CFArrayRef v10 = Mutable;
      CFStringRef v19 = 0;
      memset(&v18, 0, sizeof(v18));
      if (a1 + 176 == std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 168, a2))
      {
        CFStringRef v14 = 0;
      }
      else
      {
        uint64_t v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 168, a2);
        std::map<std::string,std::string>::map[abi:ne180100](&v16, (const void ***)(v11 + 56));
        if (&v17 == (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v16, a3))
        {
          CFStringRef v14 = 0;
        }
        else
        {
          uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v16, a3);
          std::string::operator=(&v18, (const std::string *)(v12 + 56));
          std::string::basic_string[abi:ne180100]<0>(v22, "%@v1");
          NL::NumericValue::upper(v4, &__p);
          replaceAll(&v18, (char *)v22, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(v22, "%@v2");
          NL::NumericValue::lower(v4, &__p);
          replaceAll(&v18, (char *)v22, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(v22, "%@v");
          NL::NumericValue::value((int **)v4, &__p);
          replaceAll(&v18, (char *)v22, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFAllocatorRef v13 = &v18;
          }
          else {
            CFAllocatorRef v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
          }
          CFStringRef v14 = CFStringCreateWithCString(v8, (const char *)v13, 0x8000100u);
          CFStringRef v19 = v14;
          v24.length = CFArrayGetCount(v10);
          v24.location = 0;
          if (!CFArrayContainsValue(v10, v24, v14)) {
            CFArrayAppendValue(v10, v14);
          }
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, v17);
      }
      CFStringRef v4 = (NL::NumericValue *)copyDisplayTermForTerms(v10);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18.__r_.__value_.__l.__data_);
        if (!v14)
        {
LABEL_31:
          CFRelease(v10);
          return v4;
        }
      }
      else if (!v14)
      {
        goto LABEL_31;
      }
      CFRelease(v14);
      CFArrayRef v10 = v20;
      if (v20) {
        goto LABEL_31;
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_1A4327284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18, const void *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  if (a17 < 0) {
    operator delete(a12);
  }
  nlp::CFScopedPtr<__CFString const*>::reset(&a18, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(&a19, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::SpotlightParseFormatter::copyTermForCount(uint64_t a1, const void **a2, const void **a3, int **a4, __CFDictionary *a5)
{
  uint64_t v9 = a1 + 240;
  if (a1 + 248 != std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 240, a2))
  {
    uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v9, a2);
    std::map<std::string,NLSearchParseResultModifier>::map[abi:ne180100](&v22, (const void ***)(v10 + 56));
    if (&v23 == (char **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v22, a3))goto LABEL_17; {
    int valuePtr = *(_DWORD *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v22, a3)+ 56);
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    CFNumberRef v20 = v12;
    if (!v12) {
      goto LABEL_17;
    }
    int v19 = 0;
    if (a4)
    {
      CFStringRef v14 = *a4;
      CFAllocatorRef v13 = (std::__shared_weak_count *)a4[1];
      if (!v13)
      {
        if (!v14) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      if (v14)
      {
        CFStringRef v14 = *a4;
        CFArrayRef v15 = (std::__shared_weak_count *)a4[1];
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          int v19 = *v14;
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          goto LABEL_11;
        }
LABEL_10:
        int v19 = *v14;
      }
    }
LABEL_11:
    CFNumberRef v16 = CFNumberCreate(v11, kCFNumberIntType, &v19);
    CFNumberRef v17 = v16;
    if (a5 && v16)
    {
      CFDictionarySetValue(a5, v12, v16);
    }
    else if (!v16)
    {
LABEL_16:
      CFRelease(v12);
LABEL_17:
      std::__tree<std::string>::destroy((uint64_t)&v22, v23);
      return 0;
    }
    CFRelease(v17);
    goto LABEL_16;
  }
  return 0;
}

void sub_1A43274A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, const void *a12, uint64_t a13, char a14, char *a15)
{
}

void *NL::SpotlightParseFormatter::copyTermForTranslation(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, __CFDictionary *a6)
{
  uint64_t v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a6
    && a1 + 224 != std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 216, (const void **)a2))
  {
    uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 216, (const void **)a2);
    CFAllocatorRef v13 = std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v84, (const void ***)(v12 + 56));
    if (&v84.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v13, (const void **)a3))goto LABEL_13; {
    uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v84, (const void **)a3);
    }
    CFAllocatorRef v15 = *v10;
    CFNumberRef v16 = (void *)(v14 + 56);
    if (*(char *)(v14 + 79) < 0) {
      CFNumberRef v16 = (void *)*v16;
    }
    CFStringRef v17 = CFStringCreateWithFormat(v15, 0, @"%s", v16);
    CFStringRef v18 = v17;
    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (!v17) {
      goto LABEL_13;
    }
    if (CFStringHasPrefix(v17, @"kMDUserQueryKindKey"))
    {
      CFStringRef CFStringFromString = CFStringCreateWithFormat(v15, 0, @"%d", *(unsigned int *)(*(void *)(a1 + 152) + 4));
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringFromString;
      if (CFStringFromString) {
        goto LABEL_11;
      }
    }
    else
    {
      CFStringRef CFStringFromString = createCFStringFromString(a5 + 24);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringFromString;
      if (CFStringFromString)
      {
LABEL_11:
        CFDictionarySetValue(a6, v18, CFStringFromString);
        CFRelease(CFStringFromString);
      }
    }
    CFRelease(v18);
LABEL_13:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v84, (void *)v84.__r_.__value_.__l.__size_);
  }
  CFAllocatorRef alloc = *v10;
  CFArrayRef Mutable = CFArrayCreateMutable(*v10, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v83 = Mutable;
  if (!Mutable) {
    return 0;
  }
  CFArrayRef v21 = Mutable;
  CFStringRef v82 = 0;
  memset(&v84, 0, sizeof(v84));
  std::to_string(&v81, **(void **)(a1 + 144));
  if (*(char *)(a5 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(a5 + 24), *(void *)(a5 + 32));
  }
  else {
    std::string v80 = *(std::string *)(a5 + 24);
  }
  escapeContent(&v80);
  uint64_t v23 = a1 + 168;
  uint64_t v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 168, (const void **)a2);
  if (a1 + 176 == v24)
  {
    std::string v31 = (void *)*a4;
    uint64_t v30 = a4 + 1;
    BOOL v29 = v31;
    if (v31 == v30)
    {
      CFStringRef v28 = 0;
    }
    else
    {
      CFStringRef v28 = 0;
      CFStringRef v32 = 0;
      uint64_t v71 = a5 + 72;
      do
      {
        if (*((char *)v29 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)v29[4], v29[5]);
        }
        else {
          std::string v79 = *(std::string *)(v29 + 4);
        }
        if (v24 != std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v23, (const void **)&v79.__r_.__value_.__l.__data_))
        {
          uint64_t v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v23, (const void **)&v79.__r_.__value_.__l.__data_);
          std::map<std::string,std::string>::map[abi:ne180100](&v77, (const void ***)(v33 + 56));
          if (*(char *)(a2 + 23) >= 0) {
            size_t v34 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            size_t v34 = *(void *)(a2 + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v74, v34 + 1);
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFTypeRef v35 = &v74;
          }
          else {
            CFTypeRef v35 = (std::string *)v74.__r_.__value_.__r.__words[0];
          }
          if (v34)
          {
            if (*(char *)(a2 + 23) >= 0) {
              char v36 = (const void *)a2;
            }
            else {
              char v36 = *(const void **)a2;
            }
            memmove(v35, v36, v34);
          }
          *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 46;
          int v37 = *(char *)(a3 + 23);
          if (v37 >= 0) {
            CFRange v38 = (const std::string::value_type *)a3;
          }
          else {
            CFRange v38 = *(const std::string::value_type **)a3;
          }
          if (v37 >= 0) {
            std::string::size_type v39 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            std::string::size_type v39 = *(void *)(a3 + 8);
          }
          std::vector<char>::pointer v40 = std::string::append(&v74, v38, v39);
          long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          std::string::size_type v76 = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          int v42 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v77, (const void **)__p);
          if (SHIBYTE(v76) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v74.__r_.__value_.__l.__data_);
          }
          if (&v78 == v42)
          {
            CFStringRef v53 = v32;
          }
          else
          {
            if (*(char *)(a2 + 23) >= 0) {
              size_t v43 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              size_t v43 = *(void *)(a2 + 8);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v74, v43 + 1);
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v44 = &v74;
            }
            else {
              int v44 = (std::string *)v74.__r_.__value_.__r.__words[0];
            }
            if (v43)
            {
              if (*(char *)(a2 + 23) >= 0) {
                v45 = (const void *)a2;
              }
              else {
                v45 = *(const void **)a2;
              }
              memmove(v44, v45, v43);
            }
            *(_WORD *)((char *)&v44->__r_.__value_.__l.__data_ + v43) = 46;
            int v46 = *(char *)(a3 + 23);
            if (v46 >= 0) {
              v47 = (const std::string::value_type *)a3;
            }
            else {
              v47 = *(const std::string::value_type **)a3;
            }
            if (v46 >= 0) {
              std::string::size_type v48 = *(unsigned __int8 *)(a3 + 23);
            }
            else {
              std::string::size_type v48 = *(void *)(a3 + 8);
            }
            std::vector<std::pair<std::string, std::string>>::pointer v49 = std::string::append(&v74, v47, v48);
            long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
            std::string::size_type v76 = v49->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v50;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            uint64_t v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v77, (const void **)__p);
            std::string::operator=(&v84, (const std::string *)(v51 + 56));
            if (SHIBYTE(v76) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            updateTranslation(&v84, (uint64_t)&v80, v71, (uint64_t)&v81);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v52 = &v84;
            }
            else {
              unint64_t v52 = (std::string *)v84.__r_.__value_.__r.__words[0];
            }
            CFStringRef v53 = CFStringCreateWithCString(alloc, (const char *)v52, 0x8000100u);
            if (v32) {
              CFRelease(v32);
            }
            CFStringRef v82 = v53;
            if (v53)
            {
              v54 = v83;
              v86.length = CFArrayGetCount(v83);
              v86.location = 0;
              if (!CFArrayContainsValue(v54, v86, v53)) {
                CFArrayAppendValue(v54, v53);
              }
            }
            uint64_t v55 = *(unsigned __int8 *)(a5 + 71);
            if ((v55 & 0x80u) != 0) {
              uint64_t v55 = *(void *)(a5 + 56);
            }
            if (v55)
            {
              if (*(char *)(a2 + 23) >= 0) {
                size_t v56 = *(unsigned __int8 *)(a2 + 23);
              }
              else {
                size_t v56 = *(void *)(a2 + 8);
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&v74, v56 + 1);
              if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v57 = &v74;
              }
              else {
                int v57 = (std::string *)v74.__r_.__value_.__r.__words[0];
              }
              if (v56)
              {
                if (*(char *)(a2 + 23) >= 0) {
                  size_t v58 = (const void *)a2;
                }
                else {
                  size_t v58 = *(const void **)a2;
                }
                memmove(v57, v58, v56);
              }
              *(_WORD *)((char *)&v57->__r_.__value_.__l.__data_ + v56) = 46;
              int v59 = *(char *)(a3 + 23);
              if (v59 >= 0) {
                size_t v60 = (const std::string::value_type *)a3;
              }
              else {
                size_t v60 = *(const std::string::value_type **)a3;
              }
              if (v59 >= 0) {
                std::string::size_type v61 = *(unsigned __int8 *)(a3 + 23);
              }
              else {
                std::string::size_type v61 = *(void *)(a3 + 8);
              }
              BOOL v62 = std::string::append(&v74, v60, v61);
              long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
              std::string::size_type v76 = v62->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v63;
              v62->__r_.__value_.__l.__size_ = 0;
              v62->__r_.__value_.__r.__words[2] = 0;
              v62->__r_.__value_.__r.__words[0] = 0;
              uint64_t v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v77, (const void **)__p);
              std::string::operator=(&v84, (const std::string *)(v64 + 56));
              if (SHIBYTE(v76) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v74.__r_.__value_.__l.__data_);
              }
              updateTranslation(&v84, a5 + 48, v71, (uint64_t)&v81);
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v65 = &v84;
              }
              else {
                v65 = (std::string *)v84.__r_.__value_.__r.__words[0];
              }
              CFStringRef v28 = CFStringCreateWithCString(alloc, (const char *)v65, 0x8000100u);
              if (v53) {
                CFRelease(v53);
              }
              CFStringRef v82 = v28;
              if (v28)
              {
                size_t v66 = v83;
                v87.length = CFArrayGetCount(v83);
                v87.location = 0;
                if (!CFArrayContainsValue(v66, v87, v28)) {
                  CFArrayAppendValue(v66, v28);
                }
                CFStringRef v53 = v28;
              }
              else
              {
                CFStringRef v53 = 0;
              }
            }
            else
            {
              CFStringRef v28 = v53;
            }
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v77, v78);
          CFStringRef v32 = v53;
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        int v67 = (void *)v29[1];
        if (v67)
        {
          do
          {
            BOOL v68 = v67;
            int v67 = (void *)*v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            BOOL v68 = (void *)v29[2];
            BOOL v69 = *v68 == (void)v29;
            BOOL v29 = v68;
          }
          while (!v69);
        }
        BOOL v29 = v68;
      }
      while (v68 != v30);
      CFArrayRef v21 = v83;
    }
  }
  else
  {
    uint64_t v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 168, (const void **)a2);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v79, (const void ***)(v25 + 56));
    if (&v79.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v79, (const void **)a3))
    {
      CFStringRef v28 = 0;
    }
    else
    {
      uint64_t v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v79, (const void **)a3);
      std::string::operator=(&v84, (const std::string *)(v26 + 56));
      updateTranslation(&v84, (uint64_t)&v80, a5 + 72, (uint64_t)&v81);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v27 = &v84;
      }
      else {
        int v27 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      CFStringRef v28 = CFStringCreateWithCString(alloc, (const char *)v27, 0x8000100u);
      CFStringRef v82 = v28;
      if (v28)
      {
        v85.length = CFArrayGetCount(v21);
        v85.location = 0;
        if (!CFArrayContainsValue(v21, v85, v28)) {
          CFArrayAppendValue(v21, v28);
        }
      }
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v79, (void *)v79.__r_.__value_.__l.__size_);
  }
  uint64_t v22 = copyDisplayTermForTerms(v21);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v84.__r_.__value_.__l.__data_);
    if (v28)
    {
LABEL_138:
      CFRelease(v28);
      CFArrayRef v21 = v83;
      if (!v83) {
        return v22;
      }
      goto LABEL_142;
    }
  }
  else if (v28)
  {
    goto LABEL_138;
  }
  if (v21) {
LABEL_142:
  }
    CFRelease(v21);
  return v22;
}

void sub_1A4327D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&__p, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v43 - 160), 0);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v43 - 120, *(void **)(v43 - 112));
  _Unwind_Resume(a1);
}

void escapeContent(std::string *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "\"");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\\"");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v4, "'");
  std::string::basic_string[abi:ne180100]<0>(__p, "'");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v4, "$");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\$");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v4, "*");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\*");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v4, "+");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\+");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v4, "=");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\=");
  replaceAll(a1, (char *)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1A4328080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void updateTranslation(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "%@v");
  replaceAll(a1, (char *)__p, a3);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "%@c");
  replaceAll(a1, (char *)__p, a2);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "%@uid");
  replaceAll(a1, (char *)__p, a4);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1A43281A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *NL::SpotlightParseFormatter::copyTermForEntityAndNameWithType(uint64_t a1, void *a2, unsigned int a3, const void **a4, unsigned __int8 *a5, void *a6, __CFDictionary *a7, __CFDictionary *a8, unsigned __int8 a9)
{
  std::string::basic_string[abi:ne180100]<0>(v33, "Max");
  if (startswith(a5, (unsigned __int8 *)v33))
  {
    BOOL v17 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Min");
    BOOL v17 = startswith(a5, (unsigned __int8 *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v34 < 0)
  {
    operator delete(v33[0]);
    if (v17) {
      goto LABEL_7;
    }
  }
  else if (v17)
  {
LABEL_7:
    CFStringRef v18 = (int **)a2[18];
    int v19 = (std::__shared_weak_count *)a2[19];
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    NL::SpotlightParseFormatter::copyTermForCount(a1, a4, (const void **)a5, v18, a7);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "Date");
  if (endswith((uint64_t *)a5, (uint64_t *)v33))
  {
    BOOL v22 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Time");
    BOOL v22 = endswith((uint64_t *)a5, (uint64_t *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v34 < 0)
  {
    operator delete(v33[0]);
    if (v22)
    {
LABEL_19:
      uint64_t v23 = (__CFCalendar **)a2[16];
      uint64_t v24 = (std::__shared_weak_count *)a2[17];
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFNumberRef v20 = NL::SpotlightParseFormatter::copyTermForDate(a1, v21, a6, v23, a3, a8, a9);
      if (v24)
      {
        uint64_t v25 = v24;
LABEL_30:
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        return v20;
      }
      return v20;
    }
  }
  else if (v22)
  {
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "Value");
  BOOL v26 = endswith((uint64_t *)a5, (uint64_t *)v33);
  BOOL v27 = v26;
  if ((v34 & 0x80000000) == 0)
  {
    if (v26) {
      goto LABEL_26;
    }
    return NL::SpotlightParseFormatter::copyTermForTranslation(a1, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a2, a8);
  }
  operator delete(v33[0]);
  if (!v27) {
    return NL::SpotlightParseFormatter::copyTermForTranslation(a1, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a2, a8);
  }
LABEL_26:
  CFStringRef v28 = (NL::NumericValue *)a2[18];
  BOOL v29 = (std::__shared_weak_count *)a2[19];
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFNumberRef v20 = NL::SpotlightParseFormatter::copyTermForValue(a1, a4, (const void **)a5, v28);
  if (v29)
  {
    uint64_t v25 = v29;
    goto LABEL_30;
  }
  return v20;
}

void sub_1A432841C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void NL::SpotlightParseFormatter::updateTermsWithAttributeForEntityInFormat(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, char a8)
{
  if (a2)
  {
    uint64_t v9 = *a6;
    if (*a6)
    {
      CFTypeRef v50 = 0;
      CFArrayRef v51 = 0;
      uint64_t v45 = 0;
      int v46 = (const void **)&v45;
      uint64_t v47 = 0x3002000000;
      std::string::size_type v48 = __Block_byref_object_copy_;
      std::vector<std::pair<std::string, std::string>>::pointer v49 = __Block_byref_object_dispose_;
      v43[0] = 0;
      v43[1] = v43;
      v43[2] = 0x3002000000;
      v43[3] = __Block_byref_object_copy__31;
      v43[4] = __Block_byref_object_dispose__32;
      CFTypeRef v44 = 0;
      if ((a8 & 4) != 0)
      {
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        CFAllocatorRef v15 = v46;
        CFArrayRef v51 = Mutable;
        CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        nlp::CFScopedPtr<__CFDictionary *>::reset(v15 + 5, v16);
        CFIndex Count = CFArrayGetCount(a3);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFAttributedStringRef ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(a3, i);
            MutableCFStringRef Copy = CFAttributedStringCreateMutableCopy(v13, 0, ValueAtIndex);
            int v42 = MutableCopy;
            uint64_t v21 = *a6;
            v37[0] = MEMORY[0x1E4F143A8];
            v37[1] = 1174405120;
            v37[2] = ___ZN2NL23SpotlightParseFormatter41updateTermsWithAttributeForEntityInFormatEP9__CFArrayS2_P14__CFDictionaryRKNSt3__13setINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_4lessISC_EENSA_ISC_EEEENS5_10shared_ptrINS_14ParseAttributeEEERKNS_6EntityEj_block_invoke;
            v37[3] = &unk_1EF7CEAF8;
            v37[4] = v43;
            v37[6] = a1;
            v37[7] = a7;
            BOOL v22 = (std::__shared_weak_count *)a6[1];
            v37[8] = v21;
            CFRange v38 = v22;
            if (v22) {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v37[5] = &v45;
            uint64_t v39 = a5;
            uint64_t v40 = a4;
            uint64_t v41 = a2;
            NL::ParseAttribute::enumerateParseNamesWithType(v21, (uint64_t)v37);
            if (MutableCopy)
            {
              CFDictionaryRef v23 = (const __CFDictionary *)v46[5];
              if (v23)
              {
                CFIndex v24 = *(void *)(*a6 + 16);
                CFIndex v25 = *(void *)(*a6 + 24);
                if (CFDictionaryGetCount(v23))
                {
                  if (CFDictionaryGetCount(v23))
                  {
                    v52.location = v24;
                    v52.length = v25;
                    CFAttributedStringSetAttributes(MutableCopy, v52, v23, 0);
                  }
                }
              }
            }
            BOOL v26 = v51;
            v53.length = CFArrayGetCount(v51);
            v53.location = 0;
            if (!CFArrayContainsValue(v26, v53, MutableCopy)) {
              CFArrayAppendValue(v26, MutableCopy);
            }
            if (v38) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v38);
            }
            if (MutableCopy) {
              CFRelease(MutableCopy);
            }
          }
        }
        CFArrayRemoveAllValues(a3);
        CFArrayRef v12 = v51;
        v54.length = CFArrayGetCount(v51);
        v54.location = 0;
        CFArrayAppendArray(a3, v12, v54);
      }
      else
      {
        v32[0] = MEMORY[0x1E4F143A8];
        v32[1] = 1174405120;
        v32[2] = ___ZN2NL23SpotlightParseFormatter41updateTermsWithAttributeForEntityInFormatEP9__CFArrayS2_P14__CFDictionaryRKNSt3__13setINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_4lessISC_EENSA_ISC_EEEENS5_10shared_ptrINS_14ParseAttributeEEERKNS_6EntityEj_block_invoke_34;
        v32[3] = &unk_1EF7CEB60;
        v32[4] = v43;
        v32[5] = a1;
        v32[6] = a7;
        v32[7] = v9;
        CFAllocatorRef v11 = (std::__shared_weak_count *)a6[1];
        uint64_t v33 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v34 = a5;
        uint64_t v35 = a4;
        uint64_t v36 = a2;
        NL::ParseAttribute::enumerateParseNamesWithType(v9, (uint64_t)v32);
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        CFArrayRef v12 = 0;
      }
      _Block_object_dispose(v43, 8);
      if (v44) {
        CFRelease(v44);
      }
      _Block_object_dispose(&v45, 8);
      if (v50) {
        CFRelease(v50);
      }
      if (v12) {
        CFRelease(v12);
      }
    }
  }
}

void sub_1A432882C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Block_object_dispose((const void *)(v23 - 208), 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v23 - 168), 0);
  _Block_object_dispose((const void *)(v23 - 160), 8);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v23 - 120), 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v23 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
}

void nlp::CFScopedPtr<__CFArray *>::reset(const void **a1, const void *a2)
{
  CFStringRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFDictionary *>::reset(const void **a1, const void *a2)
{
  CFStringRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t NL::ParseAttribute::enumerateParseNamesWithType(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 64);
  if (*(void *)(result + 72) != v2)
  {
    CFStringRef v4 = (void *)result;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(a2, v2 + v5, v4[11] + v5);
      ++v6;
      uint64_t v2 = v4[8];
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v4[9] - v2) >> 3) > v6);
  }
  return result;
}

void ___ZN2NL23SpotlightParseFormatter41updateTermsWithAttributeForEntityInFormatEP9__CFArrayS2_P14__CFDictionaryRKNSt3__13setINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_4lessISC_EENSA_ISC_EEEENS5_10shared_ptrINS_14ParseAttributeEEERKNS_6EntityEj_block_invoke(uint64_t a1, const void **a2, unsigned __int8 *a3)
{
  CFStringRef v4 = (const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v5 = NL::SpotlightParseFormatter::copyTermForEntityAndNameWithType(*(void *)(a1 + 48), *(void **)(a1 + 56), *(_DWORD *)(*(void *)(a1 + 64) + 40), a2, a3, *(void **)(a1 + 80), *(__CFDictionary **)(a1 + 88), *(__CFDictionary **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(unsigned char *)(*(void *)(a1 + 64) + 39));
  nlp::CFScopedPtr<__CFString const*>::reset(v4, v5);
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    CFArrayRef v6 = *(const __CFArray **)(a1 + 96);
    v10.length = CFArrayGetCount(v6);
    v10.location = 0;
    if (!CFArrayContainsValue(v6, v10, *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40)))
    {
      uint64_t v7 = *(__CFArray **)(a1 + 96);
      CFAllocatorRef v8 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      CFArrayAppendValue(v7, v8);
    }
  }
}

uint64_t __copy_helper_block_e8_64c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_64c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN2NL23SpotlightParseFormatter41updateTermsWithAttributeForEntityInFormatEP9__CFArrayS2_P14__CFDictionaryRKNSt3__13setINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_4lessISC_EENSA_ISC_EEEENS5_10shared_ptrINS_14ParseAttributeEEERKNS_6EntityEj_block_invoke_34(uint64_t a1, const void **a2, unsigned __int8 *a3)
{
  CFStringRef v4 = (const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v5 = NL::SpotlightParseFormatter::copyTermForEntityAndNameWithType(*(void *)(a1 + 40), *(void **)(a1 + 48), *(_DWORD *)(*(void *)(a1 + 56) + 40), a2, a3, *(void **)(a1 + 72), *(__CFDictionary **)(a1 + 80), 0, *(unsigned char *)(*(void *)(a1 + 56) + 39));
  nlp::CFScopedPtr<__CFString const*>::reset(v4, v5);
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    CFArrayRef v6 = *(const __CFArray **)(a1 + 88);
    v10.length = CFArrayGetCount(v6);
    v10.location = 0;
    if (!CFArrayContainsValue(v6, v10, *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40)))
    {
      uint64_t v7 = *(__CFArray **)(a1 + 88);
      CFAllocatorRef v8 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      CFArrayAppendValue(v7, v8);
    }
  }
}

uint64_t __copy_helper_block_e8_56c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_56c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL NL::SpotlightParseFormatter::updateParseResultForIntentAtIndex(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  CFAllocatorRef v8 = *(std::__shared_weak_count **)(a1 + 160);
  *(void *)(a1 + 152) = v7;
  *(void *)(a1 + 160) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  CFStringRef v96 = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v95 = Mutable;
  uint64_t v89 = 0;
  uint64_t v90 = &v89;
  uint64_t v91 = 0x3002000000;
  uint64_t v92 = __Block_byref_object_copy__36;
  unint64_t v93 = __Block_byref_object_dispose__37;
  CFArrayRef theArray = 0;
  CFMutableArrayRef v66 = 0;
  CFTypeRef v94 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
  uint64_t v83 = 0;
  std::string v84 = (const void **)&v83;
  uint64_t v85 = 0x3002000000;
  CFRange v86 = __Block_byref_object_copy__36;
  CFRange v87 = __Block_byref_object_dispose__37;
  CFTypeRef v88 = 0;
  uint64_t v77 = 0;
  BOOL v78 = (const void **)&v77;
  uint64_t v79 = 0x3002000000;
  std::string v80 = __Block_byref_object_copy__36;
  std::string v81 = __Block_byref_object_dispose__37;
  CFTypeRef v82 = 0;
  CFTypeRef v75 = 0;
  CFTypeRef v76 = 0;
  uint64_t v67 = a1;
  if ((a4 & 2) != 0)
  {
    CFMutableArrayRef v66 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    CFTypeRef v76 = v66;
    CFArrayRef theArray = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    CFTypeRef v75 = theArray;
  }
  if ((a4 & 4) != 0)
  {
    CFAllocatorRef v11 = v78;
    CFMutableArrayRef v12 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    nlp::CFScopedPtr<__CFArray *>::reset(v11 + 5, v12);
    CFAllocatorRef v13 = v84;
    CFMutableArrayRef v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    nlp::CFScopedPtr<__CFArray *>::reset(v13 + 5, v14);
    CFAttributedStringRef v15 = CFAttributedStringCreateMutable(v9, 0);
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    v105.length = CFAttributedStringGetLength(v15);
    v105.location = 0;
    CFAttributedStringReplaceString(v15, v105, *(CFStringRef *)(v67 + 40));
    CFArrayAppendValue((CFMutableArrayRef)v84[5], v15);
    if (v15) {
      CFRelease(v15);
    }
  }
  uint64_t v16 = *(void *)(*a2 + 48) - *(void *)(*a2 + 40);
  if (v16 < 1)
  {
    uint64_t v62 = 0;
  }
  else
  {
    CFAllocatorRef v61 = v9;
    uint64_t v17 = 0;
    uint64_t v18 = (unint64_t)v16 >> 4;
    if (v18 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v62 = v18;
    do
    {
      int v19 = (uint64_t *)(*(void *)(*a2 + 40) + 16 * v17);
      uint64_t v20 = *v19;
      uint64_t v21 = (std::__shared_weak_count *)v19[1];
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v64 = v21;
      uint64_t v23 = *(void ***)v20;
      BOOL v22 = *(void ***)(v20 + 8);
      while (v23 != v22)
      {
        if ((a4 & 4) != 0)
        {
          CFIndex v24 = (__CFArray *)v78[5];
          CFArrayRef v25 = (const __CFArray *)v84[5];
          v108.length = CFArrayGetCount(v25);
          v108.location = 0;
          CFArrayAppendArray(v24, v25, v108);
          CFArrayRemoveAllValues((CFMutableArrayRef)v84[5]);
        }
        BOOL v26 = *v23;
        v70[0] = MEMORY[0x1E4F143A8];
        v70[1] = 1174405120;
        v70[2] = ___ZN2NL23SpotlightParseFormatter33updateParseResultForIntentAtIndexENSt3__110shared_ptrINS_11ParseIntentEEElj_block_invoke;
        v70[3] = &unk_1EF7CEB98;
        v70[4] = &v89;
        v70[5] = &v77;
        uint64_t v28 = *a2;
        BOOL v27 = (std::__shared_weak_count *)a2[1];
        v70[7] = v67;
        v70[8] = v28;
        uint64_t v71 = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v73 = a4;
        char v74 = (a4 & 4) >> 2;
        uint64_t v72 = v23;
        v70[6] = &v83;
        NL::ParseAttribute::enumerateEntities(v26, (uint64_t)v70);
        if ((a4 & 4) != 0 && CFArrayGetCount((CFArrayRef)v78[5])) {
          CFArrayRemoveAllValues((CFMutableArrayRef)v78[5]);
        }
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        v23 += 2;
      }
      if ((a4 & 2) != 0)
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)v90[5]);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v90[5], i);
            if (ValueAtIndex) {
              updateRankingTermsWithTerm(*(__CFDictionary **)(v67 + 72), v66, (__CFArray *)v75, ValueAtIndex, a3, v17);
            }
          }
          CFArrayRef theArray = (CFArrayRef)v75;
        }
        if (CFArrayGetCount(theArray))
        {
          CFArrayRemoveAllValues(v66);
          CFMutableArrayRef v66 = (CFMutableArrayRef)v76;
          CFArrayRef theArray = (CFArrayRef)v75;
          v109.length = CFArrayGetCount((CFArrayRef)v75);
          v109.location = 0;
          CFArrayAppendArray(v66, theArray, v109);
          CFArrayRemoveAllValues(theArray);
        }
      }
      if (CFArrayGetCount((CFArrayRef)v90[5]))
      {
        CFStringRef v32 = (const __CFString *)copyDisplayTermForTerms((const __CFArray *)v90[5]);
        if (v96) {
          CFRelease(v96);
        }
        CFStringRef v96 = v32;
        if (v32)
        {
          uint64_t v33 = v95;
          v106.length = CFArrayGetCount(v95);
          v106.location = 0;
          if (!CFArrayContainsValue(v33, v106, v32)) {
            CFArrayAppendValue(v33, v32);
          }
        }
        CFArrayRemoveAllValues((CFMutableArrayRef)v90[5]);
      }
      if (v64) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v64);
      }
      ++v17;
    }
    while (v17 != v62);
    CFMutableArrayRef Mutable = v95;
    CFAllocatorRef v9 = v61;
  }
  CFIndex v34 = CFArrayGetCount(Mutable);
  if (v34)
  {
    CFStringRef v35 = CFStringCreateByCombiningStrings(v9, Mutable, @" && ");
    CFStringRef cf = v35;
    if (v35)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(v67 + 56), v35);
      if ((a4 & 2) != 0)
      {
        updateRankingTermsWithTerm(*(__CFDictionary **)(v67 + 72), v66, (__CFArray *)v75, 0, a3, v62);
        updateRankingTermsWithQuery(*(__CFDictionary **)(v67 + 72), cf, a3 + v62 + 101);
      }
      unsigned int v36 = *(_DWORD *)(*(void *)(v67 + 8) + 40);
      if (!CFPreferencesGetAppBooleanValue(@"NLSearchDisableDefault", (CFStringRef)*MEMORY[0x1E4F1D3B8], 0)
        && (v36 > 8 || ((1 << v36) & 0x188) == 0))
      {
        CFStringRef v46 = *(const __CFString **)(v67 + 40);
        if (!v46) {
          goto LABEL_116;
        }
        int v47 = *(unsigned __int8 *)(*(void *)(v67 + 8) + 64);
        CFIndex Length = CFStringGetLength(*(CFStringRef *)(v67 + 40));
        BOOL v49 = v47 != 0;
        uint64_t v50 = 200;
        if (!v49 || Length <= 200) {
          uint64_t v50 = Length;
        }
        if (v50 < 801) {
          BOOL v49 = 1;
        }
        v51.length = v49 ? v50 : 800;
        v51.location = 0;
        CFStringRef v52 = CFStringCreateWithSubstring(v9, v46, v51);
        CFStringRef v53 = v52;
        int v101 = (void *)v52;
        if (v52)
        {
          getUTF8StringFromCFString(v52, &v100);
          escapeContent(&v100);
          std::string::basic_string[abi:ne180100]<0>(&v99, "(kMDItemSubject=\"%@*\"cwd || kMDItemTitle=\"%@*\"cwd || kMDItemTopic=\"%@*\"cwd || kMDItemTextContent=\"%@*\"cd)");
          std::string::basic_string[abi:ne180100]<0>(v97, "%@");
          replaceAll(&v99, (char *)v97, (uint64_t)&v100);
          if (v98 < 0) {
            operator delete(v97[0]);
          }
          CFStringRef CFStringFromString = createCFStringFromString((uint64_t)&v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v99.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          CFRelease(v53);
        }
        else
        {
LABEL_116:
          CFStringRef CFStringFromString = 0;
        }
        if (v96) {
          CFRelease(v96);
        }
        CFStringRef v96 = CFStringFromString;
        if (CFStringFromString)
        {
          size_t v60 = *(__CFArray **)(v67 + 56);
          if (v60) {
            CFArrayAppendValue(v60, CFStringFromString);
          }
          if ((a4 & 2) != 0) {
            updateRankingTermsWithQuery(*(__CFDictionary **)(v67 + 72), v96, a3 + v62 + 1);
          }
        }
      }
    }
    if ((a4 & 8) == 0) {
      goto LABEL_93;
    }
    int v37 = *(__CFDictionary **)(v67 + 80);
    uint64_t v38 = *(void *)(v67 + 152);
    uint64_t v39 = *(std::__shared_weak_count **)(v67 + 160);
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a3 || !v37)
    {
LABEL_91:
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
LABEL_93:
      if ((a4 & 4) != 0)
      {
        CFIndex v55 = CFArrayGetCount((CFArrayRef)v84[5]);
        if (v55 >= 1)
        {
          for (CFIndex j = 0; j != v55; ++j)
          {
            int v57 = CFArrayGetValueAtIndex((CFArrayRef)v84[5], j);
            CFArrayRef v58 = *(const __CFArray **)(v67 + 64);
            v107.length = CFArrayGetCount(v58);
            v107.location = 0;
            if (!CFArrayContainsValue(v58, v107, v57)) {
              CFArrayAppendValue(*(CFMutableArrayRef *)(v67 + 64), v57);
            }
          }
        }
      }
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_101;
    }
    int v40 = *(_DWORD *)(v38 + 4);
    int valuePtr = 1;
    v104[0] = v40;
    CFNumberRef v41 = CFNumberCreate(v9, kCFNumberSInt32Type, &valuePtr);
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    CFNumberRef v42 = CFNumberCreate(v9, kCFNumberSInt32Type, v104);
    v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
    if (v42 && v41) {
      CFDictionarySetValue(v37, v42, v41);
    }
    if (*(_DWORD *)(v38 + 8))
    {
      v104[0] = *(_DWORD *)(v38 + 8);
      int v102 = 2;
      CFNumberRef v43 = CFNumberCreate(v9, kCFNumberSInt32Type, v104);
      v97[0] = v43;
      CFNumberRef v44 = CFNumberCreate(v9, kCFNumberSInt32Type, &v102);
      CFNumberRef v45 = v44;
      int v101 = v44;
      if (v43)
      {
        if (!v44)
        {
LABEL_86:
          CFRelease(v43);
          goto LABEL_87;
        }
        CFDictionaryAddValue(v37, v43, v44);
      }
      else if (!v44)
      {
        goto LABEL_87;
      }
      CFRelease(v45);
      if (v43) {
        goto LABEL_86;
      }
    }
LABEL_87:
    if (v42) {
      CFRelease(v42);
    }
    if (v41) {
      CFRelease(v41);
    }
    goto LABEL_91;
  }
LABEL_101:
  if (v75) {
    CFRelease(v75);
  }
  if (v76) {
    CFRelease(v76);
  }
  _Block_object_dispose(&v77, 8);
  if (v82) {
    CFRelease(v82);
  }
  _Block_object_dispose(&v83, 8);
  if (v88) {
    CFRelease(v88);
  }
  _Block_object_dispose(&v89, 8);
  if (v94) {
    CFRelease(v94);
  }
  if (v95) {
    CFRelease(v95);
  }
  if (v96) {
    CFRelease(v96);
  }
  return v34 != 0;
}

void sub_1A4329554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,const void *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,const void *a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,const void *a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,const void *a49)
{
  if (*(char *)(v49 - 153) < 0) {
    operator delete(*(void **)(v49 - 176));
  }
  if (*(char *)(v49 - 129) < 0) {
    operator delete(*(void **)(v49 - 152));
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v49 - 128), 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a17, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(&a30, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(&a31, 0);
  _Block_object_dispose(&a32, 8);
  nlp::CFScopedPtr<__CFArray *>::reset(&a37, 0);
  _Block_object_dispose(&a38, 8);
  nlp::CFScopedPtr<__CFArray *>::reset(&a43, 0);
  _Block_object_dispose(&a44, 8);
  nlp::CFScopedPtr<__CFArray *>::reset(&a49, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v49 - 216), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v49 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
}

uint64_t NL::ParseAttribute::enumerateEntities(void *a1, uint64_t a2)
{
  CFStringRef v4 = (uint64_t *)a1[14];
  char v3 = (uint64_t *)a1[15];
  if (v3 == v4)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, a1[6]);
    uint64_t v8 = a1[6];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    CFAllocatorRef v13 = ___ZNK2NL14ParseAttribute17enumerateEntitiesEU13block_pointerFvRKNS_6EntityEE_block_invoke;
    CFMutableArrayRef v14 = &unk_1E5B365C8;
    uint64_t v15 = a2;
    CFAllocatorRef v9 = *(uint64_t **)(v8 + 160);
    CFRange v10 = *(uint64_t **)(v8 + 168);
    while (v9 != v10)
    {
      uint64_t v11 = *v9;
      v9 += 2;
      uint64_t result = ((uint64_t (*)(void *, uint64_t))v13)(v12, v11);
    }
  }
  else
  {
    do
    {
      uint64_t v5 = *v4;
      v4 += 2;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v5);
    }
    while (v4 != v3);
  }
  return result;
}

void ___ZN2NL23SpotlightParseFormatter33updateParseResultForIntentAtIndexENSt3__110shared_ptrINS_11ParseIntentEEElj_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  CFArrayRef v5 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(v6 + 88);
  std::set<std::string>::set[abi:ne180100](v14, (const void ***)(*(void *)(a1 + 64) + 16));
  uint64_t v8 = *(uint64_t **)(a1 + 80);
  CFAllocatorRef v9 = (std::__shared_weak_count *)v8[1];
  v13[0] = *v8;
  v13[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NL::SpotlightParseFormatter::updateTermsWithAttributeForEntityInFormat(v6, v4, v5, v7, (uint64_t)v14, v13, a2, *(_DWORD *)(a1 + 88));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__tree<std::string>::destroy((uint64_t)v14, (char *)v14[1]);
  if (*(unsigned char *)(a1 + 92))
  {
    if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(__CFArray **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      CFArrayRef v12 = *(const __CFArray **)(*(void *)(v10 + 8) + 40);
      v15.length = CFArrayGetCount(v12);
      v15.location = 0;
      CFArrayAppendArray(v11, v12, v15);
    }
  }
}

void sub_1A4329988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__tree<std::string>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_64c44_ZTSNSt3__110shared_ptrIN2NL11ParseIntentEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_64c44_ZTSNSt3__110shared_ptrIN2NL11ParseIntentEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void updateRankingTermsWithTerm(__CFDictionary *a1, CFArrayRef theArray, __CFArray *a3, const __CFString *a4, uint64_t a5, uint64_t a6)
{
  if (a1 && theArray)
  {
    if (a6 >= 2)
    {
      if (CFArrayGetCount(theArray))
      {
        uint64_t valuePtr = a6 + a5 + 100;
        CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, &valuePtr);
        if (v12)
        {
          CFNumberRef v13 = v12;
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            for (CFIndex i = 0; i != Count; ++i)
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
              if (!CFDictionaryContainsKey(a1, ValueAtIndex)) {
                CFDictionarySetValue(a1, ValueAtIndex, v13);
              }
            }
          }
          CFRelease(v13);
        }
      }
    }
    if (a4)
    {
      uint64_t valuePtr = a6 + a5;
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberRef v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, &valuePtr);
      if (!CFDictionaryContainsKey(a1, a4)) {
        CFDictionarySetValue(a1, a4, v18);
      }
      CFIndex v19 = CFArrayGetCount(theArray);
      CFIndex v20 = v19;
      if (v19)
      {
        if (v19 >= 1)
        {
          CFIndex v21 = 0;
          do
          {
            BOOL v22 = CFArrayGetValueAtIndex(theArray, v21);
            CFStringRef v23 = CFStringCreateWithFormat(v17, 0, @"%@ && %@", v22, a4);
            if (v23)
            {
              CFArrayAppendValue(a3, v23);
              CFRelease(v23);
            }
            ++v21;
          }
          while (v20 != v21);
        }
      }
      else
      {
        CFArrayAppendValue(theArray, a4);
      }
      if (v18) {
        CFRelease(v18);
      }
    }
  }
}

void sub_1A4329BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void updateRankingTermsWithQuery(__CFDictionary *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  if (a1 && !CFDictionaryContainsKey(a1, a2))
  {
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CFDictionarySetValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

void sub_1A4329C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

__CFDictionary *NL::SpotlightParseFormatter::copyParseResult(uint64_t a1, int **a2, uint64_t a3)
{
  NL::SpotlightParseFormatter::reset((NL::SpotlightParseFormatter *)a1);
  CFStringRef v6 = *(const __CFString **)(*(void *)(a1 + 24) + 104);
  if (!v6) {
    goto LABEL_23;
  }
  int v7 = **a2;
  if (v7 <= 0) {
    goto LABEL_23;
  }
  *(_DWORD *)(a1 + 48) = v7;
  CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a1 + 40), Copy);
  if (!CFStringGetLength(*(CFStringRef *)(a1 + 40))) {
    goto LABEL_23;
  }
  uint64_t v9 = *((void *)*a2 + 2) - *((void *)*a2 + 1);
  if (v9 < 1) {
    goto LABEL_23;
  }
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v12 = (unint64_t)v9 >> 4;
  uint64_t v13 = v12 <= 1 ? 1 : v12;
  do
  {
    uint64_t v14 = *((void *)*a2 + 1);
    long long v15 = *(_OWORD *)(v14 + 16 * v10);
    uint64_t v16 = *(std::__shared_weak_count **)(v14 + 16 * v10 + 8);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v20 = v15;
    if ((int)NL::ParseIntent::confidence((NL::ParseIntent *)v15) >= 1)
    {
      long long v21 = v20;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL updated = NL::SpotlightParseFormatter::updateParseResultForIntentAtIndex(a1, &v21, v10, a3);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      v11 |= updated;
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    ++v10;
  }
  while (v13 != v10);
  if (v11)
  {
    return NL::ParseFormatter::copyFormattedResult((NL::ParseFormatter *)a1, a3);
  }
  else
  {
LABEL_23:
    CFIndex v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24);
    return (__CFDictionary *)v19(a1, a3);
  }
}

void sub_1A4329E64(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void NL::SpotlightParseFormatter::loadUserQueries(NL::SpotlightParseFormatter *this)
{
  v57[2] = *MEMORY[0x1E4F143B8];
  if (*(void *)(*((void *)this + 1) + 16)) {
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(*((NLAbstractOrthographyConvertor **)this + 18));
  }
  CFSetRef v2 = (const __CFSet *)NL::SpotlightUserContext::copyUserNames(*((NL::SpotlightUserContext **)this + 18));
  CFSetRef v55 = v2;
  if (v2)
  {
    CFSetRef v3 = v2;
    if (CFSetGetCount(v2))
    {
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      CFRange v54 = Mutable;
      if (Mutable)
      {
        CFIndex Count = CFSetGetCount(v3);
        CFStringRef v46 = &v44;
        MEMORY[0x1F4188790]();
        uint64_t v8 = (const void **)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
        if (v7 >= 0x200) {
          size_t v9 = 512;
        }
        else {
          size_t v9 = v7;
        }
        bzero((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
        CFSetGetValues(v3, v8);
        if (Count >= 1)
        {
          uint64_t v10 = v8;
          CFIndex v11 = Count;
          do
          {
            CFStringRef v12 = CFStringCreateWithFormat(v4, 0, @"kMDItemAuthors=\"%@\"cwd", *v10);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
            CFArrayAppendValue(Mutable, v12);
            if (v12) {
              CFRelease(v12);
            }
            ++v10;
            --v11;
          }
          while (v11);
        }
        CFStringRef v13 = CFStringCreateByCombiningStrings(v4, Mutable, @" || ");
        CFStringRef v14 = v13;
        CFStringRef v53 = v13;
        if (v13)
        {
          getUTF8StringFromCFString(v13, &__str);
          std::operator+<char>();
          long long v15 = std::string::append(&v51, ")");
          std::string::size_type v45 = v15->__r_.__value_.__r.__words[0];
          v57[0] = v15->__r_.__value_.__l.__size_;
          *(void *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
          char v16 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(v49, "MSGMESSAGESENT");
          v47[0] = v49;
          CFAllocatorRef v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)v49, (uint64_t)&std::piecewise_construct, v47);
          std::string::basic_string[abi:ne180100]<0>(v47, "SENDER.HasUserSent");
          size_t v56 = v47;
          CFNumberRef v18 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17 + 7, (const void **)v47, (uint64_t)&std::piecewise_construct, &v56);
          CFIndex v19 = v18;
          if (*((char *)v18 + 79) < 0) {
            operator delete(v18[7]);
          }
          long long v20 = (void *)v57[0];
          v19[7] = (void *)v45;
          v19[8] = v20;
          *(void **)((char *)v19 + 71) = *(void **)((char *)v57 + 7);
          *((unsigned char *)v19 + 79) = v16;
          if (v48 < 0) {
            operator delete(v47[0]);
          }
          if (v50 < 0) {
            operator delete(v49[0]);
          }
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v51.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        CFArrayRemoveAllValues(Mutable);
        if (Count >= 1)
        {
          CFIndex v21 = Count;
          do
          {
            CFStringRef v22 = CFStringCreateWithFormat(v4, 0, @"kMDItemUserSharedReceivedRecipient=\"%@\"cwd", *v8);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
            CFArrayAppendValue(Mutable, v22);
            if (v22) {
              CFRelease(v22);
            }
            ++v8;
            --v21;
          }
          while (v21);
        }
        CFStringRef v23 = CFStringCreateByCombiningStrings(v4, Mutable, @" || ");
        if (v14) {
          CFRelease(v14);
        }
        CFStringRef v53 = v23;
        if (v23)
        {
          getUTF8StringFromCFString(v23, &__str);
          if (Count < 2)
          {
            std::string::basic_string[abi:ne180100]<0>(&v51, "MAILRECEIVED");
            uint64_t v39 = (uint64_t **)((char *)this + 168);
            v49[0] = &v51;
            int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39, (const void **)&v51.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v49);
            std::string::basic_string[abi:ne180100]<0>(v49, "RECIPIENT.HasUserReceived");
            v47[0] = v49;
            CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)v49, (uint64_t)&std::piecewise_construct, v47);
            std::string::operator=((std::string *)((char *)v41 + 56), &__str);
            if (v50 < 0) {
              operator delete(v49[0]);
            }
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v51.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v51, "MESSAGERECEIVED");
            v49[0] = &v51;
            CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39, (const void **)&v51.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v49);
            std::string::basic_string[abi:ne180100]<0>(v49, "RECIPIENT.HasUserReceived");
            v47[0] = v49;
            CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)v49, (uint64_t)&std::piecewise_construct, v47);
            std::string::operator=((std::string *)((char *)v43 + 56), &__str);
          }
          else
          {
            std::operator+<char>();
            CFIndex v24 = std::string::append(&v51, ")");
            std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
            v57[0] = v24->__r_.__value_.__l.__size_;
            *(void *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
            char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(v49, "MAILRECEIVED");
            BOOL v27 = (uint64_t **)((char *)this + 168);
            v47[0] = v49;
            uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27, (const void **)v49, (uint64_t)&std::piecewise_construct, v47);
            std::string::basic_string[abi:ne180100]<0>(v47, "RECIPIENT.HasUserReceived");
            size_t v56 = v47;
            BOOL v29 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)v47, (uint64_t)&std::piecewise_construct, &v56);
            uint64_t v30 = v29;
            if (*((char *)v29 + 79) < 0) {
              operator delete(v29[7]);
            }
            std::string v31 = (void *)v57[0];
            v30[7] = (void *)v25;
            v30[8] = v31;
            *(void **)((char *)v30 + 71) = *(void **)((char *)v57 + 7);
            *((unsigned char *)v30 + 79) = v26;
            if (v48 < 0) {
              operator delete(v47[0]);
            }
            if (v50 < 0) {
              operator delete(v49[0]);
            }
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v51.__r_.__value_.__l.__data_);
            }
            std::operator+<char>();
            CFStringRef v32 = std::string::append(&v51, ")");
            std::string::size_type v33 = v32->__r_.__value_.__r.__words[0];
            v57[0] = v32->__r_.__value_.__l.__size_;
            *(void *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
            char v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
            v32->__r_.__value_.__l.__size_ = 0;
            v32->__r_.__value_.__r.__words[2] = 0;
            v32->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(v49, "MESSAGERECEIVED");
            v47[0] = v49;
            CFStringRef v35 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27, (const void **)v49, (uint64_t)&std::piecewise_construct, v47);
            std::string::basic_string[abi:ne180100]<0>(v47, "RECIPIENT.HasUserReceived");
            size_t v56 = v47;
            unsigned int v36 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35 + 7, (const void **)v47, (uint64_t)&std::piecewise_construct, &v56);
            int v37 = v36;
            if (*((char *)v36 + 79) < 0) {
              operator delete(v36[7]);
            }
            uint64_t v38 = (void *)v57[0];
            v37[7] = (void *)v33;
            v37[8] = v38;
            *(void **)((char *)v37 + 71) = *(void **)((char *)v57 + 7);
            *((unsigned char *)v37 + 79) = v34;
            if (v48 < 0) {
              operator delete(v47[0]);
            }
          }
          if (v50 < 0) {
            operator delete(v49[0]);
          }
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v51.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          CFRelease(v23);
        }
        CFRelease(Mutable);
      }
    }
    CFRelease(v3);
  }
}

void sub_1A432A584(_Unwind_Exception *a1)
{
  if (*(char *)(v3 - 225) < 0) {
    operator delete(*(void **)(v3 - 248));
  }
  if (*(char *)(v3 - 201) < 0) {
    operator delete(*(void **)(v3 - 224));
  }
  if (v2 < 0) {
    operator delete(v1);
  }
  if (*(char *)(v3 - 177) < 0) {
    operator delete(*(void **)(v3 - 200));
  }
  if (*(char *)(v3 - 153) < 0) {
    operator delete(*(void **)(v3 - 176));
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v3 - 152), 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v3 - 144), 0);
  nlp::CFScopedPtr<__CFSet const*>::reset((const void **)(v3 - 136), 0);
  _Unwind_Resume(a1);
}

void NL::SpotlightParseFormatter::loadMailTranslations(NL::SpotlightParseFormatter *this)
{
  int v2 = (uint64_t **)((char *)this + 168);
  updateNLPResultModifierTranslations((uint64_t **)this + 21, (uint64_t **)this + 30);
  updateNLPUserActionTranslations(v2);
  updateMailFileTypeTranslations(v2);
  updateMailAttachmentTranslations(v2);
  updateMailTransportTranslations(v2);
  updateNLPValueTranslations(v2);
  if (NL::ParserContext::languageIsCJ(*((NL::ParserContext **)this + 1))) {
    updateSpotlightSenderReceiverTranslations_Tokenize(v2);
  }
  else {
    updateSpotlightSenderReceiverTranslations(v2);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "CONTAINER");
  __p[0] = v73;
  uint64_t v3 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ChatClient");
  CFTypeRef v75 = __p;
  CFAllocatorRef v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v4 + 56, "kMDItemContentType=\"com.apple.ichat.transcript\"");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "CONTAINER");
  __p[0] = v73;
  CFNumberRef v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailClient");
  CFTypeRef v75 = __p;
  CFStringRef v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v6 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "CONTAINER");
  __p[0] = v73;
  unint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageClient");
  CFTypeRef v75 = __p;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v8 + 56, "(_kMDItemGroupId=1 || kMDItemContentType=\"com.apple.ichat.transcript\")");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FACEBOOKED");
  __p[0] = v73;
  size_t v9 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FacebookImageKind");
  CFTypeRef v75 = __p;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v10 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd && _kMDItemGroupId=13");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "ABOUT");
  __p[0] = v73;
  CFIndex v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  CFTypeRef v75 = __p;
  CFStringRef v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v12 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "ABOUT");
  __p[0] = v73;
  CFStringRef v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  CFTypeRef v75 = __p;
  CFStringRef v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v14 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "TOPICMOD");
  __p[0] = v73;
  long long v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  CFTypeRef v75 = __p;
  char v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v16 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "TITLED");
  __p[0] = v73;
  CFAllocatorRef v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  CFTypeRef v75 = __p;
  CFNumberRef v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v18 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "TITLED");
  __p[0] = v73;
  CFIndex v19 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  CFTypeRef v75 = __p;
  long long v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v20 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "TITLED");
  __p[0] = v73;
  CFIndex v21 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  CFTypeRef v75 = __p;
  CFStringRef v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v22 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  CFStringRef v23 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  CFTypeRef v75 = __p;
  CFIndex v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v24 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  std::string::size_type v25 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "OpenText");
  CFTypeRef v75 = __p;
  char v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v26 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  BOOL v27 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  CFTypeRef v75 = __p;
  uint64_t v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v28 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  BOOL v29 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NameText");
  CFTypeRef v75 = __p;
  uint64_t v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v30 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  std::string v31 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DateText");
  CFTypeRef v75 = __p;
  CFStringRef v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v32 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "ENTITLED");
  __p[0] = v73;
  std::string::size_type v33 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  CFTypeRef v75 = __p;
  char v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v34 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FILETITLED");
  __p[0] = v73;
  CFStringRef v35 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  CFTypeRef v75 = __p;
  unsigned int v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v36 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FILETITLED");
  __p[0] = v73;
  int v37 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "OpenText");
  CFTypeRef v75 = __p;
  uint64_t v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v37 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v38 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FILETITLED");
  __p[0] = v73;
  uint64_t v39 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  CFTypeRef v75 = __p;
  int v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v40 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FILETITLED");
  __p[0] = v73;
  CFNumberRef v41 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  CFTypeRef v75 = __p;
  CFNumberRef v42 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v41 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v42 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FILENAMED");
  __p[0] = v73;
  CFNumberRef v43 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  CFTypeRef v75 = __p;
  uint64_t v44 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v43 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v44 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "READMOD");
  __p[0] = v73;
  std::string::size_type v45 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Read");
  CFTypeRef v75 = __p;
  CFStringRef v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v45 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v46 + 56, "com_apple_mail_read=%@v");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "REPLYMOD");
  __p[0] = v73;
  int v47 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Reply");
  CFTypeRef v75 = __p;
  char v48 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v47 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v48 + 56, "com_apple_mail_repliedTo=%@v");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "REPLYMOD");
  __p[0] = v73;
  uint64_t v49 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Replied");
  CFTypeRef v75 = __p;
  char v50 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v49 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v50 + 56, "com_apple_mail_repliedTo=%@v");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "REPLIED");
  __p[0] = v73;
  std::string v51 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Reply");
  CFTypeRef v75 = __p;
  CFStringRef v52 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v51 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v52 + 56, "com_apple_mail_repliedTo=%@v");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "REPLIED");
  __p[0] = v73;
  CFStringRef v53 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Replied");
  CFTypeRef v75 = __p;
  CFRange v54 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v53 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v54 + 56, "com_apple_mail_repliedTo=%@v");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "IGNOREMOD");
  __p[0] = v73;
  CFSetRef v55 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasIgnored");
  CFTypeRef v75 = __p;
  size_t v56 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v55 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v56 + 56, "(com_apple_mail_repliedTo=0 || com_apple_mail_read=0)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FLAGMOD");
  __p[0] = v73;
  int v57 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FlagColor");
  CFTypeRef v75 = __p;
  CFArrayRef v58 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v57 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v58 + 56, "com_apple_mail_flagColor=%@v");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FLAGGED");
  __p[0] = v73;
  int v59 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FlagColor");
  CFTypeRef v75 = __p;
  size_t v60 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v59 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v60 + 56, "com_apple_mail_flagColor=%@v");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FLAGMOD");
  __p[0] = v73;
  CFAllocatorRef v61 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasFlagged");
  CFTypeRef v75 = __p;
  uint64_t v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v61 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v62 + 56, "com_apple_mail_flagged=%@v");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FLAGMOD");
  __p[0] = v73;
  long long v63 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Flag");
  CFTypeRef v75 = __p;
  uint64_t v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v63 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v64 + 56, "com_apple_mail_flagged=%@v");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "FLAGGED");
  __p[0] = v73;
  v65 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Flag");
  CFTypeRef v75 = __p;
  CFMutableArrayRef v66 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v65 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v66 + 56, "com_apple_mail_flagged=%@v");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "SUBJECTMOD");
  __p[0] = v73;
  uint64_t v67 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Subject");
  CFTypeRef v75 = __p;
  BOOL v68 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v67 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v68 + 56, "(kMDItemSubject!=\"*\"cwd || kMDItemSubject=\"\"cwd)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "QUOTED");
  __p[0] = v73;
  BOOL v69 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v73, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  CFTypeRef v75 = __p;
  uint64_t v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v69 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v75);
  MEMORY[0x1A625AE00]((char *)v70 + 56, "(** = \"%@c*\"cdw)");
  if (v72 < 0) {
    operator delete(__p[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
}

void sub_1A432BCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NL::SpotlightParseFormatter::loadNotesTranslations(NL::SpotlightParseFormatter *this)
{
  int v2 = (uint64_t **)((char *)this + 168);
  updateNLPValueTranslations((uint64_t **)this + 21);
  updateNLPResultModifierTranslations(v2, (uint64_t **)this + 30);
  updateNotesFileTypeTranslations(v2);
  updateNotesAttachmentTranslations(v2);
  updateSpotlightTransportTranslations(v2);
  std::string::basic_string[abi:ne180100]<0>(v127, "ABOUT");
  __p[0] = v127;
  uint64_t v3 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v129 = __p;
  CFAllocatorRef v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v4 + 56, "(kMDItemDisplayName=\"%@c*\"cwd || kMDItemTextContent=\"%@c*\"cwd)");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "ABOUT");
  __p[0] = v127;
  CFNumberRef v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DateText");
  v129 = __p;
  CFStringRef v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v6 + 56, "(kMDItemDisplayName=\"%@c*\"cwd || kMDItemTextContent=\"%@c*\"cwd)");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "ABOUT");
  __p[0] = v127;
  unint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NameText");
  v129 = __p;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v8 + 56, "(kMDItemDisplayName=\"%@c*\"cwd || kMDItemTextContent=\"%@c*\"cwd)");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "ABOUT");
  __p[0] = v127;
  size_t v9 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v129 = __p;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v10 + 56, "(kMDItemDisplayName=\"%@c*\"cwd || kMDItemTextContent=\"%@c*\"cwd)");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "TOPICMOD");
  __p[0] = v127;
  CFIndex v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v129 = __p;
  CFStringRef v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v12 + 56, "(kMDItemDisplayName=\"%@c*\"cwd || kMDItemTextContent=\"%@c*\"cwd)");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "TITLED");
  __p[0] = v127;
  CFStringRef v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v129 = __p;
  CFStringRef v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v14 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "TITLED");
  __p[0] = v127;
  long long v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NameText");
  v129 = __p;
  char v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v16 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "TITLED");
  __p[0] = v127;
  CFAllocatorRef v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DateText");
  v129 = __p;
  CFNumberRef v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v18 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "TITLED");
  __p[0] = v127;
  CFIndex v19 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v129 = __p;
  long long v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v20 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "TITLED");
  __p[0] = v127;
  CFIndex v21 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v129 = __p;
  CFStringRef v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v22 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "ENTITLED");
  __p[0] = v127;
  CFStringRef v23 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v129 = __p;
  CFIndex v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v24 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "ENTITLED");
  __p[0] = v127;
  std::string::size_type v25 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NameText");
  v129 = __p;
  char v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v26 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "ENTITLED");
  __p[0] = v127;
  BOOL v27 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DateText");
  v129 = __p;
  uint64_t v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v28 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "ENTITLED");
  __p[0] = v127;
  BOOL v29 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v129 = __p;
  uint64_t v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v30 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "ENTITLED");
  __p[0] = v127;
  std::string v31 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v129 = __p;
  CFStringRef v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v32 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "FILETITLED");
  __p[0] = v127;
  std::string::size_type v33 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  v129 = __p;
  char v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v34 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemDisplayName=\"%@c*\"cwd)");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "FILETITLED");
  __p[0] = v127;
  CFStringRef v35 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v129 = __p;
  unsigned int v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v36 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemDisplayName=\"%@c*\"cwd)");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "FILETITLED");
  __p[0] = v127;
  int v37 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v129 = __p;
  uint64_t v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v37 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v38 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemDisplayName=\"%@c*\"cwd)");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "FILENAMED");
  __p[0] = v127;
  uint64_t v39 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v129 = __p;
  int v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v40 + 56, "kMDItemDisplayName=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "QUOTED");
  __p[0] = v127;
  CFNumberRef v41 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  v129 = __p;
  CFNumberRef v42 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v41 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v42 + 56, "** = \"%@c*\"cdw");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "SHATED");
  __p[0] = v127;
  CFNumberRef v43 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v129 = __p;
  uint64_t v44 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v43 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v44 + 56, "kMDItemAuthors=\"*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
  __p[0] = v127;
  std::string::size_type v45 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v129 = __p;
  CFStringRef v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v45 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v46 + 56, "kMDItemAuthors=\"*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
  __p[0] = v127;
  int v47 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v129 = __p;
  char v48 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v47 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v48 + 56, "kMDItemAuthors=\"*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "FILECREATED");
  __p[0] = v127;
  uint64_t v49 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v129 = __p;
  char v50 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v49 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v50 + 56, "kMDItemAuthors=\"%@c*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "SHARED");
  __p[0] = v127;
  std::string v51 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserShared");
  v129 = __p;
  CFStringRef v52 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v51 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v52 + 56, "kMDItemAuthors=\"*\"cwd");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  if (NL::ParserContext::languageIsCJ(*((NL::ParserContext **)this + 1)))
  {
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    CFStringRef v53 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
    v129 = __p;
    CFRange v54 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v53 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v54 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    CFSetRef v55 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
    v129 = __p;
    size_t v56 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v55 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v56 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    int v57 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
    v129 = __p;
    CFArrayRef v58 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v57 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v58 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    int v59 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
    v129 = __p;
    size_t v60 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v59 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v60 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    CFAllocatorRef v61 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
    v129 = __p;
    uint64_t v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v61 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v62 + 56, "kMDItemAuthors=\"*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    long long v63 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
    v129 = __p;
    uint64_t v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v63 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v64 + 56, "kMDItemAuthors=\"*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v65 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
    v129 = __p;
    CFMutableArrayRef v66 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v65 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v66 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    uint64_t v67 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
    v129 = __p;
    BOOL v68 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v67 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v68 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    BOOL v69 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
    v129 = __p;
    uint64_t v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v69 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v70 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    uint64_t v71 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
    v129 = __p;
    char v72 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v71 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v72 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENTFROM");
    __p[0] = v127;
    int v73 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    char v74 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v73 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v74 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENTFROM");
    __p[0] = v127;
    CFTypeRef v75 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
    v129 = __p;
    CFTypeRef v76 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v75 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v76 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "FROMTO");
    __p[0] = v127;
    uint64_t v77 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    BOOL v78 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v77 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v78 + 56, "kMDItemAuthors=\"%@c*\"cwdt");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "FROMTO");
    __p[0] = v127;
    uint64_t v79 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
    v129 = __p;
    std::string v80 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v79 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v80 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "AUTHORED");
    __p[0] = v127;
    std::string v81 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    CFTypeRef v82 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v81 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v82 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemAuthorEmailAddresses=\"%@c\")");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    uint64_t v83 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
    v129 = __p;
    std::string v84 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v83 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v84 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    uint64_t v85 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
    v129 = __p;
    CFRange v86 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v85 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v86 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    CFRange v87 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
    v129 = __p;
    CFTypeRef v88 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v87 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v88 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    uint64_t v89 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
    v129 = __p;
    uint64_t v90 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v89 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v90 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVED");
    __p[0] = v127;
    uint64_t v91 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
    v129 = __p;
    uint64_t v92 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v91 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v92 + 56, "kMDItemAuthors=\"*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVEDFROM");
    __p[0] = v127;
    unint64_t v93 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
    v129 = __p;
    CFTypeRef v94 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v93 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v94 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVEDFROM");
    __p[0] = v127;
    CFArrayRef v95 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
    v129 = __p;
    CFStringRef v96 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v95 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v96 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVEDFROM");
    __p[0] = v127;
    uint64_t v97 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
    v129 = __p;
    char v98 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v97 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v98 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVEDFROM");
    __p[0] = v127;
    std::string v99 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
    v129 = __p;
    std::string v100 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v100 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "RECEIVEDFROM");
    __p[0] = v127;
    int v101 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
    v129 = __p;
    int v102 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v101 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v102 + 56, "kMDItemAuthors=\"*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v103 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
    v129 = __p;
    uint64_t v104 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v103 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v104 + 56, "kMDItemAuthors=\"*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    CFRange v105 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
    v129 = __p;
    CFRange v106 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v105 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v106 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    CFRange v107 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
    v129 = __p;
    CFRange v108 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v107 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v108 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    CFRange v109 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
    v129 = __p;
    int v110 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v109 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v110 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENT");
    __p[0] = v127;
    v111 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
    v129 = __p;
    int v112 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v111 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v112 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENTFROM");
    __p[0] = v127;
    char v113 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    char v114 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v113 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v114 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "SENTFROM");
    __p[0] = v127;
    uint64_t v115 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
    v129 = __p;
    BOOL v116 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v115 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v116 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "FROMTO");
    __p[0] = v127;
    BOOL v117 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    unint64_t v118 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v117 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v118 + 56, "kMDItemAuthors=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "FROMTO");
    __p[0] = v127;
    uint64_t v119 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
    v129 = __p;
    uint64_t v120 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v119 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v120 + 56, "kMDItemAuthorEmailAddress=\"%@c*\"cwd");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v127, "AUTHORED");
    __p[0] = v127;
    uint64_t v121 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
    v129 = __p;
    v122 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v121 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
    MEMORY[0x1A625AE00]((char *)v122 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemAuthorEmailAddresses=\"%@c\")");
    if (v126 < 0) {
      operator delete(__p[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v127, "AUTHORED");
  __p[0] = v127;
  size_t v123 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v127, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v129 = __p;
  char v124 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v123 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  MEMORY[0x1A625AE00]((char *)v124 + 56, "kMDItemAuthorEmailAddresses=\"%@c\"");
  if (v126 < 0) {
    operator delete(__p[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
}

void sub_1A432E470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NL::SpotlightParseFormatter::loadSpotlightTranslations(NL::SpotlightParseFormatter *this)
{
  int v2 = (uint64_t **)((char *)this + 168);
  updateNLPUserActionTranslations((uint64_t **)this + 21);
  updateNLPValueTranslations(v2);
  updateNLPResultModifierTranslations(v2, (uint64_t **)this + 30);
  updateSpotlightFileTypeTranslations(v2);
  updateSpotlightAttachmentTranslations(v2);
  updateSpotlightTransportTranslations(v2);
  if (NL::ParserContext::languageIsCJ(*((NL::ParserContext **)this + 1))) {
    updateSpotlightSenderReceiverTranslations_Tokenize(v2);
  }
  else {
    updateSpotlightSenderReceiverTranslations(v2);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "COMPANY");
  __p[0] = v89;
  uint64_t v3 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Bundle");
  uint64_t v91 = __p;
  CFAllocatorRef v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v4 + 56, "kMDItemCFBundleIdentifier=\"*%@c*\"cwd");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "COMPANYMOD");
  __p[0] = v89;
  CFNumberRef v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Bundle");
  uint64_t v91 = __p;
  CFStringRef v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v6 + 56, "kMDItemCFBundleIdentifier=\"*%@c*\"cwd");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "CONTAINER");
  __p[0] = v89;
  unint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ChatClient");
  uint64_t v91 = __p;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v8 + 56, "kMDItemContentType=\"com.apple.ichat.transcript\"");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "CONTAINER");
  __p[0] = v89;
  size_t v9 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailClient");
  uint64_t v91 = __p;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v10 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "CONTAINER");
  __p[0] = v89;
  CFIndex v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageClient");
  uint64_t v91 = __p;
  CFStringRef v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v12 + 56, "(_kMDItemGroupId=1 || kMDItemContentType=\"com.apple.ichat.transcript\")");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "FACEBOOKED");
  __p[0] = v89;
  CFStringRef v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FacebookImageKind");
  uint64_t v91 = __p;
  CFStringRef v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v14 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd && _kMDItemGroupId=13");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ABOUT");
  __p[0] = v89;
  long long v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  uint64_t v91 = __p;
  char v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v16 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ABOUT");
  __p[0] = v89;
  CFAllocatorRef v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  uint64_t v91 = __p;
  CFNumberRef v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v18 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "TOPICMOD");
  __p[0] = v89;
  CFIndex v19 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  uint64_t v91 = __p;
  long long v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v20 + 56, "(kMDItemTextContent=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ALBUM");
  __p[0] = v89;
  CFIndex v21 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  uint64_t v91 = __p;
  CFStringRef v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v22 + 56, "(kMDItemAlbum=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ALBUM");
  __p[0] = v89;
  CFStringRef v23 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  uint64_t v91 = __p;
  CFIndex v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v24 + 56, "(kMDItemAlbum=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "IMAGEALBUM");
  __p[0] = v89;
  std::string::size_type v25 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  uint64_t v91 = __p;
  char v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v26 + 56, "(kMDItemAlbum=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd) && _kMDItemGroupId=13");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ALBUM");
  __p[0] = v89;
  BOOL v27 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  uint64_t v91 = __p;
  uint64_t v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v28 + 56, "_kMDItemGroupId=13");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ALBUM");
  __p[0] = v89;
  BOOL v29 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAlbum");
  uint64_t v91 = __p;
  uint64_t v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v30 + 56, "_kMDItemGroupId=13");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ALBUM");
  __p[0] = v89;
  std::string v31 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAlbumKind");
  uint64_t v91 = __p;
  CFStringRef v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v32 + 56, "_kMDItemGroupId=13");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "TITLEMOD");
  __p[0] = v89;
  std::string::size_type v33 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  uint64_t v91 = __p;
  char v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v34 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd || kMDItemAlbum=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "TITLED");
  __p[0] = v89;
  CFStringRef v35 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  uint64_t v91 = __p;
  unsigned int v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v36 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "TITLED");
  __p[0] = v89;
  int v37 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  uint64_t v91 = __p;
  uint64_t v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v37 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v38 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "TITLED");
  __p[0] = v89;
  uint64_t v39 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  uint64_t v91 = __p;
  int v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v40 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ENTITLED");
  __p[0] = v89;
  CFNumberRef v41 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  uint64_t v91 = __p;
  CFNumberRef v42 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v41 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v42 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ENTITLED");
  __p[0] = v89;
  CFNumberRef v43 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  uint64_t v91 = __p;
  uint64_t v44 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v43 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v44 + 56, "(kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ENTITLED");
  __p[0] = v89;
  std::string::size_type v45 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  uint64_t v91 = __p;
  CFStringRef v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v45 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v46 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "FILETITLED");
  __p[0] = v89;
  int v47 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  uint64_t v91 = __p;
  char v48 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v47 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v48 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemTitle=\"%@c*\"cwd || kMDItemSubject=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "FILETITLED");
  __p[0] = v89;
  uint64_t v49 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  uint64_t v91 = __p;
  char v50 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v49 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v50 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && (kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "FILENAMED");
  __p[0] = v89;
  std::string v51 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  uint64_t v91 = __p;
  CFStringRef v52 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v51 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v52 + 56, "(kMDItemFSName=\"%@c*\"cwd || kMDItemTitle=\"%@c*\"cwd || kMDItemDisplayName=\"%@c*\"cwd || com_apple_mail_attachmentNames=\"%@c*\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "IGNOREMOD");
  __p[0] = v89;
  CFStringRef v53 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasIgnored");
  uint64_t v91 = __p;
  CFRange v54 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v53 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v54 + 56, "(com_apple_mail_repliedTo=0 || com_apple_mail_read=0)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "READMOD");
  __p[0] = v89;
  CFSetRef v55 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Read");
  uint64_t v91 = __p;
  size_t v56 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v55 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v56 + 56, "com_apple_mail_read=%@v");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "REPLYMOD");
  __p[0] = v89;
  int v57 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Reply");
  uint64_t v91 = __p;
  CFArrayRef v58 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v57 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v58 + 56, "com_apple_mail_repliedTo=%@v");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "REPLYMOD");
  __p[0] = v89;
  int v59 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Replied");
  uint64_t v91 = __p;
  size_t v60 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v59 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v60 + 56, "com_apple_mail_repliedTo=%@v");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "REPLIED");
  __p[0] = v89;
  CFAllocatorRef v61 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Reply");
  uint64_t v91 = __p;
  uint64_t v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v61 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v62 + 56, "com_apple_mail_repliedTo=%@v");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "REPLIED");
  __p[0] = v89;
  long long v63 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Replied");
  uint64_t v91 = __p;
  uint64_t v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v63 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v64 + 56, "com_apple_mail_repliedTo=%@v");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "FLAGMOD");
  __p[0] = v89;
  v65 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FlagColor");
  uint64_t v91 = __p;
  CFMutableArrayRef v66 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v65 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v66 + 56, "com_apple_mail_flagColor=%@v");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "FLAGGED");
  __p[0] = v89;
  uint64_t v67 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FlagColor");
  uint64_t v91 = __p;
  BOOL v68 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v67 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v68 + 56, "com_apple_mail_flagColor=%@v");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "FLAGMOD");
  __p[0] = v89;
  BOOL v69 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasFlagged");
  uint64_t v91 = __p;
  uint64_t v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v69 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v70 + 56, "com_apple_mail_flagged=%@v");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "FLAGGED");
  __p[0] = v89;
  uint64_t v71 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Flag");
  uint64_t v91 = __p;
  char v72 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v71 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v72 + 56, "com_apple_mail_flagged=%@v");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "TAGMOD");
  __p[0] = v89;
  int v73 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasTagged");
  uint64_t v91 = __p;
  char v74 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v73 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v74 + 56, "kMDItemUserTags=\"*\"cwd");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "TAGGED");
  __p[0] = v89;
  CFTypeRef v75 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Text");
  uint64_t v91 = __p;
  CFTypeRef v76 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v75 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v76 + 56, "kMDItemUserTags=\"%@c*\"cwd");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "TAGGED");
  __p[0] = v89;
  uint64_t v77 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "OpenText");
  uint64_t v91 = __p;
  BOOL v78 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v77 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v78 + 56, "kMDItemUserTags=\"%@c*\"cwd");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "TAGGED");
  __p[0] = v89;
  uint64_t v79 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TagColor");
  uint64_t v91 = __p;
  std::string v80 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v79 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v80 + 56, "kMDItemUserTags=\"%@v*\"cwd");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "QUOTED");
  __p[0] = v89;
  std::string v81 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  uint64_t v91 = __p;
  CFTypeRef v82 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v81 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v82 + 56, "(** = \"%@c*\"cdw)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "ORIENTATION");
  __p[0] = v89;
  uint64_t v83 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Orientation");
  uint64_t v91 = __p;
  std::string v84 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v83 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v84 + 56, "kMDItemOrientation=%@v");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v89, "SUBJECTMOD");
  __p[0] = v89;
  uint64_t v85 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)v89, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Subject");
  uint64_t v91 = __p;
  CFRange v86 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v85 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v91);
  MEMORY[0x1A625AE00]((char *)v86 + 56, "(kMDItemSubject!=\"*\"cwd || kMDItemSubject=\"\"cwd)");
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
}

void sub_1A43301A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateNLPUserActionTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v34, "USERPRINTED");
  __p[0] = v34;
  int v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PRINTED.HasPrinted");
  unsigned int v36 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "kMDItemUserPrintedUserHandle=\"*\"");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERPRINTED");
  __p[0] = v34;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasUserPrinted");
  unsigned int v36 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "kMDItemUserPrintedUserHandle=\"%@uid\"");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERCREATED");
  __p[0] = v34;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasCreated");
  unsigned int v36 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "kMDItemUserCreatedUserHandle=\"*\"");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERCREATED");
  __p[0] = v34;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasUserCreated");
  unsigned int v36 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "kMDItemUserCreatedUserHandle=\"%@uid\"");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "MAILMODIFIED");
  __p[0] = v34;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MODIFIED.HasModified");
  unsigned int v36 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "kMDItemUserModifiedUserHandle=\"*\"");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "FILEMODIFIED");
  __p[0] = v34;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MODIFIED.HasModified");
  unsigned int v36 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "kMDItemUserModifiedUserHandle=\"*\"");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERMODIFIED");
  __p[0] = v34;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MODIFIED.HasModified");
  unsigned int v36 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "kMDItemUserModifiedUserHandle=\"*\"");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERMODIFIED");
  __p[0] = v34;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasUserModified");
  unsigned int v36 = __p;
  CFAllocatorRef v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "kMDItemUserModifiedUserHandle=\"%@uid\"");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERWEBVIEWED");
  __p[0] = v34;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED.HasViewed");
  unsigned int v36 = __p;
  CFIndex v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "InRange(kMDItemDateAdded,0,2147483647)");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERWEBVIEWED");
  __p[0] = v34;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED.HasUserViewed");
  unsigned int v36 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "InRange(kMDItemDateAdded,0,2147483647)");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERWEBVIEWED");
  __p[0] = v34;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED.HasDownloaded");
  unsigned int v36 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "InRange(kMDItemDateAdded,0,2147483647)");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERWEBVIEWED");
  __p[0] = v34;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DOWNLOADED.HasDownloaded");
  unsigned int v36 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "InRange(kMDItemDateAdded,0,2147483647)");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERMAILVIEWED");
  __p[0] = v34;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED.HasViewed");
  unsigned int v36 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "InRange(com_apple_mail_dateLastViewed,0,2147483647)");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERMAILVIEWED");
  __p[0] = v34;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VIEWED.HasViewed");
  unsigned int v36 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "InRange(com_apple_mail_dateLastViewed,0,2147483647)");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "USERDOWNLOADED");
  __p[0] = v34;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v34, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DOWNLOADED.HasDownloaded");
  unsigned int v36 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "InRange(kMDItemDownloadDate,0,2147483647)");
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
}

void sub_1A4330D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateNLPValueTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v64, "PAGECOUNT");
  __p[0] = v64;
  int v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  CFMutableArrayRef v66 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "kMDItemNumberOfPages=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "EQUALTO");
  __p[0] = v64;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  CFMutableArrayRef v66 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "kMDItemNumberOfPages=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATEREQUAL");
  __p[0] = v64;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  CFMutableArrayRef v66 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "kMDItemNumberOfPages>=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATER");
  __p[0] = v64;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  CFMutableArrayRef v66 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "kMDItemNumberOfPages>%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LESSEQUAL");
  __p[0] = v64;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  CFMutableArrayRef v66 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "kMDItemNumberOfPages<=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LESS");
  __p[0] = v64;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagecountValue");
  CFMutableArrayRef v66 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "kMDItemNumberOfPages<%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "FILESIZE");
  __p[0] = v64;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  CFMutableArrayRef v66 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "(kMDItemPhysicalSize>=%@v1 && kMDItemPhysicalSize<=%@v2)");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "EQUALTO");
  __p[0] = v64;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  CFMutableArrayRef v66 = __p;
  CFAllocatorRef v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "(kMDItemPhysicalSize>=%@v1 && kMDItemPhysicalSize<=%@v2)");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATEREQUAL");
  __p[0] = v64;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  CFMutableArrayRef v66 = __p;
  CFIndex v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "kMDItemPhysicalSize>=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATER");
  __p[0] = v64;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  CFMutableArrayRef v66 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "kMDItemPhysicalSize>%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LESSEQUAL");
  __p[0] = v64;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  CFMutableArrayRef v66 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "kMDItemPhysicalSize<=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LESS");
  __p[0] = v64;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilesizeValue");
  CFMutableArrayRef v66 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "kMDItemPhysicalSize<%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LASTING");
  __p[0] = v64;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  CFMutableArrayRef v66 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "(kMDItemDurationSeconds>=%@v1 && kMDItemDurationSeconds<=%@v2)");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "EQUALTO");
  __p[0] = v64;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  CFMutableArrayRef v66 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "(kMDItemDurationSeconds>=%@v1 && kMDItemDurationSeconds<=%@v2)");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATEREQUAL");
  __p[0] = v64;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  CFMutableArrayRef v66 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "kMDItemDurationSeconds>=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATER");
  __p[0] = v64;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  CFMutableArrayRef v66 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "kMDItemDurationSeconds>%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LESSEQUAL");
  __p[0] = v64;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  CFMutableArrayRef v66 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "kMDItemDurationSeconds<=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LESS");
  __p[0] = v64;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DurationValue");
  CFMutableArrayRef v66 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "kMDItemDurationSeconds<%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "ALTITUDE");
  __p[0] = v64;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  CFMutableArrayRef v66 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "(kMDItemAltitude>=%@v1 && kMDItemAltitude<=%@v2)");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "EQUALTO");
  __p[0] = v64;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  CFMutableArrayRef v66 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "(kMDItemAltitude>=%@v1 && kMDItemAltitude<=%@v2)");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATEREQUAL");
  __p[0] = v64;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  CFMutableArrayRef v66 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "kMDItemAltitude>=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATER");
  __p[0] = v64;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  CFMutableArrayRef v66 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "kMDItemAltitude>%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LESSEQUAL");
  __p[0] = v64;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  CFMutableArrayRef v66 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "kMDItemAltitude<=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LESS");
  __p[0] = v64;
  char v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AltitudeValue");
  CFMutableArrayRef v66 = __p;
  uint64_t v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v49 + 56, "kMDItemAltitude<%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "PHOTOISO");
  __p[0] = v64;
  char v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  CFMutableArrayRef v66 = __p;
  std::string v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v51 + 56, "kMDItemISOSpeed=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "EQUALTO");
  __p[0] = v64;
  CFStringRef v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  CFMutableArrayRef v66 = __p;
  CFStringRef v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v53 + 56, "kMDItemISOSpeed=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATEREQUAL");
  __p[0] = v64;
  CFRange v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  CFMutableArrayRef v66 = __p;
  CFSetRef v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v55 + 56, "kMDItemISOSpeed>=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "GREATER");
  __p[0] = v64;
  size_t v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  CFMutableArrayRef v66 = __p;
  int v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v57 + 56, "kMDItemISOSpeed>%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LESSEQUAL");
  __p[0] = v64;
  CFArrayRef v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  CFMutableArrayRef v66 = __p;
  int v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v59 + 56, "kMDItemISOSpeed<=%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "LESS");
  __p[0] = v64;
  size_t v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v64, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IsoValue");
  CFMutableArrayRef v66 = __p;
  CFAllocatorRef v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v66);
  MEMORY[0x1A625AE00]((char *)v61 + 56, "kMDItemISOSpeed<%@v");
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
}

void sub_1A4332074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateNLPResultModifierTranslations(uint64_t **a1, uint64_t **a2)
{
  std::string::basic_string[abi:ne180100]<0>(v18, "COUNT");
  __p[0] = v18;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MaxCount");
  long long v20 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "");
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "COUNT");
  __p[0] = v18;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MinCount");
  long long v20 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "");
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "PERIOD");
  __p[0] = v18;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MaxTime");
  long long v20 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "");
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "PERIOD");
  __p[0] = v18;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MinTime");
  long long v20 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "");
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "COUNT");
  __p[0] = v18;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MaxCount");
  long long v20 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20)+ 14) = 2;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "COUNT");
  __p[0] = v18;
  CFStringRef v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MinCount");
  long long v20 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20)+ 14) = 1;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "PERIOD");
  __p[0] = v18;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MaxTime");
  long long v20 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20)+ 14) = 2;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "PERIOD");
  __p[0] = v18;
  long long v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v18, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MinTime");
  long long v20 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20)+ 14) = 1;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
}

void sub_1A43326FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void updateSpotlightFileTypeTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  int v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ChatKind");
  v152 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "kMDItemContentType=\"com.apple.ichat.transcript\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailKind");
  v152 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageKind");
  v152 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "(_kMDItemGroupId=1 || kMDItemContentType=\"com.apple.ichat.transcript\")");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v152 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "_kMDItemGroupId=13");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v152 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "(_kMDItemGroupId=13 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v152 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "kMDItemContentType=\"public.jpeg\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v152 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "kMDItemContentType=\"public.png\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v152 = __p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "kMDItemContentType=\"public.tiff\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v152 = __p;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "kMDItemContentType=\"com.compuserve.gif\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v152 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "(kMDItemContentType=\"public.jpeg\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v152 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "(kMDItemContentType=\"public.png\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v152 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "(kMDItemContentType=\"public.tiff\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v152 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "(kMDItemContentType=\"com.compuserve.gif\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v152 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "_kMDItemGroupId=10");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v152 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "(_kMDItemGroupId=10 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v152 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "kMDItemContentType=\"aif*\"cwd");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v152 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "kMDItemContentType=\"public.aac\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v152 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "kMDItemContentType=\"public.mp3\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v152 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "(kMDItemContentType=\"public.aac\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v152 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "(kMDItemContentType=\"aif*\"cwd && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v152 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "(kMDItemContentType=\"public.mp3\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v152 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "_kMDItemGroupId=7");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoFormatKind");
  v152 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "(kMDItemContentType=\"%@c*\"cwd || kMDItemFSName=\"*%@c\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v152 = __p;
  uint64_t v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v49 + 56, "kMDItemContentType=\"com.apple.quicktime-movie\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v152 = __p;
  std::string v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v51 + 56, "kMDItemContentType=\"com.apple.m4v-video\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFStringRef v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v152 = __p;
  CFStringRef v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v53 + 56, "(_kMDItemGroupId=7 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFRange v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoFormatAttachment");
  v152 = __p;
  CFSetRef v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v55 + 56, "((kMDItemContentType=\"%@c*\"cwd || kMDItemFSName=\"*%@c\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  size_t v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v152 = __p;
  int v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v57 + 56, "(kMDItemContentType=\"com.apple.quicktime-movie\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFArrayRef v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v152 = __p;
  int v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v59 + 56, "(kMDItemContentType=\"com.apple.m4v-video\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  size_t v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v152 = __p;
  CFAllocatorRef v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v61 + 56, "_kMDItemGroupId=12");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v152 = __p;
  char v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v63 + 56, "(_kMDItemGroupId=12 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v152 = __p;
  char v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v65 + 56, "kMDItemContentType=\"com.apple.iwork.key*\"cwd");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFMutableArrayRef v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v152 = __p;
  uint64_t v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v67 + 56, "kMDItemContentType=\"com.microsoft.powerpoint.ppt*\"cwd");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  BOOL v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v152 = __p;
  BOOL v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v69 + 56, "(kMDItemContentType=\"com.apple.iwork.key*\"cwd && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v152 = __p;
  uint64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v71 + 56, "(kMDItemContentType=\"com.microsoft.powerpoint.ppt*\"cwd && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v152 = __p;
  int v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v73 + 56, "_kMDItemGroupId=16");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v152 = __p;
  CFTypeRef v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v75 + 56, "(_kMDItemGroupId=16 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFTypeRef v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v152 = __p;
  uint64_t v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v77 + 56, "kMDItemContentType=\"com.microsoft.excel.xls\"cwd");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  BOOL v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v152 = __p;
  uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v79 + 56, "(kMDItemContentType=\"com.microsoft.excel.xls\"cwd && && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  std::string v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v152 = __p;
  std::string v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v81 + 56, "(_kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=14 || _kMDItemGroupId=15 || _kMDItemGroupId=16)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFTypeRef v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v152 = __p;
  uint64_t v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v83 + 56, "((_kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=14 || _kMDItemGroupId=15 || _kMDItemGroupId=16) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  std::string v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v152 = __p;
  uint64_t v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v85 + 56, "(kMDItemContentType=\"com.apple.iwork*\"cwd || kMDItemContentType=\"com.microsoft.*\"cwd || kMDItemContentType=\"org.openxmlformats*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFRange v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v152 = __p;
  CFRange v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v87 + 56, "((kMDItemContentType=\"com.apple.iwork*\"cwd || kMDItemContentType=\"com.microsoft.*\"cwd || kMDItemContentType=\"org.openxmlformats*\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v152 = __p;
  uint64_t v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v89 + 56, "(kMDItemContentType=\"com.apple.iwork.pages.*\" || kMDItemContentType=\"com.microsoft.word.doc\" || kMDItemContentType=\"org.openxmlformats.word*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v152 = __p;
  uint64_t v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v91 + 56, "(kMDItemContentType=\"com.microsoft.word.doc*\"cwd || kMDItemContentType=\"org.openxmlformats.word*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v152 = __p;
  unint64_t v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v93 + 56, "((kMDItemContentType=\"com.apple.iwork.pages.*\" || kMDItemContentType=\"com.microsoft.word.doc\" || kMDItemContentType=\"org.openxmlformats.word*\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFTypeRef v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v152 = __p;
  CFArrayRef v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v95 + 56, "((kMDItemContentType=\"com.microsoft.word.doc*\"cwd || kMDItemContentType=\"org.openxmlformats.word*\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFStringRef v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v152 = __p;
  uint64_t v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v97 + 56, "kMDItemContentType=\"public.rtf\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v152 = __p;
  std::string v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v99 + 56, "(kMDItemContentType=\"public.plain-text\" || kMDItemFSName=\"*txt\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  std::string v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v152 = __p;
  int v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v101 + 56, "(kMDItemContentType=\"public.rtf\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  int v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v152 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v103 + 56, "((kMDItemContentType=\"public.plain-text\" || kMDItemFSName=\"*txt\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v152 = __p;
  CFRange v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v105 + 56, "(_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\"))");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFRange v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v152 = __p;
  CFRange v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v107 + 56, "((_kMDItemGroupId=5 || _kMDItemGroupId=7 || _kMDItemGroupId=10 || _kMDItemGroupId=11 || _kMDItemGroupId=12 || _kMDItemGroupId=13 || _kMDItemGroupId=14 || _kMDItemGroupId=16 || _kMDItemGroupId=18 || (_kMDItemGroupId=15 && kMDItemContentTypeTree=\"public.directory\")) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  CFRange v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v152 = __p;
  CFRange v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v109 + 56, "(kMDItemContentType=\"tar*\"cwd || kMDItemContentType=\"zip*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  int v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v152 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v111 + 56, "kMDItemContentType=\"com.sun.java-source\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  int v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v152 = __p;
  char v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v113 + 56, "((kMDItemContentType=\"tar*\"cwd || kMDItemContentType=\"zip*\"cwd) && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v152 = __p;
  uint64_t v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v115 + 56, "(kMDItemContentType=\"com.sun.java-source\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  BOOL v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v152 = __p;
  BOOL v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v117 + 56, "kMDItemContentType=\"public.calendar-event\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  unint64_t v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v152 = __p;
  uint64_t v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v119 + 56, "kMDItemContentType=\"com.apple.ical.ics\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  uint64_t v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v152 = __p;
  uint64_t v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v121 + 56, "(kMDItemContentType=\"public.calendar-event\" && && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v152 = __p;
  size_t v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v123 + 56, "(kMDItemContentType=\"com.apple.ical.ics\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v152 = __p;
  unsigned __int8 v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v125 + 56, "kMDItemContentType=\"public.vcard\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v152 = __p;
  uint64_t v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v127 + 56, "kMDItemContentType=\"public.vcard\"");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  char v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v152 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v129 + 56, "(kMDItemContentType=\"public.vcard\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v152 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v131 + 56, "(kMDItemContentType=\"public.vcard\" && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v152 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v133 + 56, "_kMDItemGroupId=11");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v152 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v135 + 56, "(_kMDItemGroupId=11 && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v152 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v137 + 56, "kMDItemContentType=\"com.apple.pkpass\"cwd");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v152 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v139 + 56, "(kMDItemContentType=\"com.apple.pkpass\"cwd && kMDItemWhereFroms=\"message*\"cwd)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v152 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v141 + 56, "kMDItemFSName=\"%@c*\"cwd");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NotesKind");
  v152 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v143 + 56, "(kMDItemContentType=\"com.apple.notes.*record\" || kMDItemKind=\"notes*\"cwdt)");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v144 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ApplicationKind");
  v152 = __p;
  v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v144 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v145 + 56, "_kMDItemGroupId=8");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "KIND");
  __p[0] = v150;
  v146 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v150, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteKind");
  v152 = __p;
  v147 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v146 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v152);
  MEMORY[0x1A625AE00]((char *)v147 + 56, "(kMDItemContentType=\"com.apple.safari.history\" || kMDItemContentType=\"com.apple.safari.bookmark\")");
  if (v149 < 0) {
    operator delete(__p[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
}

void sub_1A4335434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateSpotlightAttachmentTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  int v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailClient");
  v286 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v286 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v286 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttached");
  v286 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttachment");
  v286 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailAttachment");
  v286 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v286 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v286 = __p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v286 = __p;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v286 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v286 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v286 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v286 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v286 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v286 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v286 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v286 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v286 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v286 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v286 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v286 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v286 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v286 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  char v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v286 = __p;
  uint64_t v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v49 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  char v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v286 = __p;
  std::string v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v51 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  CFStringRef v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v286 = __p;
  CFStringRef v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v53 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFRange v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v286 = __p;
  CFSetRef v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v55 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  size_t v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v286 = __p;
  int v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v57 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFArrayRef v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v286 = __p;
  int v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v59 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  size_t v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v286 = __p;
  CFAllocatorRef v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v61 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  uint64_t v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v286 = __p;
  char v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v63 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  uint64_t v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v286 = __p;
  char v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v65 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFMutableArrayRef v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v286 = __p;
  uint64_t v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v67 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  BOOL v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v286 = __p;
  BOOL v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v69 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  uint64_t v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v286 = __p;
  uint64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v71 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  char v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v286 = __p;
  int v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v73 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  char v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v286 = __p;
  CFTypeRef v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v75 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  CFTypeRef v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v286 = __p;
  uint64_t v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v77 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  BOOL v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v286 = __p;
  uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v79 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  std::string v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v286 = __p;
  std::string v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v81 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  CFTypeRef v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v286 = __p;
  uint64_t v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v83 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  std::string v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v286 = __p;
  uint64_t v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v85 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFRange v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v286 = __p;
  CFRange v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v87 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  char v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v286 = __p;
  uint64_t v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v89 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  char v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v286 = __p;
  uint64_t v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v91 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  uint64_t v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v286 = __p;
  unint64_t v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v93 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFTypeRef v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v286 = __p;
  CFArrayRef v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v95 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  CFStringRef v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v286 = __p;
  uint64_t v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v97 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  char v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v286 = __p;
  std::string v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v99 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  std::string v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v286 = __p;
  int v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v101 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  int v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v286 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v103 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  uint64_t v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v286 = __p;
  CFRange v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v105 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  CFRange v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v286 = __p;
  CFRange v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v107 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  CFRange v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v286 = __p;
  CFRange v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v109 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  int v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v286 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v111 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  int v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v286 = __p;
  char v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v113 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  char v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v286 = __p;
  uint64_t v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v115 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  BOOL v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v286 = __p;
  BOOL v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v117 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  unint64_t v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v286 = __p;
  uint64_t v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v119 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  uint64_t v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v286 = __p;
  uint64_t v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v121 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v286 = __p;
  size_t v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v123 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  char v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v286 = __p;
  unsigned __int8 v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v125 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  char v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v286 = __p;
  uint64_t v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v127 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  char v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v286 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v129 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v286 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v131 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v286 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v133 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v286 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v135 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v286 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v137 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v286 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v139 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v286 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v141 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v286 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v143 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v144 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v286 = __p;
  v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v144 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v145 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v146 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v286 = __p;
  v147 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v146 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v147 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v148 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v286 = __p;
  char v149 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v148 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v149 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v150 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v286 = __p;
  char v151 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v150 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v151 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v152 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v286 = __p;
  v153 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v152 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v153 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v154 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v286 = __p;
  v155 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v154 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v155 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v156 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v286 = __p;
  v157 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v156 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v157 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v158 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v286 = __p;
  v159 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v158 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v159 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v160 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v286 = __p;
  v161 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v160 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v161 + 56, "(com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v162 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v286 = __p;
  v163 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v162 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v163 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v164 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v286 = __p;
  v165 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v164 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v165 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v166 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v286 = __p;
  v167 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v166 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v167 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v168 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v286 = __p;
  v169 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v168 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v169 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v170 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v286 = __p;
  v171 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v170 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v171 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v172 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v286 = __p;
  v173 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v172 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v173 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v174 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v286 = __p;
  v175 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v174 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v175 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v176 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v286 = __p;
  v177 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v176 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v177 + 56, "(com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\")");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v178 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v286 = __p;
  v179 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v178 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v179 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v180 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v286 = __p;
  v181 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v180 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v181 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v182 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v286 = __p;
  v183 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v182 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v183 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v184 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v286 = __p;
  v185 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v184 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v185 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v186 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v286 = __p;
  v187 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v186 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v187 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v188 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v286 = __p;
  v189 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v188 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v189 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v190 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v286 = __p;
  v191 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v190 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v191 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v192 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v286 = __p;
  v193 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v192 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v193 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v194 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v286 = __p;
  v195 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v194 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v195 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v196 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v286 = __p;
  v197 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v196 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v197 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v198 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v286 = __p;
  v199 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v198 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v199 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v200 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v286 = __p;
  v201 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v200 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v201 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v202 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v286 = __p;
  v203 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v202 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v203 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v204 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v286 = __p;
  v205 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v204 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v205 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v206 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v286 = __p;
  v207 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v206 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v207 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v208 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v286 = __p;
  v209 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v208 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v209 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v210 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v286 = __p;
  v211 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v210 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v211 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v212 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v286 = __p;
  v213 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v212 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v213 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v214 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v286 = __p;
  v215 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v214 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v215 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v216 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v286 = __p;
  v217 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v216 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v217 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v218 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v286 = __p;
  v219 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v218 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v219 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v220 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v286 = __p;
  v221 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v220 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v221 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v222 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v286 = __p;
  v223 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v222 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v223 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v224 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v286 = __p;
  v225 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v224 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v225 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v226 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v286 = __p;
  v227 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v226 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v227 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v228 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v286 = __p;
  v229 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v228 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v229 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v230 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v286 = __p;
  v231 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v230 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v231 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v232 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v286 = __p;
  v233 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v232 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v233 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v234 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v286 = __p;
  v235 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v234 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v235 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v236 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v286 = __p;
  v237 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v236 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v237 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v238 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v286 = __p;
  v239 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v238 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v239 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v240 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v286 = __p;
  v241 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v240 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v241 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v242 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v286 = __p;
  v243 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v242 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v243 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v244 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v286 = __p;
  v245 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v244 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v245 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v246 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v286 = __p;
  v247 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v246 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v247 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v248 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v286 = __p;
  v249 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v248 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v249 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v250 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v286 = __p;
  v251 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v250 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v251 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v252 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v286 = __p;
  v253 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v252 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v253 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v254 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v286 = __p;
  v255 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v254 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v255 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v256 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v286 = __p;
  v257 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v256 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v257 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v258 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v286 = __p;
  v259 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v258 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v259 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v260 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v286 = __p;
  v261 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v260 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v261 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v262 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v286 = __p;
  v263 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v262 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v263 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v264 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v286 = __p;
  v265 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v264 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v265 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v266 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v286 = __p;
  v267 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v266 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v267 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v268 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v286 = __p;
  v269 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v268 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v269 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v270 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v286 = __p;
  v271 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v270 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v271 + 56, "com_apple_mail_attachmentNames=\"%@c\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v272 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v286 = __p;
  v273 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v272 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v273 + 56, "com_apple_mail_attachmentNames=\"%@c\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v274 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v286 = __p;
  v275 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v274 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v275 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHED");
  __p[0] = v284;
  v276 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v286 = __p;
  v277 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v276 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v277 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v278 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v286 = __p;
  v279 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v278 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v279 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v284, "ATTACHMOD");
  __p[0] = v284;
  v280 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v284, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v286 = __p;
  v281 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v280 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v286);
  MEMORY[0x1A625AE00]((char *)v281 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v283 < 0) {
    operator delete(__p[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
}

void sub_1A433AD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateSpotlightTransportTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  int v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMailed");
  CFStringRef v52 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserMailed");
  CFStringRef v52 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "(kMDItemUserSharedSentTransport=\"com.apple.mail\" && ((kMDItemUserSharedSentSender=\"*\"cwd || kMDItemUserSharedSentSenderHandle=\"*\"cwd)))");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "RECEIVED");
  __p[0] = v50;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMailed");
  CFStringRef v52 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.mail\"");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMessaged");
  CFStringRef v52 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserMessaged");
  CFStringRef v52 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "(kMDItemUserSharedSentTransport=\"com.apple.messages\" && ((kMDItemUserSharedSentSender=\"*\"cwd || kMDItemUserSharedSentSenderHandle=\"*\"cwd)))");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "RECEIVED");
  __p[0] = v50;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMessaged");
  CFStringRef v52 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.messages\"");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasAirdropped");
  CFStringRef v52 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "kMDItemUserSharedSentTransport=\"com.apple.AirDrop\"");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserAirdropped");
  CFStringRef v52 = __p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "(kMDItemUserSharedSentTransport=\"com.apple.AirDrop\" && ((kMDItemUserSharedSentSender=\"*\"cwd || kMDItemUserSharedSentSenderHandle=\"*\"cwd)))");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "RECEIVED");
  __p[0] = v50;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasAirdropped");
  CFStringRef v52 = __p;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.AirDrop\"");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasShared");
  CFStringRef v52 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "kMDItemUserSharedSentTransport=\"*\"cwd");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserShared");
  CFStringRef v52 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "kMDItemUserSharedSentTransport=\"*\"cwd");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Facebook");
  CFStringRef v52 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasFacebooked");
  CFStringRef v52 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Twitter");
  CFStringRef v52 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "kMDItemUserSharedSentTransport=\"twitter*\"cwd");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasTwitter");
  CFStringRef v52 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "kMDItemUserSharedSentTransport=\"twitter*\"cwd");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasTweeted");
  CFStringRef v52 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "kMDItemUserSharedSentTransport=\"twitter*\"cwd");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Linkedin");
  CFStringRef v52 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "kMDItemUserSharedSentTransport=\"linkedin*\"cwd");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SENT");
  __p[0] = v50;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasLinkedin");
  CFStringRef v52 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "kMDItemUserSharedSentTransport=\"linkedin*\"cwd");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "MAILSENT");
  __p[0] = v50;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMailed");
  CFStringRef v52 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "MAILSENT");
  __p[0] = v50;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserMailed");
  CFStringRef v52 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "MAILRECEIVED");
  __p[0] = v50;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMailed");
  CFStringRef v52 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.mail\"");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "MAILMAILSENT");
  __p[0] = v50;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasUserMailed");
  CFStringRef v52 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "MAILMAILRECEIVED");
  __p[0] = v50;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v50, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.HasMailed");
  CFStringRef v52 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
}

void sub_1A433C4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateSpotlightSenderReceiverTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v146, "FILECREATED");
  __p[0] = v146;
  int v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "(kMDItemComposer=\"%@c*\"cwd || kMDItemContributors=\"%@c*\"cwd || kMDItemAuthors=\"%@c*\"cwd || kMDItemLyricist=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "kMDItemUserSharedSentTransport=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "kMDItemUserSharedSentTransport=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "(kMDItemUserSharedSentSender=\"%@c*\"cwd || kMDItemUserSharedSentSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "kMDItemUserSharedSentSenderHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwd || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwd || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwd || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "(kMDItemUserSharedReceivedRecipient=\"*\"cwd || kMDItemUserSharedReceivedRecipientHandle=\"*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVEDFROM");
  __p[0] = v146;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVEDFROM");
  __p[0] = v146;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwd || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  char v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  char v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v49 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  char v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  char v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v51 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  CFStringRef v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  CFStringRef v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v53 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  CFRange v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  CFSetRef v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v55 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwd || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  size_t v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  int v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v57 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwd");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  CFArrayRef v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  int v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v59 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  size_t v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  CFAllocatorRef v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v61 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  uint64_t v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  char v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v63 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  uint64_t v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  char v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v65 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  CFMutableArrayRef v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  uint64_t v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v67 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwd || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  BOOL v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  BOOL v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v69 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwd");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  uint64_t v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  uint64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v71 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  char v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  int v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v73 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwd || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  char v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  CFTypeRef v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v75 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwd");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  CFTypeRef v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  uint64_t v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v77 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwd || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  BOOL v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v79 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwd");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  std::string v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  std::string v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v81 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  CFTypeRef v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  uint64_t v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v83 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemAuthorAddresses=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  std::string v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  uint64_t v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v85 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  CFRange v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  CFRange v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v87 + 56, "(kMDItemRecipients=\"%@c*\"cwd || kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  char v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  uint64_t v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v89 + 56, "(kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  char v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  uint64_t v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v91 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  uint64_t v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  unint64_t v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v93 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemAuthorAddresses=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  CFTypeRef v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  CFArrayRef v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v95 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  CFStringRef v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  uint64_t v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v97 + 56, "(kMDItemRecipients=\"%@c*\"cwd || kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  char v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  std::string v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v99 + 56, "(kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  std::string v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  int v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v101 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  int v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.HasSent");
  v148 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v103 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  uint64_t v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.HasShared");
  v148 = __p;
  CFRange v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v105 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  CFRange v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasAuthored");
  v148 = __p;
  CFRange v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v107 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  CFRange v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasCreated");
  v148 = __p;
  CFRange v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v109 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  int v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v111 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  int v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  char v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v113 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemEmailAddresses=\"%@c*\"cwd || kMDItemAuthorEmailAddresses=\"%@c*\"cwd || kMDItemOriginSenderDisplayName=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  char v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  uint64_t v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v115 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  BOOL v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  BOOL v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v117 + 56, "(kMDItemRecipients=\"%@c*\"cwd || kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemRecipientEmailAddresses=\"%@c*\"cwd || kMDItemDestinationRecipients=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  unint64_t v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  uint64_t v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v119 + 56, "(kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  uint64_t v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SHARERECIPIENT.Contact");
  v148 = __p;
  uint64_t v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v121 + 56, "(kMDItemRecipients=\"%@c*\"cwd || kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemRecipientEmailAddresses=\"%@c*\"cwd || kMDItemDestinationRecipients=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  size_t v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v123 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemEmailAddresses=\"%@c*\"cwd || kMDItemAuthorEmailAddresses=\"%@c*\"cwd || kMDItemOriginSenderDisplayName=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  char v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  unsigned __int8 v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v125 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  char v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  uint64_t v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v127 + 56, "(kMDItemRecipients=\"%@c*\"cwd || kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemRecipientEmailAddresses=\"%@c*\"cwd || kMDItemDestinationRecipients=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  char v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v129 + 56, "(kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v131 + 56, "kMDItemMailboxes!=mailbox.sent");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENTFROM");
  __p[0] = v146;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v133 + 56, "(kMDItemAuthors=\"%@c*\"cwd || kMDItemEmailAddresses=\"%@c*\"cwd || kMDItemAuthorEmailAddresses=\"%@c*\"cwd || kMDItemOriginSenderDisplayName=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENTFROM");
  __p[0] = v146;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v135 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "FROMTO");
  __p[0] = v146;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v137 + 56, "((kMDItemRecipientAddresses=\"%@c*\"cwd || kMDItemRecipientEmailAddresses=\"%@c*\"cwd || kMDItemRecipients=\"%@c*\"cwd || kMDItemDestinationRecipients=\"%@c*\"cwd) || (kMDItemAuthors=\"%@c*\"cwd || kMDItemEmailAddresses=\"%@c*\"cwd || kMDItemAuthorEmailAddresses=\"%@c*\"cwd || kMDItemInstantMessageAddresses=\"%@c*\"cwd || kMDItemOriginSenderDisplayName=\"%@c*\"cwd))");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "FROMTO");
  __p[0] = v146;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v139 + 56, "((kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\") || (kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\" || kMDItemInstantMessageAddresses=\"%@c\" || kMDItemOriginSenderDisplayName=\"%@c\"cwd))");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "AUTHORED");
  __p[0] = v146;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v141 + 56, "(kMDItemComposer=\"%@c*\"cwd || kMDItemContributors=\"%@c*\"cwd || kMDItemAuthors=\"%@c*\"cwd || kMDItemLyricist=\"%@c*\"cwd)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "AUTHORED");
  __p[0] = v146;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v143 + 56, "(kMDItemAuthorAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
}

void sub_1A433F160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateSpotlightSenderReceiverTranslations_Tokenize(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v146, "FILECREATED");
  __p[0] = v146;
  int v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "(kMDItemComposer=\"%@c*\"cwdt || kMDItemContributors=\"%@c*\"cwdt || kMDItemAuthors=\"%@c*\"cwdt || kMDItemLyricist=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "kMDItemUserSharedSentTransport=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "kMDItemUserSharedSentTransport=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "(kMDItemUserSharedSentSender=\"%@c*\"cwdt || kMDItemUserSharedSentSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "kMDItemUserSharedSentSenderHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwdt || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwdt || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENT");
  __p[0] = v146;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwdt || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVED");
  __p[0] = v146;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "(kMDItemUserSharedReceivedRecipient=\"*\"cwdt || kMDItemUserSharedReceivedRecipientHandle=\"*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVEDFROM");
  __p[0] = v146;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "RECEIVEDFROM");
  __p[0] = v146;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwdt || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILSENT");
  __p[0] = v146;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  char v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  char v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v49 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  char v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  char v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v51 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  CFStringRef v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  CFStringRef v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v53 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  CFRange v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  CFSetRef v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v55 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwdt || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILRECEIVED");
  __p[0] = v146;
  size_t v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  int v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v57 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwdt");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  CFArrayRef v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasShared");
  v148 = __p;
  int v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v59 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  size_t v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  CFAllocatorRef v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v61 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  uint64_t v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  char v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v63 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  uint64_t v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  char v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v65 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  CFMutableArrayRef v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  uint64_t v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v67 + 56, "(kMDItemUserSharedSentRecipient=\"%@c*\"cwdt || kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGESENT");
  __p[0] = v146;
  BOOL v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  BOOL v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v69 + 56, "kMDItemUserSharedSentRecipientHandle=\"%@c*\"cwdt");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  uint64_t v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasShared");
  v148 = __p;
  uint64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v71 + 56, "kMDItemUserSharedReceivedTransport=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  char v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  int v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v73 + 56, "(kMDItemUserSharedReceivedSender=\"%@c*\"cwdt || kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  char v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  CFTypeRef v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v75 + 56, "kMDItemUserSharedReceivedSenderHandle=\"%@c*\"cwdt");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  CFTypeRef v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  uint64_t v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v77 + 56, "(kMDItemUserSharedReceivedRecipient=\"%@c*\"cwdt || kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MESSAGERECEIVED");
  __p[0] = v146;
  BOOL v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v79 + 56, "kMDItemUserSharedReceivedRecipientHandle=\"%@c*\"cwdt");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  std::string v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  std::string v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v81 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  CFTypeRef v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  uint64_t v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v83 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemAuthorAddresses=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  std::string v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  uint64_t v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v85 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  CFRange v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  CFRange v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v87 + 56, "(kMDItemRecipients=\"%@c*\"cwdt || kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  char v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  uint64_t v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v89 + 56, "(kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGESENT");
  __p[0] = v146;
  char v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  uint64_t v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v91 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  uint64_t v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  unint64_t v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v93 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemAuthorAddresses=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  CFTypeRef v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  CFArrayRef v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v95 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  CFStringRef v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  uint64_t v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v97 + 56, "(kMDItemRecipients=\"%@c*\"cwdt || kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  char v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  std::string v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v99 + 56, "(kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemInstantMessageAddresses=\"%@c*\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MSGMESSAGERECEIVED");
  __p[0] = v146;
  std::string v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  int v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v101 + 56, "kMDItemDeliveryType=\"*\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  int v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.HasSent");
  v148 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v103 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  uint64_t v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.HasShared");
  v148 = __p;
  CFRange v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v105 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  CFRange v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasAuthored");
  v148 = __p;
  CFRange v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v107 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  CFRange v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasCreated");
  v148 = __p;
  CFRange v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v109 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  int v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.HasUserSent");
  v148 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v111 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  int v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  char v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v113 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemEmailAddresses=\"%@c*\"cwdt || kMDItemAuthorEmailAddresses=\"%@c*\"cwdt || kMDItemOriginSenderDisplayName=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  char v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  uint64_t v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v115 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  BOOL v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  BOOL v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v117 + 56, "(kMDItemRecipients=\"%@c*\"cwdt || kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemRecipientEmailAddresses=\"%@c*\"cwdt || kMDItemDestinationRecipients=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  unint64_t v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  uint64_t v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v119 + 56, "(kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILSENT");
  __p[0] = v146;
  uint64_t v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SHARERECIPIENT.Contact");
  v148 = __p;
  uint64_t v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v121 + 56, "(kMDItemRecipients=\"%@c*\"cwdt || kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemRecipientEmailAddresses=\"%@c*\"cwdt || kMDItemDestinationRecipients=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.Contact");
  v148 = __p;
  size_t v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v123 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemEmailAddresses=\"%@c*\"cwdt || kMDItemAuthorEmailAddresses=\"%@c*\"cwdt || kMDItemOriginSenderDisplayName=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  char v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENDER.EmailAddress");
  v148 = __p;
  unsigned __int8 v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v125 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  char v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.Contact");
  v148 = __p;
  uint64_t v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v127 + 56, "(kMDItemRecipients=\"%@c*\"cwdt || kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemRecipientEmailAddresses=\"%@c*\"cwdt || kMDItemDestinationRecipients=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  char v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.EmailAddress");
  v148 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v129 + 56, "(kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "MAILMAILRECEIVED");
  __p[0] = v146;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RECIPIENT.HasUserReceived");
  v148 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v131 + 56, "kMDItemMailboxes!=mailbox.sent");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENTFROM");
  __p[0] = v146;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v133 + 56, "(kMDItemAuthors=\"%@c*\"cwdt || kMDItemEmailAddresses=\"%@c*\"cwdt || kMDItemAuthorEmailAddresses=\"%@c*\"cwdt || kMDItemOriginSenderDisplayName=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "SENTFROM");
  __p[0] = v146;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v135 + 56, "(kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "FROMTO");
  __p[0] = v146;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v137 + 56, "((kMDItemRecipientAddresses=\"%@c*\"cwdt || kMDItemRecipientEmailAddresses=\"%@c*\"cwdt || kMDItemRecipients=\"%@c*\"cwdt || kMDItemDestinationRecipients=\"%@c*\"cwdt) || (kMDItemAuthors=\"%@c*\"cwdt || kMDItemEmailAddresses=\"%@c*\"cwdt || kMDItemAuthorEmailAddresses=\"%@c*\"cwdt || kMDItemInstantMessageAddresses=\"%@c*\"cwdt || kMDItemOriginSenderDisplayName=\"%@c*\"cwdt))");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "FROMTO");
  __p[0] = v146;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v139 + 56, "((kMDItemRecipientAddresses=\"%@c\" || kMDItemRecipientEmailAddresses=\"%@c\") || (kMDItemEmailAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\" || kMDItemInstantMessageAddresses=\"%@c\" || kMDItemOriginSenderDisplayName=\"%@c\"cwdt))");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "AUTHORED");
  __p[0] = v146;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Contact");
  v148 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v141 + 56, "(kMDItemComposer=\"%@c*\"cwdt || kMDItemContributors=\"%@c*\"cwdt || kMDItemAuthors=\"%@c*\"cwdt || kMDItemLyricist=\"%@c*\"cwdt)");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "AUTHORED");
  __p[0] = v146;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v146, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmailAddress");
  v148 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v148);
  MEMORY[0x1A625AE00]((char *)v143 + 56, "(kMDItemAuthorAddresses=\"%@c\" || kMDItemAuthorEmailAddresses=\"%@c\")");
  if (v145 < 0) {
    operator delete(__p[0]);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
}

void sub_1A4342054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL NL::ParserContext::languageIsCJ(NL::ParserContext *this)
{
  BOOL result = 0;
  if (*((void *)this + 1))
  {
    CFStringRef v1 = (const __CFString *)MEMORY[0x1A625A3A0]();
    if (v1)
    {
      CFStringRef v2 = v1;
      if (CFStringHasPrefix(v1, @"zh") || CFStringHasPrefix(v2, @"ja")) {
        return 1;
      }
    }
  }
  return result;
}

void updateMailFileTypeTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFStringRef v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ChatKind");
  v150 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailKind");
  v150 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MessageKind");
  v150 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v150 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v150 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v150 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v150 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v150 = __p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v150 = __p;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v150 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v150 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v150 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v150 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v150 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v150 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v150 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v150 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v150 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v150 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v150 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v150 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v150 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v150 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v150 = __p;
  char v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v49 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v150 = __p;
  char v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v51 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFStringRef v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v150 = __p;
  CFStringRef v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v53 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFRange v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v150 = __p;
  CFSetRef v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v55 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  size_t v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v150 = __p;
  int v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v57 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFArrayRef v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v150 = __p;
  int v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v59 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  size_t v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v150 = __p;
  CFAllocatorRef v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v61 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v150 = __p;
  char v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v63 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v150 = __p;
  char v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v65 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFMutableArrayRef v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v150 = __p;
  uint64_t v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v67 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  BOOL v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Spreadsheet");
  v150 = __p;
  BOOL v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v69 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v150 = __p;
  uint64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v71 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v150 = __p;
  int v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v73 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v150 = __p;
  CFTypeRef v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v75 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFTypeRef v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v150 = __p;
  uint64_t v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v77 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  BOOL v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v150 = __p;
  uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v79 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  std::string v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v150 = __p;
  std::string v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v81 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFTypeRef v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v150 = __p;
  uint64_t v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v83 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  std::string v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v150 = __p;
  uint64_t v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v85 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFRange v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v150 = __p;
  CFRange v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v87 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v150 = __p;
  uint64_t v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v89 + 56, "(com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v150 = __p;
  uint64_t v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v91 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v150 = __p;
  unint64_t v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v93 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFTypeRef v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v150 = __p;
  CFArrayRef v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v95 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFStringRef v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v150 = __p;
  uint64_t v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v97 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v150 = __p;
  std::string v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v99 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  std::string v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v150 = __p;
  int v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v101 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  int v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v150 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v103 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v150 = __p;
  CFRange v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v105 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFRange v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v150 = __p;
  CFRange v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v107 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  CFRange v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v150 = __p;
  CFRange v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v109 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  int v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v150 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v111 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  int v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v150 = __p;
  char v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v113 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v150 = __p;
  uint64_t v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v115 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  BOOL v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v150 = __p;
  BOOL v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v117 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  unint64_t v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v150 = __p;
  uint64_t v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v119 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  uint64_t v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v150 = __p;
  uint64_t v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v121 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v150 = __p;
  size_t v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v123 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v150 = __p;
  unsigned __int8 v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v125 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v150 = __p;
  uint64_t v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v127 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  char v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v150 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v129 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v150 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v131 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v150 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v133 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v150 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v135 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v150 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v137 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v150 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v139 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v150 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v141 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttachment");
  v150 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v143 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v148, "KIND");
  __p[0] = v148;
  v144 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v148, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v150 = __p;
  char v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v144 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v150);
  MEMORY[0x1A625AE00]((char *)v145 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v147 < 0) {
    operator delete(__p[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
}

void sub_1A4345044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateMailAttachmentTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  CFStringRef v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailClient");
  v290 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v290 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v290 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttached");
  v290 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttachment");
  v290 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MailAttachment");
  v290 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v290 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v290 = __p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v290 = __p;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v290 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v290 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v290 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v290 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v290 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v290 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v290 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v290 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v290 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v290 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v290 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v290 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v290 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "com_apple_mail_attachmentTypes=\"public.image\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v290 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.compuserve.gif\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  char v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v290 = __p;
  char v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v49 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.png\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  char v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v290 = __p;
  char v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v51 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.tiff\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFStringRef v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v290 = __p;
  CFStringRef v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v53 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.jpeg\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  CFRange v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v290 = __p;
  CFSetRef v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v55 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  size_t v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v290 = __p;
  int v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v57 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  CFArrayRef v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v290 = __p;
  int v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v59 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  size_t v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v290 = __p;
  CFAllocatorRef v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v61 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  uint64_t v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v290 = __p;
  char v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v63 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  uint64_t v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v290 = __p;
  char v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v65 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFMutableArrayRef v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v290 = __p;
  uint64_t v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v67 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  BOOL v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v290 = __p;
  BOOL v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v69 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  uint64_t v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v290 = __p;
  uint64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v71 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  char v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v290 = __p;
  int v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v73 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  char v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v290 = __p;
  CFTypeRef v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v75 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  CFTypeRef v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v290 = __p;
  uint64_t v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v77 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  BOOL v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v290 = __p;
  uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v79 + 56, "com_apple_mail_attachmentTypes=\"public.audio\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  std::string v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v290 = __p;
  std::string v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v81 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aac-audio\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFTypeRef v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v290 = __p;
  uint64_t v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v83 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.aif*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  std::string v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v290 = __p;
  uint64_t v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v85 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.mp3\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  CFRange v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v290 = __p;
  CFRange v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v87 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  char v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v290 = __p;
  uint64_t v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v89 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  char v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v290 = __p;
  uint64_t v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v91 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  uint64_t v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v290 = __p;
  unint64_t v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v93 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFTypeRef v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v290 = __p;
  CFArrayRef v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v95 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFStringRef v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v290 = __p;
  uint64_t v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v97 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  char v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v290 = __p;
  std::string v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v99 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  std::string v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v290 = __p;
  int v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v101 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  int v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v290 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v103 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  uint64_t v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v290 = __p;
  CFRange v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v105 + 56, "com_apple_mail_attachmentTypes=\"public.movie\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFRange v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v290 = __p;
  CFRange v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v107 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.quicktime-movie\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  CFRange v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v290 = __p;
  CFRange v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v109 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.m4v-video\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  int v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v290 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v111 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  int v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v290 = __p;
  char v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v113 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  char v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v290 = __p;
  uint64_t v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v115 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  BOOL v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v290 = __p;
  BOOL v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v117 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  unint64_t v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v290 = __p;
  uint64_t v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v119 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  uint64_t v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v290 = __p;
  uint64_t v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v121 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v290 = __p;
  size_t v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v123 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  char v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v290 = __p;
  unsigned __int8 v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v125 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  char v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v290 = __p;
  uint64_t v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v127 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  char v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v290 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v129 + 56, "(com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v290 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v131 + 56, "com_apple_mail_attachmentSpecificTypes=\"com.apple.iwork.keynote.key\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v290 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v133 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.powerpoint.ppt\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Spreadsheet");
  v290 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v135 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v290 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v137 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v290 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v139 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Spreadsheet");
  v290 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v141 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v290 = __p;
  v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v143 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v144 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v290 = __p;
  char v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v144 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v145 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v146 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v290 = __p;
  char v147 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v146 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v147 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v148 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v290 = __p;
  char v149 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v148 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v149 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v150 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v290 = __p;
  char v151 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v150 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v151 + 56, "(com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.sffnumbers\" || com_apple_mail_attachmentTypes==\"com.apple.iwork.numbers.numbers\" || com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v152 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v290 = __p;
  v153 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v152 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v153 + 56, "(com_apple_mail_attachmentSpecificTypes=\"com.microsoft.excel.xls\" || com_apple_mail_attachmentSpecificTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v154 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v290 = __p;
  v155 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v154 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v155 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v156 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v290 = __p;
  v157 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v156 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v157 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v158 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v290 = __p;
  v159 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v158 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v159 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v160 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v290 = __p;
  v161 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v160 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v161 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v162 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v290 = __p;
  v163 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v162 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v163 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v164 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v290 = __p;
  v165 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v164 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v165 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v166 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v290 = __p;
  v167 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v166 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v167 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v168 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v290 = __p;
  v169 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v168 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v169 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v170 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v290 = __p;
  v171 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v170 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v171 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v172 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v290 = __p;
  v173 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v172 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v173 + 56, "(com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v174 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v290 = __p;
  v175 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v174 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v175 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v176 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v290 = __p;
  v177 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v176 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v177 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v178 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v290 = __p;
  v179 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v178 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v179 + 56, "(com_apple_mail_attachmentKinds=\"PDF*\"cwd || com_apple_mail_attachmentTypes=\"public.presentation\" || com_apple_mail_attachmentTypes=\"public.spreadsheet\" || com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.word*\"cwd || com_apple_mail_attachmentTypes=\"public.plain-text\" || com_apple_mail_attachmentTypes=\"public.rtf\")");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v180 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v290 = __p;
  v181 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v180 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v181 + 56, "(com_apple_mail_attachmentTypes=\"com.microsoft.word.doc\" || com_apple_mail_attachmentTypes=\"com.apple.iwork.pages.*\" || com_apple_mail_attachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v182 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v290 = __p;
  v183 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v182 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v183 + 56, "(com_apple_mail_attachmentTypes=\"com.apple.iwork*\"cwd || com_apple_mail_attachmentTypes=\"com.microsoft.*\"cwd || com_apple_mail_attachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v184 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v290 = __p;
  v185 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v184 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v185 + 56, "(com_apple_mail_attachmentSpecificTypes=\"microsoft.word.doc*\"cwd || com_apple_mail_attachmentSpecificTypes=\"openxmlformats.word*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v186 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v290 = __p;
  v187 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v186 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v187 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v188 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v290 = __p;
  v189 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v188 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v189 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v190 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v290 = __p;
  v191 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v190 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v191 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v192 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v290 = __p;
  v193 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v192 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v193 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.plain-text\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v194 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v290 = __p;
  v195 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v194 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v195 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v196 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v290 = __p;
  v197 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v196 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v197 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v198 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v290 = __p;
  v199 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v198 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v199 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v200 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v290 = __p;
  v201 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v200 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v201 + 56, "(com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd || com_apple_mail_attachmentSpecificTypes=\"rtf*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v202 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v290 = __p;
  v203 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v202 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v203 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v204 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v290 = __p;
  v205 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v204 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v205 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v206 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v290 = __p;
  v207 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v206 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v207 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v208 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v290 = __p;
  v209 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v208 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v209 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v210 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v290 = __p;
  v211 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v210 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v211 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v212 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v290 = __p;
  v213 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v212 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v213 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v214 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v290 = __p;
  v215 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v214 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v215 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v216 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v290 = __p;
  v217 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v216 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v217 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v218 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v290 = __p;
  v219 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v218 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v219 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v220 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v290 = __p;
  v221 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v220 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v221 + 56, "com_apple_mail_attachmentKinds=\"*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v222 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v290 = __p;
  v223 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v222 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v223 + 56, "(com_apple_mail_attachmentSpecificTypes=\"tar*\"cwd || com_apple_mail_attachmentSpecificTypes=\"zip*\"cwd)");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v224 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v290 = __p;
  v225 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v224 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v225 + 56, "com_apple_mail_attachmentSpecificTypes=\"java*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v226 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v290 = __p;
  v227 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v226 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v227 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v228 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v290 = __p;
  v229 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v228 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v229 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v230 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v290 = __p;
  v231 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v230 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v231 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v232 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v290 = __p;
  v233 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v232 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v233 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v234 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v290 = __p;
  v235 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v234 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v235 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v236 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v290 = __p;
  v237 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v236 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v237 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v238 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v290 = __p;
  v239 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v238 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v239 + 56, "com_apple_mail_attachmentTypes=\"public.calendar-event\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v240 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v290 = __p;
  v241 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v240 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v241 + 56, "com_apple_mail_attachmentSpecificTypes=\"*ics*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v242 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v290 = __p;
  v243 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v242 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v243 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v244 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v290 = __p;
  v245 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v244 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v245 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v246 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v290 = __p;
  v247 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v246 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v247 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v248 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v290 = __p;
  v249 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v248 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v249 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v250 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v290 = __p;
  v251 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v250 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v251 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v252 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v290 = __p;
  v253 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v252 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v253 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v254 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v290 = __p;
  v255 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v254 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v255 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v256 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v290 = __p;
  v257 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v256 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v257 + 56, "com_apple_mail_attachmentSpecificTypes=\"public.vcard\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v258 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v290 = __p;
  v259 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v258 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v259 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v260 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v290 = __p;
  v261 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v260 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v261 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v262 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v290 = __p;
  v263 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v262 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v263 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v264 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v290 = __p;
  v265 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v264 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v265 + 56, "com_apple_mail_attachmentTypes=\"com.apple.pkpass\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v266 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v290 = __p;
  v267 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v266 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v267 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v268 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v290 = __p;
  v269 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v268 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v269 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v270 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v290 = __p;
  v271 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v270 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v271 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v272 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v290 = __p;
  v273 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v272 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v273 + 56, "com_apple_mail_attachmentKinds=\"PDF*\"cwd");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v274 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v290 = __p;
  v275 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v274 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v275 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v276 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v290 = __p;
  v277 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v276 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v277 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v278 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v290 = __p;
  v279 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v278 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v279 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v280 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v290 = __p;
  v281 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v280 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v281 + 56, "com_apple_mail_attachmentKinds=\"org.idpf.epub-container\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHED");
  __p[0] = v288;
  v282 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v290 = __p;
  char v283 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v282 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v283 + 56, "com_apple_mail_attachmentNames=\"%@c\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v288, "ATTACHMOD");
  __p[0] = v288;
  v284 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v288, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v290 = __p;
  char v285 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v284 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v290);
  MEMORY[0x1A625AE00]((char *)v285 + 56, "com_apple_mail_attachmentNames=\"%@c\"");
  if (v287 < 0) {
    operator delete(__p[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
}

void sub_1A434AA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateMailTransportTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILMAILSENT");
  __p[0] = v62;
  CFStringRef v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.HasSent");
  uint64_t v64 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILMAILSENT");
  __p[0] = v62;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SENTMOD.SentEvent");
  uint64_t v64 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILMAILSENT");
  __p[0] = v62;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasAuthored");
  uint64_t v64 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILMAILSENT");
  __p[0] = v62;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "CREATED.HasCreated");
  uint64_t v64 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "kMDItemMailboxes=\"mailbox.sent\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Airdropped");
  uint64_t v64 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.AirDrop\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Airdrop");
  uint64_t v64 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.AirDrop\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Airdropped");
  uint64_t v64 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "kMDItemUserSharedSentTransport=\"com.apple.AirDrop\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Airdrop");
  uint64_t v64 = __p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "kMDItemUserSharedSentTransport=\"com.apple.AirDrop\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Messaged");
  uint64_t v64 = __p;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.messages\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MessageClient");
  uint64_t v64 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.messages\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Messaged");
  uint64_t v64 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MessageClient");
  uint64_t v64 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "kMDItemUserSharedSentTransport=\"com.apple.messages\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Shared");
  uint64_t v64 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "(kMDItemUserSharedSentTransport=\"facebook*\"cwd || kMDItemUserSharedSentTransport=\"twitter*\"cwd)");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Sharesheet");
  uint64_t v64 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "(kMDItemUserSharedSentTransport=\"facebook*\"cwd || kMDItemUserSharedSentTransport=\"twitter*\"cwd)");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Facebook");
  uint64_t v64 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Facebooked");
  uint64_t v64 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "kMDItemUserSharedSentTransport=\"facebook*\"cwd");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Twitter");
  uint64_t v64 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "kMDItemUserSharedSentTransport=\"twitter*\"cwd");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Tweeted");
  uint64_t v64 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "kMDItemUserSharedSentTransport=\"twitter*\"cwd");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mail");
  uint64_t v64 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mailed");
  uint64_t v64 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.mail\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "RECEIVED");
  __p[0] = v62;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MailClient");
  uint64_t v64 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "kMDItemUserSharedReceivedTransport=\"com.apple.mail\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mailed");
  uint64_t v64 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "SENT");
  __p[0] = v62;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MailClient");
  uint64_t v64 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "kMDItemUserSharedSentTransport=\"com.apple.mail\"");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILRECEIVED");
  __p[0] = v62;
  char v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mail");
  uint64_t v64 = __p;
  char v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v49 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILRECEIVED");
  __p[0] = v62;
  char v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mailed");
  uint64_t v64 = __p;
  char v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v51 + 56, "(kMDItemMailboxes=\"*in*\"cwd || kMDItemWhereFroms=\"message*\"cwd)");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILRECEIVED");
  __p[0] = v62;
  CFStringRef v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MailClient");
  uint64_t v64 = __p;
  CFStringRef v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v53 + 56, "(kMDItemMailboxes=\"*in*\"cwd || kMDItemWhereFroms=\"message*\"cwd)");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILSENT");
  __p[0] = v62;
  CFRange v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mailed");
  uint64_t v64 = __p;
  CFSetRef v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v55 + 56, "(kMDItemMailboxes=\"mailbox.sent\" || kMDItemUserSharedSentTransport=\"com.apple.mail\")");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILSENT");
  __p[0] = v62;
  size_t v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.MailClient");
  uint64_t v64 = __p;
  int v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v57 + 56, "(kMDItemMailboxes=\"mailbox.sent\" || kMDItemUserSharedSentTransport=\"com.apple.mail\")");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "MAILMAILRECEIVED");
  __p[0] = v62;
  CFArrayRef v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v62, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TRANSPORT.Mail");
  uint64_t v64 = __p;
  int v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v64);
  MEMORY[0x1A625AE00]((char *)v59 + 56, "(kMDItemContentType=\"com.apple.mail.emlx\" || kMDItemContentType=\"public.email-message\")");
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
}

void sub_1A434C59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateNotesFileTypeTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFStringRef v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "NotesKind");
  v146 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "kMDItemContentType=\"com.apple.notes.spotlightrecord\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DrawingKind");
  v146 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MapKind");
  v146 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteKind");
  v146 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v146 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v146 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v146 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v146 = __p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v146 = __p;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v146 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v146 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v146 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v146 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v146 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v146 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v146 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v146 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v146 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v146 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v146 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v146 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v146 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v146 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v146 = __p;
  char v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v49 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v146 = __p;
  char v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v51 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFStringRef v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v146 = __p;
  CFStringRef v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v53 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFRange v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v146 = __p;
  CFSetRef v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v55 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  size_t v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v146 = __p;
  int v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v57 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFArrayRef v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationKind");
  v146 = __p;
  int v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v59 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  size_t v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v146 = __p;
  char v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v61 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v146 = __p;
  char v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v63 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v146 = __p;
  char v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v65 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFMutableArrayRef v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v146 = __p;
  uint64_t v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v67 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  BOOL v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v146 = __p;
  BOOL v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v69 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v146 = __p;
  uint64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v71 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v146 = __p;
  int v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v73 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v146 = __p;
  CFTypeRef v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v75 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFTypeRef v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v146 = __p;
  uint64_t v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v77 + 56, "kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  BOOL v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v146 = __p;
  uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v79 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  std::string v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v146 = __p;
  std::string v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v81 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\" || kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFTypeRef v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v146 = __p;
  uint64_t v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v83 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  std::string v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v146 = __p;
  uint64_t v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v85 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFRange v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v146 = __p;
  CFRange v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v87 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v146 = __p;
  uint64_t v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v89 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\" || kMDItemAttachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v146 = __p;
  uint64_t v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v91 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v146 = __p;
  unint64_t v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v93 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFTypeRef v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v146 = __p;
  CFArrayRef v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v95 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFStringRef v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v146 = __p;
  uint64_t v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v97 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v146 = __p;
  std::string v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v99 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  std::string v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v146 = __p;
  int v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v101 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  int v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v146 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v103 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v146 = __p;
  CFRange v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v105 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFRange v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v146 = __p;
  CFRange v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v107 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  CFRange v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v146 = __p;
  CFRange v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v109 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  int v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v146 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v111 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  int v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v146 = __p;
  char v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v113 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v146 = __p;
  uint64_t v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v115 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  BOOL v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v146 = __p;
  BOOL v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v117 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  unint64_t v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v146 = __p;
  uint64_t v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v119 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  uint64_t v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v146 = __p;
  uint64_t v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v121 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v146 = __p;
  size_t v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v123 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v146 = __p;
  unsigned __int8 v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v125 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v146 = __p;
  uint64_t v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v127 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  char v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v146 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v129 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v146 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v131 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v146 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v133 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v146 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v135 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v146 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v137 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v146 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v139 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v144, "KIND");
  __p[0] = v144;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v144, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v146 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
  MEMORY[0x1A625AE00]((char *)v141 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
}

void sub_1A434F1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void updateNotesAttachmentTranslations(uint64_t **a1)
{
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFStringRef v2 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v314 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v3 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemAttachmentTypes != \"com.apple.notes.pencilkitsketch\" && kMDItemAttachmentTypes != \"com.apple.notes.table\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  CFAllocatorRef v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attachment");
  v314 = __p;
  CFNumberRef v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v5 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemAttachmentTypes != \"com.apple.notes.pencilkitsketch\" && kMDItemAttachmentTypes != \"com.apple.notes.table\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  CFStringRef v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttached");
  v314 = __p;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v7 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemAttachmentTypes != \"com.apple.notes.pencilkitsketch\" && kMDItemAttachmentTypes != \"com.apple.notes.table\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasAttachment");
  v314 = __p;
  size_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v9 + 56, "(kMDItemAttachmentTypes=\"*\"cwd && kMDItemAttachmentTypes != \"com.apple.notes.pencilkitsketch\" && kMDItemAttachmentTypes != \"com.apple.notes.table\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v314 = __p;
  CFIndex v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v11 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFStringRef v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v314 = __p;
  CFStringRef v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v13 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFStringRef v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v314 = __p;
  long long v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v15 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  char v16 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v314 = __p;
  char v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v17 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFNumberRef v18 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v314 = __p;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v19 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  long long v20 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v314 = __p;
  CFIndex v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v21 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFStringRef v22 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v314 = __p;
  CFStringRef v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v23 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFIndex v24 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v314 = __p;
  std::string::size_type v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v25 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  char v26 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v314 = __p;
  BOOL v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v27 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  uint64_t v28 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v314 = __p;
  BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v29 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  uint64_t v30 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageKind");
  v314 = __p;
  std::string v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v31 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  CFStringRef v32 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatKind");
  v314 = __p;
  char v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v33 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  char v34 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatKind");
  v314 = __p;
  char v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v35 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  unsigned int v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatKind");
  v314 = __p;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v36 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v37 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  uint64_t v38 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatKind");
  v314 = __p;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v39 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  int v40 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ImageAttachment");
  v314 = __p;
  CFNumberRef v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v40 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v41 + 56, "kMDItemAttachmentTypes=\"public.image\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  CFNumberRef v42 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "GifImageFormatAttachment");
  v314 = __p;
  CFNumberRef v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v42 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v43 + 56, "kMDItemAttachmentTypes=\"com.compuserve.gif\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  uint64_t v44 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PngImageFormatAttachment");
  v314 = __p;
  std::string::size_type v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v45 + 56, "kMDItemAttachmentTypes=\"public.png\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  CFStringRef v46 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TiffImageFormatAttachment");
  v314 = __p;
  int v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v46 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v47 + 56, "kMDItemAttachmentTypes=\"public.tiff\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  char v48 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JpgImageFormatAttachment");
  v314 = __p;
  char v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v49 + 56, "kMDItemAttachmentTypes=\"public.jpeg\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  char v50 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v314 = __p;
  char v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v50 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v51 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFStringRef v52 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v314 = __p;
  CFStringRef v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v52 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v53 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFRange v54 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v314 = __p;
  CFSetRef v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v55 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  size_t v56 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v314 = __p;
  int v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v57 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFArrayRef v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v314 = __p;
  int v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v59 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  size_t v60 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v314 = __p;
  char v61 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v61 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  uint64_t v62 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v314 = __p;
  char v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v62 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v63 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  uint64_t v64 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v314 = __p;
  char v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v64 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v65 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  CFMutableArrayRef v66 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioKind");
  v314 = __p;
  uint64_t v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v67 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  BOOL v68 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatKind");
  v314 = __p;
  BOOL v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v68 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v69 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  uint64_t v70 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatKind");
  v314 = __p;
  uint64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v71 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  char v72 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatKind");
  v314 = __p;
  int v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v73 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  char v74 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AudioAttachment");
  v314 = __p;
  CFTypeRef v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v75 + 56, "kMDItemAttachmentTypes=\"public.audio\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  CFTypeRef v76 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AacAudioFormatAttachment");
  v314 = __p;
  uint64_t v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v76 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v77 + 56, "kMDItemAttachmentTypes=\"public.aac-audio\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  BOOL v78 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "AiffAudioFormatAttachment");
  v314 = __p;
  uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v78 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v79 + 56, "kMDItemAttachmentTypes=\"public.aif*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  std::string v80 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp3AudioFormatAttachment");
  v314 = __p;
  std::string v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v81 + 56, "kMDItemAttachmentTypes=\"public.mp3\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFTypeRef v82 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v314 = __p;
  uint64_t v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v82 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v83 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  std::string v84 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v314 = __p;
  uint64_t v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v85 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFRange v86 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v314 = __p;
  CFRange v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v87 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  char v88 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v314 = __p;
  uint64_t v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v89 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  char v90 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v314 = __p;
  uint64_t v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v90 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v91 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  uint64_t v92 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v314 = __p;
  unint64_t v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v92 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v93 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  CFTypeRef v94 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoKind");
  v314 = __p;
  CFArrayRef v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v94 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v95 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  CFStringRef v96 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatKind");
  v314 = __p;
  uint64_t v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v96 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v97 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  char v98 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatKind");
  v314 = __p;
  std::string v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v98 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v99 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  std::string v100 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VideoAttachment");
  v314 = __p;
  int v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v100 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v101 + 56, "kMDItemAttachmentTypes=\"public.movie\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  int v102 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MovVideoFormatAttachment");
  v314 = __p;
  v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v102 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v103 + 56, "kMDItemAttachmentTypes=\"com.apple.quicktime-movie\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  uint64_t v104 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Mp4VideoFormatAttachment");
  v314 = __p;
  CFRange v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v105 + 56, "kMDItemAttachmentTypes=\"com.apple.m4v-video\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFRange v106 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Presentation");
  v314 = __p;
  CFRange v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v107 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  CFRange v108 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v314 = __p;
  CFRange v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v108 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v109 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  int v110 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v314 = __p;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v110 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v111 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  int v112 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v314 = __p;
  char v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v112 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v113 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  char v114 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v314 = __p;
  uint64_t v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v114 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v115 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  BOOL v116 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v314 = __p;
  BOOL v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v116 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v117 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  unint64_t v118 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Presentation");
  v314 = __p;
  uint64_t v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v118 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v119 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  uint64_t v120 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatKind");
  v314 = __p;
  uint64_t v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v120 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v121 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v122 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatKind");
  v314 = __p;
  size_t v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v122 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v123 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  char v124 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PresentationAttachment");
  v314 = __p;
  unsigned __int8 v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v124 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v125 + 56, "(kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\" || kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  char v126 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "KeyPresentationFormatAttachment");
  v314 = __p;
  uint64_t v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v126 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v127 + 56, "kMDItemAttachmentTypes=\"com.apple.iwork.keynote.key\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  char v128 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PptPresentationFormatAttachment");
  v314 = __p;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v128 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v129 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.powerpoint.ppt\" || kMDItemAttachmentTypes=\"org.openxmlformats.presentationml.presentation\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v130 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v314 = __p;
  v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v130 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v131 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v132 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v314 = __p;
  v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v132 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v133 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v134 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v314 = __p;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v134 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v135 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v136 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v314 = __p;
  v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v136 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v137 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v138 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetKind");
  v314 = __p;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v138 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v139 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v140 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatKind");
  v314 = __p;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v140 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v141 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v142 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "SpreadsheetAttachment");
  v314 = __p;
  char v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v142 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v143 + 56, "kMDItemAttachmentTypes=\"com.apple.notes.table\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v144 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "XlsSpreadsheetFormatAttachment");
  v314 = __p;
  char v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v144 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v145 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.excel.xls\" || kMDItemAttachmentTypes=\"org.openxmlformats.spreadsheetml.sheet\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v146 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v314 = __p;
  char v147 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v146 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v147 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v148 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v314 = __p;
  char v149 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v148 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v149 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\" || kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v150 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v314 = __p;
  char v151 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v150 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v151 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v152 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v314 = __p;
  v153 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v152 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v153 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v154 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v314 = __p;
  v155 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v154 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v155 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v156 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v314 = __p;
  v157 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v156 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v157 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v158 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v314 = __p;
  v159 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v158 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v159 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v160 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v314 = __p;
  v161 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v160 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v161 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v162 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentKind");
  v314 = __p;
  v163 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v162 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v163 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v164 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentKind");
  v314 = __p;
  v165 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v164 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v165 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\" || kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"org.openxmlformats.word*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v166 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentKind");
  v314 = __p;
  v167 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v166 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v167 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v168 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatKind");
  v314 = __p;
  v169 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v168 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v169 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v170 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocumentAttachment");
  v314 = __p;
  v171 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v170 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v171 + 56, "(kMDItemAttachmentTypes=\"com.adobe.pdf\" || kMDItemAttachmentTypes=\"public.presentation\" || kMDItemAttachmentTypes=\"public.spreadsheet\" || kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.word*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd || kMDItemAttachmentTypes=\"public.plain-text\" || kMDItemAttachmentTypes=\"public.rtf\" || kMDItemAttachmentTypes=\"com.apple.notes.gallery\" || kMDItemAttachmentTypes=\"public.html\" || kMDItemAttachmentTypes=\"com.apple.rtfd\" || kMDItemAttachmentTypes=\"com.apple.flat-rtfd\" || kMDItemAttachmentTypes=\"com.apple.ibooks-container\" || kMDItemAttachmentTypes=\"com.apple.ibooks-folder\" || kMDItemAttachmentTypes=\"com.apple.ibooks\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgbook\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.book\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.pkgtemplate\" || kMDItemAttachmentTypes=\"com.apple.ibooksauthor.template\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v172 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PagesDocumentAttachment");
  v314 = __p;
  v173 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v172 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v173 + 56, "(kMDItemAttachmentTypes=\"com.microsoft.word.doc\" || kMDItemAttachmentTypes=\"com.apple.iwork.pages.*\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v174 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IworkDocumentAttachment");
  v314 = __p;
  v175 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v174 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v175 + 56, "(kMDItemAttachmentTypes=\"com.apple.iwork*\"cwd || kMDItemAttachmentTypes=\"com.microsoft.*\"cwd || kMDItemAttachmentTypes=\"org.openxmlformats*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v176 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DocDocumentFormatAttachment");
  v314 = __p;
  v177 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v176 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v177 + 56, "(kMDItemAttachmentTypes=\"microsoft.word.doc*\"cwd || kMDItemAttachmentTypes=\"openxmlformats.word*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v178 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v314 = __p;
  v179 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v178 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v179 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v180 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v314 = __p;
  v181 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v180 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v181 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v182 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatKind");
  v314 = __p;
  v183 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v182 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v183 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v184 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "RtfTextFormatAttachment");
  v314 = __p;
  v185 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v184 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v185 + 56, "kMDItemAttachmentTypes=\"rtf*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v186 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v314 = __p;
  v187 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v186 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v187 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v188 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v314 = __p;
  v189 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v188 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v189 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v190 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatKind");
  v314 = __p;
  v191 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v190 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v191 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v192 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TxtTextFormatAttachment");
  v314 = __p;
  v193 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v192 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v193 + 56, "kMDItemAttachmentTypes=\"public.plain-text\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v194 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v314 = __p;
  v195 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v194 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v195 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v196 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v314 = __p;
  v197 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v196 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v197 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v198 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v314 = __p;
  v199 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v198 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v199 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v200 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v314 = __p;
  v201 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v200 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v201 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v202 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v314 = __p;
  v203 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v202 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v203 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v204 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v314 = __p;
  v205 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v204 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v205 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v206 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileKind");
  v314 = __p;
  v207 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v206 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v207 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v208 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatKind");
  v314 = __p;
  v209 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v208 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v209 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v210 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatKind");
  v314 = __p;
  v211 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v210 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v211 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v212 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "FileAttachment");
  v314 = __p;
  v213 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v212 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v213 + 56, "kMDItemAttachmentTypes=\"*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v214 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "TarFileFormatAttachment");
  v314 = __p;
  v215 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v214 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v215 + 56, "(kMDItemAttachmentTypes=\"tar*\"cwd || kMDItemAttachmentTypes=\"zip*\"cwd)");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v216 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "JavaFileFormatAttachment");
  v314 = __p;
  v217 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v216 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v217 + 56, "kMDItemAttachmentTypes=\"java*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v218 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v314 = __p;
  v219 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v218 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v219 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v220 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v314 = __p;
  v221 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v220 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v221 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v222 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v314 = __p;
  v223 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v222 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v223 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v224 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v314 = __p;
  v225 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v224 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v225 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v226 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventKind");
  v314 = __p;
  v227 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v226 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v227 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v228 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatKind");
  v314 = __p;
  v229 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v228 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v229 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v230 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "EventAttachment");
  v314 = __p;
  v231 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v230 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v231 + 56, "kMDItemAttachmentTypes=\"public.calendar-event\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v232 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "IcsEventFormatAttachment");
  v314 = __p;
  v233 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v232 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v233 + 56, "kMDItemAttachmentTypes=\"*ics*\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v234 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v314 = __p;
  v235 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v234 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v235 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v236 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v314 = __p;
  v237 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v236 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v237 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v238 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v314 = __p;
  v239 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v238 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v239 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v240 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v314 = __p;
  v241 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v240 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v241 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v242 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsKind");
  v314 = __p;
  v243 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v242 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v243 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v244 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatKind");
  v314 = __p;
  v245 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v244 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v245 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v246 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "ContactsAttachment");
  v314 = __p;
  v247 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v246 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v247 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v248 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "VcfContactsFormatAttachment");
  v314 = __p;
  v249 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v248 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v249 + 56, "kMDItemAttachmentTypes=\"public.vcard\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v250 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v314 = __p;
  v251 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v250 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v251 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v252 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v314 = __p;
  v253 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v252 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v253 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v254 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatKind");
  v314 = __p;
  v255 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v254 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v255 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v256 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PassDocumentFormatAttachment");
  v314 = __p;
  v257 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v256 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v257 + 56, "kMDItemAttachmentTypes=\"com.apple.pkpass\"cwd");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v258 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v314 = __p;
  v259 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v258 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v259 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v260 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v314 = __p;
  v261 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v260 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v261 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v262 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatKind");
  v314 = __p;
  v263 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v262 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v263 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v264 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "PdfDocumentFormatAttachment");
  v314 = __p;
  v265 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v264 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v265 + 56, "kMDItemAttachmentTypes=\"com.adobe.pdf\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v266 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v314 = __p;
  v267 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v266 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v267 + 56, "kMDItemDisplayName =\"%@c\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "FILEATTACHED");
  __p[0] = v312;
  v268 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v314 = __p;
  v269 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v268 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v269 + 56, "kMDItemDisplayName =\"%@c\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v270 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v314 = __p;
  v271 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v270 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v271 + 56, "kMDItemDisplayName =\"%@c\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "FILEATTACHMOD");
  __p[0] = v312;
  v272 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename");
  v314 = __p;
  v273 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v272 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v273 + 56, "kMDItemDisplayName =\"%@c\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v274 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v314 = __p;
  v275 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v274 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v275 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v276 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v314 = __p;
  v277 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v276 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v277 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v278 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookKind");
  v314 = __p;
  v279 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v278 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v279 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v280 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "BookAttachment");
  v314 = __p;
  v281 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v280 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v281 + 56, "kMDItemAttachmentTypes=\"org.idpf.epub-container\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v282 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DrawingKind");
  v314 = __p;
  char v283 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v282 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v283 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v284 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DrawingAttachment");
  v314 = __p;
  char v285 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v284 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v285 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v286 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasDrawn");
  v314 = __p;
  char v287 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v286 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v287 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v288 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DrawingKind");
  v314 = __p;
  char v289 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v288 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v289 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v290 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "DrawingAttachment");
  v314 = __p;
  v291 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v290 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v291 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v292 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "HasDrawn");
  v314 = __p;
  v293 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v292 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v293 + 56, "(kMDItemAttachmentTypes=\"com.apple.notes.pencilkitsketch\" || kMDItemAttachmentTypes=\"com.apple.notes.sketch\")");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v294 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MapKind");
  v314 = __p;
  v295 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v294 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v295 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v296 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MapAttachment");
  v314 = __p;
  v297 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v296 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v297 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v298 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MapKind");
  v314 = __p;
  v299 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v298 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v299 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v300 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "MapAttachment");
  v314 = __p;
  v301 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v300 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v301 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v302 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteKind");
  v314 = __p;
  v303 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v302 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v303 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHED");
  __p[0] = v312;
  v304 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteAttachment");
  v314 = __p;
  v305 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v304 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v305 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v306 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteKind");
  v314 = __p;
  v307 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v306 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v307 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v312, "ATTACHMOD");
  __p[0] = v312;
  v308 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v312, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "WebsiteAttachment");
  v314 = __p;
  v309 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v308 + 7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v314);
  MEMORY[0x1A625AE00]((char *)v309 + 56, "kMDItemAttachmentTypes=\"public.url\"");
  if (v311 < 0) {
    operator delete(__p[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
}

void sub_1A4355378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *NL::NumericValue::upper@<X0>(NL::NumericValue *this@<X0>, std::string *a2@<X8>)
{
  if (*(void *)this) {
    return std::to_string(a2, *(_DWORD *)(*(void *)this + 8));
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    return std::to_string(a2, *(double *)(v3 + 16));
  }
  else {
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

std::string *NL::NumericValue::lower@<X0>(NL::NumericValue *this@<X0>, std::string *a2@<X8>)
{
  if (*(void *)this) {
    return std::to_string(a2, *(_DWORD *)(*(void *)this + 4));
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    return std::to_string(a2, *(double *)(v3 + 8));
  }
  else {
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

std::string *NL::NumericValue::value@<X0>(int **this@<X0>, std::string *a2@<X8>)
{
  if (*this) {
    return std::to_string(a2, **this);
  }
  uint64_t v3 = (double *)this[2];
  if (v3) {
    return std::to_string(a2, *v3);
  }
  else {
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t ___ZNK2NL14ParseAttribute17enumerateEntitiesEU13block_pointerFvRKNS_6EntityEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1A43562E8(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    CFAllocatorRef v4 = a2;
    CFNumberRef v5 = (uint64_t **)result;
    CFStringRef v6 = result + 1;
    do
    {
      BOOL result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      unint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          unint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          CFAllocatorRef v4 = (const void **)v8;
        }
        while (!v9);
      }
      CFAllocatorRef v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  CFStringRef v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1A4356410(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  BOOL result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    CFStringRef v6 = a2;
  }
  else {
    CFStringRef v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      CFStringRef v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            size_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            size_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *size_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            CFStringRef v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *CFStringRef v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        CFStringRef v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *CFStringRef v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5B36030, MEMORY[0x1E4FBA1C8]);
}

void sub_1A43567FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void nlp::CFScopedPtr<__CFNumber const*>::reset(const void **a1, const void *a2)
{
  size_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    CFStringRef v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,NLSearchParseResultModifier>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,NLSearchParseResultModifier>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    CFStringRef v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    CFStringRef v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1A4356AE8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    size_t v4 = a2;
    size_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      BOOL result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          size_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      size_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  int v6 = std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1A4356C78(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1A4356D0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::map<std::string,NLSearchParseResultModifier>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,NLSearchParseResultModifier>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,NLSearchParseResultModifier>,std::__tree_node<std::__value_type<std::string,NLSearchParseResultModifier>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1A4356DC0(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,NLSearchParseResultModifier>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,NLSearchParseResultModifier>,std::__tree_node<std::__value_type<std::string,NLSearchParseResultModifier>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      BOOL result = std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,NLSearchParseResultModifier> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,NLSearchParseResultModifier> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  long long v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  BOOL result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__construct_node<std::pair<std::string const,NLSearchParseResultModifier> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__construct_node<std::pair<std::string const,NLSearchParseResultModifier> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1A4356F74(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    long long v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void nlp::CFScopedPtr<__CFAttributedString *>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFSet const*>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  long long v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 7) = v7 + 4;
    char v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  long long v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 7) = v7 + 4;
    char v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,NLSearchParseResultModifier>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,NLSearchParseResultModifier>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,NLSearchParseResultModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,NLSearchParseResultModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NLSearchParseResultModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  long long v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t _CFInit_EmojiPredictorWrapper(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF7CCD50;
  return result;
}

uint64_t createEmojiPredictorWrapper(NLEmojiGenerator *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_EmojiPredictorWrapper)
  {
    qword_1EC023D68 = 0;
    unk_1EC023D78 = 0u;
    unk_1EC023D88 = 0u;
    g_CFTypeID_EmojiPredictorWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  return result;
}

void NLEmojiPredictorCreate()
{
}

#error "1A4357508: call analysis failed (funcsize=42)"

__CFArray *NLEmojiPredictorCreateCandidatesForString(uint64_t a1, const __CFString *a2)
{
  if (a1 && a2) {
    return NLEmojiGenerator::createEmojisForString(*(NLEmojiGenerator **)(a1 + 24), a2);
  }
  else {
    return 0;
  }
}

void EmojiPredictorWrapper::~EmojiPredictorWrapper(EmojiPredictorWrapper *this)
{
  EmojiPredictorWrapper::~EmojiPredictorWrapper(this);

  JUMPOUT(0x1A625B130);
}

{
  NLEmojiGenerator *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CCD50;
  CFStringRef v2 = (NLEmojiGenerator *)*((void *)this + 1);
  if (v2)
  {
    NLEmojiGenerator::~NLEmojiGenerator(v2);
    MEMORY[0x1A625B130]();
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void NLGujaratiOrthographyChecker::NLGujaratiOrthographyChecker(NLGujaratiOrthographyChecker *this)
{
  *(void *)this = &unk_1EF7CD918;
  *((void *)this + 1) = @"઼";
  *((void *)this + 2) = @"‍";
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, @"ઁ");
  CFStringAppend(Mutable, @"ં");
  CFStringAppend(Mutable, @"઼");
  CFStringAppend(Mutable, @"ા");
  CFStringAppend(Mutable, @"િ");
  CFStringAppend(Mutable, @"ી");
  CFStringAppend(Mutable, @"ુ");
  CFStringAppend(Mutable, @"ૂ");
  CFStringAppend(Mutable, @"ૃ");
  CFStringAppend(Mutable, @"ૄ");
  CFStringAppend(Mutable, @"ૅ");
  CFStringAppend(Mutable, @"ે");
  CFStringAppend(Mutable, @"ૈ");
  CFStringAppend(Mutable, @"ૉ");
  CFStringAppend(Mutable, @"ો");
  CFStringAppend(Mutable, @"ૌ");
  CFStringAppend(Mutable, @"્");
  *((void *)this + 3) = CFCharacterSetCreateWithCharactersInString(0, Mutable);
  CFRelease(Mutable);
  CFMutableStringRef v3 = CFStringCreateMutable(0, 0);
  CFStringAppend(v3, @"ઋ");
  CFStringAppend(v3, @"ક");
  CFStringAppend(v3, @"ખ");
  CFStringAppend(v3, @"ગ");
  CFStringAppend(v3, @"ઘ");
  CFStringAppend(v3, @"ઙ");
  CFStringAppend(v3, @"ચ");
  CFStringAppend(v3, @"છ");
  CFStringAppend(v3, @"જ");
  CFStringAppend(v3, @"ઝ");
  CFStringAppend(v3, @"ઞ");
  CFStringAppend(v3, @"ટ");
  CFStringAppend(v3, @"ઠ");
  CFStringAppend(v3, @"ડ");
  CFStringAppend(v3, @"ઢ");
  CFStringAppend(v3, @"ણ");
  CFStringAppend(v3, @"ત");
  CFStringAppend(v3, @"થ");
  CFStringAppend(v3, @"દ");
  CFStringAppend(v3, @"ધ");
  CFStringAppend(v3, @"ન");
  CFStringAppend(v3, @"પ");
  CFStringAppend(v3, @"ફ");
  CFStringAppend(v3, @"બ");
  CFStringAppend(v3, @"ભ");
  CFStringAppend(v3, @"મ");
  CFStringAppend(v3, @"ય");
  CFStringAppend(v3, @"ર");
  CFStringAppend(v3, @"લ");
  CFStringAppend(v3, @"ળ");
  CFStringAppend(v3, @"વ");
  CFStringAppend(v3, @"શ");
  CFStringAppend(v3, @"ષ");
  CFStringAppend(v3, @"સ");
  CFStringAppend(v3, @"હ");
  *((void *)this + 4) = CFCharacterSetCreateWithCharactersInString(0, v3);
  CFRelease(v3);
  CFMutableStringRef v4 = CFStringCreateMutable(0, 0);
  CFStringAppend(v4, @"ઙ");
  CFStringAppend(v4, @"ઞ");
  CFStringAppend(v4, @"ણ");
  CFStringAppend(v4, @"ન");
  CFStringAppend(v4, @"મ");
  *((void *)this + 5) = CFCharacterSetCreateWithCharactersInString(0, v4);
  CFRelease(v4);
  CFMutableStringRef v5 = CFStringCreateMutable(0, 0);
  CFStringAppend(v5, @"ક");
  CFStringAppend(v5, @"ખ");
  CFStringAppend(v5, @"ગ");
  CFStringAppend(v5, @"ઘ");
  CFStringAppend(v5, @"ઙ");
  *((void *)this + 6) = CFCharacterSetCreateWithCharactersInString(0, v5);
  CFRelease(v5);
  CFMutableStringRef v6 = CFStringCreateMutable(0, 0);
  CFStringAppend(v6, @"ચ");
  CFStringAppend(v6, @"છ");
  CFStringAppend(v6, @"જ");
  CFStringAppend(v6, @"ઝ");
  CFStringAppend(v6, @"ઞ");
  *((void *)this + 7) = CFCharacterSetCreateWithCharactersInString(0, v6);
  CFRelease(v6);
  CFMutableStringRef v7 = CFStringCreateMutable(0, 0);
  CFStringAppend(v7, @"ટ");
  CFStringAppend(v7, @"ઠ");
  CFStringAppend(v7, @"ડ");
  CFStringAppend(v7, @"ઢ");
  CFStringAppend(v7, @"ણ");
  *((void *)this + 8) = CFCharacterSetCreateWithCharactersInString(0, v7);
  CFRelease(v7);
  CFMutableStringRef v8 = CFStringCreateMutable(0, 0);
  CFStringAppend(v8, @"ટ");
  CFStringAppend(v8, @"ઠ");
  CFStringAppend(v8, @"ડ");
  CFStringAppend(v8, @"ઢ");
  CFStringAppend(v8, @"ણ");
  CFStringAppend(v8, @"ય");
  CFStringAppend(v8, @"વ");
  CFStringAppend(v8, @"શ");
  CFStringAppend(v8, @"ષ");
  CFStringAppend(v8, @"સ");
  CFStringAppend(v8, @"હ");
  *((void *)this + 9) = CFCharacterSetCreateWithCharactersInString(0, v8);
  CFRelease(v8);
  CFStringRef v9 = CFStringCreateMutable(0, 0);
  *((void *)this + 1nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = CFCharacterSetCreateWithCharactersInString(0, v9);
  CFRelease(v9);
  CFMutableStringRef v10 = CFStringCreateMutable(0, 0);
  CFStringAppend(v10, @"અ");
  CFStringAppend(v10, @"આ");
  CFStringAppend(v10, @"ઇ");
  CFStringAppend(v10, @"ઈ");
  CFStringAppend(v10, @"ઉ");
  CFStringAppend(v10, @"ઊ");
  CFStringAppend(v10, @"ઋ");
  CFStringAppend(v10, @"ઍ");
  CFStringAppend(v10, @"એ");
  CFStringAppend(v10, @"ઐ");
  CFStringAppend(v10, @"ઑ");
  CFStringAppend(v10, @"ઓ");
  CFStringAppend(v10, @"ઔ");
  *((void *)this + 11) = CFCharacterSetCreateWithCharactersInString(0, v10);
  CFRelease(v10);
  CFMutableStringRef v11 = CFStringCreateMutable(0, 0);
  CFStringAppend(v11, @"ઁ");
  CFStringAppend(v11, @"ં");
  CFStringAppend(v11, @"ઃ");
  CFStringAppend(v11, @"અ");
  CFStringAppend(v11, @"આ");
  CFStringAppend(v11, @"ઇ");
  CFStringAppend(v11, @"ઈ");
  CFStringAppend(v11, @"ઉ");
  CFStringAppend(v11, @"ઊ");
  CFStringAppend(v11, @"ઋ");
  CFStringAppend(v11, @"ઍ");
  CFStringAppend(v11, @"એ");
  CFStringAppend(v11, @"ઐ");
  CFStringAppend(v11, @"ઑ");
  CFStringAppend(v11, @"ઓ");
  CFStringAppend(v11, @"ઔ");
  CFStringAppend(v11, @"ક");
  CFStringAppend(v11, @"ખ");
  CFStringAppend(v11, @"ગ");
  CFStringAppend(v11, @"ઘ");
  CFStringAppend(v11, @"ઙ");
  CFStringAppend(v11, @"ચ");
  CFStringAppend(v11, @"છ");
  CFStringAppend(v11, @"જ");
  CFStringAppend(v11, @"ઝ");
  CFStringAppend(v11, @"ઞ");
  CFStringAppend(v11, @"ટ");
  CFStringAppend(v11, @"ઠ");
  CFStringAppend(v11, @"ડ");
  CFStringAppend(v11, @"ઢ");
  CFStringAppend(v11, @"ણ");
  CFStringAppend(v11, @"ત");
  CFStringAppend(v11, @"થ");
  CFStringAppend(v11, @"દ");
  CFStringAppend(v11, @"ધ");
  CFStringAppend(v11, @"ન");
  CFStringAppend(v11, @"પ");
  CFStringAppend(v11, @"ફ");
  CFStringAppend(v11, @"બ");
  CFStringAppend(v11, @"ભ");
  CFStringAppend(v11, @"મ");
  CFStringAppend(v11, @"ય");
  CFStringAppend(v11, @"ર");
  CFStringAppend(v11, @"લ");
  CFStringAppend(v11, @"ળ");
  CFStringAppend(v11, @"વ");
  CFStringAppend(v11, @"શ");
  CFStringAppend(v11, @"ષ");
  CFStringAppend(v11, @"સ");
  CFStringAppend(v11, @"હ");
  CFStringAppend(v11, @"઼");
  CFStringAppend(v11, @"ઽ");
  CFStringAppend(v11, @"ા");
  CFStringAppend(v11, @"િ");
  CFStringAppend(v11, @"ી");
  CFStringAppend(v11, @"ુ");
  CFStringAppend(v11, @"ૂ");
  CFStringAppend(v11, @"ૃ");
  CFStringAppend(v11, @"ૄ");
  CFStringAppend(v11, @"ૅ");
  CFStringAppend(v11, @"ે");
  CFStringAppend(v11, @"ૈ");
  CFStringAppend(v11, @"ૉ");
  CFStringAppend(v11, @"ો");
  CFStringAppend(v11, @"ૌ");
  CFStringAppend(v11, @"્");
  CFStringAppend(v11, @"૦");
  CFStringAppend(v11, @"૧");
  CFStringAppend(v11, @"૨");
  CFStringAppend(v11, @"૩");
  CFStringAppend(v11, @"૪");
  CFStringAppend(v11, @"૫");
  CFStringAppend(v11, @"૬");
  CFStringAppend(v11, @"૭");
  CFStringAppend(v11, @"૮");
  CFStringAppend(v11, @"૯");
  CFCharacterSetRef v12 = CFCharacterSetCreateWithCharactersInString(0, v11);
  *((void *)this + 12) = CFCharacterSetCreateInvertedSet(0, v12);
  CFRelease(v12);
  CFRelease(v11);
}

void sub_1A4358290(_Unwind_Exception *a1)
{
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v1);
  _Unwind_Resume(a1);
}

void NLGujaratiOrthographyChecker::~NLGujaratiOrthographyChecker(CFTypeRef *this)
{
  *this = &unk_1EF7CD918;
  CFRelease(this[1]);
  CFRelease(this[2]);
  CFRelease(this[3]);
  CFRelease(this[4]);
  CFRelease(this[5]);
  CFRelease(this[6]);
  CFRelease(this[7]);
  CFRelease(this[8]);
  CFRelease(this[9]);
  CFRelease(this[10]);
  CFRelease(this[11]);
  CFRelease(this[12]);

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)this);
}

{
  uint64_t vars8;

  NLGujaratiOrthographyChecker::~NLGujaratiOrthographyChecker(this);

  JUMPOUT(0x1A625B130);
}

BOOL NLGujaratiOrthographyChecker::isVowelSign(NLGujaratiOrthographyChecker *this, const __CFString *a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, @"ઽ");
  CFStringAppend(Mutable, @"ા");
  CFStringAppend(Mutable, @"િ");
  CFStringAppend(Mutable, @"ી");
  CFStringAppend(Mutable, @"ુ");
  CFStringAppend(Mutable, @"ૂ");
  CFStringAppend(Mutable, @"ૃ");
  CFStringAppend(Mutable, @"ૄ");
  CFStringAppend(Mutable, @"ૅ");
  CFStringAppend(Mutable, @"ે");
  CFStringAppend(Mutable, @"ૈ");
  CFStringAppend(Mutable, @"ૉ");
  CFStringAppend(Mutable, @"ો");
  CFStringAppend(Mutable, @"ૌ");
  CFCharacterSetRef v4 = CFCharacterSetCreateWithCharactersInString(0, Mutable);
  CFCharacterSetRef InvertedSet = CFCharacterSetCreateInvertedSet(0, v4);
  CFRelease(Mutable);
  CFRelease(v4);
  v8.length = CFStringGetLength(a2) - 1;
  v8.location = 0;
  BOOL v6 = CFStringFindCharacterFromSet(a2, InvertedSet, v8, 0, 0) == 0;
  CFRelease(InvertedSet);
  return v6;
}

BOOL NLGujaratiOrthographyChecker::canCandrabinduFollowVowelSign(NLGujaratiOrthographyChecker *this, CFStringRef theString1)
{
  return CFEqual(theString1, @"ા")
      || CFEqual(theString1, @"ુ")
      || CFEqual(theString1, @"ૂ");
}

BOOL NLGujaratiOrthographyChecker::canViramaFollowLetter(CFStringRef *this, CFStringRef theString1)
{
  if (CFEqual(theString1, this[1])) {
    return 1;
  }
  CFCharacterSetRef v4 = (const __CFCharacterSet *)this[4];
  UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString1, 0);
  return CFCharacterSetIsCharacterMember(v4, CharacterAtIndex) != 0;
}

BOOL NLGujaratiOrthographyChecker::canViramaPrecedeLetter(NLGujaratiOrthographyChecker *this, CFStringRef theString)
{
  CFCharacterSetRef v4 = (const __CFCharacterSet *)*((void *)this + 4);
  UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString, 0);
  return CFCharacterSetIsCharacterMember(v4, CharacterAtIndex)
      || CFEqual(theString, *((CFStringRef *)this + 2));
}

CFMutableStringRef NLGujaratiOrthographyChecker::stringByCorrectingIllegalVowelLetters(NLGujaratiOrthographyChecker *this, const __CFString *a2)
{
  v14[0] = 0;
  v14[1] = 0;
  CFCharacterSetRef v12 = @"અા";
  char v13 = (uint64_t *)v14;
  long long v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = @"આ";
  CFCharacterSetRef v12 = @"અો";
  long long v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = @"ઓ";
  CFCharacterSetRef v12 = @"અાે";
  long long v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = @"ઓ";
  CFCharacterSetRef v12 = @"આે";
  long long v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = @"ઓ";
  CFCharacterSetRef v12 = @"અૌ";
  long long v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = @"ઔ";
  CFCharacterSetRef v12 = @"અાૈ";
  long long v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = @"ઔ";
  CFCharacterSetRef v12 = @"આૈ";
  long long v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = @"ઔ";
  CFCharacterSetRef v12 = @"અૈ";
  long long v15 = &v12;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(&v13, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = @"ઐ";
  CFIndex Length = CFStringGetLength(a2);
  MutableCFStringRef Copy = CFStringCreateMutableCopy(0, Length, a2);
  CFMutableStringRef v5 = v13;
  if (v13 != (uint64_t *)v14)
  {
    do
    {
      CFStringRef v6 = (const __CFString *)v5[5];
      CFRange v7 = CFStringFind(MutableCopy, (CFStringRef)v5[4], 0);
      if (v7.length >= 1) {
        CFStringReplace(MutableCopy, v7, v6);
      }
      CFRange v8 = (uint64_t *)v5[1];
      if (v8)
      {
        do
        {
          CFStringRef v9 = v8;
          CFRange v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          CFStringRef v9 = (uint64_t *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          CFMutableStringRef v5 = v9;
        }
        while (!v10);
      }
      CFMutableStringRef v5 = v9;
    }
    while (v9 != (uint64_t *)v14);
  }
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)&v13, v14[0]);
  return MutableCopy;
}

void sub_1A4358910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

BOOL NLGujaratiOrthographyChecker::checkSpelling(NLGujaratiOrthographyChecker *this, CFStringRef theString, __CFString **a3, const __CFString **a4)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(theString);
  CFRange result = (CFRange)xmmword_1A43F6B90;
  v74.CFIndex location = 0;
  v74.length = Length;
  if (!CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 3), v74, 0, &result))
  {
LABEL_18:
    CFRange result = (CFRange)xmmword_1A43F6B90;
    v77.CFIndex location = 0;
    v77.length = Length;
    if (CFStringFindWithOptions(theString, *((CFStringRef *)this + 1), v77, 0, &result))
    {
      if (result.location)
      {
        v78.CFIndex location = result.location - 1;
        v78.length = 1;
        CFStringRef v12 = CFStringCreateWithSubstring(0, theString, v78);
        if (v12) {
          CFRelease(v12);
        }
      }
      BOOL v13 = 0;
      CFStringRef v14 = @"illegal nukta placement";
      goto LABEL_133;
    }
    CFRange result = (CFRange)xmmword_1A43F6B90;
    v79.CFIndex location = 0;
    v79.length = Length;
    if (CFStringFindWithOptions(theString, @"્", v79, 0, &result))
    {
      do
      {
        if (!result.location)
        {
LABEL_48:
          BOOL v13 = 0;
          CFStringRef v14 = @"illegal virama placement";
          goto LABEL_133;
        }
        v80.CFIndex location = result.location - 1;
        v80.length = 1;
        CFStringRef v15 = CFStringCreateWithSubstring(0, theString, v80);
        if (result.location + 1 >= Length)
        {
          CFStringRef v16 = 0;
          if (!NLGujaratiOrthographyChecker::canViramaFollowLetter((CFStringRef *)this, v15))
          {
LABEL_44:
            if (v15) {
              CFRelease(v15);
            }
            if (v16) {
              CFRelease(v16);
            }
            goto LABEL_48;
          }
        }
        else
        {
          v81.length = 1;
          v81.CFIndex location = result.location + 1;
          CFStringRef v16 = CFStringCreateWithSubstring(0, theString, v81);
          if (!NLGujaratiOrthographyChecker::canViramaFollowLetter((CFStringRef *)this, v15)) {
            goto LABEL_44;
          }
          if (v16)
          {
            if (!NLGujaratiOrthographyChecker::canViramaPrecedeLetter(this, v16)) {
              goto LABEL_44;
            }
            char v17 = 0;
            if (!v15) {
              goto LABEL_34;
            }
LABEL_33:
            CFRelease(v15);
            goto LABEL_34;
          }
        }
        char v17 = 1;
        if (v15) {
          goto LABEL_33;
        }
LABEL_34:
        if ((v17 & 1) == 0) {
          CFRelease(v16);
        }
        v82.CFIndex location = result.length + result.location;
        v82.length = Length - (result.length + result.location);
      }
      while (CFStringFindWithOptions(theString, @"્", v82, 0, &result));
    }
    CFNumberRef v18 = (const __CFString **)a3;
    if (a3) {
      CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    }
    else {
      CFMutableStringRef Mutable = 0;
    }
    CFIndex v20 = CFStringGetLength(theString);
    v83.CFIndex location = 0;
    v83.length = v20;
    uint64_t v64 = a4;
    CFStringRef v14 = 0;
    if (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 5), v83, 0, &range))
    {
      char v21 = 1;
      while (1)
      {
        if (range.location + 2 >= v20 || CFStringGetCharacterAtIndex(theString, range.location + 1) != 2765) {
          goto LABEL_85;
        }
        int CharacterAtIndex = CFStringGetCharacterAtIndex(theString, range.location);
        UniChar v23 = CFStringGetCharacterAtIndex(theString, range.location + 2);
        if (CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 10), v23)) {
          BOOL v24 = 1;
        }
        else {
          BOOL v24 = range.location + 3 < v20 && CFStringGetCharacterAtIndex(theString, range.location + 3) == 2748;
        }
        if (CharacterAtIndex > 2722)
        {
          if (CharacterAtIndex == 2723)
          {
            if (v24) {
              goto LABEL_81;
            }
            CFCharacterSetRef v25 = (const __CFCharacterSet *)*((void *)this + 9);
LABEL_77:
            if (((CFCharacterSetIsCharacterMember(v25, v23) != 0) & v21) == 0) {
              goto LABEL_81;
            }
            goto LABEL_78;
          }
          if (CharacterAtIndex == 2728
            && (CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 6), v23)
             || CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 7), v23)
             || CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 8), v23))
            && (range.location < 1 || CFStringGetCharacterAtIndex(theString, range.location) != 2765))
          {
            if (Mutable)
            {
              CFRange result = (CFRange)xmmword_1E5B365E8;
              char v72 = @"replacement";
              CFIndex valuePtr = range.location;
              uint64_t v68 = 2;
              CFNumberRef v26 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
              CFNumberRef v27 = CFNumberCreate(0, kCFNumberCFIndexType, &v68);
              values[0] = v26;
              values[1] = v27;
              values[2] = @"ं";
              CFStringRef v28 = v14;
              CFDictionaryRef v29 = CFDictionaryCreate(0, (const void **)&result, (const void **)values, 3, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
              CFRelease(v26);
              CFRelease(v27);
              CFArrayAppendValue(Mutable, v29);
              CFDictionaryRef v30 = v29;
              CFStringRef v14 = v28;
              CFRelease(v30);
            }
LABEL_81:
            if (!v14)
            {
              v84.CFIndex location = range.location;
              v84.length = 3;
              CFStringRef v31 = CFStringCreateWithSubstring(0, theString, v84);
              CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"invalid nasal combination '%@'", v31);
              CFRelease(v31);
            }
            a4 = v64;
            if (!Mutable) {
              goto LABEL_132;
            }
            char v21 = 0;
            goto LABEL_85;
          }
        }
        else
        {
          if (CharacterAtIndex == 2713)
          {
            if (v24) {
              goto LABEL_81;
            }
            CFCharacterSetRef v25 = (const __CFCharacterSet *)*((void *)this + 6);
            goto LABEL_77;
          }
          if (CharacterAtIndex == 2718)
          {
            if (v24) {
              goto LABEL_81;
            }
            CFCharacterSetRef v25 = (const __CFCharacterSet *)*((void *)this + 7);
            goto LABEL_77;
          }
        }
        if ((v21 & 1) == 0) {
          goto LABEL_81;
        }
LABEL_78:
        char v21 = 1;
        a4 = v64;
LABEL_85:
        if (v20 > range.location + 1)
        {
          v85.CFIndex location = range.location + 1;
          v85.length = v20 - (range.location + 1);
          if (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 5), v85, 0, &range)) {
            continue;
          }
        }
        char v63 = v21;
        CFNumberRef v18 = (const __CFString **)a3;
        if (!Mutable) {
          goto LABEL_101;
        }
        goto LABEL_91;
      }
    }
    if (!Mutable) {
      goto LABEL_144;
    }
    char v63 = 1;
LABEL_91:
    if (CFArrayGetCount(Mutable) >= 1)
    {
      CFStringRef v61 = v14;
      theStringa = CFStringCreateMutableCopy(0, 0, theString);
      CFIndex Count = CFArrayGetCount(Mutable);
      if (Count >= 1)
      {
        unint64_t v33 = Count + 1;
        do
        {
          char v34 = Mutable;
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v33 - 2);
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"range.location");
          CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"range.length");
          CFRange result = (CFRange)xmmword_1A43F6B80;
          CFNumberGetValue(Value, kCFNumberCFIndexType, &result);
          CFNumberGetValue(v37, kCFNumberCFIndexType, &result.length);
          CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"replacement");
          v39.CFIndex location = result.location;
          if (result.location != -1)
          {
            v39.length = result.length;
            if (result.length >= 1)
            {
              if (v38) {
                CFStringReplace(theStringa, v39, v38);
              }
            }
          }
          --v33;
          CFMutableStringRef Mutable = v34;
        }
        while (v33 > 1);
      }
      CFNumberRef v18 = (const __CFString **)a3;
      *a3 = theStringa;
      a4 = v64;
      CFStringRef v14 = v61;
    }
    CFRelease(Mutable);
LABEL_101:
    if (v63)
    {
LABEL_144:
      CFCharacterSetRef Copy = CFCharacterSetCreateCopy(0, *((CFCharacterSetRef *)this + 11));
      CFCharacterSetRef v41 = CFCharacterSetCreateCopy(0, *((CFCharacterSetRef *)this + 3));
      CFCharacterSetRef v42 = CFCharacterSetCreateWithCharactersInString(0, @"ઁં");
      CFIndex v43 = CFStringGetLength(theString);
      v86.CFIndex location = 0;
      v86.length = v43;
      if (CFStringFindCharacterFromSet(theString, Copy, v86, 0, &result))
      {
        CFStringRef v62 = v14;
        while (1)
        {
          if (result.location + 1 < v43)
          {
            UniChar v44 = CFStringGetCharacterAtIndex(theString, result.location + 1);
            if (CFCharacterSetIsCharacterMember(v41, v44))
            {
              IsCharacterMember = (NLGujaratiOrthographyChecker *)CFCharacterSetIsCharacterMember(v42, v44);
              if (!IsCharacterMember) {
                break;
              }
            }
          }
          v87.CFIndex location = result.length + result.location;
          v87.length = v43 - (result.length + result.location);
          if (!CFStringFindCharacterFromSet(theString, Copy, v87, 0, &result))
          {
            int v46 = 1;
            CFStringRef v14 = v62;
            goto LABEL_113;
          }
        }
        int v46 = 0;
        if (v18) {
          *CFNumberRef v18 = NLGujaratiOrthographyChecker::stringByCorrectingIllegalVowelLetters(IsCharacterMember, theString);
        }
        CFStringRef v14 = @"illegal diacritic after vowel letter";
      }
      else
      {
        int v46 = 1;
      }
LABEL_113:
      CFRelease(Copy);
      CFRelease(v41);
      CFRelease(v42);
      if (v46)
      {
        CFIndex v47 = CFStringGetLength(theString);
        MutableCFCharacterSetRef Copy = CFStringCreateMutableCopy(0, v47, theString);
        CFRange v49 = CFStringFind(MutableCopy, @"‌", 0);
        if (v49.length >= 1) {
          CFStringReplace(MutableCopy, v49, &stru_1EF7CF078);
        }
        CFComparisonResult v50 = CFStringCompare(MutableCopy, theString, 0);
        CFComparisonResult v51 = v50;
        if (v18 && v50) {
          *CFNumberRef v18 = MutableCopy;
        }
        if (MutableCopy)
        {
          CFRelease(MutableCopy);
          if (v51)
          {
LABEL_121:
            BOOL v13 = 0;
            CFStringRef v14 = @"invalid: ZWNJ present";
            goto LABEL_133;
          }
        }
        else if (v50)
        {
          goto LABEL_121;
        }
        CFStringRef v52 = (const __CFString *)*((void *)this + 2);
        v88.length = CFStringGetLength(theString);
        v88.CFIndex location = 0;
        if (!CFStringFindWithOptions(theString, v52, v88, 0, &result))
        {
          v91.length = CFStringGetLength(theString);
          v91.CFIndex location = 0;
          int CharacterFromSet = CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 12), v91, 0, &result);
          BOOL v13 = CharacterFromSet == 0;
          if (CharacterFromSet)
          {
            CFStringRef v60 = CFStringCreateWithSubstring(0, theString, result);
            CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"invalid letter '%@'", v60);
            CFRelease(v60);
          }
          goto LABEL_133;
        }
        do
        {
          if (result.location)
          {
            v89.length = result.location - 1;
            v89.CFIndex location = 0;
            CFStringRef v53 = CFStringCreateWithSubstring(0, theString, v89);
            CFRelease(v53);
          }
          CFStringRef v54 = (const __CFString *)*((void *)this + 2);
          v90.length = CFStringGetLength(theString);
          v90.CFIndex location = 0;
        }
        while (CFStringFindWithOptions(theString, v54, v90, 0, &result));
        if (v18)
        {
          CFIndex v55 = CFStringGetLength(theString);
          CFMutableStringRef v56 = CFStringCreateMutableCopy(0, v55, theString);
          CFRange v57 = CFStringFind(v56, (CFStringRef)*((void *)this + 2), 0);
          if (v57.length >= 1) {
            CFStringReplace(v56, v57, &stru_1EF7CF078);
          }
          BOOL v13 = 0;
          *CFNumberRef v18 = v56;
          CFStringRef v14 = @"invalid sequence with ZWJ";
          goto LABEL_133;
        }
        CFStringRef v14 = @"invalid sequence with ZWJ";
      }
    }
LABEL_132:
    BOOL v13 = 0;
    goto LABEL_133;
  }
  CFIndex v8 = 0;
  CFIndex location = 0x7FFFFFFFFFFFFFFFLL;
  while (result.location)
  {
    if (location != 0x7FFFFFFFFFFFFFFFLL && result.location == v8 + location)
    {
      v75.CFIndex location = location;
      v75.length = v8;
      CFStringRef v10 = CFStringCreateWithSubstring(0, theString, v75);
      CFStringRef v11 = CFStringCreateWithSubstring(0, theString, result);
      if ((CFStringCompare(v10, *((CFStringRef *)this + 1), 0)
         || CFEqual(v11, *((CFStringRef *)this + 1)))
        && (CFStringCompare(v11, @"ં", 0) || !NLGujaratiOrthographyChecker::isVowelSign(0, v10))
        && (CFStringCompare(v11, @"ઁ", 0)
         || !NLGujaratiOrthographyChecker::canCandrabinduFollowVowelSign(0, v10)))
      {
        if (v10) {
          CFRelease(v10);
        }
        if (v11) {
          CFRelease(v11);
        }
        break;
      }
      if (v10) {
        CFRelease(v10);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
    CFIndex location = result.location;
    CFIndex v8 = result.length;
    v76.CFIndex location = result.length + result.location;
    v76.length = Length - (result.length + result.location);
    if (!CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 3), v76, 0, &result)) {
      goto LABEL_18;
    }
  }
  BOOL v13 = 0;
  CFStringRef v14 = @"illegal diacritic placement";
LABEL_133:
  if (!a4 || v13)
  {
    if (!a4 && v14) {
      CFRelease(v14);
    }
  }
  else
  {
    *a4 = v14;
  }
  return v13;
}

void std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  CFRange v7 = a1 + 1;
  CFStringRef v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        CFStringRef v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        CFStringRef v6 = *v9;
        CFRange v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      CFStringRef v6 = v9[1];
      if (!v6)
      {
        CFRange v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    CFStringRef v9 = a1 + 1;
LABEL_10:
    CFStringRef v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void NLAbstractTransMappings::NLAbstractTransMappings(NLAbstractTransMappings *this, const __CFDictionary *a2)
{
  *(void *)this = &unk_1EF7CD0F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 1nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 2nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 3nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 4nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = 1065353216;
  NLAbstractTransMappings::loadMappings(this, a2);
}

void sub_1A43595BC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void NLAbstractTransMappings::loadMappings(NLAbstractTransMappings *this, const __CFDictionary *a2)
{
  CFLocaleRef LocaleFromOptions = NLTransliteratorUtils::getLocaleFromOptions(a2, a2);
  if (LocaleFromOptions)
  {
    CFStringRef Value = (const __CFString *)CFLocaleGetValue(LocaleFromOptions, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(a2, kNLTransliteratorSourceToTargetCharMappingsKey[0]);
    if (v6)
    {
      NLAbstractTransMappings::loadStaticMap(this, v6);
    }
    else
    {
      CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
      CFStringAppend(Mutable, Value);
      CFStringAppend(Mutable, @"-Mappings.plist");
      getPathForResource(Mutable, &v14);
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFStringRef v9 = &v14;
      }
      else {
        CFStringRef v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      }
      CFStringRef v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v9, 0x8000100u);
      CFURLRef v11 = CFURLCreateWithFileSystemPath(v8, v10, kCFURLPOSIXPathStyle, 0);
      CFStringRef v12 = (NL::CFLogger *)std::string::compare(&v14, "");
      if (v12)
      {
        (**(void (***)(NLAbstractTransMappings *, CFURLRef))this)(this, v11);
      }
      else
      {
        uint64_t v13 = NL::CFLogger::sharedInstance(v12);
        (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v13 + 16))(v13, 3, "Could not locate Roman-Hindi character mappings from resource bundle");
      }
      if (v10) {
        CFRelease(v10);
      }
      if (v11) {
        CFRelease(v11);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1A43597A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NLAbstractTransMappings::loadStaticMap(NLAbstractTransMappings *this, CFDictionaryRef theDict)
{
  CFIndex Count = CFDictionaryGetCount(theDict);
  CFMutableStringRef v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(theDict, v5, 0);
  if (Count >= 1)
  {
    uint64_t v6 = 0;
    CFRange v7 = (char *)this + 128;
    do
    {
      CFStringRef v8 = (const __CFString *)v5[v6];
      getUTF8StringFromCFString(v8, v26);
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, v8);
      CFIndex v10 = CFArrayGetCount(Value);
      UniChar v23 = 0;
      BOOL v24 = 0;
      uint64_t v25 = 0;
      if (v10 >= 1)
      {
        for (CFIndex i = 0; i != v10; ++i)
        {
          CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(Value, i);
          CFStringRef v13 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
          getUTF8StringFromCFString(v13, v21);
          CFNumberRef v14 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 1);
          unsigned int valuePtr = 0;
          CFNumberGetValue(v14, kCFNumberSInt8Type, &valuePtr);
          CFNumberRef v15 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 2);
          double v19 = 0.0;
          CFNumberGetValue(v15, kCFNumberDoubleType, &v19);
          NLExtendedString::NLExtendedString(__p, v21, valuePtr, v19);
          std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)&v23, (long long *)__p);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
      v21[0] = v26;
      CFStringRef v16 = (std::string **)(std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7, (unsigned __int8 *)v26, (uint64_t)&std::piecewise_construct, (long long **)v21)+ 40);
      if (v16 != &v23) {
        std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>((uint64_t)v16, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 4));
      }
      __p[0] = &v23;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      ++v6;
    }
    while (v6 != Count);
  }
  if (v5) {
    free(v5);
  }
}

void sub_1A43599C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (*(char *)(v27 - 81) < 0) {
    operator delete(*(void **)(v27 - 104));
  }
  _Unwind_Resume(exception_object);
}

CFPropertyListRef createMyPropertyListFromFile(CFURLRef url)
{
  CFDataRef resourceData = 0;
  CFStringRef errorString = 0;
  SInt32 errorCode = 0;
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLCreateDataAndPropertiesFromResource((CFAllocatorRef)*MEMORY[0x1E4F1CF80], url, &resourceData, 0, 0, &errorCode);
  CFPropertyListRef v2 = CFPropertyListCreateFromXMLData(v1, resourceData, 0, &errorString);
  if (resourceData) {
    CFRelease(resourceData);
  }
  if (errorString) {
    CFRelease(errorString);
  }
  return v2;
}

uint64_t std::vector<NLExtendedString>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      CFNumberRef v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(result, v14);
    }
    else {
      CFNumberRef v15 = 0;
    }
    CFStringRef v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)CFStringRef v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16[40] = *((unsigned char *)a2 + 40);
    *(_OWORD *)(v16 + 24) = v18;
    v19[2] = v16 + 48;
    std::vector<NLExtendedString>::__swap_out_circular_buffer(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(unsigned char *)(v7 + 4nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = *((unsigned char *)a2 + 40);
    *(_OWORD *)(v7 + 24) = v9;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_1A4359C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void NLAbstractTransMappings::loadMappingsFromPlist(NLAbstractTransMappings *this, CFURLRef url)
{
  CFDictionaryRef MyPropertyListFromFile = (const __CFDictionary *)createMyPropertyListFromFile(url);
  CFIndex Count = CFDictionaryGetCount(MyPropertyListFromFile);
  unint64_t v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(MyPropertyListFromFile, v5, 0);
  if (Count >= 1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = (char *)this + 128;
    do
    {
      CFStringRef v8 = (const __CFString *)v5[v6];
      getUTF8StringFromCFString(v8, v26);
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(MyPropertyListFromFile, v8);
      CFIndex v10 = CFArrayGetCount(Value);
      UniChar v23 = 0;
      BOOL v24 = 0;
      uint64_t v25 = 0;
      if (v10 >= 1)
      {
        for (CFIndex i = 0; i != v10; ++i)
        {
          CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(Value, i);
          CFStringRef v13 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
          getUTF8StringFromCFString(v13, v21);
          CFNumberRef v14 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 1);
          unsigned int valuePtr = 0;
          CFNumberGetValue(v14, kCFNumberSInt8Type, &valuePtr);
          CFNumberRef v15 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 2);
          double v19 = 0.0;
          CFNumberGetValue(v15, kCFNumberDoubleType, &v19);
          NLExtendedString::NLExtendedString(__p, v21, valuePtr, v19);
          std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)&v23, (long long *)__p);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
      v21[0] = v26;
      CFStringRef v16 = (std::string **)(std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7, (unsigned __int8 *)v26, (uint64_t)&std::piecewise_construct, (long long **)v21)+ 40);
      if (v16 != &v23) {
        std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>((uint64_t)v16, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 4));
      }
      __p[0] = &v23;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      ++v6;
    }
    while (v6 != Count);
  }
  if (MyPropertyListFromFile) {
    CFRelease(MyPropertyListFromFile);
  }
  if (v5) {
    free(v5);
  }
}

void sub_1A4359E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (*(char *)(v27 - 81) < 0) {
    operator delete(*(void **)(v27 - 104));
  }
  _Unwind_Resume(exception_object);
}

void NLAbstractTransMappings::addDynamicMapping(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((void *)(a1 + 8), a2);
  CFNumberRef v26 = 0;
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  if (!v6) {
    goto LABEL_33;
  }
  if (&v26 == (std::string **)(v6 + 40))
  {
    unint64_t v7 = 0;
LABEL_31:
    if ((unint64_t)v7 < v28)
    {
      std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)&v26, (long long *)a3);
      char v22 = (long long *)&v7[2];
LABEL_34:
      uint64_t v27 = (std::string *)v22;
      goto LABEL_35;
    }
LABEL_33:
    char v22 = (long long *)std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v26, (long long *)a3);
    goto LABEL_34;
  }
  std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>((uint64_t)&v26, *((std::string **)v6 + 5), *((long long **)v6 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 4));
  unint64_t v7 = v26;
  if (v27 == v26) {
    goto LABEL_31;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  while (1)
  {
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)&v7[v8]);
    uint64_t v11 = v10;
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)a3);
    int v13 = *(char *)(v12 + 23);
    int v14 = *(char *)(v11 + 23);
    unint64_t v15 = v14 >= 0 ? *(unsigned __int8 *)(v11 + 23) : *(void *)(v11 + 8);
    CFStringRef v16 = v14 >= 0 ? (const void *)v11 : *(const void **)v11;
    unint64_t v17 = v13 >= 0 ? *(unsigned __int8 *)(v12 + 23) : *(void *)(v12 + 8);
    char v18 = v13 >= 0 ? (const void *)v12 : *(const void **)v12;
    size_t v19 = v17 >= v15 ? v15 : v17;
    if (!memcmp(v16, v18, v19) && v17 == v15)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 4) <= v9) {
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
      }
      int Pos = NLExtendedString::getPos((NLExtendedString *)&v26[v8]);
      if (Pos == NLExtendedString::getPos((NLExtendedString *)a3)) {
        break;
      }
    }
    ++v9;
    unint64_t v7 = v26;
    v8 += 2;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 4) <= v9)
    {
      unint64_t v7 = v27;
      goto LABEL_31;
    }
  }
  BOOL v24 = &v26[v8];
  std::string::operator=(&v26[v8], (const std::string *)a3);
  long long v25 = *(_OWORD *)(a3 + 24);
  v24[1].__r_.__value_.__s.__data_[16] = *(unsigned char *)(a3 + 40);
  *(_OWORD *)&v24[1].__r_.__value_.__l.__data_ = v25;
  char v22 = (long long *)v27;
LABEL_35:
  if (v22 != (long long *)v26)
  {
    CFDictionaryRef v29 = a2;
    UniChar v23 = (std::string **)(std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, (long long **)&v29)+ 40);
    if (v23 != &v26) {
      std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>((uint64_t)v23, v26, (long long *)v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 4));
    }
  }
  CFDictionaryRef v30 = &v26;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
}

void sub_1A435A0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void NLAbstractTransMappings::removeAllDynamicMappings(NLAbstractTransMappings *this)
{
}

std::string *NLAbstractTransMappings::findMatches@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a1 + 16, a2);
  if (result) {
    uint64_t result = std::vector<NLExtendedString>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>((uint64_t *)a3, *(std::string **)(a3 + 8), (std::string *)result[1].__r_.__value_.__r.__words[2], (long long *)result[2].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(result[2].__r_.__value_.__r.__words[0] - result[1].__r_.__value_.__r.__words[2]) >> 4));
  }
  if (a1[4])
  {
    uint64_t result = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a1 + 1, a2);
    if (result) {
      return std::vector<NLExtendedString>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>((uint64_t *)a3, *(std::string **)(a3 + 8), (std::string *)result[1].__r_.__value_.__r.__words[2], (long long *)result[2].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(result[2].__r_.__value_.__r.__words[0] - result[1].__r_.__value_.__r.__words[2]) >> 4));
    }
  }
  return result;
}

void sub_1A435A1D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  CFPropertyListRef v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFPropertyListRef v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<NLExtendedString>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      CFPropertyListRef v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<NLExtendedString>>,0>(uint64_t a1)
{
  CFPropertyListRef v2 = (void **)(a1 + 24);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  CFPropertyListRef v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFPropertyListRef v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      CFPropertyListRef v2 = v3;
    }
    while (v3);
  }
}

void std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  CFPropertyListRef v2 = *a1;
  if (*v2)
  {
    std::vector<NLExtendedString>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<NLExtendedString>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<NLExtendedString>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  CFAllocatorRef v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v10;
      *(void *)(a3 - 4nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(unsigned char *)(v9 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(unsigned char *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<NLExtendedString>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<NLExtendedString>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 6;
      *(void *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  UniChar v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *UniChar v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A435A938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1A435A9DC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * vstd::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<NLExtendedString>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint8x8_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<NLExtendedString>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0x555555555555555) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<NLExtendedString>::__vallocate[abi:ne180100]((void *)a1, v11);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NLExtendedString *,NLExtendedString *,NLExtendedString *,0>(__str, v13, v9);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(v8, (long long *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NLExtendedString *,NLExtendedString *,NLExtendedString *,0>(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 25) < 0) {
        operator delete(*(void **)(v16 - 48));
      }
      v16 -= 48;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v15;
}

void sub_1A435B354(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1A435B35C(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<NLExtendedString>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<NLExtendedString>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<NLExtendedString>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v13 = this;
  uint64_t v14 = this;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v14;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      long long v9 = *(long long *)((char *)v6 + 24);
      v4[1].__r_.__value_.__s.__data_[16] = *((unsigned char *)v6 + 40);
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = v9;
      v6 += 3;
      uint64_t v4 = v8 + 2;
      uint64_t v14 = v8 + 2;
    }
    while (v6 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1A435B4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0) {
      operator delete(*(void **)(v1 - 48));
    }
    v1 -= 48;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NLExtendedString *,NLExtendedString *,NLExtendedString *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str == a2) {
    return __str;
  }
  unint64_t v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    std::string::value_type v6 = v4[1].__r_.__value_.__s.__data_[16];
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v4[1].__r_.__value_.__l.__data_;
    this[1].__r_.__value_.__s.__data_[16] = v6;
    this += 2;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

__n128 std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(unsigned char *)(v4 + 4nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = *((unsigned char *)a2 + 40);
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v4 + 48;
  return result;
}

void sub_1A435B730(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v20 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = (std::string *)&v10[48 * v4];
  v17[0] = v10;
  v17[1] = v11;
  uint64_t v18 = v11;
  uint64_t v19 = &v10[48 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    unint64_t v11 = v18;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  unint64_t v13 = &v10[48 * v4];
  long long v14 = *(long long *)((char *)a2 + 24);
  v13[40] = *((unsigned char *)a2 + 40);
  *(_OWORD *)(v13 + 24) = v14;
  uint64_t v18 = v11 + 2;
  std::vector<NLExtendedString>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1A435B860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5B36038, MEMORY[0x1E4FBA1D0]);
}

void sub_1A435B8D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

std::string *std::vector<NLExtendedString>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>(uint64_t *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 4)) >= a5)
      {
        uint64_t v21 = (long long *)&a3[2 * a5];
      }
      else
      {
        uint64_t v21 = (long long *)((char *)a3 + 16 * ((uint64_t)(v12 - (void)a2) >> 4));
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(v9, v21, a4, *(std::string **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<NLExtendedString>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NLExtendedString *,NLExtendedString *,NLExtendedString *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555) {
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 4);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v23 = v19;
      unint64_t v24 = &v19[48 * v15];
      uint64_t v25 = v24;
      uint64_t v26 = &v19[48 * v18];
      std::__split_buffer<NLExtendedString>::__construct_at_end_with_size<std::__wrap_iter<NLExtendedString*>>((uint64_t)&v23, (long long *)a3, a5);
      unint64_t v5 = (std::string *)std::vector<NLExtendedString>::__swap_out_circular_buffer((uint64_t)a1, &v23, (long long *)v5);
      std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1A435BB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<NLExtendedString>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      long long v11 = *(_OWORD *)(v9 + 24);
      *(unsigned char *)(v8 + 4nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = *(unsigned char *)(v9 + 40);
      *(_OWORD *)(v8 + 24) = v11;
      v8 += 48;
      v9 += 48;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<NLExtendedString *,NLExtendedString *,NLExtendedString *>((uint64_t)&v13, a2, v7, v6);
}

void std::__split_buffer<NLExtendedString>::__construct_at_end_with_size<std::__wrap_iter<NLExtendedString*>>(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (a3)
  {
    uint64_t v6 = v4 + 48 * a3;
    uint64_t v7 = 48 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        *(void *)(v4 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v4 = v8;
      }
      long long v9 = *(long long *)((char *)a2 + 24);
      *(unsigned char *)(v4 + 4nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = *((unsigned char *)a2 + 40);
      *(_OWORD *)(v4 + 24) = v9;
      v4 += 48;
      a2 += 3;
      v7 -= 48;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  *(void *)(a1 + 16) = v4;
}

void sub_1A435BC5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<NLExtendedString>::__swap_out_circular_buffer(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLExtendedString>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>>(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<NLExtendedString *,NLExtendedString *,NLExtendedString *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = (void **)(a4 + v7 - 48);
      if (*(char *)(a4 + v7 - 25) < 0) {
        operator delete(*v9);
      }
      uint64_t v10 = (long long *)(a3 + v7 - 48);
      long long v11 = *v10;
      *(void *)(a4 + v7 - 32) = *(void *)(a3 + v7 - 32);
      *(_OWORD *)uint64_t v9 = v11;
      *(unsigned char *)(a3 + v7 - 25) = 0;
      *(unsigned char *)uint64_t v10 = 0;
      long long v12 = *(_OWORD *)(a3 + v7 - 24);
      *(unsigned char *)(v8 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(unsigned char *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v12;
      v7 -= 48;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      long long v6 = *(long long *)((char *)a2 + 24);
      *(unsigned char *)(v4 + 4nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = *((unsigned char *)a2 + 40);
      *(_OWORD *)(v4 + 24) = v6;
      v4 += 48;
      a2 += 3;
    }
    while (a2 != a3);
    uint64_t v11 = v4;
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLExtendedString>,NLExtendedString*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

double NLTransliterationCandidate::getTotalScore(NLTransliterationCandidate *this)
{
  if (NLTransliterationCandidate::getTotalScore(void)const::once != -1) {
    dispatch_once(&NLTransliterationCandidate::getTotalScore(void)const::once, &__block_literal_global_0);
  }
  return *((double *)this + 8)
       + *(double *)&NLTransliterationCandidate::getTotalScore(void)const::lmDistributionModulatingFactor
       * *((double *)this + 7);
}

void ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v0 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.NLP"];
  uint64_t v1 = [v0 URLForResource:@"CandidateRankingParameters" withExtension:@"plist"];

  id v10 = 0;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:v1 error:&v10];
  id v3 = v10;
  if (v2)
  {
    uint64_t v4 = [v2 objectForKey:@"LMDistributionModulatingFactor"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v5 = v4;
      [v5 doubleValue];
      if (v6 >= 0.0 && ([v5 doubleValue], v7 <= 1.0))
      {
        [v5 doubleValue];
        NLTransliterationCandidate::getTotalScore(void)const::lmDistributionModulatingFactor = v9;
        uint64_t v8 = _nlpDefaultLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          uint64_t v12 = NLTransliterationCandidate::getTotalScore(void)const::lmDistributionModulatingFactor;
          _os_log_impl(&dword_1A431F000, v8, OS_LOG_TYPE_INFO, "Using LM distribution modulating factor value of: %f", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v8 = _nlpDefaultLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke_cold_2();
        }
      }
    }
    else
    {
      long long v5 = _nlpDefaultLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke_cold_3();
      }
    }
  }
  else
  {
    uint64_t v4 = _nlpDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      ___ZNK26NLTransliterationCandidate13getTotalScoreEv_block_invoke_cold_1((uint64_t)v1, (uint64_t)v3, v4);
    }
  }
}

void sub_1A435C0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t NLTransliterationCandidate::copyMetadata(NLTransliterationCandidate *this)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  v8[0] = kNLTransliteratorCandidateMetadataLMScoreKey[0];
  uint64_t v2 = [NSNumber numberWithDouble:*((double *)this + 7)];
  v9[0] = v2;
  v8[1] = kNLTransliteratorCandidateMetadataSeq2SeqScoreKey[0];
  id v3 = [NSNumber numberWithDouble:*((double *)this + 8)];
  v9[1] = v3;
  v8[2] = kNLTransliteratorCandidateMetadataTotalScoreKey;
  uint64_t v4 = NSNumber;
  if (NLTransliterationCandidate::getTotalScore(void)const::once != -1) {
    dispatch_once(&NLTransliterationCandidate::getTotalScore(void)const::once, &__block_literal_global_0);
  }
  long long v5 = [v4 numberWithDouble:*((double *)this + 8)+ *(double *)&NLTransliterationCandidate::getTotalScore(void)const::lmDistributionModulatingFactor* *((double *)this + 7)];
  v9[2] = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:3];

  return v6;
}

void sub_1A435C270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A435C474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL NLTransliteratorUtils::checkMetaFlags(NLTransliteratorUtils *this, NLTransliterationCandidate *a2)
{
  char v2 = (char)a2;
  if ((a2 & 0x82) == 0x80)
  {
    NLTransliterationCandidate::setLMScore((uint64_t)this, -INFINITY);
    NLTransliterationCandidate::setIsExtensionCandidate((uint64_t)this, 1);
  }
  return (v2 & 2) == 0;
}

BOOL NLTransliteratorUtils::greater_than_key(NLTransliteratorUtils *this, const NLTransliterationCandidate *a2, const NLTransliterationCandidate *a3)
{
  double LMScore = NLTransliterationCandidate::getLMScore(this);
  double v6 = NLTransliterationCandidate::getLMScore(a2);
  double v7 = fabs(v6);
  if (fabs(LMScore) == INFINITY && v7 == INFINITY)
  {
    double SequenceScore = NLTransliterationCandidate::getSequenceScore(this);
    double v10 = NLTransliterationCandidate::getSequenceScore(a2);
  }
  else
  {
    double SequenceScore = NLTransliterationCandidate::getSequenceScore(this) * 0.65 + LMScore * 0.35;
    double v10 = NLTransliterationCandidate::getSequenceScore(a2) * 0.65 + v6 * 0.35;
  }
  int Type = NLTransliterationCandidate::getType(this);
  int v12 = NLTransliterationCandidate::getType(a2);
  BOOL v13 = Type == v12;
  if (SequenceScore <= v10) {
    BOOL v13 = 0;
  }
  return Type < v12 || v13;
}

BOOL NLTransliteratorUtils::greater_than_key_oov(NLTransliteratorUtils *this, const NLTransliterationCandidate *a2, const NLTransliterationCandidate *a3)
{
  double Score = NLMessageIntentCandidate::getScore(this);
  double v6 = NLTransliterationCandidate::getSequenceScore(this) * 0.65 + Score * 0.35;
  double v7 = NLMessageIntentCandidate::getScore(a2);
  return v6 > NLTransliterationCandidate::getSequenceScore(a2) * 0.65 + v7 * 0.35;
}

void NLTransliteratorUtils::separateByNonAlphanumericDelimeter()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1A435C9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  v28[1] = v29;
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a26 < 0) {
    operator delete(a21);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t NLTransliteratorUtils::getMaximumLayerSize(uint64_t a1)
{
  unint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    unint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1 >= 0x10) {
    unsigned int v2 = 3;
  }
  else {
    unsigned int v2 = 8;
  }
  if (v1 >= 0xB) {
    return v2;
  }
  else {
    return 10;
  }
}

uint64_t NLTransliteratorUtils::findExistingCandidate(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (a1[1] == *a1) {
    return 0;
  }
  unint64_t v5 = 0;
  while (1)
  {
    TransliteratedWord = (void *)NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(v2 + 8 * v5));
    int v7 = *(char *)(a2 + 23);
    int v8 = *((char *)TransliteratedWord + 23);
    if (v8 >= 0) {
      unint64_t v9 = *((unsigned __int8 *)TransliteratedWord + 23);
    }
    else {
      unint64_t v9 = TransliteratedWord[1];
    }
    if (v8 < 0) {
      TransliteratedWord = (void *)*TransliteratedWord;
    }
    unint64_t v10 = v7 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    uint64_t v11 = v7 >= 0 ? (const void *)a2 : *(const void **)a2;
    size_t v12 = v10 >= v9 ? v9 : v10;
    if (!memcmp(TransliteratedWord, v11, v12) && v10 == v9) {
      break;
    }
    ++v5;
    uint64_t v2 = *a1;
    if (v5 >= (a1[1] - *a1) >> 3) {
      return 0;
    }
  }
  if (v5 >= (a1[1] - *a1) >> 3) {
    std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(*a1 + 8 * v5);
}

CFLocaleRef NLTransliteratorUtils::getLocaleFromOptions(NLTransliteratorUtils *this, const __CFDictionary *a2)
{
  if (!this) {
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(this, kNLTransliteratorTargetLocaleKey[0]);
  if (!Value)
  {
    double v6 = *(void (**)(void))(*(void *)NL::CFLogger::sharedInstance(0) + 16);
LABEL_13:
    v6();
    return 0;
  }
  CFStringRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 == CFStringGetTypeID())
  {
    return CFLocaleCreate(0, v3);
  }
  CFTypeID v7 = CFGetTypeID(v3);
  TypeID = (NL::CFLogger *)CFLocaleGetTypeID();
  if ((NL::CFLogger *)v7 != TypeID)
  {
    double v6 = *(void (**)(void))(*(void *)NL::CFLogger::sharedInstance(TypeID) + 16);
    goto LABEL_13;
  }

  return (CFLocaleRef)CFRetain(v3);
}

void std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8[abi:ne180100]()
{
  MEMORY[0x1A625B060]();

  JUMPOUT(0x1A625B130);
}

uint64_t std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, std::basic_string<char32_t> *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 184) = 0;
  if (!*(void *)(a1 + 48)) {
    goto LABEL_23;
  }
  CFTypeID v7 = a2;
  std::basic_string<char32_t>::basic_string[abi:ne180100](a4, 2 * ((char *)a3 - (char *)a2), 0);
  if (a3 != v7)
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::basic_string<char32_t>::size_type v8 = 4;
    }
    else {
      std::basic_string<char32_t>::size_type v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::basic_string<char32_t>::resize(a4, v8, 0);
    long long v9 = *(_OWORD *)(a1 + 136);
    v30[4] = *(_OWORD *)(a1 + 120);
    v30[5] = v9;
    long long v10 = *(_OWORD *)(a1 + 168);
    v30[6] = *(_OWORD *)(a1 + 152);
    v30[7] = v10;
    long long v11 = *(_OWORD *)(a1 + 72);
    v30[0] = *(_OWORD *)(a1 + 56);
    v30[1] = v11;
    __n128 v12 = *(__n128 *)(a1 + 88);
    long long v13 = *(_OWORD *)(a1 + 104);
    std::basic_string<char32_t>::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      unint64_t v15 = (char *)a4;
    }
    else {
      unint64_t v15 = (char *)a4->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::basic_string<char32_t>::size_type size = a4->__r_.__value_.__l.__size_;
    }
    unint64_t v16 = &v15[4 * size];
    v30[2] = *(_OWORD *)(a1 + 88);
    v30[3] = v13;
    do
    {
      int v17 = (*(uint64_t (**)(void, _OWORD *, int *, int *, int **, char *, char *, uint64_t *, __n128))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v30, v7, a3, &v29, v15, v16, &v28, v12);
      BOOL v18 = v29 == v7;
      *(void *)(a1 + 184) += (char *)v29 - (char *)v7;
      if (v18) {
        goto LABEL_34;
      }
      if (v17 != 1)
      {
        if (v17)
        {
          if (v17 != 3)
          {
LABEL_34:
            if ((*((unsigned char *)&a4->__r_.__value_.__s + 23) & 0x80) != 0) {
              goto LABEL_35;
            }
            goto LABEL_23;
          }
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v25 = (char *)a4;
          }
          else {
            uint64_t v25 = (char *)a4->__r_.__value_.__r.__words[0];
          }
          std::basic_string<char32_t>::resize(a4, (v15 - v25) >> 2, 0);
          std::basic_string<char32_t>::append<char32_t const*,0>(a4, v7, a3);
        }
        else
        {
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = a4;
          }
          else {
            uint64_t v27 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
          }
          std::basic_string<char32_t>::resize(a4, (v28 - (uint64_t)v27) >> 2, 0);
        }
        return;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = a4;
      }
      else {
        uint64_t v19 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = v28 - (void)v19;
      std::basic_string<char32_t>::resize(a4, (v28 - (uint64_t)v19) >> 1, 0);
      std::basic_string<char32_t>::size_type v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      char v22 = v21;
      uint64_t v23 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
      if ((v21 & 0x80u) == 0) {
        uint64_t v23 = a4;
      }
      unint64_t v15 = (char *)v23 + v20;
      if ((v21 & 0x80u) != 0) {
        std::basic_string<char32_t>::size_type v21 = a4->__r_.__value_.__l.__size_;
      }
      unint64_t v16 = (char *)v23 + 4 * v21;
      CFTypeID v7 = v29;
    }
    while (v29 < a3);
    if ((v22 & 0x80) == 0) {
      goto LABEL_23;
    }
LABEL_35:
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_23:
    unint64_t v24 = (const std::basic_string<char32_t>::value_type **)(a1 + 24);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      if (*(unsigned char *)(a1 + 47))
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
        a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
        return;
      }
LABEL_41:
      std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
    }
    std::basic_string<char32_t>::size_type v26 = *(void *)(a1 + 32);
    if (!v26) {
      goto LABEL_41;
    }
    std::basic_string<char32_t>::__init_copy_ctor_external(a4, *v24, v26);
  }
}

void sub_1A435CF6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::basic_string<char32_t> *std::basic_string<char32_t>::append<char32_t const*,0>(std::basic_string<char32_t> *this, int *a2, int *a3)
{
  CFTypeID v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v7 = (char *)a3 - (char *)a2;
    if (a3 == a2) {
      return this;
    }
    std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::basic_string<char32_t>::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    long long v10 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    uint64_t v7 = (char *)a3 - (char *)a2;
    if (a3 == a2) {
      return this;
    }
    std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::basic_string<char32_t>::size_type v9 = 4;
    long long v10 = this;
  }
  unint64_t v12 = v7 >> 2;
  if (v10 > (std::basic_string<char32_t> *)v4 || (char *)v10->__r_.__value_.__r.__words + 4 * size + 4 <= (char *)v4)
  {
    if (v9 - size < v12)
    {
      std::basic_string<char32_t>::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    unint64_t v15 = this;
    if ((v6 & 0x80) != 0) {
      unint64_t v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    }
    unint64_t v16 = (int *)((char *)v15 + 4 * size);
    while (v4 != a3)
    {
      int v17 = *v4++;
      *v16++ = v17;
    }
    *unint64_t v16 = 0;
    std::basic_string<char32_t>::size_type v18 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v18;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v18 & 0x7F;
    }
  }
  else
  {
    std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(__p, v4, a3, v12);
    if ((v21 & 0x80u) == 0) {
      long long v13 = __p;
    }
    else {
      long long v13 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      std::basic_string<char32_t>::size_type v14 = v21;
    }
    else {
      std::basic_string<char32_t>::size_type v14 = (std::basic_string<char32_t>::size_type)__p[1];
    }
    std::basic_string<char32_t>::append(this, (const std::basic_string<char32_t>::value_type *)v13, v14);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1A435D0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5B36028, MEMORY[0x1E4FBA1B8]);
}

void sub_1A435D160(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::basic_string<char32_t>::basic_string[abi:ne180100](void *a1, unint64_t a2, int a3)
{
  CFStringRef v3 = a1;
  if (a2 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 >= 5)
  {
    uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a2 | 1) != 5) {
      uint64_t v6 = a2 | 1;
    }
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    *CFStringRef v3 = a1;
  }
  else
  {
    *((unsigned char *)a1 + 23) = a2;
    if (!a2) {
      goto LABEL_10;
    }
  }
  uint64_t v8 = 0;
  do
    *((_DWORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_DWORD *)a1 + a2) = 0;
  return v3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::basic_string<char32_t>::resize(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __n, std::basic_string<char32_t>::value_type __c)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
    if (size >= __n)
    {
      this->__r_.__value_.__l.__size_ = __n;
      this = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
LABEL_5:
    std::basic_string<char32_t>::append(this, __n - size, __c);
    return;
  }
  std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __n) {
    goto LABEL_5;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_7:
  this->__r_.__value_.__s.__data_[__n] = 0;
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __n, std::basic_string<char32_t>::value_type __c)
{
  if (__n)
  {
    LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80000000) != 0)
    {
      std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
      unint64_t v9 = this->__r_.__value_.__r.__words[2];
      std::basic_string<char32_t>::size_type v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      unint64_t v6 = HIBYTE(v9);
    }
    else
    {
      std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      std::basic_string<char32_t>::size_type v8 = 4;
    }
    if (v8 - size < __n)
    {
      std::basic_string<char32_t>::__grow_by(this, v8, __n - v8 + size, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    long long v10 = this;
    if ((v6 & 0x80) != 0) {
      long long v10 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    }
    unint64_t v11 = (std::basic_string<char32_t>::value_type *)((char *)v10 + 4 * size);
    std::basic_string<char32_t>::size_type v12 = __n;
    do
    {
      *v11++ = __c;
      --v12;
    }
    while (v12);
    std::basic_string<char32_t>::size_type v13 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v13;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
    }
    v10->__r_.__value_.__s.__data_[v13] = 0;
  }
  return this;
}

void std::basic_string<char32_t>::__grow_by(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add)
{
  if (0x3FFFFFFFFFFFFFF7 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::basic_string<char32_t>::size_type v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char32_t>::size_type v13 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char32_t>::size_type v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char32_t>::size_type v14 = 2 * __old_cap;
  }
  uint64_t v15 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v14 | 1) != 5) {
    uint64_t v15 = v14 | 1;
  }
  if (v14 >= 5) {
    uint64_t v16 = v15 + 1;
  }
  else {
    uint64_t v16 = 5;
  }
  if (__old_cap <= 0x1FFFFFFFFFFFFFF2) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = 0x3FFFFFFFFFFFFFF7;
  }
  std::basic_string<char32_t>::size_type v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v17);
  std::basic_string<char32_t>::size_type v19 = (std::basic_string<char32_t>::size_type)v18;
  uint64_t v21 = v20;
  if (__n_copy) {
    memmove(v18, v13, 4 * __n_copy);
  }
  if (__old_sz != __n_del + __n_copy) {
    memmove((void *)(v19 + 4 * __n_copy + 4 * __n_add), (char *)v13 + 4 * __n_copy + 4 * __n_del, 4 * (__old_sz - (__n_del + __n_copy)));
  }
  if (__old_cap != 4) {
    operator delete(v13);
  }
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __n)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
    std::basic_string<char32_t>::size_type v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    std::basic_string<char32_t>::size_type v6 = 4;
    std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      std::basic_string<char32_t>::size_type v8 = this;
      if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
        std::basic_string<char32_t>::size_type v8 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      }
      memmove((char *)v8 + 4 * size, __s, 4 * __n);
      std::basic_string<char32_t>::size_type v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v9;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      }
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void *std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(void *result, int *a2, int *a3, unint64_t a4)
{
  CFTypeID v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 4)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5) {
      uint64_t v8 = a4 | 1;
    }
    __n128 result = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    CFTypeID v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    int v10 = *a2++;
    *(_DWORD *)CFTypeID v4 = v10;
    CFTypeID v4 = (void *)((char *)v4 + 4);
  }
  *(_DWORD *)CFTypeID v4 = 0;
  return result;
}

void std::basic_string<char32_t>::__grow_by_and_replace(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add, const std::basic_string<char32_t>::value_type *__p_new_stuff)
{
  if (0x3FFFFFFFFFFFFFF6 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char32_t>::size_type v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char32_t>::size_type v16 = 2 * __old_cap;
  }
  uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v16 | 1) != 5) {
    uint64_t v17 = v16 | 1;
  }
  if (v16 >= 5) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = 5;
  }
  if (__old_cap > 0x1FFFFFFFFFFFFFF2) {
    unint64_t v19 = 0x3FFFFFFFFFFFFFF7;
  }
  else {
    unint64_t v19 = v18;
  }
  uint64_t v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v19);
  std::basic_string<char32_t>::size_type v21 = (std::basic_string<char32_t>::size_type)v20;
  uint64_t v23 = v22;
  if (__n_copy) {
    memmove(v20, v15, 4 * __n_copy);
  }
  if (__n_add) {
    memmove((void *)(v21 + 4 * __n_copy), __p_new_stuff, 4 * __n_add);
  }
  std::basic_string<char32_t>::size_type v24 = __old_sz - (__n_del + __n_copy);
  if (v24) {
    memmove((void *)(v21 + 4 * __n_copy + 4 * __n_add), (char *)v15 + 4 * __n_copy + 4 * __n_del, 4 * v24);
  }
  if (__old_cap != 4) {
    operator delete(v15);
  }
  std::basic_string<char32_t>::size_type v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_DWORD *)(v21 + 4 * v25) = 0;
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  __n128 result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4B8] + 16);
  return result;
}

void std::basic_string<char32_t>::__init_copy_ctor_external(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::basic_string<char32_t>::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5) {
      std::basic_string<char32_t>::size_type v6 = __sz | 1;
    }
    uint64_t v7 = (std::basic_string<char32_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v7;
    unint64_t v5 = v7;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, 4 * __sz + 4);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    CFStringRef v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 184) = 0;
  if (!*(void *)(a1 + 48)) {
    goto LABEL_62;
  }
  uint64_t v7 = a2;
  std::string::basic_string[abi:ne180100](a4, (a3 - a2) >> 1, 0);
  if (a3 == v7)
  {
    long long v23 = *(_OWORD *)(a1 + 136);
    long long v52 = *(_OWORD *)(a1 + 120);
    long long v53 = v23;
    long long v24 = *(_OWORD *)(a1 + 168);
    long long v54 = *(_OWORD *)(a1 + 152);
    long long v55 = v24;
    long long v25 = *(_OWORD *)(a1 + 72);
    long long v48 = *(_OWORD *)(a1 + 56);
    long long v49 = v25;
    long long v26 = *(_OWORD *)(a1 + 104);
    long long v50 = *(_OWORD *)(a1 + 88);
    long long v51 = v26;
  }
  else
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = 22;
    }
    else {
      std::string::size_type v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::string::resize(a4, v8, 0);
    long long v9 = *(_OWORD *)(a1 + 136);
    long long v52 = *(_OWORD *)(a1 + 120);
    long long v53 = v9;
    long long v10 = *(_OWORD *)(a1 + 168);
    long long v54 = *(_OWORD *)(a1 + 152);
    long long v55 = v10;
    long long v11 = *(_OWORD *)(a1 + 72);
    long long v48 = *(_OWORD *)(a1 + 56);
    long long v49 = v11;
    __n128 v12 = *(__n128 *)(a1 + 88);
    long long v13 = *(_OWORD *)(a1 + 104);
    std::string::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      uint64_t v15 = (char *)a4;
    }
    else {
      uint64_t v15 = (char *)a4->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a4->__r_.__value_.__l.__size_;
    }
    std::basic_string<char32_t>::size_type v16 = &v15[size];
    long long v50 = *(_OWORD *)(a1 + 88);
    long long v51 = v13;
    while (1)
    {
      int v17 = (*(uint64_t (**)(void, long long *, char *, char *, char **, char *, char *, uint64_t *, __n128))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), &v48, v7, a3, &v47, v15, v16, &v46, v12);
      BOOL v18 = v47 == v7;
      *(void *)(a1 + 184) += (v47 - v7) >> 2;
      if (v18) {
        goto LABEL_60;
      }
      if (v17 != 1) {
        break;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v19 = a4;
      }
      else {
        unint64_t v19 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = v46 - (void)v19;
      std::string::resize(a4, 2 * (v46 - (void)v19), 0);
      std::string::size_type v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = a4;
      }
      else {
        uint64_t v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      uint64_t v15 = (char *)v22 + v20;
      if ((v21 & 0x80u) != 0) {
        std::string::size_type v21 = a4->__r_.__value_.__l.__size_;
      }
      std::basic_string<char32_t>::size_type v16 = (char *)v22 + v21;
      uint64_t v7 = v47;
      if (v47 >= a3) {
        goto LABEL_60;
      }
    }
    if (v17)
    {
      if (v17 != 3) {
        goto LABEL_60;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = (char *)a4;
      }
      else {
        uint64_t v27 = (char *)a4->__r_.__value_.__r.__words[0];
      }
      std::string::resize(a4, v15 - v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(a4, v7, a3);
    }
    else
    {
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = a4;
      }
      else {
        uint64_t v28 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      std::string::resize(a4, v46 - (void)v28, 0);
    }
  }
  std::string::size_type v29 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  std::string::size_type v30 = a4->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v31 = 22;
  }
  else {
    std::string::size_type v31 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  std::string::resize(a4, v31, 0);
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v32 = v29;
  }
  else {
    std::string::size_type v32 = v30;
  }
  int v33 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  BOOL v34 = v33 < 0;
  if (v33 >= 0) {
    uint64_t v35 = a4;
  }
  else {
    uint64_t v35 = (std::string *)a4->__r_.__value_.__r.__words[0];
  }
  uint64_t v36 = (char *)v35 + v32;
  if (v34) {
    std::string::size_type v37 = a4->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  }
  for (uint64_t i = &v36[v37]; ; uint64_t i = (char *)(v43 + v42))
  {
    int v39 = (*(uint64_t (**)(void, long long *, char *, char *, char **))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), &v48, v36, i, &v47);
    if (v39 != 1) {
      break;
    }
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v40 = a4->__r_.__value_.__r.__words[0];
    }
    unint64_t v41 = &v47[-v40];
    std::string::resize(a4, 2 * (void)&v47[-v40], 0);
    std::string::size_type v42 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0) {
      std::string::size_type v43 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v43 = a4->__r_.__value_.__r.__words[0];
    }
    uint64_t v36 = &v41[v43];
    if ((v42 & 0x80u) != 0) {
      std::string::size_type v42 = a4->__r_.__value_.__l.__size_;
    }
  }
  if (!v39)
  {
    uint64_t v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v45 = a4->__r_.__value_.__r.__words[0];
    }
    std::string::resize(a4, (std::string::size_type)&v36[-v45], 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(a4->__r_.__value_.__l.__data_);
  }
LABEL_62:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  std::string::size_type v44 = *(void *)(a1 + 8);
  if (!v44) {
    goto LABEL_73;
  }
  std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, v44);
}

void sub_1A435DC78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  CFTypeID v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    long long v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    long long v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    std::basic_string<char32_t>::size_type v14 = this;
    if ((v6 & 0x80) != 0) {
      std::basic_string<char32_t>::size_type v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      unsigned char *i = v16;
    }
    unsigned char *i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      __n128 v12 = __p;
    }
    else {
      __n128 v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1A435DE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    unint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  CFTypeID v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    __n128 result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    CFTypeID v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)CFTypeID v4 = v10;
    CFTypeID v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)CFTypeID v4 = 0;
  return result;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    char v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    char v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1A435E094(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void NLUrduWordLanguageModeler::NLUrduWordLanguageModeler(NLUrduWordLanguageModeler *this, const __CFDictionary *a2)
{
  NLAbstractLanguageModeler::NLAbstractLanguageModeler(this, @"ur");
  void *v4 = &unk_1EF7CD528;
  if (CFDictionaryGetValue(a2, @"useLanguageModel") == (const void *)*MEMORY[0x1E4F1CFD0]) {
    NLUrduWordLanguageModeler::loadLanguageModel(this, a2);
  }
}

void sub_1A435E31C(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLUrduWordLanguageModeler::loadLanguageModel(NLUrduWordLanguageModeler *this, CFDictionaryRef theDict)
{
  if (theDict) {
    MutableCFCharacterSetRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  }
  else {
    MutableCFCharacterSetRef Copy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  unint64_t v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F72358], (const void *)*MEMORY[0x1E4F1CFD0]);
  uint64_t valuePtr = 0x3FD0000000000000;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F72390], v5);
  CFRelease(v5);
  uint64_t v9 = 1;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &v9);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F72398], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F723A8], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F723A0], v6);
  CFRelease(v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F723C8], @"ur");
  *((void *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (!*((void *)this + 1))
  {
    uint64_t v8 = NL::CFLogger::sharedInstance(v7);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v8 + 16))(v8, 3, "Could not locate Urdu language model");
  }
}

void NLUrduWordLanguageModeler::~NLUrduWordLanguageModeler(NLUrduWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);

  JUMPOUT(0x1A625B130);
}

void NLGujaratiCharLanguageModeler::NLGujaratiCharLanguageModeler(NLGujaratiCharLanguageModeler *this, CFDictionaryRef theDict)
{
  *((void *)this + 1) = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EF7CD9B0;
  if (theDict) {
    MutableCFCharacterSetRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  }
  else {
    MutableCFCharacterSetRef Copy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  unint64_t v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F723C8], @"gu");
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.NLP");
  if (v4)
  {
    if (BundleWithIdentifier)
    {
      BundleWithIdentifier = CFBundleCopyResourcesDirectoryURL(BundleWithIdentifier);
      CFNumberRef v6 = BundleWithIdentifier;
      if (BundleWithIdentifier)
      {
        CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F72380], BundleWithIdentifier);
        *uint64_t v2 = LMLanguageModelCreate();
        CFRelease(v6);
      }
    }
  }
  if (!*v2)
  {
    uint64_t v7 = NL::CFLogger::sharedInstance(BundleWithIdentifier);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v7 + 16))(v7, 3, "Could not locate Gujarati character language model");
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1A435E638(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

double NLGujaratiCharLanguageModeler::logProbability(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return -INFINITY;
  }
  LMLanguageModelJointProbability();
  return result;
}

double NLGujaratiCharLanguageModeler::logProbability(uint64_t a1, uint64_t *a2)
{
  stringToUTF32Characters(a2, (int **)__p);
  if (*(void *)(a1 + 8))
  {
    LMLanguageModelJointProbability();
    double v4 = v3;
  }
  else
  {
    double v4 = -INFINITY;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1A435E6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NLGujaratiCharLanguageModeler::~NLGujaratiCharLanguageModeler(NLGujaratiCharLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);

  JUMPOUT(0x1A625B130);
}

void NLEnglishWordLanguageModeler::NLEnglishWordLanguageModeler(NLEnglishWordLanguageModeler *this, const __CFDictionary *a2)
{
  NLAbstractLanguageModeler::NLAbstractLanguageModeler(this, @"en_US");
  *(void *)double v3 = &unk_1EF7CD8A8;
  NLEnglishWordLanguageModeler::loadLanguageModel(v3, a2);
}

void sub_1A435E7A4(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLEnglishWordLanguageModeler::loadLanguageModel(NLEnglishWordLanguageModeler *this, CFDictionaryRef theDict)
{
  if (theDict) {
    MutableCFCharacterSetRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  }
  else {
    MutableCFCharacterSetRef Copy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  double v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F723C8], @"en_US");
  *((void *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (!*((void *)this + 1))
  {
    CFNumberRef v6 = *(void (**)(void))(*(void *)NL::CFLogger::sharedInstance(v5) + 16);
    v6();
  }
}

void NLEnglishWordLanguageModeler::~NLEnglishWordLanguageModeler(NLEnglishWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);

  JUMPOUT(0x1A625B130);
}

uint64_t _CFInit_MorphologicalAnalyzerWrapper(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF7CD838;
  return result;
}

uint64_t createMorphologicalAnalyzerWrapper(NLWordAnalyzer *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_MorphologicalAnalyzerWrapper)
  {
    qword_1EC023E28 = 0;
    unk_1EC023E38 = 0u;
    unk_1EC023E48 = 0u;
    g_CFTypeID_MorphologicalAnalyzerWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t NLMorphologicalAnalyzerCreate(const __CFDictionary *a1)
{
  if (a1)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, (const void *)kNLMorphologicalAnalyzerLocaleKey);
    if (Value)
    {
      CFStringRef v2 = Value;
      CFTypeID v3 = CFGetTypeID(Value);
      if (v3 == CFStringGetTypeID())
      {
        CFLocaleRef v4 = CFLocaleCreate(0, v2);
LABEL_9:
        CFLocaleRef v5 = v4;
        goto LABEL_10;
      }
      CFTypeID v7 = CFGetTypeID(v2);
      TypeID = (NL::CFLogger *)CFLocaleGetTypeID();
      if ((NL::CFLogger *)v7 == TypeID)
      {
        CFLocaleRef v4 = (const __CFLocale *)CFRetain(v2);
        goto LABEL_9;
      }
      CFNumberRef v6 = *(void (**)(void))(*(void *)NL::CFLogger::sharedInstance(TypeID) + 16);
    }
    else
    {
      CFNumberRef v6 = *(void (**)(void))(*(void *)NL::CFLogger::sharedInstance(0) + 16);
    }
    v6();
    return 0;
  }
  CFLocaleRef v5 = 0;
LABEL_10:
  CFStringRef v9 = (const __CFString *)CFLocaleGetValue(v5, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  if (CFEqual(v9, @"ar")) {
    operator new();
  }
  if (v5) {
    CFRelease(v5);
  }
  return 0;
}

#error "1A435EB78: call analysis failed (funcsize=41)"

void NLMorphologicalAnalyzerEnumerateLemmasForToken(uint64_t a1, __CFString *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    getUTF8StringFromCFString(a2, __p);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v4 + 16))(&v11, v4, __p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = v11;
    if (v12 != v11)
    {
      LOBYTE(__p[0]) = 0;
      do
      {
        CFStringRef CFStringFromString = createCFStringFromString(v5);
        uint64_t v7 = v5 + 24;
        CFStringRef v8 = createCFStringFromString(v7);
        (*(void (**)(uint64_t, CFStringRef, CFStringRef, void **))(a3 + 16))(a3, CFStringFromString, v8, __p);
        if (CFStringFromString) {
          CFRelease(CFStringFromString);
        }
        if (v8) {
          CFRelease(v8);
        }
        uint64_t v5 = v7 + 24;
      }
      while (v5 != v12);
    }
    __p[0] = &v11;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1A435ECA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NLMorphologicalAnalyzerEnumerateVariantsForToken(uint64_t a1, __CFString *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    getUTF8StringFromCFString(a2, __p);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v4 + 24))(&v11, v4, __p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = v11;
    if (v12 != v11)
    {
      LOBYTE(__p[0]) = 0;
      do
      {
        CFStringRef CFStringFromString = createCFStringFromString(v5);
        uint64_t v7 = v5 + 24;
        CFStringRef v8 = createCFStringFromString(v7);
        (*(void (**)(uint64_t, CFStringRef, CFStringRef, void **))(a3 + 16))(a3, CFStringFromString, v8, __p);
        if (CFStringFromString) {
          CFRelease(CFStringFromString);
        }
        if (v8) {
          CFRelease(v8);
        }
        uint64_t v5 = v7 + 24;
      }
      while (v5 != v12);
    }
    __p[0] = &v11;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1A435EDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MorphologicalAnalyzerWrapper::~MorphologicalAnalyzerWrapper(MorphologicalAnalyzerWrapper *this)
{
  MorphologicalAnalyzerWrapper::~MorphologicalAnalyzerWrapper(this);

  JUMPOUT(0x1A625B130);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CD838;
  CFStringRef v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  CFStringRef v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    CFTypeID v3 = *(void **)a2;
    operator delete(v3);
  }
}

void NL::Resource::enumerateAssetResourcesWithContentType()
{
  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x2000000000;
  char v1 = 0;
  LDEnumerateAssetDataItems();
  _Block_object_dispose(v0, 8);
}

void sub_1A435F068(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL ___ZN2NL8Resource38enumerateAssetResourcesWithContentTypeEPK10__CFLocalePK10__CFStringU13block_pointerFvPS0_PbE_block_invoke(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, const __CFString *a5)
{
  BOOL result = CFStringsAreEqual(a5, *(const __CFString **)(a1 + 48));
  if (result)
  {
    CFURLCopyLastPathComponent(a2);
    operator new();
  }
  return result;
}

void sub_1A435F188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1A625B130](v2, 0x10E1C40F75B5662);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::Resource::createAssetResource(NL::Resource *this, const __CFLocale *a2, const __CFString *a3, const __CFString *a4)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  NL::Resource::enumerateAssetResourcesWithContentType();
  uint64_t v4 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v4;
}

void sub_1A435F264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFStringRef ___ZN2NL8Resource19createAssetResourceEPK10__CFLocalePK10__CFStringS6__block_invoke(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  CFStringRef result = *(const __CFString **)(a2 + 32);
  if (result)
  {
    CFStringRef v6 = *(const __CFString **)(a1 + 40);
    if (v6)
    {
      CFStringRef result = (const __CFString *)CFStringFind(result, v6, 0).location;
      if (result != (const __CFString *)-1)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
        *a3 = 1;
      }
    }
  }
  return result;
}

uint64_t NL::Resource::name(NL::Resource *this)
{
  return *((void *)this + 4);
}

void NL::Resource::createBundleResource(NL::Resource *this, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFString *a5)
{
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.NLP");
  CFBundleCopyResourceURL(BundleWithIdentifier, a2, a3, a4);
  operator new();
}

void sub_1A435F380(_Unwind_Exception *a1)
{
  MEMORY[0x1A625B130](v1, 0x10E1C40F75B5662);
  _Unwind_Resume(a1);
}

NL::Resource *NL::Resource::Resource(NL::Resource *this, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4)
{
  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_1EF7CDE08;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (cf) {
    *((void *)this + 2) = CFRetain(cf);
  }
  if (a3) {
    *((void *)this + 3) = CFRetain(a3);
  }
  if (a4) {
    *((void *)this + 4) = CFRetain(a4);
  }
  return this;
}

void NL::Resource::~Resource(NL::Resource *this)
{
  *(void *)this = &unk_1EF7CDE08;
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  CFTypeID v3 = (const void *)*((void *)this + 3);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 4);
  if (v4) {
    CFRelease(v4);
  }
}

{
  uint64_t vars8;

  NL::Resource::~Resource(this);

  JUMPOUT(0x1A625B130);
}

uint64_t NL::Resource::URL(NL::Resource *this)
{
  return *((void *)this + 2);
}

void NL::Resource::path(const __CFURL **this)
{
}

void NL::Resource::exists(const __CFURL **this)
{
}

void sub_1A435F560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NLHindiWordLanguageModeler::NLHindiWordLanguageModeler(NLHindiWordLanguageModeler *this, const __CFDictionary *a2)
{
  NLAbstractLanguageModeler::NLAbstractLanguageModeler(this, @"hi");
  *(void *)CFTypeID v3 = &unk_1EF7CD6A0;
  NLHindiWordLanguageModeler::loadLanguageModel(v3, a2);
}

void sub_1A435F5D4(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLHindiWordLanguageModeler::loadLanguageModel(NLHindiWordLanguageModeler *this, CFDictionaryRef theDict)
{
  if (theDict) {
    MutableCFCharacterSetRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  }
  else {
    MutableCFCharacterSetRef Copy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  uint64_t v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F72358], (const void *)*MEMORY[0x1E4F1CFD0]);
  uint64_t valuePtr = 0x3FD0000000000000;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F72390], v5);
  CFRelease(v5);
  uint64_t v13 = 1;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &v13);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F72398], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F723A8], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F723A0], v6);
  CFRelease(v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F723C8], @"hi");
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID == CFGetTypeID(@"hi")) {
    applesauce::CF::details::CFString_get_value<false>(@"hi", (uint64_t)__p);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
  }
  uint64_t v8 = _nlpDefaultLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    NLHindiWordLanguageModeler::loadLanguageModel();
  }
  *((void *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (*((void *)this + 1))
  {
    uint64_t v9 = _nlpDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      NLHindiWordLanguageModeler::loadLanguageModel();
    }
  }
  else
  {
    char v10 = _nlpDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      NLHindiWordLanguageModeler::loadLanguageModel();
    }
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1A435F804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NLHindiWordLanguageModeler::removeDiacritics(uint64_t a1@<X1>, char a2@<W2>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "ँ");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "ं");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "़");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(v7[0]);
    if (a2) {
      goto LABEL_22;
    }
  }
  else if (a2)
  {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "्");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
LABEL_22:
  std::string::basic_string[abi:ne180100]<0>(v7, "ः");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1A435FA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void NLHindiWordLanguageModeler::~NLHindiWordLanguageModeler(NLHindiWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);

  JUMPOUT(0x1A625B130);
}

void NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(NLAbstractOrthographyConvertor *this)
{
}

uint64_t NLAbstractOrthographyConvertor::isNasal()
{
  return 0;
}

void NLAbstractOrthographyConvertor::convertToModernOrthography(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void NLConvertBW2UTF::NLConvertBW2UTF(NLConvertBW2UTF *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 4nlp::CFScopedPtr<__CFNumber const*>::reset(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 1std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 1065353216;
}

uint64_t NLConvertBW2UTF::loadBw2utf(uint64_t a1)
{
  v22[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v20);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  uint64_t v2 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(v20[0] - 24)));
    CFTypeID v3 = std::locale::use_facet(v16, v2);
    unsigned __int8 v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(v16);
    CFNumberRef v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, (uint64_t)__p, v4);
    if ((*((unsigned char *)v5 + *(void *)(*v5 - 24) + 32) & 5) != 0) {
      break;
    }
    trim((unint64_t)__p, v16);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)&v16[0].__locale_;
    uint64_t v19 = v17;
    std::string::basic_string[abi:ne180100]<0>(v16, ";");
    BOOL v6 = startswith((unsigned __int8 *)__p, (unsigned __int8 *)v16);
    BOOL v7 = v6;
    if (SHIBYTE(v17) < 0)
    {
      operator delete(v16[0].__locale_);
      if (!v7) {
        goto LABEL_9;
      }
    }
    else if (!v6)
    {
LABEL_9:
      v16[0].__locale_ = 0;
      v16[1].__locale_ = 0;
      uint64_t v17 = 0;
      splitWithChar((uint64_t)__p, 9u, (uint64_t)v16);
      if (*((char *)v16[0].__locale_ + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v16[0].__locale_, *((void *)v16[0].__locale_ + 1));
      }
      else
      {
        long long v8 = *(_OWORD *)v16[0].__locale_;
        v15.__r_.__value_.__r.__words[2] = *((void *)v16[0].__locale_ + 2);
        *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "\\"");
      std::string::basic_string[abi:ne180100]<0>(v12, "");
      replaceAll(&v15, (char *)&__str, (uint64_t)v12);
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (*((char *)v16[0].__locale_ + 47) < 0) {
        std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v16[0].__locale_ + 3), *((void *)v16[0].__locale_ + 4));
      }
      else {
        std::string __str = *(std::string *)((unsigned char *)v16[0].__locale_ + 1);
      }
      v12[0] = &v15;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v15, (uint64_t)&std::piecewise_construct, (long long **)v12);
      std::string::operator=((std::string *)(v9 + 40), &__str);
      v12[0] = &__str;
      char v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 40, (unsigned __int8 *)&__str, (uint64_t)&std::piecewise_construct, (long long **)v12);
      std::string::operator=((std::string *)(v10 + 40), &v15);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    }
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v20 + *(void *)(v20[0] - 24)), *(_DWORD *)&v21[*(void *)(v20[0] - 24) + 16] | 4);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  v20[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1A625AEE0](v21);
  std::istream::~istream();
  return MEMORY[0x1A625B0A0](v22);
}

void sub_1A435FF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::locale a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  CFTypeID v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  BOOL v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x1A625AED0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1A43601A4(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1A625B0A0](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1A625AEE0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1A625B0A0](a1 + 53);
  return a1;
}

void NLConvertBW2UTF::bw2utf(void *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = a3;
  LODWORD(a3) = *(char *)(a2 + 23);
  if ((a3 & 0x80000000) != 0)
  {
    uint64_t v7 = *(unsigned char **)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6)
    {
LABEL_3:
      if ((a3 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v7 = (unsigned char *)a2;
    if (!*(unsigned char *)(a2 + 23)) {
      goto LABEL_3;
    }
  }
  do
  {
    if (*v7 == 79) {
      *uint64_t v7 = 62;
    }
    ++v7;
    --v6;
  }
  while (v6);
  LOBYTE(a3) = *(unsigned char *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_4:
    uint64_t v8 = a3;
    uint64_t v9 = (unsigned char *)a2;
    if (!(_BYTE)a3) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v9 = *(unsigned char **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  if (!v8)
  {
LABEL_5:
    if ((a3 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
  do
  {
LABEL_26:
    if (*v9 == 87) {
      *uint64_t v9 = 38;
    }
    ++v9;
    --v8;
  }
  while (v8);
  LOBYTE(a3) = *(unsigned char *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_6:
    uint64_t v10 = a3;
    uint64_t v11 = (unsigned char *)a2;
    if (!(_BYTE)a3) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v11 = *(unsigned char **)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  if (!v10)
  {
LABEL_7:
    if ((a3 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
  do
  {
LABEL_31:
    if (*v11 == 73) {
      *uint64_t v11 = 60;
    }
    ++v11;
    --v10;
  }
  while (v10);
  LOBYTE(a3) = *(unsigned char *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_8:
    uint64_t v12 = a3;
    char v13 = (unsigned char *)a2;
    if (!(_BYTE)a3) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  char v13 = *(unsigned char **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  if (!v12)
  {
LABEL_9:
    if ((a3 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
  do
  {
LABEL_36:
    if (*v13 == 86) {
      unsigned char *v13 = 42;
    }
    ++v13;
    --v12;
  }
  while (v12);
  LOBYTE(a3) = *(unsigned char *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_10:
    uint64_t v14 = a3;
    std::string v15 = (unsigned char *)a2;
    if (!(_BYTE)a3) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  std::string v15 = *(unsigned char **)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  if (!v14)
  {
LABEL_11:
    if ((a3 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
  do
  {
LABEL_41:
    if (*v15 == 99) {
      *std::string v15 = 36;
    }
    ++v15;
    --v14;
  }
  while (v14);
  LOBYTE(a3) = *(unsigned char *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_12:
    uint64_t v16 = a3;
    uint64_t v17 = (unsigned char *)a2;
    if (!(_BYTE)a3) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v17 = *(unsigned char **)a2;
  uint64_t v16 = *(void *)(a2 + 8);
  if (!v16)
  {
LABEL_13:
    if ((a3 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
  do
  {
LABEL_46:
    if (*v17 == 81) {
      *uint64_t v17 = 125;
    }
    ++v17;
    --v16;
  }
  while (v16);
  LOBYTE(a3) = *(unsigned char *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_14:
    uint64_t v18 = a3;
    uint64_t v19 = (unsigned char *)a2;
    if (!(_BYTE)a3) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v19 = *(unsigned char **)a2;
  uint64_t v18 = *(void *)(a2 + 8);
  if (!v18)
  {
LABEL_15:
    if ((a3 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_55;
  }
  do
  {
LABEL_51:
    if (*v19 == 67) {
      *uint64_t v19 = 39;
    }
    ++v19;
    --v18;
  }
  while (v18);
  LOBYTE(a3) = *(unsigned char *)(a2 + 23);
  if ((a3 & 0x80) == 0)
  {
LABEL_16:
    uint64_t v20 = a3;
    std::string::size_type v21 = (unsigned char *)a2;
    if (!(_BYTE)a3) {
      goto LABEL_17;
    }
    goto LABEL_56;
  }
LABEL_55:
  std::string::size_type v21 = *(unsigned char **)a2;
  uint64_t v20 = *(void *)(a2 + 8);
  if (!v20)
  {
LABEL_17:
    if ((a3 & 0x80) == 0) {
      goto LABEL_18;
    }
LABEL_60:
    uint64_t v22 = *(unsigned char **)a2;
    a3 = *(std::string **)(a2 + 8);
    if (!a3) {
      goto LABEL_64;
    }
    goto LABEL_61;
  }
  do
  {
LABEL_56:
    if (*v21 == 77) {
      *std::string::size_type v21 = 124;
    }
    ++v21;
    --v20;
  }
  while (v20);
  LOBYTE(a3) = *(unsigned char *)(a2 + 23);
  if ((a3 & 0x80) != 0) {
    goto LABEL_60;
  }
LABEL_18:
  a3 = (std::string *)a3;
  uint64_t v22 = (unsigned char *)a2;
  if (!(_BYTE)a3) {
    goto LABEL_64;
  }
  do
  {
LABEL_61:
    if (*v22 == 76) {
      unsigned char *v22 = 123;
    }
    ++v22;
    a3 = (std::string *)((char *)a3 - 1);
  }
  while (a3);
LABEL_64:
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  for (std::string::size_type i = 0; ; ++i)
  {
    std::string::size_type v24 = *(char *)(a2 + 23) < 0 ? *(void *)(a2 + 8) : *(unsigned __int8 *)(a2 + 23);
    if (v24 <= i) {
      break;
    }
    std::string::basic_string(&v32, (const std::string *)a2, i, 1uLL, (std::allocator<char> *)&v33);
    if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a1, (unsigned __int8 *)&v32))
    {
      int v33 = &v32;
      long long v25 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&v32, (uint64_t)&std::piecewise_construct, (long long **)&v33);
      uint64_t v28 = (std::string *)*((void *)v25 + 5);
      long long v26 = v25 + 40;
      uint64_t v27 = v28;
      int v29 = (char)v26[23];
      if (v29 >= 0) {
        std::string::size_type v30 = (std::string *)v26;
      }
      else {
        std::string::size_type v30 = v27;
      }
      if (v29 >= 0) {
        std::string::size_type size = v26[23];
      }
      else {
        std::string::size_type size = *((void *)v26 + 1);
      }
    }
    else
    {
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = &v32;
      }
      else {
        std::string::size_type v30 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v32.__r_.__value_.__l.__size_;
      }
    }
    std::string::append(v5, (const std::string::value_type *)v30, size);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1A436061C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void NLConvertBW2UTF::utf2bw(std::string *a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v6, "\u202B");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "\u202C");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "\u200F");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "٠");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "١");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "٢");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "٣");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "٤");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "٥");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "٦");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "٧");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "٨");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "٩");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  replaceAll(a1, (char *)v6, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  operator new();
}

void sub_1A4360ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a23);
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(a1);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x1A625AEF0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    char v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1A436112C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1A43610ECLL);
  }
  __cxa_rethrow();
}

void sub_1A43611A8(_Unwind_Exception *a1)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (std::string::size_type i = *v14; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *long long v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A4361440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1A43614E4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void NLCompositeTransliteratorException::NLCompositeTransliteratorException(NLCompositeTransliteratorException *this, const __CFLocale *a2, const __CFURL *a3)
{
  *(void *)this = 0;
  ExceptionList = (NL::StringMap *)NLCompositeTransliteratorException::loadExceptionList(this, a2, a3);
  std::unique_ptr<NL::StringMap>::reset[abi:ne180100]((NL::StringMap **)this, ExceptionList);
}

void sub_1A436158C(_Unwind_Exception *a1)
{
  std::unique_ptr<NL::StringMap>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

NL::StringMap *std::unique_ptr<NL::StringMap>::reset[abi:ne180100](NL::StringMap **a1, NL::StringMap *a2)
{
  CFStringRef result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::StringMap::~StringMap(result);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

uint64_t NLCompositeTransliteratorException::loadExceptionList(NLCompositeTransliteratorException *this, CFLocaleRef locale, const __CFURL *a3)
{
  uint64_t v24 = 0;
  long long v25 = &v24;
  uint64_t v26 = 0x3002000000;
  uint64_t v27 = __Block_byref_object_copy__0;
  uint64_t v28 = __Block_byref_object_dispose__0;
  CFTypeRef v29 = 0;
  if (a3)
  {
    CFStringRef Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    uint64_t v8 = Mutable;
    if (Mutable)
    {
      CFStringAppend(Mutable, Value);
      CFStringAppend(v8, @"_exceptions.dat");
      CFURLRef v23 = CFURLCreateCopyAppendingPathComponent(v6, a3, v8, 0);
      getFileSystemRepresentationFromCFURL(v23);
    }
  }
  else
  {
    uint64_t v16 = MEMORY[0x1E4F143A8];
    uint64_t v17 = 0x40000000;
    float v18 = ___ZN34NLCompositeTransliteratorException17loadExceptionListEPK10__CFLocalePK7__CFURL_block_invoke;
    BOOL v19 = &unk_1E5B36240;
    unint64_t v20 = &v24;
    LMEnumerateAssetDataItems();
  }
  CFStringRef v9 = (const __CFString *)v25[5];
  if (v9)
  {
    getUTF8StringFromCFString(v9, __p);
    NL::StringMap::createWithFile();
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "Could not locate exception list for: ");
  composeErrorMessageForLocale(locale, (const void **)v14, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v11 = NL::CFLogger::sharedInstance(v10);
  uint8x8_t v12 = __p;
  if (v22 < 0) {
    uint8x8_t v12 = (void **)__p[0];
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v11 + 16))(v11, 3, "%s", (const char *)v12);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  _Block_object_dispose(&v24, 8);
  if (v29) {
    CFRelease(v29);
  }
  return 0;
}

void sub_1A4361920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Block_object_dispose((const void *)(v40 - 112), 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v39 + 40), 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorException::~NLCompositeTransliteratorException(NL::StringMap **this)
{
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(result + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v2;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void ___ZN34NLCompositeTransliteratorException17loadExceptionListEPK10__CFLocalePK7__CFURL_block_invoke(uint64_t a1, CFURLRef url, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
  if (PathComponent)
  {
    CFStringRef v10 = PathComponent;
    if (CFStringsAreEqual(PathComponent, @"exceptions.dat"))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
      CFStringRef v12 = CFURLCopyPath(url);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v11 + 40), v12);
      *a6 = 1;
    }
    CFRelease(v10);
  }
}

void sub_1A4361AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorException::exceptionCandidatesForInput(uint64_t **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  NLOSSignPostexceptionCandidatesForInput::NLOSSignPostexceptionCandidatesForInput((NLOSSignPostexceptionCandidatesForInput *)&v15);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*a1)
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    if (v6)
    {
      NL::StringMap::get(*a1, (const void **)a2, &v14);
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      char v8 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v14.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v11 = 0;
        CFStringRef v12 = 0;
        uint64_t v13 = 0;
        splitWithChar((uint64_t)&v14, 0x2Cu, (uint64_t)&v11);
        if (v11 != v12)
        {
          if (*((char *)v11 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((void *)v11 + 1));
          }
          else
          {
            long long v9 = *v11;
            __p.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
          }
          operator new();
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        char v8 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      }
      if (v8 < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
  }
  NLOSSignPostexceptionCandidatesForInput::~NLOSSignPostexceptionCandidatesForInput(&v15);
}

void sub_1A4361D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,os_signpost_id_t a24)
{
  a9 = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a23 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *(void **)v24;
  if (*(void *)v24)
  {
    *(void *)(v24 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v26;
    operator delete(v26);
  }
  NLOSSignPostexceptionCandidatesForInput::~NLOSSignPostexceptionCandidatesForInput(&a24);
  _Unwind_Resume(a1);
}

void NLOSSignPostexceptionCandidatesForInput::NLOSSignPostexceptionCandidatesForInput(NLOSSignPostexceptionCandidatesForInput *this)
{
  uint64_t v2 = _nlpSignpostLog();
  *(void *)this = os_signpost_id_make_with_pointer(v2, this);
  uint64_t v3 = _nlpSignpostLog();
  os_signpost_id_t v4 = *(void *)this;
  if ((unint64_t)(*(void *)this - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    char v5 = v3;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A431F000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "exceptionCandidatesForInput", (const char *)&unk_1A441379D, v6, 2u);
    }
  }
}

void NLOSSignPostexceptionCandidatesForInput::~NLOSSignPostexceptionCandidatesForInput(os_signpost_id_t *this)
{
  uint64_t v2 = _nlpSignpostLog();
  os_signpost_id_t v3 = *this;
  if (*this - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)char v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A431F000, v4, OS_SIGNPOST_INTERVAL_END, v3, "exceptionCandidatesForInput", (const char *)&unk_1A441379D, v5, 2u);
    }
  }
}

void nlp::CFScopedPtr<__CFString *>::reset(const void **a1, const void *a2)
{
  os_signpost_id_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFURL const*>::reset(const void **a1, const void *a2)
{
  os_signpost_id_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t NLMessageIntentCandidate::NLMessageIntentCandidate(uint64_t a1, int a2, uint64_t a3, double a4)
{
  *(_DWORD *)a1 = a2;
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 8, a3);
  *(double *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a4;
  return a1;
}

uint64_t NLMessageIntentCandidate::getMessageIntentType(NLMessageIntentCandidate *this)
{
  return *(unsigned int *)this;
}

uint64_t NLMessageIntentCandidate::getAttributes@<X0>(NLMessageIntentCandidate *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,std::string>::unordered_map(a2, (uint64_t)this + 8);
}

double NLMessageIntentCandidate::getScore(NLMessageIntentCandidate *this)
{
  return *((double *)this + 6);
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(unsigned __int8 **)(a2 + 16); i; std::string::size_type i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1A4362030(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  os_signpost_id_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    char v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      CFStringRef v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v4 + 5));
        CFStringRef v10 = (void *)*v8;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v8);
        os_signpost_id_t v4 = (uint64_t *)*v4;
        if (!v10) {
          break;
        }
        char v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(a1, (long long *)v4 + 1);
    os_signpost_id_t v4 = (uint64_t *)*v4;
  }
}

void sub_1A4362120(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1A436213C(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(void *a1, void *a2)
{
  os_signpost_id_t v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<false>(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  uint64_t v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    float v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? std::equal_to<std::string>::operator()[abi:ne180100](v6, v18 + 16, a3) : 0;
        if (v19 & (v22 ^ 1)) {
          break;
        }
        v19 |= v22;
        uint64_t v17 = *(unsigned __int8 **)v17;
        float v18 = *(unsigned __int8 **)v17;
      }
      while (*(void *)v17);
    }
  }
  return v17;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * vstd::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a1 + 16;
      unint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            uint8x8_t v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              unint64_t v15 = v12;
              while (1)
              {
                int v16 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v12 + 16, v14 + 16);
                uint64_t v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                uint8x8_t v14 = *(unsigned __int8 **)v17;
                unint64_t v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }
              uint8x8_t v14 = *(unsigned __int8 **)v15;
              uint64_t v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              uint64_t v17 = v12;
            }
            *uint64_t v7 = v14;
            *(void *)uint64_t v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }
          unint64_t v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1A4362724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1A43627B8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void NLAbstractOrthographyChecker::~NLAbstractOrthographyChecker(NLAbstractOrthographyChecker *this)
{
}

uint64_t NLAbstractOrthographyChecker::checkSpelling(NLAbstractOrthographyChecker *this, const __CFString *a2, const __CFString **a3, const __CFString **a4)
{
  return 1;
}

void NL::CFLogger::CFLogger(NL::CFLogger *this)
{
  Boolean keyExistsAndHasValidFormat = 0;
  AppIntegerCFStringRef Value = CFPreferencesGetAppIntegerValue(@"NLDebug", (CFStringRef)*MEMORY[0x1E4F1D3B8], &keyExistsAndHasValidFormat);
  if (AppIntegerValue > 7 || AppIntegerValue < 0 || keyExistsAndHasValidFormat == 0) {
    int v5 = 3;
  }
  else {
    int v5 = AppIntegerValue;
  }
  *(void *)this = &unk_1EF7CDDA8;
  *((_DWORD *)this + 2) = v5;
  operator new[]();
}

uint64_t NL::CFLogger::sharedInstance(NL::CFLogger *this)
{
  if (NL::CFLogger::sharedInstance(void)::onceToken != -1) {
    dispatch_once(&NL::CFLogger::sharedInstance(void)::onceToken, &__block_literal_global_1);
  }
  return NL::CFLogger::sharedInstance(void)::instance;
}

void ___ZN2NL8CFLogger14sharedInstanceEv_block_invoke()
{
}

void sub_1A436293C(_Unwind_Exception *a1)
{
  MEMORY[0x1A625B130](v1, 0x1091C400F2A5985);
  _Unwind_Resume(a1);
}

void NL::CFLogger::log(NL::CFLogger *this, uint64_t a2, const char *a3, ...)
{
  va_start(va, a3);
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 2) >= (int)a2)
  {
    vsnprintf(__str, 0x400uLL, a3, va);
    CFStringRef v5 = CFStringCreateWithCString(0, __str, 0x8000100u);
    (*(void (**)(NL::CFLogger *, uint64_t, CFStringRef))(*(void *)this + 24))(this, a2, v5);
    CFRelease(v5);
  }
}

uint64_t NL::CFLogger::log(uint64_t this, int a2, const __CFString *a3)
{
  if (*(_DWORD *)(this + 8) >= a2) {
    return CFLog();
  }
  return this;
}

void NL::CFLogger::~CFLogger(NL::CFLogger *this)
{
  *(void *)this = &unk_1EF7CDDA8;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    MEMORY[0x1A625B110](v1, 0x1000C8077774924);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CDDA8;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    MEMORY[0x1A625B110](v1, 0x1000C8077774924);
  }

  JUMPOUT(0x1A625B130);
}

NL::ParseBuilder *NL::ParseBuilder::ParseBuilder(NL::ParseBuilder *a1, void *a2, void *a3)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v4 = a2[1];
  *((void *)a1 + 2) = *a2;
  *((void *)a1 + 3) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[1];
  *((void *)a1 + 4) = *a3;
  *((void *)a1 + 5) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 7) = 0;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  uint8x8_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NL::EntityConverter::EntityConverter((char *)a1 + 64, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *((void *)a1 + 13) = 0;
  *((void *)a1 + 13) = NLGraphStructureStackCreate();
  NL::ParseBuilder::reset(a1);
  return a1;
}

void sub_1A4362BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  unint64_t v12 = (std::__shared_weak_count *)v10[7];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unint64_t v13 = (std::__shared_weak_count *)v10[5];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint8x8_t v14 = (std::__shared_weak_count *)v10[3];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  unint64_t v15 = (std::__shared_weak_count *)v10[1];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void NL::ParseBuilder::reset(NL::ParseBuilder *this)
{
  NLGraphStructureStackReset(*((void *)this + 13));
  NL::ParserContext::reset(*((NL::ParserContext **)this + 2));
  uint64_t v2 = operator new(0x38uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1EF7CE620;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = 0;
  int8x8_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  *((void *)this + 1) = v2;
  *((_DWORD *)v2 + 6) = 0;
  *(void *)this = v2 + 3;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void NL::EntityConverter::~EntityConverter(NL::Transcriber **this)
{
  std::unique_ptr<NL::Transcriber>::reset[abi:ne180100](this + 4, 0);
  std::unique_ptr<NL::NumericConverter>::reset[abi:ne180100](this + 3, 0);
  uint64_t v2 = (uint64_t)this[2];
  this[2] = 0;
  if (v2) {
    std::default_delete<NL::DateConverter>::operator()[abi:ne180100]((uint64_t)(this + 2), v2);
  }
  int8x8_t v3 = (std::__shared_weak_count *)this[1];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void NL::ParseBuilder::~ParseBuilder(NL::ParseBuilder *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (v2) {
    NLGraphStructureStackRelease(v2);
  }
  std::unique_ptr<NL::Transcriber>::reset[abi:ne180100]((NL::Transcriber **)this + 12, 0);
  std::unique_ptr<NL::NumericConverter>::reset[abi:ne180100]((NL::NumericConverter **)this + 11, 0);
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 1std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  if (v3) {
    std::default_delete<NL::DateConverter>::operator()[abi:ne180100]((uint64_t)this + 80, v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void NL::ParseBuilder::enumerateAttributeNamesWithType(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4)
{
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v67, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else {
    std::string v67 = *a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v66 = *(std::string *)a3;
  }
  std::string::basic_string[abi:ne180100]<0>(v64, "FROM");
  if (endswith((uint64_t *)a2, (uint64_t *)v64))
  {
    BOOL v8 = 1;
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "OF");
  if (startswith((unsigned __int8 *)a2, (unsigned __int8 *)v62))
  {
    BOOL v8 = 1;
    goto LABEL_18;
  }
  int v9 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v9 & 0x80000000) == 0)
  {
    unint64_t v10 = a2;
    if (v9 != 2) {
      goto LABEL_17;
    }
LABEL_16:
    BOOL v8 = LOWORD(v10->__r_.__value_.__l.__data_) == 22850;
    goto LABEL_18;
  }
  if (a2->__r_.__value_.__l.__size_ == 2)
  {
    unint64_t v10 = (std::string *)a2->__r_.__value_.__r.__words[0];
    goto LABEL_16;
  }
LABEL_17:
  BOOL v8 = 0;
LABEL_18:
  if (v63 < 0) {
    operator delete(v62[0]);
  }
LABEL_20:
  if (v65 < 0)
  {
    operator delete(v64[0]);
    if (v8) {
      goto LABEL_24;
    }
  }
  else if (v8)
  {
    goto LABEL_24;
  }
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
    if (size == 2 && *(_WORD *)a2->__r_.__value_.__l.__data_ == 20308) {
      goto LABEL_142;
    }
    if (size == 5)
    {
      unint64_t v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_33:
      int data = (int)v12->__r_.__value_.__l.__data_;
      int v15 = v12->__r_.__value_.__s.__data_[4];
      if (data == 1414415699 && v15 == 79) {
        goto LABEL_142;
      }
    }
  }
  else
  {
    if (*((unsigned char *)&a2->__r_.__value_.__s + 23) != 2)
    {
      unint64_t v12 = a2;
      if (*((unsigned char *)&a2->__r_.__value_.__s + 23) != 5) {
        goto LABEL_40;
      }
      goto LABEL_33;
    }
    if (LOWORD(a2->__r_.__value_.__l.__data_) == 20308) {
      goto LABEL_142;
    }
  }
LABEL_40:
  std::string::basic_string[abi:ne180100]<0>(v64, "WITH");
  BOOL v17 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)v64);
  BOOL v18 = v17;
  if (v65 < 0)
  {
    operator delete(v64[0]);
    if (v18) {
      goto LABEL_42;
    }
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>(v64, "SHARED");
    BOOL v20 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)v64);
    BOOL v21 = v20;
    if (v65 < 0)
    {
      operator delete(v64[0]);
      if (v21)
      {
LABEL_48:
        std::string::basic_string[abi:ne180100]<0>(v64, "WITH");
        BOOL v22 = endswith((uint64_t *)a2, (uint64_t *)v64);
        if (v65 < 0) {
          operator delete(v64[0]);
        }
        uint64_t v23 = *(void *)(*(void *)(a1 + 16) + 48);
        if (v22)
        {
          if ((v23 & 0x10000000000) != 0) {
            goto LABEL_142;
          }
          MEMORY[0x1A625AE00](&v67, "SENDER");
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v55, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
          }
          else {
            std::string v55 = v67;
          }
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v54, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
          }
          else {
            std::string v54 = v66;
          }
          (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v55, &v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v54.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_142;
          }
          uint64_t v26 = &v55;
          goto LABEL_141;
        }
        if ((v23 & 0x10000000000) == 0)
        {
          if ((v23 & 4) == 0)
          {
            MEMORY[0x1A625AE00](&v67, "SENDER");
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v53, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
            }
            else {
              std::string v53 = v67;
            }
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v52, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
            }
            else {
              std::string v52 = v66;
            }
            (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v53, &v52);
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v52.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_142;
            }
            uint64_t v26 = &v53;
            goto LABEL_141;
          }
          unint64_t v11 = "RECIPIENT.HasShared";
LABEL_179:
          std::string::size_type v30 = &v66;
          goto LABEL_144;
        }
        goto LABEL_124;
      }
    }
    else if (v20)
    {
      goto LABEL_48;
    }
    int v24 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v24 < 0)
    {
      if (a2->__r_.__value_.__l.__size_ != 8)
      {
LABEL_78:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "FROMTO"))
        {
          uint64_t v27 = *(void *)(a1 + 16);
          uint64_t v28 = *(void *)(v27 + 48);
          if ((v28 & 4) == 0)
          {
            BOOL v29 = (*(void *)(v27 + 48) & 0x12) != 0;
            if ((v28 & 0x10000000000) != 0) {
              BOOL v29 = 0;
            }
            unint64_t v11 = "SENDER";
            std::string::size_type v30 = &v67;
            if ((v28 & 0x400) != 0 || v29) {
              goto LABEL_144;
            }
            if ((v28 & 0x10000000414) != 0)
            {
              unint64_t v11 = "RECIPIENT";
LABEL_144:
              MEMORY[0x1A625AE00](v30, v11);
              goto LABEL_145;
            }
            if (((v28 & 0x6000000000) != 0 || *(_DWORD *)(v27 + 40) == 3) && *(void *)(v27 + 88)) {
              goto LABEL_144;
            }
            MEMORY[0x1A625AE00](&v67, "SENDER");
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v51, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
            }
            else {
              std::string v51 = v67;
            }
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v50, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
            }
            else {
              std::string v50 = v66;
            }
            (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v51, &v50);
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v50.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_142;
            }
            uint64_t v26 = &v51;
LABEL_141:
            operator delete(v26->__r_.__value_.__l.__data_);
            goto LABEL_142;
          }
          goto LABEL_24;
        }
        std::string::basic_string[abi:ne180100]<0>(v64, "AUTHORED");
        BOOL v31 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)v64);
        if (v65 < 0) {
          operator delete(v64[0]);
        }
        if (v31)
        {
          uint64_t v32 = *(void *)(a1 + 16);
          uint64_t v33 = *(void *)(v32 + 48);
          if ((v33 & 0xC0000018000) == 0
            && *(_DWORD *)(v32 + 40) != 3
            && ((v33 & 0x4000) == 0 || (v33 & 0x300) == 0 && (*(_DWORD *)(v32 + 88) & 0xFFFFFFFE) == 0))
          {
            std::string::operator=(&v67, a2);
            goto LABEL_145;
          }
          MEMORY[0x1A625AE00](&v67, "SENDER");
          if ((*(unsigned char *)(*(void *)(a1 + 16) + 53) & 1) == 0) {
            goto LABEL_145;
          }
          goto LABEL_178;
        }
        std::string::basic_string[abi:ne180100]<0>(v64, "OWNER");
        BOOL v34 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)v64);
        if (v65 < 0) {
          operator delete(v64[0]);
        }
        uint64_t v35 = *(NL::ParserContext **)(a1 + 16);
        if (v34)
        {
          uint64_t v36 = *((void *)v35 + 6);
          if ((v36 & 0x1C012) == 0)
          {
            if ((v36 & 4) == 0) {
              goto LABEL_145;
            }
            MEMORY[0x1A625AE00](&v67, "RECEIVEMOD");
            unint64_t v11 = "HasReceived";
            goto LABEL_179;
          }
LABEL_97:
          MEMORY[0x1A625AE00](&v67, "SENTMOD");
          unint64_t v11 = "HasSent";
          goto LABEL_179;
        }
        if (!NL::ParserContext::currentActionContainsSent(v35)
          || !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "HasUserSent"))
        {
          if (NL::ParserContext::currentActionContainsReceived(*(NL::ParserContext **)(a1 + 16))
            && std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "HasUserReceived"))
          {
            goto LABEL_142;
          }
          if (std::string::find[abi:ne180100]((uint64_t *)a2, "USERSENT", 0) != -1)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "Received"))
            {
              goto LABEL_124;
            }
LABEL_142:
            unint64_t v11 = "RECIPIENT";
            goto LABEL_143;
          }
          if (std::string::find[abi:ne180100]((uint64_t *)a2, "USERRECEIVED", 0) == -1)
          {
            std::string::basic_string[abi:ne180100]<0>(v64, "AIRDROPPED");
            if (startswith((unsigned __int8 *)a2, (unsigned __int8 *)v64))
            {
              BOOL v39 = 1;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v62, "MESSAGED");
              if (startswith((unsigned __int8 *)a2, (unsigned __int8 *)v62))
              {
                BOOL v39 = 1;
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v48, "MAILED");
                if (startswith((unsigned __int8 *)a2, (unsigned __int8 *)v48))
                {
                  BOOL v39 = 1;
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(v46, "POSTED");
                  BOOL v39 = startswith((unsigned __int8 *)a2, (unsigned __int8 *)v46);
                  if (v47 < 0) {
                    operator delete(v46[0]);
                  }
                }
                if (v49 < 0) {
                  operator delete(v48[0]);
                }
              }
              if (v63 < 0) {
                operator delete(v62[0]);
              }
            }
            if (v65 < 0) {
              operator delete(v64[0]);
            }
            if (v39)
            {
              unint64_t v11 = "TRANSPORT";
              goto LABEL_143;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "USERACTION"))
            {
              uint64_t v40 = *(void *)(*(void *)(a1 + 16) + 48);
              if ((v40 & 0x40040004000) == 0x40000000)
              {
                MEMORY[0x1A625AE00](&v67, "USERCREATED");
                unint64_t v11 = "HasUserCreated";
                goto LABEL_179;
              }
              if ((v40 & 0x100000000) != 0)
              {
                MEMORY[0x1A625AE00](&v67, "USERMODIFIED");
                unint64_t v11 = "HasUserModified";
                goto LABEL_179;
              }
              if ((v40 & 0x800000000) != 0)
              {
                MEMORY[0x1A625AE00](&v67, "USERPRINTED");
                unint64_t v11 = "HasUserPrinted";
                goto LABEL_179;
              }
              if ((v40 & 0x8000000800) != 0) {
                goto LABEL_145;
              }
              if ((v40 & 0x2070C0000012) != 0) {
                goto LABEL_124;
              }
              if ((v40 & 0x404) == 0) {
                goto LABEL_145;
              }
LABEL_225:
              MEMORY[0x1A625AE00](&v67, "RECIPIENT");
              unint64_t v11 = "HasUserReceived";
              goto LABEL_179;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "USERCREATED"))
            {
              if ((*(_DWORD *)(*(void *)(a1 + 16) + 48) & 0x1C000) == 0) {
                goto LABEL_145;
              }
              goto LABEL_97;
            }
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "SENTMOD"))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "RECEIVEMOD"))
              {
                if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "MAILSENDER")) {
                  goto LABEL_145;
                }
                MEMORY[0x1A625AE00](&v67, "KIND");
                unint64_t v11 = "MailKind";
                goto LABEL_179;
              }
              uint64_t v43 = *(void *)(*(void *)(a1 + 16) + 48);
              if ((v43 & 0x1E000800041ELL) != 0 && (v43 & 0x10000000010) == 0) {
                goto LABEL_145;
              }
              goto LABEL_225;
            }
            uint64_t v41 = *(void *)(a1 + 16);
            uint64_t v42 = *(void *)(v41 + 48);
            if ((v42 & 0x8000000000) == 0 && ((v42 & 0x1E0008000C1ELL) == 0 || (v42 & 0x10000000010) != 0)) {
              goto LABEL_124;
            }
            if ((v42 & 4) != 0 || !*(void *)(v41 + 88)) {
              goto LABEL_145;
            }
LABEL_116:
            unint64_t v11 = "";
            goto LABEL_143;
          }
        }
LABEL_24:
        unint64_t v11 = "SENDER";
LABEL_143:
        std::string::size_type v30 = &v67;
        goto LABEL_144;
      }
      long long v25 = (std::string::__raw *)a2->__r_.__value_.__r.__words[0];
    }
    else
    {
      long long v25 = (std::string::__raw *)a2;
      if (v24 != 8) {
        goto LABEL_78;
      }
    }
    if (v25->__words[0] == 0x544E455352455355)
    {
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "Contact")) {
        goto LABEL_142;
      }
      if ((*(unsigned char *)(*(void *)(a1 + 16) + 53) & 0x10) == 0)
      {
LABEL_124:
        MEMORY[0x1A625AE00](&v67, "SENDER");
LABEL_178:
        unint64_t v11 = "HasUserSent";
        goto LABEL_179;
      }
      goto LABEL_116;
    }
    goto LABEL_78;
  }
  if (!v17) {
    goto LABEL_46;
  }
LABEL_42:
  uint64_t v19 = *(void *)(*(void *)(a1 + 16) + 48);
  if ((v19 & 0x8000000000) == 0)
  {
    MEMORY[0x1A625AE00](&v67, "SENDER");
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v57, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    }
    else {
      std::string v57 = v67;
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v56, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    }
    else {
      std::string v56 = v66;
    }
    (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v57, &v56);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_142;
    }
    uint64_t v26 = &v57;
    goto LABEL_141;
  }
  if ((v19 & 0x10000000000) == 0)
  {
    MEMORY[0x1A625AE00](&v67, "SENDER");
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v59, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    }
    else {
      std::string v59 = v67;
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v58, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    }
    else {
      std::string v58 = v66;
    }
    (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v59, &v58);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_142;
    }
    uint64_t v26 = &v59;
    goto LABEL_141;
  }
  MEMORY[0x1A625AE00](&v67, "RECIPIENT");
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v61, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  }
  else {
    std::string v61 = v67;
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = v66;
  }
  (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v61, &v60);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
LABEL_145:
  std::string::size_type v37 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v37 = v67.__r_.__value_.__l.__size_;
  }
  if (v37)
  {
    std::string::size_type v38 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v38 = v66.__r_.__value_.__l.__size_;
    }
    if (v38)
    {
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v45, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_153;
        }
      }
      else
      {
        std::string v45 = v67;
        if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_153:
          std::string __p = v66;
LABEL_156:
          (*(void (**)(uint64_t, std::string *, std::string *))(a4 + 16))(a4, &v45, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v45.__r_.__value_.__l.__data_);
          }
          goto LABEL_160;
        }
      }
      std::string::__init_copy_ctor_external(&__p, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
      goto LABEL_156;
    }
  }
LABEL_160:
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
}

void sub_1A4363A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 137) < 0) {
    operator delete(*(void **)(v28 - 160));
  }
  if (*(char *)(v28 - 113) < 0) {
    operator delete(*(void **)(v28 - 136));
  }
  if (*(char *)(v28 - 89) < 0) {
    operator delete(*(void **)(v28 - 112));
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1;
  }
  int64_t v8 = v7;
  if (v7)
  {
    int v9 = (void *)(v5 + a3);
    unint64_t v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        int v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        unint64_t v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        int v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    unint64_t v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }
  return a3;
}

void NL::ParseBuilder::getAttributeForBranchAtIndex(uint64_t a1@<X0>, CFArrayRef *a2@<X1>, CFArrayRef *a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  unint64_t v10 = *(NL::SearchGrammar **)(a1 + 48);
  unsigned int Root = NLBranchGetRoot(a2);
  Symbol = NL::SearchGrammar::getSymbol(v10, Root);
  NL::SearchGrammar::getValidRootName((uint64_t)Symbol, &v41);
  unint64_t v13 = *(NL::SearchGrammar **)(a1 + 48);
  unsigned int Leaf = NLBranchGetLeaf(a2);
  uint64_t v15 = NL::SearchGrammar::getSymbol(v13, Leaf);
  NL::SearchGrammar::getValidLeafName((uint64_t)v15, &__p);
  if (!a3) {
    goto LABEL_12;
  }
  int v16 = *(NL::SearchGrammar **)(a1 + 48);
  unsigned int v17 = NLBranchGetRoot(a2);
  unsigned int v18 = NLBranchGetRoot(a3);
  if (!NL::SearchGrammar::isEquivalent(v16, v17, v18))
  {
    uint64_t TokenSpan = NLBranchGetTokenSpan((uint64_t)a2);
    uint64_t v21 = v20;
    uint64_t v22 = NLBranchGetTokenSpan((uint64_t)a3);
    if (TokenSpan <= v22) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = TokenSpan;
    }
    uint64_t v25 = TokenSpan + v21;
    if (TokenSpan + v21 >= v22 + v23) {
      uint64_t v25 = v22 + v23;
    }
    if (v25 <= v24) {
      uint64_t v24 = -1;
    }
    if (v24 == -1 || (NLBranchGetTokenSpan((uint64_t)a2), uint64_t v27 = v26, NLBranchGetTokenSpan((uint64_t)a3), v27 >= v28))
    {
LABEL_12:
      CFIndex v29 = NLBranchGetTokenSpan((uint64_t)a2);
      CFIndex v31 = v30;
      int Score = NLBranchGetScore((uint64_t)a2);
      int Location = NLBranchGetLocation((uint64_t)a2);
      BOOL v34 = (char *)operator new(0xA0uLL);
      *((void *)v34 + 1) = 0;
      *((void *)v34 + 2) = 0;
      *((void *)v34 + 3) = v29;
      *(void *)BOOL v34 = &unk_1EF7CE700;
      *((void *)v34 + 4) = v31;
      *(_OWORD *)(v34 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = xmmword_1A43F6B80;
      *((_DWORD *)v34 + 14) = Score;
      *(void *)(v34 + 6std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 8std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 12std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      *((void *)v34 + 19) = 0;
      *a5 = v34 + 24;
      a5[1] = v34;
      NL::QueryTokenizer::getEntityAtLocation(*(void *)(a1 + 32), Location, &v38);
      NL::ParseAttribute::setEntity((uint64_t)(v34 + 24), &v38);
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      v42.CFIndex location = v29;
      v42.length = v31;
      *((void *)v34 + 5) = NL::QueryTokenizer::tokenRangeAtTokenizationIndexForSpan(*(NL::QueryTokenizer **)(a1 + 32), a4, v42);
      *((void *)v34 + 6) = v35;
      v36[0] = MEMORY[0x1E4F143A8];
      v36[1] = 1174405120;
      v36[2] = ___ZN2NL12ParseBuilder28getAttributeForBranchAtIndexEP9_NLBranchS2_l_block_invoke;
      v36[3] = &__block_descriptor_tmp_24;
      v36[4] = v34 + 24;
      std::string::size_type v37 = (std::__shared_weak_count *)v34;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v34 + 1, 1uLL, memory_order_relaxed);
      NL::ParseBuilder::enumerateAttributeNamesWithType(a1, &v41, (uint64_t)&__p, (uint64_t)v36);
      NL::ParseAttribute::close((NL::ParseAttribute *)(v34 + 24));
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_1A43640B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void NL::ParseAttribute::setEntity(uint64_t a1, void *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v5;
  *(void *)(a1 + 56) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*a2)
  {
    int v7 = *(_DWORD *)(*a2 + 112);
    switch(v7)
    {
      case 1:
        *(unsigned char *)(a1 + 36) = 1;
        break;
      case 7:
        *(unsigned char *)(a1 + 3std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 1;
        break;
      case 5:
        *(unsigned char *)(a1 + 37) = 1;
        break;
    }
  }
}

void ___ZN2NL12ParseBuilder28getAttributeForBranchAtIndexEP9_NLBranchS2_l_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  NL::ParseAttribute::addNameWithType(v4, (long long *)&v6, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1A4364278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NL::ParseAttribute::addNameWithType(void *a1, long long *a2, long long *a3)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = a1[9];
  if (v6 >= a1[10])
  {
    uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, a2);
    uint64_t v7 = v6 + 24;
  }
  a1[9] = v7;
  int64_t v8 = a1 + 11;
  unint64_t v9 = a1[12];
  if (v9 >= a1[13])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v8, a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v8, a3);
    uint64_t result = v9 + 24;
  }
  a1[12] = result;
  return result;
}

uint64_t __copy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void NL::ParseAttribute::close(NL::ParseAttribute *this)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v4 = *(void *)(v2 + 128);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v4)
  {
    uint64_t v5 = (long long *)*((void *)this + 8);
    uint64_t v38 = (long long *)*((void *)this + 9);
    if (v5 != v38)
    {
      while (1)
      {
        if (*((char *)v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v5, *((void *)v5 + 1));
        }
        else
        {
          long long v6 = *v5;
          v39.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
          *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v6;
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = v39.__r_.__value_.__l.__size_;
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v8 = &v39;
        }
        else {
          int64_t v8 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        unint64_t v9 = (char *)v8 + size;
        if (size > 9)
        {
          int64_t v10 = size;
          int64_t v11 = v8;
          do
          {
            unint64_t v12 = (char *)memchr(v11, 66, v10 - 9);
            if (!v12) {
              break;
            }
            if (*(void *)v12 == 0x414445524F464542 && *((_WORD *)v12 + 4) == 17748)
            {
              if (v12 != v9 && v12 - (char *)v8 != -1)
              {
LABEL_35:
                int v18 = 4;
                goto LABEL_99;
              }
              break;
            }
            int64_t v11 = (std::string *)(v12 + 1);
            int64_t v10 = v9 - (char *)v11;
          }
          while (v9 - (char *)v11 >= 10);
          int64_t v14 = size;
          uint64_t v15 = v8;
          do
          {
            int v16 = (char *)memchr(v15, 66, v14 - 9);
            if (!v16) {
              break;
            }
            if (*(void *)v16 == 0x495445524F464542 && *((_WORD *)v16 + 4) == 17741)
            {
              if (v16 == v9 || v16 - (char *)v8 == -1) {
                break;
              }
              goto LABEL_35;
            }
            uint64_t v15 = (std::string *)(v16 + 1);
            int64_t v14 = v9 - (char *)v15;
          }
          while (v9 - (char *)v15 > 9);
        }
        if (size >= 9)
        {
          int64_t v19 = size;
          uint64_t v20 = v8;
          do
          {
            uint64_t v21 = (char *)memchr(v20, 65, v19 - 8);
            if (!v21) {
              break;
            }
            if (*(void *)v21 == 0x5441445245544641 && v21[8] == 69)
            {
              if (v21 != v9 && v21 - (char *)v8 != -1)
              {
LABEL_57:
                int v18 = 5;
                goto LABEL_99;
              }
              break;
            }
            uint64_t v20 = (std::string *)(v21 + 1);
            int64_t v19 = v9 - (char *)v20;
          }
          while (v9 - (char *)v20 >= 9);
          int64_t v23 = size;
          uint64_t v24 = v8;
          do
          {
            uint64_t v25 = (char *)memchr(v24, 65, v23 - 8);
            if (!v25) {
              break;
            }
            if (*(void *)v25 == 0x4D49545245544641 && v25[8] == 69)
            {
              if (v25 != v9 && v25 - (char *)v8 != -1) {
                goto LABEL_57;
              }
              break;
            }
            uint64_t v24 = (std::string *)(v25 + 1);
            int64_t v23 = v9 - (char *)v24;
          }
          while (v9 - (char *)v24 >= 9);
          int64_t v27 = size;
          uint64_t v28 = v8;
          do
          {
            CFIndex v29 = (char *)memchr(v28, 83, v27 - 8);
            if (!v29) {
              break;
            }
            if (*(void *)v29 == 0x54414445434E4953 && v29[8] == 69)
            {
              if (v29 != v9 && v29 - (char *)v8 != -1)
              {
LABEL_78:
                int v18 = 6;
                goto LABEL_99;
              }
              break;
            }
            uint64_t v28 = (std::string *)(v29 + 1);
            int64_t v27 = v9 - (char *)v28;
          }
          while (v9 - (char *)v28 >= 9);
          int64_t v31 = size;
          uint64_t v32 = v8;
          do
          {
            uint64_t v33 = (char *)memchr(v32, 83, v31 - 8);
            if (!v33) {
              break;
            }
            if (*(void *)v33 == 0x4D495445434E4953 && v33[8] == 69)
            {
              if (v33 == v9 || v33 - (char *)v8 == -1) {
                break;
              }
              goto LABEL_78;
            }
            uint64_t v32 = (std::string *)(v33 + 1);
            int64_t v31 = v9 - (char *)v32;
          }
          while (v9 - (char *)v32 >= 9);
        }
        if (size >= 6)
        {
          uint64_t v35 = v8;
          do
          {
            uint64_t v36 = (char *)memchr(v35, 84, size - 5);
            if (!v36) {
              break;
            }
            if (*(_DWORD *)v36 == 1094995796 && *((_WORD *)v36 + 2) == 17748)
            {
              if (v36 != v9 && v36 - (char *)v8 != -1) {
                goto LABEL_91;
              }
              break;
            }
            uint64_t v35 = (std::string *)(v36 + 1);
            int64_t size = v9 - (char *)v35;
          }
          while (v9 - (char *)v35 >= 6);
        }
        if (std::string::find[abi:ne180100]((uint64_t *)&v39, "TOTIME", 0) != -1) {
          break;
        }
        if (std::string::find[abi:ne180100]((uint64_t *)&v39, "FROMDATE", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v39, "STARTDATE", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v39, "ENDDATE", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v39, "FROMTIME", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v39, "STARTTIME", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v39, "ENDTIME", 0) != -1)
        {
          int v18 = 2;
          goto LABEL_99;
        }
        if (std::string::find[abi:ne180100]((uint64_t *)&v39, "ANYDATE", 0) != -1
          || std::string::find[abi:ne180100]((uint64_t *)&v39, "ANYTIME", 0) != -1)
        {
          int v18 = 1;
          goto LABEL_99;
        }
LABEL_100:
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        uint64_t v5 = (long long *)((char *)v5 + 24);
        if (v5 == v38) {
          return;
        }
      }
LABEL_91:
      int v18 = 7;
LABEL_99:
      *((_DWORD *)this + 1std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v18;
      goto LABEL_100;
    }
  }
}

void NL::ParseBuilder::getQuoteAttributeForEntity(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = (char *)operator new(0xA0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EF7CE700;
  *(_OWORD *)(v4 + 24) = xmmword_1A43F6B80;
  uint64_t v5 = (NL::ParseAttribute *)(v4 + 24);
  *(_OWORD *)(v4 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = xmmword_1A43F6B80;
  *((_DWORD *)v4 + 14) = 1;
  *(void *)(v4 + 6std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 8std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 12std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((void *)v4 + 19) = 0;
  *a2 = v4 + 24;
  a2[1] = v4;
  uint64_t v7 = *a1;
  long long v6 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)(v4 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = *(_OWORD *)(*a1 + 96);
  uint64_t v12 = v7;
  unint64_t v13 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NL::ParseAttribute::setEntity((uint64_t)(v4 + 24), &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "QUOTED");
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  NL::ParseAttribute::addNameWithType(v5, (long long *)v10, (long long *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  NL::ParseAttribute::close(v5);
}

void sub_1A4364988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t NL::ParseBuilder::getFunctionTokenCountForSpan(NL::ParseBuilder *this, CFRange a2, uint64_t a3)
{
  if (!a2.length) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *((void *)this + 4);
  long long v6 = *(void **)(v5 + 208);
  uint64_t v7 = *(void **)(v5 + 216);
  do
  {
    int64_t v8 = v6;
    if (v6 != v7)
    {
      int64_t v8 = v6;
      while (*v8 != a3 || v8[1] != a2.location - 1 + a2.length)
      {
        v8 += 2;
        if (v8 == v7)
        {
          int64_t v8 = v7;
          break;
        }
      }
    }
    if (v8 != v7) {
      ++result;
    }
    --a2.length;
  }
  while (a2.length);
  return result;
}

void NL::ParseBuilder::updateIntentsForParseAtIndex(uint64_t a1, CFArrayRef *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v73 = 0;
  CFRange v74 = &v73;
  uint64_t v75 = 0x2000000000;
  int v76 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = &v69;
  uint64_t v71 = 0x2000000000;
  uint64_t v72 = 0;
  uint64_t v65 = 0;
  std::string v66 = &v65;
  uint64_t v67 = 0x2000000000;
  uint64_t v68 = 0;
  uint64_t v61 = 0;
  CFStringRef v62 = &v61;
  uint64_t v63 = 0x2000000000;
  uint64_t v64 = 0;
  uint64_t v54 = 0;
  std::string v55 = &v54;
  uint64_t v56 = 0x3802000000;
  std::string v57 = __Block_byref_object_copy__1;
  uint64_t v60 = 0;
  std::string v58 = __Block_byref_object_dispose__1;
  uint64_t v59 = 0;
  v52[0] = 0;
  v52[1] = v52;
  v52[2] = 0x3802000000;
  v52[3] = __Block_byref_object_copy__42;
  std::string v53 = 0;
  v52[4] = __Block_byref_object_dispose__43;
  v52[5] = 0;
  uint64_t v45 = 0;
  uint64_t v46 = &v45;
  uint64_t v47 = 0x3802000000;
  long long v48 = __Block_byref_object_copy__44;
  char v49 = __Block_byref_object_dispose__45;
  _ZNSt3__115allocate_sharedB8ne180100IN2NL11ParseIntentENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v50);
  uint64_t v39 = 0;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x4002000000;
  CFRange v42 = __Block_byref_object_copy__46;
  uint64_t v43 = __Block_byref_object_dispose__47;
  memset(v44, 0, sizeof(v44));
  int64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x4002000000;
  BOOL v34 = __Block_byref_object_copy__48;
  uint64_t v35 = __Block_byref_object_dispose__49;
  std::string __p = 0;
  std::string::size_type v37 = 0;
  uint64_t v38 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000;
  char v30 = 0;
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 0x40000000;
  v26[2] = ___ZN2NL12ParseBuilder28updateIntentsForParseAtIndexEP8_NLParsell_block_invoke;
  void v26[3] = &unk_1E5B36658;
  v26[4] = v52;
  v26[5] = &v69;
  v26[14] = a1;
  v26[15] = a4;
  v26[6] = &v73;
  v26[7] = &v31;
  v26[8] = &v27;
  v26[9] = &v39;
  v26[10] = &v45;
  v26[11] = &v54;
  v26[12] = &v61;
  v26[13] = &v65;
  NLParseEnumerateBranches(a2, (uint64_t)v26);
  NL::ParseBuilder::merge(a1, (uint64_t)(v40 + 5));
  CFAllocatorRef v8 = (const __CFAllocator *)v70[3];
  if (v8) {
    NLBranchRelease(v8);
  }
  v9.CFIndex location = v55[6] + v55[5];
  if (a3 <= v9.location)
  {
    uint64_t v11 = v62[3];
  }
  else
  {
    v9.length = a3 - v9.location;
    uint64_t FunctionTokenCountForSpan = NL::ParseBuilder::getFunctionTokenCountForSpan((NL::ParseBuilder *)a1, v9, a4);
    uint64_t v11 = v62[3] + FunctionTokenCountForSpan;
    v62[3] = v11;
  }
  uint64_t v12 = v66[3];
  if (v12 == 1 && (v32[6] != v32[5] || *((unsigned char *)v28 + 24)))
  {
    uint64_t v13 = v46[5];
    *(_DWORD *)uint64_t v13 = 0;
    std::vector<std::shared_ptr<NL::ParseAttributes>>::__clear[abi:ne180100]((uint64_t *)(v13 + 40));
    v32[6] = v32[5];
  }
  else
  {
    uint64_t v14 = v11 + v12;
    if (v14 >= a3) {
      goto LABEL_12;
    }
  }
  uint64_t v15 = *(void **)(a1 + 32);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  v25[2] = ___ZN2NL12ParseBuilder28updateIntentsForParseAtIndexEP8_NLParsell_block_invoke_2;
  void v25[3] = &unk_1E5B36680;
  v25[4] = &v31;
  v25[5] = v52;
  v25[6] = &v65;
  v25[7] = &v45;
  v25[8] = a1;
  NL::QueryTokenizer::enumerateQuotedEntities(v15, (uint64_t)v25);
  uint64_t v14 = v62[3] + v66[3];
LABEL_12:
  if (v14 >= a3)
  {
    int v16 = *((_DWORD *)v74 + 6);
  }
  else
  {
    *((_DWORD *)v74 + 6) = 0;
    int v16 = 0;
  }
  *(_DWORD *)v46[5] = v16;
  uint64_t v17 = v46[5];
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v23, (const void ***)(*(void *)(a1 + 16) + 96));
  if ((void **)(v17 + 16) != &v23) {
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(v17 + 16), v23, &v24);
  }
  std::__tree<std::string>::destroy((uint64_t)&v23, v24);
  uint64_t v18 = v46[5];
  *(_DWORD *)(v18 + 4) = NL::ParserContext::primaryCategory(*(NL::ParserContext **)(a1 + 16));
  uint64_t v19 = v46[5];
  *(_DWORD *)(v19 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = NL::ParserContext::secondaryCategory(*(NL::ParserContext **)(a1 + 16));
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = v46[6];
  *(void *)&long long v22 = v46[5];
  *((void *)&v22 + 1) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  NL::ParseIntents::add(v20, &v22);
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
  if (__p)
  {
    std::string::size_type v37 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v39, 8);
  int64_t v31 = (void **)v44;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v31);
  _Block_object_dispose(&v45, 8);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  _Block_object_dispose(v52, 8);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(&v61, 8);
  _Block_object_dispose(&v65, 8);
  _Block_object_dispose(&v69, 8);
  _Block_object_dispose(&v73, 8);
}

void sub_1A4364F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  std::__tree<std::string>::destroy((uint64_t)&a13, (char *)a14);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a53, 8);
  a45 = a10;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  _Block_object_dispose(&a61, 8);
  if (a67) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a67);
  }
  _Block_object_dispose(&a68, 8);
  if (STACK[0x208]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x208]);
  }
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose((const void *)(v68 - 232), 8);
  _Block_object_dispose((const void *)(v68 - 200), 8);
  _Block_object_dispose((const void *)(v68 - 168), 8);
  _Block_object_dispose((const void *)(v68 - 136), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = result;
  return result;
}

__n128 __Block_byref_object_copy__42(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = result;
  *(void *)(a2 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  return result;
}

void __Block_byref_object_dispose__43(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 __Block_byref_object_copy__44(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = result;
  *(void *)(a2 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  return result;
}

void __Block_byref_object_dispose__45(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 __Block_byref_object_copy__46(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__47(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

__n128 __Block_byref_object_copy__48(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__49(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
    operator delete(v2);
  }
}

void ___ZN2NL12ParseBuilder28updateIntentsForParseAtIndexEP8_NLParsell_block_invoke(void *a1, CFArrayRef *a2)
{
  uint64_t v4 = (NL::ParseBuilder *)a1[14];
  NL::ParseBuilder::getAttributeForBranchAtIndex((uint64_t)v4, a2, *(CFArrayRef **)(*(void *)(a1[5] + 8) + 24), a1[15], &v51);
  uint64_t v5 = *(void *)(a1[4] + 8);
  long long v6 = *(std::__shared_weak_count **)(v5 + 48);
  *(_OWORD *)(v5 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v51;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*(void *)(*(void *)(a1[4] + 8) + 40))
  {
    *(float *)(*(void *)(a1[6] + 8) + 24) = *(float *)(*(void *)(a1[6] + 8) + 24)
                                                + (float)NLBranchGetScore((uint64_t)a2);
    uint64_t TokenSpan = NLBranchGetTokenSpan((uint64_t)a2);
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(a1[4] + 8);
    uint64_t v11 = *(void *)(v10 + 40);
    if (*(unsigned char *)(v11 + 37))
    {
      uint64_t v12 = *(void **)(a1[7] + 8);
      int Location = NLBranchGetLocation((uint64_t)a2);
      uint64_t v14 = Location;
      uint64_t v15 = (char *)v12[6];
      unint64_t v16 = v12[7];
      if ((unint64_t)v15 >= v16)
      {
        uint64_t v18 = (char *)v12[5];
        uint64_t v19 = (v15 - v18) >> 3;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = v16 - (void)v18;
        unint64_t v21 = (uint64_t)(v16 - (void)v18) >> 2;
        if (v21 <= v19 + 1) {
          unint64_t v21 = v19 + 1;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          int64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(v12 + 7), v22);
          uint64_t v18 = (char *)v12[5];
          uint64_t v15 = (char *)v12[6];
        }
        else
        {
          int64_t v23 = 0;
        }
        uint64_t v24 = &v23[8 * v19];
        uint64_t v25 = &v23[8 * v22];
        *(void *)uint64_t v24 = v14;
        uint64_t v17 = v24 + 8;
        while (v15 != v18)
        {
          uint64_t v26 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v24 - 1) = v26;
          v24 -= 8;
        }
        v12[5] = v24;
        v12[6] = v17;
        v12[7] = v25;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)uint64_t v15 = Location;
        uint64_t v17 = v15 + 8;
      }
      v12[6] = v17;
      uint64_t v10 = *(void *)(a1[4] + 8);
      uint64_t v11 = *(void *)(v10 + 40);
    }
    if (*(unsigned char *)(v11 + 38))
    {
      *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = 1;
      uint64_t v10 = *(void *)(a1[4] + 8);
    }
    std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(a1[9] + 8) + 40), (long long *)(v10 + 40));
    uint64_t v27 = *(void *)(*(void *)(a1[5] + 8) + 24);
    if (!v27) {
      goto LABEL_42;
    }
    uint64_t v28 = NLBranchGetTokenSpan(v27);
    if (TokenSpan <= v28) {
      uint64_t v30 = v28;
    }
    else {
      uint64_t v30 = TokenSpan;
    }
    uint64_t v31 = TokenSpan + v9;
    if (TokenSpan + v9 >= v28 + v29) {
      uint64_t v31 = v28 + v29;
    }
    if (v31 <= v30) {
      uint64_t v30 = -1;
    }
    if (v30 != -1)
    {
      uint64_t v32 = *(void *)(*(void *)(a1[10] + 8) + 40);
      uint64_t v33 = *(void *)(a1[4] + 8);
      uint64_t v35 = *(void *)(v33 + 40);
      BOOL v34 = *(std::__shared_weak_count **)(v33 + 48);
      uint64_t v49 = v35;
      uint64_t v50 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      NL::ParseIntent::append(v32, &v49);
      uint64_t v36 = v50;
      if (!v50) {
        goto LABEL_49;
      }
      goto LABEL_48;
    }
    uint64_t v37 = *(void *)(*(void *)(a1[5] + 8) + 24);
    if (!v37 || (TokenSpan == NLBranchGetTokenSpan(v37) ? (BOOL v39 = v9 == v38) : (BOOL v39 = 0), !v39))
    {
LABEL_42:
      v40.CFIndex location = *(void *)(*(void *)(a1[11] + 8) + 48) + *(void *)(*(void *)(a1[11] + 8) + 40);
      if (TokenSpan > v40.location)
      {
        v40.length = TokenSpan - v40.location;
        *(void *)(*(void *)(a1[12] + 8) + 24) += NL::ParseBuilder::getFunctionTokenCountForSpan(v4, v40, a1[15]);
      }
      *(void *)(*(void *)(a1[13] + 8) + 24) += v9;
    }
    uint64_t v41 = *(void *)(*(void *)(a1[10] + 8) + 40);
    uint64_t v42 = *(void *)(a1[4] + 8);
    uint64_t v44 = *(void *)(v42 + 40);
    uint64_t v43 = *(std::__shared_weak_count **)(v42 + 48);
    uint64_t v47 = v44;
    long long v48 = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    NL::ParseIntent::add(v41, &v47);
    uint64_t v36 = v48;
    if (!v48) {
      goto LABEL_49;
    }
LABEL_48:
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
LABEL_49:
    uint64_t v45 = *(void *)(a1[11] + 8);
    *(void *)(v45 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = TokenSpan;
    *(void *)(v45 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v9;
    CFAllocatorRef v46 = *(const __CFAllocator **)(*(void *)(a1[5] + 8) + 24);
    if (v46) {
      NLBranchRelease(v46);
    }
    *(void *)(*(void *)(a1[5] + 8) + 24) = NLBranchRetain((uint64_t)a2);
  }
}

void sub_1A436545C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<NL::ParseAttribute>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1A436558C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void NL::ParseBuilder::merge(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v2 = *(void **)(a2 + 8);
  if ((unint64_t)v2 - *(void *)a2 < 0x20) {
    return;
  }
  if (v3 == v2)
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    uint64_t v4 = 0;
    uint64_t v79 = 0;
    unint64_t v5 = 0;
    uint64_t v80 = 0;
    unint64_t v6 = 0;
    CFRange v77 = 0;
    uint64_t v105 = 0;
    uint64_t v8 = 0;
    uint64_t v81 = 0;
    uint64_t v9 = 0;
    uint64_t v109 = 0;
    uint64_t v70 = 0;
    CFRange v78 = 0;
    uint64_t v119 = 0;
    goto LABEL_165;
  }
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v4 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  v111 = 0;
  uint64_t v112 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v108 = a1 + 64;
  char v114 = *(void **)(a2 + 8);
  do
  {
    uint64_t v12 = v7;
    uint64_t v13 = *v3;
    if (!*(unsigned char *)(*v3 + 36))
    {
LABEL_48:
      uint64_t v7 = v12;
      goto LABEL_49;
    }
    BOOL v117 = v11;
    uint64_t v15 = *(void *)(v13 + 48);
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 56);
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (!v15) {
        goto LABEL_48;
      }
      uint64_t v115 = v8;
      char v113 = v12;
      uint64_t v16 = v5;
      long long v17 = v4;
      uint64_t v15 = *(void *)(*v3 + 48);
      uint64_t v18 = *(std::__shared_weak_count **)(*v3 + 56);
      if (v18)
      {
        char v19 = 0;
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_13;
      }
    }
    else
    {
      if (!v15) {
        goto LABEL_48;
      }
      uint64_t v115 = v8;
      char v113 = v12;
      uint64_t v16 = v5;
      long long v17 = v4;
      uint64_t v18 = 0;
    }
    char v19 = 1;
LABEL_13:
    uint64_t v21 = *(void *)(v15 + 128);
    unint64_t v20 = *(std::__shared_weak_count **)(v15 + 136);
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if ((v19 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (!v21)
    {
      uint64_t v8 = v115;
      uint64_t v7 = v113;
      unint64_t v5 = v16;
      unint64_t v11 = v117;
      uint64_t v4 = v17;
      goto LABEL_49;
    }
    int64_t v23 = *(uint64_t **)(*v3 + 48);
    unint64_t v22 = *(std::__shared_weak_count **)(*v3 + 56);
    uint64_t v4 = v17;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = v16;
    std::string::basic_string[abi:ne180100]<0>(&__p, "CalendarTime");
    BOOL v25 = endswith(v23, (uint64_t *)&__p);
    if ((SHIBYTE(v129) & 0x80000000) == 0)
    {
      if (!v22) {
        goto LABEL_23;
      }
LABEL_22:
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      goto LABEL_23;
    }
    operator delete(__p);
    if (v22) {
      goto LABEL_22;
    }
LABEL_23:
    if (!v25)
    {
      uint64_t v8 = v115;
      if (!v112)
      {
        uint64_t v42 = v10;
        unint64_t v11 = v117;
LABEL_84:
        uint64_t v43 = *v3;
        uint64_t v10 = (std::__shared_weak_count *)v3[1];
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        uint64_t v110 = v43;
        uint64_t v112 = 0;
        uint64_t v44 = *v3;
        uint64_t v45 = v9;
        CFAllocatorRef v46 = v8;
        uint64_t v7 = v113;
        uint64_t v47 = v6;
        unint64_t v5 = v24;
        long long v48 = v4;
        switch(*(_DWORD *)(*v3 + 40))
        {
          case 1:
            uint64_t v4 = (std::__shared_weak_count *)v3[1];
            if (v4) {
              atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v33 = 0;
            uint64_t v112 = 0;
            uint64_t v32 = v48;
            uint64_t v31 = v111;
            uint64_t v7 = v113;
            unint64_t v5 = v24;
            uint64_t v100 = v44;
            if (v48) {
              goto LABEL_139;
            }
            break;
          case 2:
            unint64_t v5 = (std::__shared_weak_count *)v3[1];
            if (v5) {
              atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v33 = 0;
            uint64_t v112 = 0;
            uint64_t v32 = v24;
            uint64_t v31 = v111;
            uint64_t v7 = v113;
            uint64_t v102 = v44;
            if (v24) {
              goto LABEL_139;
            }
            break;
          case 3:
            goto LABEL_49;
          case 4:
            unint64_t v6 = (std::__shared_weak_count *)v3[1];
            if (v6) {
              atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v33 = 0;
            uint64_t v112 = 0;
            uint64_t v32 = v47;
            uint64_t v31 = v111;
            uint64_t v7 = v113;
            uint64_t v103 = v44;
            unint64_t v5 = v24;
            if (v47) {
              goto LABEL_139;
            }
            break;
          case 5:
            uint64_t v7 = (std::__shared_weak_count *)v3[1];
            if (v7) {
              atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v33 = 0;
            uint64_t v112 = 0;
            uint64_t v32 = v113;
            uint64_t v31 = v111;
            uint64_t v101 = v44;
            unint64_t v5 = v24;
            if (v113) {
              goto LABEL_139;
            }
            break;
          case 6:
            uint64_t v8 = (std::__shared_weak_count *)v3[1];
            if (v8) {
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v33 = 0;
            uint64_t v112 = 0;
            uint64_t v32 = v46;
            uint64_t v31 = v111;
            uint64_t v105 = v44;
            uint64_t v7 = v113;
            unint64_t v5 = v24;
            if (v46) {
              goto LABEL_139;
            }
            break;
          case 7:
            uint64_t v9 = (std::__shared_weak_count *)v3[1];
            if (v9) {
              atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v33 = 0;
            uint64_t v112 = 0;
            uint64_t v32 = v45;
            uint64_t v31 = v111;
            uint64_t v104 = v44;
            uint64_t v7 = v113;
            unint64_t v5 = v24;
            if (v45) {
              goto LABEL_139;
            }
            break;
          default:
            uint64_t v7 = v113;
            unint64_t v5 = v24;
            break;
        }
        goto LABEL_49;
      }
      uint64_t v34 = *v3;
      if (*(_DWORD *)(*v3 + 40) > 2u)
      {
        CFRange v40 = v117;
        if (v117) {
          atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v36 = v111;
        uint64_t v109 = v112;
        if (!v111) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v35 = *(NL::Entity **)(v34 + 48);
        uint64_t v36 = *(std::__shared_weak_count **)(v34 + 56);
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v37 = *(void *)(v112 + 48);
        uint64_t v38 = *(std::__shared_weak_count **)(v112 + 56);
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v39 = *(unsigned int *)(*v3 + 40);
        uint64_t v142 = MEMORY[0x1E4F143A8];
        uint64_t v143 = 1174405120;
        v144 = ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_61;
        char v145 = &__block_descriptor_tmp_62;
        v146 = v3;
        uint64_t v147 = v112;
        v148 = v117;
        if (v117) {
          atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        NL::EntityConverter::merge(v108, v35, v39, v37);
        if (v148) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v148);
        }
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        CFRange v40 = v111;
        if (!v36) {
          goto LABEL_81;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
LABEL_81:
      uint64_t v42 = v10;
      if (v117) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
      unint64_t v11 = 0;
      v111 = v40;
      uint64_t v8 = v115;
      goto LABEL_84;
    }
    uint64_t v8 = v115;
    if (!v110)
    {
      if (v112)
      {
        if (v117) {
          atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v111) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v111);
        }
        uint64_t v33 = *v3;
        unint64_t v11 = (std::__shared_weak_count *)v3[1];
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v110 = 0;
        v111 = 0;
        uint64_t v41 = v117;
        uint64_t v32 = v117;
        uint64_t v31 = v117;
        uint64_t v109 = v112;
      }
      else
      {
        uint64_t v33 = *v3;
        unint64_t v11 = (std::__shared_weak_count *)v3[1];
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v110 = 0;
        uint64_t v41 = v117;
        uint64_t v32 = v117;
        uint64_t v31 = v111;
      }
LABEL_138:
      uint64_t v7 = v113;
      unint64_t v5 = v24;
      uint64_t v112 = v33;
      if (!v41) {
        goto LABEL_49;
      }
LABEL_139:
      unint64_t v118 = v4;
      uint64_t v61 = v33;
      CFStringRef v62 = v5;
      uint64_t v63 = v6;
      uint64_t v64 = v7;
      uint64_t v65 = v8;
      std::string v66 = v9;
      uint64_t v67 = v10;
      uint64_t v68 = v11;
      uint64_t v69 = v31;
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      v111 = v69;
      uint64_t v112 = v61;
      unint64_t v11 = v68;
      uint64_t v10 = v67;
      uint64_t v9 = v66;
      uint64_t v8 = v65;
      uint64_t v7 = v64;
      unint64_t v6 = v63;
      unint64_t v5 = v62;
      uint64_t v4 = v118;
      goto LABEL_49;
    }
    if (!v112)
    {
      uint64_t v49 = *v3;
      if (*(_DWORD *)(*v3 + 40) > 2u)
      {
        uint64_t v56 = *v3;
        std::string v57 = (std::__shared_weak_count *)v3[1];
        if (v57) {
          atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v117) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v117);
        }
        std::string v55 = v10;
        uint64_t v31 = (std::__shared_weak_count *)v3[1];
        uint64_t v109 = *v3;
        uint64_t v33 = v56;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v51 = v111;
        BOOL v117 = v57;
        if (!v111) {
          goto LABEL_137;
        }
      }
      else
      {
        uint64_t v50 = *(NL::Entity **)(v110 + 48);
        long long v51 = *(std::__shared_weak_count **)(v110 + 56);
        if (v51)
        {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v49 = *v3;
        }
        uint64_t v52 = *(void *)(v49 + 48);
        std::string v53 = *(std::__shared_weak_count **)(v49 + 56);
        if (v53) {
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v54 = *(unsigned int *)(v110 + 40);
        uint64_t v149 = MEMORY[0x1E4F143A8];
        uint64_t v150 = 1174405120;
        char v151 = ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_57;
        v152 = &__block_descriptor_tmp_60_0;
        uint64_t v153 = v110;
        v154 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v155 = v3;
        NL::EntityConverter::merge(v108, v50, v54, v52);
        if (v154) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v154);
        }
        std::string v55 = v10;
        if (v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        }
        uint64_t v33 = 0;
        uint64_t v31 = v111;
        if (!v51) {
          goto LABEL_137;
        }
      }
      uint64_t v58 = v33;
      uint64_t v59 = v51;
      uint64_t v60 = v31;
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      uint64_t v31 = v60;
      uint64_t v33 = v58;
LABEL_137:
      uint64_t v10 = 0;
      uint64_t v110 = 0;
      v111 = v31;
      uint64_t v41 = v55;
      uint64_t v32 = v55;
      uint64_t v8 = v115;
      unint64_t v11 = v117;
      goto LABEL_138;
    }
    uint64_t v26 = *(NL::Entity **)(v110 + 48);
    uint64_t v27 = *(std::__shared_weak_count **)(v110 + 56);
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CFRange v107 = v27;
    uint64_t v28 = *(void *)(v112 + 48);
    uint64_t v29 = *(std::__shared_weak_count **)(v112 + 56);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v30 = *(unsigned int *)(v110 + 40);
    uint64_t v156 = MEMORY[0x1E4F143A8];
    uint64_t v157 = 1174405120;
    v158 = ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke;
    v159 = &__block_descriptor_tmp_56;
    uint64_t v160 = v110;
    v161 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v162 = v112;
    v163 = v117;
    if (v117) {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    NL::EntityConverter::merge(v108, v26, v30, v28);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    unint64_t v11 = (std::__shared_weak_count *)v3[1];
    uint64_t v106 = *v3;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v117) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v117);
    }
    if (v163) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v163);
    }
    if (v161) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v161);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    uint64_t v10 = 0;
    uint64_t v110 = 0;
    uint64_t v31 = v111;
    uint64_t v8 = v115;
    uint64_t v7 = v113;
    unint64_t v5 = v24;
    uint64_t v33 = v106;
    uint64_t v32 = v107;
    uint64_t v112 = v106;
    if (v107) {
      goto LABEL_139;
    }
LABEL_49:
    v3 += 2;
  }
  while (v3 != v114);
  if (!v110)
  {
    CFRange v77 = v7;
    CFRange v82 = v11;
    CFRange v78 = v10;
    uint64_t v119 = v82;
    goto LABEL_162;
  }
  uint64_t v70 = v111;
  if (v112)
  {
    uint64_t v71 = *(NL::Entity **)(v110 + 48);
    uint64_t v72 = *(std::__shared_weak_count **)(v110 + 56);
    if (v72) {
      atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v73 = *(void *)(v112 + 48);
    CFRange v74 = *(std::__shared_weak_count **)(v112 + 56);
    if (v74) {
      atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v75 = *(unsigned int *)(v110 + 40);
    uint64_t v134 = MEMORY[0x1E4F143A8];
    uint64_t v135 = 1174405120;
    v136 = ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_63;
    v137 = &__block_descriptor_tmp_66;
    uint64_t v138 = v110;
    v139 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v140 = v112;
    v141 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    NL::EntityConverter::merge(v108, v71, v75, v73);
    if (v141) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v141);
    }
    if (v139) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
    }
    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    int v76 = v11;
    if (v72) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v72);
    }
    CFRange v77 = v7;
    CFRange v78 = v10;
    uint64_t v119 = v76;
LABEL_162:
    uint64_t v70 = v111;
  }
  else
  {
    CFRange v77 = v7;
    CFRange v83 = v11;
    CFRange v78 = v10;
    uint64_t v119 = v83;
  }
  uint64_t v80 = v103;
  uint64_t v81 = v104;
  uint64_t v79 = v102;
LABEL_165:
  std::string __p = 0;
  p_p = &__p;
  uint64_t v129 = 0x3802000000;
  v130 = __Block_byref_object_copy__42;
  uint64_t v132 = 0;
  v133 = 0;
  v131 = __Block_byref_object_dispose__43;
  uint64_t v120 = 0;
  uint64_t v121 = &v120;
  uint64_t v122 = 0x3802000000;
  size_t v123 = __Block_byref_object_copy__42;
  uint64_t v125 = 0;
  char v126 = 0;
  char v124 = __Block_byref_object_dispose__43;
  if (v79)
  {
    if (v81)
    {
      CFRange v84 = v78;
      if (!v5)
      {
        uint64_t v132 = v79;
        v133 = 0;
        goto LABEL_217;
      }
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      CFRange v85 = v133;
      uint64_t v132 = v79;
      v133 = v5;
      if (!v85) {
        goto LABEL_217;
      }
LABEL_188:
      std::__shared_weak_count::__release_shared[abi:ne180100](v85);
      goto LABEL_217;
    }
    if (v80)
    {
      if (!v5)
      {
        uint64_t v132 = v79;
        v133 = 0;
        goto LABEL_264;
      }
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      CFRange v87 = v133;
      uint64_t v132 = v79;
      v133 = v5;
      if (!v87) {
        goto LABEL_264;
      }
LABEL_197:
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
      goto LABEL_264;
    }
    BOOL v86 = v109;
    if (v109)
    {
      CFRange v84 = v78;
      if (!v5)
      {
        uint64_t v132 = v79;
        v133 = 0;
        goto LABEL_259;
      }
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      CFRange v88 = v133;
      uint64_t v132 = v79;
      v133 = v5;
      if (!v88) {
        goto LABEL_259;
      }
LABEL_258:
      std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      goto LABEL_259;
    }
LABEL_204:
    CFRange v84 = v78;
LABEL_205:
    if (!v100) {
      goto LABEL_221;
    }
    if (v86)
    {
      if (!v4)
      {
        uint64_t v132 = v100;
        v133 = 0;
        goto LABEL_217;
      }
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      CFRange v85 = v133;
      uint64_t v132 = v100;
      v133 = v4;
      if (v85) {
        goto LABEL_188;
      }
LABEL_217:
      CFRange v89 = v121;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFRange v90 = (std::__shared_weak_count *)v89[6];
      v89[5] = v81;
      v89[6] = (uint64_t)v9;
      if (v90) {
        goto LABEL_220;
      }
      goto LABEL_221;
    }
    if (!v109) {
      goto LABEL_221;
    }
    if (!v4)
    {
      uint64_t v132 = v100;
      v133 = 0;
      goto LABEL_259;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    CFRange v88 = v133;
    uint64_t v132 = v100;
    v133 = v4;
    if (v88) {
      goto LABEL_258;
    }
LABEL_259:
    uint64_t v97 = v121;
    if (v70) {
      atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CFRange v90 = (std::__shared_weak_count *)v97[6];
    v97[5] = v109;
    v97[6] = (uint64_t)v70;
    if (v90) {
      goto LABEL_220;
    }
    goto LABEL_221;
  }
  BOOL v86 = v81 != 0;
  if (v81)
  {
    if (v109)
    {
      if (v70)
      {
        atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
        CFRange v85 = v133;
        uint64_t v132 = v109;
        v133 = v70;
        goto LABEL_187;
      }
      uint64_t v132 = v109;
      v133 = 0;
      goto LABEL_216;
    }
    if (v105)
    {
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        CFRange v85 = v133;
        uint64_t v132 = v105;
        v133 = v8;
LABEL_187:
        CFRange v84 = v78;
        if (!v85) {
          goto LABEL_217;
        }
        goto LABEL_188;
      }
      uint64_t v132 = v105;
      v133 = 0;
LABEL_216:
      CFRange v84 = v78;
      goto LABEL_217;
    }
LABEL_193:
    if (!v80) {
      goto LABEL_204;
    }
    if (v101)
    {
      if (!v77)
      {
        uint64_t v132 = v101;
        v133 = 0;
        goto LABEL_264;
      }
      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
      CFRange v87 = v133;
      uint64_t v132 = v101;
      v133 = v77;
      if (!v87) {
        goto LABEL_264;
      }
      goto LABEL_197;
    }
    CFRange v84 = v78;
    if (v109)
    {
      if (!v77)
      {
        uint64_t v132 = 0;
        v133 = 0;
        goto LABEL_259;
      }
      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
      CFRange v88 = v133;
      uint64_t v132 = 0;
      v133 = v77;
      if (!v88) {
        goto LABEL_259;
      }
      goto LABEL_258;
    }
    goto LABEL_205;
  }
  if (!v105) {
    goto LABEL_193;
  }
  if (!v80)
  {
    BOOL v86 = v109;
    if (!v109) {
      goto LABEL_204;
    }
    CFRange v84 = v78;
    if (!v8)
    {
      uint64_t v132 = v105;
      v133 = 0;
      goto LABEL_259;
    }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    CFRange v88 = v133;
    uint64_t v132 = v105;
    v133 = v8;
    if (v88) {
      goto LABEL_258;
    }
    goto LABEL_259;
  }
  if (!v8)
  {
    uint64_t v132 = v105;
    v133 = 0;
    goto LABEL_264;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  CFRange v87 = v133;
  uint64_t v132 = v105;
  v133 = v8;
  if (v87) {
    goto LABEL_197;
  }
LABEL_264:
  char v98 = v121;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFRange v90 = (std::__shared_weak_count *)v98[6];
  v98[5] = v80;
  v98[6] = (uint64_t)v6;
  CFRange v84 = v78;
  if (v90) {
LABEL_220:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
LABEL_221:
  BOOL v116 = v8;
  CFRange v91 = p_p[5];
  if (v91)
  {
    uint64_t v92 = v121[5];
    if (v92)
    {
      unint64_t v93 = (NL::Entity *)*((void *)v91 + 6);
      CFTypeRef v94 = (std::__shared_weak_count *)*((void *)v91 + 7);
      if (v94)
      {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v92 = v121[5];
      }
      uint64_t v95 = *(void *)(v92 + 48);
      CFStringRef v96 = *(std::__shared_weak_count **)(v92 + 56);
      if (v96) {
        atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      NL::EntityConverter::merge(a1 + 64, v93, *((unsigned int *)p_p[5] + 10), v95);
      if (v96) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v96);
      }
      if (v94) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v94);
      }
    }
  }
  _Block_object_dispose(&v120, 8);
  if (v126) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v126);
  }
  _Block_object_dispose(&__p, 8);
  if (v133) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v133);
  }
  if (v119) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v119);
  }
  if (v84) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v84);
  }
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v116) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v116);
  }
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1A43664AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26,_Unwind_Exception *exception_objecta,std::__shared_weak_count *a28,std::__shared_weak_count *a29)
{
  uint64_t v37 = *(std::__shared_weak_count **)(v36 - 184);
  if (v37)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    if (!v29)
    {
LABEL_3:
      if (!v30)
      {
LABEL_8:
        if (a29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a29);
        }
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        if (a24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a24);
        }
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        }
        if (a28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a28);
        }
        if (a26)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](a26);
          if (!v33)
          {
LABEL_20:
            if (!v31) {
              goto LABEL_21;
            }
            goto LABEL_26;
          }
        }
        else if (!v33)
        {
          goto LABEL_20;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        if (!v31)
        {
LABEL_21:
          if (!v32) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_26:
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        if (!v32) {
LABEL_23:
        }
          _Unwind_Resume(a1);
LABEL_22:
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        goto LABEL_23;
      }
LABEL_7:
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      goto LABEL_8;
    }
  }
  else if (!v29)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  if (!v30) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN2NL12ParseBuilder28updateIntentsForParseAtIndexEP8_NLParsell_block_invoke_2(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1[4] + 8);
  unint64_t v6 = *(void **)(v4 + 40);
  unint64_t v5 = *(void **)(v4 + 48);
  if (v6 != v5)
  {
    while (*v6 != a3)
    {
      if (++v6 == v5)
      {
        unint64_t v6 = v5;
        break;
      }
    }
  }
  if (v6 == v5)
  {
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    v16[0] = *a2;
    v16[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    NL::ParseBuilder::getQuoteAttributeForEntity(v16, &v17);
    uint64_t v8 = *(void *)(a1[5] + 8);
    uint64_t v9 = *(std::__shared_weak_count **)(v8 + 48);
    *(_OWORD *)(v8 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v17;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (*(void *)(*(void *)(a1[5] + 8) + 40))
    {
      ++*(void *)(*(void *)(a1[6] + 8) + 24);
      uint64_t v10 = *(void *)(*(void *)(a1[7] + 8) + 40);
      uint64_t v11 = *(void *)(a1[5] + 8);
      uint64_t v13 = *(void *)(v11 + 40);
      uint64_t v12 = *(std::__shared_weak_count **)(v11 + 48);
      uint64_t v14 = v13;
      uint64_t v15 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      NL::ParseIntent::add(v10, &v14);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
  }
}

void sub_1A43667CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NL::ParseIntents::add(uint64_t result, long long *a2)
{
  if (*(void *)a2)
  {
    uint64_t v3 = (_DWORD *)result;
    std::vector<std::shared_ptr<NL::ParseIntent>>::push_back[abi:ne180100]((uint64_t *)(result + 8), a2);
    int v4 = NL::ParseIntent::confidence(*(NL::ParseIntent **)a2);
    __n128 result = *v3;
    if (v4 > (int)result) {
      __n128 result = NL::ParseIntent::confidence(*(NL::ParseIntent **)a2);
    }
    *uint64_t v3 = result;
  }
  return result;
}

void ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>(&v5, a2);
  NL::ParseAttribute::setEntity(v3, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(v4 + 39) = 1;
}

void sub_1A43668A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE48c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE48c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_57(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>(&v5, a2);
  NL::ParseAttribute::setEntity(v3, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v4 = **(void **)(a1 + 48);
  *(_DWORD *)(v4 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(v4 + 39) = 1;
}

void sub_1A43669A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_61(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = **(void **)(a1 + 32);
  std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>(&v5, a2);
  NL::ParseAttribute::setEntity(v3, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  *(_DWORD *)(**(void **)(a1 + 32) + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = *(_DWORD *)(v4 + 40);
  *(_DWORD *)(v4 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(v4 + 39) = 1;
}

void sub_1A4366A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 40);
  *(void *)(result + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIN2NL14ParseAttributeEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_63(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>(&v5, a2);
  NL::ParseAttribute::setEntity(v3, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(v4 + 39) = 1;
}

void sub_1A4366AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2NL12ParseBuilder5mergeERNSt3__16vectorINS1_10shared_ptrINS_14ParseAttributeEEENS1_9allocatorIS5_EEEE_block_invoke_67(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)&v4, a2);
  std::vector<std::shared_ptr<NL::Entity>>::push_back[abi:ne180100]((uint64_t *)(v3 + 112), &v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) + 39) = 1;
}

void sub_1A4366B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void NL::ParseBuilder::parse(NL::ParseBuilder *this)
{
  if (*((void *)this + 4))
  {
    uint64_t v2 = *((void *)this + 13);
    if (v2)
    {
      if (*((void *)this + 6))
      {
        uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
        uint64_t v26 = *((void *)this + 6);
        uint64_t v27 = v3;
        if (v3) {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        NLGraphStructureSetGrammar(v2, &v26);
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        uint64_t v4 = *(void *)(*((void *)this + 4) + 192) - *(void *)(*((void *)this + 4) + 184);
        if (v4 >= 1)
        {
          unint64_t v5 = 0;
          int64_t v6 = v4 / 0x18uLL;
          uint64_t v20 = MEMORY[0x1E4F143A8];
          if (v6 <= 1) {
            uint64_t v7 = 1;
          }
          else {
            uint64_t v7 = v6;
          }
          do
          {
            uint64_t v22 = 0;
            int64_t v23 = &v22;
            uint64_t v24 = 0x2000000000;
            uint64_t v25 = 0;
            uint64_t v8 = *((void *)this + 4);
            v21[0] = v20;
            v21[1] = 0x40000000;
            v21[2] = ___ZN2NL12ParseBuilder5parseEv_block_invoke;
            v21[3] = &unk_1E5B366D0;
            v21[4] = &v22;
            v21[5] = this;
            NL::QueryTokenizer::enumerateEntitiesAtTokenizationIndex(v8, v5, (uint64_t)v21);
            uint64_t v9 = NLGraphStructureStackCopyParsesWithCallback(*((void *)this + 13), *((void *)this + 6), (void (*)(uint64_t, CFArrayRef *, CFArrayRef *, uint64_t))parseIdentifier);
            if (v9)
            {
              NL::ParserContext::close(*((NL::ParserContext **)this + 2));
              CFIndex Count = CFArrayGetCount(v9);
              if (Count >= 1)
              {
                CFIndex v11 = 0;
                TokenCFIndex Count = 0;
                do
                {
                  CFArrayRef ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(v9, v11);
                  uint64_t v14 = ValueAtIndex;
                  unsigned int v15 = *(_DWORD *)(*((void *)this + 2) + 40);
                  BOOL v16 = v15 > 8;
                  int v17 = (1 << v15) & 0x1DE;
                  BOOL v19 = v16 || v17 == 0 || TokenCount == 0;
                  if (!v19 && TokenCount != NLParseGetTokenCount((uint64_t)ValueAtIndex)) {
                    break;
                  }
                  NL::ParseBuilder::updateIntentsForParseAtIndex((uint64_t)this, v14, v23[3], v5);
                  TokenCFIndex Count = NLParseGetTokenCount((uint64_t)v14);
                  ++v11;
                }
                while (Count != v11);
              }
              CFRelease(v9);
            }
            NLGraphStructureStackReset(*((void *)this + 13));
            NL::ParserContext::reset(*((NL::ParserContext **)this + 2));
            _Block_object_dispose(&v22, 8);
            ++v5;
          }
          while (v5 != v7);
        }
      }
    }
  }
}

void sub_1A4366DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2NL12ParseBuilder5parseEv_block_invoke(uint64_t a1, uint64_t *a2, uint64_t a3, __int16 a4)
{
  uint64_t v7 = *(void *)(a1 + 40);
  int SymbolID = NL::SearchGrammar::getSymbolID(*(void *)(v7 + 48), *a2);
  NLGraphStructureStackAdd(*(void *)(v7 + 104), SymbolID, (__int16)a3, a4);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v10 = *(void *)(v9 + 24);
  if (v10) {
    BOOL v11 = v10 <= a3;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    *(void *)(v9 + 24) = v10 + 1;
  }
}

NL::Transcriber *std::unique_ptr<NL::Transcriber>::reset[abi:ne180100](NL::Transcriber **a1, NL::Transcriber *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::Transcriber::~Transcriber(result);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

NL::NumericConverter *std::unique_ptr<NL::NumericConverter>::reset[abi:ne180100](NL::NumericConverter **a1, NL::NumericConverter *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::NumericConverter::~NumericConverter(result);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

void std::default_delete<NL::DateConverter>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x1A625B130);
  }
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v3 + 24;
}

void sub_1A4366FB4(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<NL::ParseAttributes>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    long long v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t **std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    int64_t v6 = *result;
    uint64_t v7 = result[1];
    NL::NumericConverter *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    unsigned int v15 = result;
    BOOL v16 = v8;
    int v17 = (const void **)v8;
    if (v8)
    {
      BOOL v16 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::string>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          int v17 = (const void **)v16;
          if (v16) {
            BOOL v16 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          BOOL v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              BOOL v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    __n128 result = (uint64_t **)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)std::__tree<std::string>::__emplace_multi<std::string const&>(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1A4367178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__tree<std::string>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        __n128 result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    __n128 result = v5 + 1;
  }
  else
  {
    __n128 result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *std::__tree<std::string>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          __n128 result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          __n128 result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

const void **std::__tree<std::string>::__emplace_multi<std::string const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::string>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_1A436730C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<NL::ParseIntent>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)result, v13);
    unsigned int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unsigned int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<NL::ParseIntent>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1A4367438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<NL::ParseIntent>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::ParseIntent>>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::ParseIntent>>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::ParseIntent>>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::ParseIntent>>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void **std::vector<std::shared_ptr<NL::Entity>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<NL::Entity>>::__swap_out_circular_buffer(a1, v18);
    long long v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1A436779C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<NL::Entity>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NL::Entity>>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NL::Entity>>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::Entity>>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::Entity>>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::ParseIntent>>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<NL::ParseAttributes>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::shared_ptr<NL::ParseAttribute>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseAttribute>>,std::reverse_iterator<std::shared_ptr<NL::ParseAttribute>*>,std::reverse_iterator<std::shared_ptr<NL::ParseAttribute>*>,std::reverse_iterator<std::shared_ptr<NL::ParseAttribute>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseAttribute>>,std::reverse_iterator<std::shared_ptr<NL::ParseAttribute>*>,std::reverse_iterator<std::shared_ptr<NL::ParseAttribute>*>,std::reverse_iterator<std::shared_ptr<NL::ParseAttribute>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::ParseAttribute>>,std::reverse_iterator<std::shared_ptr<NL::ParseAttribute>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::ParseAttribute>>,std::reverse_iterator<std::shared_ptr<NL::ParseAttribute>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::ParseIntent>>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__shared_ptr_emplace<NL::ParseAttribute>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::ParseAttribute>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE700;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

void std::__shared_ptr_emplace<NL::ParseAttribute>::__on_zero_shared(uint64_t a1)
{
}

void NL::ParseAttribute::~ParseAttribute(NL::ParseAttribute *this)
{
  uint64_t v3 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *_ZNSt3__115allocate_sharedB8ne180100IN2NL11ParseIntentENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x58uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN2NL11ParseIntentENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1A4367BC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN2NL11ParseIntentENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF7CE5B0;
  NL::ParseIntent::ParseIntent((uint64_t)(a1 + 3));
  return a1;
}

void sub_1A4367C20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::ParseIntent>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE5B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::ParseIntent>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE5B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

void std::__shared_ptr_emplace<NL::ParseIntent>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 64);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::string>::destroy(a1 + 40, *(char **)(a1 + 48));
}

uint64_t *std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<NL::Entity  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

NL::Entity *std::__shared_ptr_pointer<NL::Entity  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(NL::Entity **)(a1 + 24);
  if (result)
  {
    NL::Entity::~Entity(result);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<NL::Entity  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void NL::Entity::~Entity(NL::Entity *this)
{
  uint64_t v2 = (const void *)*((void *)this + 15);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v5 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::__shared_ptr_emplace<NL::ParseIntents>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::ParseIntents>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE620;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

void std::__shared_ptr_emplace<NL::ParseIntents>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void NLHindiCanonicalizedMappings::NLHindiCanonicalizedMappings(NLHindiCanonicalizedMappings *this)
{
  NLAbstractDictionaryLookup::NLAbstractDictionaryLookup(this);
  *(void *)uint64_t v1 = &unk_1EF7CD940;
  NLHindiCanonicalizedMappings::loadDictMap(v1);
}

void sub_1A4368018(_Unwind_Exception *a1)
{
  NLAbstractDictionaryLookup::~NLAbstractDictionaryLookup(v1);
  _Unwind_Resume(a1);
}

void NLHindiCanonicalizedMappings::loadDictMap(NLHindiCanonicalizedMappings *this)
{
  getPathForResource(@"roman-canonical.dat", &v4);
  uint64_t v2 = (NL::CFLogger *)std::string::compare(&v4, "");
  if (v2) {
    NL::StringMap::createWithFile();
  }
  uint64_t v3 = NL::CFLogger::sharedInstance(v2);
  (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v3 + 16))(v3, 3, "Could not locate Canonicalization dictionary resource");
  *((void *)this + 1) = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1A436810C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *NLHindiCanonicalizedMappings::getWord@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  std::string v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    NL::StringMap::get(v4, a2, a3);
    return (void *)std::string::compare(a3, "");
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

BOOL compare_date_components(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(_DWORD *)(a1 + 8) != (unint64_t)*(unsigned int *)(a2 + 8)) {
    return 0;
  }
  return *(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

uint64_t compare_date_periods(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 == *a2) {
    return 1;
  }
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  BOOL v6 = compare_date_components(v2 + 28, v3 + 28);
  BOOL v7 = compare_date_components(v2 + 92, v3 + 92);
  BOOL v8 = v7;
  long long v9 = *(const void **)(v2 + 8);
  v11 = v9 && (uint64_t v10 = *(const void **)(v3 + 8)) != 0 && CFEqual(v9, v10) != 0;
  unsigned int v12 = v8 && v11;
  if (v6) {
    return v12;
  }
  else {
    return 0;
  }
}

BOOL compare_entities(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a1;
  if (*a1 == *a2) {
    return 1;
  }
  if (v2) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  uint64_t v7 = *((void *)v2 + 16);
  BOOL v8 = (std::__shared_weak_count *)*((void *)v2 + 17);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v7)
  {
    BOOL v11 = 0;
    if (!v8) {
      goto LABEL_14;
    }
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    goto LABEL_14;
  }
  uint64_t v10 = *((void *)*a2 + 16);
  long long v9 = (std::__shared_weak_count *)*((void *)*a2 + 17);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v11 = v10 != 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  BOOL v11 = v10 != 0;
  if (v8) {
    goto LABEL_13;
  }
LABEL_14:
  unsigned int v12 = *a1;
  if (v11)
  {
    uint64_t v14 = *((void *)v12 + 12);
    uint64_t v13 = *((void *)v12 + 13);
    return v14 == *((void *)*a2 + 12) && v13 == *((void *)*a2 + 13);
  }
  uint64_t v16 = (unsigned __int8 **)*a2;
  uint64_t v17 = v12[23];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = (unsigned __int8 *)v12[23];
  }
  else {
    uint64_t v18 = (unsigned __int8 *)*((void *)v12 + 1);
  }
  BOOL v19 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
  int v20 = (char)v19;
  if ((char)v19 < 0) {
    BOOL v19 = v16[1];
  }
  if (v18 != v19) {
    return 0;
  }
  if (v20 >= 0) {
    uint64_t v21 = *a2;
  }
  else {
    uint64_t v21 = *v16;
  }
  if ((v17 & 0x80) != 0) {
    return memcmp(*(const void **)v12, v21, *((void *)v12 + 1)) == 0;
  }
  if (!v12[23]) {
    return 1;
  }
  uint64_t v22 = v17 - 1;
  do
  {
    int v24 = *v12++;
    int v23 = v24;
    int v26 = *v21++;
    int v25 = v26;
    BOOL v28 = v22-- != 0;
    BOOL result = v23 == v25;
  }
  while (v23 == v25 && v28);
  return result;
}

uint64_t *enumerateIndexesOfRange(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v6 = result;
  char v25 = 0;
  uint64_t v7 = (void *)result[1];
  if (a2)
  {
    long long v9 = (void *)*result;
    if (v7 != (void *)*result)
    {
      unint64_t v10 = ((uint64_t)v7 - *result) >> 4;
      do
      {
        unint64_t v11 = v10 >> 1;
        unsigned int v12 = &v9[2 * (v10 >> 1)];
        uint64_t v14 = *v12;
        uint64_t v13 = v12 + 2;
        v10 += ~(v10 >> 1);
        if (*(void *)(v14 + 104) + *(void *)(v14 + 96) <= a2) {
          long long v9 = v13;
        }
        else {
          unint64_t v10 = v11;
        }
      }
      while (v10);
    }
    if (v9 != v7)
    {
      long long v15 = v9;
      do
      {
        uint64_t v16 = *(void *)(*v15 + 96);
        if (v16 == a2 && *(void *)(*v15 + 104) == a3)
        {
          BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, ((uint64_t)v15 - *v6) >> 4, &v25);
          if (v25) {
            return result;
          }
          uint64_t v7 = (void *)v6[1];
        }
        else if (v16 > a2)
        {
          return result;
        }
        v9 += 2;
        v15 += 2;
      }
      while (v9 != v7);
    }
  }
  else
  {
    uint64_t v18 = *result;
    if (v7 != (void *)*result)
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      do
      {
        uint64_t v21 = *(void *)(v18 + v19);
        uint64_t v22 = *(void *)(v21 + 96);
        uint64_t v23 = *(void *)(v21 + 104);
        if (v22) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v23 == a3;
        }
        if (v24)
        {
          BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, char *))(a4 + 16))(a4, v20, &v25);
          if (v25) {
            return result;
          }
          uint64_t v18 = *v6;
          uint64_t v7 = (void *)v6[1];
        }
        else if (v22 > 0)
        {
          return result;
        }
        ++v20;
        v19 += 16;
      }
      while (v20 < ((uint64_t)v7 - v18) >> 4);
    }
  }
  return result;
}

BOOL containsRange(const __CFString *a1, CFIndex a2, CFIndex a3, void **a4, unsigned char *a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 0;
  if (a1)
  {
    CFRange result = (CFRange)xmmword_1A43F6B80;
    CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
    v21.CFIndex location = a2;
    v21.length = a3;
    if (CFStringFindCharacterFromSet(a1, Predefined, v21, 0, &result) && a2 == result.location && a3 == result.length)
    {
      BOOL v11 = 1;
      if (a5) {
        *a5 = 1;
      }
    }
    else
    {
      memset(v14, 0, sizeof(v14));
      std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>(v14, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 0x40000000;
      uint64_t v13[2] = ___Z13containsRangePK10__CFString7CFRangeNSt3__16vectorINS3_10shared_ptrIN2NL6EntityEEENS3_9allocatorIS8_EEEEPb_block_invoke;
      void v13[3] = &unk_1E5B36288;
      v13[4] = &v16;
      enumerateIndexesOfRange(v14, a2, a3, (uint64_t)v13);
      unint64_t v20 = (void **)v14;
      std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v20);
      BOOL v11 = *((unsigned char *)v17 + 24) != 0;
    }
  }
  else
  {
    BOOL v11 = 0;
  }
  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_1A43686B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  *(void *)(v13 - 56) = v12;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 56));
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z13containsRangePK10__CFString7CFRangeNSt3__16vectorINS3_10shared_ptrIN2NL6EntityEEENS3_9allocatorIS8_EEEEPb_block_invoke(uint64_t result, uint64_t a2, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *a3 = 1;
  return result;
}

void subtokenize(const __CFString *a1, CFIndex a2, uint64_t a3, uint64_t a4, uint64_t *a5, void **a6)
{
  if (a3 < 1) {
    return;
  }
  CFIndex v12 = 1;
  while (1)
  {
    char v43 = 0;
    memset(v42, 0, sizeof(v42));
    std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>(v42, *a6, a6[1], ((char *)a6[1] - (char *)*a6) >> 4);
    BOOL v13 = containsRange(a1, a2, v12, v42, &v43);
    std::string __p = v42;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v13) {
      break;
    }
LABEL_25:
    if (a3 == v12++) {
      return;
    }
  }
  if (a3 != v12)
  {
    std::string __p = 0;
    CFRange v40 = 0;
    uint64_t v41 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
    if (!v43)
    {
      uint64_t v14 = v40;
      if (v40 >= v41)
      {
        uint64_t v16 = (char *)__p;
        uint64_t v17 = (v40 - (unsigned char *)__p) >> 4;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v41 - (unsigned char *)__p;
        if ((v41 - (unsigned char *)__p) >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          CFRange v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)&v41, v20);
          uint64_t v16 = (char *)__p;
          uint64_t v14 = v40;
        }
        else
        {
          CFRange v21 = 0;
        }
        uint64_t v22 = (CFIndex *)&v21[16 * v17];
        CFIndex *v22 = a2;
        v22[1] = v12;
        uint64_t v23 = v22;
        if (v14 != v16)
        {
          do
          {
            *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
            v23 -= 2;
            v14 -= 16;
          }
          while (v14 != v16);
          uint64_t v16 = (char *)__p;
        }
        long long v15 = (char *)(v22 + 2);
        std::string __p = v23;
        CFRange v40 = (char *)(v22 + 2);
        uint64_t v41 = &v21[16 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)CFRange v40 = a2;
        *((void *)v14 + 1) = v12;
        long long v15 = v14 + 16;
      }
      CFRange v40 = v15;
    }
    memset(v38, 0, sizeof(v38));
    std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>(v38, *a6, a6[1], ((char *)a6[1] - (char *)*a6) >> 4);
    subtokenize(a1, v12 + a2, a3 - v12, &__p, a5, v38);
    uint64_t v44 = v38;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v44);
    if (__p)
    {
      CFRange v40 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_25;
  }
  if (!v43)
  {
    unint64_t v25 = *(void *)(a4 + 16);
    int v26 = *(CFIndex **)(a4 + 8);
    if ((unint64_t)v26 >= v25)
    {
      BOOL v28 = *(CFIndex **)a4;
      uint64_t v29 = ((uint64_t)v26 - *(void *)a4) >> 4;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60) {
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v31 = v25 - (void)v28;
      if (v31 >> 3 > v30) {
        unint64_t v30 = v31 >> 3;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(a4 + 16, v32);
        BOOL v28 = *(CFIndex **)a4;
        int v26 = *(CFIndex **)(a4 + 8);
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v34 = (CFIndex *)&v33[16 * v29];
      uint64_t v35 = &v33[16 * v32];
      *uint64_t v34 = a2;
      v34[1] = a3;
      uint64_t v27 = v34 + 2;
      if (v26 != v28)
      {
        do
        {
          *((_OWORD *)v34 - 1) = *((_OWORD *)v26 - 1);
          v34 -= 2;
          v26 -= 2;
        }
        while (v26 != v28);
        BOOL v28 = *(CFIndex **)a4;
      }
      *(void *)a4 = v34;
      *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v27;
      *(void *)(a4 + 16) = v35;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *int v26 = a2;
      v26[1] = a3;
      uint64_t v27 = v26 + 2;
    }
    *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v27;
  }
  unint64_t v36 = a5[1];
  if (v36 >= a5[2])
  {
    uint64_t v37 = std::vector<std::vector<CFRange>>::__push_back_slow_path<std::vector<CFRange> const&>(a5, a4);
  }
  else
  {
    std::vector<std::vector<CFRange>>::__construct_one_at_end[abi:ne180100]<std::vector<CFRange> const&>((uint64_t)a5, a4);
    uint64_t v37 = v36 + 24;
  }
  a5[1] = v37;
}

void sub_1A4368A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NL::QueryTokenizer::QueryTokenizer(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  uint64_t v2 = a2[1];
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 16std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 12std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  operator new();
}

void sub_1A4368CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, const void **a10, const void *a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  nlp::CFScopedPtr<__CFNumber const*>::reset(&a11, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(&a13, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)&a16, 0);
  uint64_t v22 = (void *)v16[29];
  if (v22)
  {
    v16[30] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)v16[26];
  if (v23)
  {
    v16[27] = v23;
    operator delete(v23);
  }
  a16 = v17 + 136;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  BOOL v24 = (void *)v16[17];
  if (v24)
  {
    v16[18] = v24;
    operator delete(v24);
  }
  unint64_t v25 = (void *)v16[14];
  if (v25)
  {
    v16[15] = v25;
    operator delete(v25);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v17 + 56), 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v21, 0);
  nlp::CFScopedPtr<__CFSet const*>::reset((const void **)(v17 + 40), 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(v19, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(v20, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(v18, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a10, 0);
  uint64_t v26 = *(void *)v17;
  *(void *)uint64_t v17 = 0;
  if (v26) {
    std::default_delete<NL::EntityConverter>::operator()[abi:ne180100](v17, v26);
  }
  uint64_t v27 = (std::__shared_weak_count *)v16[3];
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  BOOL v28 = (std::__shared_weak_count *)v16[1];
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFCharacterSet const*>::reset(const void **a1, const void *a2)
{
  BOOL v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void NL::QueryTokenizer::setLocale(NL::QueryTokenizer *this, CFLocaleRef locale)
{
  if (locale)
  {
    CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1D218];
    CFStringRef Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    BOOL v6 = (const void **)((char *)this + 96);
    CFLocaleRef v5 = (const __CFLocale *)*((void *)this + 12);
    if (v5) {
      BOOL v7 = Value == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      CFTypeRef v9 = CFLocaleGetValue(v5, v3);
      if (CFEqual(Value, v9)) {
        return;
      }
      goto LABEL_12;
    }
    if (Value)
    {
LABEL_12:
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFLocaleRef v12 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Value);
      nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 12, v12);
      CFMutableSetRef Mutable = CFSetCreateMutable(v11, 0, MEMORY[0x1E4F1D548]);
      goto LABEL_13;
    }
  }
  else
  {
    BOOL v6 = (const void **)((char *)this + 96);
  }
  nlp::CFScopedPtr<__CFLocale const*>::reset(v6, 0);
  CFMutableSetRef Mutable = 0;
LABEL_13:

  nlp::CFScopedPtr<__CFSet const*>::reset((const void **)this + 11, Mutable);
}

void NL::QueryTokenizer::~QueryTokenizer(NL::QueryTokenizer *this)
{
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = (const void **)*((void *)this + 5);
  if (v3) {
    NLEntityDetectorRelease(v3);
  }
  BOOL v4 = (void *)*((void *)this + 29);
  if (v4)
  {
    *((void *)this + 3std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v4;
    operator delete(v4);
  }
  CFLocaleRef v5 = (void *)*((void *)this + 26);
  if (v5)
  {
    *((void *)this + 27) = v5;
    operator delete(v5);
  }
  CFAllocatorRef v11 = (void **)((char *)this + 184);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](&v11);
  CFAllocatorRef v11 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v11);
  BOOL v6 = (void *)*((void *)this + 17);
  if (v6)
  {
    *((void *)this + 1std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v6;
    operator delete(v6);
  }
  BOOL v7 = (void *)*((void *)this + 14);
  if (v7)
  {
    *((void *)this + 15) = v7;
    operator delete(v7);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 13, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 12, 0);
  nlp::CFScopedPtr<__CFSet const*>::reset((const void **)this + 11, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 10, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 9, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 8, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 7, 0);
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v8) {
    std::default_delete<NL::EntityConverter>::operator()[abi:ne180100]((uint64_t)this + 48, v8);
  }
  CFTypeRef v9 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void nlp::CFScopedPtr<__CFLocale const*>::reset(const void **a1, const void *a2)
{
  BOOL v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void NL::QueryTokenizer::setEntityDetector(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(const void ***)(a1 + 40);
  if (v4)
  {
    NLEntityDetectorRelease(v4);
    *(void *)(a1 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  }
  if (a2) {
    *(void *)(a1 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = NLEntityDetectorRetain(a2);
  }
}

void NL::QueryTokenizer::setString(const void **this, const __CFString *a2)
{
  NL::QueryTokenizer::reset((NL::QueryTokenizer *)this);
  if (a2)
  {
    CFTypeRef v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset(this + 13, v4);
  }

  NL::QueryTokenizer::tokenize((NL::QueryTokenizer *)this);
}

void NL::QueryTokenizer::reset(NL::QueryTokenizer *this)
{
  *((void *)this + 15) = *((void *)this + 14);
  std::vector<std::shared_ptr<NL::ParseAttributes>>::__clear[abi:ne180100]((uint64_t *)this + 20);
  *((void *)this + 1std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *((void *)this + 17);
  *((void *)this + 3std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = *((void *)this + 29);
  std::vector<std::vector<CFRange>>::__clear[abi:ne180100]((uint64_t *)this + 23);
  *((void *)this + 27) = *((void *)this + 26);
  *((void *)this + 32) = 0;
}

void NL::QueryTokenizer::tokenize(NL::QueryTokenizer *this)
{
  if (*((void *)this + 4) && *((void *)this + 13))
  {
    std::string v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v2 = (const void *)NL::QueryTokenizer::copySearchStringAndTokenize((CFStringRef *)this);
    uint64_t v54 = v2;
    if (v2)
    {
      if (*((void *)this + 4)
        && *((void *)this + 5)
        && (NL::QueryTokenizer::containsLegacyQuerySyntax((CFCharacterSetRef *)this, *((const __CFString **)this + 13)) & 1) == 0
        && *((uint64_t *)this + 32) <= 20)
      {
        v58.length = CFStringGetLength(*((CFStringRef *)this + 13));
        v58.CFIndex location = 0;
        NL::EntityConverter::entityWithString(*((void *)this + 6), *((CFStringRef *)this + 13), v58, &v49);
        uint64_t v52 = v49;
        if (v49) {
          operator new();
        }
        uint64_t v53 = 0;
        uint64_t v49 = 0;
        std::unique_ptr<NL::Entity>::reset[abi:ne180100]((NL::Entity **)&v49, 0);
        NL::QueryTokenizer::updateEntitiesWithQuotedTextValues((uint64_t)this, (uint64_t)&v55);
        NL::QueryTokenizer::updateEntitiesWithKnownValues(this, (uint64_t)v2, (uint64_t)&v55);
        NL::QueryTokenizer::updateEntitiesWithUnknownValues((const __CFString **)this, &v55);
        if (v56 != v55)
        {
          std::sort[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity> *>,entity_greater_than_range>(v55, v56);
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          CFAllocatorRef v46 = 0;
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          CFStringRef v3 = (const __CFString *)*((void *)this + 13);
          CFIndex Length = CFStringGetLength(v3);
          memset(v45, 0, sizeof(v45));
          std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>(v45, v55, v56, ((char *)v56 - (char *)v55) >> 4);
          subtokenize(v3, 0, Length, (uint64_t)&v49, (uint64_t *)&v46, v45);
          uint64_t v42 = (void **)v45;
          std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v42);
          std::sort[abi:ne180100]<std::__wrap_iter<std::vector<CFRange> *>,ranges_greater_than_range>((uint64_t)v46, v47);
          if (v47 == v46)
          {
            uint64_t v42 = (void **)&v46;
            std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](&v42);
            if (v49)
            {
              uint64_t v50 = v49;
              operator delete(v49);
            }
          }
          else
          {
            std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>((uint64_t *)this + 20, *((void **)this + 21), v55, v56, ((char *)v56 - (char *)v55) >> 4);
            unint64_t v30 = v2;
            CFLocaleRef v5 = v55;
            for (uint64_t i = v56; i != v5; i -= 2)
            {
              BOOL v7 = (std::__shared_weak_count *)*(i - 1);
              if (v7) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v7);
              }
            }
            uint64_t v56 = v5;
            uint64_t v8 = v46;
            uint64_t v31 = v47;
            if (v46 != v47)
            {
              uint64_t v9 = 0;
              do
              {
                uint64_t v42 = 0;
                char v43 = 0;
                uint64_t v44 = 0;
                std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v42, *v8, (uint64_t)v8[1], ((unsigned char *)v8[1] - (unsigned char *)*v8) >> 4);
                std::string __p = 0;
                CFRange v40 = 0;
                uint64_t v41 = 0;
                std::vector<std::vector<CFRange>>::push_back[abi:ne180100]((uint64_t *)this + 23, (uint64_t)&__p);
                if (__p)
                {
                  CFRange v40 = __p;
                  operator delete(__p);
                }
                CFAllocatorRef v11 = v42;
                unint64_t v10 = v43;
                if (v42 != v43)
                {
                  unint64_t v32 = v8;
                  uint64_t v12 = 0;
                  do
                  {
                    uint64_t v13 = (uint64_t)*v11;
                    uint64_t v14 = (uint64_t)v11[1];
                    memset(v38, 0, sizeof(v38));
                    std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>(v38, *((void **)this + 20), *((void **)this + 21), (uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 4);
                    v33[0] = MEMORY[0x1E4F143A8];
                    v33[1] = 1174405120;
                    v33[2] = ___ZN2NL14QueryTokenizer8tokenizeEv_block_invoke;
                    v33[3] = &__block_descriptor_tmp_41;
                    v33[4] = this;
                    v33[5] = v12;
                    uint64_t v35 = 0;
                    uint64_t v36 = 0;
                    uint64_t v34 = 0;
                    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v34, v42, (uint64_t)v43, ((char *)v43 - (char *)v42) >> 4);
                    uint64_t v37 = v9;
                    enumerateIndexesOfRange(v38, v13, v14, (uint64_t)v33);
                    std::string __p = v38;
                    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    if (v34)
                    {
                      uint64_t v35 = v34;
                      operator delete(v34);
                    }
                    v11 += 2;
                    ++v12;
                  }
                  while (v11 != v10);
                  CFAllocatorRef v11 = v42;
                  uint64_t v8 = v32;
                }
                if (v11)
                {
                  char v43 = v11;
                  operator delete(v11);
                }
                ++v9;
                v8 += 3;
              }
              while (v8 != v31);
            }
            uint64_t v16 = *((void *)this + 20);
            uint64_t v15 = *((void *)this + 21);
            if (v15 != v16)
            {
              unint64_t v17 = 0;
              unint64_t v18 = (void **)((char *)this + 232);
              do
              {
                if (*(_DWORD *)(*(void *)(v16 + 16 * v17) + 112) == 5)
                {
                  unint64_t v20 = (unint64_t *)*((void *)this + 30);
                  unint64_t v19 = *((void *)this + 31);
                  if ((unint64_t)v20 >= v19)
                  {
                    uint64_t v22 = (unint64_t *)*v18;
                    uint64_t v23 = ((char *)v20 - (unsigned char *)*v18) >> 3;
                    unint64_t v24 = v23 + 1;
                    if ((unint64_t)(v23 + 1) >> 61) {
                      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v25 = v19 - (void)v22;
                    if (v25 >> 2 > v24) {
                      unint64_t v24 = v25 >> 2;
                    }
                    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v26 = v24;
                    }
                    if (v26)
                    {
                      uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)this + 248, v26);
                      uint64_t v22 = (unint64_t *)*((void *)this + 29);
                      unint64_t v20 = (unint64_t *)*((void *)this + 30);
                    }
                    else
                    {
                      uint64_t v27 = 0;
                    }
                    BOOL v28 = (unint64_t *)&v27[8 * v23];
                    *BOOL v28 = v17;
                    CFRange v21 = v28 + 1;
                    while (v20 != v22)
                    {
                      unint64_t v29 = *--v20;
                      *--BOOL v28 = v29;
                    }
                    *((void *)this + 29) = v28;
                    *((void *)this + 3std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v21;
                    *((void *)this + 31) = &v27[8 * v26];
                    if (v22) {
                      operator delete(v22);
                    }
                  }
                  else
                  {
                    *unint64_t v20 = v17;
                    CFRange v21 = v20 + 1;
                  }
                  *((void *)this + 3std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v21;
                  uint64_t v16 = *((void *)this + 20);
                  uint64_t v15 = *((void *)this + 21);
                }
                ++v17;
              }
              while (v17 < (v15 - v16) >> 4);
            }
            uint64_t v42 = (void **)&v46;
            std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](&v42);
            if (v49)
            {
              uint64_t v50 = v49;
              operator delete(v49);
            }
            uint64_t v2 = v30;
          }
        }
      }
      CFRelease(v2);
    }
    uint64_t v49 = (void **)&v55;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v49);
  }
}

void sub_1A43696FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  a30 = (void *)(v31 - 200);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  uint64_t v33 = *(void **)(v31 - 176);
  if (v33)
  {
    *(void *)(v31 - 16std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v33;
    operator delete(v33);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v31 - 136), 0);
  *(void *)(v31 - 176) = v31 - 128;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 176));
  _Unwind_Resume(a1);
}

uint64_t NL::QueryTokenizer::getEntityAtLocation@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) != 0 || (uint64_t v3 = *(void *)(this + 160), a2 >= (*(void *)(this + 168) - v3) >> 4))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    long long v4 = *(_OWORD *)(v3 + 16 * a2);
    *(_OWORD *)a3 = v4;
    if (*((void *)&v4 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
  return this;
}

uint64_t NL::QueryTokenizer::tokenRangeAtTokenizationIndexForSpan(NL::QueryTokenizer *this, unint64_t a2, CFRange a3)
{
  uint64_t v3 = -1;
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = *((void *)this + 23);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 24) - v4) >> 3) > a2)
    {
      uint64_t v5 = v4 + 24 * a2;
      BOOL v6 = *(void **)v5;
      BOOL v7 = *(void **)(v5 + 8);
      if (*(void **)v5 == v7)
      {
        return -1;
      }
      else
      {
        uint64_t v3 = -1;
        do
        {
          if (v6[1] == a3.location) {
            uint64_t v3 = *(void *)(*(void *)(*((void *)this + 20) + 16 * *v6) + 96);
          }
          v6 += 2;
        }
        while (v6 != v7);
      }
    }
  }
  return v3;
}

void NL::QueryTokenizer::enumerateEntitiesAtTokenizationIndex(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x8000000000000000) == 0
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 3) > a2)
  {
    char v20 = 0;
    BOOL v6 = NL::SearchGrammar::tokenOrderReversed(*(NL::SearchGrammar **)(a1 + 16));
    uint64_t v7 = *(void *)(a1 + 184);
    if (v6)
    {
      uint64_t v8 = *(void *)(v7 + 24 * a2 + 8);
      do
      {
        if (v8 == *(void *)(*(void *)(a1 + 184) + 24 * a2)) {
          break;
        }
        uint64_t v10 = v8 - 16;
        uint64_t v9 = *(void *)(v8 - 16);
        long long v11 = *(_OWORD *)(*(void *)(a1 + 160) + 16 * v9);
        long long v19 = v11;
        if (*((void *)&v11 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
          uint64_t v9 = *(void *)(v8 - 16);
        }
        (*(void (**)(uint64_t, long long *, void, uint64_t, char *))(a3 + 16))(a3, &v19, *(void *)(v8 - 8), v9, &v20);
        if (*((void *)&v19 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
        }
        uint64_t v8 = v10;
      }
      while (!v20);
    }
    else
    {
      uint64_t v12 = (void *)(v7 + 24 * a2);
      uint64_t v13 = v12[1];
      if (*v12 != v13)
      {
        uint64_t v14 = *v12 + 16;
        do
        {
          uint64_t v15 = *(void *)(v14 - 16);
          long long v16 = *(_OWORD *)(*(void *)(a1 + 160) + 16 * v15);
          long long v18 = v16;
          if (*((void *)&v16 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
            uint64_t v15 = *(void *)(v14 - 16);
          }
          (*(void (**)(uint64_t, long long *, void, uint64_t, char *))(a3 + 16))(a3, &v18, *(void *)(v14 - 8), v15, &v20);
          if (*((void *)&v18 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
          }
          if (v20) {
            break;
          }
          BOOL v17 = v14 == v13;
          v14 += 16;
        }
        while (!v17);
      }
    }
  }
}

void sub_1A4369A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void NL::QueryTokenizer::enumerateQuotedEntities(void *a1, uint64_t a2)
{
  char v10 = 0;
  uint64_t v2 = a1[29];
  uint64_t v3 = a1[30];
  if (v2 != v3)
  {
    uint64_t v6 = v2 + 8;
    do
    {
      long long v7 = *(_OWORD *)(a1[20] + 16 * *(void *)(v6 - 8));
      long long v9 = v7;
      if (*((void *)&v7 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, long long *))(a2 + 16))(a2, &v9);
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
      if (v10) {
        break;
      }
      BOOL v8 = v6 == v3;
      v6 += 8;
    }
    while (!v8);
  }
}

void sub_1A4369B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NL::QueryTokenizer::containsLegacyQuerySyntax(CFCharacterSetRef *this, const __CFString *a2)
{
  if (a2 && (CFSetRef v3 = this[11]) != 0 && CFSetGetCount(v3))
  {
    CFIndex Length = CFStringGetLength(a2);
    char v6 = 0;
    v8.CFIndex location = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v8.length = Length;
    do
    {
      if (v8.location >= Length) {
        break;
      }
      int CharacterFromSet = CFStringFindCharacterFromSet(a2, this[10], v8, 0, &result);
      CFIndex location = result.location;
      if (!CharacterFromSet || result.location < 1) {
        break;
      }
      while (location >= 2)
      {
        if (CFStringGetCharacterAtIndex(a2, --location) == 32)
        {
          v12.CFIndex location = location + 1;
          goto LABEL_14;
        }
      }
      v12.CFIndex location = 0;
LABEL_14:
      CFIndex v13 = result.location;
      v12.length = result.location - v12.location;
      CFStringRef v14 = CFStringCreateWithSubstring(v7, a2, v12);
      if (v14)
      {
        CFStringRef v15 = v14;
        v6 |= CFSetContainsValue(this[11], v14) != 0;
        if (v6) {
          int v16 = 3;
        }
        else {
          int v16 = 0;
        }
        CFRelease(v15);
      }
      else
      {
        if (v6)
        {
          char v6 = 1;
          return v6 & 1;
        }
        int v16 = 0;
        char v6 = 0;
      }
      v8.CFIndex location = v13 + 1;
      v8.length = Length - v13;
    }
    while (!v16);
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

void sub_1A4369CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NL::QueryTokenizer::updateEntitiesWithQuotedTextValues(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 104) && *(void *)(a1 + 56))
  {
    uint64_t v3 = a2;
    CFRange result = (CFRange)xmmword_1A43F6B80;
    uint64_t v12 = 0;
    CFIndex v13 = &v12;
    uint64_t v14 = 0x4002000000;
    CFStringRef v15 = __Block_byref_object_copy__2;
    int v16 = __Block_byref_object_dispose__2;
    memset(v17, 0, sizeof(v17));
    uint64_t v4 = *(void *)(a1 + 112);
    uint64_t v5 = *(void *)(a1 + 120);
    if (v4 != v5)
    {
      CFIndex location = -1;
      CFIndex v7 = -1;
      do
      {
        if ((*(unsigned char *)(v4 + 17) & 4) != 0
          && CFStringFindCharacterFromSet(*(CFStringRef *)(a1 + 104), *(CFCharacterSetRef *)(a1 + 56), *(CFRange *)v4, 0, &result))
        {
          if (location == -1)
          {
            CFIndex v7 = result.length + result.location;
            CFIndex location = result.location;
          }
          else
          {
            v20.length = result.location - v7;
            v20.CFIndex location = v7;
            CFIndex v7 = NL::QueryTokenizer::contentRangeFromRange((NL::QueryTokenizer *)a1, v20);
            NL::EntityConverter::enumerateEntitiesWithString(*(NL::ParserContext ***)(a1 + 48), *(const __CFString **)(a1 + 104), @"QuotedText", v7, v8);
            CFIndex location = -1;
          }
        }
        v4 += 24;
      }
      while (v4 != v5);
      uint64_t v3 = a2;
      if (location != -1)
      {
        CFStringGetLength(*(CFStringRef *)(a1 + 104));
        v21.length = CFStringGetLength(*(CFStringRef *)(a1 + 104)) - v7;
        v21.CFIndex location = v7;
        CFIndex v9 = NL::QueryTokenizer::contentRangeFromRange((NL::QueryTokenizer *)a1, v21);
        NL::EntityConverter::enumerateEntitiesWithString(*(NL::ParserContext ***)(a1 + 48), *(const __CFString **)(a1 + 104), @"QuotedText", v9, v10);
      }
    }
    std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>((uint64_t *)v3, *(void **)(v3 + 8), (uint64_t *)v13[5], (void *)v13[6], (v13[6] - v13[5]) >> 4);
    _Block_object_dispose(&v12, 8);
    long long v19 = (void **)v17;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

void sub_1A4369F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  *(void *)(v13 - 112) = a3;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 112));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t NL::QueryTokenizer::contentRangeFromRange(NL::QueryTokenizer *this, CFRange a2)
{
  uint64_t v2 = (CFIndex *)*((void *)this + 14);
  uint64_t v3 = (CFIndex *)*((void *)this + 15);
  if (v3 == v2 || !*((void *)this + 13)) {
    return -1;
  }
  CFIndex length = a2.length;
  CFIndex location = a2.location;
  if (a2.length != 1) {
    goto LABEL_6;
  }
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  v38.CFIndex location = location;
  v38.CFIndex length = 1;
  if (CFStringFindCharacterFromSet(*((CFStringRef *)this + 13), Predefined, v38, 0, 0)) {
    return -1;
  }
  uint64_t v2 = (CFIndex *)*((void *)this + 14);
  uint64_t v3 = (CFIndex *)*((void *)this + 15);
LABEL_6:
  uint64_t v8 = -1;
  if (v3 == v2) {
    return v8;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v3 - v2);
  CFIndex v10 = v2;
  unint64_t v11 = v9;
  do
  {
    unint64_t v12 = v11 >> 1;
    uint64_t v13 = &v10[3 * (v11 >> 1)];
    CFIndex v15 = *v13;
    CFIndex v16 = v13[1];
    uint64_t v14 = v13 + 3;
    v11 += ~(v11 >> 1);
    if (v16 + v15 <= location) {
      CFIndex v10 = v14;
    }
    else {
      unint64_t v11 = v12;
    }
  }
  while (v11);
  if (v10 == v3) {
    return -1;
  }
  CFIndex v17 = 0;
  CFIndex v18 = location + length;
  uint64_t v8 = -1;
  do
  {
    CFIndex v19 = *v10;
    CFIndex v20 = v10[1];
    if (location != *v10 || length != v20)
    {
      CFIndex v22 = v20 + v19;
      if ((v19 < location || v22 >= v18) && (v19 <= location || v22 > v18)) {
        break;
      }
    }
    if ((*((unsigned char *)v10 + 17) & 8) == 0)
    {
      CFIndex v17 = v10[1];
      uint64_t v8 = *v10;
      break;
    }
    v10 += 3;
    uint64_t v8 = v19;
    CFIndex v17 = v20;
  }
  while (v10 != v3);
  if (v8 != -1 && v8 + v17 != v18)
  {
    do
    {
      unint64_t v26 = v9 >> 1;
      uint64_t v27 = &v3[-3 * (v9 >> 1)];
      uint64_t v29 = *(v27 - 3);
      uint64_t v30 = *(v27 - 2);
      BOOL v28 = v27 - 3;
      v9 += ~(v9 >> 1);
      if (v30 + v29 > v18) {
        uint64_t v3 = v28;
      }
      else {
        unint64_t v9 = v26;
      }
    }
    while (v9);
    if (v2 != v3)
    {
      uint64_t v31 = v3;
      while (1)
      {
        CFIndex v32 = *(v31 - 3);
        uint64_t v33 = *(v31 - 2);
        v31 -= 3;
        if (location != v32 || length != v33)
        {
          CFIndex v35 = v33 + v32;
          if ((v32 < location || v35 >= v18) && (v32 <= location || v35 > v18)) {
            break;
          }
        }
        if ((*((unsigned char *)v3 - 7) & 8) != 0)
        {
          uint64_t v3 = v31;
          if (v31 != v2) {
            continue;
          }
        }
        return v8;
      }
      CFStringGetLength(*((CFStringRef *)this + 13));
    }
  }
  return v8;
}

uint64_t ___ZN2NL14QueryTokenizer34updateEntitiesWithQuotedTextValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke(uint64_t result, uint64_t *a2)
{
  if (*a2) {
    return std::vector<std::shared_ptr<NL::Entity>>::emplace_back<std::unique_ptr<NL::Entity>>((uint64_t *)(*(void *)(*(void *)(result + 32) + 8) + 40), a2);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<NL::Entity>>::emplace_back<std::unique_ptr<NL::Entity>>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    CFIndex v15 = v13;
    CFIndex v16 = (uint64_t *)&v13[16 * v9];
    CFIndex v18 = &v13[16 * v12];
    std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>(v16, a2);
    CFIndex v17 = v16 + 2;
    std::vector<std::shared_ptr<NL::Entity>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer(&v15);
  }
  else
  {
    std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_1A436A2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN2NL14QueryTokenizer34updateEntitiesWithQuotedTextValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_2(uint64_t result, uint64_t *a2)
{
  if (*a2) {
    return std::vector<std::shared_ptr<NL::Entity>>::emplace_back<std::unique_ptr<NL::Entity>>((uint64_t *)(*(void *)(*(void *)(result + 32) + 8) + 40), a2);
  }
  return result;
}

void NL::QueryTokenizer::updateEntitiesWithKnownValues(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a1[13])
    {
      uint64_t v3 = (void *)a1[5];
      if (v3)
      {
        if (a1[2])
        {
          v18[0] = 0;
          v18[1] = v18;
          v18[2] = 0x4002000000;
          v18[3] = __Block_byref_object_copy__17;
          v20[0] = 0;
          v20[1] = 0;
          v18[4] = __Block_byref_object_dispose__18;
          uint64_t v19 = v20;
          v16[0] = 0;
          v16[1] = v16;
          void v16[2] = 0x3802000000;
          v16[3] = __Block_byref_object_copy__19;
          v16[4] = __Block_byref_object_dispose__20;
          long long v17 = xmmword_1A43F6B80;
          uint64_t v10 = 0;
          uint64_t v11 = &v10;
          uint64_t v12 = 0x4002000000;
          uint64_t v13 = __Block_byref_object_copy__2;
          uint64_t v14 = __Block_byref_object_dispose__2;
          memset(v15, 0, sizeof(v15));
          v8[0] = 0;
          v8[1] = (void **)v8;
          v8[2] = (void **)0x4002000000;
          void v8[3] = (void **)__Block_byref_object_copy__2;
          v8[4] = (void **)__Block_byref_object_dispose__2;
          memset(v9, 0, sizeof(v9));
          v6[0] = 0;
          v6[1] = (void **)v6;
          v6[2] = (void **)0x3802000000;
          v6[3] = (void **)__Block_byref_object_copy__21;
          v6[5] = 0;
          unint64_t v7 = 0;
          v6[4] = (void **)__Block_byref_object_dispose__22;
          v5[0] = MEMORY[0x1E4F143A8];
          v5[1] = 0x40000000;
          v5[2] = ___ZN2NL14QueryTokenizer29updateEntitiesWithKnownValuesEPK10__CFStringRNSt3__16vectorINS4_10shared_ptrINS_6EntityEEENS4_9allocatorIS8_EEEE_block_invoke;
          v5[3] = &unk_1E5B36770;
          v5[4] = v16;
          v5[5] = v18;
          v5[6] = v8;
          v5[7] = v6;
          v5[8] = &v10;
          v5[9] = a1;
          NLEntityDetectorEnumerateEntities(v3, a2, (uint64_t)v5);
          std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>((uint64_t *)a3, *(void **)(a3 + 8), (uint64_t *)v11[5], (void *)v11[6], (v11[6] - v11[5]) >> 4);
          _Block_object_dispose(v6, 8);
          if (v7) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          }
          _Block_object_dispose(v8, 8);
          v6[0] = (void **)v9;
          std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](v6);
          _Block_object_dispose(&v10, 8);
          v8[0] = (void **)v15;
          std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](v8);
          _Block_object_dispose(v16, 8);
          _Block_object_dispose(v18, 8);
          std::__tree<std::string>::destroy((uint64_t)&v19, v20[0]);
        }
      }
    }
  }
}

void sub_1A436A5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a19, 8);
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Block_object_dispose(&a26, 8);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Block_object_dispose(&a34, 8);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a26);
  _Block_object_dispose((const void *)(v35 - 168), 8);
  _Block_object_dispose((const void *)(v35 - 112), 8);
  std::__tree<std::string>::destroy(v34, *(char **)(v35 - 64));
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__17(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

{
  nlp::CFScopedPtr<__CFAttributedString *>::reset((const void **)(a1 + 40), 0);
}

__n128 __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = result;
  return result;
}

__n128 __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = result;
  *(void *)(a2 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN2NL14QueryTokenizer29updateEntitiesWithKnownValuesEPK10__CFStringRNSt3__16vectorINS4_10shared_ptrINS_6EntityEEENS4_9allocatorIS8_EEEE_block_invoke(int8x16_t *a1, __CFString *a2, CFIndex a3, CFIndex a4, const __CFDictionary *a5)
{
  uint64_t v10 = (uint64_t *)a1[4].i64[1];
  uint64_t v11 = v10[2];
  getUTF8StringFromCFString(a2, &__p);
  NL::SearchGrammar::getValidTypeName(v11, (uint64_t)&__p, &v59);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v59.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v13 = *(void *)(a1[2].i64[0] + 8);
    uint64_t v14 = *(void *)(v13 + 40);
    if (v14 == -1
      || ((uint64_t v15 = *(void *)(v13 + 48), v14 == a3) ? (v16 = v15 == a4) : (v16 = 0),
          !v16
       || *(void *)(a1[2].i64[1] + 8) + 48 == std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(*(void *)(a1[2].i64[1] + 8) + 40, (const void **)&v59.__r_.__value_.__l.__data_)|| NL::SearchGrammar::isTypeMultivalued(v10[2], &v59)))
    {
      uint64_t v17 = *(void *)(a1[2].i64[0] + 8);
      CFIndex v18 = *(void *)(v17 + 40);
      if (v18 == -1) {
        goto LABEL_38;
      }
      uint64_t v19 = *(void *)(v17 + 48);
      CFIndex v20 = a3 + a4;
      CFIndex v21 = v19 + v18;
      if ((a3 < v18 || v20 >= v21) && (a3 <= v18 || v20 > v21)) {
        goto LABEL_38;
      }
      uint64_t v24 = *(void *)(a1[2].i64[1] + 8);
      uint64_t v25 = *(void **)(v24 + 40);
      unint64_t v26 = (void *)(v24 + 48);
      if (v25 == (void *)(v24 + 48)) {
        goto LABEL_38;
      }
      int v27 = 1;
      do
      {
        if (*((char *)v25 + 55) < 0) {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v25[4], v25[5]);
        }
        else {
          std::string __p = *(std::string *)(v25 + 4);
        }
        BOOL isTypeSubsumed = NL::SearchGrammar::isTypeSubsumed(v10[2], (uint64_t)&__p, (unsigned __int8 *)&v59);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v29 = (void *)v25[1];
        if (v29)
        {
          do
          {
            uint64_t v30 = v29;
            uint64_t v29 = (void *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            uint64_t v30 = (void *)v25[2];
            BOOL v16 = *v30 == (void)v25;
            uint64_t v25 = v30;
          }
          while (!v16);
        }
        v27 &= !isTypeSubsumed;
        uint64_t v25 = v30;
      }
      while (v30 != v26);
      if (v27)
      {
LABEL_38:
        CFStringRef CFStringFromString = createCFStringFromString((uint64_t)&v59);
        if (CFStringFromString)
        {
          v60.CFIndex location = a3;
          v60.CFIndex length = a4;
          uint64_t v32 = NL::QueryTokenizer::tokenRangeForSearchPiece((NL::QueryTokenizer *)v10, v60);
          if (v32 != -1)
          {
            CFIndex v34 = v32;
            CFIndex v35 = v33;
            uint64_t v36 = *(void *)(a1[2].i64[0] + 8);
            uint64_t v37 = *(void *)(v36 + 40);
            CFIndex v38 = *(void *)(v36 + 48) + v37;
            if (v37 != -1 && v38 <= a3) {
              std::vector<std::shared_ptr<NL::ParseAttributes>>::__clear[abi:ne180100]((uint64_t *)(*(void *)(a1[3].i64[0] + 8)
            }
                                                                                                 + 40));
            __p.__r_.__value_.__r.__words[0] = 0;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
            __p.__r_.__value_.__r.__words[2] = 0x2000000000;
            char v58 = 0;
            CFRange v40 = (NL::SearchGrammar *)v10[2];
            __int32 SymbolID = NL::SearchGrammar::getSymbolID((uint64_t)v40, (uint64_t)&v59);
            BOOL isFunction = NL::SearchGrammar::isFunction(v40, SymbolID);
            char v43 = (NL::Entity *)v10[6];
            CFStringRef v44 = (const __CFString *)v10[13];
            v53[0] = MEMORY[0x1E4F143A8];
            v53[1] = 0x40000000;
            v53[2] = ___ZN2NL14QueryTokenizer29updateEntitiesWithKnownValuesEPK10__CFStringRNSt3__16vectorINS4_10shared_ptrINS_6EntityEEENS4_9allocatorIS8_EEEE_block_invoke_2;
            v53[3] = &unk_1E5B36748;
            int8x16_t v54 = vextq_s8(a1[3], a1[3], 8uLL);
            uint64_t v45 = a1[4].i64[0];
            p_p = &__p;
            uint64_t v56 = v45;
            NL::EntityConverter::enumerateEntitiesWithTypeAndValues(v43, v44, v34, v35, CFStringFromString, a2, a5, isFunction, (uint64_t)v53);
            _Block_object_dispose(&__p, 8);
          }
          CFRelease(CFStringFromString);
        }
        uint64_t v46 = *(void *)(a1[2].i64[0] + 8);
        uint64_t v48 = *(void *)(v46 + 40);
        uint64_t v47 = *(void *)(v46 + 48);
        if (v48 != a3 || v47 != a4)
        {
          uint64_t v50 = *(void **)(a1[2].i64[1] + 8);
          uint64_t v51 = (char *)v50[6];
          v50 += 6;
          std::__tree<std::string>::destroy((uint64_t)(v50 - 1), v51);
          *(v50 - 1) = v50;
          *uint64_t v50 = 0;
          v50[1] = 0;
          uint64_t v52 = *(void *)(a1[2].i64[0] + 8);
          *(void *)(v52 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = a3;
          *(void *)(v52 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a4;
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(*(void *)(a1[2].i64[1] + 8) + 40), (const void **)&v59.__r_.__value_.__l.__data_, (uint64_t)&v59);
      }
    }
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
}

void sub_1A436AA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 81) < 0) {
    operator delete(*(void **)(v24 - 104));
  }
  _Unwind_Resume(exception_object);
}

uint64_t NL::QueryTokenizer::tokenRangeForSearchPiece(NL::QueryTokenizer *this, CFRange a2)
{
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = *((void *)this + 15);
  if (v3 == v2) {
    return -1;
  }
  CFIndex location = a2.location;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 3);
  unint64_t v6 = (char *)*((void *)this + 17);
  if (a2.location)
  {
    unint64_t v7 = (char *)*((void *)this + 18);
    if (v7 == v6)
    {
      uint64_t v9 = (char *)*((void *)this + 17);
    }
    else
    {
      unint64_t v8 = (v7 - v6) >> 4;
      uint64_t v9 = (char *)*((void *)this + 17);
      do
      {
        unint64_t v10 = v8 >> 1;
        uint64_t v11 = (uint64_t *)&v9[16 * (v8 >> 1)];
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        uint64_t v14 = (char *)(v11 + 2);
        v8 += ~(v8 >> 1);
        if (v13 + v12 <= location) {
          uint64_t v9 = v14;
        }
        else {
          unint64_t v8 = v10;
        }
      }
      while (v8);
    }
    if (v9 != v7)
    {
      unint64_t v24 = (v9 - v6) >> 4;
      if (v24 < v5)
      {
        CFIndex v25 = location + a2.length;
        unint64_t v26 = v9 + 16;
        uint64_t v27 = v26 - v6;
        uint64_t result = -1;
        do
        {
          if (*(void *)&v6[16 * v24 + 8] + *(void *)&v6[16 * v24] > v25) {
            break;
          }
          uint64_t v28 = *(void *)(v2 + 24 * v24);
          if (result == -1) {
            uint64_t result = v28;
          }
          if (v26 == v7) {
            break;
          }
          unint64_t v24 = v27 >> 4;
          v27 += 16;
          v26 += 16;
        }
        while (v24 < v5);
        return result;
      }
    }
    return -1;
  }
  uint64_t v15 = (char *)*((void *)this + 18);
  if (v6 == v15) {
    return -1;
  }
  uint64_t result = -1;
  if (v3 != v2 && *((void *)v6 + 1) + *(void *)v6 <= a2.length)
  {
    uint64_t v17 = v6 + 16;
    uint64_t v18 = v2 + 8;
    unint64_t v19 = 1;
    do
    {
      uint64_t v20 = v18;
      if (result == -1) {
        uint64_t result = *(void *)(v18 - 8);
      }
      if (v17 == v15) {
        break;
      }
      if (v19 >= v5) {
        break;
      }
      uint64_t v21 = *(void *)v17;
      uint64_t v22 = *((void *)v17 + 1);
      v17 += 16;
      CFIndex v23 = v22 + v21;
      uint64_t v18 = v20 + 24;
      ++v19;
    }
    while (v23 <= a2.length);
  }
  return result;
}

void ___ZN2NL14QueryTokenizer29updateEntitiesWithKnownValuesEPK10__CFStringRNSt3__16vectorINS4_10shared_ptrINS_6EntityEEENS4_9allocatorIS8_EEEE_block_invoke_2(void *a1, uint64_t *a2)
{
  std::shared_ptr<NL::Entity>::operator=[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((void *)(*(void *)(a1[4] + 8) + 40), a2);
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = *(unsigned __int8 ***)(v3 + 40);
  unint64_t v5 = *(unsigned __int8 ***)(v3 + 48);
  while (v4 != v5)
  {
    if (compare_entities(v4, (unsigned __int8 **)(*(void *)(a1[4] + 8) + 40)))
    {
      uint64_t v6 = *(void *)(*(void *)(a1[4] + 8) + 40);
      if (*(_DWORD *)(v6 + 112) == 1)
      {
        unint64_t v7 = (std::__shared_weak_count *)*((void *)*v4 + 17);
        v16[0] = *((void *)*v4 + 16);
        v16[1] = (uint64_t)v7;
        if (v7)
        {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v6 = *(void *)(*(void *)(a1[4] + 8) + 40);
        }
        unint64_t v8 = *(std::__shared_weak_count **)(v6 + 136);
        v15[0] = *(void *)(v6 + 128);
        v15[1] = (uint64_t)v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v9 = compare_date_periods(v16, v15);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        if ((v9 & 1) == 0) {
          std::vector<std::shared_ptr<NL::Entity>>::push_back[abi:ne180100]((uint64_t *)*v4 + 20, (long long *)(*(void *)(a1[4] + 8) + 40));
        }
      }
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
      break;
    }
    v4 += 2;
  }
  if (!*(unsigned char *)(*(void *)(a1[6] + 8) + 24))
  {
    uint64_t v10 = *(void *)(a1[4] + 8);
    uint64_t v12 = *(void *)(v10 + 40);
    uint64_t v11 = (long long *)(v10 + 40);
    if (v12)
    {
      std::vector<std::shared_ptr<NL::Entity>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(a1[7] + 8) + 40), v11);
      uint64_t v13 = (uint64_t *)(*(void *)(a1[5] + 8) + 40);
      uint64_t v14 = (long long *)(*(void *)(a1[4] + 8) + 40);
      std::vector<std::shared_ptr<NL::Entity>>::push_back[abi:ne180100](v13, v14);
    }
  }
}

void sub_1A436AD90(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<NL::Entity>::operator=[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<NL::Entity>::shared_ptr[abi:ne180100]<NL::Entity,std::default_delete<NL::Entity>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void NL::QueryTokenizer::updateEntitiesWithUnknownValues(const __CFString **a1, uint64_t **a2)
{
  CFStringRef v3 = a1[13];
  if (v3 && a2[1] != *a2)
  {
    uint64_t v105 = (NL::QueryTokenizer *)a1;
    CFIndex Length = CFStringGetLength(v3);
    unint64_t v5 = a2[1];
    unint64_t v6 = 126 - 2 * __clz(((char *)v5 - (char *)*a2) >> 4);
    if (v5 == *a2) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    std::__introsort<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *,false>(*a2, v5, (uint64_t)&v119, v7, 1);
    uint64_t v119 = 0;
    uint64_t v120 = &v119;
    uint64_t v121 = 0x4002000000;
    uint64_t v122 = __Block_byref_object_copy__2;
    size_t v123 = __Block_byref_object_dispose__2;
    memset(v124, 0, sizeof(v124));
    v111 = 0;
    uint64_t v112 = &v111;
    uint64_t v113 = 0x4002000000;
    char v114 = __Block_byref_object_copy__26;
    uint64_t v115 = __Block_byref_object_dispose__27;
    BOOL v116 = 0;
    BOOL v117 = 0;
    uint64_t v118 = 0;
    unint64_t v8 = *a2;
    char v9 = a2[1];
    if (*a2 == v9)
    {
      CFIndex v10 = 0;
    }
    else
    {
      CFIndex v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = -1;
      do
      {
        uint64_t v13 = *v8;
        uint64_t v14 = v8[1];
        *(void *)&long long v106 = *v8;
        *((void *)&v106 + 1) = v14;
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = *(void *)(v13 + 96);
        if (v12 == -1
          || ((uint64_t v16 = *(void *)(v13 + 104) + v15, v17 = v12 + v11, v15 >= v12) ? (v18 = v16 < v17) : (v18 = 0),
              !v18 && (v15 > v12 ? (BOOL v19 = v16 <= v17) : (BOOL v19 = 0), !v19)))
        {
          if (v15 > v10)
          {
            v126.CFIndex location = v10;
            v126.CFIndex length = v15 - v10;
            CFIndex v21 = NL::QueryTokenizer::contentRangeFromRange(v105, v126);
            if (v21 != -1)
            {
              CFIndex v22 = v20;
              CFIndex v23 = (NL::ParserContext **)*((void *)v105 + 6);
              CFStringRef v24 = (const __CFString *)*((void *)v105 + 13);
              v110[9] = MEMORY[0x1E4F143A8];
              v110[10] = 0x40000000;
              v110[11] = ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke;
              v110[12] = &unk_1E5B36798;
              v110[13] = &v111;
              v110[14] = &v119;
              NL::EntityConverter::enumerateEntitiesWithString(v23, v24, 0, v21, v22);
            }
          }
          CFIndex v25 = v120;
          if (*(_DWORD *)(v106 + 112) == 7)
          {
            unint64_t v26 = v112;
            uint64_t v27 = (v120[6] - v120[5]) >> 4;
            uint64_t v28 = (uint64_t *)v112[6];
            uint64_t v29 = v112[7];
            if (v28 >= (uint64_t *)v29)
            {
              uint64_t v31 = v112[5];
              uint64_t v32 = ((char *)v28 - (char *)v31) >> 3;
              if ((unint64_t)(v32 + 1) >> 61) {
                std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v33 = (char *)v29 - (char *)v31;
              unint64_t v34 = ((char *)v29 - (char *)v31) >> 2;
              if (v34 <= v32 + 1) {
                unint64_t v34 = v32 + 1;
              }
              if (v33 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v34;
              }
              if (v35)
              {
                uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(v112 + 7), v35);
                uint64_t v31 = v26[5];
                uint64_t v28 = (uint64_t *)v26[6];
              }
              else
              {
                uint64_t v36 = 0;
              }
              uint64_t v37 = (uint64_t *)&v36[8 * v32];
              *uint64_t v37 = v27;
              uint64_t v30 = (void **)(v37 + 1);
              while (v28 != (uint64_t *)v31)
              {
                uint64_t v38 = *--v28;
                *--uint64_t v37 = v38;
              }
              v26[5] = (void **)v37;
              v26[6] = v30;
              v26[7] = (void **)&v36[8 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *uint64_t v28 = v27;
              uint64_t v30 = (void **)(v28 + 1);
            }
            v26[6] = v30;
            CFIndex v25 = v120;
          }
          std::vector<std::shared_ptr<NL::Entity>>::push_back[abi:ne180100](v25 + 5, &v106);
          uint64_t v12 = *(void *)(v106 + 96);
          uint64_t v11 = *(void *)(v106 + 104);
          CFIndex v10 = v11 + v12;
        }
        if (*((void *)&v106 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v106 + 1));
        }
        v8 += 2;
      }
      while (v8 != v9);
    }
    if (Length > v10)
    {
      v127.CFIndex location = v10;
      v127.CFIndex length = Length - v10;
      CFIndex v40 = NL::QueryTokenizer::contentRangeFromRange(v105, v127);
      if (v40 != -1)
      {
        CFIndex v41 = v39;
        uint64_t v42 = (NL::ParserContext **)*((void *)v105 + 6);
        CFStringRef v43 = (const __CFString *)*((void *)v105 + 13);
        v110[3] = MEMORY[0x1E4F143A8];
        v110[4] = 0x40000000;
        v110[5] = ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_2;
        v110[6] = &unk_1E5B367C0;
        v110[7] = &v111;
        v110[8] = &v119;
        NL::EntityConverter::enumerateEntitiesWithString(v42, v43, 0, v40, v41);
      }
    }
    *(void *)&long long v106 = 0;
    *((void *)&v106 + 1) = &v106;
    uint64_t v107 = 0x4002000000;
    uint64_t v108 = __Block_byref_object_copy__2;
    uint64_t v109 = __Block_byref_object_dispose__2;
    memset(v110, 0, 24);
    BOOL IsCJ = NL::ParserContext::languageIsCJ(*(NL::ParserContext **)v105);
    uint64_t v45 = v112[5];
    uint64_t v46 = v112[6];
    CFStringRef v96 = v46;
    if (IsCJ)
    {
      if (v45 != v46)
      {
        while (1)
        {
          uint64_t v47 = *v45;
          uint64_t v48 = (uint64_t *)(v120[5] + 16 * *v45);
          uint64_t v50 = *v48;
          uint64_t v49 = (std::__shared_weak_count *)v48[1];
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CFStringRef CFStringFromString = createCFStringFromString(v50);
          CFStringRef v52 = CFStringFromString;
          p_isa = &CFStringFromString->isa;
          if (v47) {
            break;
          }
LABEL_82:
          if (v52) {
            CFRelease(v52);
          }
          if (v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v49);
          }
          if (v47)
          {
            if (++v45 != v46) {
              continue;
            }
          }
          goto LABEL_126;
        }
        std::string v99 = v49;
        CFStringRef v101 = CFStringFromString;
        uint64_t v102 = v45;
        CFIndex v54 = *(void *)(v50 + 96);
        uint64_t v53 = *(void *)(v50 + 104);
        CFIndex v55 = v54 + v53;
        uint64_t v56 = v47 + 1;
        uint64_t v97 = v47;
        uint64_t v57 = 16 * v47;
        while (1)
        {
          if (--v56 < 1)
          {
LABEL_78:
            CFStringRef v52 = v101;
            uint64_t v45 = v102;
            uint64_t v46 = v96;
            uint64_t v47 = v97;
            uint64_t v49 = v99;
            if (v55)
            {
              v129.CFIndex location = 0;
              v129.CFIndex length = v55;
              CFIndex v68 = NL::QueryTokenizer::contentRangeFromRange(v105, v129);
              if (v68 || v67 != Length) {
                NL::EntityConverter::enumerateEntitiesWithString(*((NL::ParserContext ***)v105 + 6), *((const __CFString **)v105 + 13), v101, v68, v67);
              }
            }
            goto LABEL_82;
          }
          uint64_t v58 = v120[5] + v57;
          uint64_t v60 = *(void *)(v58 - 16);
          std::string v59 = *(std::__shared_weak_count **)(v58 - 8);
          if (v59) {
            atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CFIndex v61 = *(void *)(v60 + 96);
          uint64_t v62 = *(void *)(v60 + 104);
          if (v61 == -1 || v62 + v61 > *(void *)(v50 + 96)) {
            goto LABEL_65;
          }
          if (NL::SearchGrammar::isTypeValidForTopic(*((void *)v105 + 2), (unsigned __int8 *)v60)) {
            break;
          }
          v128.CFIndex location = v54;
          v128.CFIndex length = v55 - v54;
          CFIndex v65 = NL::QueryTokenizer::contentRangeFromRange(v105, v128);
          if ((v65 != *(void *)(v50 + 96) || v66 != *(void *)(v50 + 104)) && (v65 || v66 != Length)) {
            NL::EntityConverter::enumerateEntitiesWithString(*((NL::ParserContext ***)v105 + 6), *((const __CFString **)v105 + 13), v101, v65, v66);
          }
          CFIndex v55 = 0;
          char v64 = 0;
          if (!v59) {
            goto LABEL_69;
          }
LABEL_68:
          std::__shared_weak_count::__release_shared[abi:ne180100](v59);
LABEL_69:
          v57 -= 16;
          if ((v64 & 1) == 0) {
            goto LABEL_78;
          }
        }
        CFIndex v61 = *(void *)(v60 + 96);
        uint64_t v62 = *(void *)(v60 + 104);
LABEL_65:
        if (v61 != v54 || v62 != v53)
        {
          uint64_t v53 = v62;
          CFIndex v54 = v61;
        }
        char v64 = 1;
        if (!v59) {
          goto LABEL_69;
        }
        goto LABEL_68;
      }
    }
    else if (v45 != v46)
    {
      do
      {
        uint64_t v69 = *v45;
        uint64_t v70 = (uint64_t *)(v120[5] + 16 * *v45);
        uint64_t v72 = *v70;
        uint64_t v71 = (std::__shared_weak_count *)v70[1];
        if (v71) {
          atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFStringRef v73 = createCFStringFromString(v72);
        p_isa = &v73->isa;
        unint64_t v74 = v69 + 1;
        uint64_t v75 = v120[5];
        uint64_t v76 = v120[6] - v75;
        if (v69 + 1 < (unint64_t)(v76 >> 4))
        {
          uint64_t v95 = v120[6] - v75;
          unint64_t v98 = v69 + 1;
          uint64_t v100 = v71;
          uint64_t v103 = v45;
          CFIndex v77 = *(void *)(v72 + 96);
          uint64_t v78 = *(void *)(v72 + 104);
          uint64_t v79 = 16 * v69;
          CFIndex v80 = v77;
          unint64_t v81 = v69 + 1;
          do
          {
            uint64_t v82 = v75 + v79;
            uint64_t v84 = *(void *)(v82 + 16);
            CFRange v83 = *(std::__shared_weak_count **)(v82 + 24);
            if (v83) {
              atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v85 = *(void *)(v72 + 96);
            BOOL v86 = v85 != -1 && *(void *)(v72 + 104) + v85 <= *(void *)(v84 + 96);
            if (v86 && !NL::SearchGrammar::isTypeValidForTopic(*((void *)v105 + 2), (unsigned __int8 *)v84))
            {
              v130.CFIndex location = v77;
              v130.CFIndex length = v80 + v78 - v77;
              CFIndex v87 = NL::QueryTokenizer::contentRangeFromRange(v105, v130);
              if ((v87 != *(void *)(v72 + 96) || v88 != *(void *)(v72 + 104)) && (v87 || v88 != Length)) {
                NL::EntityConverter::enumerateEntitiesWithString(*((NL::ParserContext ***)v105 + 6), *((const __CFString **)v105 + 13), v73, v87, v88);
              }
              CFIndex v77 = -1;
            }
            if (*(void *)(v84 + 96) != v80 || *(void *)(v84 + 104) != v78)
            {
              uint64_t v78 = *(void *)(v84 + 104);
              CFIndex v80 = *(void *)(v84 + 96);
            }
            if (v83) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v83);
            }
            ++v81;
            uint64_t v75 = v120[5];
            v79 += 16;
          }
          while (v81 < (v120[6] - v75) >> 4);
          uint64_t v45 = v103;
          uint64_t v46 = v96;
          unint64_t v74 = v98;
          uint64_t v71 = v100;
          uint64_t v76 = v95;
          if (v77 != -1)
          {
            CFIndex v89 = CFStringGetLength(*((CFStringRef *)v105 + 13));
            v131.CFIndex location = v77;
            v131.CFIndex length = v89 - v77;
            CFIndex v91 = NL::QueryTokenizer::contentRangeFromRange(v105, v131);
            if (v91 || v90 != Length) {
              NL::EntityConverter::enumerateEntitiesWithString(*((NL::ParserContext ***)v105 + 6), *((const __CFString **)v105 + 13), v73, v91, v90);
            }
          }
        }
        if (v73) {
          CFRelease(v73);
        }
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        ++v45;
      }
      while (v74 < v76 >> 4 && v45 != v46);
    }
LABEL_126:
    unint64_t v93 = a2;
    std::vector<std::shared_ptr<NL::ParseAttributes>>::__clear[abi:ne180100]((uint64_t *)a2);
    std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>((uint64_t *)v93, v93[1], (uint64_t *)v120[5], (void *)v120[6], (v120[6] - v120[5]) >> 4);
    std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>((uint64_t *)v93, v93[1], *(uint64_t **)(*((void *)&v106 + 1) + 40), *(void **)(*((void *)&v106 + 1) + 48), (uint64_t)(*(void *)(*((void *)&v106 + 1) + 48) - *(void *)(*((void *)&v106 + 1) + 40)) >> 4);
    _Block_object_dispose(&v106, 8);
    p_isa = (void **)v110;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&p_isa);
    _Block_object_dispose(&v111, 8);
    if (v116)
    {
      BOOL v117 = v116;
      operator delete(v116);
    }
    _Block_object_dispose(&v119, 8);
    v111 = (void **)v124;
    std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v111);
  }
}

void sub_1A436B7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _Block_object_dispose((const void *)(v10 - 240), 8);
  uint64_t v12 = *(void **)(v10 - 200);
  if (v12)
  {
    *(void *)(v10 - 192) = v12;
    operator delete(v12);
  }
  _Block_object_dispose((const void *)(v10 - 176), 8);
  *(void *)(v10 - 24std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = a10;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 240));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__26(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  if (*(_DWORD *)(*a2 + 112) == 7)
  {
    long long v4 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = (uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48)
                 - *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) >> 4;
    unint64_t v6 = (uint64_t *)v4[6];
    unint64_t v7 = v4[7];
    if ((unint64_t)v6 >= v7)
    {
      char v9 = (uint64_t *)v4[5];
      uint64_t v10 = v6 - v9;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v7 - (void)v9;
      unint64_t v12 = (uint64_t)(v7 - (void)v9) >> 2;
      if (v12 <= v10 + 1) {
        unint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(v4 + 7), v13);
        char v9 = (uint64_t *)v4[5];
        unint64_t v6 = (uint64_t *)v4[6];
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v15 = (uint64_t *)&v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      *uint64_t v15 = v5;
      unint64_t v8 = v15 + 1;
      while (v6 != v9)
      {
        uint64_t v17 = *--v6;
        *--uint64_t v15 = v17;
      }
      v4[5] = v15;
      v4[6] = v8;
      v4[7] = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *unint64_t v6 = v5;
      unint64_t v8 = v6 + 1;
    }
    v4[6] = v8;
  }
  BOOL v18 = (uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  return std::vector<std::shared_ptr<NL::Entity>>::emplace_back<std::unique_ptr<NL::Entity>>(v18, a2);
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  if (*(_DWORD *)(*a2 + 112) == 7)
  {
    long long v4 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = (uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48)
                 - *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) >> 4;
    unint64_t v6 = (uint64_t *)v4[6];
    unint64_t v7 = v4[7];
    if ((unint64_t)v6 >= v7)
    {
      char v9 = (uint64_t *)v4[5];
      uint64_t v10 = v6 - v9;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v7 - (void)v9;
      unint64_t v12 = (uint64_t)(v7 - (void)v9) >> 2;
      if (v12 <= v10 + 1) {
        unint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(v4 + 7), v13);
        char v9 = (uint64_t *)v4[5];
        unint64_t v6 = (uint64_t *)v4[6];
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v15 = (uint64_t *)&v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      *uint64_t v15 = v5;
      unint64_t v8 = v15 + 1;
      while (v6 != v9)
      {
        uint64_t v17 = *--v6;
        *--uint64_t v15 = v17;
      }
      v4[5] = v15;
      v4[6] = v8;
      v4[7] = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *unint64_t v6 = v5;
      unint64_t v8 = v6 + 1;
    }
    v4[6] = v8;
  }
  BOOL v18 = (uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  return std::vector<std::shared_ptr<NL::Entity>>::emplace_back<std::unique_ptr<NL::Entity>>(v18, a2);
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  return std::vector<std::shared_ptr<NL::Entity>>::emplace_back<std::unique_ptr<NL::Entity>>((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  return std::vector<std::shared_ptr<NL::Entity>>::emplace_back<std::unique_ptr<NL::Entity>>((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_5(uint64_t a1, uint64_t *a2)
{
  return std::vector<std::shared_ptr<NL::Entity>>::emplace_back<std::unique_ptr<NL::Entity>>((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
}

uint64_t ___ZN2NL14QueryTokenizer31updateEntitiesWithUnknownValuesERNSt3__16vectorINS1_10shared_ptrINS_6EntityEEENS1_9allocatorIS5_EEEE_block_invoke_6(uint64_t a1, uint64_t *a2)
{
  return std::vector<std::shared_ptr<NL::Entity>>::emplace_back<std::unique_ptr<NL::Entity>>((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
}

uint64_t NL::QueryTokenizer::copySearchStringAndTokenize(CFStringRef *this)
{
  CFLocaleRef info = (const __CFLocale *)(*this)->info;
  if (info) {
    NL::QueryTokenizer::setLocale((NL::QueryTokenizer *)this, info);
  }
  if (!this[12]) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  CFMutableStringRef Mutable = 0;
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (v6[3])
  {
    CFStringGetLength(this[13]);
    NLTaggerSetString();
    NLTaggerSetLocaleForRange();
    NLTaggerEnumerateTokens();
    uint64_t v3 = v6[3];
  }
  else
  {
    uint64_t v3 = 0;
  }
  _Block_object_dispose(&v5, 8);
  return v3;
}

void sub_1A436BD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN2NL14QueryTokenizer27copySearchStringAndTokenizeEv_block_invoke(uint64_t a1, CFRange *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(*(void *)v4 + 64))
  {
    uint64_t v14 = *(void *)(v4 + 120);
    if (v14 != *(void *)(v4 + 112))
    {
      CFIndex location = a2[1].location;
      if ((location & 0x800) == 0)
      {
        uint64_t v16 = *(void *)(v14 - 8);
        if ((v16 & 0x800) == 0 && ((v16 | location) & 0x80) != 0) {
          CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), @" ");
        }
      }
    }
  }
  if (CFStringFindCharacterFromSet(*(CFStringRef *)(v4 + 104), *(CFCharacterSetRef *)(v4 + 64), *a2, 0, 0))
  {
    v101[0] = 0;
    v101[1] = v101;
    v101[2] = 0x2000000000;
    int v102 = 0;
    uint64_t v97 = 0;
    unint64_t v98 = &v97;
    uint64_t v99 = 0x2000000000;
    char v100 = 0;
    CFStringRef v90 = 0;
    CFIndex v91 = &v90;
    uint64_t v92 = 0x3802000000;
    unint64_t v93 = __Block_byref_object_copy__19;
    CFIndex v5 = a2->location;
    CFTypeRef v94 = __Block_byref_object_dispose__20;
    CFIndex v95 = v5;
    uint64_t v96 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = &v83;
    uint64_t v85 = 0x3802000000;
    BOOL v86 = __Block_byref_object_copy__19;
    CFIndex v87 = __Block_byref_object_dispose__20;
    CFIndex v88 = v5;
    uint64_t v89 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = &v77;
    uint64_t v79 = 0x3802000000;
    CFIndex v80 = __Block_byref_object_copy__19;
    unint64_t v81 = __Block_byref_object_dispose__20;
    long long v82 = xmmword_1A43F6B80;
    uint64_t v73 = 0;
    unint64_t v74 = &v73;
    uint64_t v75 = 0x2000000000;
    CFIndex v76 = v5;
    CFIndex v6 = *(void *)(v4 + 104);
    uint64_t length = a2->length;
    v72[0] = MEMORY[0x1E4F143A8];
    v72[1] = 0x40000000;
    v72[2] = ___ZN2NL14QueryTokenizer27copySearchStringAndTokenizeEv_block_invoke_2;
    v72[3] = &unk_1E5B36888;
    v72[4] = &v77;
    v72[5] = &v97;
    uint64_t v8 = *(void *)(a1 + 32);
    v72[6] = &v90;
    v72[7] = v8;
    v72[8] = &v73;
    v72[9] = &v83;
    v72[10] = v101;
    v72[11] = v4;
    enumerateCharactersInCFString(v6, v5, length, (uint64_t)v72);
    if (v91[5] != (const __CFString *)-1)
    {
      CFStringRef v9 = v91[6];
      if (v9)
      {
        uint64_t v10 = v74[3];
        unint64_t v11 = *(void *)(v4 + 152);
        unint64_t v12 = *(char **)(v4 + 144);
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v27 = *(char **)(v4 + 136);
          uint64_t v28 = (v12 - v27) >> 4;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60) {
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v11 - (void)v27;
          if (v30 >> 3 > v29) {
            unint64_t v29 = v30 >> 3;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v4 + 152, v31);
            uint64_t v27 = *(char **)(v4 + 136);
            unint64_t v12 = *(char **)(v4 + 144);
          }
          else
          {
            uint64_t v32 = 0;
          }
          uint64_t v53 = &v32[16 * v28];
          CFIndex v54 = &v32[16 * v31];
          *(void *)uint64_t v53 = v10;
          *((void *)v53 + 1) = v9;
          unint64_t v13 = v53 + 16;
          if (v12 != v27)
          {
            do
            {
              *((_OWORD *)v53 - 1) = *((_OWORD *)v12 - 1);
              v53 -= 16;
              v12 -= 16;
            }
            while (v12 != v27);
            uint64_t v27 = *(char **)(v4 + 136);
          }
          *(void *)(v4 + 136) = v53;
          *(void *)(v4 + 144) = v13;
          *(void *)(v4 + 152) = v54;
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)unint64_t v12 = v10;
          *((void *)v12 + 1) = v9;
          unint64_t v13 = v12 + 16;
        }
        *(void *)(v4 + 144) = v13;
        CFStringRef v55 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(void *)(v4 + 104), v84[5], v84[6]);
        CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v55);
        if (*((unsigned char *)v98 + 24))
        {
          CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), @" ");
          uint64_t v56 = v91;
          if (*((unsigned char *)v98 + 24)) {
            v91[6] = (const __CFString *)(v78[6] + v78[5] - (void)v91[5]);
          }
        }
        else
        {
          uint64_t v56 = v91;
        }
        unint64_t v57 = *(void *)(v4 + 128);
        long long v71 = *(_OWORD *)(v56 + 5);
        unint64_t v58 = *(void *)(v4 + 120);
        if (v58 >= v57)
        {
          uint64_t v60 = *(void *)(v4 + 112);
          unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - v60) >> 3);
          unint64_t v62 = v61 + 1;
          if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - v60) >> 3);
          if (2 * v63 > v62) {
            unint64_t v62 = 2 * v63;
          }
          if (v63 >= 0x555555555555555) {
            unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64) {
            CFIndex v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4 + 128, v64);
          }
          else {
            CFIndex v65 = 0;
          }
          CFIndex v66 = &v65[24 * v61];
          CFIndex v67 = &v65[24 * v64];
          *(_OWORD *)CFIndex v66 = v71;
          *((void *)v66 + 2) = 0;
          std::string v59 = v66 + 24;
          uint64_t v69 = *(char **)(v4 + 112);
          CFIndex v68 = *(char **)(v4 + 120);
          if (v68 != v69)
          {
            do
            {
              long long v70 = *(_OWORD *)(v68 - 24);
              *((void *)v66 - 1) = *((void *)v68 - 1);
              *(_OWORD *)(v66 - 24) = v70;
              v66 -= 24;
              v68 -= 24;
            }
            while (v68 != v69);
            CFIndex v68 = *(char **)(v4 + 112);
          }
          *(void *)(v4 + 112) = v66;
          *(void *)(v4 + 12std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v59;
          *(void *)(v4 + 12std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v67;
          if (v68) {
            operator delete(v68);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v58 = *(_OWORD *)(v56 + 5);
          *(void *)(v58 + 16) = 0;
          std::string v59 = (char *)(v58 + 24);
        }
        *(void *)(v4 + 12std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v59;
        ++*(void *)(v4 + 256);
        if (v55) {
          CFRelease(v55);
        }
      }
    }
    _Block_object_dispose(&v73, 8);
    _Block_object_dispose(&v77, 8);
    _Block_object_dispose(&v83, 8);
    _Block_object_dispose(&v90, 8);
    _Block_object_dispose(&v97, 8);
    _Block_object_dispose(v101, 8);
  }
  else
  {
    unint64_t v17 = *(void *)(v4 + 128);
    unint64_t v18 = *(void *)(v4 + 120);
    if (v18 >= v17)
    {
      uint64_t v21 = *(void *)(v4 + 112);
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v21) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v21) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25) {
        unint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4 + 128, v25);
      }
      else {
        unint64_t v26 = 0;
      }
      unint64_t v33 = &v26[24 * v22];
      unint64_t v34 = &v26[24 * v25];
      CFRange v35 = *a2;
      *((void *)v33 + 2) = a2[1].location;
      *(CFRange *)unint64_t v33 = v35;
      CFIndex v20 = v33 + 24;
      uint64_t v37 = *(char **)(v4 + 112);
      uint64_t v36 = *(char **)(v4 + 120);
      if (v36 != v37)
      {
        do
        {
          long long v38 = *(_OWORD *)(v36 - 24);
          *((void *)v33 - 1) = *((void *)v36 - 1);
          *(_OWORD *)(v33 - 24) = v38;
          v33 -= 24;
          v36 -= 24;
        }
        while (v36 != v37);
        uint64_t v36 = *(char **)(v4 + 112);
      }
      *(void *)(v4 + 112) = v33;
      *(void *)(v4 + 12std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v20;
      *(void *)(v4 + 12std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v34;
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      CFRange v19 = *a2;
      *(void *)(v18 + 16) = a2[1].location;
      *(CFRange *)unint64_t v18 = v19;
      CFIndex v20 = (char *)(v18 + 24);
    }
    *(void *)(v4 + 12std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v20;
    if ((a2[1].location & 0x800) == 0) {
      ++*(void *)(v4 + 256);
    }
    CFIndex v39 = CFStringGetLength(*(CFStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    CFStringRef v40 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(void *)(v4 + 104), a2->location, a2->length);
    CFStringRef v90 = v40;
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v40);
    CFIndex v41 = CFStringGetLength(*(CFStringRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) - v39;
    unint64_t v42 = *(void *)(v4 + 152);
    CFStringRef v43 = *(char **)(v4 + 144);
    if ((unint64_t)v43 >= v42)
    {
      uint64_t v45 = *(char **)(v4 + 136);
      uint64_t v46 = (v43 - v45) >> 4;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 60) {
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v48 = v42 - (void)v45;
      if (v48 >> 3 > v47) {
        unint64_t v47 = v48 >> 3;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49)
      {
        uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v4 + 152, v49);
        uint64_t v45 = *(char **)(v4 + 136);
        CFStringRef v43 = *(char **)(v4 + 144);
      }
      else
      {
        uint64_t v50 = 0;
      }
      uint64_t v51 = (CFIndex *)&v50[16 * v46];
      CFStringRef v52 = &v50[16 * v49];
      *uint64_t v51 = v39;
      v51[1] = v41;
      CFStringRef v44 = v51 + 2;
      if (v43 != v45)
      {
        do
        {
          *((_OWORD *)v51 - 1) = *((_OWORD *)v43 - 1);
          v51 -= 2;
          v43 -= 16;
        }
        while (v43 != v45);
        uint64_t v45 = *(char **)(v4 + 136);
      }
      *(void *)(v4 + 136) = v51;
      *(void *)(v4 + 144) = v44;
      *(void *)(v4 + 152) = v52;
      if (v45) {
        operator delete(v45);
      }
    }
    else
    {
      *(void *)CFStringRef v43 = v39;
      *((void *)v43 + 1) = v41;
      CFStringRef v44 = v43 + 16;
    }
    *(void *)(v4 + 144) = v44;
    if (v40) {
      CFRelease(v40);
    }
  }
}

void sub_1A436C468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a11, 0);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 184), 8);
  _Block_object_dispose((const void *)(v35 - 128), 8);
  _Block_object_dispose((const void *)(v35 - 96), 8);
  _Unwind_Resume(a1);
}

void ___ZN2NL14QueryTokenizer27copySearchStringAndTokenizeEv_block_invoke_2(void *a1, CFRange rangeToSearch)
{
  CFIndex length = rangeToSearch.length;
  CFIndex location = rangeToSearch.location;
  uint64_t v5 = a1[11];
  v46.CFIndex location = rangeToSearch.location;
  v46.CFIndex length = length;
  int CharacterFromSet = CFStringFindCharacterFromSet(*(CFStringRef *)(v5 + 104), *(CFCharacterSetRef *)(v5 + 64), v46, 0, (CFRange *)(*(void *)(a1[4] + 8) + 40));
  v47.CFIndex location = location;
  v47.CFIndex length = length;
  int v7 = CFStringFindCharacterFromSet(*(CFStringRef *)(v5 + 104), *(CFCharacterSetRef *)(v5 + 72), v47, 0, 0);
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
  {
    if (v7)
    {
      uint64_t v8 = *(__CFString **)(*(void *)(a1[7] + 8) + 24);
      if (*(void *)(*(void *)(a1[6] + 8) + 48))
      {
        *(void *)(*(void *)(a1[8] + 8) + 24) = CFStringGetLength(v8);
        CFStringRef v9 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(void *)(v5 + 104), *(void *)(*(void *)(a1[6] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 48));
        CFStringAppend(*(CFMutableStringRef *)(*(void *)(a1[7] + 8) + 24), v9);
        CFStringAppend(*(CFMutableStringRef *)(*(void *)(a1[7] + 8) + 24), @" ");
        if (v9) {
          CFRelease(v9);
        }
      }
      else
      {
        CFStringAppend(v8, @" ");
      }
      uint64_t v16 = *(void *)(a1[9] + 8);
      *(void *)(v16 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = location;
      *(void *)(v16 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = length;
      CFIndex v10 = location + length;
      uint64_t v11 = a1[6];
      goto LABEL_12;
    }
    *(void *)(*(void *)(a1[6] + 8) + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(*(void *)(a1[4] + 8) + 48)
                                                 + *(void *)(*(void *)(a1[4] + 8) + 40)
                                                 - *(void *)(*(void *)(a1[6] + 8) + 40);
    unint64_t v12 = *(void *)(v5 + 128);
    uint64_t v13 = *(void *)(a1[6] + 8);
    long long v45 = *(_OWORD *)(v13 + 40);
    unint64_t v14 = *(void *)(v5 + 120);
    if (v14 >= v12)
    {
      uint64_t v17 = *(void *)(v5 + 112);
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v17) >> 3);
      unint64_t v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v17) >> 3);
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x555555555555555) {
        unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21) {
        unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v5 + 128, v21);
      }
      else {
        unint64_t v22 = 0;
      }
      unint64_t v23 = &v22[24 * v18];
      unint64_t v24 = &v22[24 * v21];
      *(_OWORD *)unint64_t v23 = v45;
      *((void *)v23 + 2) = 0;
      uint64_t v15 = v23 + 24;
      unint64_t v26 = *(char **)(v5 + 112);
      unint64_t v25 = *(char **)(v5 + 120);
      if (v25 != v26)
      {
        do
        {
          long long v27 = *(_OWORD *)(v25 - 24);
          *((void *)v23 - 1) = *((void *)v25 - 1);
          *(_OWORD *)(v23 - 24) = v27;
          v23 -= 24;
          v25 -= 24;
        }
        while (v25 != v26);
        unint64_t v25 = *(char **)(v5 + 112);
      }
      *(void *)(v5 + 112) = v23;
      *(void *)(v5 + 12std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v15;
      *(void *)(v5 + 12std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v24;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v14 = *(_OWORD *)(v13 + 40);
      *(void *)(v14 + 16) = 0;
      uint64_t v15 = (char *)(v14 + 24);
    }
    *(void *)(v5 + 12std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = v15;
    ++*(void *)(v5 + 256);
    CFIndex v28 = CFStringGetLength(*(CFStringRef *)(*(void *)(a1[7] + 8) + 24));
    CFIndex v29 = v28;
    CFIndex v30 = *(void *)(*(void *)(a1[9] + 8) + 48);
    unint64_t v31 = *(void *)(v5 + 152);
    uint64_t v32 = *(char **)(v5 + 144);
    if ((unint64_t)v32 >= v31)
    {
      unint64_t v34 = *(char **)(v5 + 136);
      uint64_t v35 = (v32 - v34) >> 4;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60) {
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v37 = v31 - (void)v34;
      if (v37 >> 3 > v36) {
        unint64_t v36 = v37 >> 3;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        CFIndex v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v5 + 152, v38);
        unint64_t v34 = *(char **)(v5 + 136);
        uint64_t v32 = *(char **)(v5 + 144);
      }
      else
      {
        CFIndex v39 = 0;
      }
      CFStringRef v40 = (CFIndex *)&v39[16 * v35];
      CFIndex v41 = &v39[16 * v38];
      *CFStringRef v40 = v29;
      v40[1] = v30;
      unint64_t v33 = v40 + 2;
      if (v32 != v34)
      {
        do
        {
          *((_OWORD *)v40 - 1) = *((_OWORD *)v32 - 1);
          v40 -= 2;
          v32 -= 16;
        }
        while (v32 != v34);
        unint64_t v34 = *(char **)(v5 + 136);
      }
      *(void *)(v5 + 136) = v40;
      *(void *)(v5 + 144) = v33;
      *(void *)(v5 + 152) = v41;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *(void *)uint64_t v32 = v28;
      *((void *)v32 + 1) = v30;
      unint64_t v33 = v32 + 16;
    }
    *(void *)(v5 + 144) = v33;
    CFStringRef v42 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(void *)(v5 + 104), *(void *)(*(void *)(a1[9] + 8) + 40), *(void *)(*(void *)(a1[9] + 8) + 48));
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(a1[7] + 8) + 24), v42);
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(a1[7] + 8) + 24), @" ");
    uint64_t v43 = *(void *)(a1[9] + 8);
    *(void *)(v43 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = location;
    *(void *)(v43 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = length;
    uint64_t v44 = *(void *)(a1[6] + 8);
    *(void *)(v44 + 4std::unique_ptr<NL::StringMap>::reset[abi:ne180100](this, 0) = location;
    *(void *)(v44 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = length;
    if (v42) {
      CFRelease(v42);
    }
  }
  else if (!CharacterFromSet)
  {
    CFIndex v10 = location + length;
    *(void *)(*(void *)(a1[6] + 8) + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = location + length - *(void *)(*(void *)(a1[6] + 8) + 40);
    uint64_t v11 = a1[9];
LABEL_12:
    *(void *)(*(void *)(v11 + 8) + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v10 - *(void *)(*(void *)(v11 + 8) + 40);
  }
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = CharacterFromSet != 0;
  ++*(_DWORD *)(*(void *)(a1[10] + 8) + 24);
}

void sub_1A436C940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void std::sort[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity> *>,entity_greater_than_range>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = 126 - 2 * __clz(((char *)a2 - (char *)a1) >> 4);
  if (a2 == a1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  std::__introsort<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *,false>(a1, a2, (uint64_t)&v4, v3, 1);
}

void std::sort[abi:ne180100]<std::__wrap_iter<std::vector<CFRange> *>,ranges_greater_than_range>(uint64_t a1, void *a2)
{
  unint64_t v2 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (void *)a1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  std::__introsort<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *,false>(a1, a2, (uint64_t)&v4, v3, 1);
}

uint64_t std::vector<std::vector<CFRange>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v16[2] = v14 + 24;
    std::vector<std::vector<CFRange>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *int v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)int v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1A436CB1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN2NL14QueryTokenizer8tokenizeEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  if (NL::SearchGrammar::tokenOrderReversed(*(NL::SearchGrammar **)(v4 + 16))) {
    uint64_t v5 = ~a1[5] + ((uint64_t)(a1[7] - a1[6]) >> 4);
  }
  unint64_t v6 = (uint64_t *)(*(void *)(v4 + 160) + 16 * a2);
  uint64_t v8 = *v6;
  int v7 = (std::__shared_weak_count *)v6[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(v4 + 184) + 24 * a1[9];
  unint64_t v11 = (void **)(v9 + 8);
  unint64_t v10 = *(void **)(v9 + 8);
  unint64_t v12 = *(void *)(v9 + 16);
  if ((unint64_t)v10 >= v12)
  {
    unint64_t v14 = *(void **)v9;
    uint64_t v15 = ((uint64_t)v10 - *(void *)v9) >> 4;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v12 - (void)v14;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v9 + 16, v18);
      unint64_t v10 = *v11;
      unint64_t v14 = *(void **)v9;
    }
    else
    {
      unint64_t v19 = 0;
    }
    unint64_t v20 = &v19[16 * v15];
    unint64_t v21 = &v19[16 * v18];
    *(void *)unint64_t v20 = a2;
    *((void *)v20 + 1) = v5;
    uint64_t v13 = v20 + 16;
    if (v10 != v14)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v10 - 1);
        v20 -= 16;
        v10 -= 2;
      }
      while (v10 != v14);
      unint64_t v14 = *(void **)v9;
    }
    *(void *)uint64_t v9 = v20;
    *unint64_t v11 = v13;
    *(void *)(v9 + 16) = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *unint64_t v10 = a2;
    v10[1] = v5;
    uint64_t v13 = v10 + 2;
  }
  *unint64_t v11 = v13;
  if ((*(_DWORD *)(v8 + 112) - 3) <= 1)
  {
    unint64_t v22 = *(void *)(v4 + 224);
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 192) - *(void *)(v4 + 184)) >> 3) - 1;
    unint64_t v24 = *(unint64_t **)(v4 + 216);
    if ((unint64_t)v24 >= v22)
    {
      unint64_t v26 = *(unint64_t **)(v4 + 208);
      uint64_t v27 = ((char *)v24 - (char *)v26) >> 4;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 60) {
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v22 - (void)v26;
      if (v29 >> 3 > v28) {
        unint64_t v28 = v29 >> 3;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>(v4 + 224, v30);
        unint64_t v26 = *(unint64_t **)(v4 + 208);
        unint64_t v24 = *(unint64_t **)(v4 + 216);
      }
      else
      {
        unint64_t v31 = 0;
      }
      uint64_t v32 = (unint64_t *)&v31[16 * v27];
      unint64_t v33 = &v31[16 * v30];
      *uint64_t v32 = v23;
      v32[1] = v5;
      unint64_t v25 = v32 + 2;
      if (v24 != v26)
      {
        do
        {
          *((_OWORD *)v32 - 1) = *((_OWORD *)v24 - 1);
          v32 -= 2;
          v24 -= 2;
        }
        while (v24 != v26);
        unint64_t v26 = *(unint64_t **)(v4 + 208);
      }
      *(void *)(v4 + 20std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v32;
      *(void *)(v4 + 216) = v25;
      *(void *)(v4 + 224) = v33;
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *unint64_t v24 = v23;
      v24[1] = v5;
      unint64_t v25 = v24 + 2;
    }
    *(void *)(v4 + 216) = v25;
  }
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1A436CDCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c48_ZTSNSt3__16vectorI7CFRangeNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v2 = (void *)(a1 + 48);
  v2[2] = 0;
  return std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(v2, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4);
}

void __destroy_helper_block_e8_48c48_ZTSNSt3__16vectorI7CFRangeNS_9allocatorIS1_EEEE(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void NL::QueryTokenizer::description(NL::QueryTokenizer *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v2 = a2;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *((void *)this + 23);
  for (uint64_t i = *((void *)this + 24); v3 != i; v3 += 24)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v31, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 4);
    memset(&v30, 0, sizeof(v30));
    uint64_t v5 = v31;
    unint64_t v6 = v32;
    if (v31 != v32)
    {
      uint64_t v7 = 0;
      uint64_t v8 = -1;
      do
      {
        uint64_t v9 = (uint64_t *)(*((void *)this + 20) + 16 * *v5);
        uint64_t v10 = *v9;
        unint64_t v11 = (std::__shared_weak_count *)v9[1];
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v13 = *(void *)(v10 + 96);
        uint64_t v12 = *(void *)(v10 + 104);
        BOOL v14 = v13 == v8 && v12 == v7;
        uint64_t v15 = "|";
        if (!v14)
        {
          std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v30.__r_.__value_.__l.__size_;
          }
          if (size) {
            std::string::append(&v30, "} ");
          }
          std::string::append(&v30, "[");
          int v17 = *(char *)(v10 + 47);
          if (v17 >= 0) {
            unint64_t v18 = (const std::string::value_type *)(v10 + 24);
          }
          else {
            unint64_t v18 = *(const std::string::value_type **)(v10 + 24);
          }
          if (v17 >= 0) {
            std::string::size_type v19 = *(unsigned __int8 *)(v10 + 47);
          }
          else {
            std::string::size_type v19 = *(void *)(v10 + 32);
          }
          std::string::append(&v30, v18, v19);
          std::string::append(&v30, "]");
          uint64_t v15 = "{";
        }
        std::string::append(&v30, v15);
        int v20 = *(char *)(v10 + 23);
        if (v20 >= 0) {
          unint64_t v21 = (const std::string::value_type *)v10;
        }
        else {
          unint64_t v21 = *(const std::string::value_type **)v10;
        }
        if (v20 >= 0) {
          std::string::size_type v22 = *(unsigned __int8 *)(v10 + 23);
        }
        else {
          std::string::size_type v22 = *(void *)(v10 + 8);
        }
        std::string::append(&v30, v21, v22);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        v5 += 2;
        uint64_t v8 = v13;
        uint64_t v7 = v12;
      }
      while (v5 != v6);
      std::string::size_type v23 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v23 = v30.__r_.__value_.__l.__size_;
      }
      unint64_t v2 = a2;
      if (v23) {
        std::string::append(&v30, "} ");
      }
    }
    trim((unint64_t)&v30, __p);
    if ((v29 & 0x80u) == 0) {
      unint64_t v24 = __p;
    }
    else {
      unint64_t v24 = (void **)__p[0];
    }
    if ((v29 & 0x80u) == 0) {
      std::string::size_type v25 = v29;
    }
    else {
      std::string::size_type v25 = (std::string::size_type)__p[1];
    }
    std::string::append(v2, (const std::string::value_type *)v24, v25);
    if ((char)v29 < 0) {
      operator delete(__p[0]);
    }
    std::string::append(v2, "\n");
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (v31)
    {
      uint64_t v32 = v31;
      operator delete(v31);
    }
  }
}

void sub_1A436D068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a24) {
    operator delete(a24);
  }
  if (*(char *)(v25 + 23) < 0) {
    operator delete(*(void **)v25);
  }
  _Unwind_Resume(exception_object);
}

NL::Entity *std::unique_ptr<NL::Entity>::reset[abi:ne180100](NL::Entity **a1, NL::Entity *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::Entity::~Entity(result);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

void *std::vector<std::shared_ptr<NL::Entity>>::__init_with_size[abi:ne180100]<std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1A436D198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v10;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void *std::vector<std::vector<CFRange>>::__construct_one_at_end[abi:ne180100]<std::vector<CFRange> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v3 + 3;
  return result;
}

void sub_1A436D354(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<CFRange>>::__push_back_slow_path<std::vector<CFRange> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  v15 += 24;
  std::vector<std::vector<CFRange>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1A436D460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<CFRange>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::vector<CFRange>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void *std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A436D6CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<CFRange>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<CFRange>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::default_delete<NL::EntityConverter>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::unique_ptr<NL::Transcriber>::reset[abi:ne180100]((NL::Transcriber **)(a2 + 32), 0);
    std::unique_ptr<NL::NumericConverter>::reset[abi:ne180100]((NL::NumericConverter **)(a2 + 24), 0);
    uint64_t v3 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    if (v3) {
      std::default_delete<NL::DateConverter>::operator()[abi:ne180100](a2 + 16, v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    JUMPOUT(0x1A625B130);
  }
}

void *std::vector<std::shared_ptr<NL::Entity>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<NL::Entity>*>,std::__wrap_iter<std::shared_ptr<NL::Entity>*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        unint64_t v21 = &a3[2 * a5];
      }
      else
      {
        unint64_t v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<NL::Entity>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      std::string::size_type v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      void v26[3] = &v18[16 * v17];
      std::string::size_type v23 = &v22[2 * a5];
      do
      {
        uint64_t *v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      v26[2] = v23;
      uint64_t v5 = (void *)std::vector<std::shared_ptr<NL::Entity>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_1A436D9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<NL::Entity>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  size_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    size_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<std::shared_ptr<NL::Entity>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NL::Entity>>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>,std::reverse_iterator<std::shared_ptr<NL::Entity>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*,std::shared_ptr<NL::Entity>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::string>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v28 = *(a2 - 2);
          if (!v28) {
            return;
          }
          uint64_t v29 = *v11;
          if (!*v11) {
            return;
          }
          uint64_t v30 = *(void *)(v28 + 96);
          uint64_t v31 = *(void *)(v29 + 96);
          if (v30 == v31)
          {
            uint64_t v32 = *(void *)(v28 + 104);
            uint64_t v33 = *(void *)(v29 + 104);
            if (v32 == v33)
            {
              if (*(_DWORD *)(v28 + 112) >= *(_DWORD *)(v29 + 112)) {
                return;
              }
            }
            else if (v32 <= v33)
            {
              return;
            }
          }
          else if (v30 >= v31)
          {
            return;
          }
          *uint64_t v11 = v28;
          *(a2 - 2) = v29;
          uint64_t v34 = v11[1];
          v11[1] = *(a2 - 1);
          *(a2 - 1) = v34;
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v11, v11 + 2, a2 - 2);
          return;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v11, v11 + 2, v11 + 4, a2 - 2);
          return;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_21;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_21;
      }
    }
    uint64_t v19 = *(v11 - 2);
    if (!v19 || (uint64_t v20 = *v11) == 0)
    {
LABEL_25:
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_less_than_range &>((long long *)v11, a2);
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v19 + 96);
    uint64_t v22 = *(void *)(v20 + 96);
    if (v21 == v22)
    {
      uint64_t v23 = *(void *)(v19 + 104);
      uint64_t v24 = *(void *)(v20 + 104);
      if (v23 == v24)
      {
        if (*(_DWORD *)(v19 + 112) >= *(_DWORD *)(v20 + 112)) {
          goto LABEL_25;
        }
      }
      else if (v23 <= v24)
      {
        goto LABEL_25;
      }
    }
    else if (v21 >= v22)
    {
      goto LABEL_25;
    }
LABEL_21:
    uint64_t v25 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_less_than_range &>((long long *)v11, (long long *)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_24;
    }
    BOOL v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v11, v25);
    uint64_t v11 = v25 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v25 + 2, a2))
    {
      a4 = -v13;
      a2 = v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_24:
      std::__introsort<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *,false>(a1, v25, a3, -v13, a5 & 1);
      uint64_t v11 = v25 + 2;
LABEL_26:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(v11, a2);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v29 = *(a2 - 2);
          if (!v29) {
            return;
          }
          uint64_t v30 = *v11;
          if (!*v11) {
            return;
          }
          uint64_t v31 = *(void *)(v29 + 96);
          uint64_t v32 = *(void *)(v30 + 96);
          uint64_t v33 = v31 < v32;
          if (v31 == v32 && (v34 = *(void *)(v29 + 104), v35 = *(void *)(v30 + 104), uint64_t v33 = v34 < v35, v34 == v35))
          {
            if (*(_DWORD *)(v29 + 112) >= *(_DWORD *)(v30 + 112)) {
              return;
            }
          }
          else if (!v33)
          {
            return;
          }
          *uint64_t v11 = v29;
          *(a2 - 2) = v30;
          unint64_t v36 = v11[1];
          v11[1] = *(a2 - 1);
          *(a2 - 1) = v36;
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v11, v11 + 2, a2 - 2);
          return;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v11, v11 + 2, v11 + 4, a2 - 2);
          return;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_20;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_20;
      }
    }
    uint64_t v19 = *(v11 - 2);
    if (!v19 || (uint64_t v20 = *v11) == 0)
    {
LABEL_24:
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_greater_than_range &>((long long *)v11, a2);
      goto LABEL_25;
    }
    uint64_t v21 = *(void *)(v19 + 96);
    uint64_t v22 = *(void *)(v20 + 96);
    uint64_t v23 = v21 < v22;
    if (v21 == v22 && (v24 = *(void *)(v19 + 104), v25 = *(void *)(v20 + 104), uint64_t v23 = v24 < v25, v24 == v25))
    {
      if (*(_DWORD *)(v19 + 112) >= *(_DWORD *)(v20 + 112)) {
        goto LABEL_24;
      }
    }
    else if (!v23)
    {
      goto LABEL_24;
    }
LABEL_20:
    char v26 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_greater_than_range &>((long long *)v11, (long long *)a2);
    if ((v27 & 1) == 0) {
      goto LABEL_23;
    }
    uint64_t v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v11, v26);
    uint64_t v11 = v26 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v26 + 2, a2))
    {
      a4 = -v13;
      a2 = v26;
      if (v28) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v28)
    {
LABEL_23:
      std::__introsort<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *,false>(a1, v26, a3, -v13, a5 & 1);
      uint64_t v11 = v26 + 2;
LABEL_25:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(v11, a2);
  }
}

  uint64_t v10 = (uint64_t)(a2 - 3);
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v51 = 0;
          CFStringRef v52 = 0;
          uint64_t v53 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
          uint64_t v48 = 0;
          unint64_t v49 = 0;
          uint64_t v50 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v48, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 4);
          uint64_t v33 = v51;
          uint64_t v32 = v52;
          uint64_t v34 = v48;
          uint64_t v35 = v49;
          if (v48)
          {
            unint64_t v49 = v48;
            operator delete(v48);
          }
          unint64_t v36 = v32 - v33;
          uint64_t v37 = v35 - v34;
          if (v51)
          {
            CFStringRef v52 = v51;
            operator delete(v51);
          }
          if (v36 > v37)
          {
            unint64_t v38 = *(const void **)v11;
            *(void *)uint64_t v11 = *(a2 - 3);
            *(a2 - 3) = v38;
            CFIndex v39 = *(void *)(v11 + 8);
            *(void *)(v11 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(a2 - 2);
            *(a2 - 2) = v39;
            CFStringRef v40 = *(void *)(v11 + 16);
            *(void *)(v11 + 16) = *(a2 - 1);
            *(a2 - 1) = v40;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v11, v11 + 24, v10);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v11, v11 + 24, v11 + 48, v10);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v11, v11 + 24, v11 + 48, v11 + 72, v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>((void *)v11, a2);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v11, (uint64_t)a2);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = (_OWORD *)(v11 + 24 * (v15 >> 1));
    if ((unint64_t)v14 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v11, v11 + 24 * (v15 >> 1), v10);
      long long v18 = 3 * v16;
      uint64_t v19 = v10;
      uint64_t v20 = v11 + 8 * v18;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v11 + 24, v20 - 24, (uint64_t)(a2 - 6));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v11 + 48, v11 + 24 + 8 * v18, (uint64_t)(a2 - 9));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v20 - 24, (uint64_t)v17, v11 + 24 + 8 * v18);
      uint64_t v21 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *v17;
      *unint64_t v17 = v21;
      uint64_t v22 = *(void *)(v11 + 16);
      *(void *)(v11 + 16) = *(void *)(v20 + 16);
      *(void *)(v20 + 16) = v22;
      uint64_t v10 = v19;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(v11 + 24 * (v15 >> 1), v11, v10);
    }
    if ((a5 & 1) == 0)
    {
      long long v45 = 0;
      CFRange v46 = 0;
      CFRange v47 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v45, *(const void **)(v11 - 24), *(void *)(v11 - 16), (uint64_t)(*(void *)(v11 - 16) - *(void *)(v11 - 24)) >> 4);
      CFStringRef v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v42, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 4);
      uint64_t v24 = v45;
      uint64_t v23 = v46;
      char v26 = v42;
      uint64_t v25 = v43;
      if (v42)
      {
        uint64_t v43 = v42;
        operator delete(v42);
      }
      BOOL v27 = v23 - v24;
      uint64_t v28 = v25 - v26;
      if (v45)
      {
        CFRange v46 = v45;
        operator delete(v45);
      }
      if (v27 <= v28)
      {
        uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,ranges_greater_than_range &>(a1, a2);
        goto LABEL_21;
      }
    }
    uint64_t v29 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,ranges_greater_than_range &>(a1, a2);
    if ((v30 & 1) == 0) {
      goto LABEL_19;
    }
    uint64_t v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, (uint64_t)v29);
    uint64_t v11 = (unint64_t)(v29 + 3);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>((uint64_t)(v29 + 3), (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v29;
      if (v31) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v31)
    {
LABEL_19:
      std::__introsort<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *,false>(a1, v29, a3, -v13, a5 & 1);
      uint64_t v11 = (unint64_t)(v29 + 3);
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if ((void *)v11 != a2) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *,std::vector<CFRange> *>(v11, (uint64_t)a2, (uint64_t)a2, a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((uint64_t *)a2 - 2, v11))
          {
            uint64_t v22 = *v11;
            *uint64_t v11 = *((void *)a2 - 2);
            *((void *)a2 - 2) = v22;
            uint64_t v23 = v11[1];
            v11[1] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v11, v11 + 2, (uint64_t *)a2 - 2, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v11, v11 + 2, v11 + 4, (uint64_t *)a2 - 2, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v11, v11 + 2, v11 + 4, v11 + 6, (uint64_t *)a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>((uint64_t)v11, (uint64_t)a2, a2, (unsigned int (**)(long long *, uint64_t))a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v11, &v11[2 * (v15 >> 1)], (uint64_t *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v11 + 2, v17 - 2, (uint64_t *)a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v11 + 4, &v11[2 * v16 + 2], (uint64_t *)a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(&v11[2 * (v15 >> 1)], v11, (uint64_t *)a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v11 - 2, v11) & 1) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NLMessageConversationTurn> *,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&)>((long long *)v11, a2, (uint64_t (**)(long long *, void *))a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v19 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NLMessageConversationTurn> *,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&)>((long long *)v11, a2, (uint64_t (**)(long long *, long long *))a3);
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v11, v19, a3);
    uint64_t v11 = v19 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>(v19 + 2, (uint64_t *)a2, a3))
    {
      a4 = -v13;
      a2 = (long long *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*,false>(a1, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(long long *, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<NLMessageConversationTurn> const&,std::shared_ptr<NLMessageConversationTurn> const&),std::shared_ptr<NLMessageConversationTurn>*>((long long *)v11, a2, (uint64_t (**)(long long *, long long *))a3);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 2;
    if (a1 + 2 != a2)
    {
      uint64_t v5 = 0;
      char v6 = a1;
      do
      {
        char v7 = v6;
        char v6 = v4;
        uint64_t v8 = v7[2];
        if (v8)
        {
          uint64_t v9 = *v7;
          if (*v7)
          {
            uint64_t v10 = *(void *)(v8 + 96);
            uint64_t v11 = *(void *)(v9 + 96);
            if (v10 == v11)
            {
              uint64_t v12 = *(void *)(v8 + 104);
              uint64_t v13 = *(void *)(v9 + 104);
              if (v12 == v13)
              {
                if (*(_DWORD *)(v8 + 112) < *(_DWORD *)(v9 + 112)) {
                  goto LABEL_13;
                }
              }
              else if (v12 > v13)
              {
LABEL_13:
                uint64_t v14 = v7[3];
                uint64_t v15 = v5;
                *char v6 = 0;
                v6[1] = 0;
                while (1)
                {
                  unint64_t v16 = (uint64_t *)((char *)a1 + v15);
                  uint64_t v17 = *(uint64_t *)((char *)a1 + v15 + 8);
                  *unint64_t v16 = 0;
                  v16[1] = 0;
                  long long v18 = *(std::__shared_weak_count **)((char *)a1 + v15 + 24);
                  uint64_t v16[2] = v9;
                  v16[3] = v17;
                  if (v18) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
                  }
                  if (!v15) {
                    break;
                  }
                  uint64_t v19 = (uint64_t *)((char *)a1 + v15);
                  uint64_t v9 = *(uint64_t *)((char *)a1 + v15 - 16);
                  if (!v9) {
                    goto LABEL_27;
                  }
                  uint64_t v20 = *(void *)(v8 + 96);
                  uint64_t v21 = *(void *)(v9 + 96);
                  if (v20 == v21)
                  {
                    uint64_t v22 = *(void *)(v8 + 104);
                    uint64_t v23 = *(void *)(v9 + 104);
                    if (v22 == v23)
                    {
                      if (*(_DWORD *)(v8 + 112) >= *(_DWORD *)(v9 + 112)) {
                        goto LABEL_27;
                      }
                    }
                    else if (v22 <= v23)
                    {
                      goto LABEL_27;
                    }
                  }
                  else if (v20 >= v21)
                  {
                    goto LABEL_27;
                  }
                  v15 -= 16;
                }
                uint64_t v19 = a1;
LABEL_27:
                uint64_t v24 = (std::__shared_weak_count *)v19[1];
                *uint64_t v19 = v8;
                v19[1] = v14;
                if (v24) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
                }
              }
            }
            else if (v10 < v11)
            {
              goto LABEL_13;
            }
          }
        }
        uint64_t v4 = v6 + 2;
        v5 += 16;
      }
      while (v6 + 2 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = a1 + 2;
    if (a1 + 2 != a2)
    {
      uint64_t v5 = (std::__shared_weak_count **)(a1 + 1);
      do
      {
        char v6 = v3;
        uint64_t v3 = v4;
        uint64_t v7 = v6[2];
        if (v7)
        {
          uint64_t v8 = *v6;
          if (*v6)
          {
            uint64_t v9 = *(void *)(v7 + 96);
            uint64_t v10 = *(void *)(v8 + 96);
            if (v9 == v10)
            {
              uint64_t v11 = *(void *)(v7 + 104);
              uint64_t v12 = *(void *)(v8 + 104);
              if (v11 == v12)
              {
                if (*(_DWORD *)(v7 + 112) < *(_DWORD *)(v8 + 112)) {
                  goto LABEL_13;
                }
              }
              else if (v11 > v12)
              {
LABEL_13:
                uint64_t v13 = (std::__shared_weak_count *)v6[3];
                uint64_t v14 = v5;
                *uint64_t v3 = 0;
                v3[1] = 0;
                while (1)
                {
                  uint64_t v15 = *v14;
                  *(v14 - 1) = 0;
                  *uint64_t v14 = 0;
                  unint64_t v16 = v14[2];
                  v14[1] = (std::__shared_weak_count *)v8;
                  void v14[2] = v15;
                  if (v16) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
                  }
                  uint64_t v8 = (uint64_t)*(v14 - 3);
                  if (!v8) {
                    break;
                  }
                  uint64_t v17 = *(void *)(v7 + 96);
                  uint64_t v18 = *(void *)(v8 + 96);
                  if (v17 == v18)
                  {
                    uint64_t v19 = *(void *)(v7 + 104);
                    uint64_t v20 = *(void *)(v8 + 104);
                    if (v19 == v20)
                    {
                      if (*(_DWORD *)(v7 + 112) >= *(_DWORD *)(v8 + 112)) {
                        break;
                      }
                    }
                    else if (v19 <= v20)
                    {
                      break;
                    }
                  }
                  else if (v17 >= v18)
                  {
                    break;
                  }
                  v14 -= 2;
                }
                uint64_t v21 = *v14;
                *(v14 - 1) = (std::__shared_weak_count *)v7;
                *uint64_t v14 = v13;
                if (v21) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
                }
              }
            }
            else if (v9 < v10)
            {
              goto LABEL_13;
            }
          }
        }
        uint64_t v4 = v3 + 2;
        v5 += 2;
      }
      while (v3 + 2 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *a1;
    if (!*a1) {
      goto LABEL_14;
    }
    uint64_t v6 = *(void *)(v3 + 96);
    uint64_t v5 = *(void *)(v3 + 104);
    uint64_t v7 = *(void *)(v4 + 96);
    if (v6 == v7)
    {
      uint64_t v8 = *(void *)(v4 + 104);
      if (v5 == v8)
      {
        if (*(_DWORD *)(v3 + 112) >= *(_DWORD *)(v4 + 112))
        {
LABEL_14:
          uint64_t v12 = *a3;
          if (!*a3) {
            return 0;
          }
          uint64_t v13 = *(void *)(v12 + 96);
          uint64_t v14 = *(void *)(v3 + 96);
          if (v13 == v14)
          {
            uint64_t v15 = *(void *)(v12 + 104);
            uint64_t v16 = *(void *)(v3 + 104);
            if (v15 == v16)
            {
              if (*(_DWORD *)(v12 + 112) >= *(_DWORD *)(v3 + 112)) {
                return 0;
              }
            }
            else if (v15 <= v16)
            {
              return 0;
            }
          }
          else if (v13 >= v14)
          {
            return 0;
          }
          *a2 = v12;
          *a3 = v3;
          uint64_t v18 = a2 + 1;
          uint64_t v17 = a2[1];
          a2[1] = a3[1];
          a3[1] = v17;
          uint64_t v19 = *a2;
          if (*a2)
          {
            uint64_t v20 = *a1;
            if (*a1)
            {
              uint64_t v21 = *(void *)(v19 + 96);
              uint64_t v22 = *(void *)(v20 + 96);
              if (v21 != v22)
              {
                if (v21 >= v22) {
                  return 1;
                }
                goto LABEL_42;
              }
              uint64_t v23 = *(void *)(v19 + 104);
              uint64_t v24 = *(void *)(v20 + 104);
              if (v23 == v24)
              {
                if (*(_DWORD *)(v19 + 112) >= *(_DWORD *)(v20 + 112)) {
                  return 1;
                }
                goto LABEL_42;
              }
              if (v23 > v24)
              {
LABEL_42:
                *a1 = v19;
                uint64_t v25 = a1 + 1;
                *a2 = v20;
                uint64_t v3 = 2;
LABEL_46:
                uint64_t v34 = *v25;
                *uint64_t v25 = *v18;
                *uint64_t v18 = v34;
                return v3;
              }
            }
          }
          return 1;
        }
      }
      else if (v5 <= v8)
      {
        goto LABEL_14;
      }
    }
    else if (v6 >= v7)
    {
      goto LABEL_14;
    }
    uint64_t v9 = *a3;
    if (!*a3) {
      goto LABEL_31;
    }
    uint64_t v10 = *(void *)(v9 + 96);
    if (v10 == v6)
    {
      uint64_t v11 = *(void *)(v9 + 104);
      if (v11 == v5)
      {
        if (*(_DWORD *)(v9 + 112) >= *(_DWORD *)(v3 + 112))
        {
LABEL_31:
          *a1 = v3;
          *a2 = v4;
          uint64_t v27 = a1[1];
          a1[1] = a2[1];
          a2[1] = v27;
          uint64_t v28 = *a3;
          if (!*a3) {
            return 1;
          }
          uint64_t v29 = *a2;
          if (!*a2) {
            return 1;
          }
          uint64_t v30 = *(void *)(v28 + 96);
          uint64_t v31 = *(void *)(v29 + 96);
          if (v30 == v31)
          {
            uint64_t v32 = *(void *)(v28 + 104);
            uint64_t v33 = *(void *)(v29 + 104);
            if (v32 == v33)
            {
              if (*(_DWORD *)(v28 + 112) >= *(_DWORD *)(v29 + 112)) {
                return 1;
              }
            }
            else if (v32 <= v33)
            {
              return 1;
            }
          }
          else if (v30 >= v31)
          {
            return 1;
          }
          *a2 = v28;
          *a3 = v29;
          char v26 = a3 + 1;
          uint64_t v3 = 2;
          uint64_t v25 = a2 + 1;
LABEL_45:
          uint64_t v18 = v26;
          goto LABEL_46;
        }
      }
      else if (v11 <= v5)
      {
        goto LABEL_31;
      }
    }
    else if (v10 >= v6)
    {
      goto LABEL_31;
    }
    *a1 = v9;
    uint64_t v25 = a1 + 1;
    *a3 = v4;
    char v26 = a3 + 1;
    uint64_t v3 = 1;
    goto LABEL_45;
  }
  return v3;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_less_than_range &>(long long *a1, uint64_t *a2)
{
  long long v2 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if ((void)v2)
  {
    uint64_t v3 = *(a2 - 2);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 96);
      uint64_t v5 = *(void *)(v2 + 104);
      uint64_t v6 = *(void *)(v3 + 96);
      if (v4 == v6)
      {
        uint64_t v7 = *(void *)(v3 + 104);
        if (v5 == v7)
        {
          if (*(_DWORD *)(v2 + 112) >= *(_DWORD *)(v3 + 112)) {
            goto LABEL_19;
          }
        }
        else if (v5 <= v7)
        {
          goto LABEL_19;
        }
      }
      else if (v4 >= v6)
      {
        goto LABEL_19;
      }
      for (uint64_t i = (uint64_t *)(a1 + 1); ; i += 2)
      {
        uint64_t v9 = *i;
        if (*i)
        {
          uint64_t v10 = *(void *)(v9 + 96);
          if (v4 == v10)
          {
            uint64_t v11 = *(void *)(v9 + 104);
            if (v5 == v11)
            {
              if (*(_DWORD *)(v2 + 112) < *(_DWORD *)(v9 + 112)) {
                goto LABEL_31;
              }
            }
            else if (v5 > v11)
            {
              goto LABEL_31;
            }
          }
          else if (v4 < v10)
          {
            goto LABEL_31;
          }
        }
      }
    }
  }
LABEL_19:
  for (uint64_t i = (uint64_t *)(a1 + 1); i < a2; i += 2)
  {
    if ((void)v2)
    {
      uint64_t v12 = *i;
      if (*i)
      {
        uint64_t v13 = *(void *)(v2 + 96);
        uint64_t v14 = *(void *)(v12 + 96);
        if (v13 == v14)
        {
          uint64_t v15 = *(void *)(v2 + 104);
          uint64_t v16 = *(void *)(v12 + 104);
          if (v15 == v16)
          {
            if (*(_DWORD *)(v2 + 112) < *(_DWORD *)(v12 + 112)) {
              break;
            }
          }
          else if (v15 > v16)
          {
            break;
          }
        }
        else if (v13 < v14)
        {
          break;
        }
      }
    }
  }
LABEL_31:
  if (i < a2)
  {
    a2 -= 2;
    if ((void)v2)
    {
      uint64_t v17 = *a2;
      if (*a2)
      {
        uint64_t v18 = *(void *)(v2 + 96);
        uint64_t v19 = *(void *)(v2 + 104);
        do
        {
          uint64_t v20 = *(void *)(v17 + 96);
          if (v18 == v20)
          {
            uint64_t v21 = *(void *)(v17 + 104);
            if (v19 == v21)
            {
              if (*(_DWORD *)(v2 + 112) >= *(_DWORD *)(v17 + 112)) {
                break;
              }
            }
            else if (v19 <= v21)
            {
              break;
            }
          }
          else if (v18 >= v20)
          {
            break;
          }
          uint64_t v22 = *(a2 - 2);
          a2 -= 2;
          uint64_t v17 = v22;
        }
        while (v22);
      }
    }
  }
  if (i < a2)
  {
    uint64_t v23 = *i;
    uint64_t v24 = *a2;
    do
    {
      uint64_t *i = v24;
      *a2 = v23;
      uint64_t v25 = i[1];
      i[1] = a2[1];
      a2[1] = v25;
      do
      {
        while (1)
        {
          while (1)
          {
            do
            {
              do
                i += 2;
              while (!(void)v2);
              uint64_t v23 = *i;
            }
            while (!*i);
            uint64_t v26 = *(void *)(v2 + 96);
            uint64_t v27 = *(void *)(v2 + 104);
            uint64_t v28 = *(void *)(v23 + 96);
            if (v26 == v28) {
              break;
            }
            if (v26 < v28) {
              goto LABEL_59;
            }
          }
          uint64_t v29 = *(void *)(v23 + 104);
          if (v27 != v29) {
            break;
          }
          if (*(_DWORD *)(v2 + 112) < *(_DWORD *)(v23 + 112)) {
            goto LABEL_59;
          }
        }
      }
      while (v27 <= v29);
LABEL_59:
      while (1)
      {
        uint64_t v30 = *(a2 - 2);
        a2 -= 2;
        uint64_t v24 = v30;
        if (!v30) {
          break;
        }
        uint64_t v31 = *(void *)(v24 + 96);
        if (v26 == v31)
        {
          uint64_t v32 = *(void *)(v24 + 104);
          if (v27 == v32)
          {
            if (*(_DWORD *)(v2 + 112) >= *(_DWORD *)(v24 + 112)) {
              break;
            }
          }
          else if (v27 <= v32)
          {
            break;
          }
        }
        else if (v26 >= v31)
        {
          break;
        }
      }
    }
    while (i < a2);
  }
  uint64_t v33 = (long long *)(i - 2);
  if (i - 2 != (uint64_t *)a1)
  {
    long long v34 = *v33;
    *(void *)uint64_t v33 = 0;
    *(i - 1) = 0;
    uint64_t v35 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v34;
    if (v35)
    {
      long long v38 = v2;
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      long long v2 = v38;
    }
  }
  unint64_t v36 = (std::__shared_weak_count *)*(i - 1);
  *((_OWORD *)i - 1) = v2;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  return i;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_less_than_range &>(long long *a1, long long *a2)
{
  long long v3 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v5 = a1 + 1;
  uint64_t v4 = *((void *)a1 + 2);
  if (v4) {
    BOOL v6 = (void)v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)(v3 + 96);
  uint64_t v8 = *(void *)(v3 + 104);
  uint64_t v9 = a1;
  do
  {
    uint64_t v10 = v9;
    uint64_t v9 = v5;
    uint64_t v11 = *(void *)(v4 + 96);
    if (v11 == v7)
    {
      uint64_t v12 = *(void *)(v4 + 104);
      if (v12 == v8)
      {
        if (*(_DWORD *)(v4 + 112) >= *(_DWORD *)(v3 + 112)) {
          goto LABEL_15;
        }
      }
      else if (v12 <= v8)
      {
        goto LABEL_15;
      }
    }
    else if (v11 >= v7)
    {
      uint64_t v10 = v5 - 1;
      goto LABEL_15;
    }
    ++v5;
    uint64_t v4 = *((void *)v9 + 2);
  }
  while (v4);
  uint64_t v10 = v9;
LABEL_15:
  if (v10 == a1)
  {
LABEL_25:
    while (v5 < a2)
    {
      while (1)
      {
        uint64_t v20 = *((void *)a2-- - 2);
        uint64_t v19 = v20;
        if (!v20 || (void)v3 == 0) {
          break;
        }
        uint64_t v22 = *(void *)(v19 + 96);
        uint64_t v23 = *(void *)(v3 + 96);
        if (v22 == v23)
        {
          uint64_t v24 = *(void *)(v19 + 104);
          uint64_t v25 = *(void *)(v3 + 104);
          if (v24 == v25)
          {
            if (*(_DWORD *)(v19 + 112) < *(_DWORD *)(v3 + 112) || v5 >= a2) {
              goto LABEL_49;
            }
          }
          else if (v24 > v25 || v5 >= a2)
          {
            goto LABEL_49;
          }
        }
        else if (v22 < v23 || v5 >= a2)
        {
          goto LABEL_49;
        }
      }
    }
  }
  else
  {
    do
    {
      while (1)
      {
        while (1)
        {
          do
          {
            uint64_t v14 = *((void *)a2-- - 2);
            uint64_t v13 = v14;
          }
          while (!v14);
          uint64_t v15 = *(void *)(v13 + 96);
          uint64_t v16 = *(void *)(v3 + 96);
          if (v15 == v16) {
            break;
          }
          if (v15 < v16) {
            goto LABEL_49;
          }
        }
        uint64_t v17 = *(void *)(v13 + 104);
        uint64_t v18 = *(void *)(v3 + 104);
        if (v17 != v18) {
          break;
        }
        if (*(_DWORD *)(v13 + 112) < *(_DWORD *)(v3 + 112)) {
          goto LABEL_49;
        }
      }
    }
    while (v17 <= v18);
  }
LABEL_49:
  uint64_t v29 = v5;
  if (v5 < a2)
  {
    uint64_t v30 = *(void *)a2;
    uint64_t v29 = v5;
    uint64_t v31 = a2;
    do
    {
      *(void *)uint64_t v29 = v30;
      *uint64_t v31 = v4;
      uint64_t v32 = *((void *)v29 + 1);
      *((void *)v29 + 1) = v31[1];
      v31[1] = v32;
      uint64_t v33 = *((void *)v29++ + 2);
      uint64_t v4 = v33;
      if (v33) {
        BOOL v34 = (void)v3 == 0;
      }
      else {
        BOOL v34 = 1;
      }
      if (!v34)
      {
        uint64_t v35 = *(void *)(v3 + 96);
        uint64_t v36 = *(void *)(v3 + 104);
        while (1)
        {
          uint64_t v37 = *(void *)(v4 + 96);
          if (v37 == v35)
          {
            uint64_t v38 = *(void *)(v4 + 104);
            if (v38 == v36)
            {
              if (*(_DWORD *)(v4 + 112) >= *(_DWORD *)(v3 + 112)) {
                goto LABEL_64;
              }
            }
            else if (v38 <= v36)
            {
              goto LABEL_64;
            }
          }
          else if (v37 >= v35)
          {
            goto LABEL_64;
          }
          uint64_t v39 = *((void *)v29++ + 2);
          uint64_t v4 = v39;
          if (!v39) {
            goto LABEL_64;
          }
        }
      }
      do
      {
        while (1)
        {
          while (1)
          {
            do
            {
LABEL_64:
              uint64_t v40 = *(v31 - 2);
              v31 -= 2;
              uint64_t v30 = v40;
              if (v40) {
                BOOL v41 = (void)v3 == 0;
              }
              else {
                BOOL v41 = 1;
              }
            }
            while (v41);
            uint64_t v42 = *(void *)(v30 + 96);
            uint64_t v43 = *(void *)(v3 + 96);
            if (v42 == v43) {
              break;
            }
            if (v42 < v43) {
              goto LABEL_75;
            }
          }
          uint64_t v44 = *(void *)(v30 + 104);
          uint64_t v45 = *(void *)(v3 + 104);
          if (v44 != v45) {
            break;
          }
          if (*(_DWORD *)(v30 + 112) < *(_DWORD *)(v3 + 112)) {
            goto LABEL_75;
          }
        }
      }
      while (v44 <= v45);
LABEL_75:
      ;
    }
    while (v29 < (long long *)v31);
  }
  CFRange v46 = v29 - 1;
  if (v29 - 1 != a1)
  {
    long long v47 = *v46;
    *(void *)CFRange v46 = 0;
    *((void *)v29 - 1) = 0;
    uint64_t v48 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v47;
    if (v48)
    {
      long long v51 = v3;
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      long long v3 = v51;
    }
  }
  unint64_t v49 = (std::__shared_weak_count *)*((void *)v29 - 1);
  *(v29 - 1) = v3;
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  return v29 - 1;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 2);
      if (!v6) {
        return result;
      }
      uint64_t v7 = *a1;
      if (!*a1) {
        return result;
      }
      uint64_t v8 = *(void *)(v6 + 96);
      uint64_t v9 = *(void *)(v7 + 96);
      if (v8 == v9)
      {
        uint64_t v10 = *(void *)(v6 + 104);
        uint64_t v11 = *(void *)(v7 + 104);
        if (v10 == v11)
        {
          if (*(_DWORD *)(v6 + 112) >= *(_DWORD *)(v7 + 112)) {
            return result;
          }
        }
        else if (v10 <= v11)
        {
          return result;
        }
      }
      else if (v8 >= v9)
      {
        return result;
      }
      *a1 = v6;
      *(a2 - 2) = v7;
      uint64_t v33 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v33;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v12 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4);
      uint64_t v13 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      int v14 = 0;
      uint64_t v15 = 32;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v13;
    if (!*v13) {
      goto LABEL_36;
    }
    uint64_t v17 = *v12;
    if (!*v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v16 + 96);
    uint64_t v19 = *(void *)(v17 + 96);
    if (v18 == v19) {
      break;
    }
    if (v18 < v19) {
      goto LABEL_19;
    }
LABEL_36:
    uint64_t v12 = v13;
    v15 += 16;
    v13 += 2;
    if (v13 == a2) {
      return 1;
    }
  }
  uint64_t v20 = *(void *)(v16 + 104);
  uint64_t v21 = *(void *)(v17 + 104);
  if (v20 == v21)
  {
    if (*(_DWORD *)(v16 + 112) < *(_DWORD *)(v17 + 112)) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }
  if (v20 <= v21) {
    goto LABEL_36;
  }
LABEL_19:
  uint64_t v22 = v13[1];
  uint64_t v23 = v15;
  uint64_t *v13 = 0;
  v13[1] = 0;
  while (1)
  {
    uint64_t v24 = (uint64_t *)((char *)a1 + v23);
    uint64_t v25 = *(uint64_t *)((char *)a1 + v23 + 8);
    *uint64_t v24 = 0;
    v24[1] = 0;
    uint64_t v26 = *(std::__shared_weak_count **)((char *)a1 + v23 + 24);
    v24[2] = v17;
    v24[3] = v25;
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (!v23) {
      break;
    }
    uint64_t v27 = (uint64_t *)((char *)a1 + v23);
    uint64_t v17 = *(uint64_t *)((char *)a1 + v23 - 16);
    if (!v17) {
      goto LABEL_33;
    }
    uint64_t v28 = *(void *)(v16 + 96);
    uint64_t v29 = *(void *)(v17 + 96);
    if (v28 == v29)
    {
      uint64_t v30 = *(void *)(v16 + 104);
      uint64_t v31 = *(void *)(v17 + 104);
      if (v30 == v31)
      {
        if (*(_DWORD *)(v16 + 112) >= *(_DWORD *)(v17 + 112)) {
          goto LABEL_33;
        }
      }
      else if (v30 <= v31)
      {
        goto LABEL_33;
      }
    }
    else if (v28 >= v29)
    {
      goto LABEL_33;
    }
    v23 -= 16;
  }
  uint64_t v27 = a1;
LABEL_33:
  uint64_t v32 = (std::__shared_weak_count *)v27[1];
  *uint64_t v27 = v16;
  v27[1] = v22;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (++v14 != 8) {
    goto LABEL_36;
  }
  return v13 + 2 == a2;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a2, a3);
  uint64_t v9 = *a4;
  if (*a4)
  {
    uint64_t v10 = *a3;
    if (*a3)
    {
      uint64_t v11 = *(void *)(v9 + 96);
      uint64_t v12 = *(void *)(v10 + 96);
      if (v11 == v12)
      {
        uint64_t v13 = *(void *)(v9 + 104);
        uint64_t v14 = *(void *)(v10 + 104);
        if (v13 == v14)
        {
          if (*(_DWORD *)(v9 + 112) >= *(_DWORD *)(v10 + 112)) {
            return result;
          }
        }
        else if (v13 <= v14)
        {
          return result;
        }
      }
      else if (v11 >= v12)
      {
        return result;
      }
      *a3 = v9;
      *a4 = v10;
      uint64_t v15 = a3[1];
      a3[1] = a4[1];
      a4[1] = v15;
      uint64_t v16 = *a3;
      if (*a3)
      {
        uint64_t v17 = *a2;
        if (*a2)
        {
          uint64_t v18 = *(void *)(v16 + 96);
          uint64_t v19 = *(void *)(v17 + 96);
          if (v18 == v19)
          {
            uint64_t v20 = *(void *)(v16 + 104);
            uint64_t v21 = *(void *)(v17 + 104);
            if (v20 == v21)
            {
              if (*(_DWORD *)(v16 + 112) >= *(_DWORD *)(v17 + 112)) {
                return result;
              }
            }
            else if (v20 <= v21)
            {
              return result;
            }
          }
          else if (v18 >= v19)
          {
            return result;
          }
          *a2 = v16;
          *a3 = v17;
          uint64_t v22 = a2[1];
          a2[1] = a3[1];
          a3[1] = v22;
          uint64_t v23 = *a2;
          if (*a2)
          {
            uint64_t v24 = *a1;
            if (*a1)
            {
              uint64_t v25 = *(void *)(v23 + 96);
              uint64_t v26 = *(void *)(v24 + 96);
              if (v25 == v26)
              {
                uint64_t v27 = *(void *)(v23 + 104);
                uint64_t v28 = *(void *)(v24 + 104);
                if (v27 == v28)
                {
                  if (*(_DWORD *)(v23 + 112) >= *(_DWORD *)(v24 + 112)) {
                    return result;
                  }
                }
                else if (v27 <= v28)
                {
                  return result;
                }
              }
              else if (v25 >= v26)
              {
                return result;
              }
              *a1 = v23;
              *a2 = v24;
              uint64_t v29 = a1[1];
              a1[1] = a2[1];
              a2[1] = v29;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a2, a3, a4);
  uint64_t v11 = *a5;
  if (*a5)
  {
    uint64_t v12 = *a4;
    if (*a4)
    {
      uint64_t v13 = *(void *)(v11 + 96);
      uint64_t v14 = *(void *)(v12 + 96);
      if (v13 == v14)
      {
        uint64_t v15 = *(void *)(v11 + 104);
        uint64_t v16 = *(void *)(v12 + 104);
        if (v15 == v16)
        {
          if (*(_DWORD *)(v11 + 112) >= *(_DWORD *)(v12 + 112)) {
            return result;
          }
        }
        else if (v15 <= v16)
        {
          return result;
        }
      }
      else if (v13 >= v14)
      {
        return result;
      }
      *a4 = v11;
      *a5 = v12;
      uint64_t v17 = a4[1];
      a4[1] = a5[1];
      a5[1] = v17;
      uint64_t v18 = *a4;
      if (*a4)
      {
        uint64_t v19 = *a3;
        if (*a3)
        {
          uint64_t v20 = *(void *)(v18 + 96);
          uint64_t v21 = *(void *)(v19 + 96);
          if (v20 == v21)
          {
            uint64_t v22 = *(void *)(v18 + 104);
            uint64_t v23 = *(void *)(v19 + 104);
            if (v22 == v23)
            {
              if (*(_DWORD *)(v18 + 112) >= *(_DWORD *)(v19 + 112)) {
                return result;
              }
            }
            else if (v22 <= v23)
            {
              return result;
            }
          }
          else if (v20 >= v21)
          {
            return result;
          }
          *a3 = v18;
          *a4 = v19;
          uint64_t v24 = a3[1];
          a3[1] = a4[1];
          a4[1] = v24;
          uint64_t v25 = *a3;
          if (*a3)
          {
            uint64_t v26 = *a2;
            if (*a2)
            {
              uint64_t v27 = *(void *)(v25 + 96);
              uint64_t v28 = *(void *)(v26 + 96);
              if (v27 == v28)
              {
                uint64_t v29 = *(void *)(v25 + 104);
                uint64_t v30 = *(void *)(v26 + 104);
                if (v29 == v30)
                {
                  if (*(_DWORD *)(v25 + 112) >= *(_DWORD *)(v26 + 112)) {
                    return result;
                  }
                }
                else if (v29 <= v30)
                {
                  return result;
                }
              }
              else if (v27 >= v28)
              {
                return result;
              }
              *a2 = v25;
              *a3 = v26;
              uint64_t v31 = a2[1];
              a2[1] = a3[1];
              a3[1] = v31;
              uint64_t v32 = *a2;
              if (*a2)
              {
                uint64_t v33 = *a1;
                if (*a1)
                {
                  uint64_t v34 = *(void *)(v32 + 96);
                  uint64_t v35 = *(void *)(v33 + 96);
                  if (v34 == v35)
                  {
                    uint64_t v36 = *(void *)(v32 + 104);
                    uint64_t v37 = *(void *)(v33 + 104);
                    if (v36 == v37)
                    {
                      if (*(_DWORD *)(v32 + 112) >= *(_DWORD *)(v33 + 112)) {
                        return result;
                      }
                    }
                    else if (v36 <= v37)
                    {
                      return result;
                    }
                  }
                  else if (v34 >= v35)
                  {
                    return result;
                  }
                  *a1 = v32;
                  *a2 = v33;
                  uint64_t v38 = a1[1];
                  a1[1] = a2[1];
                  a2[1] = v38;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      uint64_t v14 = (uint64_t *)v6;
      while (1)
      {
        uint64_t v15 = *v14;
        if (!*v14) {
          goto LABEL_15;
        }
        uint64_t v16 = *a1;
        if (!*a1) {
          goto LABEL_15;
        }
        uint64_t v17 = *(void *)(v15 + 96);
        uint64_t v18 = *(void *)(v16 + 96);
        if (v17 == v18) {
          break;
        }
        if (v17 < v18) {
          goto LABEL_14;
        }
LABEL_15:
        v14 += 2;
        if (v14 == a3)
        {
          uint64_t v13 = (uint64_t)a3;
          goto LABEL_19;
        }
      }
      uint64_t v19 = *(void *)(v15 + 104);
      uint64_t v20 = *(void *)(v16 + 104);
      if (v19 == v20)
      {
        if (*(_DWORD *)(v15 + 112) >= *(_DWORD *)(v16 + 112)) {
          goto LABEL_15;
        }
      }
      else if (v19 <= v20)
      {
        goto LABEL_15;
      }
LABEL_14:
      *uint64_t v14 = v16;
      *a1 = v15;
      uint64_t v21 = v14[1];
      v14[1] = a1[1];
      a1[1] = v21;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>((uint64_t)a1, a4, v9, a1);
      goto LABEL_15;
    }
LABEL_19:
    if (v8 >= 17)
    {
      unint64_t v22 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range,std::shared_ptr<NL::Entity> *>(a1, v6, a4, v22);
        v6 -= 16;
      }
      while (v22-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v6 = (uint64_t)a4 - a1;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 4) {
    return;
  }
  uint64_t v9 = v6 >> 3;
  uint64_t v10 = (v6 >> 3) + 1;
  unint64_t v11 = (uint64_t *)(a1 + 16 * v10);
  uint64_t v12 = v9 + 2;
  if (v9 + 2 < a3)
  {
    uint64_t v14 = v11 + 2;
    uint64_t v13 = *v11;
    if (!*v11)
    {
LABEL_22:
      uint64_t v25 = *a4;
      goto LABEL_23;
    }
    uint64_t v15 = *v14;
    if (!*v14) {
      goto LABEL_13;
    }
    uint64_t v16 = *(void *)(v13 + 96);
    uint64_t v17 = *(void *)(v15 + 96);
    if (v16 != v17)
    {
      if (v16 >= v17) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    uint64_t v18 = *(void *)(v13 + 104);
    uint64_t v19 = *(void *)(v15 + 104);
    if (v18 == v19)
    {
      if (*(_DWORD *)(v13 + 112) >= *(_DWORD *)(v15 + 112)) {
        goto LABEL_12;
      }
LABEL_11:
      v11 += 2;
      uint64_t v10 = v12;
      goto LABEL_12;
    }
    if (v18 > v19) {
      goto LABEL_11;
    }
  }
LABEL_12:
  uint64_t v13 = *v11;
  if (!*v11) {
    goto LABEL_22;
  }
LABEL_13:
  uint64_t v20 = *a4;
  if (*a4)
  {
    uint64_t v21 = *(void *)(v13 + 96);
    uint64_t v22 = *(void *)(v20 + 96);
    if (v21 == v22)
    {
      uint64_t v23 = *(void *)(v13 + 104);
      uint64_t v24 = *(void *)(v20 + 104);
      if (v23 == v24)
      {
        if (*(_DWORD *)(v13 + 112) < *(_DWORD *)(v20 + 112)) {
          return;
        }
      }
      else if (v23 > v24)
      {
        return;
      }
    }
    else if (v21 < v22)
    {
      return;
    }
    goto LABEL_22;
  }
  uint64_t v25 = 0;
LABEL_23:
  uint64_t v26 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v27 = *v11;
  while (1)
  {
    uint64_t v28 = v11;
    uint64_t v29 = v11[1];
    *uint64_t v28 = 0;
    v28[1] = 0;
    uint64_t v30 = (std::__shared_weak_count *)a4[1];
    *a4 = v27;
    a4[1] = v29;
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v7 < v10) {
      break;
    }
    uint64_t v31 = 2 * v10;
    uint64_t v10 = (2 * v10) | 1;
    unint64_t v11 = (uint64_t *)(a1 + 16 * v10);
    uint64_t v32 = v31 + 2;
    if (v31 + 2 >= a3) {
      goto LABEL_36;
    }
    uint64_t v27 = 0;
    uint64_t v34 = v11 + 2;
    uint64_t v33 = *v11;
    a4 = v28;
    if (*v11)
    {
      uint64_t v35 = *v34;
      if (*v34)
      {
        uint64_t v36 = *(void *)(v33 + 96);
        uint64_t v37 = *(void *)(v35 + 96);
        if (v36 == v37)
        {
          uint64_t v38 = *(void *)(v33 + 104);
          uint64_t v39 = *(void *)(v35 + 104);
          if (v38 == v39)
          {
            if (*(_DWORD *)(v33 + 112) >= *(_DWORD *)(v35 + 112)) {
              goto LABEL_36;
            }
          }
          else if (v38 <= v39)
          {
            goto LABEL_36;
          }
LABEL_35:
          v11 += 2;
          uint64_t v10 = v32;
          goto LABEL_36;
        }
        if (v36 < v37) {
          goto LABEL_35;
        }
LABEL_36:
        uint64_t v27 = 0;
        uint64_t v33 = *v11;
        a4 = v28;
        if (*v11) {
          goto LABEL_37;
        }
      }
      else
      {
LABEL_37:
        uint64_t v27 = v33;
        a4 = v28;
        if (v25)
        {
          uint64_t v40 = *(void *)(v33 + 96);
          uint64_t v41 = *(void *)(v25 + 96);
          BOOL v42 = v40 < v41;
          if (v40 == v41)
          {
            uint64_t v43 = *(void *)(v33 + 104);
            uint64_t v44 = *(void *)(v25 + 104);
            BOOL v45 = v43 <= v44;
            if (v43 == v44)
            {
              uint64_t v27 = v33;
              a4 = v28;
              if (*(_DWORD *)(v33 + 112) < *(_DWORD *)(v25 + 112)) {
                break;
              }
            }
            else
            {
              uint64_t v27 = v33;
              a4 = v28;
              if (!v45) {
                break;
              }
            }
          }
          else
          {
            uint64_t v27 = v33;
            a4 = v28;
            if (v42) {
              break;
            }
          }
        }
      }
    }
  }
  CFRange v46 = (std::__shared_weak_count *)v28[1];
  *uint64_t v28 = v25;
  v28[1] = v26;
  if (v46)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(a1, a3, a4);
    uint64_t v10 = v9;
    if (v9 == (void *)(a2 - 16))
    {
      uint64_t v15 = (std::__shared_weak_count *)v9[1];
      *uint64_t v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      uint64_t v12 = (std::__shared_weak_count *)v9[1];
      *(_OWORD *)uint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>((uint64_t)a1, v13, a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_1A436F568(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 2;
  if (a3 < 2) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v6 = v5 >> 1;
  do
  {
    uint64_t v7 = &a1[2 * v4 + 2];
    uint64_t v8 = 2 * v4;
    uint64_t v4 = (2 * v4) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      uint64_t v10 = v7 + 2;
      uint64_t v11 = *v7;
      if (*v7)
      {
        uint64_t v12 = *v10;
        if (*v10)
        {
          uint64_t v13 = *(void *)(v11 + 96);
          uint64_t v14 = *(void *)(v12 + 96);
          if (v13 != v14)
          {
            if (v13 >= v14) {
              goto LABEL_13;
            }
LABEL_12:
            v7 += 2;
            uint64_t v4 = v9;
            goto LABEL_13;
          }
          uint64_t v15 = *(void *)(v11 + 104);
          uint64_t v16 = *(void *)(v12 + 104);
          if (v15 == v16)
          {
            if (*(_DWORD *)(v11 + 112) < *(_DWORD *)(v12 + 112)) {
              goto LABEL_12;
            }
          }
          else if (v15 > v16)
          {
            goto LABEL_12;
          }
        }
      }
    }
LABEL_13:
    long long v17 = *(_OWORD *)v7;
    *uint64_t v7 = 0;
    v7[1] = 0;
    uint64_t v18 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v17;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    a1 = v7;
  }
  while (v4 <= v6);
  return v7;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,entity_less_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (void *)(a1 + 16 * (v4 >> 1));
    uint64_t v8 = *v7;
    if (*v7)
    {
      uint64_t v9 = (void *)(a2 - 16);
      uint64_t v10 = *(void *)(a2 - 16);
      if (v10)
      {
        uint64_t v11 = *(void *)(v8 + 96);
        uint64_t v12 = *(void *)(v10 + 96);
        if (v11 == v12)
        {
          uint64_t v13 = *(void *)(v8 + 104);
          uint64_t v14 = *(void *)(v10 + 104);
          if (v13 == v14)
          {
            if (*(_DWORD *)(v8 + 112) >= *(_DWORD *)(v10 + 112)) {
              return;
            }
          }
          else if (v13 <= v14)
          {
            return;
          }
        }
        else if (v11 >= v12)
        {
          return;
        }
        uint64_t v15 = *(void *)(a2 - 8);
        *uint64_t v9 = 0;
        *(void *)(a2 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
        uint64_t v16 = *v7;
        while (1)
        {
          long long v17 = v7;
          uint64_t v18 = v7[1];
          *long long v17 = 0;
          v17[1] = 0;
          uint64_t v19 = (std::__shared_weak_count *)v9[1];
          *uint64_t v9 = v16;
          v9[1] = v18;
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
          if (!v6) {
            break;
          }
          unint64_t v6 = (v6 - 1) >> 1;
          uint64_t v7 = (void *)(a1 + 16 * v6);
          uint64_t v16 = *v7;
          if (!*v7) {
            break;
          }
          uint64_t v20 = *(void *)(v16 + 96);
          uint64_t v21 = *(void *)(v10 + 96);
          BOOL v22 = v20 < v21;
          if (v20 == v21)
          {
            uint64_t v23 = *(void *)(v16 + 104);
            uint64_t v24 = *(void *)(v10 + 104);
            BOOL v25 = v23 <= v24;
            if (v23 == v24)
            {
              uint64_t v9 = v17;
              if (*(_DWORD *)(v16 + 112) >= *(_DWORD *)(v10 + 112)) {
                break;
              }
            }
            else
            {
              uint64_t v9 = v17;
              if (v25) {
                break;
              }
            }
          }
          else
          {
            uint64_t v9 = v17;
            if (!v22) {
              break;
            }
          }
        }
        uint64_t v26 = (std::__shared_weak_count *)v17[1];
        *long long v17 = v10;
        v17[1] = v15;
        if (v26)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
      }
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a1 + 2;
    if (a1 + 2 != a2)
    {
      uint64_t v5 = 0;
      char v6 = a1;
      do
      {
        uint64_t v7 = v6;
        char v6 = v4;
        uint64_t v8 = v7[2];
        if (v8)
        {
          uint64_t v9 = *v7;
          if (*v7)
          {
            uint64_t v10 = *(void *)(v8 + 96);
            uint64_t v11 = *(void *)(v9 + 96);
            BOOL v12 = v10 < v11;
            if (v10 == v11 && (v13 = *(void *)(v8 + 104), v14 = *(void *)(v9 + 104), BOOL v12 = v13 < v14, v13 == v14))
            {
              if (*(_DWORD *)(v8 + 112) < *(_DWORD *)(v9 + 112)) {
                goto LABEL_12;
              }
            }
            else if (v12)
            {
LABEL_12:
              uint64_t v15 = v7[3];
              uint64_t v16 = v5;
              *char v6 = 0;
              v6[1] = 0;
              while (1)
              {
                long long v17 = (uint64_t *)((char *)a1 + v16);
                uint64_t v18 = *(uint64_t *)((char *)a1 + v16 + 8);
                *long long v17 = 0;
                v17[1] = 0;
                uint64_t v19 = *(std::__shared_weak_count **)((char *)a1 + v16 + 24);
                void v17[2] = v9;
                void v17[3] = v18;
                if (v19) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                }
                if (!v16) {
                  break;
                }
                uint64_t v20 = (uint64_t *)((char *)a1 + v16);
                uint64_t v9 = *(uint64_t *)((char *)a1 + v16 - 16);
                if (!v9) {
                  goto LABEL_25;
                }
                uint64_t v21 = *(void *)(v8 + 96);
                uint64_t v22 = *(void *)(v9 + 96);
                BOOL v23 = v21 < v22;
                if (v21 == v22
                  && (v24 = *(void *)(v8 + 104), v25 = *(void *)(v9 + 104), BOOL v23 = v24 < v25, v24 == v25))
                {
                  if (*(_DWORD *)(v8 + 112) >= *(_DWORD *)(v9 + 112)) {
                    goto LABEL_25;
                  }
                }
                else if (!v23)
                {
                  goto LABEL_25;
                }
                v16 -= 16;
              }
              uint64_t v20 = a1;
LABEL_25:
              uint64_t v26 = (std::__shared_weak_count *)v20[1];
              *uint64_t v20 = v8;
              v20[1] = v15;
              if (v26) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v26);
              }
            }
          }
        }
        unint64_t v4 = v6 + 2;
        v5 += 16;
      }
      while (v6 + 2 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    long long v3 = a1;
    unint64_t v4 = a1 + 2;
    if (a1 + 2 != a2)
    {
      uint64_t v5 = (std::__shared_weak_count **)(a1 + 1);
      do
      {
        char v6 = v3;
        long long v3 = v4;
        uint64_t v7 = v6[2];
        if (v7)
        {
          uint64_t v8 = *v6;
          if (*v6)
          {
            uint64_t v9 = *(void *)(v7 + 96);
            uint64_t v10 = *(void *)(v8 + 96);
            BOOL v11 = v9 < v10;
            if (v9 == v10 && (v12 = *(void *)(v7 + 104), v13 = *(void *)(v8 + 104), BOOL v11 = v12 < v13, v12 == v13))
            {
              if (*(_DWORD *)(v7 + 112) < *(_DWORD *)(v8 + 112)) {
                goto LABEL_12;
              }
            }
            else if (v11)
            {
LABEL_12:
              uint64_t v14 = (std::__shared_weak_count *)v6[3];
              uint64_t v15 = v5;
              *long long v3 = 0;
              v3[1] = 0;
              while (1)
              {
                uint64_t v16 = *v15;
                *(v15 - 1) = 0;
                *uint64_t v15 = 0;
                long long v17 = v15[2];
                v15[1] = (std::__shared_weak_count *)v8;
                uint64_t v15[2] = v16;
                if (v17) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                }
                uint64_t v8 = (uint64_t)*(v15 - 3);
                if (!v8) {
                  break;
                }
                uint64_t v18 = *(void *)(v7 + 96);
                uint64_t v19 = *(void *)(v8 + 96);
                BOOL v20 = v18 < v19;
                if (v18 == v19
                  && (v21 = *(void *)(v7 + 104), v22 = *(void *)(v8 + 104), BOOL v20 = v21 < v22, v21 == v22))
                {
                  if (*(_DWORD *)(v7 + 112) >= *(_DWORD *)(v8 + 112)) {
                    break;
                  }
                }
                else if (!v20)
                {
                  break;
                }
                v15 -= 2;
              }
              BOOL v23 = *v15;
              *(v15 - 1) = (std::__shared_weak_count *)v7;
              *uint64_t v15 = v14;
              if (v23) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              }
            }
          }
        }
        unint64_t v4 = v3 + 2;
        v5 += 2;
      }
      while (v3 + 2 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *a1;
    if (!*a1) {
      goto LABEL_6;
    }
    uint64_t v6 = *(void *)(v3 + 96);
    uint64_t v5 = *(void *)(v3 + 104);
    uint64_t v7 = *(void *)(v4 + 96);
    BOOL v8 = v6 < v7;
    if (v6 == v7 && (v9 = *(void *)(v4 + 104), BOOL v8 = v5 < v9, v5 == v9))
    {
      if (*(_DWORD *)(v3 + 112) >= *(_DWORD *)(v4 + 112)) {
        goto LABEL_6;
      }
    }
    else if (!v8)
    {
LABEL_6:
      uint64_t v10 = *a3;
      if (!*a3) {
        return 0;
      }
      uint64_t v11 = *(void *)(v10 + 96);
      uint64_t v12 = *(void *)(v3 + 96);
      BOOL v13 = v11 < v12;
      if (v11 == v12 && (v14 = *(void *)(v10 + 104), uint64_t v15 = *(void *)(v3 + 104), v13 = v14 < v15, v14 == v15))
      {
        if (*(_DWORD *)(v10 + 112) >= *(_DWORD *)(v3 + 112)) {
          return 0;
        }
      }
      else if (!v13)
      {
        return 0;
      }
      *a2 = v10;
      *a3 = v3;
      uint64_t v29 = a2 + 1;
      uint64_t v28 = a2[1];
      a2[1] = a3[1];
      a3[1] = v28;
      uint64_t v30 = *a2;
      if (*a2)
      {
        uint64_t v31 = *a1;
        if (*a1)
        {
          uint64_t v32 = *(void *)(v30 + 96);
          uint64_t v33 = *(void *)(v31 + 96);
          BOOL v34 = v32 < v33;
          if (v32 == v33 && (v35 = *(void *)(v30 + 104), v36 = *(void *)(v31 + 104), BOOL v34 = v35 < v36, v35 == v36))
          {
            if (*(_DWORD *)(v30 + 112) >= *(_DWORD *)(v31 + 112)) {
              return 1;
            }
          }
          else if (!v34)
          {
            return 1;
          }
          *a1 = v30;
          uint64_t v37 = a1 + 1;
          *a2 = v31;
          uint64_t v3 = 2;
LABEL_41:
          uint64_t v39 = *v37;
          *uint64_t v37 = *v29;
          *uint64_t v29 = v39;
          return v3;
        }
      }
      return 1;
    }
    uint64_t v16 = *a3;
    if (!*a3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 96);
    BOOL v18 = v17 < v6;
    if (v17 == v6 && (v19 = *(void *)(v16 + 104), BOOL v18 = v19 < v5, v19 == v5))
    {
      if (*(_DWORD *)(v16 + 112) >= *(_DWORD *)(v3 + 112)) {
        goto LABEL_17;
      }
    }
    else if (!v18)
    {
LABEL_17:
      *a1 = v3;
      *a2 = v4;
      uint64_t v20 = a1[1];
      a1[1] = a2[1];
      a2[1] = v20;
      uint64_t v21 = *a3;
      if (!*a3) {
        return 1;
      }
      uint64_t v22 = *a2;
      if (!*a2) {
        return 1;
      }
      uint64_t v23 = *(void *)(v21 + 96);
      uint64_t v24 = *(void *)(v22 + 96);
      BOOL v25 = v23 < v24;
      if (v23 == v24 && (uint64_t v26 = *(void *)(v21 + 104), v27 = *(void *)(v22 + 104), v25 = v26 < v27, v26 == v27))
      {
        if (*(_DWORD *)(v21 + 112) >= *(_DWORD *)(v22 + 112)) {
          return 1;
        }
      }
      else if (!v25)
      {
        return 1;
      }
      *a2 = v21;
      *a3 = v22;
      uint64_t v38 = a3 + 1;
      uint64_t v3 = 2;
      uint64_t v37 = a2 + 1;
LABEL_37:
      uint64_t v29 = v38;
      goto LABEL_41;
    }
    *a1 = v16;
    uint64_t v37 = a1 + 1;
    *a3 = v4;
    uint64_t v38 = a3 + 1;
    uint64_t v3 = 1;
    goto LABEL_37;
  }
  return v3;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_greater_than_range &>(long long *a1, uint64_t *a2)
{
  long long v2 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if ((void)v2)
  {
    uint64_t v3 = *(a2 - 2);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 96);
      uint64_t v5 = *(void *)(v2 + 104);
      uint64_t v6 = *(void *)(v3 + 96);
      BOOL v7 = v4 < v6;
      if (v4 == v6)
      {
        uint64_t v8 = *(void *)(v3 + 104);
        BOOL v7 = v5 < v8;
        if (v5 == v8)
        {
          if (*(_DWORD *)(v2 + 112) >= *(_DWORD *)(v3 + 112)) {
            goto LABEL_6;
          }
LABEL_18:
          for (uint64_t i = (uint64_t *)(a1 + 1); ; i += 2)
          {
            uint64_t v16 = *i;
            if (*i)
            {
              uint64_t v17 = *(void *)(v16 + 96);
              BOOL v18 = v4 < v17;
              if (v4 == v17 && (v19 = *(void *)(v16 + 104), BOOL v18 = v5 < v19, v5 == v19))
              {
                if (*(_DWORD *)(v2 + 112) < *(_DWORD *)(v16 + 112)) {
                  goto LABEL_26;
                }
              }
              else if (v18)
              {
                goto LABEL_26;
              }
            }
          }
        }
      }
      if (v7) {
        goto LABEL_18;
      }
    }
  }
LABEL_6:
  for (uint64_t i = (uint64_t *)(a1 + 1); i < a2; i += 2)
  {
    if ((void)v2)
    {
      uint64_t v10 = *i;
      if (*i)
      {
        uint64_t v11 = *(void *)(v2 + 96);
        uint64_t v12 = *(void *)(v10 + 96);
        BOOL v13 = v11 < v12;
        if (v11 == v12 && (v14 = *(void *)(v2 + 104), uint64_t v15 = *(void *)(v10 + 104), v13 = v14 < v15, v14 == v15))
        {
          if (*(_DWORD *)(v2 + 112) < *(_DWORD *)(v10 + 112)) {
            break;
          }
        }
        else if (v13)
        {
          break;
        }
      }
    }
  }
LABEL_26:
  if (i < a2)
  {
    a2 -= 2;
    if ((void)v2)
    {
      uint64_t v20 = *a2;
      if (*a2)
      {
        uint64_t v21 = *(void *)(v2 + 96);
        uint64_t v22 = *(void *)(v2 + 104);
        do
        {
          uint64_t v23 = *(void *)(v20 + 96);
          BOOL v24 = v21 < v23;
          if (v21 == v23 && (v25 = *(void *)(v20 + 104), BOOL v24 = v22 < v25, v22 == v25))
          {
            if (*(_DWORD *)(v2 + 112) >= *(_DWORD *)(v20 + 112)) {
              break;
            }
          }
          else if (!v24)
          {
            break;
          }
          uint64_t v26 = *(a2 - 2);
          a2 -= 2;
          uint64_t v20 = v26;
        }
        while (v26);
      }
    }
  }
  if (i < a2)
  {
    uint64_t v27 = *i;
    uint64_t v28 = *a2;
    do
    {
      uint64_t *i = v28;
      *a2 = v27;
      uint64_t v29 = i[1];
      i[1] = a2[1];
      a2[1] = v29;
      do
      {
        while (1)
        {
          do
          {
            do
              i += 2;
            while (!(void)v2);
            uint64_t v27 = *i;
          }
          while (!*i);
          uint64_t v30 = *(void *)(v2 + 96);
          uint64_t v31 = *(void *)(v2 + 104);
          uint64_t v32 = *(void *)(v27 + 96);
          BOOL v33 = v30 < v32;
          if (v30 != v32) {
            break;
          }
          uint64_t v34 = *(void *)(v27 + 104);
          BOOL v33 = v31 < v34;
          if (v31 != v34) {
            break;
          }
          if (*(_DWORD *)(v2 + 112) < *(_DWORD *)(v27 + 112)) {
            goto LABEL_51;
          }
        }
      }
      while (!v33);
LABEL_51:
      while (1)
      {
        uint64_t v35 = *(a2 - 2);
        a2 -= 2;
        uint64_t v28 = v35;
        if (!v35) {
          break;
        }
        uint64_t v36 = *(void *)(v28 + 96);
        BOOL v37 = v30 < v36;
        if (v30 == v36 && (v38 = *(void *)(v28 + 104), BOOL v37 = v31 < v38, v31 == v38))
        {
          if (*(_DWORD *)(v2 + 112) >= *(_DWORD *)(v28 + 112)) {
            break;
          }
        }
        else if (!v37)
        {
          break;
        }
      }
    }
    while (i < a2);
  }
  uint64_t v39 = (long long *)(i - 2);
  if (i - 2 != (uint64_t *)a1)
  {
    long long v40 = *v39;
    *(void *)uint64_t v39 = 0;
    *(i - 1) = 0;
    uint64_t v41 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v40;
    if (v41)
    {
      long long v44 = v2;
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      long long v2 = v44;
    }
  }
  BOOL v42 = (std::__shared_weak_count *)*(i - 1);
  *((_OWORD *)i - 1) = v2;
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  return i;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<NL::Entity> *,entity_greater_than_range &>(long long *a1, long long *a2)
{
  long long v3 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v5 = a1 + 1;
  uint64_t v4 = *((void *)a1 + 2);
  if (v4) {
    BOOL v6 = (void)v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    goto LABEL_24;
  }
  uint64_t v7 = *(void *)(v3 + 96);
  uint64_t v8 = *(void *)(v3 + 104);
  uint64_t v9 = a1;
  do
  {
    uint64_t v10 = v9;
    uint64_t v9 = v5;
    uint64_t v11 = *(void *)(v4 + 96);
    if (v11 == v7)
    {
      uint64_t v12 = *(void *)(v4 + 104);
      if (v12 == v8)
      {
        if (*(_DWORD *)(v4 + 112) >= *(_DWORD *)(v3 + 112)) {
          goto LABEL_15;
        }
      }
      else if (v12 >= v8)
      {
        goto LABEL_15;
      }
    }
    else if (v11 >= v7)
    {
      uint64_t v10 = v5 - 1;
      goto LABEL_15;
    }
    ++v5;
    uint64_t v4 = *((void *)v9 + 2);
  }
  while (v4);
  uint64_t v10 = v9;
LABEL_15:
  if (v10 == a1)
  {
LABEL_24:
    while (v5 < a2)
    {
      while (1)
      {
        uint64_t v21 = *((void *)a2-- - 2);
        uint64_t v20 = v21;
        if (!v21 || (void)v3 == 0) {
          break;
        }
        uint64_t v23 = *(void *)(v20 + 96);
        uint64_t v24 = *(void *)(v3 + 96);
        BOOL v25 = v23 < v24;
        if (v23 == v24 && (uint64_t v26 = *(void *)(v20 + 104), v27 = *(void *)(v3 + 104), v25 = v26 < v27, v26 == v27))
        {
          if (*(_DWORD *)(v20 + 112) < *(_DWORD *)(v3 + 112) || v5 >= a2) {
            goto LABEL_42;
          }
        }
        else if (v25 || v5 >= a2)
        {
          goto LABEL_42;
        }
      }
    }
  }
  else
  {
    do
    {
      while (1)
      {
        do
        {
          uint64_t v14 = *((void *)a2-- - 2);
          uint64_t v13 = v14;
        }
        while (!v14);
        uint64_t v15 = *(void *)(v13 + 96);
        uint64_t v16 = *(void *)(v3 + 96);
        BOOL v17 = v15 < v16;
        if (v15 != v16) {
          break;
        }
        uint64_t v18 = *(void *)(v13 + 104);
        uint64_t v19 = *(void *)(v3 + 104);
        BOOL v17 = v18 < v19;
        if (v18 != v19) {
          break;
        }
        if (*(_DWORD *)(v13 + 112) < *(_DWORD *)(v3 + 112)) {
          goto LABEL_42;
        }
      }
    }
    while (!v17);
  }
LABEL_42:
  uint64_t v30 = v5;
  if (v5 < a2)
  {
    uint64_t v31 = *(void *)a2;
    uint64_t v30 = v5;
    uint64_t v32 = a2;
    do
    {
      *(void *)uint64_t v30 = v31;
      *uint64_t v32 = v4;
      uint64_t v33 = *((void *)v30 + 1);
      *((void *)v30 + 1) = v32[1];
      v32[1] = v33;
      uint64_t v34 = *((void *)v30++ + 2);
      uint64_t v4 = v34;
      if (v34) {
        BOOL v35 = (void)v3 == 0;
      }
      else {
        BOOL v35 = 1;
      }
      if (!v35)
      {
        uint64_t v36 = *(void *)(v3 + 96);
        uint64_t v37 = *(void *)(v3 + 104);
        while (1)
        {
          uint64_t v38 = *(void *)(v4 + 96);
          BOOL v39 = v38 < v36;
          if (v38 == v36 && (v40 = *(void *)(v4 + 104), BOOL v39 = v40 < v37, v40 == v37))
          {
            if (*(_DWORD *)(v4 + 112) >= *(_DWORD *)(v3 + 112)) {
              goto LABEL_56;
            }
          }
          else if (!v39)
          {
            goto LABEL_56;
          }
          uint64_t v41 = *((void *)v30++ + 2);
          uint64_t v4 = v41;
          if (!v41) {
            goto LABEL_56;
          }
        }
      }
      do
      {
        while (1)
        {
          do
          {
LABEL_56:
            uint64_t v42 = *(v32 - 2);
            v32 -= 2;
            uint64_t v31 = v42;
            if (v42) {
              BOOL v43 = (void)v3 == 0;
            }
            else {
              BOOL v43 = 1;
            }
          }
          while (v43);
          uint64_t v44 = *(void *)(v31 + 96);
          uint64_t v45 = *(void *)(v3 + 96);
          BOOL v46 = v44 < v45;
          if (v44 != v45) {
            break;
          }
          uint64_t v47 = *(void *)(v31 + 104);
          uint64_t v48 = *(void *)(v3 + 104);
          BOOL v46 = v47 < v48;
          if (v47 != v48) {
            break;
          }
          if (*(_DWORD *)(v31 + 112) < *(_DWORD *)(v3 + 112)) {
            goto LABEL_66;
          }
        }
      }
      while (!v46);
LABEL_66:
      ;
    }
    while (v30 < (long long *)v32);
  }
  unint64_t v49 = v30 - 1;
  if (v30 - 1 != a1)
  {
    long long v50 = *v49;
    *(void *)unint64_t v49 = 0;
    *((void *)v30 - 1) = 0;
    long long v51 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v50;
    if (v51)
    {
      long long v54 = v3;
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      long long v3 = v54;
    }
  }
  CFStringRef v52 = (std::__shared_weak_count *)*((void *)v30 - 1);
  *(v30 - 1) = v3;
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  return v30 - 1;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 2);
      if (!v6) {
        return result;
      }
      uint64_t v7 = *a1;
      if (!*a1) {
        return result;
      }
      uint64_t v8 = *(void *)(v6 + 96);
      uint64_t v9 = *(void *)(v7 + 96);
      BOOL v10 = v8 < v9;
      if (v8 == v9 && (v11 = *(void *)(v6 + 104), v12 = *(void *)(v7 + 104), BOOL v10 = v11 < v12, v11 == v12))
      {
        if (*(_DWORD *)(v6 + 112) >= *(_DWORD *)(v7 + 112)) {
          return result;
        }
      }
      else if (!v10)
      {
        return result;
      }
      *a1 = v6;
      *(a2 - 2) = v7;
      uint64_t v36 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v36;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v13 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a1 + 2, a1 + 4);
      uint64_t v14 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      int v15 = 0;
      uint64_t v16 = 32;
      break;
  }
  while (1)
  {
    uint64_t v17 = *v14;
    if (!*v14) {
      goto LABEL_34;
    }
    uint64_t v18 = *v13;
    if (!*v13) {
      goto LABEL_34;
    }
    uint64_t v19 = *(void *)(v17 + 96);
    uint64_t v20 = *(void *)(v18 + 96);
    BOOL v21 = v19 < v20;
    if (v19 != v20) {
      break;
    }
    uint64_t v22 = *(void *)(v17 + 104);
    uint64_t v23 = *(void *)(v18 + 104);
    BOOL v21 = v22 < v23;
    if (v22 != v23) {
      break;
    }
    if (*(_DWORD *)(v17 + 112) < *(_DWORD *)(v18 + 112)) {
      goto LABEL_18;
    }
LABEL_34:
    uint64_t v13 = v14;
    v16 += 16;
    v14 += 2;
    if (v14 == a2) {
      return 1;
    }
  }
  if (!v21) {
    goto LABEL_34;
  }
LABEL_18:
  uint64_t v24 = v14[1];
  uint64_t v25 = v16;
  *uint64_t v14 = 0;
  v14[1] = 0;
  while (1)
  {
    uint64_t v26 = (uint64_t *)((char *)a1 + v25);
    uint64_t v27 = *(uint64_t *)((char *)a1 + v25 + 8);
    *uint64_t v26 = 0;
    v26[1] = 0;
    uint64_t v28 = *(std::__shared_weak_count **)((char *)a1 + v25 + 24);
    v26[2] = v18;
    void v26[3] = v27;
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (!v25) {
      break;
    }
    uint64_t v29 = (uint64_t *)((char *)a1 + v25);
    uint64_t v18 = *(uint64_t *)((char *)a1 + v25 - 16);
    if (!v18) {
      goto LABEL_31;
    }
    uint64_t v30 = *(void *)(v17 + 96);
    uint64_t v31 = *(void *)(v18 + 96);
    BOOL v32 = v30 < v31;
    if (v30 == v31 && (v33 = *(void *)(v17 + 104), v34 = *(void *)(v18 + 104), BOOL v32 = v33 < v34, v33 == v34))
    {
      if (*(_DWORD *)(v17 + 112) >= *(_DWORD *)(v18 + 112)) {
        goto LABEL_31;
      }
    }
    else if (!v32)
    {
      goto LABEL_31;
    }
    v25 -= 16;
  }
  uint64_t v29 = a1;
LABEL_31:
  BOOL v35 = (std::__shared_weak_count *)v29[1];
  *uint64_t v29 = v17;
  v29[1] = v24;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (++v15 != 8) {
    goto LABEL_34;
  }
  return v14 + 2 == a2;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a2, a3);
  uint64_t v9 = *a4;
  if (*a4)
  {
    uint64_t v10 = *a3;
    if (*a3)
    {
      uint64_t v11 = *(void *)(v9 + 96);
      uint64_t v12 = *(void *)(v10 + 96);
      BOOL v13 = v11 < v12;
      if (v11 == v12 && (v14 = *(void *)(v9 + 104), uint64_t v15 = *(void *)(v10 + 104), v13 = v14 < v15, v14 == v15))
      {
        if (*(_DWORD *)(v9 + 112) >= *(_DWORD *)(v10 + 112)) {
          return result;
        }
      }
      else if (!v13)
      {
        return result;
      }
      *a3 = v9;
      *a4 = v10;
      uint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      uint64_t v17 = *a3;
      if (*a3)
      {
        uint64_t v18 = *a2;
        if (*a2)
        {
          uint64_t v19 = *(void *)(v17 + 96);
          uint64_t v20 = *(void *)(v18 + 96);
          BOOL v21 = v19 < v20;
          if (v19 == v20 && (v22 = *(void *)(v17 + 104), v23 = *(void *)(v18 + 104), BOOL v21 = v22 < v23, v22 == v23))
          {
            if (*(_DWORD *)(v17 + 112) >= *(_DWORD *)(v18 + 112)) {
              return result;
            }
          }
          else if (!v21)
          {
            return result;
          }
          *a2 = v17;
          *a3 = v18;
          uint64_t v24 = a2[1];
          a2[1] = a3[1];
          a3[1] = v24;
          uint64_t v25 = *a2;
          if (*a2)
          {
            uint64_t v26 = *a1;
            if (*a1)
            {
              uint64_t v27 = *(void *)(v25 + 96);
              uint64_t v28 = *(void *)(v26 + 96);
              BOOL v29 = v27 < v28;
              if (v27 == v28)
              {
                uint64_t v30 = *(void *)(v25 + 104);
                uint64_t v31 = *(void *)(v26 + 104);
                BOOL v29 = v30 < v31;
                if (v30 == v31)
                {
                  if (*(_DWORD *)(v25 + 112) >= *(_DWORD *)(v26 + 112)) {
                    return result;
                  }
LABEL_25:
                  *a1 = v25;
                  *a2 = v26;
                  uint64_t v32 = a1[1];
                  a1[1] = a2[1];
                  a2[1] = v32;
                  return result;
                }
              }
              if (v29) {
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a2, a3, a4);
  uint64_t v11 = *a5;
  if (*a5)
  {
    uint64_t v12 = *a4;
    if (*a4)
    {
      uint64_t v13 = *(void *)(v11 + 96);
      uint64_t v14 = *(void *)(v12 + 96);
      BOOL v15 = v13 < v14;
      if (v13 == v14 && (v16 = *(void *)(v11 + 104), v17 = *(void *)(v12 + 104), BOOL v15 = v16 < v17, v16 == v17))
      {
        if (*(_DWORD *)(v11 + 112) >= *(_DWORD *)(v12 + 112)) {
          return result;
        }
      }
      else if (!v15)
      {
        return result;
      }
      *a4 = v11;
      *a5 = v12;
      uint64_t v18 = a4[1];
      a4[1] = a5[1];
      a5[1] = v18;
      uint64_t v19 = *a4;
      if (*a4)
      {
        uint64_t v20 = *a3;
        if (*a3)
        {
          uint64_t v21 = *(void *)(v19 + 96);
          uint64_t v22 = *(void *)(v20 + 96);
          BOOL v23 = v21 < v22;
          if (v21 == v22 && (v24 = *(void *)(v19 + 104), v25 = *(void *)(v20 + 104), BOOL v23 = v24 < v25, v24 == v25))
          {
            if (*(_DWORD *)(v19 + 112) >= *(_DWORD *)(v20 + 112)) {
              return result;
            }
          }
          else if (!v23)
          {
            return result;
          }
          *a3 = v19;
          *a4 = v20;
          uint64_t v26 = a3[1];
          a3[1] = a4[1];
          a4[1] = v26;
          uint64_t v27 = *a3;
          if (*a3)
          {
            uint64_t v28 = *a2;
            if (*a2)
            {
              uint64_t v29 = *(void *)(v27 + 96);
              uint64_t v30 = *(void *)(v28 + 96);
              BOOL v31 = v29 < v30;
              if (v29 == v30
                && (v32 = *(void *)(v27 + 104), v33 = *(void *)(v28 + 104), BOOL v31 = v32 < v33, v32 == v33))
              {
                if (*(_DWORD *)(v27 + 112) >= *(_DWORD *)(v28 + 112)) {
                  return result;
                }
              }
              else if (!v31)
              {
                return result;
              }
              *a2 = v27;
              *a3 = v28;
              uint64_t v34 = a2[1];
              a2[1] = a3[1];
              a3[1] = v34;
              uint64_t v35 = *a2;
              if (*a2)
              {
                uint64_t v36 = *a1;
                if (*a1)
                {
                  uint64_t v37 = *(void *)(v35 + 96);
                  uint64_t v38 = *(void *)(v36 + 96);
                  BOOL v39 = v37 < v38;
                  if (v37 == v38)
                  {
                    uint64_t v40 = *(void *)(v35 + 104);
                    uint64_t v41 = *(void *)(v36 + 104);
                    BOOL v39 = v40 < v41;
                    if (v40 == v41)
                    {
                      if (*(_DWORD *)(v35 + 112) >= *(_DWORD *)(v36 + 112)) {
                        return result;
                      }
LABEL_33:
                      *a1 = v35;
                      *a2 = v36;
                      uint64_t v42 = a1[1];
                      a1[1] = a2[1];
                      a2[1] = v42;
                      return result;
                    }
                  }
                  if (v39) {
                    goto LABEL_33;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      uint64_t v14 = (uint64_t *)v6;
      while (1)
      {
        uint64_t v15 = *v14;
        if (!*v14) {
          goto LABEL_16;
        }
        uint64_t v16 = *a1;
        if (!*a1) {
          goto LABEL_16;
        }
        uint64_t v17 = *(void *)(v15 + 96);
        uint64_t v18 = *(void *)(v16 + 96);
        BOOL v19 = v17 < v18;
        if (v17 == v18 && (v20 = *(void *)(v15 + 104), v21 = *(void *)(v16 + 104), BOOL v19 = v20 < v21, v20 == v21))
        {
          if (*(_DWORD *)(v15 + 112) >= *(_DWORD *)(v16 + 112)) {
            goto LABEL_16;
          }
        }
        else if (!v19)
        {
          goto LABEL_16;
        }
        *uint64_t v14 = v16;
        *a1 = v15;
        uint64_t v22 = v14[1];
        v14[1] = a1[1];
        a1[1] = v22;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>((uint64_t)a1, a4, v9, a1);
LABEL_16:
        v14 += 2;
        if (v14 == a3)
        {
          uint64_t v13 = (uint64_t)a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      unint64_t v23 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range,std::shared_ptr<NL::Entity> *>(a1, v6, a4, v23);
        v6 -= 16;
        BOOL v19 = v23-- > 2;
      }
      while (v19);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v6 = (uint64_t)a4 - a1;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 4) {
    return;
  }
  uint64_t v9 = v6 >> 3;
  uint64_t v10 = (v6 >> 3) + 1;
  unint64_t v11 = (uint64_t *)(a1 + 16 * v10);
  uint64_t v12 = v9 + 2;
  if (v9 + 2 >= a3) {
    goto LABEL_13;
  }
  uint64_t v14 = v11 + 2;
  uint64_t v13 = *v11;
  if (!*v11) {
    goto LABEL_20;
  }
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = *(void *)(v13 + 96);
    uint64_t v17 = *(void *)(v15 + 96);
    BOOL v18 = v16 < v17;
    if (v16 == v17)
    {
      uint64_t v19 = *(void *)(v13 + 104);
      uint64_t v20 = *(void *)(v15 + 104);
      BOOL v18 = v19 < v20;
      if (v19 == v20)
      {
        if (*(_DWORD *)(v13 + 112) >= *(_DWORD *)(v15 + 112)) {
          goto LABEL_13;
        }
LABEL_12:
        v11 += 2;
        uint64_t v10 = v12;
        goto LABEL_13;
      }
    }
    if (v18) {
      goto LABEL_12;
    }
LABEL_13:
    uint64_t v13 = *v11;
    if (!*v11) {
      goto LABEL_20;
    }
  }
  uint64_t v21 = *a4;
  if (!*a4)
  {
    uint64_t v27 = 0;
    goto LABEL_22;
  }
  uint64_t v22 = *(void *)(v13 + 96);
  uint64_t v23 = *(void *)(v21 + 96);
  BOOL v24 = v22 < v23;
  if (v22 == v23 && (v25 = *(void *)(v13 + 104), v26 = *(void *)(v21 + 104), BOOL v24 = v25 < v26, v25 == v26))
  {
    if (*(_DWORD *)(v13 + 112) < *(_DWORD *)(v21 + 112)) {
      return;
    }
  }
  else if (v24)
  {
    return;
  }
LABEL_20:
  uint64_t v27 = *a4;
LABEL_22:
  uint64_t v28 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v29 = *v11;
  while (1)
  {
    uint64_t v30 = v11;
    uint64_t v31 = v11[1];
    uint64_t *v30 = 0;
    v30[1] = 0;
    uint64_t v32 = (std::__shared_weak_count *)a4[1];
    *a4 = v29;
    a4[1] = v31;
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v7 < v10) {
      break;
    }
    uint64_t v33 = 2 * v10;
    uint64_t v10 = (2 * v10) | 1;
    unint64_t v11 = (uint64_t *)(a1 + 16 * v10);
    uint64_t v34 = v33 + 2;
    if (v33 + 2 >= a3) {
      goto LABEL_36;
    }
    uint64_t v29 = 0;
    uint64_t v36 = v11 + 2;
    uint64_t v35 = *v11;
    a4 = v30;
    if (*v11)
    {
      uint64_t v37 = *v36;
      if (*v36)
      {
        uint64_t v38 = *(void *)(v35 + 96);
        uint64_t v39 = *(void *)(v37 + 96);
        BOOL v40 = v38 < v39;
        if (v38 == v39 && (v41 = *(void *)(v35 + 104), v42 = *(void *)(v37 + 104), BOOL v40 = v41 < v42, v41 == v42))
        {
          if (*(_DWORD *)(v35 + 112) >= *(_DWORD *)(v37 + 112)) {
            goto LABEL_36;
          }
        }
        else if (!v40)
        {
          goto LABEL_36;
        }
        v11 += 2;
        uint64_t v10 = v34;
LABEL_36:
        uint64_t v29 = 0;
        uint64_t v35 = *v11;
        a4 = v30;
        if (*v11) {
          goto LABEL_37;
        }
      }
      else
      {
LABEL_37:
        uint64_t v29 = v35;
        a4 = v30;
        if (v27)
        {
          uint64_t v43 = *(void *)(v35 + 96);
          uint64_t v44 = *(void *)(v27 + 96);
          BOOL v45 = v43 < v44;
          if (v43 == v44 && (uint64_t v46 = *(void *)(v35 + 104), v47 = *(void *)(v27 + 104), v45 = v46 < v47, v46 == v47))
          {
            uint64_t v29 = v35;
            a4 = v30;
            if (*(_DWORD *)(v35 + 112) < *(_DWORD *)(v27 + 112)) {
              break;
            }
          }
          else
          {
            uint64_t v29 = v35;
            a4 = v30;
            if (v45) {
              break;
            }
          }
        }
      }
    }
  }
  uint64_t v48 = (std::__shared_weak_count *)v30[1];
  uint64_t *v30 = v27;
  v30[1] = v28;
  if (v48)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range,std::shared_ptr<NL::Entity> *>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(a1, a3, a4);
    uint64_t v10 = v9;
    if (v9 == (void *)(a2 - 16))
    {
      uint64_t v15 = (std::__shared_weak_count *)v9[1];
      *uint64_t v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      uint64_t v12 = (std::__shared_weak_count *)v9[1];
      *(_OWORD *)uint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>((uint64_t)a1, v13, a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_1A4370F40(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 2;
  if (a3 < 2) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v6 = v5 >> 1;
  do
  {
    uint64_t v7 = &a1[2 * v4 + 2];
    uint64_t v8 = 2 * v4;
    uint64_t v4 = (2 * v4) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      uint64_t v10 = v7 + 2;
      uint64_t v11 = *v7;
      if (*v7)
      {
        uint64_t v12 = *v10;
        if (*v10)
        {
          uint64_t v13 = *(void *)(v11 + 96);
          uint64_t v14 = *(void *)(v12 + 96);
          BOOL v15 = v13 < v14;
          if (v13 == v14 && (v16 = *(void *)(v11 + 104), v17 = *(void *)(v12 + 104), BOOL v15 = v16 < v17, v16 == v17))
          {
            if (*(_DWORD *)(v11 + 112) < *(_DWORD *)(v12 + 112)) {
              goto LABEL_13;
            }
          }
          else if (v15)
          {
LABEL_13:
            v7 += 2;
            uint64_t v4 = v9;
          }
        }
      }
    }
    long long v18 = *(_OWORD *)v7;
    *uint64_t v7 = 0;
    v7[1] = 0;
    uint64_t v19 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v18;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    a1 = v7;
  }
  while (v4 <= v6);
  return v7;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,entity_greater_than_range &,std::shared_ptr<NL::Entity> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (void *)(a1 + 16 * (v4 >> 1));
    uint64_t v8 = *v7;
    if (*v7)
    {
      uint64_t v9 = (void *)(a2 - 16);
      uint64_t v10 = *(void *)(a2 - 16);
      if (v10)
      {
        uint64_t v11 = *(void *)(v8 + 96);
        uint64_t v12 = *(void *)(v10 + 96);
        BOOL v13 = v11 < v12;
        if (v11 == v12 && (v14 = *(void *)(v8 + 104), uint64_t v15 = *(void *)(v10 + 104), v13 = v14 < v15, v14 == v15))
        {
          if (*(_DWORD *)(v8 + 112) >= *(_DWORD *)(v10 + 112)) {
            return;
          }
        }
        else if (!v13)
        {
          return;
        }
        uint64_t v16 = *(void *)(a2 - 8);
        *uint64_t v9 = 0;
        *(void *)(a2 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
        uint64_t v17 = *v7;
        while (1)
        {
          long long v18 = v7;
          uint64_t v19 = v7[1];
          *long long v18 = 0;
          v18[1] = 0;
          uint64_t v20 = (std::__shared_weak_count *)v9[1];
          *uint64_t v9 = v17;
          v9[1] = v19;
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          if (!v6) {
            break;
          }
          unint64_t v6 = (v6 - 1) >> 1;
          uint64_t v7 = (void *)(a1 + 16 * v6);
          uint64_t v17 = *v7;
          if (!*v7) {
            break;
          }
          uint64_t v21 = *(void *)(v17 + 96);
          uint64_t v22 = *(void *)(v10 + 96);
          BOOL v23 = v21 < v22;
          if (v21 == v22 && (v24 = *(void *)(v17 + 104), v25 = *(void *)(v10 + 104), BOOL v23 = v24 < v25, v24 == v25))
          {
            uint64_t v9 = v18;
            if (*(_DWORD *)(v17 + 112) >= *(_DWORD *)(v10 + 112)) {
              break;
            }
          }
          else
          {
            uint64_t v9 = v18;
            if (!v23) {
              break;
            }
          }
        }
        uint64_t v26 = (std::__shared_weak_count *)v18[1];
        *long long v18 = v10;
        v18[1] = v16;
        if (v26)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
      }
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *,false>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_1A4371564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(void *a1, void *a2)
{
  if (a1 == a2) {
    return;
  }
  long long v2 = a2;
  long long v3 = a1 + 3;
  if (a1 + 3 == a2) {
    return;
  }
  uint64_t v4 = 0;
  char v5 = a1;
  do
  {
    char v6 = v3;
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v37, (const void *)v5[3], v5[4], (uint64_t)(v5[4] - v5[3]) >> 4);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v34, (const void *)*v5, v5[1], (uint64_t)(v5[1] - *v5) >> 4);
    uint64_t v8 = v37;
    uint64_t v7 = v38;
    uint64_t v9 = v34;
    uint64_t v10 = v35;
    if (!v34)
    {
      unint64_t v11 = v37;
      if (!v37) {
        goto LABEL_7;
      }
LABEL_6:
      uint64_t v38 = v11;
      operator delete(v11);
      goto LABEL_7;
    }
    uint64_t v35 = v34;
    operator delete(v34);
    unint64_t v11 = v37;
    if (v37) {
      goto LABEL_6;
    }
LABEL_7:
    if (v7 - v8 <= (unint64_t)(v10 - v9)) {
      goto LABEL_25;
    }
    uint64_t v12 = (const void *)v5[3];
    long long v26 = *((_OWORD *)v5 + 2);
    *char v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    std::vector<CFRange>::__move_assign((uint64_t)v6, (__n128 *)v5);
    uint64_t v13 = a1;
    if (v5 == a1) {
      goto LABEL_22;
    }
    uint64_t v25 = v4;
    uint64_t v14 = v4;
    while (1)
    {
      BOOL v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v31, v12, v26, (uint64_t)(v26 - (void)v12) >> 4);
      unint64_t v15 = *(const void **)((char *)a1 + v14 - 24);
      uint64_t v16 = *(void *)((char *)a1 + v14 - 16);
      unint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v28, v15, v16, (v16 - (uint64_t)v15) >> 4);
      uint64_t v18 = v31;
      uint64_t v17 = v32;
      unint64_t v20 = v28;
      uint64_t v19 = v29;
      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
      unint64_t v21 = v17 - v18;
      unint64_t v22 = v19 - v20;
      if (v31)
      {
        uint64_t v32 = v31;
        operator delete(v31);
        if (v21 <= v22)
        {
          uint64_t v13 = v5;
          goto LABEL_21;
        }
        goto LABEL_16;
      }
      if (v21 <= v22) {
        break;
      }
LABEL_16:
      v5 -= 3;
      std::vector<CFRange>::__move_assign((uint64_t)a1 + v14, (__n128 *)((char *)a1 + v14 - 24));
      v14 -= 24;
      if (!v14)
      {
        uint64_t v13 = a1;
        goto LABEL_21;
      }
    }
    uint64_t v13 = (void *)((char *)a1 + v14);
LABEL_21:
    long long v2 = a2;
    uint64_t v4 = v25;
LABEL_22:
    BOOL v23 = (void *)*v13;
    if (*v13)
    {
      v13[1] = v23;
      operator delete(v23);
      void *v13 = 0;
      v13[1] = 0;
      uint64_t v13[2] = 0;
    }
    void *v13 = v12;
    *(_OWORD *)(v13 + 1) = v26;
LABEL_25:
    long long v3 = v6 + 3;
    v4 += 24;
    char v5 = v6;
  }
  while (v6 + 3 != v2);
}

void sub_1A43717E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(void *)(v22 - 104) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = a1 + 24;
    while (1)
    {
      if (v4 == a2) {
        return;
      }
      uint64_t v5 = v4;
      std::string __p = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)(v3 + 24), *(void *)(v3 + 32), (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 4);
      BOOL v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v31, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 4);
      uint64_t v7 = __p;
      char v6 = v35;
      uint64_t v8 = v31;
      uint64_t v9 = v32;
      if (!v31) {
        break;
      }
      uint64_t v32 = v31;
      operator delete(v31);
      uint64_t v10 = __p;
      if (__p) {
        goto LABEL_6;
      }
LABEL_7:
      if (v6 - v7 <= (unint64_t)(v9 - v8)) {
        goto LABEL_19;
      }
      unint64_t v11 = *(const void **)v5;
      long long v12 = *(_OWORD *)(v3 + 32);
      *(void *)(v5 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)uint64_t v5 = 0;
      long long v24 = v12;
      uint64_t v13 = v12;
      unint64_t v14 = (uint64_t)(v12 - (void)v11) >> 4;
      uint64_t v15 = v5;
      do
      {
        uint64_t v16 = v15 - 24;
        std::vector<CFRange>::__move_assign(v15, (__n128 *)(v15 - 24));
        unint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v28, v11, v13, v14);
        uint64_t v25 = 0;
        long long v26 = 0;
        uint64_t v27 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v25, *(const void **)(v15 - 48), *(void *)(v15 - 40), (uint64_t)(*(void *)(v15 - 40) - *(void *)(v15 - 48)) >> 4);
        uint64_t v18 = v28;
        uint64_t v17 = v29;
        uint64_t v19 = v25;
        unint64_t v20 = v26;
        if (v25)
        {
          long long v26 = v25;
          operator delete(v25);
          unint64_t v21 = v28;
          if (!v28) {
            goto LABEL_12;
          }
LABEL_11:
          uint64_t v29 = v21;
          operator delete(v21);
          goto LABEL_12;
        }
        unint64_t v21 = v28;
        if (v28) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v22 = v20 - v19;
        uint64_t v15 = v16;
      }
      while (v17 - v18 > v22);
      BOOL v23 = *(void **)v16;
      if (*(void *)v16)
      {
        *(void *)(v16 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v23;
        operator delete(v23);
        *(void *)uint64_t v16 = 0;
        *(void *)(v16 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
        *(void *)(v16 + 16) = 0;
      }
      *(void *)uint64_t v16 = v11;
      *(_OWORD *)(v16 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v24;
LABEL_19:
      uint64_t v4 = v5 + 24;
      uint64_t v3 = v5;
    }
    uint64_t v10 = __p;
    if (!__p) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v35 = v10;
    operator delete(v10);
    goto LABEL_7;
  }
}

void sub_1A43719F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v78, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  uint64_t v75 = 0;
  CFIndex v76 = 0;
  uint64_t v77 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v75, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  uint64_t v7 = v78;
  char v6 = v79;
  uint64_t v8 = v75;
  uint64_t v9 = v76;
  if (v75)
  {
    CFIndex v76 = v75;
    operator delete(v75);
  }
  unint64_t v10 = v6 - v7;
  unint64_t v11 = v9 - v8;
  if (v78)
  {
    uint64_t v79 = v78;
    operator delete(v78);
  }
  if (v10 <= v11)
  {
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v72, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    uint64_t v69 = 0;
    long long v70 = 0;
    uint64_t v71 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v69, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    uint64_t v17 = v72;
    uint64_t v16 = v73;
    uint64_t v18 = v69;
    uint64_t v19 = v70;
    if (v69)
    {
      long long v70 = v69;
      operator delete(v69);
    }
    unint64_t v33 = v16 - v17;
    unint64_t v34 = v19 - v18;
    if (v72)
    {
      uint64_t v73 = v72;
      operator delete(v72);
    }
    if (v33 <= v34) {
      return 0;
    }
    uint64_t v35 = *(const void **)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v35;
    uint64_t v36 = *(void *)(a2 + 8);
    *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a3 + 8);
    *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v36;
    uint64_t v25 = (uint64_t *)(a2 + 16);
    uint64_t v37 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = v37;
    CFIndex v67 = 0;
    uint64_t v68 = 0;
    CFIndex v66 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v66, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    unint64_t v63 = 0;
    unint64_t v64 = 0;
    uint64_t v65 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v63, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
    uint64_t v39 = v66;
    uint64_t v38 = v67;
    uint64_t v40 = v63;
    uint64_t v41 = v64;
    if (v63)
    {
      unint64_t v64 = v63;
      operator delete(v63);
    }
    unint64_t v46 = v38 - v39;
    unint64_t v47 = v41 - v40;
    if (v66)
    {
      CFIndex v67 = v66;
      operator delete(v66);
    }
    if (v46 > v47)
    {
      uint64_t v48 = *(const void **)a1;
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = v48;
      uint64_t v49 = *(void *)(a1 + 8);
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v49;
      BOOL v23 = (uint64_t *)(a1 + 16);
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v60 = 0;
    unint64_t v61 = 0;
    uint64_t v62 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v60, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    unint64_t v57 = 0;
    unint64_t v58 = 0;
    uint64_t v59 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v57, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    uint64_t v13 = v60;
    long long v12 = v61;
    unint64_t v14 = v57;
    uint64_t v15 = v58;
    if (v57)
    {
      unint64_t v58 = v57;
      operator delete(v57);
    }
    unint64_t v20 = v12 - v13;
    unint64_t v21 = v15 - v14;
    if (v60)
    {
      unint64_t v61 = v60;
      operator delete(v60);
    }
    BOOL v23 = (uint64_t *)(a1 + 16);
    unint64_t v22 = *(const void **)a1;
    if (v20 > v21)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v22;
      uint64_t v24 = *(void *)(a1 + 8);
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v24;
      uint64_t v25 = (uint64_t *)(a3 + 16);
      uint64_t result = 1;
LABEL_31:
      uint64_t v50 = *v23;
      *BOOL v23 = *v25;
      *uint64_t v25 = v50;
      return result;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v22;
    uint64_t v27 = *(void *)(a1 + 8);
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v27;
    BOOL v23 = (uint64_t *)(a2 + 16);
    uint64_t v28 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = v28;
    CFStringRef v55 = 0;
    uint64_t v56 = 0;
    long long v54 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v54, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    long long v51 = 0;
    CFStringRef v52 = 0;
    uint64_t v53 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    uint64_t v30 = v54;
    uint64_t v29 = v55;
    BOOL v31 = v51;
    uint64_t v32 = v52;
    if (v51)
    {
      CFStringRef v52 = v51;
      operator delete(v51);
    }
    unint64_t v42 = v29 - v30;
    unint64_t v43 = v32 - v31;
    if (v54)
    {
      CFStringRef v55 = v54;
      operator delete(v54);
    }
    if (v42 > v43)
    {
      uint64_t v44 = *(const void **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v44;
      uint64_t v45 = *(void *)(a2 + 8);
      *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v45;
      uint64_t v25 = (uint64_t *)(a3 + 16);
LABEL_30:
      uint64_t result = 2;
      goto LABEL_31;
    }
  }
  return 1;
}

void sub_1A4371DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,ranges_greater_than_range &>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(const void **)a1;
  long long v5 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v82 = 0;
  uint64_t v83 = 0;
  unint64_t v81 = 0;
  long long v47 = v5;
  uint64_t v6 = v5;
  unint64_t v7 = (uint64_t)(v5 - (void)v4) >> 4;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v81, v4, v5, v7);
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v78, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
  uint64_t v9 = v81;
  uint64_t v8 = v82;
  unint64_t v10 = v78;
  unint64_t v11 = v79;
  if (v78)
  {
    uint64_t v79 = v78;
    operator delete(v78);
  }
  unint64_t v12 = v8 - v9;
  unint64_t v13 = v11 - v10;
  if (v81)
  {
    long long v82 = v81;
    operator delete(v81);
  }
  if (v12 > v13)
  {
    unint64_t i = a1;
    while (1)
    {
      uint64_t v75 = 0;
      CFIndex v76 = 0;
      uint64_t v77 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v75, v4, v6, v7);
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v72, *(const void **)(i + 24), *(void *)(i + 32), (uint64_t)(*(void *)(i + 32) - *(void *)(i + 24)) >> 4);
      uint64_t v16 = v75;
      uint64_t v15 = v76;
      uint64_t v17 = v72;
      uint64_t v18 = v73;
      if (!v72) {
        break;
      }
      uint64_t v73 = v72;
      operator delete(v72);
      uint64_t v19 = v75;
      if (v75) {
        goto LABEL_9;
      }
LABEL_10:
      i += 24;
      if (v15 - v16 > (unint64_t)(v18 - v17)) {
        goto LABEL_22;
      }
    }
    uint64_t v19 = v75;
    if (!v75) {
      goto LABEL_10;
    }
LABEL_9:
    CFIndex v76 = v19;
    operator delete(v19);
    goto LABEL_10;
  }
  for (unint64_t i = a1 + 24; i < (unint64_t)a2; i += 24)
  {
    uint64_t v69 = 0;
    long long v70 = 0;
    uint64_t v71 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v69, v4, v6, v7);
    CFIndex v66 = 0;
    CFIndex v67 = 0;
    uint64_t v68 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v66, *(const void **)i, *(void *)(i + 8), (uint64_t)(*(void *)(i + 8) - *(void *)i) >> 4);
    unint64_t v21 = v69;
    unint64_t v20 = v70;
    unint64_t v22 = v66;
    BOOL v23 = v67;
    if (v66)
    {
      CFIndex v67 = v66;
      operator delete(v66);
    }
    unint64_t v24 = v20 - v21;
    unint64_t v25 = v23 - v22;
    if (v69)
    {
      long long v70 = v69;
      operator delete(v69);
    }
    if (v24 > v25) {
      break;
    }
  }
LABEL_22:
  if (i < (unint64_t)a2)
  {
    while (1)
    {
      std::string __p = 0;
      unint64_t v64 = 0;
      uint64_t v65 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, v4, v6, v7);
      uint64_t v60 = 0;
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v60, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
      uint64_t v27 = __p;
      long long v26 = v64;
      uint64_t v28 = v60;
      uint64_t v29 = v61;
      if (!v60) {
        break;
      }
      unint64_t v61 = v60;
      operator delete(v60);
      uint64_t v30 = __p;
      if (__p) {
        goto LABEL_25;
      }
LABEL_26:
      a2 -= 3;
      if (v26 - v27 <= (unint64_t)(v29 - v28)) {
        goto LABEL_44;
      }
    }
    uint64_t v30 = __p;
    if (!__p) {
      goto LABEL_26;
    }
LABEL_25:
    unint64_t v64 = v30;
    operator delete(v30);
    goto LABEL_26;
  }
LABEL_44:
  if (i < (unint64_t)a2)
  {
    BOOL v31 = *(const void **)i;
    *(void *)unint64_t i = *a2;
    *a2 = v31;
    uint64_t v32 = *(void *)(i + 8);
    *(void *)(i + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a2[1];
    a2[1] = v32;
    uint64_t v33 = *(void *)(i + 16);
    *(void *)(i + 16) = a2[2];
    a2[2] = v33;
    while (1)
    {
      unint64_t v57 = 0;
      unint64_t v58 = 0;
      uint64_t v59 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v57, v4, v6, v7);
      long long v54 = 0;
      CFStringRef v55 = 0;
      uint64_t v56 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v54, *(const void **)(i + 24), *(void *)(i + 32), (uint64_t)(*(void *)(i + 32) - *(void *)(i + 24)) >> 4);
      uint64_t v35 = v57;
      unint64_t v34 = v58;
      uint64_t v36 = v54;
      uint64_t v37 = v55;
      if (!v54) {
        break;
      }
      CFStringRef v55 = v54;
      operator delete(v54);
      uint64_t v38 = v57;
      if (v57) {
        goto LABEL_33;
      }
LABEL_34:
      i += 24;
      if (v34 - v35 > (unint64_t)(v37 - v36))
      {
        while (1)
        {
          long long v51 = 0;
          CFStringRef v52 = 0;
          uint64_t v53 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, v4, v6, v7);
          uint64_t v48 = 0;
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v48, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
          uint64_t v41 = v51;
          uint64_t v40 = v52;
          unint64_t v42 = v48;
          unint64_t v43 = v49;
          if (!v48) {
            break;
          }
          uint64_t v49 = v48;
          operator delete(v48);
          uint64_t v39 = v51;
          if (v51) {
            goto LABEL_42;
          }
LABEL_43:
          a2 -= 3;
          if (v40 - v41 <= (unint64_t)(v43 - v42)) {
            goto LABEL_44;
          }
        }
        uint64_t v39 = v51;
        if (!v51) {
          goto LABEL_43;
        }
LABEL_42:
        CFStringRef v52 = v39;
        operator delete(v39);
        goto LABEL_43;
      }
    }
    uint64_t v38 = v57;
    if (!v57) {
      goto LABEL_34;
    }
LABEL_33:
    unint64_t v58 = v38;
    operator delete(v38);
    goto LABEL_34;
  }
  uint64_t v44 = (void **)(i - 24);
  if (i - 24 != a1) {
    std::vector<CFRange>::__move_assign(a1, (__n128 *)(i - 24));
  }
  uint64_t v45 = *v44;
  if (*v44)
  {
    *(void *)(i - 16) = v45;
    operator delete(v45);
    *uint64_t v44 = 0;
    *(void *)(i - 16) = 0;
    *(void *)(i - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  }
  *(void *)(i - 24) = v4;
  *(_OWORD *)(i - 16) = v47;
  return i;
}

void sub_1A4372254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v37 = *(void **)(v35 - 112);
  if (v37)
  {
    *(void *)(v35 - 104) = v37;
    operator delete(v37);
  }
  if (v34) {
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,ranges_greater_than_range &>(uint64_t a1, void *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = *(const void **)a1;
  long long v5 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v52 = v5;
  uint64_t v6 = v5;
  unint64_t v7 = (uint64_t)(v5 - (void)v4) >> 4;
  uint64_t v54 = a1;
  do
  {
    long long v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v82, *(const void **)(a1 + v3 + 24), *(void *)(a1 + v3 + 32), (uint64_t)(*(void *)(a1 + v3 + 32) - *(void *)(a1 + v3 + 24)) >> 4);
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v79, v4, v6, v7);
    uint64_t v8 = v82;
    uint64_t v9 = v83;
    unint64_t v10 = v79;
    unint64_t v11 = v80;
    if (v79)
    {
      uint64_t v80 = v79;
      operator delete(v79);
      unint64_t v12 = v82;
      if (!v82) {
        goto LABEL_5;
      }
LABEL_4:
      uint64_t v83 = v12;
      operator delete(v12);
      goto LABEL_5;
    }
    unint64_t v12 = v82;
    if (v82) {
      goto LABEL_4;
    }
LABEL_5:
    v3 += 24;
    a1 = v54;
  }
  while (v9 - v8 > (unint64_t)(v11 - v10));
  unint64_t v13 = (void *)(v54 + v3);
  uint64_t v53 = (void *)(v54 + v3);
  if (v3 != 24)
  {
    while (1)
    {
      unint64_t v14 = (const void *)*(a2 - 3);
      uint64_t v15 = *(a2 - 2);
      a2 -= 3;
      std::string __p = 0;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, v14, v15, (v15 - (uint64_t)v14) >> 4);
      CFIndex v67 = 0;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v67, v4, v6, v7);
      uint64_t v17 = __p;
      uint64_t v16 = v71;
      uint64_t v18 = v67;
      uint64_t v19 = v68;
      if (!v67) {
        break;
      }
      uint64_t v68 = v67;
      operator delete(v67);
      unint64_t v20 = __p;
      if (__p) {
        goto LABEL_12;
      }
LABEL_13:
      if (v16 - v17 > (unint64_t)(v19 - v18)) {
        goto LABEL_29;
      }
    }
    unint64_t v20 = __p;
    if (!__p) {
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v71 = v20;
    operator delete(v20);
    goto LABEL_13;
  }
  while (v13 < a2)
  {
    while (1)
    {
      CFIndex v76 = 0;
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      unint64_t v21 = (const void *)*(a2 - 3);
      uint64_t v22 = *(a2 - 2);
      a2 -= 3;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v76, v21, v22, (v22 - (uint64_t)v21) >> 4);
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v73, v4, v6, v7);
      unint64_t v24 = v76;
      BOOL v23 = v77;
      unint64_t v25 = v73;
      long long v26 = v74;
      if (v73)
      {
        uint64_t v74 = v73;
        operator delete(v73);
      }
      unint64_t v27 = v23 - v24;
      unint64_t v28 = v26 - v25;
      if (v76) {
        break;
      }
      if (v27 > v28 || v53 >= a2) {
        goto LABEL_29;
      }
    }
    uint64_t v77 = v76;
    operator delete(v76);
    if (v27 > v28) {
      break;
    }
    unint64_t v13 = v53;
  }
LABEL_29:
  uint64_t v30 = v53;
  if (v53 >= a2) {
    goto LABEL_46;
  }
  BOOL v31 = a2;
  while (2)
  {
    uint64_t v32 = *v30;
    void *v30 = *v31;
    *BOOL v31 = v32;
    uint64_t v33 = v30[1];
    v30[1] = v31[1];
    v31[1] = v33;
    uint64_t v34 = v30[2];
    v30[2] = v31[2];
    v31[2] = v34;
    while (2)
    {
      unint64_t v64 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      uint64_t v35 = (const void *)v30[3];
      uint64_t v36 = v30[4];
      v30 += 3;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v64, v35, v36, (v36 - (uint64_t)v35) >> 4);
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v61, v4, v6, v7);
      uint64_t v37 = v64;
      uint64_t v38 = v65;
      uint64_t v40 = v61;
      uint64_t v39 = v62;
      if (v61)
      {
        uint64_t v62 = v61;
        operator delete(v61);
        uint64_t v41 = v64;
        if (v64) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v41 = v64;
        if (v64)
        {
LABEL_34:
          uint64_t v65 = v41;
          operator delete(v41);
        }
      }
      if (v38 - v37 > (unint64_t)(v39 - v40)) {
        continue;
      }
      break;
    }
    while (2)
    {
      unint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      unint64_t v43 = (const void *)*(v31 - 3);
      uint64_t v44 = *(v31 - 2);
      v31 -= 3;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v58, v43, v44, (v44 - (uint64_t)v43) >> 4);
      CFStringRef v55 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v55, v4, v6, v7);
      uint64_t v45 = v58;
      unint64_t v46 = v59;
      uint64_t v48 = v55;
      long long v47 = v56;
      if (v55)
      {
        uint64_t v56 = v55;
        operator delete(v55);
        unint64_t v42 = v58;
        if (v58)
        {
LABEL_43:
          uint64_t v59 = v42;
          operator delete(v42);
        }
      }
      else
      {
        unint64_t v42 = v58;
        if (v58) {
          goto LABEL_43;
        }
      }
      if (v46 - v45 <= (unint64_t)(v47 - v48)) {
        continue;
      }
      break;
    }
    if (v30 < v31) {
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v49 = (void **)(v30 - 3);
  if (v30 - 3 != (void *)v54) {
    std::vector<CFRange>::__move_assign(v54, (__n128 *)(v30 - 3));
  }
  uint64_t v50 = *v49;
  if (*v49)
  {
    *(v30 - 2) = v50;
    operator delete(v50);
    *uint64_t v49 = 0;
    *(v30 - 2) = 0;
    *(v30 - 1) = 0;
  }
  *(v30 - 3) = v4;
  *((_OWORD *)v30 - 1) = v52;
  return v30 - 3;
}

void sub_1A43726B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (v30) {
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v3)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v53, *(const void **)(a2 - 24), *(void *)(a2 - 16), (uint64_t)(*(void *)(a2 - 16) - *(void *)(a2 - 24)) >> 4);
      uint64_t v50 = 0;
      long long v51 = 0;
      uint64_t v52 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v50, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
      uint64_t v6 = v53;
      long long v5 = v54;
      unint64_t v7 = v50;
      uint64_t v8 = v51;
      if (v50)
      {
        long long v51 = v50;
        operator delete(v50);
      }
      unint64_t v27 = v5 - v6;
      if (v53)
      {
        uint64_t v54 = v53;
        operator delete(v53);
      }
      if (v27 > v8 - v7)
      {
        unint64_t v28 = *(const void **)a1;
        *(void *)a1 = *(void *)(v2 - 24);
        *(void *)(v2 - 24) = v28;
        uint64_t v29 = *(void *)(a1 + 8);
        *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(v2 - 16);
        *(void *)(v2 - 16) = v29;
        uint64_t v30 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(v2 - 8);
        *(void *)(v2 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v30;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v9 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a1 + 24, a1 + 48);
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == v2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v34 = 0;
      uint64_t v31 = v2;
      break;
  }
  while (2)
  {
    std::string __p = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 4);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v44, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 4);
    unint64_t v13 = __p;
    unint64_t v12 = v48;
    unint64_t v14 = v44;
    uint64_t v15 = v45;
    if (!v44)
    {
      uint64_t v16 = __p;
      if (!__p) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    uint64_t v45 = v44;
    operator delete(v44);
    uint64_t v16 = __p;
    if (__p)
    {
LABEL_9:
      uint64_t v48 = v16;
      operator delete(v16);
    }
LABEL_10:
    if (v12 - v13 <= (unint64_t)(v15 - v14)) {
      goto LABEL_28;
    }
    uint64_t v36 = *(const void **)v10;
    long long v35 = *(_OWORD *)(v10 + 8);
    *(void *)(v10 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)uint64_t v10 = 0;
    std::vector<CFRange>::__move_assign(v10, (__n128 *)v9);
    uint64_t v17 = a1;
    if (v9 == a1) {
      goto LABEL_25;
    }
    uint64_t v32 = v11;
    uint64_t v33 = v10;
    while (1)
    {
      uint64_t v41 = 0;
      unint64_t v42 = 0;
      uint64_t v43 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v41, v36, v35, (uint64_t)(v35 - (void)v36) >> 4);
      uint64_t v18 = *(const void **)(a1 + v11 + 24);
      uint64_t v19 = *(void *)(a1 + v11 + 32);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v38, v18, v19, (v19 - (uint64_t)v18) >> 4);
      unint64_t v21 = v41;
      unint64_t v20 = v42;
      BOOL v23 = v38;
      uint64_t v22 = v39;
      if (v38)
      {
        uint64_t v39 = v38;
        operator delete(v38);
      }
      unint64_t v24 = v20 - v21;
      unint64_t v25 = v22 - v23;
      if (v41)
      {
        unint64_t v42 = v41;
        operator delete(v41);
        if (v24 <= v25)
        {
          uint64_t v17 = v9;
          goto LABEL_24;
        }
        goto LABEL_19;
      }
      if (v24 <= v25) {
        break;
      }
LABEL_19:
      v9 -= 24;
      std::vector<CFRange>::__move_assign(a1 + v11 + 48, (__n128 *)(a1 + v11 + 24));
      v11 -= 24;
      if (v11 == -48)
      {
        uint64_t v17 = a1;
        goto LABEL_24;
      }
    }
    uint64_t v17 = a1 + v11 + 48;
LABEL_24:
    uint64_t v2 = v31;
    uint64_t v11 = v32;
    uint64_t v10 = v33;
LABEL_25:
    long long v26 = *(void **)v17;
    if (*(void *)v17)
    {
      *(void *)(v17 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v26;
      operator delete(v26);
      *(void *)uint64_t v17 = 0;
      *(void *)(v17 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      *(void *)(v17 + 16) = 0;
    }
    *(void *)uint64_t v17 = v36;
    *(_OWORD *)(v17 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v35;
    if (++v34 != 8)
    {
LABEL_28:
      uint64_t v9 = v10;
      v11 += 24;
      v10 += 24;
      if (v10 == v2) {
        return 1;
      }
      continue;
    }
    return v10 + 24 == v2;
  }
}

void sub_1A4372B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __pa = *(void **)(v28 - 112);
  if (__pa)
  {
    *(void *)(v28 - 104) = __pa;
    operator delete(__pa);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a2, a3);
  long long v51 = 0;
  uint64_t v52 = 0;
  uint64_t v50 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v50, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
  long long v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v47, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
  uint64_t v9 = v50;
  uint64_t v8 = v51;
  uint64_t v10 = v47;
  uint64_t v11 = v48;
  if (v47)
  {
    uint64_t v48 = v47;
    operator delete(v47);
  }
  unint64_t v12 = v8 - v9;
  unint64_t v13 = v11 - v10;
  if (v50)
  {
    long long v51 = v50;
    operator delete(v50);
  }
  if (v12 > v13)
  {
    unint64_t v14 = *(const void **)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v14;
    uint64_t v15 = *(void *)(a3 + 8);
    *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v15;
    uint64_t v16 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v16;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v44 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v44, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    uint64_t v43 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v41, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    uint64_t v18 = v44;
    uint64_t v17 = v45;
    uint64_t v19 = v41;
    unint64_t v20 = v42;
    if (v41)
    {
      unint64_t v42 = v41;
      operator delete(v41);
    }
    unint64_t v21 = v17 - v18;
    unint64_t v22 = v20 - v19;
    if (v44)
    {
      uint64_t v45 = v44;
      operator delete(v44);
    }
    if (v21 > v22)
    {
      BOOL v23 = *(const void **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v23;
      uint64_t v24 = *(void *)(a2 + 8);
      *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v24;
      uint64_t v25 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v25;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v38 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v38, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
      long long v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v35, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
      unint64_t v27 = v38;
      long long v26 = v39;
      uint64_t v28 = v35;
      uint64_t v29 = v36;
      if (v35)
      {
        uint64_t v36 = v35;
        operator delete(v35);
      }
      unint64_t v30 = v26 - v27;
      unint64_t v31 = v29 - v28;
      if (v38)
      {
        uint64_t v39 = v38;
        operator delete(v38);
      }
      if (v30 > v31)
      {
        uint64_t v32 = *(const void **)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v32;
        uint64_t v33 = *(void *)(a1 + 8);
        *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v33;
        uint64_t v34 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v34;
      }
    }
  }
}

void sub_1A4372DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a2, a3, a4);
  CFIndex v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v67, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4);
  unint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v64, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
  uint64_t v11 = v67;
  uint64_t v10 = v68;
  unint64_t v12 = v64;
  unint64_t v13 = v65;
  if (v64)
  {
    uint64_t v65 = v64;
    operator delete(v64);
  }
  unint64_t v14 = v10 - v11;
  unint64_t v15 = v13 - v12;
  if (v67)
  {
    uint64_t v68 = v67;
    operator delete(v67);
  }
  if (v14 > v15)
  {
    uint64_t v16 = *(const void **)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v16;
    uint64_t v17 = *(void *)(a4 + 8);
    *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v17;
    uint64_t v18 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v18;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    unint64_t v61 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v61, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
    unint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v58, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    unint64_t v20 = v61;
    uint64_t v19 = v62;
    unint64_t v21 = v58;
    unint64_t v22 = v59;
    if (v58)
    {
      uint64_t v59 = v58;
      operator delete(v58);
    }
    unint64_t v23 = v19 - v20;
    unint64_t v24 = v22 - v21;
    if (v61)
    {
      uint64_t v62 = v61;
      operator delete(v61);
    }
    if (v23 > v24)
    {
      uint64_t v25 = *(const void **)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v25;
      uint64_t v26 = *(void *)(a3 + 8);
      *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v26;
      uint64_t v27 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v27;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v55 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v55, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v52, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
      uint64_t v29 = v55;
      uint64_t v28 = v56;
      unint64_t v30 = v52;
      unint64_t v31 = v53;
      if (v52)
      {
        uint64_t v53 = v52;
        operator delete(v52);
      }
      unint64_t v32 = v28 - v29;
      unint64_t v33 = v31 - v30;
      if (v55)
      {
        uint64_t v56 = v55;
        operator delete(v55);
      }
      if (v32 > v33)
      {
        uint64_t v34 = *(const void **)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v34;
        uint64_t v35 = *(void *)(a2 + 8);
        *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v35;
        uint64_t v36 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v36;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v49 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v49, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
        uint64_t v46 = 0;
        long long v47 = 0;
        uint64_t v48 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v46, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
        uint64_t v38 = v49;
        uint64_t v37 = v50;
        uint64_t v39 = v46;
        uint64_t v40 = v47;
        if (v46)
        {
          long long v47 = v46;
          operator delete(v46);
        }
        unint64_t v41 = v37 - v38;
        unint64_t v42 = v40 - v39;
        if (v49)
        {
          uint64_t v50 = v49;
          operator delete(v49);
        }
        if (v41 > v42)
        {
          uint64_t v43 = *(const void **)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v43;
          uint64_t v44 = *(void *)(a1 + 8);
          *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v44;
          uint64_t v45 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = v45;
        }
      }
    }
  }
}

void sub_1A4373120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<CFRange>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 24 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v26 = v8;
      uint64_t v14 = v6;
      while (1)
      {
        std::string __p = 0;
        unint64_t v31 = 0;
        uint64_t v32 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 4);
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v27, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
        uint64_t v16 = __p;
        unint64_t v15 = v31;
        uint64_t v17 = v27;
        uint64_t v18 = v28;
        if (!v27) {
          break;
        }
        uint64_t v28 = v27;
        operator delete(v27);
        uint64_t v19 = __p;
        if (__p) {
          goto LABEL_9;
        }
LABEL_10:
        if (v15 - v16 > (unint64_t)(v18 - v17))
        {
          unint64_t v20 = *(const void **)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v20;
          uint64_t v21 = *(void *)(v14 + 8);
          *(void *)(v14 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a1 + 8);
          *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v21;
          uint64_t v22 = *(void *)(v14 + 16);
          *(void *)(v14 + 16) = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v22;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(a1, a4, v9, a1);
        }
        v14 += 24;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          uint64_t v8 = v26;
          goto LABEL_16;
        }
      }
      uint64_t v19 = __p;
      if (!__p) {
        goto LABEL_10;
      }
LABEL_9:
      unint64_t v31 = v19;
      operator delete(v19);
      goto LABEL_10;
    }
LABEL_16:
    if (v8 >= 25)
    {
      unint64_t v23 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range,std::vector<CFRange> *>((uint64_t *)a1, v6, a4, v23);
        v6 -= 24;
      }
      while (v23-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1A43733B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3)))
    {
      uint64_t v7 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
      uint64_t v8 = a1 + 24 * v7;
      uint64_t v9 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
      unint64_t v47 = v4 >> 1;
      if (v9 < a3)
      {
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v73, *(const void **)v8, *(void *)(a1 + 24 * v7 + 8), (uint64_t)(*(void *)(a1 + 24 * v7 + 8) - *(void *)v8) >> 4);
        unint64_t v10 = *(const void **)(v8 + 24);
        uint64_t v11 = *(void *)(v8 + 32);
        long long v70 = 0;
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v70, v10, v11, (v11 - (uint64_t)v10) >> 4);
        uint64_t v13 = v73;
        uint64_t v12 = v74;
        uint64_t v14 = v70;
        unint64_t v15 = v71;
        if (v70)
        {
          uint64_t v71 = v70;
          operator delete(v70);
        }
        unint64_t v16 = v15 - v14;
        if (v73)
        {
          uint64_t v74 = v73;
          operator delete(v73);
        }
        if (v12 - v13 > v16)
        {
          v8 += 24;
          uint64_t v7 = v9;
        }
      }
      CFIndex v67 = 0;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v67, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 4);
      unint64_t v64 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v64, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 4);
      uint64_t v19 = v67;
      uint64_t v18 = v68;
      unint64_t v20 = v64;
      uint64_t v21 = v65;
      if (v64)
      {
        uint64_t v65 = v64;
        operator delete(v64);
      }
      unint64_t v22 = v21 - v20;
      if (v67)
      {
        uint64_t v68 = v67;
        operator delete(v67);
      }
      BOOL v23 = v18 - v19 > v22;
      uint64_t v25 = v47;
      uint64_t v24 = a3;
      if (!v23)
      {
        uint64_t v26 = *(const void **)v5;
        long long v27 = *(_OWORD *)(v5 + 8);
        *(void *)(v5 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)uint64_t v5 = 0;
        __n128 v46 = (__n128)v27;
        uint64_t v50 = v27;
        uint64_t v51 = v26;
        unint64_t v49 = (uint64_t)(v27 - (void)v26) >> 4;
        while (1)
        {
          uint64_t v28 = v8;
          std::vector<CFRange>::__move_assign(v5, (__n128 *)v8);
          if (v25 < v7)
          {
LABEL_33:
            uint64_t v45 = *(void **)v28;
            if (*(void *)v28)
            {
              *(void *)(v28 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v45;
              operator delete(v45);
              *(void *)uint64_t v28 = 0;
              *(void *)(v28 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
              *(void *)(v28 + 16) = 0;
            }
            *(void *)uint64_t v28 = v51;
            __n128 result = v46;
            *(__n128 *)(v28 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v46;
            return result;
          }
          uint64_t v29 = (2 * v7) | 1;
          uint64_t v8 = a1 + 24 * v29;
          uint64_t v30 = 2 * v7 + 2;
          if (v30 >= v24)
          {
            uint64_t v7 = (2 * v7) | 1;
          }
          else
          {
            unint64_t v61 = 0;
            uint64_t v62 = 0;
            uint64_t v63 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v61, *(const void **)v8, *(void *)(a1 + 24 * v29 + 8), (uint64_t)(*(void *)(a1 + 24 * v29 + 8) - *(void *)v8) >> 4);
            unint64_t v31 = *(const void **)(v8 + 24);
            uint64_t v32 = *(void *)(v8 + 32);
            unint64_t v58 = 0;
            uint64_t v59 = 0;
            uint64_t v60 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v58, v31, v32, (v32 - (uint64_t)v31) >> 4);
            unint64_t v33 = v61;
            uint64_t v34 = v62;
            uint64_t v36 = v58;
            uint64_t v35 = v59;
            if (v58)
            {
              uint64_t v59 = v58;
              operator delete(v58);
            }
            unint64_t v37 = v34 - v33;
            unint64_t v38 = v35 - v36;
            if (v61)
            {
              uint64_t v62 = v61;
              operator delete(v61);
            }
            uint64_t v7 = v29;
            BOOL v23 = v37 > v38;
            uint64_t v25 = v47;
            uint64_t v24 = a3;
            if (v23)
            {
              v8 += 24;
              uint64_t v7 = v30;
            }
          }
          std::string __p = 0;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 4);
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v52, v51, v50, v49);
          uint64_t v40 = __p;
          uint64_t v39 = v56;
          unint64_t v41 = v52;
          unint64_t v42 = v53;
          if (!v52) {
            break;
          }
          uint64_t v53 = v52;
          operator delete(v52);
          uint64_t v43 = __p;
          if (__p) {
            goto LABEL_28;
          }
LABEL_29:
          unint64_t v44 = v42 - v41;
          uint64_t v5 = v28;
          if (v39 - v40 > v44) {
            goto LABEL_33;
          }
        }
        uint64_t v43 = __p;
        if (!__p) {
          goto LABEL_29;
        }
LABEL_28:
        uint64_t v56 = v43;
        operator delete(v43);
        goto LABEL_29;
      }
    }
  }
  return result;
}

void sub_1A4373734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  __pa = *(void **)(v27 - 112);
  if (__pa)
  {
    *uint64_t v26 = __pa;
    operator delete(__pa);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range,std::vector<CFRange> *>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    unint64_t v10 = (void *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>((uint64_t)a1, a3, a4);
    uint64_t v11 = v10;
    uint64_t v12 = (void **)(a2 - 24);
    if (v10 == (void *)(a2 - 24))
    {
      unint64_t v15 = (void *)*v10;
      if (*v11)
      {
        v11[1] = v15;
        operator delete(v15);
        *uint64_t v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
      }
      *uint64_t v11 = v7;
      v11[1] = v8;
      v11[2] = v9;
    }
    else
    {
      std::vector<CFRange>::__move_assign((uint64_t)v10, (__n128 *)(a2 - 24));
      uint64_t v13 = (uint64_t)(v11 + 3);
      uint64_t v14 = *v12;
      if (*v12)
      {
        *(void *)(a2 - 16) = v14;
        operator delete(v14);
        *uint64_t v12 = 0;
        *(void *)(a2 - 16) = 0;
        *(void *)(a2 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      }
      *(void *)(a2 - 24) = v7;
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v9;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>((uint64_t)a1, v13, a3, 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)a1) >> 3));
    }
  }
}

void sub_1A43738B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    uint64_t v9 = v5 + 1;
    a1 += 24 * (v5 + 1);
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < v3)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v24, *(const void **)a1, *(void *)(v8 + 24 * v9 + 8), (uint64_t)(*(void *)(v8 + 24 * v9 + 8) - *(void *)a1) >> 4);
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      uint64_t v23 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v21, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4);
      uint64_t v12 = v24;
      uint64_t v13 = v25;
      uint64_t v14 = v21;
      unint64_t v15 = v22;
      if (v21)
      {
        unint64_t v22 = v21;
        operator delete(v21);
      }
      unint64_t v16 = v13 - v12;
      unint64_t v17 = v15 - v14;
      if (v24)
      {
        uint64_t v25 = v24;
        operator delete(v24);
      }
      BOOL v18 = v16 > v17;
      uint64_t v3 = a3;
      if (v18)
      {
        a1 += 24;
        uint64_t v5 = v11;
      }
    }
    std::vector<CFRange>::__move_assign(v8, (__n128 *)a1);
  }
  while (v5 <= v7);
  return a1;
}

void sub_1A4373A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ranges_greater_than_range &,std::vector<CFRange> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = a1 + 24 * (v4 >> 1);
    unint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v42, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 4);
    uint64_t v9 = *(const void **)(a2 - 24);
    uint64_t v10 = *(void *)(a2 - 16);
    uint64_t v11 = (void *)(a2 - 24);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v39, v9, v10, (v10 - (uint64_t)v9) >> 4);
    uint64_t v14 = v42;
    uint64_t v13 = v43;
    unint64_t v15 = v39;
    unint64_t v16 = v40;
    if (v39)
    {
      uint64_t v40 = v39;
      operator delete(v39);
    }
    unint64_t v17 = v13 - v14;
    unint64_t v18 = v16 - v15;
    if (v42)
    {
      uint64_t v43 = v42;
      operator delete(v42);
    }
    if (v17 > v18)
    {
      uint64_t v19 = *(const void **)(a2 - 24);
      long long v20 = *(_OWORD *)(a2 - 16);
      *uint64_t v11 = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      __n128 v31 = (__n128)v20;
      uint64_t v21 = v20;
      uint64_t v32 = v19;
      unint64_t v22 = (uint64_t)(v20 - (void)v19) >> 4;
      while (1)
      {
        uint64_t v23 = (void *)v8;
        std::vector<CFRange>::__move_assign((uint64_t)v11, (__n128 *)v8);
        if (!v7)
        {
LABEL_16:
          uint64_t v30 = (void *)*v23;
          if (*v23)
          {
            v23[1] = v30;
            operator delete(v30);
            *uint64_t v23 = 0;
            v23[1] = 0;
            v23[2] = 0;
          }
          *uint64_t v23 = v32;
          __n128 result = v31;
          *(__n128 *)(v23 + 1) = v31;
          return result;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = a1 + 24 * v7;
        std::string __p = 0;
        unint64_t v37 = 0;
        uint64_t v38 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 4);
        unint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v33, v32, v21, v22);
        uint64_t v24 = __p;
        uint64_t v25 = v37;
        uint64_t v27 = v33;
        uint64_t v26 = v34;
        if (!v33) {
          break;
        }
        uint64_t v34 = v33;
        operator delete(v33);
        uint64_t v28 = __p;
        if (__p) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v29 = v26 - v27;
        uint64_t v11 = v23;
        if (v25 - v24 <= v29) {
          goto LABEL_16;
        }
      }
      uint64_t v28 = __p;
      if (!__p) {
        goto LABEL_12;
      }
LABEL_11:
      unint64_t v37 = v28;
      operator delete(v28);
      goto LABEL_12;
    }
  }
  return result;
}

void sub_1A4373BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void NLTextSlotParserDateTimeExtractor::NLTextSlotParserDateTimeExtractor(NLTextSlotParserDateTimeExtractor *this, const __CFLocale *a2)
{
  *(void *)this = MEMORY[0x1A625A380](*MEMORY[0x1E4F1CF80], a2);
  *((void *)this + 1) = DDScannerCreateWithLocale();
}

void NLTextSlotParserDateTimeExtractor::~NLTextSlotParserDateTimeExtractor(NLTextSlotParserDateTimeExtractor *this)
{
  uint64_t v2 = *(const void **)this;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 1);
  if (v3) {
    CFRelease(v3);
  }
}

void NLTextSlotParserDateTimeExtractor::getEventFixedDateTimeAndRange(const __CFTimeZone *a1@<X2>, uint64_t a2@<X8>)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v7 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Current);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v7)
  {
    CFDateRef v8 = v7;
    if (a1)
    {
      if (DDScannerScanString() && (CFArrayRef v9 = (const __CFArray *)DDScannerCopyResultsWithOptions()) != 0)
      {
        CFArrayRef v10 = v9;
        if (CFArrayGetCount(v9) < 1)
        {
          uint64_t Range = 0;
          uint64_t v14 = 0;
        }
        else
        {
          CFIndex v11 = 0;
          do
          {
            CFArrayGetValueAtIndex(v10, v11);
            uint64_t Range = DDResultGetRange();
            uint64_t v14 = v13;
            DDResultCopyExtractedDateFromReferenceDateWithLocale();
            ++v11;
          }
          while (v11 < CFArrayGetCount(v10));
        }
        CFRelease(v10);
      }
      else
      {
        uint64_t Range = 0;
        uint64_t v14 = 0;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = Range;
      *(void *)(a2 + 16) = v14;
      *(unsigned char *)(a2 + 24) = 0;
    }
    CFRelease(v8);
  }
}

void *_CFInit_MessageConversationWrapper(void *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = &unk_1EF7CD598;
  return result;
}

uint64_t createMessageConversationWrapper(uint64_t *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_MessageConversationWrapper)
  {
    qword_1EC024248 = 0;
    unk_1EC024258 = 0u;
    unk_1EC024268 = 0u;
    g_CFTypeID_MessageConversationWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(Instance + 32);
  *(void *)(v3 + 24) = v5;
  *(void *)(v3 + 32) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void *_CFInit_MessageIntentCandidateWrapper(void *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = &unk_1EF7CD968;
  return result;
}

uint64_t createMessageIntentCandidateWrapper(uint64_t *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_MessageIntentCandidateWrapper)
  {
    qword_1EC023DC8 = 0;
    unk_1EC023DD8 = 0u;
    unk_1EC023DE8 = 0u;
    g_CFTypeID_MessageIntentCandidateWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(Instance + 32);
  *(void *)(v3 + 24) = v5;
  *(void *)(v3 + 32) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void *_CFInit_MessageConversationTurnWrapper(void *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = &unk_1EF7CDAD8;
  return result;
}

uint64_t createMessageConversationTurnWrapper(uint64_t *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_MessageConversationTurnWrapper)
  {
    qword_1EC0241E8 = 0;
    unk_1EC0241F8 = 0u;
    unk_1EC024208 = 0u;
    g_CFTypeID_MessageConversationTurnWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(Instance + 32);
  *(void *)(v3 + 24) = v5;
  *(void *)(v3 + 32) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void *_CFInit_MessageIntentRecognizerWrapper(void *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = &unk_1EF7CDB20;
  return result;
}

uint64_t createMessageIntentRecognizerWrapper(uint64_t *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_MessageIntentRecognizerWrapper)
  {
    qword_1EC0242A8 = 0;
    unk_1EC0242B8 = 0u;
    unk_1EC0242C8 = 0u;
    g_CFTypeID_MessageIntentRecognizerWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(Instance + 32);
  *(void *)(v3 + 24) = v5;
  *(void *)(v3 + 32) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void convertToMessageConversationTurnVector(const __CFArray *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        uint64_t v7 = ValueAtIndex[4];
        *(void *)&long long v8 = ValueAtIndex[3];
        *((void *)&v8 + 1) = v7;
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        std::vector<std::shared_ptr<NLMessageConversationTurn>>::push_back[abi:ne180100](a2, &v8);
        if (*((void *)&v8 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
        }
      }
    }
  }
}

void sub_1A43741F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void **std::vector<std::shared_ptr<NLMessageConversationTurn>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<NLMessageConversationTurn>>::__swap_out_circular_buffer(a1, v18);
    CFArrayRef v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    CFArrayRef v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1A437432C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<NL::ParseIntent>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void convertToUnorderedMap(const __CFDictionary *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (a1)
  {
    CFIndex Count = CFDictionaryGetCount(a1);
    unint64_t v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
    CFDictionaryGetKeysAndValues(a1, v5, 0);
    if (Count < 1)
    {
      if (!v5) {
        return;
      }
    }
    else
    {
      unint64_t v6 = v5;
      do
      {
        CFStringRef v7 = (const __CFString *)*v6;
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, *v6);
        getUTF8StringFromCFString(v7, v11);
        getUTF8StringFromCFString(Value, v9);
        *(_OWORD *)unint64_t v13 = *(_OWORD *)v11;
        uint64_t v14 = v12;
        v11[1] = 0;
        uint64_t v12 = 0;
        long long __p = *(_OWORD *)v9;
        uint64_t v16 = v10;
        v9[0] = 0;
        v9[1] = 0;
        uint64_t v10 = 0;
        v11[0] = 0;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(a2, (unsigned __int8 *)v13, (uint64_t)v13);
        if (SHIBYTE(v16) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v14) < 0) {
          operator delete(v13[0]);
        }
        if (SHIBYTE(v10) < 0) {
          operator delete(v9[0]);
        }
        if (SHIBYTE(v12) < 0) {
          operator delete(v11[0]);
        }
        ++v6;
        --Count;
      }
      while (Count);
    }
    free(v5);
  }
}

void sub_1A43744A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v21);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t NLMessageConversationCreate(const __CFArray *a1, const __CFDictionary *a2)
{
  convertToMessageConversationTurnVector(a1, v10);
  convertToUnorderedMap(a2, (uint64_t)v9);
  std::allocate_shared[abi:ne180100]<NLMessageConversation,std::allocator<NLMessageConversation>,std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &,void>((void **)v10, (uint64_t)v9, &v7);
  uint64_t v3 = v8;
  v6[0] = v7;
  v6[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t MessageConversationWrapper = createMessageConversationWrapper(v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v9);
  v9[0] = (void **)v10;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](v9);
  return MessageConversationWrapper;
}

void sub_1A43745E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void **a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a14);
  a14 = (void **)(v15 - 48);
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

__CFArray *NLMessageConversationCopyConversationTurns(uint64_t a1)
{
  uint64_t v2 = *(NLMessageConversation **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NLMessageConversation::getConversationTurns(v2, &v13);
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  unint64_t v5 = v13;
  for (CFIndex i = v14; v5 != i; v5 += 2)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = (std::__shared_weak_count *)v5[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v11 = *v5;
      uint64_t v12 = 0;
    }
    CFArrayRef v9 = (const void *)createMessageConversationTurnWrapper(&v11);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    CFArrayAppendValue(Mutable, v9);
    CFRelease(v9);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v15 = (void **)&v13;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return Mutable;
}

void sub_1A4374740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a14);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void NLMessageConversationAddConversationTurn(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  unint64_t v6 = *(std::__shared_weak_count **)(a2 + 32);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v7 = v5;
  NLMessageConversation::addConversationTurn(v3, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1A4374834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    if (!v11)
    {
LABEL_3:
      if (!v10) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v11)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (!v10) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  goto LABEL_5;
}

__CFDictionary *NLMessageConversationCopyMetadata(uint64_t a1)
{
  uint64_t v2 = *(NLTransliterationCandidate **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(v2);
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (CFIndex i = *(void **)(TransliteratedWord + 16); i; CFIndex i = (void *)*i)
  {
    CFStringRef CFStringFromString = createCFStringFromString((uint64_t)(i + 2));
    CFStringRef v8 = createCFStringFromString((uint64_t)(i + 5));
    CFDictionaryAddValue(Mutable, CFStringFromString, v8);
    if (CFStringFromString) {
      CFRelease(CFStringFromString);
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return Mutable;
}

void sub_1A4374948(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void NLMessageConversationUpdateMetadata(uint64_t a1, __CFDictionary *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  convertToUnorderedMap(a2, (uint64_t)v5);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v4, (uint64_t)v5);
  NLMessageConversation::updateMetadata(v3, (uint64_t)v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1A43749E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a14);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t NLMessageConversationTurnCreate(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  getUTF8StringFromCFString(a1, v14);
  getUTF8StringFromCFString(a2, __p);
  uint64_t v11 = (uint64_t)MEMORY[0x1A625A220](a3);
  std::allocate_shared[abi:ne180100]<NLMessageConversationTurn,std::allocator<NLMessageConversationTurn>,std::string &,std::string &,long &,void>((uint64_t)v14, (uint64_t)__p, &v11, &v9);
  uint64_t v5 = v10;
  v8[0] = v9;
  v8[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t MessageConversationTurnWrapper = createMessageConversationTurnWrapper(v8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  return MessageConversationTurnWrapper;
}

void sub_1A4374AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 - 25) < 0) {
    operator delete(*(void **)(v20 - 48));
  }
  _Unwind_Resume(exception_object);
}

CFStringRef NLMessageConversationTurnCopyContent(uint64_t a1)
{
  uint64_t v2 = *(NLResult **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NLResult::getLemmaID(v2, &__p);
  CFStringRef CFStringFromString = createCFStringFromString((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return CFStringFromString;
}

void sub_1A4374BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef NLMessageConversationTurnCopySenderID(uint64_t a1)
{
  uint64_t v2 = *(NLResult **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NLResult::getVocStr(v2, &__p);
  CFStringRef CFStringFromString = createCFStringFromString((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return CFStringFromString;
}

void sub_1A4374C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

CFDateRef NLMessageConversationTurnCopyTimestamp(uint64_t a1)
{
  uint64_t v2 = *(NLMessageConversationTurn **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t Timestamp = NLMessageConversationTurn::getTimestamp(v2);
  CFDateRef v5 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (double)Timestamp);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v5;
}

void sub_1A4374CEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NLMessageIntentCandidateCreate(int a1, CFDictionaryRef theDict, double a3)
{
  int v23 = a1;
  double v22 = a3;
  memset(v20, 0, sizeof(v20));
  int v21 = 1065353216;
  CFIndex Count = CFDictionaryGetCount(theDict);
  std::vector<__CFString const*>::vector(&keys, Count);
  CFDictionaryGetKeysAndValues(theDict, (const void **)keys, 0);
  CFDateRef v5 = (const void **)keys;
  unint64_t v6 = v19;
  if (keys != v19)
  {
    do
    {
      CFStringRef v7 = (const __CFString *)*v5;
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, *v5);
      getUTF8StringFromCFString(v7, &__p);
      getUTF8StringFromCFString(Value, &__str);
      p_p = &__p;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v20, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
      std::string::operator=((std::string *)(v9 + 40), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v17 < 0) {
        operator delete(__p);
      }
      ++v5;
    }
    while (v5 != (const void **)v6);
  }
  std::allocate_shared[abi:ne180100]<NLMessageIntentCandidate,std::allocator<NLMessageIntentCandidate>,NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &,void>(&v23, (uint64_t)v20, &v22, &__p);
  uint64_t v10 = v16;
  v13[0] = (uint64_t)__p;
  v13[1] = (uint64_t)v16;
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t MessageIntentCandidateWrapper = createMessageIntentCandidateWrapper(v13);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (keys)
  {
    uint64_t v19 = keys;
    operator delete(keys);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v20);
  return MessageIntentCandidateWrapper;
}

void sub_1A4374E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t NLMessageIntentCandidateGetIntentType(uint64_t a1)
{
  uint64_t v2 = *(NLMessageIntentCandidate **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MessageIntentint Type = NLMessageIntentCandidate::getMessageIntentType(v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return MessageIntentType;
}

void sub_1A4374F54(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

__CFDictionary *NLMessageIntentCandidateCopyAttributes(uint64_t a1)
{
  uint64_t v2 = *(NLMessageIntentCandidate **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NLMessageIntentCandidate::getAttributes(v2, (uint64_t)v9);
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (CFIndex i = v10; i; CFIndex i = (void *)*i)
  {
    CFStringRef CFStringFromString = createCFStringFromString((uint64_t)(i + 2));
    CFStringRef v7 = createCFStringFromString((uint64_t)(i + 5));
    CFDictionaryAddValue(Mutable, CFStringFromString, v7);
    CFRelease(CFStringFromString);
    CFRelease(v7);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v9);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return Mutable;
}

void sub_1A437504C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

double NLMessageIntentCandidateGetScore(uint64_t a1)
{
  uint64_t v2 = *(NLMessageIntentCandidate **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double Score = NLMessageIntentCandidate::getScore(v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return Score;
}

void sub_1A43750D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NLMessageIntentRecognizerCreate(CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, kNLMessageIntentRecognizerLocaleKey);
    if (Value)
    {
      CFStringRef v3 = Value;
      CFTypeID v4 = CFGetTypeID(Value);
      if (v4 == CFStringGetTypeID())
      {
        CFLocaleRef v5 = CFLocaleCreate(0, v3);
LABEL_9:
        CFLocaleRef v6 = v5;
        goto LABEL_10;
      }
      CFTypeID v8 = CFGetTypeID(v3);
      CFTypeID TypeID = (NL::CFLogger *)CFLocaleGetTypeID();
      if ((NL::CFLogger *)v8 == TypeID)
      {
        CFLocaleRef v5 = (const __CFLocale *)CFRetain(v3);
        goto LABEL_9;
      }
      CFStringRef v7 = *(void (**)(void))(*(void *)NL::CFLogger::sharedInstance(TypeID) + 16);
    }
    else
    {
      CFStringRef v7 = *(void (**)(void))(*(void *)NL::CFLogger::sharedInstance(0) + 16);
    }
    v7();
    return 0;
  }
  CFLocaleRef v6 = 0;
LABEL_10:
  CFTypeRef v10 = CFLocaleGetValue(v6, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  CFTypeRef cf = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  CFDictionaryAddValue((CFMutableDictionaryRef)cf, kNLMessageIntentRecognizerLocaleKey, v10);
  std::allocate_shared[abi:ne180100]<NLMessageIntentRecognizer,std::allocator<NLMessageIntentRecognizer>,__CFDictionary *&,void>((const __CFDictionary **)&cf, &v15);
  uint64_t v11 = v16;
  v14[0] = v15;
  v14[1] = (uint64_t)v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t MessageIntentRecognizerWrapper = createMessageIntentRecognizerWrapper(v14);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (cf) {
    CFRelease(cf);
  }
  return MessageIntentRecognizerWrapper;
}

#error "1A437533C: call analysis failed (funcsize=46)"

__CFArray *NLMessageIntentRecognizerCopyTopIntentCandidate(uint64_t a1, uint64_t a2)
{
  __n128 result = NLMessageIntentRecognizerCopyTopNIntentCandidates(a1, a2, 1);
  if (result)
  {
    CFStringRef v3 = result;
    CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(result, 0);
    CFRelease(v3);
    return (__CFArray *)ValueAtIndex;
  }
  return result;
}

__CFArray *NLMessageIntentRecognizerCopyTopNIntentCandidates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFLocaleRef v5 = *(std::string **)(a1 + 24);
  CFLocaleRef v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFStringRef v7 = *(std::__shared_weak_count **)(a2 + 32);
  unint64_t v18 = *(NLMessageConversation **)(a2 + 24);
  uint64_t v19 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NLMessageIntentRecognizer::getCandidates(v5, &v18, &v16);
  uint64_t v8 = v17 - v16;
  if (v17 == v16)
  {
    CFMutableStringRef Mutable = 0;
  }
  else
  {
    if (a3 - 1 >= (unint64_t)(v8 >> 3)) {
      uint64_t v9 = v8 >> 3;
    }
    else {
      uint64_t v9 = a3;
    }
    CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (v9 >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        std::shared_ptr<NLMessageIntentCandidate>::shared_ptr[abi:ne180100]<NLMessageIntentCandidate,std::default_delete<NLMessageIntentCandidate>,void>(&v14, (uint64_t *)(v16 + v11));
        uint64_t v12 = (const void *)createMessageIntentCandidateWrapper(&v14);
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        CFArrayAppendValue(Mutable, v12);
        v11 += 8;
        --v9;
      }
      while (v9);
    }
  }
  uint64_t v20 = (void **)&v16;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100](&v20);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return Mutable;
}

void sub_1A43754D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

__CFArray *NLMessageIntentRecognizerCopyTopNCandidatesForIntentType(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  CFStringRef v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
  uint64_t v19 = *(NLTransliterationCandidate **)(a2 + 24);
  uint64_t v20 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NLMessageIntentRecognizer::getCandidateForIntentType(v6, &v19, a3, &v17);
  if (a4) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = (v18 - v17) >> 3;
  }
  if ((v18 - v17) >> 3 >= v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = (v18 - v17) >> 3;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (v10 >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      std::shared_ptr<NLMessageIntentCandidate>::shared_ptr[abi:ne180100]<NLMessageIntentCandidate,std::default_delete<NLMessageIntentCandidate>,void>(&v15, (uint64_t *)(v17 + v12));
      char v13 = (const void *)createMessageIntentCandidateWrapper(&v15);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      CFArrayAppendValue(Mutable, v13);
      v12 += 8;
      --v10;
    }
    while (v10);
  }
  int v21 = (void **)&v17;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100](&v21);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return Mutable;
}

void sub_1A437564C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

uint64_t NLMessageIntentRecognizerCopyIntentCandidatesForIntentType(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  CFLocaleRef v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 32);
  uint64_t v12 = *(NLTransliterationCandidate **)(a2 + 24);
  char v13 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NLMessageIntentRecognizer::getCandidateForIntentType(v4, &v12, a3, v11);
  if (v11[1] == v11[0])
  {
    uint64_t v7 = 0;
  }
  else
  {
    std::shared_ptr<NLMessageIntentCandidate>::shared_ptr[abi:ne180100]<NLMessageIntentCandidate,std::default_delete<NLMessageIntentCandidate>,void>(&v9, v11[0]);
    uint64_t v7 = createMessageIntentCandidateWrapper(&v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  uint64_t v14 = (void **)v11;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v7;
}

void sub_1A4375764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  *(void *)(v16 - 24) = &a11;
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 24));
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

__CFArray *NLMessageIntentRecognizerCopyTopNIntentTypes(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = *(std::string **)(a1 + 24);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFLocaleRef v5 = *(std::__shared_weak_count **)(a2 + 32);
  uint64_t v15 = *(NLMessageConversation **)(a2 + 24);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NLMessageIntentRecognizer::getCandidateIntentTypes(v3, &v15, &v13);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v8 = v14;
  if (v14 != v13)
  {
    unint64_t v9 = 0;
    uint64_t v8 = v13;
    do
    {
      int valuePtr = 0;
      int valuePtr = *(_DWORD *)&v8[4 * v9];
      CFNumberRef v10 = CFNumberCreate(v6, kCFNumberIntType, &valuePtr);
      CFArrayAppendValue(Mutable, v10);
      CFRelease(v10);
      ++v9;
      uint64_t v8 = v13;
    }
    while (v9 < (v14 - v13) >> 2);
  }
  if (v8)
  {
    uint64_t v14 = v8;
    operator delete(v8);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return Mutable;
}

void sub_1A43758D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void MessageConversationWrapper::~MessageConversationWrapper(MessageConversationWrapper *this)
{
  *(void *)this = &unk_1EF7CD598;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CD598;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);

  JUMPOUT(0x1A625B130);
}

void MessageIntentCandidateWrapper::~MessageIntentCandidateWrapper(MessageIntentCandidateWrapper *this)
{
  *(void *)this = &unk_1EF7CD968;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CD968;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);

  JUMPOUT(0x1A625B130);
}

void MessageConversationTurnWrapper::~MessageConversationTurnWrapper(MessageConversationTurnWrapper *this)
{
  *(void *)this = &unk_1EF7CDAD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CDAD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);

  JUMPOUT(0x1A625B130);
}

void MessageIntentRecognizerWrapper::~MessageIntentRecognizerWrapper(MessageIntentRecognizerWrapper *this)
{
  *(void *)this = &unk_1EF7CDB20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CDB20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);

  JUMPOUT(0x1A625B130);
}

uint64_t std::vector<std::shared_ptr<NLMessageConversationTurn>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NLMessageConversationTurn>>,std::reverse_iterator<std::shared_ptr<NLMessageConversationTurn>*>,std::reverse_iterator<std::shared_ptr<NLMessageConversationTurn>*>,std::reverse_iterator<std::shared_ptr<NLMessageConversationTurn>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<NLMessageConversationTurn>>,std::reverse_iterator<std::shared_ptr<NLMessageConversationTurn>*>,std::reverse_iterator<std::shared_ptr<NLMessageConversationTurn>*>,std::reverse_iterator<std::shared_ptr<NLMessageConversationTurn>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NLMessageConversationTurn>>,std::reverse_iterator<std::shared_ptr<NLMessageConversationTurn>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NLMessageConversationTurn>>,std::reverse_iterator<std::shared_ptr<NLMessageConversationTurn>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::ParseIntent>>,std::reverse_iterator<std::shared_ptr<NL::ParseIntent>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (CFIndex i = *v13; i; CFIndex i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(_OWORD *)(v16 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_OWORD *)(a3 + 24);
  *((void *)v16 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *int v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  CFIndex i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A437601C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<NLMessageConversation,std::allocator<NLMessageConversation>,std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &,void>@<X0>(void **a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<NLMessageConversation>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &,std::allocator<NLMessageConversation>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1A4376084(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<NLMessageConversation>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &,std::allocator<NLMessageConversation>,0>(void *a1, void **a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF7CE4D0;
  std::allocator<NLMessageConversation>::construct[abi:ne180100]<NLMessageConversation,std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1A43760F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NLMessageConversation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE4D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NLMessageConversation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE4D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

void std::__shared_ptr_emplace<NLMessageConversation>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
  uint64_t v2 = v1;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::allocator<NLMessageConversation>::construct[abi:ne180100]<NLMessageConversation,std::vector<std::shared_ptr<NLMessageConversationTurn>> &,std::unordered_map<std::string,std::string> &>(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  memset(v7, 0, sizeof(v7));
  std::vector<std::shared_ptr<NLMessageConversationTurn>>::__init_with_size[abi:ne180100]<std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>(v7, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v6, a4);
  NLMessageConversation::NLMessageConversation(a2, v7, v6);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v6);
  unint64_t v8 = (void **)v7;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_1A437623C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a10);
  *(void *)(v15 - 24) = &a15;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<NLMessageConversationTurn>>::__init_with_size[abi:ne180100]<std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<NLMessageConversationTurn>>,std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1A43762D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v10;
  std::vector<std::shared_ptr<NL::ParseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<NLMessageConversationTurn>>,std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*,std::shared_ptr<NLMessageConversationTurn>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NLMessageConversationTurn>>,std::shared_ptr<NLMessageConversationTurn>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NLMessageConversationTurn>>,std::shared_ptr<NLMessageConversationTurn>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<NL::Entity>>,std::shared_ptr<NL::Entity>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<NLMessageConversationTurn,std::allocator<NLMessageConversationTurn>,std::string &,std::string &,long &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<NLMessageConversationTurn>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,long &,std::allocator<NLMessageConversationTurn>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1A4376418(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<NLMessageConversationTurn>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,long &,std::allocator<NLMessageConversationTurn>,0>(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF7CE540;
  std::allocator<NLMessageConversationTurn>::construct[abi:ne180100]<NLMessageConversationTurn,std::string &,std::string &,long &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1A4376490(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NLMessageConversationTurn>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NLMessageConversationTurn>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE540;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

void std::__shared_ptr_emplace<NLMessageConversationTurn>::__on_zero_shared(uint64_t a1)
{
  std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<NLMessageConversationTurn>::construct[abi:ne180100]<NLMessageConversationTurn,std::string &,std::string &,long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v9 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  NLMessageConversationTurn::NLMessageConversationTurn(a2, &v9, &__p, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1A4376600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<__CFString const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<__CFString const*>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1A4376690(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<__CFString const*>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::allocate_shared[abi:ne180100]<NLMessageIntentCandidate,std::allocator<NLMessageIntentCandidate>,NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &,void>@<X0>(int *a1@<X1>, uint64_t a2@<X2>, double *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<NLMessageIntentCandidate>::__shared_ptr_emplace[abi:ne180100]<NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &,std::allocator<NLMessageIntentCandidate>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1A4376750(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<NLMessageIntentCandidate>::__shared_ptr_emplace[abi:ne180100]<NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &,std::allocator<NLMessageIntentCandidate>,0>(void *a1, int *a2, uint64_t a3, double *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF7CE508;
  std::allocator<NLMessageIntentCandidate>::construct[abi:ne180100]<NLMessageIntentCandidate,NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1A43767C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NLMessageIntentCandidate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NLMessageIntentCandidate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE508;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

uint64_t std::__shared_ptr_emplace<NLMessageIntentCandidate>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 32);
}

uint64_t std::allocator<NLMessageIntentCandidate>::construct[abi:ne180100]<NLMessageIntentCandidate,NLMessageIntentType &,std::unordered_map<std::string,std::string> &,double &>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, double *a5)
{
  int v7 = *a3;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v9, a4);
  NLMessageIntentCandidate::NLMessageIntentCandidate(a2, v7, (uint64_t)v9, *a5);
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v9);
}

void sub_1A43768BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<NLMessageIntentRecognizer,std::allocator<NLMessageIntentRecognizer>,__CFDictionary *&,void>@<X0>(const __CFDictionary **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x100uLL);
  uint64_t result = std::__shared_ptr_emplace<NLMessageIntentRecognizer>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary *&,std::allocator<NLMessageIntentRecognizer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A4376918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<NLMessageIntentRecognizer>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary *&,std::allocator<NLMessageIntentRecognizer>,0>(void *a1, const __CFDictionary **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF7CE578;
  NLMessageIntentRecognizer::NLMessageIntentRecognizer((NLMessageIntentRecognizer *)(a1 + 3), *a2);
  return a1;
}

void sub_1A4376978(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NLMessageIntentRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NLMessageIntentRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE578;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

void std::__shared_ptr_emplace<NLMessageIntentRecognizer>::__on_zero_shared(uint64_t a1)
{
  std::allocator<NLMessageIntentRecognizer>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<NLMessageIntentRecognizer>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 231) < 0) {
    operator delete(*(void **)(a2 + 208));
  }
  if (*(char *)(a2 + 207) < 0) {
    operator delete(*(void **)(a2 + 184));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::~__hash_table(a2 + 144);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::~__hash_table(a2 + 104);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table(a2 + 64);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<NLAbstractIntentRecognizer>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<NLAbstractIntentRecognizer>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<NLAbstractIntentRecognizer>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<std::string>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::basic_regex<char,std::regex_traits<char>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::basic_regex<char,std::regex_traits<char>>>,0>(uint64_t a1)
{
  uint64_t v2 = (std::locale *)(a1 + 24);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

void std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::unique_ptr<NLMessageIntentCandidate>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 + 8);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

uint64_t *std::shared_ptr<NLMessageIntentCandidate>::shared_ptr[abi:ne180100]<NLMessageIntentCandidate,std::default_delete<NLMessageIntentCandidate>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<NLMessageIntentCandidate  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

uint64_t std::__shared_ptr_pointer<NLMessageIntentCandidate  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1 + 8);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<NLMessageIntentCandidate  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void NLTextSlotParserRecurrenceEventExtractor::NLTextSlotParserRecurrenceEventExtractor(NLTextSlotParserRecurrenceEventExtractor *this, CFTypeRef cf)
{
  unint64_t v3 = (void *)((char *)this + 24);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (cf)
  {
    CFDictionaryRef v4 = (const __CFDictionary *)CFRetain(cf);
    *(void *)this = v4;
  }
  else
  {
    CFDictionaryRef v4 = 0;
  }
  if (CFDictionaryContainsKey(v4, kNLTextSlotParserLocaleKey[0]))
  {
    CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)this, kNLTextSlotParserLocaleKey[0]);
    *((void *)this + 1) = MEMORY[0x1A625A380](*MEMORY[0x1E4F1CF80], Value);
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)this, kNLTextSlotParserReferenceDateKey[0]))
  {
    char v6 = CFDictionaryGetValue(*(CFDictionaryRef *)this, kNLTextSlotParserReferenceDateKey[0]);
    *((void *)this + 2) = CFRetain(v6);
  }
  if (!*v3)
  {
    int v7 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    [v7 setObject:MEMORY[0x1E4F1CC38] forKey:@"includeFutureDates"];
    uint64_t v8 = *((void *)this + 2);
    if (v8) {
      [v7 setObject:v8 forKey:@"date"];
    }
    uint64_t v9 = *((void *)this + 1);
    if (!v9) {
      uint64_t v9 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:@"en_US"];
    }
    [[NLSearchParserManager alloc] initWithLocale:v9 context:@"com.apple.NLP" options:v7];
    operator new();
  }
}

void sub_1A43772A4(_Unwind_Exception *a1)
{
  std::unique_ptr<NLSearchParserManagerWrapper>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

id *std::unique_ptr<NLSearchParserManagerWrapper>::reset[abi:ne180100](id **a1, id *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    NLSearchParserManagerWrapper::~NLSearchParserManagerWrapper(result);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

void NLTextSlotParserRecurrenceEventExtractor::~NLTextSlotParserRecurrenceEventExtractor(NLTextSlotParserRecurrenceEventExtractor *this)
{
  uint64_t v2 = *(const void **)this;
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = (const void *)*((void *)this + 1);
  if (v3) {
    CFRelease(v3);
  }
  CFDictionaryRef v4 = (const void *)*((void *)this + 2);
  if (v4) {
    CFRelease(v4);
  }
  std::unique_ptr<NLSearchParserManagerWrapper>::reset[abi:ne180100]((id **)this + 3, 0);
}

BOOL NLTextSlotParserRecurrenceEventExtractor::checkFutureTime(NLTextSlotParserRecurrenceEventExtractor *this, const __CFDate *a2)
{
  if (!a2) {
    return 1;
  }
  CFAbsoluteTime v3 = MEMORY[0x1A625A220](a2);
  double CurrentTime = getCurrentTime(*((void *)this + 2));
  int v12 = -1;
  int v13 = -1;
  int v11 = -1;
  int v9 = -1;
  int v10 = -1;
  int v8 = -1;
  uint64_t v5 = copyCurrentCalendar(*((void *)this + 1));
  CFCalendarDecomposeAbsoluteTime(v5, CurrentTime, "yMd", &v13, &v12, &v11);
  CFCalendarDecomposeAbsoluteTime(v5, v3, "yMd", &v10, &v9, &v8);
  if (v10 >= v13 && (v10 != v13 || v9 >= v12 && (v9 != v12 || v8 >= v11)))
  {
    int v6 = 1;
    if (!v5) {
      return v6 != 0;
    }
    goto LABEL_10;
  }
  int v6 = 0;
  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
  return v6 != 0;
}

void sub_1A437749C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NLTextSlotParserRecurrenceEventExtractor::getRecurrentEventDatesAndFrequency(NLTextSlotParserRecurrenceEventExtractor *this@<X0>, CFStringRef theString@<X1>, const __CFTimeZone *a3@<X2>, void *a4@<X8>)
{
  uint64_t v19 = 0;
  unint64_t v20 = &v19;
  uint64_t v21 = 0x4012000000;
  size_t v22 = __Block_byref_object_copy__3;
  int v23 = __Block_byref_object_dispose__3;
  unint64_t v24 = &unk_1A4417359;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  v16[0] = 0;
  v16[1] = v16;
  uint64_t v16[2] = 0x4012000000;
  v16[3] = __Block_byref_object_copy__10;
  v16[4] = __Block_byref_object_dispose__11;
  void v16[5] = &unk_1A4417359;
  uint64_t v17 = 0;
  CFIndex v18 = 0;
  CFIndex Length = CFStringGetLength(theString);
  uint64_t v17 = 0;
  CFIndex v18 = Length;
  v15[0] = 0;
  v15[1] = v15;
  uint64_t v15[2] = 0x4012000000;
  void v15[3] = __Block_byref_object_copy__10;
  v15[4] = __Block_byref_object_dispose__11;
  v15[5] = &unk_1A4417359;
  v15[6] = 0;
  v15[7] = 0;
  int v9 = (void **)*((void *)this + 3);
  if (!v9) {
    goto LABEL_6;
  }
  int v10 = *v9;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  uint64_t v14[2] = ___ZNK40NLTextSlotParserRecurrenceEventExtractor34getRecurrentEventDatesAndFrequencyEPK10__CFStringPK12__CFTimeZone_block_invoke;
  uint64_t v14[3] = &unk_1E5B36900;
  v14[4] = v16;
  v14[5] = v15;
  v14[6] = &v19;
  v14[7] = this;
  v14[8] = a3;
  [v10 tokenizeAndEnumerateAttributedParsesForQuery:theString options:0 withBlock:v14];
  int v11 = (NL::AssetResource *)v20[6];
  if (!v11) {
    goto LABEL_6;
  }
  CFDateRef v12 = (const __CFDate *)NL::AssetResource::URL(v11);
  if (NLTextSlotParserRecurrenceEventExtractor::checkFutureTime(this, v12))
  {
    uint64_t v13 = v20[7];
    *a4 = v20[6];
    a4[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_6:
    *a4 = 0;
    a4[1] = 0;
  }
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(&v19, 8);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
}

void sub_1A43776BC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  CFAbsoluteTime v3 = *(std::__shared_weak_count **)(v1 - 72);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 __Block_byref_object_copy__10(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t ___ZNK40NLTextSlotParserRecurrenceEventExtractor34getRecurrentEventDatesAndFrequencyEPK10__CFStringPK12__CFTimeZone_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 56);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZNK40NLTextSlotParserRecurrenceEventExtractor34getRecurrentEventDatesAndFrequencyEPK10__CFStringPK12__CFTimeZone_block_invoke_2;
  void v7[3] = &unk_1E5B368D8;
  long long v5 = *(_OWORD *)(a1 + 56);
  long long v8 = *(_OWORD *)(a1 + 40);
  long long v9 = v5;
  return objc_msgSend(a2, "enumerateAttributesInRange:options:usingBlock:", v3, v4, 0, v7);
}

uint64_t ___ZNK40NLTextSlotParserRecurrenceEventExtractor34getRecurrentEventDatesAndFrequencyEPK10__CFStringPK12__CFTimeZone_block_invoke_2(uint64_t result, void *a2, unint64_t a3, uint64_t a4)
{
  if (!a2) {
    return result;
  }
  int v7 = (void *)result;
  uint64_t v8 = *(void *)(result + 48);
  __n128 result = [a2 count];
  if (!result) {
    return result;
  }
  long long v9 = (void *)[a2 objectForKeyedSubscript:@"dateComponents"];
  uint64_t v10 = [a2 objectForKeyedSubscript:@"startDateComponents"];
  int v11 = (void *)[a2 objectForKeyedSubscript:@"endDateComponents"];
  CFDateRef v12 = (void *)[a2 objectForKeyedSubscript:@"frequencyDateComponents"];
  if ([a2 objectForKeyedSubscript:@"dateType"]) {
    int v13 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"dateType"), "unsignedIntValue");
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = *(void *)(v7[4] + 8);
  uint64_t v15 = *(void *)(v14 + 56);
  if (v15)
  {
    uint64_t v16 = *(void *)(v14 + 48);
    if (v16 + v15 <= a3) {
      *(void *)(v14 + 56) = a4 + a3 - v16;
    }
  }
  else
  {
    *(void *)(v14 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a3;
    *(void *)(*(void *)(v7[4] + 8) + 56) = a4;
  }
  if (v9) {
    BOOL v17 = v10 == 0;
  }
  else {
    BOOL v17 = 0;
  }
  if (!v17) {
    long long v9 = (void *)v10;
  }
  CFIndex v18 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v19 = copyCurrentCalendar(*(void *)(v8 + 8));
  unint64_t v20 = (id)CFMakeCollectable(v19);
  double CurrentTime = getCurrentTime(*(void *)(v8 + 16));
  at[0] = CurrentTime;
  int v87 = -1;
  int v85 = -1;
  int v86 = -1;
  int v83 = -1;
  int v84 = -1;
  int v81 = -1;
  int v82 = -1;
  int v79 = -1;
  int v80 = -1;
  int v78 = -1;
  CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, CurrentTime, "smHyMdEFwW", &v78, &v79, &v80, &v87, &v86, &v85, &v84, &v83, &v81, &v82);
  if (v9)
  {
    if ([v9 weekday] == 0x7FFFFFFFFFFFFFFFLL)
    {
      if ([v9 weekOfYear] == 0x7FFFFFFFFFFFFFFFLL)
      {
        if ([v9 day] == 0x7FFFFFFFFFFFFFFFLL
          && [v9 month] == 0x7FFFFFFFFFFFFFFFLL
          && [v9 year] == 0x7FFFFFFFFFFFFFFFLL)
        {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "smH", -v78, -v79, -v80);
          if ([v9 hour] != 0x7FFFFFFFFFFFFFFFLL)
          {
            CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "H", [v9 hour]);
            if (!v12)
            {
              double v22 = at[0];
              if (at[0] < CurrentTime) {
                CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "d", at[0], 1);
              }
            }
          }
          if (objc_msgSend(v9, "minute", v22) != 0x7FFFFFFFFFFFFFFFLL)
          {
            CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", [v9 minute]);
            if (!v12)
            {
              double v23 = at[0];
              if (at[0] < CurrentTime) {
                CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "h", at[0], 1);
              }
            }
          }
          if (objc_msgSend(v9, "second", v23) != 0x7FFFFFFFFFFFFFFFLL)
          {
            CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "s", [v9 second]);
            if (!v12 && at[0] < CurrentTime) {
              CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", at[0], 1);
            }
          }
          goto LABEL_80;
        }
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "smHdM", -v78, -v79, -v80, (1 - v85), (1 - v86));
        if ([v9 year] != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v34 = [v9 year];
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "y", v34 - v87);
        }
        if ([v9 month] != 0x7FFFFFFFFFFFFFFFLL) {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "M", [v9 month] - 1);
        }
        if ([v9 day] != 0x7FFFFFFFFFFFFFFFLL) {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "d", [v9 day] - 1);
        }
        if ([v9 hour] != 0x7FFFFFFFFFFFFFFFLL)
        {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "H", [v9 hour]);
          if (!v12)
          {
            uint64_t v36 = v11;
            int v37 = v13;
            uint64_t v38 = v18;
            uint64_t v39 = v85;
            BOOL v17 = [v9 day] == v39;
            CFIndex v18 = v38;
            int v13 = v37;
            int v11 = v36;
            if (v17)
            {
              double v35 = at[0];
              if (at[0] < CurrentTime) {
                CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "h", at[0], 12);
              }
            }
          }
        }
        if (objc_msgSend(v9, "minute", v35) != 0x7FFFFFFFFFFFFFFFLL)
        {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", [v9 minute]);
          if (!v12)
          {
            uint64_t v41 = v11;
            int v42 = v13;
            uint64_t v43 = v18;
            uint64_t v44 = v85;
            BOOL v17 = [v9 day] == v44;
            CFIndex v18 = v43;
            int v13 = v42;
            int v11 = v41;
            if (v17)
            {
              double v40 = at[0];
              if (at[0] < CurrentTime) {
                CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "h", at[0], 12);
              }
            }
          }
        }
        if (objc_msgSend(v9, "second", v40) == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (!v12)
          {
LABEL_100:
            if (objc_msgSend(v9, "year", v45) == 0x7FFFFFFFFFFFFFFFLL && at[0] < CurrentTime) {
              CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "y", at[0], 1);
            }
          }
        }
        else
        {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "s", [v9 second]);
          if (!v12)
          {
            uint64_t v55 = v11;
            int v56 = v13;
            uint64_t v57 = v18;
            uint64_t v58 = v85;
            BOOL v17 = [v9 day] == v58;
            CFIndex v18 = v57;
            int v13 = v56;
            int v11 = v55;
            if (v17)
            {
              double v45 = at[0];
              if (at[0] < CurrentTime) {
                CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "h", at[0], 12);
              }
            }
            goto LABEL_100;
          }
        }
LABEL_80:
        CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "smHyMdEFwW", &v78, &v79, &v80, &v87, &v86, &v85, &v84, &v83, &v81, &v82);
        goto LABEL_81;
      }
      uint64_t v77 = v11;
      int v25 = v13;
      uint64_t v26 = v18;
      uint64_t v27 = -v78;
      uint64_t v28 = -v79;
      uint64_t v29 = -v80;
      uint64_t v30 = (1 - v84);
      uint64_t v31 = [v9 weekOfYear];
      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "smHEw", v27, v28, v29, v30, v31 - v81);
      if ([v9 hour] != 0x7FFFFFFFFFFFFFFFLL) {
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "H", [v9 hour]);
      }
      CFIndex v18 = v26;
      if ([v9 minute] != 0x7FFFFFFFFFFFFFFFLL) {
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", [v9 minute]);
      }
      int v13 = v25;
      int v11 = v77;
      if ([v9 second] == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_80;
      }
    }
    else
    {
      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "E", -v84);
      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "E", [v9 weekday]);
      if ([v9 weekdayOrdinal] == 0x7FFFFFFFFFFFFFFFLL)
      {
        if ([v9 weekOfYear] == 0x7FFFFFFFFFFFFFFFLL)
        {
          if ([v9 weekOfYear] == 0x7FFFFFFFFFFFFFFFLL && !v12)
          {
            double v24 = at[0];
            if (at[0] < CurrentTime) {
              CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "w", at[0], 1);
            }
          }
        }
        else
        {
          CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "w", &v81);
          uint64_t v46 = [v9 weekOfYear];
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "w", v47, v46 - v81);
        }
      }
      else
      {
        CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "F", &v83);
        uint64_t v32 = [v9 weekdayOrdinal];
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "F", v33, v32 - v83);
      }
      if (objc_msgSend(v9, "yearForWeekOfYear", v24) != 0x7FFFFFFFFFFFFFFFLL)
      {
        CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "y", &v87);
        uint64_t v49 = [v9 yearForWeekOfYear];
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "Y", v49 - v87);
      }
      if (!v12 && [v9 weekday] != 0x7FFFFFFFFFFFFFFFLL)
      {
        double v48 = at[0];
        if (at[0] <= CurrentTime) {
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "w", at[0], 1);
        }
      }
      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "smH", v48, -v78, -v79, -v80);
      if ([v9 hour] != 0x7FFFFFFFFFFFFFFFLL) {
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "H", [v9 hour]);
      }
      if ([v9 minute] != 0x7FFFFFFFFFFFFFFFLL) {
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", [v9 minute]);
      }
      if ([v9 second] == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_80;
      }
    }
    uint64_t v76 = [v9 second];
    CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "s", v50, v76);
    goto LABEL_80;
  }
LABEL_81:
  if (v12)
  {
    if ([v12 second] == 0x7FFFFFFFFFFFFFFFLL)
    {
      if ([v12 minute] == 0x7FFFFFFFFFFFFFFFLL)
      {
        if ([v12 hour] == 0x7FFFFFFFFFFFFFFFLL)
        {
          if ([v12 day] == 0x7FFFFFFFFFFFFFFFLL)
          {
            if ([v12 weekOfYear] == 0x7FFFFFFFFFFFFFFFLL)
            {
              if ([v12 weekOfMonth] == 0x7FFFFFFFFFFFFFFFLL)
              {
                if ([v12 weekdayOrdinal] == 0x7FFFFFFFFFFFFFFFLL)
                {
                  if ([v12 month] == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    if ([v12 year] != 0x7FFFFFFFFFFFFFFFLL)
                    {
                      uint64_t v51 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v12, "year"));
                      [v18 setValue:v51 forKey:kNLTextSlotParserRecurrentFrequencyYearKey[0]];
                      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "y", [v12 year]);
                    }
                  }
                  else
                  {
                    uint64_t v75 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v12, "month"));
                    [v18 setValue:v75 forKey:kNLTextSlotParserRecurrentFrequencyMonthKey[0]];
                    CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "M", [v12 month]);
                  }
                }
                else
                {
                  uint64_t v68 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v9, "weekday"));
                  [v18 setValue:v68 forKey:kNLTextSlotParserRecurrentFrequencyWeekdayKey[0]];
                  uint64_t v69 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v9, "weekdayOrdinal"));
                  [v18 setValue:v69 forKey:kNLTextSlotParserRecurrentFrequencyWeekdayOrdinalKey[0]];
                  if (at[0] < CurrentTime)
                  {
                    CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "dM", at[0], (1 - v85), 1);
                    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "EF", &v84, &v83);
                    uint64_t v70 = [v9 weekday];
                    CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "E", v70 - v84);
                    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "F", &v83);
                    uint64_t v71 = v83;
                    uint64_t v72 = [v9 weekdayOrdinal];
                    uint64_t v73 = [v9 weekdayOrdinal];
                    uint64_t v74 = v83;
                    if (v72 < v71) {
                      uint64_t v74 = 0;
                    }
                    CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "F", v73 - v74);
                  }
                }
              }
              else
              {
                uint64_t v67 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v12, "weekOfMonth"));
                [v18 setValue:v67 forKey:kNLTextSlotParserRecurrentFrequencyWeekOfMonthKey[0]];
              }
            }
            else
            {
              uint64_t v64 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v12, "weekOfYear"));
              [v18 setValue:v64 forKey:kNLTextSlotParserRecurrentFrequencyWeekOfYearKey[0]];
              if ([v9 weekday] != 0x7FFFFFFFFFFFFFFFLL)
              {
                uint64_t v65 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v9, "weekday"));
                if (v13 == 48)
                {
                  [v18 setValue:v65 forKey:kNLTextSlotParserRecurrentFrequencyWeekdayStartKey[0]];
                  uint64_t v66 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v11, "weekday"));
                  [v18 setValue:v66 forKey:kNLTextSlotParserRecurrentFrequencyWeekdayEndKey[0]];
                  int v11 = 0;
                }
                else
                {
                  [v18 setValue:v65 forKey:kNLTextSlotParserRecurrentFrequencyWeekdayKey[0]];
                  CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "w", [v12 weekOfYear]);
                }
              }
            }
          }
          else
          {
            uint64_t v59 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v12, "day"));
            [v18 setValue:v59 forKey:kNLTextSlotParserRecurrentFrequencyDayKey[0]];
            CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "d", [v12 day]);
          }
        }
        else
        {
          uint64_t v54 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v12, "hour"));
          [v18 setValue:v54 forKey:kNLTextSlotParserRecurrentFrequencyHourKey[0]];
          CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "H", [v12 hour]);
        }
      }
      else
      {
        uint64_t v53 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v12, "minute"));
        [v18 setValue:v53 forKey:kNLTextSlotParserRecurrentFrequencyMinuteKey[0]];
        CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "m", [v12 minute]);
      }
    }
    else
    {
      uint64_t v52 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v12, "second"));
      [v18 setValue:v52 forKey:kNLTextSlotParserRecurrentFrequencySecondKey[0]];
      CFCalendarAddComponents((CFCalendarRef)v20, at, 0, "s", [v12 second]);
    }
  }
  if (v9 && [v9 hour] == 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(v9, "minute") == 0x7FFFFFFFFFFFFFFFLL)
  {
    [v9 second];
    if (!v12) {
      goto LABEL_113;
    }
  }
  else if (!v12)
  {
    goto LABEL_113;
  }
  if ([v12 weekday] != 0x7FFFFFFFFFFFFFFFLL
    || [v12 weekOfMonth] != 0x7FFFFFFFFFFFFFFFLL
    || [v12 weekOfYear] != 0x7FFFFFFFFFFFFFFFLL)
  {
    goto LABEL_129;
  }
LABEL_113:
  if (v9)
  {
    if ([v9 weekday] == 0x7FFFFFFFFFFFFFFFLL
      && [v9 weekOfMonth] == 0x7FFFFFFFFFFFFFFFLL
      && [v9 weekOfYear] == 0x7FFFFFFFFFFFFFFFLL)
    {
      CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "smHyMd", &v78, &v79, &v80, &v87, &v86, &v85);
      id v60 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
      unint64_t v61 = v60;
      if (v78) {
        objc_msgSend(v60, "setSecond:");
      }
      if (v79) {
        objc_msgSend(v61, "setMinute:");
      }
      if (v80) {
        objc_msgSend(v61, "setHour:");
      }
      if (v85) {
        objc_msgSend(v61, "setDay:");
      }
      if (v86) {
        objc_msgSend(v61, "setMonth:");
      }
      if (v87) {
        objc_msgSend(v61, "setYear:");
      }
      goto LABEL_145;
    }
LABEL_129:
    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)v20, at[0], "smHyEwW", &v78, &v79, &v80, &v87, &v84, &v81, &v82);
    id v62 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
    unint64_t v61 = v62;
    if (v78) {
      objc_msgSend(v62, "setSecond:");
    }
    if (v79) {
      objc_msgSend(v61, "setMinute:");
    }
    if (v80) {
      objc_msgSend(v61, "setHour:");
    }
    if (v84) {
      objc_msgSend(v61, "setWeekday:");
    }
    if (v81) {
      objc_msgSend(v61, "setWeekOfYear:");
    }
    if (v82 && [v61 weekOfMonth]) {
      [v61 setWeekOfMonth:v82];
    }
    if (v87) {
      objc_msgSend(v61, "setYearForWeekOfYear:");
    }
    goto LABEL_145;
  }
  unint64_t v61 = 0;
LABEL_145:
  __n128 result = *(void *)(*(void *)(v7[5] + 8) + 48);
  if (!result && v13 != 42)
  {
    uint64_t v63 = v7[7];
    if (v63 && v61)
    {
      objc_msgSend(v61, "setTimeZone:");
      uint64_t v63 = v7[7];
    }
    if (v63)
    {
      if (v11) {
        objc_msgSend(v11, "setTimeZone:");
      }
    }
    operator new();
  }
  if (result && v13 == 42) {
    return NLTextSlotRecurrentEvent::setEventDateRange(result, *(void *)(*(void *)(v7[4] + 8) + 48), *(void *)(*(void *)(v7[4] + 8) + 56));
  }
  return result;
}

void sub_1A4378A2C(_Unwind_Exception *a1)
{
  MEMORY[0x1A625B130](v1, 0x1060C407B31EA7ELL);
  _Unwind_Resume(a1);
}

void std::shared_ptr<NLTextSlotRecurrentEvent>::reset[abi:ne180100]<NLTextSlotRecurrentEvent,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<NLTextSlotRecurrentEvent>::shared_ptr[abi:ne180100]<NLTextSlotRecurrentEvent,void>(&v2, a2);
}

void NLSearchParserManagerWrapper::~NLSearchParserManagerWrapper(id *this)
{
  if (*this) {
}
  }

void nlp::CFScopedPtr<__CFCalendar *>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void std::shared_ptr<NLTextSlotRecurrentEvent>::shared_ptr[abi:ne180100]<NLTextSlotRecurrentEvent,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A4378B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<NLTextSlotRecurrentEvent>::reset[abi:ne180100]((NLTextSlotRecurrentEvent **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<NLTextSlotRecurrentEvent *,std::shared_ptr<NLTextSlotRecurrentEvent>::__shared_ptr_default_delete<NLTextSlotRecurrentEvent,NLTextSlotRecurrentEvent>,std::allocator<NLTextSlotRecurrentEvent>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

NLTextSlotRecurrentEvent *std::__shared_ptr_pointer<NLTextSlotRecurrentEvent *,std::shared_ptr<NLTextSlotRecurrentEvent>::__shared_ptr_default_delete<NLTextSlotRecurrentEvent,NLTextSlotRecurrentEvent>,std::allocator<NLTextSlotRecurrentEvent>>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(NLTextSlotRecurrentEvent **)(a1 + 24);
  if (result)
  {
    NLTextSlotRecurrentEvent::~NLTextSlotRecurrentEvent(result);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<NLTextSlotRecurrentEvent *,std::shared_ptr<NLTextSlotRecurrentEvent>::__shared_ptr_default_delete<NLTextSlotRecurrentEvent,NLTextSlotRecurrentEvent>,std::allocator<NLTextSlotRecurrentEvent>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

NLTextSlotRecurrentEvent *std::unique_ptr<NLTextSlotRecurrentEvent>::reset[abi:ne180100](NLTextSlotRecurrentEvent **a1, NLTextSlotRecurrentEvent *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    NLTextSlotRecurrentEvent::~NLTextSlotRecurrentEvent(result);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

void NLDevanagariNasalOrthographyConverter::NLDevanagariNasalOrthographyConverter(NLDevanagariNasalOrthographyConverter *this)
{
  v46.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F143B8];
  *((_OWORD *)this + 2) = 0u;
  long long v2 = (void *)((char *)this + 32);
  *(void *)this = &unk_1EF7CDCC8;
  *((void *)this + 1) = @"्";
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  uint64_t v3 = (void *)((char *)this + 72);
  *((_DWORD *)this + 16) = 1065353216;
  *(_OWORD *)((char *)this + 8std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 26) = 1065353216;
  *((_OWORD *)this + 7) = 0u;
  uint64_t v4 = (void *)((char *)this + 112);
  *((_OWORD *)this + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 36) = 1065353216;
  *(_OWORD *)((char *)this + 152) = 0u;
  long long v5 = (void *)((char *)this + 152);
  *(_OWORD *)((char *)this + 16std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 46) = 1065353216;
  *((_OWORD *)this + 12) = 0u;
  int v6 = (void *)((char *)this + 192);
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 1065353216;
  CFMutableStringRef Mutable = CFCharacterSetCreateMutable(0);
  v47.CFIndex location = 2325;
  v47.CFIndex length = 37;
  CFCharacterSetAddCharactersInRange(Mutable, v47);
  v48.CFIndex location = 2392;
  v48.CFIndex length = 8;
  CFCharacterSetAddCharactersInRange(Mutable, v48);
  v49.CFIndex location = 2424;
  v49.CFIndex length = 8;
  CFCharacterSetAddCharactersInRange(Mutable, v49);
  *((void *)this + 2) = CFCharacterSetCreateCopy(0, Mutable);
  CFRelease(Mutable);
  *((void *)this + 3) = CFCharacterSetCreateWithCharactersInString(0, @"ङञणनम");
  std::string::basic_string[abi:ne180100]<0>(v13, "क");
  std::string::basic_string[abi:ne180100]<0>(v14, "ख");
  std::string::basic_string[abi:ne180100]<0>(v15, "ग");
  std::string::basic_string[abi:ne180100]<0>(v16, "घ");
  std::string::basic_string[abi:ne180100]<0>(&v17, "च");
  std::string::basic_string[abi:ne180100]<0>(v18, "छ");
  std::string::basic_string[abi:ne180100]<0>(v19, "ज");
  std::string::basic_string[abi:ne180100]<0>(v20, "झ");
  std::string::basic_string[abi:ne180100]<0>(&v21, "ट");
  std::string::basic_string[abi:ne180100]<0>(v22, "ठ");
  std::string::basic_string[abi:ne180100]<0>(v23, "ड");
  std::string::basic_string[abi:ne180100]<0>(v24, "ढ");
  std::string::basic_string[abi:ne180100]<0>(v25, "त");
  std::string::basic_string[abi:ne180100]<0>(v26, "थ");
  std::string::basic_string[abi:ne180100]<0>(v27, "द");
  std::string::basic_string[abi:ne180100]<0>(v28, "ध");
  std::string::basic_string[abi:ne180100]<0>(v29, "ड़");
  std::string::basic_string[abi:ne180100]<0>(v30, "ड़");
  std::string::basic_string[abi:ne180100]<0>(v31, "ढ़");
  std::string::basic_string[abi:ne180100]<0>(v32, "ढ़");
  std::string::basic_string[abi:ne180100]<0>(v33, "क़");
  std::string::basic_string[abi:ne180100]<0>(v34, "क़");
  std::string::basic_string[abi:ne180100]<0>(v35, "ख़");
  std::string::basic_string[abi:ne180100]<0>(v36, "ख़");
  std::string::basic_string[abi:ne180100]<0>(v37, "ग़");
  std::string::basic_string[abi:ne180100]<0>(v38, "ग़");
  std::string::basic_string[abi:ne180100]<0>(v39, "फ़");
  std::string::basic_string[abi:ne180100]<0>(v40, "फ़");
  std::string::basic_string[abi:ne180100]<0>(v41, "ज़");
  std::string::basic_string[abi:ne180100]<0>(v42, "ज़");
  std::string::basic_string[abi:ne180100]<0>(v43, "श");
  std::string::basic_string[abi:ne180100]<0>(v44, "ष");
  std::string::basic_string[abi:ne180100]<0>(v45, "स");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v2, v13, &v46);
  uint64_t v8 = 33;
  do
  {
    if (SHIBYTE(v13[v8 - 1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13[v8 - 1].__r_.__value_.__l.__data_);
    }
    --v8;
  }
  while (v8 * 24);
  std::string::basic_string[abi:ne180100]<0>(v13, "प");
  std::string::basic_string[abi:ne180100]<0>(v14, "फ");
  std::string::basic_string[abi:ne180100]<0>(v15, "ब");
  std::string::basic_string[abi:ne180100]<0>(v16, "भ");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v3, v13, &v17);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v16[i + 2]) < 0) {
      operator delete((void *)v16[i]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "ट");
  std::string::basic_string[abi:ne180100]<0>(v14, "ठ");
  std::string::basic_string[abi:ne180100]<0>(v15, "ड");
  std::string::basic_string[abi:ne180100]<0>(v16, "ड़");
  std::string::basic_string[abi:ne180100]<0>(&v17, "ड़");
  std::string::basic_string[abi:ne180100]<0>(v18, "ढ");
  std::string::basic_string[abi:ne180100]<0>(v19, "ढ़");
  std::string::basic_string[abi:ne180100]<0>(v20, "ढ़");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v4, v13, &v21);
  for (uint64_t j = 0; j != -24; j -= 3)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "क");
  std::string::basic_string[abi:ne180100]<0>(v14, "ख");
  std::string::basic_string[abi:ne180100]<0>(v15, "ग");
  std::string::basic_string[abi:ne180100]<0>(v16, "घ");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v5, v13, &v17);
  for (uint64_t k = 0; k != -12; k -= 3)
  {
    if (SHIBYTE(v16[k + 2]) < 0) {
      operator delete((void *)v16[k]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "च");
  std::string::basic_string[abi:ne180100]<0>(v14, "छ");
  std::string::basic_string[abi:ne180100]<0>(v15, "ज");
  std::string::basic_string[abi:ne180100]<0>(v16, "झ");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v6, v13, &v17);
  for (uint64_t m = 0; m != -12; m -= 3)
  {
    if (SHIBYTE(v16[m + 2]) < 0) {
      operator delete((void *)v16[m]);
    }
  }
}

void sub_1A4379390(_Unwind_Exception *a1)
{
  uint64_t v9 = 0;
  while (1)
  {
    if (*(char *)(v7 + v9 + 95) < 0) {
      operator delete(*(void **)(v7 + v9 + 72));
    }
    v9 -= 24;
    if (v9 == -96)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v6);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v5);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v1);
      _Unwind_Resume(a1);
    }
  }
}

void NLDevanagariNasalOrthographyConverter::~NLDevanagariNasalOrthographyConverter(NLDevanagariNasalOrthographyConverter *this)
{
  *(void *)this = &unk_1EF7CDCC8;
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 3);
  if (v3) {
    CFRelease(v3);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 192);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 152);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

{
  uint64_t vars8;

  NLDevanagariNasalOrthographyConverter::~NLDevanagariNasalOrthographyConverter(this);

  JUMPOUT(0x1A625B130);
}

BOOL NLDevanagariNasalOrthographyConverter::isConsonant(CFStringRef *this, CFStringRef theString)
{
  CFStringRef v2 = theString;
  int HasSuffix = CFStringHasSuffix(theString, this[1]);
  if (HasSuffix)
  {
    v9.CFIndex length = CFStringGetLength(v2) - 1;
    v9.CFIndex location = 0;
    CFStringRef v2 = CFStringCreateWithSubstring(0, v2, v9);
  }
  if (CFStringGetLength(v2) < 1)
  {
    BOOL v7 = 0;
    if (!HasSuffix) {
      return v7;
    }
    goto LABEL_5;
  }
  CFCharacterSetRef v5 = (const __CFCharacterSet *)this[2];
  UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(v2, 0);
  BOOL v7 = CFCharacterSetIsCharacterMember(v5, CharacterAtIndex) != 0;
  if (HasSuffix) {
LABEL_5:
  }
    CFRelease(v2);
  return v7;
}

BOOL NLDevanagariNasalOrthographyConverter::isNasal(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString = createCFStringFromString(a2);
  int HasSuffix = CFStringHasSuffix(CFStringFromString, *(CFStringRef *)(a1 + 8));
  CFStringRef v5 = CFStringFromString;
  if (HasSuffix)
  {
    v10.CFIndex length = CFStringGetLength(CFStringFromString) - 1;
    v10.CFIndex location = 0;
    CFStringRef v5 = CFStringCreateWithSubstring(0, CFStringFromString, v10);
  }
  if (CFStringGetLength(v5) == 1)
  {
    CFCharacterSetRef v6 = *(const __CFCharacterSet **)(a1 + 24);
    UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(v5, 0);
    BOOL v8 = CFCharacterSetIsCharacterMember(v6, CharacterAtIndex) != 0;
    if (!HasSuffix) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  BOOL v8 = 0;
  if (HasSuffix) {
LABEL_7:
  }
    CFRelease(v5);
LABEL_8:
  CFRelease(CFStringFromString);
  return v8;
}

void NLDevanagariNasalOrthographyConverter::getSimplifiedFormForNasalConsonantCombination(CFStringRef *this@<X0>, CFStringRef theString@<X1>, const __CFString *a3@<X2>, uint64_t a4@<X8>)
{
  CFStringRef v5 = theString;
  v34[2] = *MEMORY[0x1E4F143B8];
  int HasSuffix = CFStringHasSuffix(theString, this[1]);
  if (HasSuffix)
  {
    v35.CFIndex length = CFStringGetLength(v5) - 1;
    v35.CFIndex location = 0;
    CFStringRef v5 = CFStringCreateWithSubstring(0, v5, v35);
  }
  int v9 = CFStringHasSuffix(a3, this[1]);
  CFStringRef v10 = a3;
  if (v9)
  {
    v36.CFIndex length = CFStringGetLength(a3) - 1;
    v36.CFIndex location = 0;
    CFStringRef v10 = CFStringCreateWithSubstring(0, a3, v36);
  }
  getUTF8StringFromCFString(v10, v32);
  getUTF8StringFromCFString(a3, &__p);
  std::string::basic_string[abi:ne180100]<0>((void *)a4, "");
  if (CFStringCompare(v5, @"न", 0))
  {
    if (CFStringCompare(v5, @"म", 0))
    {
      if (CFStringCompare(v5, @"ण", 0))
      {
        if (CFStringCompare(v5, @"ङ", 0))
        {
          if (CFStringCompare(v5, @"ञ", 0)) {
            goto LABEL_58;
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(this + 24, (unsigned __int8 *)v32))
          {
            goto LABEL_25;
          }
          getUTF8StringFromCFString(v5, &v27);
          std::string v21 = std::string::append(&v27, "्");
          long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v28.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          if ((v31 & 0x80u) == 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if ((v31 & 0x80u) == 0) {
            std::string::size_type v14 = v31;
          }
          else {
            std::string::size_type v14 = v30;
          }
        }
        else
        {
          if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(this + 19, (unsigned __int8 *)v32))
          {
            goto LABEL_25;
          }
          getUTF8StringFromCFString(v5, &v27);
          uint64_t v19 = std::string::append(&v27, "्");
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if ((v31 & 0x80u) == 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if ((v31 & 0x80u) == 0) {
            std::string::size_type v14 = v31;
          }
          else {
            std::string::size_type v14 = v30;
          }
        }
LABEL_53:
        double v23 = std::string::append(&v28, p_p, v14);
        std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
        v34[0] = v23->__r_.__value_.__l.__size_;
        *(void *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a4 + 23) < 0) {
          operator delete(*(void **)a4);
        }
        uint64_t v26 = v34[0];
        *(void *)a4 = v24;
        *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v26;
        *(void *)(a4 + 15) = *(void *)((char *)v34 + 7);
        *(unsigned char *)(a4 + 23) = v25;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v27.__r_.__value_.__l.__data_);
          if (!v9) {
            goto LABEL_60;
          }
LABEL_59:
          CFRelease(v10);
          goto LABEL_60;
        }
LABEL_58:
        if (!v9) {
          goto LABEL_60;
        }
        goto LABEL_59;
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(this + 14, (unsigned __int8 *)v32))
      {
        getUTF8StringFromCFString(v5, &v27);
        std::string v17 = std::string::append(&v27, "्");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if ((v31 & 0x80u) == 0) {
          p_p = (const std::string::value_type *)&__p;
        }
        else {
          p_p = (const std::string::value_type *)__p;
        }
        if ((v31 & 0x80u) == 0) {
          std::string::size_type v14 = v31;
        }
        else {
          std::string::size_type v14 = v30;
        }
        goto LABEL_53;
      }
    }
    else if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(this + 9, (unsigned __int8 *)v32))
    {
      getUTF8StringFromCFString(v5, &v27);
      uint64_t v15 = std::string::append(&v27, "्");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if ((v31 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v14 = v31;
      }
      else {
        std::string::size_type v14 = v30;
      }
      goto LABEL_53;
    }
  }
  else if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(this + 4, (unsigned __int8 *)v32))
  {
    getUTF8StringFromCFString(v5, &v27);
    int v11 = std::string::append(&v27, "्");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((v31 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v31 & 0x80u) == 0) {
      std::string::size_type v14 = v31;
    }
    else {
      std::string::size_type v14 = v30;
    }
    goto LABEL_53;
  }
LABEL_25:
  std::operator+<char>();
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v28;
  if (v9) {
    goto LABEL_59;
  }
LABEL_60:
  if (HasSuffix) {
    CFRelease(v5);
  }
  if ((char)v31 < 0) {
    operator delete(__p);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
}

void sub_1A4379CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void NLDevanagariNasalOrthographyConverter::convertToModernOrthography(CFStringRef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v27 = *(std::string *)a2;
  }
  NLDevanagariCharTokenizer::NLDevanagariCharTokenizer(v28, &v27, 0, 0);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  CFStringRef CFStringFromString = createCFStringFromString(a2);
  uint64_t v25 = a3;
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringRef Copy = 0;
  while (NLDevanagariCharTokenizer::advance((NLDevanagariCharTokenizer *)v28))
  {
    v33.CFIndex location = NLDevanagariCharTokenizer::currentTokenRange((NLDevanagariCharTokenizer *)v28);
    v33.CFIndex length = v9;
    CFStringRef v10 = CFStringCreateWithSubstring(0, CFStringFromString, v33);
    getUTF8StringFromCFString(v10, &v26);
    BOOL isConsonant = NLDevanagariNasalOrthographyConverter::isConsonant(a1, v10);
    if (Copy) {
      BOOL v12 = isConsonant;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12)
    {
      if (CFStringGetLength(Copy) < 1)
      {
        BOOL v15 = 0;
      }
      else
      {
        NLDevanagariNasalOrthographyConverter::getSimplifiedFormForNasalConsonantCombination(a1, Copy, v10, (uint64_t)&__p);
        uint64_t v13 = v30;
        unsigned __int8 v14 = v30;
        if ((v30 & 0x80u) != 0) {
          uint64_t v13 = *((void *)&__p + 1);
        }
        BOOL v15 = v13 != 0;
        if (v13)
        {
          CFIndex Length = CFStringGetLength(Mutable);
          CFIndex v17 = CFStringGetLength(Copy);
          CFIndex v18 = CFStringGetLength(Copy);
          CFStringRef v19 = createCFStringFromString((uint64_t)&__p);
          v32.CFIndex location = Length - v17;
          v32.CFIndex length = v18;
          CFStringReplace(Mutable, v32, v19);
          CFRelease(v19);
          unsigned __int8 v14 = v30;
        }
        if ((v14 & 0x80) != 0) {
          operator delete((void *)__p);
        }
      }
    }
    else
    {
      BOOL v15 = 0;
      if (!Copy) {
        goto LABEL_23;
      }
    }
    CFRelease(Copy);
LABEL_23:
    if (!((unsigned int (*)(CFStringRef *, std::string *))(*a1)->data)(a1, &v26)
      || !CFStringHasSuffix(v10, a1[1]))
    {
      CFStringRef Copy = 0;
      if (v15) {
        goto LABEL_29;
      }
LABEL_28:
      CFStringAppend(Mutable, v10);
      goto LABEL_29;
    }
    CFStringRef Copy = CFStringCreateCopy(0, v10);
    if (!v15) {
      goto LABEL_28;
    }
LABEL_29:
    if (v10) {
      CFRelease(v10);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  getUTF8StringFromCFString(Mutable, (void *)v25);
  if (Copy)
  {
    v34.CFIndex length = CFStringGetLength(Mutable) - 2;
    v34.CFIndex location = 0;
    CFStringRef v20 = CFStringCreateWithSubstring(0, Mutable, v34);
    getUTF8StringFromCFString(v20, &v26);
    std::string v21 = std::string::append(&v26, "ं");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
    *(void *)&long long __p = v21->__r_.__value_.__l.__size_;
    *(void *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(v25 + 23) < 0) {
      operator delete(*(void **)v25);
    }
    uint64_t v24 = __p;
    *(void *)uint64_t v25 = v22;
    *(void *)(v25 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v24;
    *(void *)(v25 + 15) = *(void *)((char *)&__p + 7);
    *(unsigned char *)(v25 + 23) = v23;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    CFRelease(v20);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  if (Copy) {
    CFRelease(Copy);
  }
  NLDevanagariCharTokenizer::~NLDevanagariCharTokenizer((NLDevanagariCharTokenizer *)v28);
}

void sub_1A437A0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(void *a1, std::string *__str, std::string *a3)
{
  uint64_t v4 = __str;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = __str == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      CFStringRef v10 = (void **)v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 16), v4);
        CFStringRef v10 = *(void ***)v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, v8);
        ++v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = (uint64_t)v10;
      }
      while (!v11);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a1, (unsigned __int8 *)v4, (uint64_t)v4);
    ++v4;
  }
}

void sub_1A437A250(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1A437A26C(_Unwind_Exception *a1)
{
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(void *a1, uint64_t a2)
{
  CFStringRef v2 = (void *)a2;
  uint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  uint64_t v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    CFStringRef v10 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == a2)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3)) {
            return i;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4) {
              v12 %= v4;
            }
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  unint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    void *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    unint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void NLRomanHindiWordLanguageModeler::NLRomanHindiWordLanguageModeler(NLRomanHindiWordLanguageModeler *this, const __CFDictionary *a2)
{
  NLAbstractLanguageModeler::NLAbstractLanguageModeler(this, @"hi-Latn");
  *(void *)unint64_t v3 = &unk_1EF7CDC10;
  NLRomanHindiWordLanguageModeler::loadLanguageModel(v3, a2);
}

void sub_1A437A5BC(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLRomanHindiWordLanguageModeler::loadLanguageModel(NLRomanHindiWordLanguageModeler *this, CFDictionaryRef theDict)
{
  if (theDict) {
    MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  }
  else {
    MutableCFStringRef Copy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  uint8x8_t v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F723C8], @"hi-Latn");
  *((void *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (!*((void *)this + 1))
  {
    unint64_t v6 = *(void (**)(void))(*(void *)NL::CFLogger::sharedInstance(v5) + 16);
    v6();
  }
}

void NLRomanHindiWordLanguageModeler::~NLRomanHindiWordLanguageModeler(NLRomanHindiWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);

  JUMPOUT(0x1A625B130);
}

double NL::ParserContext::ParserContext(NL::ParserContext *this)
{
  *(_OWORD *)((char *)this + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)&double result = 1;
  *((_OWORD *)this + 3) = xmmword_1A43F7300;
  *((_WORD *)this + 32) = 1;
  *((unsigned char *)this + 66) = 0;
  *((void *)this + 1nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = (char *)this + 104;
  return result;
}

uint64_t NL::ParserContext::index(NL::ParserContext *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (!v1)
  {
    int v3 = *((_DWORD *)this + 10);
    if (v3 == 3)
    {
      return 2;
    }
    else if (v3 == 1)
    {
      CFURLRef v4 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"/Library/Application Support/Apple/Spotlight/MailUsesCoreSpotlight", kCFURLPOSIXPathStyle, 0);
      if (CFURLResourceIsReachable(v4, 0)) {
        uint64_t v1 = 2;
      }
      else {
        uint64_t v1 = 1;
      }
      if (v4) {
        CFRelease(v4);
      }
    }
    else
    {
      return 3;
    }
  }
  return v1;
}

void sub_1A437A7CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NL::ParserContext::setDate(const void **this, const __CFDate *a2)
{
  nlp::CFScopedPtr<__CFDate const*>::reset(this, 0);
  if (a2)
  {
    CFTypeRef v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFDate const*>::reset(this, v4);
  }
}

void nlp::CFScopedPtr<__CFDate const*>::reset(const void **a1, const void *a2)
{
  CFTypeRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t NL::ParserContext::setLocale(const void **this, const __CFLocale *a2)
{
  CFTypeRef v4 = this + 1;
  nlp::CFScopedPtr<__CFLocale const*>::reset(this + 1, 0);
  if (a2)
  {
    CFTypeRef v5 = CFRetain(a2);
    nlp::CFScopedPtr<__CFLocale const*>::reset(v4, v5);
  }
  uint64_t result = MEMORY[0x1A625A3A0](*v4);
  if (*v4)
  {
    CFStringRef v7 = (const __CFString *)result;
    int HasPrefix = CFStringHasPrefix((CFStringRef)result, @"ja");
    uint64_t result = CFStringHasPrefix(v7, @"zh");
    if (result | HasPrefix)
    {
      *((unsigned char *)this + 64) = 0;
      if (HasPrefix) {
        *((unsigned char *)this + 65) = 1;
      }
    }
  }
  return result;
}

void NL::ParserContext::setUsername(const void **this, const __CFString *a2)
{
  int v3 = this + 2;
  nlp::CFScopedPtr<__CFString const*>::reset(this + 2, 0);
  if (a2)
  {
    CFTypeRef v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset(v3, v4);
  }
}

void NL::ParserContext::setReferenceDatesPath(const void **this, const __CFURL *a2)
{
  int v3 = this + 3;
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 3, 0);
  if (a2)
  {
    CFMutableDictionaryRef DictionaryWithContentsOfURL = createDictionaryWithContentsOfURL(a2, 0);
    nlp::CFScopedPtr<__CFDictionary const*>::reset(v3, DictionaryWithContentsOfURL);
  }
}

void nlp::CFScopedPtr<__CFDictionary const*>::reset(const void **a1, const void *a2)
{
  CFTypeRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void NL::ParserContext::setCanonicalRegions(const void **this, const __CFDictionary *a2)
{
  int v3 = this + 4;
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 4, 0);
  if (a2)
  {
    CFTypeRef v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFDictionary const*>::reset(v3, v4);
  }
}

BOOL NL::ParserContext::regionValidForLanguage(NL::ParserContext *this, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  if (!a4 || !a2 || !*((void *)this + 4)) {
    return 0;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a3)
  {
    CFStringRef v8 = CFStringCreateWithFormat(v7, 0, @"%@-%@", a2, a3);
    if (!CFDictionaryContainsKey(*((CFDictionaryRef *)this + 4), v8)) {
      goto LABEL_16;
    }
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 4), v8);
  }
  else
  {
    CFStringRef v8 = CFStringCreateWithFormat(v7, 0, @"%@_%@", a2, a4);
    int v10 = CFDictionaryContainsKey(*((CFDictionaryRef *)this + 4), v8);
    CFDictionaryRef v11 = (const __CFDictionary *)*((void *)this + 4);
    if (v10)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v11, v8);
    }
    else
    {
      if (!CFDictionaryContainsKey(v11, a2)) {
        goto LABEL_16;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 4), a2);
    }
  }
  if (!Value
    || (CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(Value, @"ValidRegions"), (v13 = v12) == 0)
    || (v16.length = CFArrayGetCount(v12), v16.CFIndex location = 0, !CFArrayContainsValue(v13, v16, a4)))
  {
LABEL_16:
    char v14 = 1;
    if (!v8) {
      return (v14 & 1) == 0;
    }
    goto LABEL_17;
  }
  char v14 = 0;
  if (v8) {
LABEL_17:
  }
    CFRelease(v8);
  return (v14 & 1) == 0;
}

void sub_1A437ABCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

NL::ParserContext *NL::ParserContext::canonicalRegionForLanguage(const __CFDictionary **this, const __CFString *key, const __CFString *a3)
{
  if (!key) {
    return 0;
  }
  int v3 = (NL::ParserContext *)this;
  CFDictionaryRef v4 = this[4];
  if (!v4) {
    return 0;
  }
  if (a3)
  {
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@-%@", key, a3);
    int v7 = CFDictionaryContainsKey(*((CFDictionaryRef *)v3 + 4), v6);
    if (v7)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)v3 + 4), v6);
      int v3 = (NL::ParserContext *)CFDictionaryGetValue(Value, @"CanonicalRegion");
      if (!v6)
      {
LABEL_13:
        if (v7) {
          return v3;
        }
        return 0;
      }
    }
    else if (!v6)
    {
      goto LABEL_13;
    }
    CFRelease(v6);
    goto LABEL_13;
  }
  if (!CFDictionaryContainsKey(v4, key)) {
    return 0;
  }
  CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)v3 + 4), key);

  return (NL::ParserContext *)CFDictionaryGetValue(v9, @"CanonicalRegion");
}

void sub_1A437ACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::ParserContext::primaryCategory(NL::ParserContext *this)
{
  uint64_t v1 = *((void *)this + 6);
  if ((v1 & 0x401C000) != 0) {
    return 1;
  }
  if ((v1 & 0x200000) != 0) {
    return 8;
  }
  if ((v1 & 0x2000000) != 0) {
    return 15;
  }
  if ((v1 & 0x20000) != 0) {
    return 14;
  }
  if ((v1 & 0x100000) != 0) {
    return 11;
  }
  if ((v1 & 0x40000) != 0) {
    return 12;
  }
  if ((v1 & 0x800000) != 0) {
    int v3 = 7;
  }
  else {
    int v3 = 0;
  }
  if ((v1 & 0x400000) != 0) {
    int v4 = 10;
  }
  else {
    int v4 = v3;
  }
  if ((v1 & 0x1000000) != 0) {
    unsigned int v5 = 13;
  }
  else {
    unsigned int v5 = v4;
  }
  if ((v1 & 0x80000) != 0) {
    return 16;
  }
  else {
    return v5;
  }
}

uint64_t NL::ParserContext::secondaryCategory(NL::ParserContext *this)
{
  uint64_t v1 = *((void *)this + 6);
  if ((v1 & 0x200000) != 0) {
    return 8;
  }
  if ((v1 & 0x2000000) != 0) {
    return 15;
  }
  if ((v1 & 0x20000) != 0) {
    return 14;
  }
  if ((v1 & 0x100000) != 0) {
    return 11;
  }
  if ((v1 & 0x40000) != 0) {
    return 12;
  }
  if ((v1 & 0x800000) != 0) {
    int v2 = 7;
  }
  else {
    int v2 = 0;
  }
  if ((v1 & 0x400000) != 0) {
    int v3 = 10;
  }
  else {
    int v3 = v2;
  }
  if ((v1 & 0x1000000) != 0) {
    unsigned int v4 = 13;
  }
  else {
    unsigned int v4 = v3;
  }
  if ((v1 & 0x80000) != 0) {
    return 16;
  }
  else {
    return v4;
  }
}

void NL::ParserContext::close(NL::ParserContext *this)
{
  unint64_t v2 = *((void *)this + 6);
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v2 & 0x200) == 0 || *((void *)this + 11) != 1)
    {
      if ((v2 & 0x207000000000) == 0) {
        goto LABEL_15;
      }
      uint64_t v3 = 336;
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if ((v2 & 0x400) != 0)
  {
    *((void *)this + 6) = v2 & 0xFFFFFFFFFFFFFCBFLL | 0x240;
    if ((v2 & 0x40C) != 0)
    {
      unint64_t v2 = v2 & 0xFFFFFFFFFFFFFCBBLL | 0x244;
      goto LABEL_14;
    }
    unint64_t v2 = v2 & 0xFFFFFFFFFFFFFCBFLL | 0x240;
    goto LABEL_15;
  }
  if ((v2 & 0x12) != 0 && *((void *)this + 11) >= 2uLL)
  {
    v2 &= 0xFFFFFFFFFFFFFCB9;
    uint64_t v3 = 580;
LABEL_11:
    v2 |= v3;
LABEL_14:
    *((void *)this + 6) = v2;
    goto LABEL_15;
  }
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x404) != 0)
    {
      if (*((void *)this + 11) >= 2uLL)
      {
        v2 &= ~0x200uLL;
        uint64_t v3 = 320;
        goto LABEL_11;
      }
      goto LABEL_78;
    }
    goto LABEL_80;
  }
  unint64_t v5 = *((void *)this + 11);
  if (v5 >= 2)
  {
    v2 &= 0xFFFFFFFFFFFFFCBDLL;
    goto LABEL_55;
  }
  if (v5 == 1)
  {
    if ((v2 & 0xF000000100) != 0)
    {
      v2 &= 0xFFFFFFFFFFFFF8FFLL;
      uint64_t v3 = 1604;
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  if ((v2 & 0x504) == 0)
  {
LABEL_80:
    if ((v2 & 0x12) != 0)
    {
      *((void *)this + 6) = v2 | 0x140;
      if ((v2 & 0x7000000000) != 0)
      {
        uint64_t v3 = 832;
        goto LABEL_11;
      }
      v2 |= 0x140uLL;
      goto LABEL_15;
    }
    if ((v2 & 0x80000000) == 0 || !*((void *)this + 11)) {
      goto LABEL_15;
    }
    v2 &= 0xFFFFFFFFFFFFFCFFLL;
LABEL_55:
    uint64_t v3 = 576;
    goto LABEL_11;
  }
LABEL_78:
  if ((*((void *)this + 6) & 0x80000004) != 0x80000000)
  {
    v2 &= 0xFFFFFFFFFFFFF8FFLL;
LABEL_8:
    uint64_t v3 = 1600;
    goto LABEL_11;
  }
LABEL_15:
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v2 & 0x200000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILVIEWED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v2 = *((void *)this + 6);
    }
    if ((~(_WORD)v2 & 0x300) != 0)
    {
      if ((v2 & 0x204) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        goto LABEL_183;
      }
      if ((v2 & 0x80000112) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_183;
  }
  if ((v2 & 0x1A0000000000) != 0)
  {
    if ((~(_WORD)v2 & 0x300) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_69;
    }
    if ((v2 & 0x200) == 0)
    {
      if ((v2 & 0x10080000012) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      goto LABEL_69;
    }
    goto LABEL_237;
  }
  if ((v2 & 0x200000000000) != 0)
  {
LABEL_69:
    std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_183;
  }
  if ((v2 & 0x8000) != 0 || (int v4 = *((_DWORD *)this + 10), v4 == 1))
  {
    if ((v2 & 0x200000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILVIEWED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v2 = *((void *)this + 6);
    }
    if ((~(_WORD)v2 & 0x300) != 0)
    {
      if ((v2 & 0x8000000800) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        if ((v2 & 0x604) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
          goto LABEL_183;
        }
        if ((v2 & 0xC0000112) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
          if (v10 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
LABEL_183:
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_185;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v2 & 0x8000000800) != 0 || (v2 & 0x300) == 0x300)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      if ((v2 & 0x204) != 0)
      {
LABEL_91:
        std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        goto LABEL_183;
      }
      if ((v2 & 0xC0000112) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    goto LABEL_251;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v2 & 0x8000000800) != 0 || (v2 & 0x300) == 0x300)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      if ((v2 & 0x204) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_91;
      }
      if ((v2 & 0xC0000112) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGERECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    goto LABEL_251;
  }
  if (v4 == 3)
  {
    if ((v2 & 0x800) != 0)
    {
      if ((v2 & 0x10000000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_76;
      }
    }
    else if ((v2 & 0x8000000000) != 0)
    {
      if ((v2 & 0x10000000000) == 0 && (v2 & 4) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_76;
      }
    }
    else
    {
      if ((v2 & 0x80000200) != 0)
      {
LABEL_76:
        std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
LABEL_164:
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        char v6 = 1;
LABEL_167:
        uint64_t v7 = *((void *)this + 6);
        if ((v7 & 0x400000000000) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
          if (v10 < 0) {
            operator delete(__p[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "FILEADDED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        }
        else if ((v7 & 0x40000000) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        }
        else
        {
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_177;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "FILEMODIFIED");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        }
        if (v10 < 0) {
          operator delete(__p[0]);
        }
LABEL_177:
        if (v6) {
          goto LABEL_185;
        }
LABEL_178:
        if (!*((void *)this + 14)) {
          goto LABEL_185;
        }
        uint64_t v8 = *((void *)this + 6);
        if ((v8 & 0x100) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "SENTFROM");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        }
        else
        {
          if ((v8 & 0x200) == 0) {
            goto LABEL_185;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVEDFROM");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        }
        goto LABEL_183;
      }
      if ((v2 & 0x112) == 0)
      {
        char v6 = 0;
        goto LABEL_167;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_164;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v2 & 0x10000000000) != 0) {
      std::string::basic_string[abi:ne180100]<0>(__p, "USERCREATED");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
    }
    goto LABEL_233;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v2 & 0x10000000000) != 0) {
      std::string::basic_string[abi:ne180100]<0>(__p, "USERMODIFIED");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "FILEMODIFIED");
    }
    goto LABEL_233;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_161;
  }
  if ((v2 & 0x800000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "USERPRINTED");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_161;
  }
  if ((v2 & 0x600000000) != 0)
  {
    if ((v2 & 0x8000000) == 0)
    {
      if ((v2 & 0x2000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "USERWEBVIEWED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      }
      else if ((v2 & 0x200000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "USERVIEWED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      }
      else
      {
        if ((v2 & 0x400000000) == 0) {
          goto LABEL_178;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "USERDOWNLOADED");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      }
      goto LABEL_161;
    }
    if ((v2 & 0x2000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "WEBVIEWED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    }
    else
    {
      if ((v2 & 0x200000000) == 0)
      {
        if ((v2 & 0x400000000) != 0) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FILEDOWNLOADED");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "FILEVIEWED");
        }
LABEL_233:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
        goto LABEL_161;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "FILEVIEWED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    }
LABEL_161:
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_178;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (*((unsigned char *)this + 53)) {
      goto LABEL_185;
    }
    goto LABEL_237;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v2 & 0x200) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGESENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGERECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      goto LABEL_161;
    }
    goto LABEL_241;
  }
  if ((v2 & 0x12) != 0)
  {
LABEL_241:
    if ((v2 & 0x800) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGESENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if ((*((unsigned char *)this + 49) & 0x10) != 0) {
        goto LABEL_185;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
LABEL_251:
      std::string::basic_string[abi:ne180100]<0>(__p, "MSGMESSAGESENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      goto LABEL_183;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
LABEL_237:
    std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    goto LABEL_183;
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_178;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if ((*((unsigned char *)this + 49) & 0x10) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_91;
  }
LABEL_185:
  if (!*((void *)this + 14))
  {
    if (*((_DWORD *)this + 10) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    }
    else if (NL::ParserContext::index(this) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FILEMODIFIED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILSENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILRECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGESENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MESSAGERECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "SENT");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "RECEIVED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "FILECREATED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "FILEMODIFIED");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 12, (const void **)__p, (uint64_t)__p);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1A437C314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NL::ParserContext::setActionReceived(uint64_t this)
{
  *(void *)(this + 48) |= 0x240uLL;
  return this;
}

uint64_t NL::ParserContext::setActionSentFrom(uint64_t this)
{
  *(void *)(this + 48) |= 0x44uLL;
  return this;
}

uint64_t NL::ParserContext::setActionSent(uint64_t this)
{
  *(void *)(this + 48) |= 0x140uLL;
  return this;
}

uint64_t NL::ParserContext::setActionUserReceived(uint64_t this)
{
  *(void *)(this + 48) |= 0x440uLL;
  return this;
}

uint64_t NL::ParserContext::setActionUserSent(uint64_t this)
{
  *(void *)(this + 48) |= 0x50uLL;
  return this;
}

void NL::ParserContext::reset(NL::ParserContext *this)
{
  uint64_t v1 = this;
  *((void *)this + 6) = 1;
  unint64_t v2 = (void *)((char *)this + 104);
  std::__tree<std::string>::destroy((uint64_t)this + 96, *((char **)this + 13));
  *((void *)v1 + 12) = v2;
  *unint64_t v2 = 0;
  uint64_t v3 = (void *)*((void *)v1 + 10);
  uint64_t v1 = (NL::ParserContext *)((char *)v1 + 80);
  *((void *)v1 + 4) = 0;
  std::__tree<std::__value_type<__CFString const*,__CFString const*>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,__CFString const*>,std::less<__CFString const*>,true>,std::allocator<std::__value_type<__CFString const*,__CFString const*>>>::destroy((uint64_t)v1 - 8, v3);
  *((void *)v1 - 1) = v1;
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
}

uint64_t **NL::ParserContext::setParticipant(uint64_t **this, __int16 a2)
{
  __int16 v3 = a2;
  return std::__tree<short>::__emplace_unique_key_args<short,short const&>(this + 9, &v3, &v3);
}

uint64_t NL::ParserContext::setActionSentTo(uint64_t this)
{
  *(void *)(this + 48) |= 0x42uLL;
  return this;
}

uint64_t NL::ParserContext::setActionWith(uint64_t this)
{
  *(void *)(this + 48) |= 0x800uLL;
  return this;
}

uint64_t NL::ParserContext::setActionFromTo(uint64_t this)
{
  *(void *)(this + 48) |= 0x48uLL;
  return this;
}

uint64_t NL::ParserContext::setActionCreated(uint64_t this)
{
  *(void *)(this + 48) |= 0x40000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionAuthored(uint64_t this)
{
  *(void *)(this + 48) |= 0x80000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionModified(uint64_t this)
{
  *(void *)(this + 48) |= 0x100000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionViewed(uint64_t this)
{
  *(void *)(this + 48) |= 0x200000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionDownloaded(uint64_t this)
{
  *(void *)(this + 48) |= 0x400000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionPrinted(uint64_t this)
{
  *(void *)(this + 48) |= 0x800000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionPosted(uint64_t this)
{
  *(void *)(this + 48) |= 0x200000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionAdded(uint64_t this)
{
  *(void *)(this + 48) |= 0x400000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionMessaged(uint64_t this)
{
  *(void *)(this + 48) |= 0x2000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionMailed(uint64_t this)
{
  *(void *)(this + 48) |= 0x4000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionAirdropped(uint64_t this)
{
  *(void *)(this + 48) |= 0x1000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionUserAction(uint64_t this)
{
  *(void *)(this + 48) |= 0x10000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setActionShared(uint64_t this)
{
  *(void *)(this + 48) |= 0x8000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setTransportMail(uint64_t this)
{
  *(void *)(this + 48) |= 0x40000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setTransportMessages(uint64_t this)
{
  *(void *)(this + 48) |= 0x80000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setTransportAirdrop(uint64_t this)
{
  *(void *)(this + 48) |= 0x20000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setTransportSharesheet(uint64_t this)
{
  *(void *)(this + 48) |= 0x100000000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeDate(uint64_t this)
{
  *(void *)(this + 48) |= 0x8000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeAfterDate(uint64_t this)
{
  *(void *)(this + 48) |= 0x10000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeBeforeDate(uint64_t this)
{
  *(void *)(this + 48) |= 0x20000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeKind(uint64_t this)
{
  *(void *)(this + 48) |= 0x1000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeMail(uint64_t this)
{
  *(void *)(this + 48) |= 0x8000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeChat(uint64_t this)
{
  *(void *)(this + 48) |= 0x10000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeMessage(uint64_t this)
{
  *(void *)(this + 48) |= 0x4000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeWebsite(uint64_t this)
{
  *(void *)(this + 48) |= 0x2000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeAttachment(uint64_t this)
{
  *(void *)(this + 48) |= 0x4000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeAudio(uint64_t this)
{
  *(void *)(this + 48) |= 0x400000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeImage(uint64_t this)
{
  *(void *)(this + 48) |= 0x1000000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeVideo(uint64_t this)
{
  *(void *)(this + 48) |= 0x800000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributePresentation(uint64_t this)
{
  *(void *)(this + 48) |= 0x40000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeSpreadsheet(uint64_t this)
{
  *(void *)(this + 48) |= 0x80000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeDocument(uint64_t this)
{
  *(void *)(this + 48) |= 0x20000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributePdf(uint64_t this)
{
  *(void *)(this + 48) |= 0x100000uLL;
  return this;
}

uint64_t NL::ParserContext::setAttributeApplication(uint64_t this)
{
  *(void *)(this + 48) |= 0x200000uLL;
  return this;
}

BOOL NL::ParserContext::currentActionContainsSent(NL::ParserContext *this)
{
  std::string::basic_string[abi:ne180100]<0>(v9, "SENT");
  unint64_t v2 = (void *)((char *)this + 104);
  if ((void *)((char *)this + 104) == std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((void **)this + 12), (void *)this + 13, (unsigned __int8 **)v9))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "MAILSENT");
    if (v2 == std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((void **)this + 12), (void *)this + 13, (unsigned __int8 **)v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILSENT");
      BOOL v3 = v2 != std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((void **)this + 12), (void *)this + 13, (unsigned __int8 **)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      BOOL v3 = 1;
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  else
  {
    BOOL v3 = 1;
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  return v3;
}

void sub_1A437C8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

BOOL NL::ParserContext::currentActionContainsReceived(NL::ParserContext *this)
{
  std::string::basic_string[abi:ne180100]<0>(v9, "RECEIVED");
  unint64_t v2 = (void *)((char *)this + 104);
  if ((void *)((char *)this + 104) == std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((void **)this + 12), (void *)this + 13, (unsigned __int8 **)v9))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "MAILRECEIVED");
    if (v2 == std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((void **)this + 12), (void *)this + 13, (unsigned __int8 **)v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "MAILMAILRECEIVED");
      BOOL v3 = v2 != std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((void **)this + 12), (void *)this + 13, (unsigned __int8 **)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      BOOL v3 = 1;
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  else
  {
    BOOL v3 = 1;
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  return v3;
}

void sub_1A437CA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void *std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(void *a1, void *a2, unsigned __int8 **a3)
{
  BOOL v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      char v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      char v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *((unsigned __int8 *)v3 + 55);
      if ((v8 & 0x80u) == 0) {
        CFDictionaryRef v9 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 55);
      }
      else {
        CFDictionaryRef v9 = (unsigned __int8 *)v3[5];
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[4], v7, v3[5])) {
            return v3;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 55)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*((unsigned __int8 *)v3 + v10 + 32) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      CFDictionaryRef v11 = (void *)v3[1];
      if (v11)
      {
        do
        {
          CFArrayRef v12 = v11;
          CFDictionaryRef v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          CFArrayRef v12 = (void *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          BOOL v3 = v12;
        }
        while (!v13);
      }
      BOOL v3 = v12;
    }
    while (v12 != a2);
    return a2;
  }
  return v3;
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  char v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  char v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    char v6 = operator new(0x38uLL);
    uint64_t v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t **std::__tree<short>::__emplace_unique_key_args<short,short const&>(uint64_t **a1, __int16 *a2, _WORD *a3)
{
  char v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((__int16 *)v5 + 13);
        if (v7 >= v9) {
          break;
        }
        char v5 = *v8;
        char v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      char v5 = v8[1];
      if (!v5)
      {
        char v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v10 + 13) = *a3;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void NLTextSlotParserEventExtractor::NLTextSlotParserEventExtractor(NLTextSlotParserEventExtractor *this, const __CFLocale *a2)
{
  *(_OWORD *)((char *)this + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = xmmword_1A43F6B80;
  *(_OWORD *)((char *)this + 24) = xmmword_1A43F6B80;
  *(void *)this = MEMORY[0x1A625A380](*MEMORY[0x1E4F1CF80], a2);
}

void NLTextSlotParserEventExtractor::~NLTextSlotParserEventExtractor(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t NLTextSlotParserEventExtractor::getEventNameRange(NLTextSlotParserEventExtractor *this, const __CFString *a2)
{
  return *((void *)this + 1);
}

uint64_t NLTextSlotParserEventExtractor::getEventActionPhraseRange(NLTextSlotParserEventExtractor *this, const __CFString *a2)
{
  return *((void *)this + 3);
}

void NLResult::NLResult(std::string *this, long long *a2, long long *a3, long long *a4, long long *a5, long long *a6, int a7, long long *a8)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v15 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v15;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v16 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v16;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v17 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v17;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v18 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v18;
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v19 = *a6;
    this[4].__r_.__value_.__r.__words[2] = *((void *)a6 + 2);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v19;
  }
  LODWORD(this[5].__r_.__value_.__l.__data_) = a7;
  CFStringRef v20 = (std::string *)((char *)this + 128);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v21 = *a8;
    this[6].__r_.__value_.__r.__words[0] = *((void *)a8 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
}

void sub_1A437CEC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void NLResult::getLemmaID(NLResult *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void NLResult::getVocStr(NLResult *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

void NLResult::getPosStr(NLResult *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

CFStringRef *NLDevanagariCharTokenizer::NLDevanagariCharTokenizer(CFStringRef *a1, uint64_t a2, const __CFString *a3, const __CFString *a4)
{
  *a1 = createCFStringFromString(a2);
  a1[1] = a3;
  a1[2] = a4;
  CFMutableStringRef Mutable = CFCharacterSetCreateMutable(0);
  v9.CFIndex location = 2325;
  v9.CFIndex length = 37;
  CFCharacterSetAddCharactersInRange(Mutable, v9);
  v10.CFIndex location = 2392;
  v10.CFIndex length = 8;
  CFCharacterSetAddCharactersInRange(Mutable, v10);
  v11.CFIndex location = 2424;
  v11.CFIndex length = 8;
  CFCharacterSetAddCharactersInRange(Mutable, v11);
  a1[3] = (CFStringRef)Mutable;
  return a1;
}

void NLDevanagariCharTokenizer::~NLDevanagariCharTokenizer(NLDevanagariCharTokenizer *this)
{
  unint64_t v2 = *(const void **)this;
  if (v2) {
    CFRelease(v2);
  }
  BOOL v3 = (const void *)*((void *)this + 3);
  if (v3) {
    CFRelease(v3);
  }
  CFRelease(@"्");
  CFRelease(@"ं");
  CFRelease(@"़");
}

BOOL NLDevanagariCharTokenizer::advance(NLDevanagariCharTokenizer *this)
{
  CFIndex v2 = *((void *)this + 2);
  CFIndex Length = CFStringGetLength(*(CFStringRef *)this);
  if (v2 < Length)
  {
    CFIndex v4 = *((void *)this + 2);
    *((void *)this + 1) = v4;
    int v5 = CFStringGetLength(*(CFStringRef *)this);
    if (v4 < v5)
    {
      UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)this, v4);
      CFIndex v7 = v4 + 1;
      if (!CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 3), CharacterAtIndex)) {
        goto LABEL_11;
      }
      CFIndex v8 = v5;
      if (v7 < v5)
      {
        int v9 = CFStringGetCharacterAtIndex(*(CFStringRef *)this, v4 + 1);
        if (v9 == CFStringGetCharacterAtIndex(@"़", 0)) {
          CFIndex v7 = v4 + 2;
        }
      }
      if (v7 < v8)
      {
        int v10 = CFStringGetCharacterAtIndex(*(CFStringRef *)this, v7);
        if (v10 == CFStringGetCharacterAtIndex(@"्", 0)) {
          CFIndex v4 = v7 + 1;
        }
        else {
          CFIndex v4 = v7;
        }
      }
      else
      {
LABEL_11:
        CFIndex v4 = v7;
      }
    }
    *((void *)this + 2) = v4;
  }
  return v2 < Length;
}

uint64_t NLDevanagariCharTokenizer::currentTokenRange(NLDevanagariCharTokenizer *this)
{
  if (*((void *)this + 2) <= *((void *)this + 1)) {
    return -1;
  }
  else {
    return *((void *)this + 1);
  }
}

uint64_t NLPOIEntryImplReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  CFIndex v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    CFIndex v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              String = (void *)PBReaderReadString();

              id v19 = String;
              uint64_t v20 = 24;
              goto LABEL_27;
            case 2u:
              std::string v26 = (void *)PBReaderReadString();

              id v19 = v26;
              uint64_t v20 = 16;
              goto LABEL_27;
            case 3u:
              long long v21 = (void *)PBReaderReadString();

              id v19 = v21;
              uint64_t v20 = 8;
LABEL_27:
              *(void *)(a1 + v2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v19;
              goto LABEL_30;
            case 4u:
              *(unsigned char *)(a1 + 36) |= 1u;
              uint64_t v22 = *v3;
              unint64_t v23 = *(void *)(a2 + v22);
              if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(void *)(a2 + *v4))
              {
                int v24 = *(_DWORD *)(*(void *)(a2 + *v7) + v23);
                *(void *)(a2 + v22) = v23 + 4;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                int v24 = 0;
              }
              *(_DWORD *)(a1 + 32) = v24;
              goto LABEL_30;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_30:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void NLCompositeTransliteratorSeq2Seq::NLCompositeTransliteratorSeq2Seq(NLCompositeTransliteratorSeq2Seq *this, const __CFLocale *a2, const __CFURL *a3)
{
  *((void *)this + 1) = 0;
  char v6 = (const void **)((char *)this + 8);
  *(void *)this = 0;
  *((void *)this + 2) = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFLocaleRef v8 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"en_US");
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this, v8);
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  MutableCFStringRef Copy = CFStringCreateMutableCopy(v7, 0, Value);
  CFStringRef v11 = MutableCopy;
  if (MutableCopy)
  {
    CFStringAppend(MutableCopy, @"_IN");
    CFLocaleRef v12 = CFLocaleCreate(v7, v11);
    nlp::CFScopedPtr<__CFLocale const*>::reset(v6, v12);
  }
  *((void *)this + 2) = NLCompositeTransliteratorSeq2Seq::loadSeq2SeqModel((NLCompositeTransliteratorSeq2Seq *)MutableCopy, a2, a3);
  if (v11) {
    CFRelease(v11);
  }
}

void sub_1A437DC80(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFLocale const*>::reset(v2, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void *NLCompositeTransliteratorSeq2Seq::loadSeq2SeqModel(NLCompositeTransliteratorSeq2Seq *this, CFLocaleRef locale, const __CFURL *a3)
{
  v44[1] = *MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x3812000000;
  double v40 = __Block_byref_object_copy__4;
  uint64_t v41 = __Block_byref_object_dispose__4;
  int v42 = &unk_1A4417359;
  CFTypeRef v43 = 0;
  if (a3)
  {
    CFStringRef Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFLocaleRef v8 = Mutable;
    v25[0] = Mutable;
    if (Mutable)
    {
      CFStringAppend(Mutable, Value);
      CFStringAppend(v8, @"_EMT_package");
      CFURLRef v36 = CFURLCreateCopyAppendingPathComponent(v6, a3, v8, 1u);
      getFileSystemRepresentationFromCFURL(v36);
    }
  }
  else
  {
    uint64_t v29 = MEMORY[0x1E4F143A8];
    uint64_t v30 = 3221225472;
    uint64_t v31 = ___ZN32NLCompositeTransliteratorSeq2Seq16loadSeq2SeqModelEPK10__CFLocalePK7__CFURL_block_invoke;
    CFRange v32 = &unk_1E5B36928;
    CFRange v33 = &v37;
    LMEnumerateAssetDataItems();
  }
  CFStringRef v9 = (const __CFString *)v38[6];
  if (v9)
  {
    getUTF8StringFromCFString(v9, __p);
    if (v35 >= 0) {
      unint64_t v10 = __p;
    }
    else {
      unint64_t v10 = (void **)__p[0];
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    CFLocaleRef v12 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initWithString:v11];
    if (!v12
      || (id v13 = objc_alloc(MEMORY[0x1E4F60FA8]),
          v44[0] = v12,
          v14 = objc_msgSend(v13, "initWithModelURLs:task:skipNonFinalToCatchup:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v44, 1), @"siri", 0), long long v15 = dispatch_queue_create("callbackQueue", 0), objc_msgSend(v14, "setCallbackQueue:", v15), dispatch_release(v15), v12, !v14))
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "Failed to load Seq2Seq EMT model for: ");
      composeErrorMessageForLocale(locale, (const void **)v23, (uint64_t)v25);
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      uint64_t v17 = NL::CFLogger::sharedInstance(v16);
      long long v18 = v25;
      if (v26 < 0) {
        long long v18 = (void **)v25[0];
      }
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v17 + 16))(v17, 3, "%s", (const char *)v18);
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      char v14 = 0;
    }
    if (v35 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "Could not locate Seq2Seq EMT package for: ");
    composeErrorMessageForLocale(locale, (const void **)v27, (uint64_t)__p);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    uint64_t v20 = NL::CFLogger::sharedInstance(v19);
    long long v21 = __p;
    if (v35 < 0) {
      long long v21 = (void **)__p[0];
    }
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v20 + 16))(v20, 3, "%s", (const char *)v21);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    char v14 = 0;
  }
  _Block_object_dispose(&v37, 8);
  if (v43) {
    CFRelease(v43);
  }
  return v14;
}

void sub_1A437E0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(result + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void ___ZN32NLCompositeTransliteratorSeq2Seq16loadSeq2SeqModelEPK10__CFLocalePK7__CFURL_block_invoke(uint64_t a1, CFURLRef url, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
  if (PathComponent)
  {
    CFStringRef v10 = PathComponent;
    if (CFStringsAreEqual(PathComponent, @"EMT_package"))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
      CFStringRef v12 = CFURLCopyPath(url);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v11 + 48), v12);
      *a6 = 1;
    }
    CFRelease(v10);
  }
}

void sub_1A437E274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorSeq2Seq::~NLCompositeTransliteratorSeq2Seq(NLCompositeTransliteratorSeq2Seq *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2) {

  }
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 1, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this, 0);
}

void NLCompositeTransliteratorSeq2Seq::seq2SeqCandidatesForInput(uint64_t *a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  NLOSSignPostseq2SeqCandidatesForInput::NLOSSignPostseq2SeqCandidatesForInput((NLOSSignPostseq2SeqCandidatesForInput *)&v34);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1[2])
  {
    if (*((char *)a2 + 23) < 0)
    {
      if (!a2[1]) {
        goto LABEL_19;
      }
      CFAllocatorRef v6 = *a2;
    }
    else
    {
      CFAllocatorRef v6 = (uint64_t *)a2;
      if (!*((unsigned char *)a2 + 23)) {
        goto LABEL_19;
      }
    }
    CFAllocatorRef v7 = (void *)[NSString stringWithUTF8String:v6];
    CFLocaleRef v8 = (__CFString *)[MEMORY[0x1E4F28E78] string];
    uint64_t v9 = [v7 length];
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = ___ZNK32NLCompositeTransliteratorSeq2Seq25seq2SeqCandidatesForInputERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
    void v33[3] = &unk_1E5B36950;
    v33[4] = v8;
    objc_msgSend(v7, "enumerateSubstringsInRange:options:usingBlock:", 0, v9, 2, v33);
    CFStringTrimWhitespace(v8);
    CFStringRef v10 = dispatch_semaphore_create(0);
    uint64_t v27 = 0;
    char v28 = &v27;
    uint64_t v29 = 0x3052000000;
    uint64_t v30 = __Block_byref_object_copy__26_0;
    uint64_t v31 = __Block_byref_object_dispose__27_0;
    uint64_t v32 = 0;
    uint64_t v12 = a1[1];
    uint64_t v11 = (void *)a1[2];
    uint64_t v13 = *a1;
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    void v26[2] = ___ZNK32NLCompositeTransliteratorSeq2Seq25seq2SeqCandidatesForInputERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_28;
    void v26[3] = &unk_1E5B36978;
    v26[4] = v10;
    v26[5] = &v27;
    [v11 translateString:v8 from:v13 to:v12 completion:v26];
    dispatch_time_t v14 = dispatch_time(0, 60000000);
    dispatch_semaphore_wait(v10, v14);
    dispatch_release(v10);
    unint64_t v15 = objc_msgSend((id)v28[5], "count", a3 + 2);
    uint64_t v16 = 5;
    if (v15 < 5) {
      uint64_t v16 = v15;
    }
    if (v16)
    {
      uint64_t v17 = (void *)[MEMORY[0x1E4F1CA48] array];
      long long v18 = objc_msgSend((id)objc_msgSend((id)v28[5], "objectAtIndexedSubscript:", 0), "tokens");
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      uint64_t v19 = [v18 countByEnumeratingWithState:&v22 objects:v35 count:16];
      if (v19)
      {
        uint64_t v20 = *(void *)v23;
        do
        {
          for (uint64_t i = 0; i != v19; ++i)
          {
            if (*(void *)v23 != v20) {
              objc_enumerationMutation(v18);
            }
            objc_msgSend(v17, "addObject:", objc_msgSend(*(id *)(*((void *)&v22 + 1) + 8 * i), "text"));
          }
          uint64_t v19 = [v18 countByEnumeratingWithState:&v22 objects:v35 count:16];
        }
        while (v19);
      }
      [v17 componentsJoinedByString:&stru_1EF7CF078];
      operator new();
    }

    _Block_object_dispose(&v27, 8);
  }
LABEL_19:
  NLOSSignPostseq2SeqCandidatesForInput::~NLOSSignPostseq2SeqCandidatesForInput(&v34);
}

void sub_1A437E738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,os_signpost_id_t a41)
{
  CFTypeRef v43 = *(void **)v41;
  if (*(void *)v41)
  {
    *(void *)(v41 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v43;
    operator delete(v43);
  }
  NLOSSignPostseq2SeqCandidatesForInput::~NLOSSignPostseq2SeqCandidatesForInput(&a41);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK32NLCompositeTransliteratorSeq2Seq25seq2SeqCandidatesForInputERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) appendString:a2];
  BOOL v3 = *(void **)(a1 + 32);

  return [v3 appendString:@" "];
}

void __Block_byref_object_copy__26_0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__27_0(uint64_t a1)
{
}

intptr_t ___ZNK32NLCompositeTransliteratorSeq2Seq25seq2SeqCandidatesForInputERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_28(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = [a2 copy];
  BOOL v3 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v3);
}

void NLOSSignPostseq2SeqCandidatesForInput::NLOSSignPostseq2SeqCandidatesForInput(NLOSSignPostseq2SeqCandidatesForInput *this)
{
  uint64_t v2 = _nlpSignpostLog();
  *(void *)this = os_signpost_id_make_with_pointer(v2, this);
  BOOL v3 = _nlpSignpostLog();
  os_signpost_id_t v4 = *(void *)this;
  if ((unint64_t)(*(void *)this - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v5 = v3;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)CFAllocatorRef v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A431F000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "seq2SeqCandidatesForInput", (const char *)&unk_1A441379D, v6, 2u);
    }
  }
}

void NLOSSignPostseq2SeqCandidatesForInput::~NLOSSignPostseq2SeqCandidatesForInput(os_signpost_id_t *this)
{
  uint64_t v2 = _nlpSignpostLog();
  os_signpost_id_t v3 = *this;
  if (*this - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)int v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A431F000, v4, OS_SIGNPOST_INTERVAL_END, v3, "seq2SeqCandidatesForInput", (const char *)&unk_1A441379D, v5, 2u);
    }
  }
}

void NLArabicWordAnalyzer::NLArabicWordAnalyzer(NLArabicWordAnalyzer *this)
{
  *(_OWORD *)((char *)this + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *(void *)this = &unk_1EF7CCBB8;
  uint64_t v1 = (NLArabicWordAnalyzer *)((char *)this + 56);
  NLQamus::NLQamus((NLArabicWordAnalyzer *)((char *)this + 56));
  NLQamus::loadData(v1);
}

void sub_1A437EA34(_Unwind_Exception *a1)
{
  NLQamus::~NLQamus(v2);
  NLWordAnalyzer::~NLWordAnalyzer(v1);
  _Unwind_Resume(a1);
}

void NLWordAnalyzer::~NLWordAnalyzer(NLWordAnalyzer *this)
{
  *(void *)this = &unk_1EF7CCAF8;
  uint64_t v1 = (void **)((char *)this + 8);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void NLArabicWordAnalyzer::~NLArabicWordAnalyzer(NLArabicWordAnalyzer *this)
{
  *(void *)this = &unk_1EF7CCBB8;
  uint64_t v2 = (void **)((char *)this + 32);
  NLQamus::~NLQamus((NLArabicWordAnalyzer *)((char *)this + 56));
  *(void *)this = &unk_1EF7CCAF8;
  os_signpost_id_t v3 = v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  os_signpost_id_t v3 = (void **)((char *)this + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  uint64_t vars8;

  NLArabicWordAnalyzer::~NLArabicWordAnalyzer(this);

  JUMPOUT(0x1A625B130);
}

void NLArabicWordAnalyzer::getLemmasForToken(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "lemmas");
  NLArabicWordAnalyzer::analyzeWord(a1, a2, &v5);
}

void sub_1A437EC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NLArabicWordAnalyzer::analyzeWord(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  NLQamus::getBw2UTFConverter((NLQamus *)(a1 + 56), (uint64_t)&v5);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v4 = *(std::string *)a2;
  }
  NLConvertBW2UTF::utf2bw(&v4, &v6);
}

void sub_1A437F038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a29);
  if (*(char *)(v45 - 49) < 0) {
    operator delete(*(void **)(v45 - 72));
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  _Unwind_Resume(a1);
}

void NLArabicWordAnalyzer::getVariantsForToken(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "variants");
  NLArabicWordAnalyzer::analyzeWord(a1, a2, &v5);
}

void sub_1A437F260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  CFStringRef value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  long long v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      unint64_t v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>((uint64_t)p_end_cap, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    std::__split_buffer<std::string>::pointer end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::__split_buffer<std::string>::pointer end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1A437F3D4(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1A437F464(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__vdeallocate(std::vector<std::pair<std::string, std::string>> *this)
{
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  if (this->__begin_)
  {
    std::vector<std::pair<std::string, std::string>>::pointer end = this->__end_;
    std::vector<std::pair<std::string, std::string>>::pointer v4 = this->__begin_;
    if (end != begin)
    {
      do
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&this->__end_cap_, (uint64_t)--end);
      while (end != begin);
      std::vector<std::pair<std::string, std::string>>::pointer v4 = this->__begin_;
    }
    this->__end_ = begin;
    operator delete(v4);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<NLExtendedString>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A437F558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  std::vector<std::pair<std::string, std::string>>::pointer v4 = this;
  uint64_t v10 = this;
  unint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  uint64_t v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      std::vector<std::pair<std::string, std::string>>::pointer v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1A437F608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1A437F698(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v10;
      *(void *)(a3 - 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

void NLCompositeTransliteratorLexicon::NLCompositeTransliteratorLexicon(NLCompositeTransliteratorLexicon *this, const __CFLocale *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (const void **)((char *)this + 8);
  *(void *)this = 0;
  LatinToIDMap = (const void *)NLCompositeTransliteratorLexicon::loadLatinToIDMap(this, a2);
  nlp::CFScopedPtr<_LXLexicon const*>::reset((const void **)this, LatinToIDMap);
  IDToNativeMap = (const void *)NLCompositeTransliteratorLexicon::loadIDToNativeMap(v6, a2);
  nlp::CFScopedPtr<_LXLexicon const*>::reset(v4, IDToNativeMap);
}

void sub_1A437F92C(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<_LXLexicon const*>::reset(v2, 0);
  nlp::CFScopedPtr<_LXLexicon const*>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<_LXLexicon const*>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t NLCompositeTransliteratorLexicon::loadLatinToIDMap(NLCompositeTransliteratorLexicon *this, CFLocaleRef locale)
{
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFStringRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, Value);
  CFLocaleRef v19 = 0;
  uint64_t v20 = MutableCopy;
  if (!MutableCopy) {
    return 0;
  }
  CFStringRef v5 = MutableCopy;
  CFStringAppend(MutableCopy, @"_Latn");
  CFLocaleRef v6 = CFLocaleCreate(v3, v5);
  CFLocaleRef v19 = v6;
  if (v6)
  {
    CFMutableStringRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    long long v8 = Mutable;
    long long v18 = Mutable;
    if (Mutable)
    {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F72458], v6);
      uint64_t v9 = LXLexiconCreate();
      if (!v9)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Could not load lexicon for: ");
        composeErrorMessageForLocale(v6, (const void **)__p, (uint64_t)v16);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v11 = NL::CFLogger::sharedInstance(v10);
        unint64_t v12 = v16;
        if (v17 < 0) {
          unint64_t v12 = (void **)v16[0];
        }
        (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v11 + 16))(v11, 3, "%s", (const char *)v12);
        if (v17 < 0) {
          operator delete(v16[0]);
        }
      }
      CFRelease(v8);
    }
    else
    {
      uint64_t v9 = 0;
    }
    CFRelease(v6);
  }
  else
  {
    uint64_t v9 = 0;
  }
  CFRelease(v5);
  return v9;
}

void sub_1A437FB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFDictionary *>::reset(&a22, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)(v22 - 48), 0);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)(v22 - 40), 0);
  _Unwind_Resume(a1);
}

uint64_t NLCompositeTransliteratorLexicon::loadIDToNativeMap(NLCompositeTransliteratorLexicon *this, const __CFLocale *a2)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  char v14 = Mutable;
  if (!Mutable) {
    return 0;
  }
  uint64_t v4 = Mutable;
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F72458], a2);
  uint64_t v5 = LXLexiconCreate();
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Could not load lexicon for: ");
    composeErrorMessageForLocale(a2, (const void **)__p, (uint64_t)v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = NL::CFLogger::sharedInstance(v6);
    long long v8 = v12;
    if (v13 < 0) {
      long long v8 = (void **)v12[0];
    }
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v7 + 16))(v7, 3, "%s", (const char *)v8);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }
  CFRelease(v4);
  return v5;
}

void sub_1A437FCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v21 - 40), 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorLexicon::~NLCompositeTransliteratorLexicon(const void **this)
{
}

uint64_t NLCompositeTransliteratorLexicon::getTokenIDForString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) >= 0) {
    CFAllocatorRef v3 = (const char *)a3;
  }
  else {
    CFAllocatorRef v3 = *(const char **)a3;
  }
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, 0x8000100u);
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  uint64_t FirstTokenIDForString = LXLexiconGetFirstTokenIDForString();
  CFRelease(v5);
  return FirstTokenIDForString;
}

void sub_1A437FDD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorLexicon::getStringForTokenID(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = LXLexiconCopyEntryForTokenID();
  uint64_t v10 = v2;
  if (v2)
  {
    CFAllocatorRef v3 = (const void *)v2;
    CFStringRef v4 = (const __CFString *)LXEntryCopyString();
    CFStringRef v5 = v4;
    CFStringRef v9 = v4;
    if (v4)
    {
      CFLocaleRef v6 = (char *)convertToCString(v4);
      std::string::basic_string[abi:ne180100]<0>(&v7, v6);
      *(_OWORD *)a1 = v7;
      a1[2] = v8;
      free(v6);
      CFRelease(v5);
    }
    CFRelease(v3);
  }
}

void sub_1A437FE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  CFLocaleRef v6 = va_arg(va1, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<_LXEntry const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void NLCompositeTransliteratorLexicon::lexiconCandidatesForInput(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  NLOSSignPostlexiconCandidatesForInput::NLOSSignPostlexiconCandidatesForInput((NLOSSignPostlexiconCandidatesForInput *)&v12);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v7 = *a1;
  if (*a1 && a1[1])
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    if (v8)
    {
      memset(&v11, 0, sizeof(v11));
      if (NLCompositeTransliteratorLexicon::getTokenIDForString(v6, v7, a2))
      {
        NLCompositeTransliteratorLexicon::getStringForTokenID(&__str);
        std::string::operator=(&v11, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v11.__r_.__value_.__l.__size_;
        }
        if (size) {
          operator new();
        }
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
    }
  }
  NLOSSignPostlexiconCandidatesForInput::~NLOSSignPostlexiconCandidatesForInput(&v12);
}

void sub_1A4380038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  MEMORY[0x1A625B130](v22, 0x1012C40B0087DDBLL);
  if (a21 < 0) {
    operator delete(__p);
  }
  long long v25 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v25;
    operator delete(v25);
  }
  NLOSSignPostlexiconCandidatesForInput::~NLOSSignPostlexiconCandidatesForInput((os_signpost_id_t *)(v23 - 40));
  _Unwind_Resume(a1);
}

BOOL NLCompositeTransliteratorLexicon::isMemberOfTheNativeLexicon(uint64_t a1, uint64_t a2)
{
  return NLCompositeTransliteratorLexicon::getTokenIDForString(a1, *(void *)(a1 + 8), a2) != 0;
}

void NLOSSignPostlexiconCandidatesForInput::NLOSSignPostlexiconCandidatesForInput(NLOSSignPostlexiconCandidatesForInput *this)
{
  uint64_t v2 = _nlpSignpostLog();
  *(void *)this = os_signpost_id_make_with_pointer(v2, this);
  CFAllocatorRef v3 = _nlpSignpostLog();
  os_signpost_id_t v4 = *(void *)this;
  if ((unint64_t)(*(void *)this - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    CFStringRef v5 = v3;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A431F000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "lexiconCandidatesForInput", (const char *)&unk_1A441379D, v6, 2u);
    }
  }
}

void NLOSSignPostlexiconCandidatesForInput::~NLOSSignPostlexiconCandidatesForInput(os_signpost_id_t *this)
{
  uint64_t v2 = _nlpSignpostLog();
  os_signpost_id_t v3 = *this;
  if (*this - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)CFStringRef v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A431F000, v4, OS_SIGNPOST_INTERVAL_END, v3, "lexiconCandidatesForInput", (const char *)&unk_1A441379D, v5, 2u);
    }
  }
}

void nlp::CFScopedPtr<_LXEntry const*>::reset(const void **a1, const void *a2)
{
  os_signpost_id_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

__CFCalendar *getCurrentDateComponents@<X0>(__CFCalendar *result@<X0>, const __CFDate *a2@<X1>, _OWORD *a3@<X8>)
{
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (result)
  {
    os_signpost_id_t v3 = result;
    double CurrentTime = getCurrentTime((uint64_t)a2);
    return (__CFCalendar *)CFCalendarDecomposeAbsoluteTime(v3, CurrentTime, "dEMywYHms", a3, (char *)a3 + 36, (char *)a3 + 4, (char *)a3 + 8, a3 + 3, (char *)a3 + 52, (char *)a3 + 24, (char *)a3 + 28, a3 + 2);
  }
  return result;
}

uint64_t updateDateComponentsWithHolidayReference(const __CFDictionary *a1, const __CFString *a2, __CFCalendar *a3, const __CFDate *a4, const __CFLocale *a5, double *a6, NL::DateComponents *a7, NL::DateComponents *a8)
{
  uint64_t v8 = 0;
  int v43 = (int)a6;
  if (!a1) {
    return v8;
  }
  if (!a2) {
    return v8;
  }
  if (!a3) {
    return v8;
  }
  if (!a5) {
    return v8;
  }
  char v13 = a6;
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, @"-");
  uint64_t v8 = (uint64_t)ArrayBySeparatingStrings;
  CFTypeRef v42 = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings) {
    return v8;
  }
  if (CFArrayGetCount(ArrayBySeparatingStrings) != 3) {
    goto LABEL_30;
  }
  CFStringRef theString = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v8, 0);
  CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v8, 1);
  if (!CFDictionaryContainsKey(a1, ValueAtIndex)) {
    goto LABEL_30;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, ValueAtIndex);
  if (CFStringHasPrefix(theString, @"GENERIC"))
  {
    CFDictionaryRef HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForLocale(Value, a5);
    if (!HolidayValuesForLocale) {
      goto LABEL_10;
    }
  }
  else
  {
    CFDictionaryRef HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForLocaleAndCalendar(Value, a5, theString);
    if (!HolidayValuesForLocale)
    {
      CFDictionaryRef HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForCalendar(Value, theString);
      if (!HolidayValuesForLocale)
      {
LABEL_10:
        CFDictionaryRef HolidayValuesForLocale = (const __CFDictionary *)getHolidayDefaultValuesForLocale(Value, a5);
        if (!HolidayValuesForLocale)
        {
          CFDictionaryRef HolidayValuesForLocale = (const __CFDictionary *)getHolidayDefaultValues(Value);
          if (!HolidayValuesForLocale) {
            goto LABEL_30;
          }
        }
      }
    }
  }
  CFTypeRef cf = 0;
  CFStringRef v21 = (const __CFString *)MEMORY[0x1A625A0E0](a3);
  if (CFStringHasPrefix(v21, @"gregorian"))
  {
    CFTypeRef cf = CFRetain(a3);
  }
  else
  {
    CFCalendarRef v22 = CFCalendarCreateWithIdentifier(v16, @"gregorian");
    nlp::CFScopedPtr<__CFCalendar *>::reset(&cf, v22);
  }
  uint64_t v40 = 0;
  int v38 = 1;
  int v39 = 0;
  int v37 = 0;
  double CurrentTime = getCurrentTime((uint64_t)a4);
  CFAbsoluteTime at = CurrentTime;
  unsigned int v35 = v13;
  if (!v13)
  {
    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)cf, CurrentTime, "y", &v35);
    char v13 = (double *)v35;
  }
  if (updateTimeForHolidayReferenceValueWithYear(a1, HolidayValuesForLocale, theString, (__CFCalendar *)cf, a5, &at, v13, &v38, &v37))
  {
    CFCalendarDecomposeAbsoluteTime((CFCalendarRef)cf, at, "dMh", (char *)&v40 + 4, &v40, &v39);
    CFCalendarDecomposeAbsoluteTime(a3, at, "dMy", (char *)&v40 + 4, &v40, &v43);
    int v24 = v40;
    *(_DWORD *)a7 = HIDWORD(v40);
    *((_DWORD *)a7 + 1) = v24;
    *((_DWORD *)a7 + 2) = v43;
    int v25 = v38;
    if (v38 >= 2)
    {
      long long v26 = *((_OWORD *)a7 + 3);
      long long v28 = *(_OWORD *)a7;
      long long v27 = *((_OWORD *)a7 + 1);
      *((_OWORD *)a8 + 2) = *((_OWORD *)a7 + 2);
      *((_OWORD *)a8 + 3) = v26;
      *(_OWORD *)a8 = v28;
      *((_OWORD *)a8 + 1) = v27;
      *(_DWORD *)a8 += v25;
    }
    int v29 = v37;
    if (v37)
    {
      *((_DWORD *)a7 + 6) = v39;
      long long v30 = *((_OWORD *)a7 + 3);
      long long v31 = *(_OWORD *)a7;
      long long v32 = *((_OWORD *)a7 + 1);
      *((_OWORD *)a8 + 2) = *((_OWORD *)a7 + 2);
      *((_OWORD *)a8 + 3) = v30;
      *(_OWORD *)a8 = v31;
      *((_OWORD *)a8 + 1) = v32;
      *((_DWORD *)a8 + 6) += v29;
    }
    if (cf) {
      CFRelease(cf);
    }
    uint64_t v8 = 1;
    goto LABEL_31;
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_30:
  uint64_t v8 = 0;
LABEL_31:
  if (v42) {
    CFRelease(v42);
  }
  return v8;
}

void sub_1A43805E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  std::string v11 = va_arg(va1, const void *);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

const void *getHolidayValuesForLocale(const __CFDictionary *a1, CFLocaleRef locale)
{
  CFTypeRef Value = CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
  if (!Value) {
    return 0;
  }
  os_signpost_id_t v4 = Value;
  if (!CFDictionaryContainsKey(a1, Value)) {
    return 0;
  }
  CFStringRef v5 = CFDictionaryGetValue(a1, v4);
  CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"default.%@", v5);
  if (!v6) {
    return 0;
  }
  CFStringRef v7 = v6;
  if (CFDictionaryContainsKey(a1, v6)) {
    uint64_t v8 = CFDictionaryGetValue(a1, v7);
  }
  else {
    uint64_t v8 = 0;
  }
  CFRelease(v7);
  return v8;
}

void sub_1A4380708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void *getHolidayDefaultValuesForLocale(const __CFDictionary *a1, const __CFLocale *a2)
{
  CFTypeRef Value = CFDictionaryGetValue(a1, @"default");
  if (!Value) {
    return 0;
  }
  CFStringRef v5 = Value;
  CFTypeRef v6 = CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
  if (!v6) {
    return 0;
  }
  CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@.%@", v6, v5);
  if (!v7) {
    return 0;
  }
  CFStringRef v8 = v7;
  if (CFDictionaryContainsKey(a1, v7)) {
    CFStringRef v9 = CFDictionaryGetValue(a1, v8);
  }
  else {
    CFStringRef v9 = 0;
  }
  CFRelease(v8);
  return v9;
}

void sub_1A43807F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void *getHolidayDefaultValues(const __CFDictionary *a1)
{
  CFTypeRef Value = CFDictionaryGetValue(a1, @"default");
  if (!Value) {
    return 0;
  }
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"default.%@", Value);
  if (!v3) {
    return 0;
  }
  CFStringRef v4 = v3;
  if (CFDictionaryContainsKey(a1, v3)) {
    CFStringRef v5 = CFDictionaryGetValue(a1, v4);
  }
  else {
    CFStringRef v5 = 0;
  }
  CFRelease(v4);
  return v5;
}

void sub_1A43808B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void *getHolidayValuesForLocaleAndCalendar(const __CFDictionary *a1, CFLocaleRef locale, const __CFString *a3)
{
  if (!a3) {
    return 0;
  }
  CFTypeRef Value = CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
  if (!Value) {
    return 0;
  }
  CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@.%@", Value, a3);
  if (!v6) {
    return 0;
  }
  CFStringRef v7 = v6;
  if (CFDictionaryContainsKey(a1, v6)) {
    CFStringRef v8 = CFDictionaryGetValue(a1, v7);
  }
  else {
    CFStringRef v8 = 0;
  }
  CFRelease(v7);
  return v8;
}

void sub_1A4380984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void *getHolidayValuesForCalendar(const __CFDictionary *a1, const __CFString *a2)
{
  if (!a2) {
    return 0;
  }
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"default.%@", a2);
  if (!v3) {
    return 0;
  }
  CFStringRef v4 = v3;
  if (CFDictionaryContainsKey(a1, v3)) {
    CFTypeRef Value = CFDictionaryGetValue(a1, v4);
  }
  else {
    CFTypeRef Value = 0;
  }
  CFRelease(v4);
  return Value;
}

void sub_1A4380A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t updateTimeForHolidayReferenceValueWithYear(const __CFDictionary *a1, const __CFDictionary *a2, const __CFString *a3, __CFCalendar *a4, const __CFLocale *a5, double *a6, double *a7, int *a8, int *a9)
{
  CFDictionaryRef ValueAtIndex = a2;
  uint64_t result = (uint64_t)CFDictionaryGetValue(a2, @"Type");
  if (!result) {
    return result;
  }
  CFStringRef v18 = (const __CFString *)result;
  if (!CFStringHasPrefix((CFStringRef)result, @"MonthRelativeWeekDay"))
  {
    if (CFStringHasPrefix(v18, @"AbsoluteDate"))
    {
      composeHolidayAbsoluteDateWithValue(ValueAtIndex, a4, a6, a7, v24, v25, v26);
      if (!a8) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
    if (CFStringHasPrefix(v18, @"DateList"))
    {
      CFStringRef v27 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", a7);
      *(void *)CFRange v48 = v27;
      if (!CFDictionaryContainsKey(ValueAtIndex, v27)) {
        goto LABEL_41;
      }
      CFTypeRef Value = CFDictionaryGetValue(ValueAtIndex, v27);
      CFTypeID v29 = CFGetTypeID(Value);
      if (v29 == CFDictionaryGetTypeID())
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)Value;
      }
      else
      {
        CFTypeID v40 = CFGetTypeID(Value);
        if (v40 == CFArrayGetTypeID()) {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, 0);
        }
      }
      if (ValueAtIndex)
      {
        composeHolidayAbsoluteDateWithValue(ValueAtIndex, a4, a6, a7, v30, v31, v32);
        char v41 = 1;
      }
      else
      {
LABEL_41:
        char v41 = 0;
      }
      if (v27) {
        CFRelease(v27);
      }
      if (v41) {
        goto LABEL_45;
      }
      return 0;
    }
    uint64_t result = CFStringHasPrefix(v18, @"SpecialDateRelativeDate");
    if (!result) {
      return result;
    }
    uint64_t result = CFDictionaryContainsKey(ValueAtIndex, @"SpecialDate");
    if (!result) {
      return result;
    }
    CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"SpecialDate");
    uint64_t result = CFDictionaryContainsKey(a1, v37);
    if (!result) {
      return result;
    }
    v48[0] = 1;
    HIDWORD(valuePtr) = 1;
    if (CFEqual(v37, @"easter"))
    {
      CFStringRef v42 = (const __CFString *)MEMORY[0x1A625A0E0](a4);
      if (CFStringCompare(v42, @"julian", 0))
      {
        CFStringRef v43 = (const __CFString *)MEMORY[0x1A625A0E0](a4);
        if (CFStringCompare(v43, @"gregorian", 0)) {
          return 0;
        }
        extractGregorianEasterInYear((_DWORD *)&valuePtr + 1, v48, (int)a7);
      }
      else
      {
        extractJulianEasterInYear((_DWORD *)&valuePtr + 1, (int *)v48, (int)a7);
      }
LABEL_62:
      composeHolidayRelativeDateWithValue(ValueAtIndex, a4, a6, HIDWORD(valuePtr), v48[0], (uint64_t)a7, v44, v45);
      if (!a8) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
    CFDictionaryRef v38 = (const __CFDictionary *)CFDictionaryGetValue(a1, v37);
    if (CFStringHasPrefix(a3, @"GENERIC"))
    {
      CFDictionaryRef HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForLocale(v38, a5);
      if (!HolidayValuesForLocale) {
        goto LABEL_35;
      }
    }
    else
    {
      CFDictionaryRef HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForLocaleAndCalendar(v38, a5, a3);
      if (!HolidayValuesForLocale)
      {
        CFDictionaryRef HolidayValuesForLocale = (const __CFDictionary *)getHolidayValuesForCalendar(v38, a3);
        if (!HolidayValuesForLocale)
        {
LABEL_35:
          CFDictionaryRef HolidayValuesForLocale = (const __CFDictionary *)getHolidayDefaultValuesForLocale(v38, a5);
          if (!HolidayValuesForLocale) {
            CFDictionaryRef HolidayValuesForLocale = (const __CFDictionary *)getHolidayDefaultValues(v38);
          }
        }
      }
    }
    if (!CFDictionaryContainsKey(HolidayValuesForLocale, @"SpecialDate")) {
      return 0;
    }
    CFDictionaryRef HolidayDefaultValues = (const __CFDictionary *)getHolidayDefaultValues(v38);
    if (!HolidayDefaultValues) {
      return 0;
    }
    CFDictionaryRef v47 = HolidayDefaultValues;
    if (CFDictionaryContainsKey(HolidayDefaultValues, @"SpecialDate")) {
      return 0;
    }
    updateTimeForHolidayReferenceValueWithYear(a1, v47, a3, a4, a5, a6, (int)a7, a8, a9);
    CFCalendarDecomposeAbsoluteTime(a4, *a6, "dM", (char *)&valuePtr + 4, v48);
    goto LABEL_62;
  }
  if (a4)
  {
    v48[0] = 0;
    uint64_t valuePtr = 0;
    CFIndex length = CFCalendarGetMaximumRangeOfUnit(a4, 0x200uLL).length;
    CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"Month");
    if (v20) {
      CFNumberGetValue(v20, kCFNumberSInt32Type, &valuePtr);
    }
    CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"WeekDay");
    CFNumberRef v22 = v21;
    if (v21)
    {
      CFNumberGetValue(v21, kCFNumberSInt32Type, v48);
      if (length == v48[0]) {
        int v23 = 1;
      }
      else {
        int v23 = v48[0] + 1;
      }
      v48[0] = v23;
    }
    CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"WeekDayNumberInMonth");
    if (v33)
    {
      CFNumberGetValue(v33, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      if (v22)
      {
        CFCalendarComposeAbsoluteTime(a4, a6, "My", valuePtr, a7);
        int v49 = 0;
        CFCalendarDecomposeAbsoluteTime(a4, *a6, "E", &v49);
        if ((int)v48[0] >= v49)
        {
          if ((int)v48[0] <= v49) {
            goto LABEL_25;
          }
          CFIndex v34 = v48[0] - v49;
        }
        else
        {
          CFIndex v34 = length + (int)v48[0] - v49;
        }
        CFCalendarAddComponents(a4, a6, 0, "d", v34);
LABEL_25:
        int v35 = HIDWORD(valuePtr);
        if (valuePtr < 0)
        {
          CFRange RangeOfUnit = CFCalendarGetRangeOfUnit(a4, 0x400uLL, 8uLL, *a6);
          int v35 = HIDWORD(valuePtr) + LODWORD(RangeOfUnit.length);
          HIDWORD(valuePtr) += LODWORD(RangeOfUnit.length);
        }
        CFCalendarAddComponents(a4, a6, 0, "F", (v35 - 1));
        if (!a8) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }
    }
  }
LABEL_45:
  if (a8) {
LABEL_46:
  }
    *a8 = 1;
LABEL_47:
  if (a9) {
    *a9 = 0;
  }
  return 1;
}

void sub_1A4380F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t getDateComponentsOffsetForUnit@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (result <= 63)
  {
    if (result > 15)
    {
      if (result != 16)
      {
        if (result != 32) {
          return result;
        }
        a3 = (_OWORD *)((char *)a3 + 24);
      }
    }
    else if (result == 4)
    {
      a3 = (_OWORD *)((char *)a3 + 8);
    }
    else
    {
      if (result != 8) {
        return result;
      }
      a3 = (_OWORD *)((char *)a3 + 4);
    }
  }
  else if (result <= 511)
  {
    if (result == 64)
    {
      a3 = (_OWORD *)((char *)a3 + 28);
    }
    else
    {
      if (result != 128) {
        return result;
      }
      a3 += 2;
    }
  }
  else
  {
    switch(result)
    {
      case 0x200:
        a3 = (_OWORD *)((char *)a3 + 36);
        break;
      case 0x2000:
        a3 += 3;
        break;
      case 0x4000:
        a3 = (_OWORD *)((char *)a3 + 52);
        break;
      default:
        return result;
    }
  }
  *(_DWORD *)a3 = a2;
  return result;
}

void resolveDateComponentsToCurrentDateForUnit(__CFCalendar *a1, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *a4, uint64_t a5, int a6)
{
  getCurrentDateComponents(a1, a3, v15);
  double AbsoluteTime = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v15, a1, a3);
  double v13 = NL::DateComponents::getAbsoluteTime(a4, a1, a3);
  if ((a6 & 1) == 0)
  {
    while (v13 > AbsoluteTime)
    {
      getDateComponentsOffsetForUnit(a5, -1, v14);
      updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v14);
      double v13 = NL::DateComponents::getAbsoluteTime(a4, a1, a3);
    }
  }
  if (a6)
  {
    while (v13 < AbsoluteTime)
    {
      getDateComponentsOffsetForUnit(a5, 1, v14);
      updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v14);
      double v13 = NL::DateComponents::getAbsoluteTime(a4, a1, a3);
    }
  }
}

CFAbsoluteTime NL::DateComponents::getAbsoluteTime(NL::DateComponents *this, __CFCalendar *a2, const __CFDate *a3)
{
  CFAbsoluteTime at = 0.0;
  double CurrentTime = getCurrentTime((uint64_t)a3);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  CFCalendarDecomposeAbsoluteTime(a2, CurrentTime, "yMdwEHms", &v24, &v25, &v26, &v22, &v23, &v21, &v20, &v19);
  uint64_t v6 = *((int *)this + 12);
  if (v6)
  {
    unsigned int v7 = *((_DWORD *)this + 9);
    if (v7 <= 1) {
      unsigned int v7 = 1;
    }
    uint64_t v8 = *((int *)this + 13);
    if (!v8) {
      uint64_t v8 = v24;
    }
    CFCalendarComposeAbsoluteTime(a2, &at, "EwYHms", (int)v7, v6, v8, *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8));
    return at;
  }
  unsigned int v9 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    uint64_t v10 = *((int *)this + 6);
LABEL_9:
    if (v9 <= 1) {
      unsigned int v9 = 1;
    }
    unsigned int v11 = *((_DWORD *)this + 1);
    uint64_t v12 = *((int *)this + 2);
    if (v11 <= 1) {
      unsigned int v11 = 1;
    }
    if (!v12) {
      uint64_t v12 = v24;
    }
    CFCalendarComposeAbsoluteTime(a2, &at, "dMyHms", (int)v9, (int)v11, v12, v10, *((int *)this + 7), *((int *)this + 8));
    return at;
  }
  if (*((_DWORD *)this + 9))
  {
    CFAbsoluteTime at = CurrentTime;
    CFCalendarAddComponents(a2, &at, 0, "E", -v23);
    CFCalendarAddComponents(a2, &at, 0, "E", *((unsigned int *)this + 9));
    uint64_t v14 = *((int *)this + 6);
    if (v14) {
      CFCalendarAddComponents(a2, &at, 0, "H", v14 - v21);
    }
    uint64_t v15 = *((int *)this + 7);
    if (v15) {
      CFCalendarAddComponents(a2, &at, 0, "m", v15 - v20);
    }
    uint64_t v16 = *((int *)this + 8);
    if (v16) {
      CFCalendarAddComponents(a2, &at, 0, "s", v16 - v19);
    }
  }
  else
  {
    if (!*((_DWORD *)this + 6))
    {
      uint64_t v10 = 0;
      goto LABEL_9;
    }
    uint64_t v17 = v25;
    uint64_t v18 = *((int *)this + 2);
    if (*((_DWORD *)this + 1)) {
      uint64_t v17 = *((int *)this + 1);
    }
    if (!v18) {
      uint64_t v18 = v24;
    }
    CFCalendarComposeAbsoluteTime(a2, &at, "dMyHms", v26, v17, v18, *((int *)this + 6), *((int *)this + 7), *((int *)this + 8));
  }
  return at;
}

unint64_t updateDateComponentsWithOffsetComponents(unint64_t result, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *this, const NL::DateComponents *a5)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v8 = (__CFCalendar *)result;
      uint64_t result = NL::DateComponents::isEmpty(this);
      if ((result & 1) == 0)
      {
        uint64_t result = NL::DateComponents::isEmpty(a5);
        if ((result & 1) == 0)
        {
          CFAbsoluteTime at = NL::DateComponents::getAbsoluteTime(this, v8, a3);
          if (*((void *)a5 + 6))
          {
            CFCalendarAddComponents(v8, &at, 0, "wY", *((unsigned int *)a5 + 12), *((unsigned int *)a5 + 13));
          }
          else
          {
            CFCalendarAddComponents(v8, &at, 0, "dMy", *(unsigned int *)a5, *((unsigned int *)a5 + 1), *((unsigned int *)a5 + 2));
            if (*((_DWORD *)a5 + 9)) {
              CFCalendarAddComponents(v8, &at, 0, "E", *((unsigned int *)a5 + 9), v11);
            }
          }
          uint64_t result = CFCalendarAddComponents(v8, &at, 0, "Hms", *((unsigned int *)a5 + 6), *((unsigned int *)a5 + 7), *((unsigned int *)a5 + 8));
          if (*(_DWORD *)this) {
            uint64_t result = CFCalendarDecomposeAbsoluteTime(v8, at, "d", this);
          }
          if (*((_DWORD *)this + 9)) {
            uint64_t result = CFCalendarDecomposeAbsoluteTime(v8, at, "E", (char *)this + 36);
          }
          if (*((_DWORD *)this + 1)) {
            uint64_t result = CFCalendarDecomposeAbsoluteTime(v8, at, "M", (char *)this + 4);
          }
          if (*((_DWORD *)this + 2)) {
            uint64_t result = CFCalendarDecomposeAbsoluteTime(v8, at, "y", (char *)this + 8);
          }
          if (*((_DWORD *)this + 12)) {
            uint64_t result = CFCalendarDecomposeAbsoluteTime(v8, at, "w", (char *)this + 48);
          }
          if (*((_DWORD *)this + 13)) {
            uint64_t result = CFCalendarDecomposeAbsoluteTime(v8, at, "Y", (char *)this + 52);
          }
          if (*((_DWORD *)this + 6)) {
            uint64_t result = CFCalendarDecomposeAbsoluteTime(v8, at, "H", (char *)this + 24);
          }
          if (*((_DWORD *)this + 7)) {
            uint64_t result = CFCalendarDecomposeAbsoluteTime(v8, at, "m", (char *)this + 28);
          }
          int v10 = *((_DWORD *)this + 8);
          unsigned int v9 = (char *)this + 32;
          if (v10) {
            return CFCalendarDecomposeAbsoluteTime(v8, at, "s", v9);
          }
        }
      }
    }
  }
  return result;
}

void resolveDateComponentsToCurrentDate(__CFCalendar *a1, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *a4, int a5)
{
  getCurrentDateComponents(a1, a3, v14);
  double AbsoluteTime = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v14, a1, a3);
  CFAbsoluteTime v11 = AbsoluteTime;
  int v12 = *(_DWORD *)a4;
  if (!*((_DWORD *)a4 + 2))
  {
    v12 |= *((_DWORD *)a4 + 1);
    if (!v12) {
      goto LABEL_9;
    }
    CFCalendarDecomposeAbsoluteTime(a1, AbsoluteTime, "y", (char *)a4 + 8);
    resolveDateComponentsToCurrentDateForUnit(a1, a2, a3, a4, 4, a5);
    int v12 = *(_DWORD *)a4;
  }
  if (*((_DWORD *)a4 + 1)) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v12 == 0;
  }
  if (!v13)
  {
    CFCalendarDecomposeAbsoluteTime(a1, v11, "M", (char *)a4 + 4);
    resolveDateComponentsToCurrentDateForUnit(a1, a2, a3, a4, 4, a5);
    int v12 = *(_DWORD *)a4;
  }
LABEL_9:
  if (*((_DWORD *)a4 + 9) && !v12 && !*((_DWORD *)a4 + 12))
  {
    updateDateComponentsForWeekdayWithWeekOffset(a1, a2, a3, a4, 0);
    resolveDateComponentsToCurrentDateForUnit(a1, a2, a3, a4, 512, a5);
  }
}

void updateDateComponentsForWeekdayWithWeekOffset(__CFCalendar *a1, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *this, int a5)
{
  if (a1 && a2 && !NL::DateComponents::isEmpty(this))
  {
    double CurrentTime = getCurrentTime((uint64_t)a3);
    double AbsoluteTime = NL::DateComponents::getAbsoluteTime(this, a1, a3);
    CFAbsoluteTime at = AbsoluteTime;
    CFCalendarDecomposeAbsoluteTime(a1, AbsoluteTime, "dMy", this, (char *)this + 4, (char *)this + 8);
    if (a5)
    {
      CFCalendarAddComponents(a1, &at, 0, "w", 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(a1, at, "dMy", this, (char *)this + 4, (char *)this + 8);
      double AbsoluteTime = NL::DateComponents::getAbsoluteTime(this, a1, a3);
      CFAbsoluteTime at = AbsoluteTime;
    }
    if (AbsoluteTime > CurrentTime)
    {
      do
      {
        CFCalendarAddComponents(a1, &at, 0, "w", 0xFFFFFFFFLL);
        CFCalendarDecomposeAbsoluteTime(a1, at, "dMy", this, (char *)this + 4, (char *)this + 8);
        CFAbsoluteTime at = NL::DateComponents::getAbsoluteTime(this, a1, a3);
      }
      while (at > CurrentTime);
    }
  }
}

void resolveDateComponentsToDateWithOffset(__CFCalendar *a1, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *a4, int a5, uint64_t a6, int a7)
{
  getCurrentDateComponents(a1, a3, v41);
  double AbsoluteTime = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v41, a1, a3);
  int v39 = -1;
  int v40 = -1;
  int v37 = -1;
  int v38 = -1;
  int v35 = -1;
  int v36 = -1;
  int v33 = -1;
  int v34 = -1;
  double v15 = NL::DateComponents::getAbsoluteTime(a4, a1, a3);
  CFAbsoluteTime at = v15;
  if (*((_DWORD *)a4 + 8))
  {
    if (a6)
    {
      CFCalendarAddComponents(a1, &at, 0, "s", a6);
      double v15 = at;
    }
    CFCalendarDecomposeAbsoluteTime(a1, v15, "dMyHms", &v40, &v37, &v36, &v35, &v34, &v33);
    int v16 = v36;
    int v17 = v40;
    *((_DWORD *)a4 + 1) = v37;
    *((_DWORD *)a4 + 2) = v16;
    *(_DWORD *)a4 = v17;
    int v18 = v34;
    *((_DWORD *)a4 + 6) = v35;
    *((_DWORD *)a4 + 7) = v18;
    *((_DWORD *)a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v33;
    goto LABEL_28;
  }
  if (*((_DWORD *)a4 + 7))
  {
    if (a6)
    {
      CFCalendarAddComponents(a1, &at, 0, "m", a6);
      double v15 = at;
    }
    CFCalendarDecomposeAbsoluteTime(a1, v15, "dMyHm", &v40, &v37, &v36, &v35, &v34);
    int v19 = v36;
    int v20 = v40;
    *((_DWORD *)a4 + 1) = v37;
    *((_DWORD *)a4 + 2) = v19;
    *(_DWORD *)a4 = v20;
    int v21 = v34;
    *((_DWORD *)a4 + 6) = v35;
    *((_DWORD *)a4 + 7) = v21;
    goto LABEL_28;
  }
  if (*((_DWORD *)a4 + 6))
  {
    if (a6)
    {
      CFCalendarAddComponents(a1, &at, 0, "H", a6);
      double v15 = at;
    }
    CFCalendarDecomposeAbsoluteTime(a1, v15, "dMyH", &v40, &v37, &v36, &v35);
    int v22 = v36;
    int v23 = v40;
    *((_DWORD *)a4 + 1) = v37;
    *((_DWORD *)a4 + 2) = v22;
    *(_DWORD *)a4 = v23;
    *((_DWORD *)a4 + 6) = v35;
    goto LABEL_28;
  }
  if (*((_DWORD *)a4 + 9))
  {
    int v30 = -1;
    int v31 = -1;
    int v29 = -1;
    CFCalendarDecomposeAbsoluteTime(a1, AbsoluteTime, "dEw", &v31, &v30, &v29);
    if (a6) {
      CFCalendarAddComponents(a1, &at, 0, "w", a6);
    }
    CFCalendarDecomposeAbsoluteTime(a1, at, "dEwy", &v40, &v39, &v38, &v36);
    if (a5)
    {
      uint64_t v24 = 1;
      if (at >= AbsoluteTime && v39 != 1) {
        goto LABEL_27;
      }
    }
    else
    {
      if (at <= AbsoluteTime)
      {
LABEL_27:
        CFCalendarDecomposeAbsoluteTime(a1, at, "Ewy", &v39, &v38, &v36);
        *((_DWORD *)a4 + 9) = v39;
        int v27 = v36;
        *((_DWORD *)a4 + 12) = v38;
        *((_DWORD *)a4 + 13) = v27;
        goto LABEL_28;
      }
      uint64_t v24 = 0xFFFFFFFFLL;
    }
    CFCalendarAddComponents(a1, &at, 0, "w", at, v24);
    goto LABEL_27;
  }
  if (*(_DWORD *)a4)
  {
    if (a6)
    {
      CFCalendarAddComponents(a1, &at, 0, "y", a6);
      double v15 = at;
    }
    CFCalendarDecomposeAbsoluteTime(a1, v15, "dMy", &v40, &v37, &v36);
    int v25 = v36;
    int v26 = v40;
    *((_DWORD *)a4 + 1) = v37;
    *((_DWORD *)a4 + 2) = v25;
    *(_DWORD *)a4 = v26;
  }
  else if (*((_DWORD *)a4 + 1))
  {
    int v30 = -1;
    int v31 = -1;
    CFCalendarDecomposeAbsoluteTime(a1, AbsoluteTime, "My", &v31, &v30);
    if (a6) {
      CFCalendarAddComponents(a1, &at, 0, "y", a6);
    }
    CFCalendarDecomposeAbsoluteTime(a1, at, "My", &v37, &v36);
    int v28 = v36;
    *((_DWORD *)a4 + 1) = v37;
    *((_DWORD *)a4 + 2) = v28;
  }
  else if (*((_DWORD *)a4 + 2))
  {
    if (a6)
    {
      CFCalendarAddComponents(a1, &at, 0, "y", a6);
      double v15 = at;
    }
    CFCalendarDecomposeAbsoluteTime(a1, v15, "y", &v36);
    *((_DWORD *)a4 + 2) = v36;
  }
LABEL_28:
  if (a5 && !a7 && at < AbsoluteTime) {
    resolveDateComponentsToDateWithOffset(a1, a2, a3, a4, a6 != 0, 1, 1);
  }
}

void NL::DateComponents::getFullFormat(NL::DateComponents *this@<X0>, __CFCalendar *a2@<X1>, const __CFDate *a3@<X2>, double *a4@<X3>, std::string *a5@<X8>)
{
  if (a2 && a4)
  {
    uint64_t v50 = 0;
    uint64_t v51 = &v50;
    uint64_t v52 = 0x4002000000;
    uint64_t v53 = __Block_byref_object_copy__5;
    uint64_t v54 = __Block_byref_object_dispose__5;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    v46[0] = 0;
    v46[1] = v46;
    v46[2] = 0x4002000000;
    v46[3] = __Block_byref_object_copy__26_1;
    v46[4] = __Block_byref_object_dispose__27_1;
    CFDictionaryRef v47 = 0;
    CFRange v48 = 0;
    uint64_t v49 = 0;
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 0x40000000;
    v45[2] = ___ZNK2NL14DateComponents13getFullFormatEP12__CFCalendarPK8__CFDatePd_block_invoke;
    void v45[3] = &unk_1E5B362B0;
    v45[4] = &v50;
    v45[5] = v46;
    NL::DateComponents::enumerate((unsigned int *)this, (uint64_t)v45);
    double CurrentTime = getCurrentTime((uint64_t)a3);
    CFAbsoluteTime v11 = v51;
    int v12 = (int **)(v51 + 5);
    if ((*((char *)v51 + 63) & 0x80000000) == 0)
    {
      BOOL v13 = (int *)(v51 + 5);
      switch(*((unsigned char *)v51 + 63))
      {
        case 1:
          if (*(unsigned char *)v12 != 100) {
            goto LABEL_54;
          }
          goto LABEL_12;
        case 5:
          if (*(_DWORD *)v12 != 1296911716 || *((unsigned char *)v51 + 44) != 77) {
            goto LABEL_54;
          }
          goto LABEL_38;
        case 6:
          if (*(_DWORD *)v12 != 1296911716 || *((_WORD *)v51 + 22) != 31053) {
            goto LABEL_54;
          }
          goto LABEL_77;
        case 7:
          goto LABEL_50;
        case 0xA:
          if (*v12 == (int *)0x4545794D4D4D4D64 && *((_WORD *)v51 + 24) == 17733) {
            goto LABEL_77;
          }
          BOOL v13 = (int *)(v51 + 5);
          if (*((unsigned char *)v51 + 63) == 7) {
            goto LABEL_50;
          }
          goto LABEL_54;
        default:
          goto LABEL_54;
      }
    }
    uint64_t v14 = v51[6];
    if (v14 == 1 && *(unsigned char *)*v12 == 100)
    {
LABEL_12:
      CFCalendarComposeAbsoluteTime(a2, a4, "d", *(unsigned int *)this);
      goto LABEL_88;
    }
    if (v14 == 5)
    {
      if (**v12 == 1296911716 && *((unsigned char *)*v12 + 4) == 77)
      {
LABEL_38:
        CFCalendarComposeAbsoluteTime(a2, a4, "dM", *(unsigned int *)this, *((unsigned int *)this + 1));
        goto LABEL_88;
      }
      uint64_t v14 = v51[6];
    }
    if (v14 == 6)
    {
      if (**v12 == 1296911716 && *((_WORD *)*v12 + 2) == 31053) {
        goto LABEL_77;
      }
      uint64_t v14 = v51[6];
    }
    if (v14 != 10) {
      goto LABEL_31;
    }
    if (*(void *)*v12 != 0x4545794D4D4D4D64 || *((_WORD *)*v12 + 4) != 17733)
    {
      uint64_t v14 = v51[6];
LABEL_31:
      if (v14 != 7) {
        goto LABEL_54;
      }
      BOOL v13 = *v12;
LABEL_50:
      int v21 = *v13;
      int v22 = *(int *)((char *)v13 + 3);
      if (v21 != 1296911716 || v22 != 1215909197)
      {
LABEL_54:
        BOOL v24 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "dMMMMyHEEEE");
        CFAbsoluteTime v11 = v51;
        if (!v24)
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "MMMM"))
          {
            CFCalendarComposeAbsoluteTime(a2, a4, "M", *((unsigned int *)this + 1));
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "MMMMy"))
          {
            CFCalendarComposeAbsoluteTime(a2, a4, "My", *((unsigned int *)this + 1), *((unsigned int *)this + 2));
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "y"))
          {
            CFCalendarComposeAbsoluteTime(a2, a4, "y", *((unsigned int *)this + 2));
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "EEEE"))
          {
            *a4 = CurrentTime;
            v43[0] = 0;
            CFCalendarDecomposeAbsoluteTime(a2, CurrentTime, "E", v43);
            CFCalendarAddComponents(a2, a4, 0, "E", -(uint64_t)v43[0]);
            CFCalendarAddComponents(a2, a4, 0, "E", *((unsigned int *)this + 9));
          }
          else
          {
            int v29 = (unsigned __int8 *)v51;
            std::string::basic_string[abi:ne180100]<0>(v43, "H");
            if (startswith(v29 + 40, (unsigned __int8 *)v43))
            {
              int v30 = v51;
              std::string::basic_string[abi:ne180100]<0>(__p, "EEEE");
              if (endswith(v30 + 5, (uint64_t *)__p))
              {
                BOOL v31 = 1;
              }
              else
              {
                long long v32 = v51;
                std::string::basic_string[abi:ne180100]<0>(v39, "EEEEwY");
                BOOL v31 = endswith(v32 + 5, (uint64_t *)v39);
                if (v40 < 0) {
                  operator delete(v39[0]);
                }
              }
              if (v42 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              BOOL v31 = 0;
            }
            if (v44 < 0) {
              operator delete(v43[0]);
            }
            if (v31)
            {
              *a4 = CurrentTime;
              v43[0] = 0;
              __p[0] = 0;
              uint64_t v38 = 0;
              v39[0] = 0;
              CFCalendarDecomposeAbsoluteTime(a2, CurrentTime, "EHwy", v43, __p, v39, &v38);
              CFCalendarAddComponents(a2, a4, 0, "EH", -(uint64_t)v43[0], -(uint64_t)__p[0]);
              if (*((_DWORD *)this + 12))
              {
                CFCalendarAddComponents(a2, a4, 0, "w", -(uint64_t)v39[0]);
                CFCalendarAddComponents(a2, a4, 0, "w", *((unsigned int *)this + 12));
              }
              uint64_t v33 = *((int *)this + 13);
              if (v33) {
                CFCalendarAddComponents(a2, a4, 0, "y", v33 - v38);
              }
              CFCalendarAddComponents(a2, a4, 0, "EHms", *((unsigned int *)this + 9), *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8));
              MEMORY[0x1A625AE00](v51 + 5, "EEEEjm");
            }
            else
            {
              int v34 = (unsigned __int8 *)v51;
              std::string::basic_string[abi:ne180100]<0>(v43, "H");
              BOOL v35 = startswith(v34 + 40, (unsigned __int8 *)v43);
              if (v44 < 0) {
                operator delete(v43[0]);
              }
              if (v35)
              {
                CFCalendarComposeAbsoluteTime(a2, a4, "Hms", *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8));
                MEMORY[0x1A625AE00](v51 + 5, "jm");
              }
              else
              {
                BOOL v36 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51 + 5, "wY");
                int v37 = v51 + 5;
                if (v36)
                {
                  MEMORY[0x1A625AE00](v37, "dMMMMy");
                  CFCalendarComposeAbsoluteTime(a2, a4, "wY", *((unsigned int *)this + 12), *((unsigned int *)this + 13));
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, "EEEEwY"))
                {
                  MEMORY[0x1A625AE00](v51 + 5, "dMMMMyEEEE");
                  CFCalendarComposeAbsoluteTime(a2, a4, "EwY", *((unsigned int *)this + 9), *((unsigned int *)this + 12), *((unsigned int *)this + 13));
                }
              }
            }
          }
          goto LABEL_88;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "EEEE");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      replaceAll((std::string *)(v11 + 5), (char *)v43, (uint64_t)__p);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      int v25 = v51;
      std::string::basic_string[abi:ne180100]<0>(v43, "d");
      std::string::basic_string[abi:ne180100]<0>(__p, "dEEEE");
      replaceAll((std::string *)(v25 + 5), (char *)v43, (uint64_t)__p);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      int v26 = v51;
      std::string::basic_string[abi:ne180100]<0>(v43, "H");
      std::string::basic_string[abi:ne180100]<0>(__p, "j");
      replaceAll((std::string *)(v26 + 5), (char *)v43, (uint64_t)__p);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "y");
      updateTimeForUnit(a2, a4, 4, (uint64_t)v43, *((int *)this + 2));
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "M");
      updateTimeForUnit(a2, a4, 8, (uint64_t)v43, *((int *)this + 1));
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "d");
      updateTimeForUnit(a2, a4, 16, (uint64_t)v43, *(int *)this);
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "H");
      updateTimeForUnit(a2, a4, 32, (uint64_t)v43, *((int *)this + 6));
      if (v44 < 0) {
        operator delete(v43[0]);
      }
LABEL_88:
      if (*((char *)v51 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(a5, (const std::string::value_type *)v51[5], v51[6]);
      }
      else
      {
        long long v28 = *(_OWORD *)(v51 + 5);
        a5->__r_.__value_.__r.__words[2] = v51[7];
        *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v28;
      }
      _Block_object_dispose(v46, 8);
      if (v47)
      {
        CFRange v48 = v47;
        operator delete(v47);
      }
      _Block_object_dispose(&v50, 8);
      if (SHIBYTE(v57) < 0) {
        operator delete(v55);
      }
      return;
    }
LABEL_77:
    std::string::basic_string[abi:ne180100]<0>(v43, "EEEE");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    replaceAll((std::string *)(v11 + 5), (char *)v43, (uint64_t)__p);
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    int v27 = v51;
    std::string::basic_string[abi:ne180100]<0>(v43, "d");
    std::string::basic_string[abi:ne180100]<0>(__p, "dEEEE");
    replaceAll((std::string *)(v27 + 5), (char *)v43, (uint64_t)__p);
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    CFCalendarComposeAbsoluteTime(a2, a4, "dMy", *(unsigned int *)this, *((unsigned int *)this + 1), *((unsigned int *)this + 2));
    goto LABEL_88;
  }

  std::string::basic_string[abi:ne180100]<0>(a5, 0);
}

void sub_1A438278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Block_object_dispose(&a38, 8);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  _Block_object_dispose((const void *)(v44 - 144), 8);
  if (*(char *)(v44 - 81) < 0) {
    operator delete(*(void **)(v44 - 104));
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 4nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = result;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 4nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 __Block_byref_object_copy__26_1(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__27_1(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
    operator delete(v2);
  }
}

void NL::DateComponents::enumerate(unsigned int *a1, uint64_t a2)
{
  if (*a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "d");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v22, *a1);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
  }
  if (a1[1])
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "MMMM");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v20, a1[1]);
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }
  if (a1[2])
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "y");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v18, a1[2]);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  if (a1[6])
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "H");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v16, a1[6]);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
  if (a1[7])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "m");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, __p, a1[7]);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a1[8])
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "s");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v12, a1[8]);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }
  if (a1[9])
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "EEEE");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v10, a1[9]);
    if (v11 < 0) {
      operator delete(v10[0]);
    }
  }
  if (a1[12])
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "w");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v8, a1[12]);
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  if (a1[11])
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "W");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v6, a1[11]);
    if (v7 < 0) {
      operator delete(v6[0]);
    }
  }
  if (a1[13])
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "Y");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v4, a1[13]);
    if (v5 < 0) {
      operator delete(v4[0]);
    }
  }
}

void sub_1A4382BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK2NL14DateComponents13getFullFormatEP12__CFCalendarPK8__CFDatePd_block_invoke(uint64_t a1, const std::string::value_type *a2, int a3)
{
  char v5 = (std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  std::string::size_type v6 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v7 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    std::string::size_type v7 = v6;
  }
  std::string::append(v5, a2, v7);
  uint64_t v8 = *(void **)(*(void *)(a1 + 40) + 8);
  char v9 = (char *)v8[6];
  unint64_t v10 = v8[7];
  if ((unint64_t)v9 >= v10)
  {
    int v12 = (char *)v8[5];
    uint64_t v13 = (v9 - v12) >> 2;
    if ((unint64_t)(v13 + 1) >> 62) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = v10 - (void)v12;
    unint64_t v15 = (uint64_t)(v10 - (void)v12) >> 1;
    if (v15 <= v13 + 1) {
      unint64_t v15 = v13 + 1;
    }
    if (v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      char v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(v8 + 7), v16);
      int v12 = (char *)v8[5];
      char v9 = (char *)v8[6];
    }
    else
    {
      char v17 = 0;
    }
    int v18 = &v17[4 * v13];
    char v19 = &v17[4 * v16];
    *(_DWORD *)int v18 = a3;
    char v11 = v18 + 4;
    while (v9 != v12)
    {
      int v20 = *((_DWORD *)v9 - 1);
      v9 -= 4;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    v8[5] = v18;
    v8[6] = v11;
    v8[7] = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *(_DWORD *)char v9 = a3;
    char v11 = v9 + 4;
  }
  v8[6] = v11;
}

uint64_t updateTimeForUnit(__CFCalendar *a1, CFAbsoluteTime *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 > 63)
  {
    if (a3 > 511)
    {
      if (a3 != 512)
      {
        if (a3 != 0x2000 && a3 != 0x4000) {
          return resetTimeForUnit(a1, a2, a4, a5);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "w");
        resetTimeForUnit(a1, a2, (uint64_t)__p, 1);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "H");
        resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "m");
        resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "s");
        resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "E");
      resetTimeForUnit(a1, a2, (uint64_t)__p, 1);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "H");
      resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "m");
      resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_45;
    }
    if (a3 != 64)
    {
      if (a3 != 128) {
        return resetTimeForUnit(a1, a2, a4, a5);
      }
      goto LABEL_45;
    }
    goto LABEL_43;
  }
  if (a3 > 15)
  {
    if (a3 == 16)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "d");
      resetTimeForUnit(a1, a2, (uint64_t)__p, 1);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else if (a3 != 32)
    {
      return resetTimeForUnit(a1, a2, a4, a5);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "H");
    resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
LABEL_43:
    std::string::basic_string[abi:ne180100]<0>(__p, "m");
    resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_45;
  }
  if (a3 != 4 && a3 != 8) {
    return resetTimeForUnit(a1, a2, a4, a5);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "M");
  resetTimeForUnit(a1, a2, (uint64_t)__p, 1);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "d");
  resetTimeForUnit(a1, a2, (uint64_t)__p, 1);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "H");
  resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "m");
  resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
LABEL_45:
  std::string::basic_string[abi:ne180100]<0>(__p, "s");
  resetTimeForUnit(a1, a2, (uint64_t)__p, 0);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return resetTimeForUnit(a1, a2, a4, a5);
}

void sub_1A43831D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NL::DateComponents::getShortFormat(NL::DateComponents *this@<X0>, __CFCalendar *a2@<X1>, const __CFDate *a3@<X2>, double *a4@<X3>, std::string *a5@<X8>)
{
  if (a2 && a4)
  {
    uint64_t v37 = 0;
    uint64_t v38 = &v37;
    uint64_t v39 = 0x4002000000;
    char v40 = __Block_byref_object_copy__5;
    char v41 = __Block_byref_object_dispose__5;
    char v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 0x40000000;
    v36[2] = ___ZNK2NL14DateComponents14getShortFormatEP12__CFCalendarPK8__CFDatePd_block_invoke;
    void v36[3] = &unk_1E5B369A0;
    v36[4] = &v37;
    NL::DateComponents::enumerate((unsigned int *)this, (uint64_t)v36);
    getCurrentDateComponents(a2, a3, v35);
    *a4 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v35, a2, a3);
    unint64_t v10 = v38 + 5;
    if ((*((char *)v38 + 63) & 0x80000000) == 0)
    {
      int v11 = *((unsigned __int8 *)v38 + 63);
      if (v11 != 1)
      {
        if (v11 != 2) {
          goto LABEL_29;
        }
        if (*(_WORD *)v10 != 19812)
        {
          int v12 = v38 + 5;
LABEL_28:
          if (*v12 != 31053) {
            goto LABEL_29;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "y");
          updateTimeForUnit(a2, a4, 4, (uint64_t)__p, *((int *)this + 2));
          if (v34 < 0) {
            operator delete(__p[0]);
          }
LABEL_47:
          std::string::basic_string[abi:ne180100]<0>(__p, "M");
          updateTimeForUnit(a2, a4, 8, (uint64_t)__p, *((int *)this + 1));
          goto LABEL_82;
        }
        goto LABEL_38;
      }
      int v15 = *(unsigned __int8 *)v10;
      if (v15 == 77) {
        goto LABEL_47;
      }
      if (v15 != 121)
      {
        if (v15 != 100)
        {
LABEL_29:
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, "dMy")
            || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38 + 5, "dMyE"))
          {
            MEMORY[0x1A625AE00](v38 + 5, "dMy");
            std::string::basic_string[abi:ne180100]<0>(__p, "y");
            updateTimeForUnit(a2, a4, 4, (uint64_t)__p, *((int *)this + 2));
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "M");
            updateTimeForUnit(a2, a4, 8, (uint64_t)__p, *((int *)this + 1));
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_40;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38 + 5, "E"))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "E");
            updateTimeForUnit(a2, a4, 512, (uint64_t)__p, *((int *)this + 9));
            goto LABEL_82;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38 + 5, "HE"))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "E");
            updateTimeForUnit(a2, a4, 512, (uint64_t)__p, *((int *)this + 9));
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "H");
            updateTimeForUnit(a2, a4, 32, (uint64_t)__p, *((int *)this + 6));
            goto LABEL_82;
          }
          unint64_t v16 = (unsigned __int8 *)v38;
          std::string::basic_string[abi:ne180100]<0>(__p, "H");
          if (startswith(v16 + 40, (unsigned __int8 *)__p))
          {
            BOOL v17 = 1;
          }
          else
          {
            int v18 = (unsigned __int8 *)v38;
            std::string::basic_string[abi:ne180100]<0>(v31, "m");
            if (startswith(v18 + 40, (unsigned __int8 *)v31))
            {
              BOOL v17 = 1;
            }
            else
            {
              char v19 = (unsigned __int8 *)v38;
              std::string::basic_string[abi:ne180100]<0>(v29, "s");
              BOOL v17 = startswith(v19 + 40, (unsigned __int8 *)v29);
              if (v30 < 0) {
                operator delete(v29[0]);
              }
            }
            if (v32 < 0) {
              operator delete(v31[0]);
            }
          }
          if (v34 < 0) {
            operator delete(__p[0]);
          }
          int v20 = v38;
          if (v17)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "s");
            BOOL v21 = endswith(v20 + 5, (uint64_t *)__p);
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            if (v21) {
              int v22 = "Hms";
            }
            else {
              int v22 = "Hma";
            }
            MEMORY[0x1A625AE00](v38 + 5, v22);
            std::string::basic_string[abi:ne180100]<0>(__p, "h");
            updateTimeForUnit(a2, a4, 32, (uint64_t)__p, *((int *)this + 6));
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "m");
            updateTimeForUnit(a2, a4, 64, (uint64_t)__p, *((int *)this + 7));
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "s");
            updateTimeForUnit(a2, a4, 128, (uint64_t)__p, *((int *)this + 8));
            goto LABEL_82;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "dMyH");
          if (startswith((unsigned __int8 *)v20 + 40, (unsigned __int8 *)__p))
          {
            if (v34 < 0) {
              operator delete(__p[0]);
            }
LABEL_75:
            MEMORY[0x1A625AE00](v38 + 5, "dMyjm");
            std::string::basic_string[abi:ne180100]<0>(__p, "y");
            updateTimeForUnit(a2, a4, 4, (uint64_t)__p, *((int *)this + 2));
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "M");
            updateTimeForUnit(a2, a4, 8, (uint64_t)__p, *((int *)this + 1));
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "d");
            updateTimeForUnit(a2, a4, 16, (uint64_t)__p, *(int *)this);
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "H");
            updateTimeForUnit(a2, a4, 32, (uint64_t)__p, *((int *)this + 6));
            goto LABEL_82;
          }
          BOOL v23 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38 + 5, "dMyHE");
          if (v34 < 0) {
            operator delete(__p[0]);
          }
          if (v23) {
            goto LABEL_75;
          }
          BOOL v25 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38 + 5, "w");
          int v26 = v38 + 5;
          if (v25)
          {
            MEMORY[0x1A625AE00](v26, "dMy");
            std::string::basic_string[abi:ne180100]<0>(__p, "w");
            updateTimeForUnit(a2, a4, 0x2000, (uint64_t)__p, *((int *)this + 12));
          }
          else
          {
            BOOL v27 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, "wY");
            long long v28 = v38 + 5;
            if (v27)
            {
              MEMORY[0x1A625AE00](v28, "dMy");
              std::string::basic_string[abi:ne180100]<0>(__p, "Y");
              updateTimeForUnit(a2, a4, 0x4000, (uint64_t)__p, *((int *)this + 13));
              if (v34 < 0) {
                operator delete(__p[0]);
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "w");
              updateTimeForUnit(a2, a4, 0x2000, (uint64_t)__p, *((int *)this + 12));
            }
            else
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v28, "EwY"))
              {
LABEL_84:
                if (*((char *)v38 + 63) < 0)
                {
                  std::string::__init_copy_ctor_external(a5, (const std::string::value_type *)v38[5], v38[6]);
                }
                else
                {
                  long long v24 = *(_OWORD *)(v38 + 5);
                  a5->__r_.__value_.__r.__words[2] = v38[7];
                  *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v24;
                }
                _Block_object_dispose(&v37, 8);
                if (SHIBYTE(v44) < 0) {
                  operator delete(v42);
                }
                return;
              }
              MEMORY[0x1A625AE00](v38 + 5, "dMy");
              std::string::basic_string[abi:ne180100]<0>(__p, "Y");
              updateTimeForUnit(a2, a4, 0x4000, (uint64_t)__p, *((int *)this + 13));
              if (v34 < 0) {
                operator delete(__p[0]);
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "w");
              updateTimeForUnit(a2, a4, 0x2000, (uint64_t)__p, *((int *)this + 12));
              if (v34 < 0) {
                operator delete(__p[0]);
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "E");
              updateTimeForUnit(a2, a4, 512, (uint64_t)__p, *((int *)this + 9));
            }
          }
LABEL_82:
          if (v34 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_84;
        }
        goto LABEL_40;
      }
      goto LABEL_20;
    }
    uint64_t v13 = v38[6];
    if (v13 == 1)
    {
      int v14 = *(unsigned __int8 *)*v10;
      switch(v14)
      {
        case 'M':
          goto LABEL_47;
        case 'd':
LABEL_40:
          std::string::basic_string[abi:ne180100]<0>(__p, "d");
          updateTimeForUnit(a2, a4, 16, (uint64_t)__p, *(int *)this);
          goto LABEL_82;
        case 'y':
LABEL_20:
          std::string::basic_string[abi:ne180100]<0>(__p, "y");
          updateTimeForUnit(a2, a4, 4, (uint64_t)__p, *((int *)this + 2));
          goto LABEL_82;
      }
      uint64_t v13 = v38[6];
    }
    if (v13 != 2) {
      goto LABEL_29;
    }
    if (*(_WORD *)*v10 != 19812)
    {
      if (v38[6] != 2) {
        goto LABEL_29;
      }
      int v12 = (_WORD *)*v10;
      goto LABEL_28;
    }
LABEL_38:
    std::string::basic_string[abi:ne180100]<0>(__p, "M");
    updateTimeForUnit(a2, a4, 8, (uint64_t)__p, *((int *)this + 1));
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_40;
  }

  std::string::basic_string[abi:ne180100]<0>(a5, 0);
}

void sub_1A4383C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v26 - 128), 8);
  if (*(char *)(v26 - 65) < 0) {
    operator delete(*(void **)(v26 - 88));
  }
  _Unwind_Resume(a1);
}

void ___ZNK2NL14DateComponents14getShortFormatEP12__CFCalendarPK8__CFDatePd_block_invoke(uint64_t a1, std::string::value_type *a2)
{
  if (a2[23] < 0) {
    a2 = *(std::string::value_type **)a2;
  }
  std::string::push_back((std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *a2);
}

void NL::DatePeriod::setCalendarWithIdentifier(const void **this, const __CFString *a2)
{
  CFStringRef v3 = this + 1;
  nlp::CFScopedPtr<__CFCalendar *>::reset(this + 1, 0);
  if (a2)
  {
    CFCalendarRef v4 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
    nlp::CFScopedPtr<__CFCalendar *>::reset(v3, v4);
  }
}

void NL::DatePeriod::setDisplayKey(const void **this, const __CFString *a2)
{
  nlp::CFScopedPtr<__CFString const*>::reset(this, 0);
  if (a2)
  {
    CFTypeRef v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset(this, v4);
  }
}

void NL::DatePeriod::setCurrentDate(const void **this, const __CFDate *a2)
{
  CFStringRef v3 = this + 28;
  nlp::CFScopedPtr<__CFDate const*>::reset(this + 28, 0);
  if (a2)
  {
    CFTypeRef v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFDate const*>::reset(v3, v4);
  }
}

void NL::DatePeriod::setLocale(const void **this, const __CFLocale *a2)
{
  CFStringRef v3 = this + 2;
  nlp::CFScopedPtr<__CFLocale const*>::reset(this + 2, 0);
  if (a2)
  {
    CFTypeRef v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFLocale const*>::reset(v3, v4);
  }
}

BOOL NL::DatePeriod::updateAmbiguousDateComponents(NL::DatePeriod *this, NL::DateComponents *a2, NL::DateComponents *a3)
{
  BOOL result = NL::DateComponents::isTime(a2);
  if (result)
  {
    int v6 = *((_DWORD *)a2 + 6);
    if (v6)
    {
      if (v6 <= 8) {
        *((_DWORD *)a2 + 6) = v6 + 12;
      }
      BOOL result = NL::DateComponents::isTime(a3);
      if (result)
      {
        int v7 = *((_DWORD *)a3 + 6);
        if (v7)
        {
          if (v7 <= 8) {
            *((_DWORD *)a3 + 6) = v7 + 12;
          }
        }
      }
    }
  }
  return result;
}

BOOL NL::DateComponents::isTime(NL::DateComponents *this)
{
  return (*((_DWORD *)this + 6) || *((_DWORD *)this + 7) || *((_DWORD *)this + 8) || *((_DWORD *)this + 4))
      && !NL::DateComponents::hasDate(this);
}

double NL::DatePeriod::resolveDateComponents(NL::DatePeriod *this, NL::DateComponents *a2, NL::DateComponents *a3, int a4, int a5)
{
  long long v7 = *(_OWORD *)((char *)this + 44);
  long long v27 = *(_OWORD *)((char *)this + 28);
  long long v28 = v7;
  long long v8 = *(_OWORD *)((char *)this + 76);
  long long v29 = *(_OWORD *)((char *)this + 60);
  long long v30 = v8;
  long long v9 = *(_OWORD *)((char *)this + 108);
  long long v23 = *(_OWORD *)((char *)this + 92);
  long long v24 = v9;
  long long v10 = *(_OWORD *)((char *)this + 140);
  long long v25 = *(_OWORD *)((char *)this + 124);
  long long v26 = v10;
  if (*((_DWORD *)this + 6) > 0x28u) {
    goto LABEL_16;
  }
  if (a5) {
    NL::DatePeriod::updateAmbiguousDateComponents(this, (NL::DateComponents *)&v27, (NL::DateComponents *)&v23);
  }
  if (NL::DateComponents::isEmpty((NL::DateComponents *)&v23))
  {
    if (a4 != 7)
    {
      if (a4 == 5)
      {
        uint64_t v13 = (__CFCalendar *)*((void *)this + 1);
        CFLocaleRef v14 = (const __CFLocale *)*((void *)this + 2);
        CFDateRef v15 = (const __CFDate *)*((void *)this + 28);
        unint64_t v16 = (NL::DateComponents *)&v27;
        int v17 = 1;
        goto LABEL_15;
      }
      if (a4 == 4)
      {
        long long v23 = v27;
        long long v24 = v28;
        long long v25 = v29;
        long long v26 = v30;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        uint64_t v13 = (__CFCalendar *)*((void *)this + 1);
        CFLocaleRef v14 = (const __CFLocale *)*((void *)this + 2);
        CFDateRef v15 = (const __CFDate *)*((void *)this + 28);
        unint64_t v16 = (NL::DateComponents *)&v23;
        int v17 = -1;
LABEL_15:
        updateDateComponentsWithOffset(v13, v14, v15, v16, v17);
        goto LABEL_16;
      }
      goto LABEL_16;
    }
LABEL_12:
    long long v23 = v27;
    long long v24 = v28;
    long long v25 = v29;
    long long v26 = v30;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    goto LABEL_16;
  }
  if ((a4 - 5) < 2)
  {
    long long v27 = v23;
    long long v28 = v24;
    long long v29 = v25;
    long long v30 = v26;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    goto LABEL_16;
  }
  if (a4 == 7 || a4 == 4) {
    goto LABEL_12;
  }
LABEL_16:
  long long v18 = v28;
  *(_OWORD *)a2 = v27;
  *((_OWORD *)a2 + 1) = v18;
  long long v19 = v30;
  *((_OWORD *)a2 + 2) = v29;
  *((_OWORD *)a2 + 3) = v19;
  long long v20 = v24;
  *(_OWORD *)a3 = v23;
  *((_OWORD *)a3 + 1) = v20;
  double result = *(double *)&v25;
  long long v22 = v26;
  *((_OWORD *)a3 + 2) = v25;
  *((_OWORD *)a3 + 3) = v22;
  return result;
}

BOOL NL::DateComponents::isEmpty(NL::DateComponents *this)
{
  return !NL::DateComponents::hasDate(this)
      && !*((_DWORD *)this + 6)
      && !*((_DWORD *)this + 7)
      && !*((_DWORD *)this + 8)
      && *((_DWORD *)this + 4) == 0;
}

unint64_t updateDateComponentsWithOffset(__CFCalendar *a1, const __CFLocale *a2, const __CFDate *a3, NL::DateComponents *a4, int a5)
{
  memset(v6, 0, sizeof(v6));
  if (*((_DWORD *)a4 + 8))
  {
    memset(v6, 0, 32);
    LODWORD(v6[2]) = a5;
    memset((char *)&v6[2] + 4, 0, 24);
LABEL_3:
    HIDWORD(v6[3]) = 0;
    return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
  }
  if (*((_DWORD *)a4 + 7))
  {
    memset(v6, 0, 28);
    HIDWORD(v6[1]) = a5;
    memset(&v6[2], 0, 32);
    return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
  }
  if (*((_DWORD *)a4 + 6))
  {
    memset(v6, 0, 24);
    DWORD2(v6[1]) = a5;
LABEL_9:
    *(_OWORD *)((char *)&v6[1] + 12) = 0uLL;
    *(_OWORD *)((char *)&v6[2] + 12) = 0uLL;
    goto LABEL_3;
  }
  if (*((_DWORD *)a4 + 9))
  {
    memset(v6, 0, 36);
    DWORD1(v6[2]) = a5;
    memset((char *)&v6[2] + 8, 0, 24);
    return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
  }
  if (*(_DWORD *)a4)
  {
    LODWORD(v6[0]) = a5;
    *(_OWORD *)((char *)v6 + 4) = 0uLL;
    *(_OWORD *)((char *)&v6[1] + 4) = 0uLL;
    *(_OWORD *)((char *)&v6[2] + 4) = 0uLL;
    void v6[3] = 0uLL;
    return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
  }
  if (*((_DWORD *)a4 + 1))
  {
    DWORD1(v6[0]) = a5;
    *(_OWORD *)((char *)v6 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0uLL;
    *(_OWORD *)((char *)&v6[1] + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0uLL;
    *(_OWORD *)((char *)&v6[2] + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0uLL;
    *((void *)&v6[3] + 1) = 0;
    return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
  }
  if (*((_DWORD *)a4 + 2))
  {
    DWORD2(v6[0]) = a5;
    *(_OWORD *)((char *)v6 + 12) = 0uLL;
    goto LABEL_9;
  }
  if (*((_DWORD *)a4 + 12))
  {
    memset(v6, 0, 48);
    LODWORD(v6[3]) = a5;
    *(void *)((char *)&v6[3] + 4) = 0;
    goto LABEL_3;
  }
  if (*((_DWORD *)a4 + 13))
  {
    memset(v6, 0, 52);
    DWORD1(v6[3]) = a5;
  }
  return updateDateComponentsWithOffsetComponents((unint64_t)a1, a2, a3, a4, (const NL::DateComponents *)v6);
}

double NL::DatePeriod::resolveDateComponentsAsRange(NL::DatePeriod *this, NL::DateComponents *a2, NL::DateComponents *a3, int a4)
{
  long long v8 = *(_OWORD *)((char *)this + 44);
  long long v22 = *(_OWORD *)((char *)this + 28);
  long long v23 = v8;
  long long v9 = *(_OWORD *)((char *)this + 76);
  long long v24 = *(_OWORD *)((char *)this + 60);
  long long v25 = v9;
  long long v10 = *(_OWORD *)((char *)this + 108);
  long long v18 = *(_OWORD *)((char *)this + 92);
  long long v19 = v10;
  long long v11 = *(_OWORD *)((char *)this + 140);
  long long v20 = *(_OWORD *)((char *)this + 124);
  long long v21 = v11;
  if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v18))
  {
    if (a4 != 7)
    {
      if (a4 == 6)
      {
        int v12 = &v18;
        goto LABEL_9;
      }
      if (a4 != 4)
      {
LABEL_13:
        updateDateComponentsWithOffset(*((__CFCalendar **)this + 1), *((const __CFLocale **)this + 2), *((const __CFDate **)this + 28), (NL::DateComponents *)&v18, 1);
        goto LABEL_14;
      }
    }
    long long v18 = v22;
    long long v19 = v23;
    long long v20 = v24;
    long long v21 = v25;
    int v12 = &v22;
LABEL_9:
    void v12[2] = 0u;
    void v12[3] = 0u;
    *int v12 = 0u;
    v12[1] = 0u;
    goto LABEL_13;
  }
  long long v18 = v22;
  long long v19 = v23;
  long long v20 = v24;
  long long v21 = v25;
  updateDateComponentsWithOffset(*((__CFCalendar **)this + 1), *((const __CFLocale **)this + 2), *((const __CFDate **)this + 28), (NL::DateComponents *)&v18, 1);
  switch(a4)
  {
    case 4:
      long long v18 = v22;
      long long v19 = v23;
      long long v20 = v24;
      long long v21 = v25;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      break;
    case 5:
      long long v22 = v18;
      long long v23 = v19;
      long long v24 = v20;
      long long v25 = v21;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      break;
    case 6:
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      break;
    case 7:
      long long v18 = v22;
      long long v19 = v23;
      long long v20 = v24;
      long long v21 = v25;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      goto LABEL_13;
    default:
      break;
  }
LABEL_14:
  long long v13 = v23;
  *(_OWORD *)a2 = v22;
  *((_OWORD *)a2 + 1) = v13;
  long long v14 = v25;
  *((_OWORD *)a2 + 2) = v24;
  *((_OWORD *)a2 + 3) = v14;
  long long v15 = v19;
  *(_OWORD *)a3 = v18;
  *((_OWORD *)a3 + 1) = v15;
  double result = *(double *)&v20;
  long long v17 = v21;
  *((_OWORD *)a3 + 2) = v20;
  *((_OWORD *)a3 + 3) = v17;
  return result;
}

void *NL::DateConverter::DateConverter(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  NLTextSlotRecurrentEvent *result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void NL::DateConverter::datePeriodForValues(CFStringRef theString@<X1>, const __CFDictionary *a2@<X2>, void *a3@<X8>)
{
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if (a2)
    {
      if (Length) {
        operator new();
      }
    }
  }
  *a3 = 0;
}

void sub_1A43848C8(_Unwind_Exception *a1)
{
  MEMORY[0x1A625B130](v1, 0x1060C407A40A00CLL);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForCalendarTime(const __CFDictionary ***this, const __CFLocale *a2, CFDictionaryRef theDict, const __CFString *a4, NL::DatePeriod *a5)
{
  uint64_t Value = 0;
  if (a2)
  {
    if (theDict)
    {
      if (a4)
      {
        uint64_t Value = (uint64_t)CFDictionaryGetValue(theDict, @"CalendarSystem");
        if (Value)
        {
          long long v11 = copyCurrentCalendar((uint64_t)a2);
          v37[1] = v11;
          if (v11)
          {
            int v12 = v11;
            CFStringRef v13 = (const __CFString *)MEMORY[0x1A625A0E0]();
            if (!CFStringHasPrefix((CFStringRef)Value, @"generic")
              && CFStringFind((CFStringRef)Value, v13, 0).location == -1)
            {
              uint64_t Value = 0;
LABEL_46:
              CFRelease(v12);
              return Value;
            }
            v37[0] = 0;
            CFStringRef v14 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
            CFStringRef v28 = v13;
            CFStringRef v15 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
            CFStringRef v16 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E4F1D220]);
            if (!NL::ParserContext::regionValidForLanguage((NL::ParserContext *)*this, v14, v16, v15)) {
              CFStringRef v15 = (const __CFString *)NL::ParserContext::canonicalRegionForLanguage(*this, v14, v16);
            }
            if (v14) {
              BOOL v17 = v16 == 0;
            }
            else {
              BOOL v17 = 1;
            }
            int v18 = !v17;
            if (!v17 && v15)
            {
              CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@_%@_%@_%@_%@", a4, Value, v14, v16, v15);
              goto LABEL_23;
            }
            if (v14 && v15)
            {
              CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@_%@_%@_%@", a4, Value, v14, v15);
LABEL_23:
              v37[0] = v19;
              if (!v19) {
                goto LABEL_43;
              }
LABEL_32:
              CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v19);
              if (v21)
              {
                long long v35 = 0u;
                long long v36 = 0u;
                long long v33 = 0u;
                long long v34 = 0u;
                long long v31 = 0u;
                long long v32 = 0u;
                long long v29 = 0u;
                long long v30 = 0u;
                long long v22 = (std::__shared_weak_count *)this[1];
                if (v22) {
                  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t Value = updateDateComponentsWithValues((SInt32 *)&v33, (uint64_t)a2, v21, 0);
                if (v22) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
                }
                if (Value)
                {
                  long long v23 = v34;
                  *(_OWORD *)((char *)a5 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v33;
                  *(_OWORD *)((char *)a5 + 44) = v23;
                  long long v24 = v36;
                  *(_OWORD *)((char *)a5 + 6nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v35;
                  *(_OWORD *)((char *)a5 + 76) = v24;
                  long long v25 = v30;
                  *(_OWORD *)((char *)a5 + 92) = v29;
                  *(_OWORD *)((char *)a5 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v25;
                  long long v26 = v32;
                  *(_OWORD *)((char *)a5 + 124) = v31;
                  *(_OWORD *)((char *)a5 + 14nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v26;
                  if (NL::DateComponents::isTime((NL::DateComponents *)&v33)
                    && NL::DateComponents::isEmpty((NL::DateComponents *)&v29)
                    && !CFDictionaryContainsKey(v21, @"a"))
                  {
                    *((unsigned char *)a5 + 24nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 1;
                  }
                  NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
                  *((_DWORD *)a5 + 6) = 39;
                  NL::DatePeriod::setCalendarWithIdentifier((const void **)a5, v28);
                }
                goto LABEL_44;
              }
LABEL_43:
              uint64_t Value = 0;
LABEL_44:
              if (v37[0]) {
                CFRelease(v37[0]);
              }
              goto LABEL_46;
            }
            if (v18)
            {
              CFStringRef v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@_%@_%@_%@", a4, Value, v14, v16);
            }
            else
            {
              if (!v14) {
                goto LABEL_31;
              }
              CFStringRef v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@_%@_%@", a4, Value, v14);
            }
            nlp::CFScopedPtr<__CFString const*>::reset(v37, v20);
LABEL_31:
            CFStringRef v19 = (CFStringRef)v37[0];
            if (!v37[0]) {
              goto LABEL_43;
            }
            goto LABEL_32;
          }
          return 0;
        }
      }
    }
  }
  return Value;
}

void sub_1A4384C70(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v2 - 104), 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)(v2 - 96), 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForCalendarDate(const __CFDictionary ***this, const __CFLocale *a2, CFDictionaryRef theDict, const __CFString *a4, NL::DatePeriod *a5)
{
  uint64_t Value = 0;
  if (a2)
  {
    if (theDict)
    {
      uint64_t Value = (uint64_t)CFDictionaryGetValue(theDict, @"CalendarSystem");
      if (Value)
      {
        long long v11 = copyCurrentCalendar((uint64_t)a2);
        v37[1] = v11;
        if (v11)
        {
          int v12 = v11;
          CFStringRef v13 = (const __CFString *)MEMORY[0x1A625A0E0]();
          if (!CFStringHasPrefix((CFStringRef)Value, @"generic")
            && CFStringFind((CFStringRef)Value, v13, 0).location == -1)
          {
            uint64_t Value = 0;
LABEL_45:
            CFRelease(v12);
            return Value;
          }
          v37[0] = 0;
          CFStringRef v14 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
          CFStringRef v28 = v13;
          CFStringRef v15 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
          CFStringRef v16 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E4F1D220]);
          if (!NL::ParserContext::regionValidForLanguage((NL::ParserContext *)*this, v14, v16, v15)) {
            CFStringRef v15 = (const __CFString *)NL::ParserContext::canonicalRegionForLanguage(*this, v14, v16);
          }
          if (v14) {
            BOOL v17 = v16 == 0;
          }
          else {
            BOOL v17 = 1;
          }
          int v18 = !v17;
          if (!v17 && v15)
          {
            CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@_%@_%@_%@_%@", a4, Value, v14, v16, v15);
            goto LABEL_22;
          }
          if (v14 && v15)
          {
            CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@_%@_%@_%@", a4, Value, v14, v15);
LABEL_22:
            v37[0] = v19;
            if (!v19) {
              goto LABEL_42;
            }
LABEL_31:
            CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v19);
            if (v21)
            {
              long long v35 = 0u;
              long long v36 = 0u;
              long long v33 = 0u;
              long long v34 = 0u;
              long long v31 = 0u;
              long long v32 = 0u;
              long long v29 = 0u;
              long long v30 = 0u;
              long long v22 = (std::__shared_weak_count *)this[1];
              if (v22) {
                atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t Value = updateDateComponentsWithValues((SInt32 *)&v33, (uint64_t)a2, v21, 0);
              if (v22) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
              if (Value)
              {
                long long v23 = v34;
                *(_OWORD *)((char *)a5 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v33;
                *(_OWORD *)((char *)a5 + 44) = v23;
                long long v24 = v36;
                *(_OWORD *)((char *)a5 + 6nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v35;
                *(_OWORD *)((char *)a5 + 76) = v24;
                long long v25 = v30;
                *(_OWORD *)((char *)a5 + 92) = v29;
                *(_OWORD *)((char *)a5 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v25;
                long long v26 = v32;
                *(_OWORD *)((char *)a5 + 124) = v31;
                *(_OWORD *)((char *)a5 + 14nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v26;
                if (NL::DateComponents::isTime((NL::DateComponents *)&v33)
                  && NL::DateComponents::isEmpty((NL::DateComponents *)&v29)
                  && !CFDictionaryContainsKey(v21, @"a"))
                {
                  *((unsigned char *)a5 + 24nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 1;
                }
                NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
                *((_DWORD *)a5 + 6) = 38;
                NL::DatePeriod::setCalendarWithIdentifier((const void **)a5, v28);
              }
              goto LABEL_43;
            }
LABEL_42:
            uint64_t Value = 0;
LABEL_43:
            if (v37[0]) {
              CFRelease(v37[0]);
            }
            goto LABEL_45;
          }
          if (v18)
          {
            CFStringRef v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@_%@_%@_%@", a4, Value, v14, v16);
          }
          else
          {
            if (!v14) {
              goto LABEL_30;
            }
            CFStringRef v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@_%@_%@", a4, Value, v14);
          }
          nlp::CFScopedPtr<__CFString const*>::reset(v37, v20);
LABEL_30:
          CFStringRef v19 = (CFStringRef)v37[0];
          if (!v37[0]) {
            goto LABEL_42;
          }
          goto LABEL_31;
        }
        return 0;
      }
    }
  }
  return Value;
}

void sub_1A4385034(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v2 - 104), 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)(v2 - 96), 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForFormattedDate(NL::DateConverter *this, const __CFLocale *a2, CFDictionaryRef theDict, NL::DatePeriod *a4)
{
  uint64_t updated = 0;
  if (a2 && theDict)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v7 = (std::__shared_weak_count *)*((void *)this + 1);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t updated = updateDateComponentsWithValues((SInt32 *)&v17, (uint64_t)a2, theDict, 0);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (updated)
    {
      long long v8 = v18;
      *(_OWORD *)((char *)a4 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v17;
      *(_OWORD *)((char *)a4 + 44) = v8;
      long long v9 = v20;
      *(_OWORD *)((char *)a4 + 6nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v19;
      *(_OWORD *)((char *)a4 + 76) = v9;
      long long v10 = v14;
      *(_OWORD *)((char *)a4 + 92) = v13;
      *(_OWORD *)((char *)a4 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v10;
      long long v11 = v16;
      *(_OWORD *)((char *)a4 + 124) = v15;
      *(_OWORD *)((char *)a4 + 14nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v11;
      if (NL::DateComponents::isTime((NL::DateComponents *)&v17)
        && NL::DateComponents::isEmpty((NL::DateComponents *)&v13)
        && !CFDictionaryContainsKey(theDict, @"a"))
      {
        *((unsigned char *)a4 + 24nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 1;
      }
      NL::DatePeriod::setDisplayKey((const void **)a4, @"FORMATTED");
      *((_DWORD *)a4 + 6) = 38;
      NL::DatePeriod::setCalendarWithIdentifier((const void **)a4, @"gregorian");
    }
  }
  return updated;
}

void sub_1A43851A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NL::DateConverter::updatePeriodForHolidayCompoundDate(uint64_t **this, const __CFLocale *a2, CFDictionaryRef theDict, NL::DatePeriod *a4)
{
  uint64_t result = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (theDict)
    {
      uint64_t result = CFDictionaryContainsKey(theDict, @"HolidayDate");
      if (result)
      {
        CFIndex Count = CFDictionaryGetCount(theDict);
        v21[1] = v21;
        MEMORY[0x1F4188790]();
        long long v11 = (const void **)((char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
        if (v10 >= 0x200) {
          size_t v12 = 512;
        }
        else {
          size_t v12 = v10;
        }
        bzero((char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
        CFDictionaryGetKeysAndValues(theDict, v11, 0);
        if (Count >= 1)
        {
          v21[0] = (char *)a4 + 28;
          do
          {
            CFStringRef v13 = (const __CFString *)*v11;
            if (!CFStringHasPrefix((CFStringRef)*v11, @"HolidayDate"))
            {
              if (CFStringHasPrefix(v13, @"Relative"))
              {
                NL::DateConverter::updatePeriodForRelativeDate(this, v13, a2, a4);
              }
              else if (CFStringHasSuffix(v13, @"Date"))
              {
                CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v13);
                if (Value
                  && (NL::DateConverter::updatePeriodForValueDate((const __CFDate ***)this, v13, a2, Value, a4) & 1) == 0)
                {
                  return 0;
                }
              }
              else
              {
                long long v24 = 0u;
                long long v25 = 0u;
                long long v22 = 0u;
                long long v23 = 0u;
                long long v15 = (std::__shared_weak_count *)this[1];
                if (v15) {
                  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                char updated = updateDateComponentsWithValues((SInt32 *)&v22, (uint64_t)a2, theDict, 0);
                if (v15) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
                }
                if ((updated & 1) == 0) {
                  return 0;
                }
                long long v17 = v23;
                long long v18 = (_OWORD *)v21[0];
                *(_OWORD *)v21[0] = v22;
                v18[1] = v17;
                long long v19 = v25;
                v18[2] = v24;
                void v18[3] = v19;
                *(_OWORD *)((char *)a4 + 92) = 0u;
                *(_OWORD *)((char *)a4 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
                *(_OWORD *)((char *)a4 + 124) = 0u;
                *(_OWORD *)((char *)a4 + 14nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0u;
              }
            }
            ++v11;
            --Count;
          }
          while (Count);
        }
        CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"HolidayDate");
        uint64_t result = NL::DateConverter::updatePeriodForHolidayDate((const __CFDate ***)this, a2, v20, a4);
        if (result)
        {
          NL::DatePeriod::setDisplayKey((const void **)a4, @"HOLIDAY");
          return 1;
        }
      }
    }
  }
  return result;
}

void sub_1A4385428(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NL::DateConverter::updatePeriodForHolidayRelativeDate(const __CFDate ***this, const __CFLocale *a2, CFDictionaryRef theDict, const __CFString *a4, NL::DatePeriod *a5)
{
  uint64_t updated = 0;
  if (!theDict || !a2 || !a4) {
    return updated;
  }
  if (!CFDictionaryContainsKey(theDict, @"HolidayDate")) {
    return 0;
  }
  long long v11 = copyCurrentCalendar((uint64_t)a2);
  long long v16 = v11;
  getCurrentDateComponents(v11, **this, &v15);
  if (!CFStringHasSuffix(a4, @"ThisDate"))
  {
    if (CFStringHasSuffix(a4, @"LastDate"))
    {
      int v12 = DWORD2(v15) - 1;
      goto LABEL_10;
    }
    if (!CFStringHasSuffix(a4, @"EveryDate"))
    {
      if (CFStringHasSuffix(a4, @"NextDate"))
      {
        int v12 = DWORD2(v15) + 1;
      }
      else
      {
        CFStringHasSuffix(a4, @"AnyDate");
        int v12 = 0;
      }
      goto LABEL_10;
    }
  }
  int v12 = DWORD2(v15);
LABEL_10:
  *((_DWORD *)a5 + 22) = 0;
  *(_OWORD *)((char *)a5 + 72) = 0u;
  *(_OWORD *)((char *)a5 + 56) = 0u;
  *(_OWORD *)((char *)a5 + 4nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0u;
  *(void *)((char *)a5 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *((_DWORD *)a5 + 9) = v12;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"HolidayDate");
  uint64_t updated = NL::DateConverter::updatePeriodForHolidayDate(this, a2, Value, a5);
  if (updated) {
    NL::DatePeriod::setDisplayKey((const void **)a5, @"HOLIDAY");
  }
  if (v11) {
    CFRelease(v11);
  }
  return updated;
}

void sub_1A43855D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForHolidayDate(const __CFDate ***this, const __CFLocale *a2, const __CFDictionary *a3, NL::DatePeriod *a4)
{
  uint64_t updated = 0;
  if (a2 && a3)
  {
    CFDictionaryRef v7 = (*this)[3];
    if (v7
      && CFDictionaryGetCount(v7)
      && (unint64_t Value = (unint64_t)CFDictionaryGetValue(a3, @"Identifier"),
          CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(a3, @"CalendarSystem"),
          (unint64_t)v11 | Value)
      && (CFStringRef v12 = v11, v13 = copyCurrentCalendar((uint64_t)a2), (v36 = v13) != 0))
    {
      long long v14 = v13;
      MutableCFStringRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v12);
      CFMutableStringRef v35 = MutableCopy;
      CFStringUppercase(MutableCopy, 0);
      CFStringAppendFormat(MutableCopy, 0, @"-%@-HOLIDAY", Value);
      long long v16 = *(_OWORD *)((char *)a4 + 44);
      long long v31 = *(_OWORD *)((char *)a4 + 28);
      long long v32 = v16;
      long long v17 = *(_OWORD *)((char *)a4 + 76);
      long long v33 = *(_OWORD *)((char *)a4 + 60);
      long long v34 = v17;
      long long v18 = *(_OWORD *)((char *)a4 + 108);
      long long v27 = *(_OWORD *)((char *)a4 + 92);
      long long v28 = v18;
      long long v19 = *(_OWORD *)((char *)a4 + 140);
      long long v29 = *(_OWORD *)((char *)a4 + 124);
      long long v30 = v19;
      if (NL::DateComponents::isEmpty((NL::DateComponents *)&v31))
      {
        getCurrentDateComponents(v14, **this, &v26);
        CFDictionaryRef v20 = (double *)DWORD2(v26);
        DWORD2(v31) = DWORD2(v26);
      }
      else
      {
        CFDictionaryRef v20 = (double *)DWORD2(v31);
      }
      uint64_t updated = updateDateComponentsWithHolidayReference((*this)[3], MutableCopy, v14, **this, (*this)[1], v20, (NL::DateComponents *)&v31, (NL::DateComponents *)&v27);
      if (updated)
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, MutableCopy);
        *((_DWORD *)a4 + 6) = 40;
        NL::DatePeriod::setCalendarWithIdentifier((const void **)a4, @"gregorian");
        long long v22 = v32;
        *(_OWORD *)((char *)a4 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v31;
        *(_OWORD *)((char *)a4 + 44) = v22;
        long long v23 = v34;
        *(_OWORD *)((char *)a4 + 6nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v33;
        *(_OWORD *)((char *)a4 + 76) = v23;
        long long v24 = v28;
        *(_OWORD *)((char *)a4 + 92) = v27;
        *(_OWORD *)((char *)a4 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v24;
        long long v25 = v30;
        *(_OWORD *)((char *)a4 + 124) = v29;
        *(_OWORD *)((char *)a4 + 14nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v25;
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      CFRelease(v14);
    }
    else
    {
      return 0;
    }
  }
  return updated;
}

void sub_1A43857CC(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFString *>::reset((const void **)(v1 - 64), 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

BOOL NL::DateConverter::updatePeriodForValueCompoundDate(NL::DateConverter *this, const __CFLocale *a2, CFDictionaryRef theDict, const void **a4)
{
  CFDictionaryRef v21 = a4;
  BOOL result = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2 && theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    uint64_t v20 = (uint64_t)&v20;
    MEMORY[0x1F4188790](Count);
    unint64_t v10 = (const void **)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v9 >= 0x200) {
      size_t v11 = 512;
    }
    else {
      size_t v11 = v9;
    }
    bzero((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
    CFDictionaryGetKeysAndValues(theDict, v10, 0);
    if (Count >= 1)
    {
      CFStringRef v12 = 0;
      CFStringRef v13 = (_OWORD *)((char *)v21 + 28);
      long long v14 = (_OWORD *)((char *)v21 + 92);
      do
      {
        CFStringRef v15 = (const __CFString *)*v10;
        if (!CFStringHasSuffix((CFStringRef)*v10, @"Date"))
        {
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v16 = (std::__shared_weak_count *)*((void *)this + 1);
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          updateDateComponentsWithValues((SInt32 *)&v22, (uint64_t)a2, theDict, 0);
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          long long v17 = v23;
          _OWORD *v13 = v22;
          v13[1] = v17;
          long long v18 = v25;
          uint64_t v13[2] = v24;
          void v13[3] = v18;
          *long long v14 = 0u;
          v14[1] = 0u;
          CFStringRef v15 = v12;
          uint64_t v14[2] = 0u;
          void v14[3] = 0u;
        }
        ++v10;
        CFStringRef v12 = v15;
        --Count;
      }
      while (Count);
      if (v15)
      {
        if (CFStringHasPrefix(v15, @"Relative"))
        {
          BOOL result = NL::DateConverter::updatePeriodForRelativeDate((uint64_t **)this, v15, a2, (NL::DatePeriod *)v21);
          if (!result) {
            return result;
          }
LABEL_20:
          NL::DatePeriod::setDisplayKey(v21, @"FORMATTED");
          *((_DWORD *)v21 + 6) = 38;
          return 1;
        }
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v15);
        if (NL::DateConverter::updatePeriodForValueDate((const __CFDate ***)this, v15, a2, Value, (NL::DatePeriod *)v21))goto LABEL_20; {
      }
        }
    }
    return 0;
  }
  return result;
}

void sub_1A4385A28(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL NL::DateConverter::updatePeriodForRelativeCompoundDate(NL::DateConverter *this, CFStringRef theString, const __CFLocale *a3, const __CFDictionary *a4, NL::DatePeriod *a5)
{
  if (!theString) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  if (!a3 || !Length) {
    return 0;
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  size_t v11 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  updateDateComponentsWithValues((SInt32 *)&v15, (uint64_t)a3, a4, 0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  long long v12 = v16;
  *(_OWORD *)((char *)a5 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v15;
  *(_OWORD *)((char *)a5 + 44) = v12;
  long long v13 = v18;
  *(_OWORD *)((char *)a5 + 6nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v17;
  *(_OWORD *)((char *)a5 + 76) = v13;
  *(_OWORD *)((char *)a5 + 92) = 0u;
  *(_OWORD *)((char *)a5 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)a5 + 124) = 0u;
  *(_OWORD *)((char *)a5 + 14nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0u;

  return NL::DateConverter::updatePeriodForRelativeDate((uint64_t **)this, theString, a3, a5);
}

void sub_1A4385B4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NL::DateConverter::updatePeriodForOrdinalNumDate(uint64_t **this, const __CFString *a2, const __CFLocale *a3, const __CFDictionary *a4, NL::DatePeriod *a5)
{
  uint64_t v5 = 0;
  if (a2 && a3 && a4)
  {
    uint64_t v75 = 0;
    int v76 = 0;
    uint64_t v73 = 0;
    int v74 = 0;
    long long v11 = *(_OWORD *)((char *)a5 + 44);
    long long v69 = *(_OWORD *)((char *)a5 + 28);
    long long v70 = v11;
    long long v12 = *(_OWORD *)((char *)a5 + 76);
    long long v71 = *(_OWORD *)((char *)a5 + 60);
    long long v72 = v12;
    long long v13 = *(_OWORD *)((char *)a5 + 108);
    long long v66 = *(_OWORD *)((char *)a5 + 92);
    long long v67 = v13;
    int v14 = *((_DWORD *)a5 + 32);
    int v68 = *((_DWORD *)a5 + 31);
    long long v64 = *(_OWORD *)((char *)a5 + 132);
    uint64_t v65 = *(void *)((char *)a5 + 148);
    uint64_t v63 = -1;
    int v61 = -1;
    int v62 = -1;
    int v59 = -1;
    int v60 = -1;
    int v57 = -1;
    int v58 = -1;
    long long v15 = copyCurrentCalendar((uint64_t)a3);
    *(void *)&at[1] = v15;
    if (v15)
    {
      long long v16 = v15;
      uint64_t v17 = MEMORY[0x1A625A0E0]();
      int v54 = v14;
      double CurrentTime = getCurrentTime(**this);
      at[0] = CurrentTime;
      int v19 = *((unsigned __int8 *)*this + 66);
      uint64_t v20 = intValueForNumberInValues(a3, a4);
      CFCalendarDecomposeAbsoluteTime(v16, CurrentTime, "yMdEwHms", (char *)&v63 + 4, &v63, &v62, &v61, &v60, &v59, &v58, &v57);
      if (CFStringHasSuffix(a2, @"EveryNumIsoDayPerMonthDate"))
      {
        CFDictionaryRef v21 = (std::__shared_weak_count *)this[1];
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char updated = updateDateComponentsWithValues((SInt32 *)&v69, (uint64_t)a3, a4, 1);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        if (updated)
        {
          uint64_t v53 = (__CFString *)v17;
          uint64_t v5 = 0;
          if (v20 > 5 || (DWORD1(v71) & 0x80000000) != 0) {
            goto LABEL_43;
          }
          if (v20 == 2)
          {
            CFStringRef v23 = @"2_ORDINAL_ANY:FORMATTED";
          }
          else
          {
            if (v20 != 3)
            {
              uint64_t v55 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_ORDINAL_ANY:FORMATTED", v20);
              NL::DatePeriod::setDisplayKey((const void **)a5, v55);
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
              goto LABEL_40;
            }
            CFStringRef v23 = @"3_ORDINAL_ANY:FORMATTED";
          }
          NL::DatePeriod::setDisplayKey((const void **)a5, v23);
LABEL_40:
          int v31 = 0;
          int v32 = 0;
          int v33 = 0;
          int v37 = 0;
          int v34 = 0;
          int v36 = 0;
          *((_DWORD *)a5 + 6) = 47;
          DWORD2(v71) = v20;
          int v35 = v20;
LABEL_41:
          LODWORD(v2nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0;
LABEL_42:
          long long v38 = v70;
          *(_OWORD *)((char *)a5 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v69;
          *(_OWORD *)((char *)a5 + 44) = v38;
          long long v39 = v72;
          *(_OWORD *)((char *)a5 + 6nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v71;
          *(_OWORD *)((char *)a5 + 76) = v39;
          *((void *)a5 + 21) = v75;
          int v40 = v76;
          *((void *)a5 + 26) = v73;
          *((_DWORD *)a5 + 54) = v74;
          *((_DWORD *)a5 + 39) = v36;
          *((_DWORD *)a5 + 4nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v34;
          *((_DWORD *)a5 + 41) = v31;
          *((_DWORD *)a5 + 44) = v40;
          *((_DWORD *)a5 + 45) = v32;
          *((_DWORD *)a5 + 46) = v33;
          *((_DWORD *)a5 + 47) = v37;
          *((_DWORD *)a5 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
          *((_DWORD *)a5 + 49) = v35;
          *((_DWORD *)a5 + 5nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0;
          *((_DWORD *)a5 + 51) = v20;
          *((_DWORD *)a5 + 31) = v68;
          long long v41 = v67;
          *(_OWORD *)((char *)a5 + 92) = v66;
          *(_OWORD *)((char *)a5 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v41;
          *((_DWORD *)a5 + 32) = v54;
          *(void *)((char *)a5 + 14std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v65;
          *(_OWORD *)((char *)a5 + 132) = v64;
          NL::DatePeriod::setCalendarWithIdentifier((const void **)a5, v53);
          uint64_t v5 = 1;
          goto LABEL_43;
        }
LABEL_36:
        uint64_t v5 = 0;
LABEL_43:
        CFRelease(v16);
        return v5;
      }
      if (!CFStringHasSuffix(a2, @"EveryNumFormattedDate"))
      {
        if ((v20 & 0x80000000) == 0)
        {
          CFCalendarDecomposeAbsoluteTime(v16, CurrentTime, "yMdEHms", (char *)&v63 + 4, &v63, &v62, &v61, &v59, &v58, &v57);
          *(void *)((char *)&v69 + 4) = v63;
          LODWORD(v69) = v62;
          uint64_t v53 = (__CFString *)v17;
          if (CFStringFind(a2, @"Second", 0).location == -1)
          {
            if (CFStringFind(a2, @"Minute", 0).location == -1)
            {
              if (CFStringFind(a2, @"Hour", 0).location == -1)
              {
                if (CFStringFind(a2, @"Day", 0).location == -1)
                {
                  if (CFStringFind(a2, @"Weekend", 0).location != -1)
                  {
                    *((_DWORD *)a5 + 6) = 48;
                    CFStringRef v48 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_WEEKENDS", v20);
                    NL::DatePeriod::setDisplayKey((const void **)a5, v48);
                    int v49 = 7;
                    if (v61 != 7)
                    {
                      CFCalendarAddComponents(v16, at, 0, "d", (7 - v61));
                      CFCalendarDecomposeAbsoluteTime(v16, at[0], "yEw", (char *)&v63 + 4, &v61, &v60);
                      int v49 = v61;
                    }
                    int v31 = 0;
                    int v32 = 0;
                    int v33 = 0;
                    int v37 = 0;
                    int v34 = 0;
                    int v35 = 0;
                    int v36 = 0;
                    *(void *)&long long v72 = __PAIR64__(HIDWORD(v63), v60);
                    DWORD1(v71) = v49;
                    *(void *)((char *)&v69 + 4) = 0;
                    LODWORD(v69) = 0;
                    int v54 = 1;
                    goto LABEL_42;
                  }
                  if (CFStringFind(a2, @"Week", 0).location != -1)
                  {
                    *((_DWORD *)a5 + 6) = 49;
                    CFStringRef v50 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_WEEKS", v20);
                    NL::DatePeriod::setDisplayKey((const void **)a5, v50);
                    int v31 = 0;
                    int v32 = 0;
                    int v33 = 0;
                    int v37 = 0;
                    int v34 = 0;
                    int v35 = 0;
                    int v36 = 0;
                    *(void *)((char *)&v69 + 4) = 0;
                    DWORD1(v71) = v61;
                    *(void *)&long long v72 = __PAIR64__(HIDWORD(v63), v60);
                    LODWORD(v69) = 0;
                    goto LABEL_42;
                  }
                  if (CFStringFind(a2, @"Month", 0).location == -1)
                  {
                    if (CFStringFind(a2, @"Year", 0).location == -1)
                    {
                      int v31 = 0;
                      int v32 = 0;
                      int v33 = 0;
                      int v37 = 0;
                      int v34 = 0;
                      int v35 = 0;
                      int v36 = 0;
                    }
                    else
                    {
                      *((_DWORD *)a5 + 6) = 51;
                      CFStringRef v52 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_YEARS", v20);
                      NL::DatePeriod::setDisplayKey((const void **)a5, v52);
                      int v32 = 0;
                      int v33 = 0;
                      int v37 = 0;
                      int v34 = 0;
                      int v35 = 0;
                      int v36 = 0;
                      int v31 = v20;
                    }
                  }
                  else
                  {
                    *((_DWORD *)a5 + 6) = 50;
                    CFStringRef v51 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_MONTHS", v20);
                    NL::DatePeriod::setDisplayKey((const void **)a5, v51);
                    int v31 = 0;
                    int v32 = 0;
                    int v33 = 0;
                    int v37 = 0;
                    int v35 = 0;
                    int v36 = 0;
                    int v34 = v20;
                  }
                }
                else
                {
                  *((_DWORD *)a5 + 6) = 46;
                  CFStringRef v47 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_DAYS", v20);
                  NL::DatePeriod::setDisplayKey((const void **)a5, v47);
                  int v31 = 0;
                  int v32 = 0;
                  int v33 = 0;
                  int v37 = 0;
                  int v34 = 0;
                  int v35 = 0;
                  int v36 = v20;
                }
              }
              else
              {
                *((_DWORD *)a5 + 6) = 45;
                CFStringRef v44 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_HOURS", v20);
                NL::DatePeriod::setDisplayKey((const void **)a5, v44);
                int v31 = 0;
                int v33 = 0;
                int v37 = 0;
                int v34 = 0;
                int v35 = 0;
                int v36 = 0;
                DWORD2(v7nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v59;
                int v32 = v20;
              }
            }
            else
            {
              *((_DWORD *)a5 + 6) = 44;
              CFStringRef v43 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_MINUTES", v20);
              NL::DatePeriod::setDisplayKey((const void **)a5, v43);
              int v31 = 0;
              int v32 = 0;
              int v37 = 0;
              int v34 = 0;
              int v35 = 0;
              int v36 = 0;
              *((void *)&v70 + 1) = __PAIR64__(v58, v59);
              int v33 = v20;
            }
          }
          else
          {
            *((_DWORD *)a5 + 6) = 43;
            CFStringRef v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_SECONDS", v20);
            NL::DatePeriod::setDisplayKey((const void **)a5, v30);
            int v31 = 0;
            int v32 = 0;
            int v33 = 0;
            int v34 = 0;
            int v35 = 0;
            int v36 = 0;
            *((void *)&v70 + 1) = __PAIR64__(v58, v59);
            LODWORD(v71) = v57;
            int v37 = v20;
          }
          goto LABEL_41;
        }
        goto LABEL_36;
      }
      if (!CFDictionaryContainsKey(a4, @"FormattedDate")
        && !CFDictionaryContainsKey(a4, @"FormattedAmbiguousDate"))
      {
        goto LABEL_36;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a4, @"FormattedDate");
      if (!Value) {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a4, @"FormattedAmbiguousDate");
      }
      long long v25 = (std::__shared_weak_count *)this[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v26 = updateDateComponentsWithValues((SInt32 *)&v69, (uint64_t)a3, Value, 0);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if ((v26 & 1) == 0) {
        goto LABEL_36;
      }
      uint64_t v53 = (__CFString *)v17;
      uint64_t v5 = 0;
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_43;
      }
      int v27 = DWORD1(v71);
      if ((DWORD1(v71) & 0x80000000) != 0) {
        goto LABEL_43;
      }
      uint64_t v55 = 0;
      if (v19)
      {
        CFStringRef v28 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_ORDINAL_ANY:FORMATTED", v20);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, v28);
        if (v20 == 2)
        {
          long long v29 = @"2_EVERY_ORDINAL_ANY:FORMATTED";
        }
        else
        {
          if (v20 != 3) {
            goto LABEL_52;
          }
          long long v29 = @"3_EVERY_ORDINAL_ANY:FORMATTED";
        }
      }
      else
      {
        long long v29 = @"FORMATTED";
      }
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, v29);
LABEL_52:
      NL::DatePeriod::setDisplayKey((const void **)a5, v55);
      if (v71)
      {
        int v45 = 0;
        int v31 = 0;
        int v33 = 0;
        int v34 = 0;
        int v36 = 0;
        int v46 = 43;
        int v37 = v20;
      }
      else if (HIDWORD(v70))
      {
        int v45 = 0;
        int v31 = 0;
        int v37 = 0;
        int v34 = 0;
        int v36 = 0;
        int v46 = 44;
        int v33 = v20;
      }
      else if (DWORD2(v70))
      {
        int v45 = 0;
        int v33 = 0;
        int v37 = 0;
        int v34 = 0;
        int v36 = 0;
        int v46 = 45;
        int v31 = v20;
      }
      else if (v69)
      {
        int v45 = 0;
        int v31 = 0;
        int v33 = 0;
        int v37 = 0;
        int v34 = 0;
        int v46 = 46;
        int v36 = v20;
      }
      else
      {
        if (v27)
        {
          int v45 = 0;
          int v31 = 0;
          int v33 = 0;
          int v37 = 0;
          int v34 = 0;
          int v36 = 0;
          int v46 = 47;
          goto LABEL_63;
        }
        if (!DWORD1(v69))
        {
          int v31 = 0;
          if (!DWORD2(v69))
          {
            int v32 = 0;
            int v33 = 0;
            int v37 = 0;
            int v34 = 0;
            int v36 = 0;
            LODWORD(v2nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0;
            goto LABEL_64;
          }
          int v46 = 51;
          int v45 = v20;
          int v33 = 0;
          int v37 = 0;
          int v34 = 0;
          int v36 = 0;
          LODWORD(v2nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0;
LABEL_63:
          int v32 = v31;
          *((_DWORD *)a5 + 6) = v46;
          int v31 = v45;
LABEL_64:
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
          int v35 = 0;
          goto LABEL_42;
        }
        int v45 = 0;
        int v31 = 0;
        int v33 = 0;
        int v37 = 0;
        int v36 = 0;
        int v46 = 50;
        int v34 = v20;
      }
      LODWORD(v2nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0;
      goto LABEL_63;
    }
    return 0;
  }
  return v5;
}

void sub_1A43865BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForOrdinalDate(NL::DateConverter *this, const __CFString *a2, const __CFLocale *a3, CFDictionaryRef theDict, NL::DatePeriod *a5)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    int v11 = *(unsigned __int8 *)(*(void *)this + 66);
    if (CFDictionaryContainsKey(theDict, @"FormattedDate")
      || CFDictionaryContainsKey(theDict, @"FormattedAmbiguousDate"))
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"FormattedDate");
      if (!Value) {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"FormattedAmbiguousDate");
      }
      uint64_t result = NL::DateConverter::updatePeriodForFormattedDate(this, a3, Value, a5);
      if (result)
      {
        int v13 = *((_DWORD *)a5 + 8);
        long long v50 = *(_OWORD *)((char *)a5 + 40);
        uint64_t v52 = *((void *)a5 + 7);
        int v31 = *((_DWORD *)a5 + 7);
        int v32 = *((_DWORD *)a5 + 16);
        int v33 = *((_DWORD *)a5 + 19);
        int v34 = *((_DWORD *)a5 + 9);
        uint64_t v36 = *((void *)a5 + 10);
        int v38 = *((_DWORD *)a5 + 22);
        long long v45 = *(_OWORD *)((char *)a5 + 92);
        long long v47 = *(_OWORD *)((char *)a5 + 108);
        long long v48 = *(_OWORD *)((char *)a5 + 124);
        long long v49 = *(_OWORD *)((char *)a5 + 140);
        uint64_t v29 = *(void *)((char *)a5 + 68);
        uint64_t v30 = *(void *)((char *)a5 + 156);
        int v14 = *((_DWORD *)a5 + 51);
        int v44 = *((_DWORD *)a5 + 50);
        int v15 = *((_DWORD *)a5 + 41);
        long long v41 = *(_OWORD *)((char *)a5 + 168);
        long long v43 = *(_OWORD *)((char *)a5 + 184);
        uint64_t v39 = *((void *)a5 + 26);
        int v40 = *((_DWORD *)a5 + 54);
        int HasPrefix = CFStringHasPrefix(a2, @"EveryTwo");
        int v17 = HasPrefix;
        if (HasPrefix) {
          int v18 = 2;
        }
        else {
          int v18 = 1;
        }
        if (v11)
        {
          CFStringRef v19 = @"VAL_1-N_EVERY_ORDINAL_ANY:FORMATTED";
          if (HasPrefix)
          {
            CFRelease(@"VAL_1-N_EVERY_ORDINAL_ANY:FORMATTED");
            CFStringRef v19 = @"2_EVERY_ORDINAL_ANY:FORMATTED";
          }
        }
        else
        {
          CFStringRef v19 = @"FORMATTED";
        }
        if (v34)
        {
          if (v17) {
            int v20 = 51;
          }
          else {
            int v20 = 52;
          }
        }
        else
        {
          if (!v13)
          {
            if (v33)
            {
              if (v17) {
                int v20 = 49;
              }
              else {
                int v20 = 52;
              }
              int v14 = v18;
            }
            else
            {
              if (v32) {
                int v14 = v18;
              }
              if (v17) {
                BOOL v28 = v32 == 0;
              }
              else {
                BOOL v28 = 1;
              }
              if (v28) {
                int v20 = 52;
              }
              else {
                int v20 = 47;
              }
            }
            goto LABEL_24;
          }
          if (v17) {
            int v20 = 50;
          }
          else {
            int v20 = 52;
          }
        }
        int v15 = v18;
LABEL_24:
        *((_DWORD *)a5 + 6) = v20;
        NL::DatePeriod::setDisplayKey((const void **)a5, v19);
        *(_OWORD *)((char *)a5 + 4nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v50;
        *((void *)a5 + 7) = v52;
        *((void *)a5 + 1nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v36;
        *((_DWORD *)a5 + 22) = v38;
        *((_DWORD *)a5 + 7) = v31;
        *((_DWORD *)a5 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v13;
        *((_DWORD *)a5 + 9) = v34;
        *((_DWORD *)a5 + 16) = v32;
        *(void *)((char *)a5 + 6std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v29;
        *((_DWORD *)a5 + 19) = v33;
        *(_OWORD *)((char *)a5 + 124) = v48;
        *(_OWORD *)((char *)a5 + 14nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v49;
        *(_OWORD *)((char *)a5 + 92) = v45;
        *(_OWORD *)((char *)a5 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v47;
        *((_DWORD *)a5 + 5nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v44;
        *(_OWORD *)((char *)a5 + 16std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v41;
        *(_OWORD *)((char *)a5 + 184) = v43;
        *((_DWORD *)a5 + 54) = v40;
        *((void *)a5 + 26) = v39;
        *(void *)((char *)a5 + 156) = v30;
        *((_DWORD *)a5 + 41) = v15;
        *((_DWORD *)a5 + 51) = v14;
        CFRelease(v19);
        return 1;
      }
    }
    else if (CFDictionaryContainsKey(theDict, @"FormattedTime") {
           || (uint64_t result = CFDictionaryContainsKey(theDict, @"FormattedAmbiguousTime"), result))
    }
    {
      CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"FormattedTime");
      if (!v21) {
        CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"FormattedAmbiguousTime");
      }
      uint64_t result = NL::DateConverter::updatePeriodForFormattedDate(this, a3, v21, a5);
      if (result)
      {
        long long v37 = *(_OWORD *)((char *)a5 + 28);
        int v22 = *((_DWORD *)a5 + 13);
        int v23 = *((_DWORD *)a5 + 14);
        int v24 = *((_DWORD *)a5 + 15);
        *(_OWORD *)int v46 = *((_OWORD *)a5 + 4);
        *(_OWORD *)&v46[12] = *(_OWORD *)((char *)a5 + 76);
        int v25 = *((_DWORD *)a5 + 23);
        long long v51 = *((_OWORD *)a5 + 6);
        uint64_t v53 = *((void *)a5 + 14);
        int v26 = *((_DWORD *)a5 + 30);
        int v27 = *((_DWORD *)a5 + 31);
        *(_OWORD *)char v42 = *((_OWORD *)a5 + 8);
        *(_OWORD *)&v42[12] = *(_OWORD *)((char *)a5 + 140);
        uint64_t v35 = *(void *)((char *)a5 + 44);
        if (v35 | v22)
        {
          *((_DWORD *)a5 + 6) = 45;
          int v25 = 1;
        }
        else if (v23)
        {
          *((_DWORD *)a5 + 6) = 44;
          int v26 = 60;
        }
        else if (v24)
        {
          *((_DWORD *)a5 + 6) = 43;
          int v27 = 60;
        }
        else
        {
          *((_DWORD *)a5 + 6) = 52;
        }
        NL::DatePeriod::setDisplayKey((const void **)a5, @"EVERY_FORMATTED_TIME");
        *((_OWORD *)a5 + 4) = *(_OWORD *)v46;
        *(_OWORD *)((char *)a5 + 76) = *(_OWORD *)&v46[12];
        *(_OWORD *)((char *)a5 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v37;
        *(void *)((char *)a5 + 44) = v35;
        *((_DWORD *)a5 + 13) = v22;
        *((_DWORD *)a5 + 14) = v23;
        *((_DWORD *)a5 + 15) = v24;
        *(_OWORD *)((char *)a5 + 92) = 0u;
        *(_OWORD *)((char *)a5 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
        *(_OWORD *)((char *)a5 + 124) = 0u;
        *(_OWORD *)((char *)a5 + 14nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0u;
        *((_OWORD *)a5 + 1nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v51;
        *((void *)a5 + 22) = v53;
        *(_OWORD *)((char *)a5 + 204) = *(_OWORD *)&v42[12];
        *((_OWORD *)a5 + 12) = *(_OWORD *)v42;
        *((_DWORD *)a5 + 39) = v25;
        uint64_t result = 1;
        *((_DWORD *)a5 + 46) = v26;
        *((_DWORD *)a5 + 47) = v27;
      }
    }
  }
  return result;
}

void sub_1A4386AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForValueDate(const __CFDate ***this, const __CFString *a2, const __CFLocale *a3, const __CFDictionary *a4, NL::DatePeriod *a5)
{
  uint64_t v5 = 0;
  if (!a2 || !a3 || !a4) {
    return v5;
  }
  int v11 = copyCurrentCalendar((uint64_t)a3);
  BOOL v116 = v11;
  if (!v11) {
    return 0;
  }
  long long v12 = v11;
  uint64_t v13 = MEMORY[0x1A625A0E0]();
  getCurrentDateComponents(v12, **this, v115);
  CFAbsoluteTime at = 0.0;
  CFAbsoluteTime at = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v115, v12, **this);
  long long v14 = *(_OWORD *)((char *)a5 + 44);
  long long v110 = *(_OWORD *)((char *)a5 + 28);
  long long v111 = v14;
  long long v15 = *(_OWORD *)((char *)a5 + 76);
  long long v112 = *(_OWORD *)((char *)a5 + 60);
  long long v113 = v15;
  long long v16 = *(_OWORD *)((char *)a5 + 172);
  long long v106 = *(_OWORD *)((char *)a5 + 156);
  long long v107 = v16;
  long long v17 = *(_OWORD *)((char *)a5 + 204);
  long long v108 = *(_OWORD *)((char *)a5 + 188);
  long long v109 = v17;
  int v18 = *((_DWORD *)a5 + 25);
  uint64_t v94 = *(void *)((char *)a5 + 92);
  uint64_t v19 = *((void *)a5 + 13);
  int v20 = *((_DWORD *)a5 + 29);
  int v105 = *((_DWORD *)a5 + 28);
  int v21 = *((_DWORD *)a5 + 31);
  int v92 = *((_DWORD *)a5 + 30);
  int v93 = v20;
  int v22 = *((_DWORD *)a5 + 32);
  uint64_t v103 = *(void *)((char *)a5 + 132);
  uint64_t v104 = v19;
  int v91 = *((_DWORD *)a5 + 35);
  int v89 = v22;
  int v90 = *((_DWORD *)a5 + 36);
  uint64_t v102 = *(void *)((char *)a5 + 148);
  int v100 = -1;
  memset(v101, 255, sizeof(v101));
  int v98 = -1;
  int v99 = -1;
  int v97 = -1;
  CFCalendarDecomposeAbsoluteTime(v12, at, "yMdEwHm", &v101[8], &v101[4], v101, &v100, &v99, &v98, &v97);
  int v87 = v21;
  CFIndex v88 = (__CFString *)v13;
  uint64_t v23 = intValueForNumberInValues(a3, a4);
  int v24 = *((unsigned __int8 *)*this + 66);
  if (CFStringHasPrefix(a2, @"ThisFormattedDate"))
  {
    CFStringRef v96 = @"FORMATTED";
    NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
    *((_DWORD *)a5 + 6) = 38;
    if (CFDictionaryContainsKey(a4, @"FormattedDate")
      || CFDictionaryContainsKey(a4, @"FormattedAmbiguousDate"))
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a4, @"FormattedDate");
      if (!Value) {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a4, @"FormattedAmbiguousDate");
      }
      int v26 = (std::__shared_weak_count *)this[1];
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char updated = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, Value, 0);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (updated)
      {
        resolveDateComponentsToDateWithOffset(v12, a3, **this, (NL::DateComponents *)&v110, v24 != 0, 0, 0);
        CFRelease(@"FORMATTED");
LABEL_41:
        uint64_t v5 = 1;
LABEL_42:
        long long v34 = v111;
        *(_OWORD *)((char *)a5 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v110;
        *(_OWORD *)((char *)a5 + 44) = v34;
        long long v35 = v113;
        *(_OWORD *)((char *)a5 + 6nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v112;
        *(_OWORD *)((char *)a5 + 76) = v35;
        *(void *)((char *)a5 + 92) = v94;
        *((_DWORD *)a5 + 25) = v18;
        *((void *)a5 + 13) = v104;
        *((_DWORD *)a5 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v105;
        *((_DWORD *)a5 + 29) = v93;
        *((_DWORD *)a5 + 3nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v92;
        *((_DWORD *)a5 + 31) = v87;
        *((_DWORD *)a5 + 32) = v89;
        *(void *)((char *)a5 + 132) = v103;
        *((_DWORD *)a5 + 35) = v91;
        *((_DWORD *)a5 + 36) = v90;
        *(void *)((char *)a5 + 14std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v102;
        long long v36 = v109;
        *(_OWORD *)((char *)a5 + 18std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v108;
        *(_OWORD *)((char *)a5 + 204) = v36;
        long long v37 = v107;
        *(_OWORD *)((char *)a5 + 156) = v106;
        *(_OWORD *)((char *)a5 + 172) = v37;
        NL::DatePeriod::setCalendarWithIdentifier((const void **)a5, v88);
        goto LABEL_102;
      }
    }
LABEL_28:
    CFRelease(@"FORMATTED");
LABEL_101:
    uint64_t v5 = 0;
    goto LABEL_102;
  }
  if (CFStringHasPrefix(a2, @"LastFormattedDate"))
  {
    CFStringRef v96 = @"FORMATTED";
    NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
    *((_DWORD *)a5 + 6) = 38;
    if (CFDictionaryContainsKey(a4, @"FormattedDate")
      || CFDictionaryContainsKey(a4, @"FormattedAmbiguousDate"))
    {
      CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"FormattedDate");
      if (!v28) {
        CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"FormattedAmbiguousDate");
      }
      uint64_t v29 = (std::__shared_weak_count *)this[1];
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v30 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, v28, 0);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v30)
      {
        resolveDateComponentsToDateWithOffset(v12, a3, **this, (NL::DateComponents *)&v110, v24 != 0, -1, 0);
        CFRelease(@"FORMATTED");
        goto LABEL_41;
      }
    }
    goto LABEL_28;
  }
  if (CFStringHasPrefix(a2, @"NextFormattedDate"))
  {
    CFStringRef v96 = @"FORMATTED";
    NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
    *((_DWORD *)a5 + 6) = 38;
    if (CFDictionaryContainsKey(a4, @"FormattedDate")
      || CFDictionaryContainsKey(a4, @"FormattedAmbiguousDate"))
    {
      CFDictionaryRef v31 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"FormattedDate");
      if (!v31) {
        CFDictionaryRef v31 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"FormattedAmbiguousDate");
      }
      int v32 = (std::__shared_weak_count *)this[1];
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v33 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, v31, 0);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if (v33)
      {
        resolveDateComponentsToDateWithOffset(v12, a3, **this, (NL::DateComponents *)&v110, v24 != 0, 1, 0);
LABEL_40:
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v96, 0);
        goto LABEL_41;
      }
    }
LABEL_100:
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v96, 0);
    goto LABEL_101;
  }
  if (CFStringHasPrefix(a2, @"NextNum") && CFStringHasSuffix(a2, @"RangeDate"))
  {
    if ((v23 & 0x80000000) != 0) {
      goto LABEL_101;
    }
    if (CFStringFind(a2, @"Minute", 0).location != -1)
    {
      *((_DWORD *)a5 + 6) = 27;
      CFStringRef v38 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_NEXT_MINUTES", v23);
      NL::DatePeriod::setDisplayKey((const void **)a5, v38);
      *(void *)&long long v110 = *(void *)v101;
      DWORD2(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = *(_DWORD *)&v101[8];
      *((void *)&v111 + 1) = __PAIR64__(v97, v98);
      CFCalendarAddComponents(v12, &at, 0, "m", v23);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMdEwHm", &v101[8], &v101[4], v101, &v100, &v99, &v98, &v97);
      int v18 = *(_DWORD *)&v101[8];
      uint64_t v94 = *(void *)v101;
      uint64_t v5 = 1;
      int v92 = v97;
      int v93 = v98;
      goto LABEL_42;
    }
    if (CFStringFind(a2, @"Hour", 0).location != -1)
    {
      *((_DWORD *)a5 + 6) = 28;
      CFStringRef v42 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_NEXT_HOURS", v23);
      NL::DatePeriod::setDisplayKey((const void **)a5, v42);
      *(void *)&long long v110 = *(void *)v101;
      DWORD2(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = *(_DWORD *)&v101[8];
      DWORD2(v111) = v98;
      CFCalendarAddComponents(v12, &at, 0, "h", v23);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMdEwHm", &v101[8], &v101[4], v101, &v100, &v99, &v98, &v97);
      int v18 = *(_DWORD *)&v101[8];
      uint64_t v94 = *(void *)v101;
      uint64_t v5 = 1;
      int v93 = v98;
      goto LABEL_42;
    }
    if (CFStringFind(a2, @"Day", 0).location != -1)
    {
      *((_DWORD *)a5 + 6) = 29;
      CFStringRef v45 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_NEXT_DAYS", v23);
      NL::DatePeriod::setDisplayKey((const void **)a5, v45);
      LODWORD(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = *(_DWORD *)v101;
      *(void *)((char *)&v110 + 4) = *(void *)&v101[4];
      CFCalendarAddComponents(v12, &at, 0, "d", v23);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
      LODWORD(v94) = *(_DWORD *)v101;
      goto LABEL_74;
    }
    if (CFStringFind(a2, @"Week", 0).location == -1)
    {
      if (CFStringFind(a2, @"Month", 0).location == -1)
      {
        if (CFStringFind(a2, @"Year", 0).location == -1) {
          goto LABEL_41;
        }
        *((_DWORD *)a5 + 6) = 33;
        CFStringRef v52 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_NEXT_YEARS", v23);
        NL::DatePeriod::setDisplayKey((const void **)a5, v52);
        LODWORD(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = *(_DWORD *)v101;
        *(void *)((char *)&v110 + 4) = *(void *)&v101[4];
        CFCalendarAddComponents(v12, &at, 0, "y", v23);
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
LABEL_75:
        uint64_t v5 = 1;
        int v18 = *(_DWORD *)&v101[8];
        goto LABEL_42;
      }
      *((_DWORD *)a5 + 6) = 32;
      CFStringRef v49 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_NEXT_MONTHS", v23);
      NL::DatePeriod::setDisplayKey((const void **)a5, v49);
      LODWORD(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = *(_DWORD *)v101;
      *(void *)((char *)&v110 + 4) = *(void *)&v101[4];
      CFCalendarAddComponents(v12, &at, 0, "M", v23);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
LABEL_74:
      HIDWORD(v94) = *(_DWORD *)&v101[4];
      goto LABEL_75;
    }
    *((_DWORD *)a5 + 6) = 31;
    CFStringRef v47 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_NEXT_WEEKS", v23);
    NL::DatePeriod::setDisplayKey((const void **)a5, v47);
    LODWORD(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = *(_DWORD *)v101;
    *(void *)((char *)&v110 + 4) = *(void *)&v101[4];
    CFCalendarAddComponents(v12, &at, 0, "w", v23);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yw", &v101[8], &v99);
LABEL_88:
    uint64_t v5 = 1;
    int v90 = *(_DWORD *)&v101[8];
    int v91 = v99;
    goto LABEL_42;
  }
  if (CFStringHasPrefix(a2, @"NextNum") && CFStringHasSuffix(a2, @"Date"))
  {
    if ((v23 & 0x80000000) != 0) {
      goto LABEL_101;
    }
    if (CFStringFind(a2, @"Minute", 0).location != -1)
    {
      *((_DWORD *)a5 + 6) = 16;
      CFStringRef v39 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_MINUTES", v23);
      NL::DatePeriod::setDisplayKey((const void **)a5, v39);
      CFCalendarAddComponents(v12, &at, 0, "m", v23);
      unsigned int v95 = 0;
      LODWORD(v96) = 0;
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMdHm", &v101[8], &v101[4], v101, &v96, &v95);
LABEL_68:
      *(void *)&long long v110 = *(void *)v101;
      DWORD2(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = *(_DWORD *)&v101[8];
      *((void *)&v111 + 1) = __PAIR64__(v95, v96);
      goto LABEL_41;
    }
    if (CFStringFind(a2, @"Hour", 0).location != -1)
    {
      *((_DWORD *)a5 + 6) = 17;
      CFStringRef v43 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_HOURS", v23);
      NL::DatePeriod::setDisplayKey((const void **)a5, v43);
      CFCalendarAddComponents(v12, &at, 0, "h", v23);
      unsigned int v95 = 0;
      LODWORD(v96) = 0;
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMdHm", &v101[8], &v101[4], v101, &v96, &v95);
      goto LABEL_68;
    }
    if (CFStringFind(a2, @"Day", 0).location != -1)
    {
      CFStringRef v46 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_DAYS", v23);
      NL::DatePeriod::setDisplayKey((const void **)a5, v46);
      *((_DWORD *)a5 + 6) = 18;
      CFCalendarAddComponents(v12, &at, 0, "d", v23);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
LABEL_57:
      *(void *)&long long v110 = *(void *)v101;
LABEL_58:
      int v41 = *(_DWORD *)&v101[8];
LABEL_59:
      DWORD2(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v41;
      goto LABEL_41;
    }
    if (CFStringFind(a2, @"Weekend", 0).location != -1)
    {
      CFStringRef v48 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_WEEKENDS", v23);
      NL::DatePeriod::setDisplayKey((const void **)a5, v48);
      *((_DWORD *)a5 + 6) = 19;
      if (v100 <= 6) {
        CFCalendarAddComponents(v12, &at, 0, "d", (7 - v100));
      }
      CFCalendarAddComponents(v12, &at, 0, "w", v23);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yEw", &v101[8], &v100, &v99);
      *(void *)&long long v110 = 0;
      DWORD2(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0;
      DWORD1(v112) = v100;
      *(void *)&long long v113 = __PAIR64__(*(unsigned int *)&v101[8], v99);
      CFCalendarAddComponents(v12, &at, 0, "d", 1);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yEw", &v101[8], &v100, &v99);
      int v89 = v100;
      goto LABEL_88;
    }
    if (CFStringFind(a2, @"Week", 0).location != -1)
    {
      CFStringRef v50 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_WEEKS", v23);
      NL::DatePeriod::setDisplayKey((const void **)a5, v50);
      *((_DWORD *)a5 + 6) = 20;
      CFCalendarAddComponents(v12, &at, 0, "w", v23);
      CFCalendarDecomposeAbsoluteTime(v12, at, "wyMd", &v99, &v101[8], &v101[4], v101);
      *(void *)&long long v113 = __PAIR64__(*(unsigned int *)&v101[8], v99);
      goto LABEL_41;
    }
    if (CFStringFind(a2, @"Month", 0).location == -1)
    {
      if (CFStringFind(a2, @"Year", 0).location == -1) {
        goto LABEL_41;
      }
      CFStringRef v54 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_YEARS", v23);
      NL::DatePeriod::setDisplayKey((const void **)a5, v54);
      *((_DWORD *)a5 + 6) = 22;
      CFCalendarAddComponents(v12, &at, 0, "y", v23);
      CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
      goto LABEL_58;
    }
    CFStringRef v53 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_MONTHS", v23);
    NL::DatePeriod::setDisplayKey((const void **)a5, v53);
    *((_DWORD *)a5 + 6) = 21;
    CFCalendarAddComponents(v12, &at, 0, "M", v23);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
LABEL_109:
    *(void *)((char *)&v110 + 4) = *(void *)&v101[4];
    goto LABEL_41;
  }
  uint64_t v86 = -(int)v23;
  if (CFStringHasPrefix(a2, @"NumDaysRange"))
  {
    *((_DWORD *)a5 + 6) = 34;
    CFStringRef v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_LAST_DAYS", v23);
    NL::DatePeriod::setDisplayKey((const void **)a5, v40);
    if ((v23 & 0x80000000) != 0) {
      goto LABEL_101;
    }
    int v18 = *(_DWORD *)&v101[8];
    uint64_t v94 = *(void *)v101;
    CFCalendarAddComponents(v12, &at, 0, "d", v86);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
    goto LABEL_57;
  }
  if (CFStringHasPrefix(a2, @"NumDays"))
  {
    CFStringRef v96 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_DAYS_AGO", v23);
    NL::DatePeriod::setDisplayKey((const void **)a5, v96);
    *((_DWORD *)a5 + 6) = 23;
    if ((v23 & 0x80000000) != 0) {
      goto LABEL_100;
    }
    CFCalendarAddComponents(v12, &at, 0, "d", v86);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
    *(void *)&long long v110 = *(void *)v101;
LABEL_63:
    DWORD2(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = *(_DWORD *)&v101[8];
    goto LABEL_40;
  }
  if (CFStringHasPrefix(a2, @"NumWeeksRange"))
  {
    CFStringRef v96 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_LAST_WEEKS", v23);
    NL::DatePeriod::setDisplayKey((const void **)a5, v96);
    *((_DWORD *)a5 + 6) = 35;
    if ((v23 & 0x80000000) != 0) {
      goto LABEL_100;
    }
    int v18 = *(_DWORD *)&v101[8];
    uint64_t v94 = *(void *)v101;
    unsigned int v95 = 0;
    CFCalendarDecomposeAbsoluteTime(v12, at, "w", &v95);
    unsigned int v44 = v95 - v23 + 1;
LABEL_81:
    *(void *)&long long v113 = __PAIR64__(*(unsigned int *)&v101[8], v44);
    goto LABEL_40;
  }
  if (CFStringHasPrefix(a2, @"NumWeeks"))
  {
    CFStringRef v96 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_WEEKS_AGO", v23);
    NL::DatePeriod::setDisplayKey((const void **)a5, v96);
    *((_DWORD *)a5 + 6) = 24;
    if ((v23 & 0x80000000) != 0) {
      goto LABEL_100;
    }
    unsigned int v95 = 0;
    CFCalendarDecomposeAbsoluteTime(v12, at, "w", &v95);
    unsigned int v44 = v95 - v23;
    goto LABEL_81;
  }
  if (CFStringHasPrefix(a2, @"NumMonthsRange"))
  {
    CFStringRef v96 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_LAST_MONTHS", v23);
    NL::DatePeriod::setDisplayKey((const void **)a5, v96);
    *((_DWORD *)a5 + 6) = 36;
    if ((v23 & 0x80000000) != 0) {
      goto LABEL_100;
    }
    uint64_t v94 = *(void *)v101;
    int v18 = *(_DWORD *)&v101[8];
    CFCalendarAddComponents(v12, &at, 0, "dM", (1 - *(_DWORD *)v101), v86);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
LABEL_99:
    *(void *)((char *)&v110 + 4) = *(void *)&v101[4];
    goto LABEL_40;
  }
  if (CFStringHasPrefix(a2, @"NumMonths"))
  {
    CFStringRef v96 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_MONTHS_AGO", v23);
    NL::DatePeriod::setDisplayKey((const void **)a5, v96);
    *((_DWORD *)a5 + 6) = 25;
    if ((v23 & 0x80000000) != 0) {
      goto LABEL_100;
    }
    CFCalendarAddComponents(v12, &at, 0, "dM", (1 - *(_DWORD *)v101), v86);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
    goto LABEL_99;
  }
  if (!CFStringHasPrefix(a2, @"NumYearsRange"))
  {
    if (CFStringHasPrefix(a2, @"NumYears"))
    {
      uint64_t v5 = 0;
      if (*(int *)&v101[8] >= (int)v23
        && (v23 & 0x80000000) == 0
        && *(_DWORD *)&v101[8] - (int)v23 >= *(_DWORD *)&v101[8] - 1970)
      {
        CFStringRef v96 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_YEARS_AGO", v23);
        NL::DatePeriod::setDisplayKey((const void **)a5, v96);
        *((_DWORD *)a5 + 6) = 26;
        CFCalendarAddComponents(v12, &at, 0, "dM", (1 - *(_DWORD *)v101), (1 - *(_DWORD *)&v101[4]));
        CFCalendarAddComponents(v12, &at, 0, "y", v86);
        if (SDWORD1(v110) >= 2) {
          CFCalendarAddComponents(v12, &at, 0, "M", (DWORD1(v110) - 1));
        }
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
        goto LABEL_63;
      }
      goto LABEL_102;
    }
    if (CFStringHasPrefix(a2, @"IsoDay"))
    {
      NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
      *((_DWORD *)a5 + 6) = 38;
      uint64_t v55 = (std::__shared_weak_count *)this[1];
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v56 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, a4, 0);
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      if (v56)
      {
        MaximumCFRange RangeOfUnit = CFCalendarGetMaximumRangeOfUnit(v12, 0x200uLL);
        CFIndex length = MaximumRangeOfUnit.length;
        if (v24)
        {
          if (SDWORD1(v112) <= v100)
          {
            if (DWORD1(v112) != v100)
            {
              if (SDWORD1(v112) >= v100) {
                CFIndex length = 0;
              }
              else {
                CFIndex length = MaximumRangeOfUnit.length - v100 + SDWORD1(v112);
              }
            }
          }
          else
          {
            CFIndex length = DWORD1(v112) - v100;
          }
          CFCalendarAddComponents(v12, &at, 0, "d", length);
        }
        else
        {
          CFCalendarAddComponents(v12, &at, 0, "d", (1 - v100));
          CFCalendarAddComponents(v12, &at, 0, "d", (DWORD1(v112) - 1));
          if (SDWORD1(v112) > v100) {
            CFCalendarAddComponents(v12, &at, 0, "d", -MaximumRangeOfUnit.length);
          }
        }
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
        goto LABEL_57;
      }
      goto LABEL_213;
    }
    if (CFStringHasPrefix(a2, @"LastIsoDay"))
    {
      NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
      *((_DWORD *)a5 + 6) = 38;
      int v59 = (std::__shared_weak_count *)this[1];
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v60 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, a4, 0);
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
      if (v60)
      {
        CFRange v61 = CFCalendarGetMaximumRangeOfUnit(v12, 0x200uLL);
        CFCalendarAddComponents(v12, &at, 0, "d", SDWORD1(v112) - (v61.length + v100));
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
        goto LABEL_57;
      }
      goto LABEL_213;
    }
    if (CFStringHasPrefix(a2, @"NextIsoDay"))
    {
      NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
      *((_DWORD *)a5 + 6) = 38;
      int v62 = (std::__shared_weak_count *)this[1];
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v63 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, a4, 0);
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      if (v63)
      {
        CFRange v64 = CFCalendarGetMaximumRangeOfUnit(v12, 0x200uLL);
        CFIndex v65 = v100 % v64.length;
        CFIndex v66 = (v64.length - v65) % v64.length;
        if (v65 <= SDWORD1(v112)) {
          CFIndex v67 = 0;
        }
        else {
          CFIndex v67 = v64.length;
        }
        CFCalendarAddComponents(v12, &at, 0, "d", v66 + SDWORD1(v112) + v67);
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
        goto LABEL_57;
      }
      goto LABEL_213;
    }
    if (CFStringHasPrefix(a2, @"BeforeLastIsoDay"))
    {
      NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
      *((_DWORD *)a5 + 6) = 38;
      int v68 = (std::__shared_weak_count *)this[1];
      if (v68) {
        atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v69 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, a4, 0);
      if (v68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v68);
      }
      if (v69)
      {
        CFRange v70 = CFCalendarGetMaximumRangeOfUnit(v12, 0x200uLL);
        CFCalendarAddComponents(v12, &at, 0, "d", SDWORD1(v112) - (v100 + 2 * v70.length));
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
        goto LABEL_57;
      }
      goto LABEL_213;
    }
    if (CFStringHasPrefix(a2, @"NextIsoMonth"))
    {
      NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
      *((_DWORD *)a5 + 6) = 38;
      long long v71 = (std::__shared_weak_count *)this[1];
      if (v71) {
        atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v72 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, a4, 0);
      if (v71) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v71);
      }
      if (v72)
      {
        int v41 = *(_DWORD *)&v101[8] + 1;
        goto LABEL_59;
      }
      goto LABEL_213;
    }
    if (!CFStringHasPrefix(a2, @"IsoMonth"))
    {
      if (CFStringHasPrefix(a2, @"LastIsoMonth"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
        *((_DWORD *)a5 + 6) = 38;
        CFCalendarDecomposeAbsoluteTime(v12, at, "yMdE", &v101[8], &v101[4], v101, &v100);
        int v76 = (std::__shared_weak_count *)this[1];
        if (v76) {
          atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v77 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, a4, 0);
        if (v76) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v76);
        }
        if (v77)
        {
          CFCalendarAddComponents(v12, &at, 0, "dMy", (1 - *(_DWORD *)v101), (1 - *(_DWORD *)&v101[4]), 0xFFFFFFFFLL);
          CFCalendarAddComponents(v12, &at, 0, "M", (DWORD1(v110) - 1));
          CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
          goto LABEL_109;
        }
      }
      else if (CFStringHasPrefix(a2, @"BeforeLastIsoMonth"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
        *((_DWORD *)a5 + 6) = 38;
        int v78 = (std::__shared_weak_count *)this[1];
        if (v78) {
          atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v79 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, a4, 0);
        if (v78) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v78);
        }
        if (v79)
        {
          CFCalendarAddComponents(v12, &at, 0, "dMy", (1 - *(_DWORD *)v101), (1 - *(_DWORD *)&v101[4]), 4294967294);
          CFCalendarAddComponents(v12, &at, 0, "M", (DWORD1(v110) - 1));
          CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
          goto LABEL_109;
        }
      }
      else if (CFStringHasPrefix(a2, @"CompoundDay"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
        *((_DWORD *)a5 + 6) = 38;
        int v80 = (std::__shared_weak_count *)this[1];
        if (v80) {
          atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v81 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, a4, 0);
        if (v80) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        }
        if (v81)
        {
          CFRange v82 = CFCalendarGetMaximumRangeOfUnit(v12, 0x200uLL);
          CFCalendarAddComponents(v12, &at, 0, "d", SDWORD1(v112) - (v100 + v82.length * (SDWORD2(v113) - 1)));
          CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
          *(void *)&long long v110 = *(void *)v101;
          DWORD2(v11nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = *(_DWORD *)&v101[8];
          DWORD1(v112) = -1;
          goto LABEL_41;
        }
      }
      else
      {
        if (!CFStringHasPrefix(a2, @"CompoundMonth")) {
          goto LABEL_41;
        }
        NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
        *((_DWORD *)a5 + 6) = 38;
        int v83 = (std::__shared_weak_count *)this[1];
        if (v83) {
          atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v84 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, a4, 0);
        if (v83) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v83);
        }
        if (v84)
        {
          CFRange v85 = CFCalendarGetMaximumRangeOfUnit(v12, 8uLL);
          CFCalendarAddComponents(v12, &at, 0, "dM", (1 - *(_DWORD *)v101), SDWORD1(v110) - (*(int *)&v101[4] + v85.length * (SHIDWORD(v113) - 1)));
          CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
          goto LABEL_109;
        }
      }
LABEL_213:
      uint64_t v5 = 0;
      goto LABEL_42;
    }
    NL::DatePeriod::setDisplayKey((const void **)a5, @"FORMATTED");
    *((_DWORD *)a5 + 6) = 38;
    uint64_t v73 = (std::__shared_weak_count *)this[1];
    if (v73) {
      atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v74 = updateDateComponentsWithValues((SInt32 *)&v110, (uint64_t)a3, a4, 0);
    if (v73) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v73);
    }
    if ((v74 & 1) == 0) {
      goto LABEL_213;
    }
    CFCalendarAddComponents(v12, &at, 0, "dM", (1 - *(_DWORD *)v101), (1 - *(_DWORD *)&v101[4]));
    CFCalendarAddComponents(v12, &at, 0, "M", (DWORD1(v110) - 1));
    if (*((unsigned char *)*this + 66))
    {
      if (SDWORD1(v110) < *(int *)&v101[4])
      {
        uint64_t v75 = 1;
LABEL_197:
        CFCalendarAddComponents(v12, &at, 0, "y", v75);
      }
    }
    else if (SDWORD1(v110) > *(int *)&v101[4])
    {
      uint64_t v75 = 0xFFFFFFFFLL;
      goto LABEL_197;
    }
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
    goto LABEL_109;
  }
  uint64_t v5 = 0;
  if (*(int *)&v101[8] >= (int)v23
    && (v23 & 0x80000000) == 0
    && *(_DWORD *)&v101[8] - (int)v23 >= *(_DWORD *)&v101[8] - 1970)
  {
    CFStringRef v96 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_LAST_YEARS", v23);
    NL::DatePeriod::setDisplayKey((const void **)a5, v96);
    *((_DWORD *)a5 + 6) = 37;
    int v18 = *(_DWORD *)&v101[8];
    uint64_t v94 = *(void *)v101;
    CFCalendarAddComponents(v12, &at, 0, "dMy", (1 - *(_DWORD *)v101), (1 - *(_DWORD *)&v101[4]), v86);
    CFCalendarDecomposeAbsoluteTime(v12, at, "yMd", &v101[8], &v101[4], v101);
    goto LABEL_63;
  }
LABEL_102:
  if (v116) {
    CFRelease(v116);
  }
  return v5;
}

void sub_1A4388998(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)(v1 - 104), 0);
  _Unwind_Resume(a1);
}

uint64_t NL::DateConverter::updatePeriodForAppContext(uint64_t a1, int a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a3 + 44);
  long long v26 = *(_OWORD *)(a3 + 28);
  long long v27 = v6;
  long long v7 = *(_OWORD *)(a3 + 76);
  long long v28 = *(_OWORD *)(a3 + 60);
  long long v29 = v7;
  long long v8 = *(_OWORD *)(a3 + 108);
  long long v22 = *(_OWORD *)(a3 + 92);
  long long v23 = v8;
  long long v9 = *(_OWORD *)(a3 + 140);
  long long v24 = *(_OWORD *)(a3 + 124);
  long long v25 = v9;
  getCurrentDateComponents(*(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224), v21);
  if ((a2 & 0xFFFFFFFB) != 0)
  {
    if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v26)) {
      resolveDateComponentsToCurrentDate(*(__CFCalendar **)(a3 + 8), *(const __CFLocale **)(a3 + 16), *(const __CFDate **)(a3 + 224), (NL::DateComponents *)&v26, *(unsigned __int8 *)(*(void *)a1 + 66));
    }
    if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v22)) {
      resolveDateComponentsToCurrentDate(*(__CFCalendar **)(a3 + 8), *(const __CFLocale **)(a3 + 16), *(const __CFDate **)(a3 + 224), (NL::DateComponents *)&v22, *(unsigned __int8 *)(*(void *)a1 + 66));
    }
  }
  int v10 = *(unsigned __int8 *)(*(void *)a1 + 66);
  double AbsoluteTime = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v26, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224));
  double v12 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v21, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224));
  int v13 = *(_DWORD *)(a3 + 24);
  if (v10)
  {
    if (AbsoluteTime < v12 && v13 == 40 && !CFStringsAreEqual(*(const __CFString **)a3, @"HOLIDAY"))
    {
      while (1)
      {
        double v14 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v26, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224));
        if (v14 >= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v21, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224)))break; {
        if ((updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(void *)a1 + 24), *(const __CFString **)a3, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224), *(const __CFLocale **)(a3 + 16), (double *)(DWORD2(v26) + 1), (NL::DateComponents *)&v26, (NL::DateComponents *)&v22) & 1) == 0)return 0;
        }
      }
    }
  }
  else if (AbsoluteTime > v12 && v13 == 40 && !CFStringsAreEqual(*(const __CFString **)a3, @"HOLIDAY"))
  {
    while (1)
    {
      double v15 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v26, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224));
      if (v15 <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v21, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224)))break; {
      if ((updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(void *)a1 + 24), *(const __CFString **)a3, *(__CFCalendar **)(a3 + 8), *(const __CFDate **)(a3 + 224), *(const __CFLocale **)(a3 + 16), (double *)(DWORD2(v26) - 1), (NL::DateComponents *)&v26, (NL::DateComponents *)&v22) & 1) == 0)return 0;
      }
    }
  }
  long long v16 = v27;
  *(_OWORD *)(a3 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v26;
  *(_OWORD *)(a3 + 44) = v16;
  long long v17 = v29;
  *(_OWORD *)(a3 + 6nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v28;
  *(_OWORD *)(a3 + 76) = v17;
  long long v18 = v23;
  *(_OWORD *)(a3 + 92) = v22;
  *(_OWORD *)(a3 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v18;
  long long v19 = v25;
  uint64_t result = 1;
  *(_OWORD *)(a3 + 124) = v24;
  *(_OWORD *)(a3 + 14nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v19;
  return result;
}

void NL::DateConverter::datePeriodForRelativeDate(CFStringRef theString@<X1>, void *a2@<X8>)
{
  if (theString && CFStringGetLength(theString)) {
    operator new();
  }
  *a2 = 0;
}

void sub_1A4388EAC(_Unwind_Exception *a1)
{
  MEMORY[0x1A625B130](v1, 0x1060C407A40A00CLL);
  _Unwind_Resume(a1);
}

BOOL NL::DateConverter::updatePeriodForRelativeDate(uint64_t **this, const __CFString *a2, const __CFLocale *a3, NL::DatePeriod *a4)
{
  BOOL v4 = 0;
  if (!a2) {
    return v4;
  }
  if (!a3) {
    return v4;
  }
  long long v8 = *(_OWORD *)((char *)a4 + 44);
  long long v84 = *(_OWORD *)((char *)a4 + 28);
  long long v85 = v8;
  long long v9 = *(_OWORD *)((char *)a4 + 76);
  long long v86 = *(_OWORD *)((char *)a4 + 60);
  long long v87 = v9;
  long long v10 = *(_OWORD *)((char *)a4 + 108);
  long long v80 = *(_OWORD *)((char *)a4 + 92);
  long long v81 = v10;
  long long v11 = *(_OWORD *)((char *)a4 + 140);
  long long v82 = *(_OWORD *)((char *)a4 + 124);
  long long v83 = v11;
  int v13 = (char *)a4 + 192;
  uint64_t v12 = *((void *)a4 + 24);
  int v59 = *((_DWORD *)a4 + 40);
  int v60 = *((_DWORD *)a4 + 39);
  int v14 = *((_DWORD *)a4 + 41);
  double v15 = (char *)a4 + 168;
  uint64_t v78 = *((void *)a4 + 21);
  int v16 = *((_DWORD *)a4 + 45);
  int v79 = *((_DWORD *)a4 + 44);
  int v63 = v16;
  int v64 = *((_DWORD *)a4 + 46);
  int v65 = *((_DWORD *)a4 + 47);
  uint64_t v76 = v12;
  int v61 = v14;
  int v62 = *((_DWORD *)a4 + 51);
  int v77 = *((_DWORD *)a4 + 50);
  long long v18 = (char *)a4 + 208;
  uint64_t v17 = *((void *)a4 + 26);
  int v75 = *((_DWORD *)a4 + 54);
  uint64_t v74 = v17;
  int v72 = -1;
  memset(v73, 255, sizeof(v73));
  int v70 = -1;
  int v71 = -1;
  int v68 = -1;
  int v69 = -1;
  long long v19 = copyCurrentCalendar((uint64_t)a3);
  CFTypeRef cf = v19;
  BOOL v4 = v19 != 0;
  if (!v19) {
    return v4;
  }
  int v20 = v19;
  int v58 = (__CFString *)MEMORY[0x1A625A0E0]();
  CFAbsoluteTime at = 0.0;
  CFAbsoluteTime at = getCurrentTime(**this);
  int v21 = *((unsigned __int8 *)*this + 66);
  CFCalendarDecomposeAbsoluteTime(v20, at, "yMdEwHms", &v73[8], &v73[4], v73, &v72, &v71, &v70, &v69, &v68);
  if (CFStringHasPrefix(a2, @"RelativeNow"))
  {
    *((_DWORD *)a4 + 6) = 39;
    NL::DatePeriod::setDisplayKey((const void **)a4, @"FORMATTED");
    *(void *)&long long v84 = *(void *)v73;
    DWORD2(v84) = *(_DWORD *)&v73[8];
    DWORD2(v85) = v70;
    int v23 = v68;
    int v22 = v69;
LABEL_6:
    HIDWORD(v85) = v22;
    LODWORD(v86) = v23;
    goto LABEL_7;
  }
  if (!CFStringHasPrefix(a2, @"RelativeEvery"))
  {
    if (CFStringHasPrefix(a2, @"RelativeNext"))
    {
      if (CFStringHasPrefix(a2, @"RelativeNextTwo"))
      {
        uint64_t v31 = 2;
      }
      else
      {
        if (!CFStringHasPrefix(a2, @"RelativeNextThree"))
        {
          uint64_t v57 = 1;
          int v34 = 11;
          int v35 = 13;
          int v55 = 14;
          int v56 = 12;
          int v36 = 15;
          goto LABEL_31;
        }
        uint64_t v31 = 3;
      }
      uint64_t v57 = v31;
      int v34 = 18;
      int v35 = 19;
      int v55 = 21;
      int v56 = 20;
      int v36 = 22;
LABEL_31:
      int v54 = v36;
      if (CFStringFind(a2, @"Minute", 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = 16;
        CFStringRef v37 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_MINUTES", v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v37);
        CFCalendarAddComponents(v20, &at, 0, "m", v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMdHms", &v73[8], &v73[4], v73, &v70, &v69, &v68);
        *(void *)&long long v84 = *(void *)v73;
        DWORD2(v84) = *(_DWORD *)&v73[8];
        *((void *)&v85 + 1) = __PAIR64__(v69, v70);
        goto LABEL_7;
      }
      if (CFStringFind(a2, @"Hour", 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = 17;
        CFStringRef v38 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_HOURS", v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v38);
        CFCalendarAddComponents(v20, &at, 0, "h", v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMdHms", &v73[8], &v73[4], v73, &v70, &v69, &v68);
        *(void *)&long long v84 = *(void *)v73;
        DWORD2(v84) = *(_DWORD *)&v73[8];
        DWORD2(v85) = v70;
        goto LABEL_7;
      }
      if (CFStringFind(a2, @"Day", 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = v34;
        CFStringRef v41 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_DAYS", v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v41);
        CFCalendarAddComponents(v20, &at, 0, "d", v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
LABEL_98:
        *(void *)&long long v84 = *(void *)v73;
        goto LABEL_99;
      }
      if (CFStringFind(a2, @"Weekend", 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = v35;
        CFStringRef v44 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_WEEKENDS", v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v44);
        if (v72 <= 6) {
          CFCalendarAddComponents(v20, &at, 0, "d", (7 - v72));
        }
        CFCalendarAddComponents(v20, &at, 0, "w", v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yEw", &v73[8], &v72, &v71);
        DWORD1(v86) = v72;
        *(void *)&long long v87 = __PAIR64__(*(unsigned int *)&v73[8], v71);
        CFCalendarAddComponents(v20, &at, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yEw", &v73[8], &v72, &v71);
        goto LABEL_70;
      }
      if (CFStringFind(a2, @"Week", 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = v56;
        CFStringRef v45 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_WEEKS", v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v45);
        CFCalendarAddComponents(v20, &at, 0, "w", v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yw", &v73[8], &v71);
        goto LABEL_82;
      }
      if (CFStringFind(a2, @"Month", 0).location != -1)
      {
        *((_DWORD *)a4 + 6) = v55;
        CFStringRef v47 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_MONTHS", v57);
        NL::DatePeriod::setDisplayKey((const void **)a4, v47);
        CFCalendarAddComponents(v20, &at, 0, "dM", (1 - *(_DWORD *)v73), v57);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_106;
      }
      if (CFStringFind(a2, @"Year", 0).location == -1) {
        goto LABEL_7;
      }
      *((_DWORD *)a4 + 6) = v54;
      CFStringRef v50 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_YEARS", v57);
      NL::DatePeriod::setDisplayKey((const void **)a4, v50);
      CFCalendarAddComponents(v20, &at, 0, "dMy", (1 - *(_DWORD *)v73), (1 - *(_DWORD *)&v73[4]), v57);
      CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
LABEL_99:
      DWORD2(v84) = *(_DWORD *)&v73[8];
      goto LABEL_7;
    }
    if (CFStringHasPrefix(a2, @"RelativeLast"))
    {
      if (CFStringFind(a2, @"Weekend", 0).location != -1)
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"LAST_WEEKEND");
        *((_DWORD *)a4 + 6) = 7;
        CFCalendarAddComponents(v20, &at, 0, "E", -v72);
        if (v72 <= 2) {
          CFCalendarAddComponents(v20, &at, 0, "d", 7);
        }
LABEL_27:
        CFCalendarDecomposeAbsoluteTime(v20, at, "yEw", &v73[8], &v72, &v71);
        DWORD1(v86) = v72;
        *(void *)&long long v87 = __PAIR64__(*(unsigned int *)&v73[8], v71);
        CFCalendarAddComponents(v20, &at, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yEw", &v73[8], &v72, &v71);
LABEL_70:
        DWORD1(v82) = v72;
        *(void *)&long long v83 = __PAIR64__(*(unsigned int *)&v73[8], v71);
        goto LABEL_7;
      }
      if (CFStringFind(a2, @"Week", 0).location != -1)
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"LAST_WEEK");
        *((_DWORD *)a4 + 6) = 8;
        int v40 = v71 - 1;
LABEL_83:
        *(void *)&long long v87 = __PAIR64__(*(unsigned int *)&v73[8], v40);
        goto LABEL_7;
      }
      if (CFStringFind(a2, @"Month", 0).location == -1)
      {
        if (CFStringFind(a2, @"Year", 0).location == -1) {
          goto LABEL_7;
        }
        NL::DatePeriod::setDisplayKey((const void **)a4, @"LAST_YEAR");
        *((_DWORD *)a4 + 6) = 10;
        CFCalendarAddComponents(v20, &at, 0, "dMy", (1 - *(_DWORD *)v73), (1 - *(_DWORD *)&v73[4]), 0xFFFFFFFFLL);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_99;
      }
      NL::DatePeriod::setDisplayKey((const void **)a4, @"LAST_MONTH");
      *((_DWORD *)a4 + 6) = 9;
      CFCalendarAddComponents(v20, &at, 0, "dM", (1 - *(_DWORD *)v73), 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
      goto LABEL_106;
    }
    if (CFStringHasPrefix(a2, @"RelativeThis"))
    {
      if (CFStringFind(a2, @"Weekend", 0).location != -1)
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"THIS_WEEKEND");
        *((_DWORD *)a4 + 6) = 2;
        if (v72 <= 6) {
          CFCalendarAddComponents(v20, &at, 0, "d", (7 - v72));
        }
        goto LABEL_27;
      }
      if (CFStringFind(a2, @"Week", 0).location != -1)
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"THIS_WEEK");
        *((_DWORD *)a4 + 6) = 3;
LABEL_82:
        int v40 = v71;
        goto LABEL_83;
      }
      if (CFStringFind(a2, @"Month", 0).location == -1)
      {
        if (CFStringFind(a2, @"Year", 0).location == -1) {
          goto LABEL_7;
        }
        NL::DatePeriod::setDisplayKey((const void **)a4, @"THIS_YEAR");
        *((_DWORD *)a4 + 6) = 5;
        CFCalendarAddComponents(v20, &at, 0, "dM", (1 - *(_DWORD *)v73), (1 - *(_DWORD *)&v73[4]));
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_99;
      }
      NL::DatePeriod::setDisplayKey((const void **)a4, @"THIS_MONTH");
      *((_DWORD *)a4 + 6) = 4;
      CFCalendarAddComponents(v20, &at, 0, "d", (1 - *(_DWORD *)v73));
      CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
LABEL_106:
      *(void *)((char *)&v84 + 4) = *(void *)&v73[4];
      goto LABEL_7;
    }
    if (!CFStringHasPrefix(a2, @"RelativeEnd"))
    {
      if (CFStringHasSuffix(a2, @"TodayDate"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"TODAY");
        *((_DWORD *)a4 + 6) = 1;
        *(void *)&long long v84 = *(void *)v73;
        DWORD2(v84) = *(_DWORD *)&v73[8];
        if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v80))
        {
          *(void *)&long long v80 = *(void *)v73;
          DWORD2(v8nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = *(_DWORD *)&v73[8];
        }
        goto LABEL_7;
      }
      if (CFStringHasSuffix(a2, @"YesterdayDate"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"YESTERDAY");
        *((_DWORD *)a4 + 6) = 6;
        CFCalendarAddComponents(v20, &at, 0, "d", 0xFFFFFFFFLL);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_98;
      }
      if (CFStringHasSuffix(a2, @"TomorrowDate"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"TOMORROW");
        *((_DWORD *)a4 + 6) = 11;
        CFCalendarAddComponents(v20, &at, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_98;
      }
      if (CFStringHasSuffix(a2, @"TwoDaysDate"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"VAL_2-N_DAYS_AGO");
        *((_DWORD *)a4 + 6) = 23;
        CFCalendarAddComponents(v20, &at, 0, "d", 4294967294);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_98;
      }
      if (CFStringHasSuffix(a2, @"ThreeDaysDate"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"VAL_3-N_DAYS_AGO");
        *((_DWORD *)a4 + 6) = 23;
        CFCalendarAddComponents(v20, &at, 0, "d", 4294967293);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_98;
      }
      if (CFStringHasSuffix(a2, @"TwoWeeksDate"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"VAL_2-N_WEEKS_AGO");
        *((_DWORD *)a4 + 6) = 24;
        int v40 = v71 - 2;
        goto LABEL_83;
      }
      if (CFStringHasSuffix(a2, @"ThreeWeeksDate"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"VAL_3-N_WEEKS_AGO");
        *((_DWORD *)a4 + 6) = 24;
        int v40 = v71 - 3;
        goto LABEL_83;
      }
      if (CFStringHasSuffix(a2, @"TwoMonthsDate"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"VAL_2-N_MONTHS_AGO");
        *((_DWORD *)a4 + 6) = 25;
        CFCalendarAddComponents(v20, &at, 0, "dM", (1 - *(_DWORD *)v73), 4294967294);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_106;
      }
      if (CFStringHasSuffix(a2, @"ThreeMonthsDate"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"VAL_3-N_MONTHS_AGO");
        *((_DWORD *)a4 + 6) = 25;
        CFCalendarAddComponents(v20, &at, 0, "dM", (1 - *(_DWORD *)v73), 4294967293);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
        goto LABEL_106;
      }
      if (CFStringHasSuffix(a2, @"TwoYearsDate"))
      {
        NL::DatePeriod::setDisplayKey((const void **)a4, @"VAL_2-N_YEARS_AGO");
        *((_DWORD *)a4 + 6) = 26;
        CFCalendarAddComponents(v20, &at, 0, "dMy", (1 - *(_DWORD *)v73), (1 - *(_DWORD *)&v73[4]), 4294967294);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
      }
      else
      {
        if (!CFStringHasSuffix(a2, @"ThreeYearsDate")) {
          goto LABEL_7;
        }
        NL::DatePeriod::setDisplayKey((const void **)a4, @"VAL_3-N_YEARS_AGO");
        *((_DWORD *)a4 + 6) = 26;
        CFCalendarAddComponents(v20, &at, 0, "dMy", (1 - *(_DWORD *)v73), (1 - *(_DWORD *)&v73[4]), 4294967293);
        CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
      }
      goto LABEL_99;
    }
    if (!CFStringHasSuffix(a2, @"IsoMonthDate")) {
      goto LABEL_7;
    }
    NL::DatePeriod::setDisplayKey((const void **)a4, @"FORMATTED");
    *((_DWORD *)a4 + 6) = 38;
    CFDateRef v42 = (const __CFDate *)**this;
    if (v21)
    {
      if (at <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v84, v20, v42)
        || (!DWORD2(v85) || SDWORD2(v85) >= v70)
        && (!DWORD1(v86) || SDWORD1(v86) >= v72)
        && (!v84 || (int)v84 >= *(int *)v73)
        && (!DWORD1(v84) || SDWORD1(v84) >= *(int *)&v73[4]))
      {
        goto LABEL_97;
      }
      uint64_t v43 = 1;
    }
    else
    {
      if (at >= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v84, v20, v42)
        && (!DWORD2(v85) || SDWORD2(v85) < v70)
        && (!DWORD1(v86) || SDWORD1(v86) < v72)
        && (!v84 || (int)v84 < *(int *)v73)
        && (!DWORD1(v84) || SDWORD1(v84) < *(int *)&v73[4]))
      {
        goto LABEL_97;
      }
      uint64_t v43 = 0xFFFFFFFFLL;
    }
    CFCalendarAddComponents(v20, &at, 0, "y", v43);
LABEL_97:
    CFCalendarAddComponents(v20, &at, 0, "dM", -*(_DWORD *)v73, (1 - *(_DWORD *)&v73[4]));
    CFCalendarAddComponents(v20, &at, 0, "dM", 0xFFFFFFFFLL, DWORD1(v84));
    CFCalendarDecomposeAbsoluteTime(v20, at, "yMd", &v73[8], &v73[4], v73);
    goto LABEL_98;
  }
  if (CFStringHasPrefix(a2, @"RelativeEveryTwo"))
  {
    uint64_t v30 = 2;
  }
  else if (CFStringHasPrefix(a2, @"RelativeEveryThree"))
  {
    uint64_t v30 = 3;
  }
  else
  {
    uint64_t v30 = 1;
  }
  CFCalendarDecomposeAbsoluteTime(v20, at, "yMdHms", &v73[8], &v73[4], v73, &v70, &v69, &v68);
  if (CFStringFind(a2, @"Second", 0).location != -1)
  {
    *((_DWORD *)a4 + 6) = 43;
    CFStringRef v32 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_SECONDS", v30);
    NL::DatePeriod::setDisplayKey((const void **)a4, v32);
    *(void *)&long long v84 = *(void *)v73;
    DWORD2(v84) = *(_DWORD *)&v73[8];
    DWORD2(v85) = v70;
    int v23 = v68;
    int v22 = v69;
    int v65 = v30;
    goto LABEL_6;
  }
  if (CFStringFind(a2, @"Minute", 0).location == -1)
  {
    if (CFStringFind(a2, @"Hour", 0).location == -1)
    {
      if (CFStringFind(a2, @"IsoDay", 0).location == -1)
      {
        if (CFStringFind(a2, @"IsoMonth", 0).location == -1)
        {
          if (CFStringFind(a2, @"Day", 0).location == -1)
          {
            if (CFStringFind(a2, @"Weekend", 0).location == -1)
            {
              if (CFStringFind(a2, @"Week", 0).location == -1)
              {
                if (CFStringFind(a2, @"Month", 0).location == -1)
                {
                  if (CFStringFind(a2, @"Year", 0).location != -1)
                  {
                    *((_DWORD *)a4 + 6) = 51;
                    CFStringRef v53 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_YEARS", v30);
                    NL::DatePeriod::setDisplayKey((const void **)a4, v53);
                    LODWORD(v84) = *(_DWORD *)v73;
                    *(void *)((char *)&v84 + 4) = *(void *)&v73[4];
                    int v61 = v30;
                  }
                }
                else
                {
                  *((_DWORD *)a4 + 6) = 50;
                  CFStringRef v52 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_MONTHS", v30);
                  NL::DatePeriod::setDisplayKey((const void **)a4, v52);
                  LODWORD(v84) = *(_DWORD *)v73;
                  *(void *)((char *)&v84 + 4) = *(void *)&v73[4];
                  int v59 = v30;
                }
                goto LABEL_7;
              }
              *((_DWORD *)a4 + 6) = 49;
              CFStringRef v51 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_WEEKS", v30);
              NL::DatePeriod::setDisplayKey((const void **)a4, v51);
              DWORD1(v86) = v72;
              *(void *)&long long v87 = __PAIR64__(*(unsigned int *)&v73[8], v71);
            }
            else
            {
              *((_DWORD *)a4 + 6) = 48;
              CFStringRef v48 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_WEEKENDS", v30);
              NL::DatePeriod::setDisplayKey((const void **)a4, v48);
              int v49 = 7;
              if (v72 != 7)
              {
                CFCalendarAddComponents(v20, &at, 0, "d", (7 - v72));
                CFCalendarDecomposeAbsoluteTime(v20, at, "yEw", &v73[8], &v72, &v71);
                int v49 = v72;
              }
              DWORD1(v86) = v49;
              *(void *)&long long v87 = __PAIR64__(*(unsigned int *)&v73[8], v71);
              DWORD1(v82) = 1;
            }
            int v62 = v30;
          }
          else
          {
            *((_DWORD *)a4 + 6) = 46;
            CFStringRef v46 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_DAYS", v30);
            NL::DatePeriod::setDisplayKey((const void **)a4, v46);
            LODWORD(v84) = *(_DWORD *)v73;
            *(void *)((char *)&v84 + 4) = *(void *)&v73[4];
            int v60 = v30;
          }
        }
        else
        {
          *((_DWORD *)a4 + 6) = 52;
          NL::DatePeriod::setDisplayKey((const void **)a4, @"VAL_1-N_EVERY_ORDINAL_ANY:FORMATTED");
          int v61 = v30;
        }
      }
      else
      {
        *((_DWORD *)a4 + 6) = 52;
        NL::DatePeriod::setDisplayKey((const void **)a4, @"VAL_1-N_EVERY_ORDINAL_ANY:FORMATTED");
        int v62 = v30;
      }
    }
    else
    {
      *((_DWORD *)a4 + 6) = 45;
      CFStringRef v39 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_HOURS", v30);
      NL::DatePeriod::setDisplayKey((const void **)a4, v39);
      *(void *)&long long v84 = *(void *)v73;
      DWORD2(v84) = *(_DWORD *)&v73[8];
      DWORD2(v85) = v70;
      int v63 = v30;
    }
  }
  else
  {
    *((_DWORD *)a4 + 6) = 44;
    CFStringRef v33 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"VAL_%d-N_EVERY_MINUTES", v30);
    NL::DatePeriod::setDisplayKey((const void **)a4, v33);
    *(void *)&long long v84 = *(void *)v73;
    DWORD2(v84) = *(_DWORD *)&v73[8];
    *((void *)&v85 + 1) = __PAIR64__(v69, v70);
    int v64 = v30;
  }
LABEL_7:
  long long v24 = v85;
  *(_OWORD *)((char *)a4 + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v84;
  *(_OWORD *)((char *)a4 + 44) = v24;
  long long v25 = v87;
  *(_OWORD *)((char *)a4 + 6nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v86;
  *(_OWORD *)((char *)a4 + 76) = v25;
  long long v26 = v81;
  *(_OWORD *)((char *)a4 + 92) = v80;
  *(_OWORD *)((char *)a4 + 10std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v26;
  long long v27 = v83;
  *(_OWORD *)((char *)a4 + 124) = v82;
  *(_OWORD *)((char *)a4 + 14nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v27;
  uint64_t v28 = v78;
  *((_DWORD *)v15 + 2) = v79;
  *(void *)double v15 = v28;
  *((_DWORD *)v13 + 2) = v77;
  *(void *)int v13 = v76;
  *((_DWORD *)v18 + 2) = v75;
  *(void *)long long v18 = v74;
  *((_DWORD *)a4 + 39) = v60;
  *((_DWORD *)a4 + 4nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = v59;
  *((_DWORD *)a4 + 41) = v61;
  *((_DWORD *)a4 + 45) = v63;
  *((_DWORD *)a4 + 46) = v64;
  *((_DWORD *)a4 + 47) = v65;
  *((_DWORD *)a4 + 51) = v62;
  NL::DatePeriod::setCalendarWithIdentifier((const void **)a4, v58);
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

void sub_1A438A7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26,uint64_t a27,const void *a28)
{
}

uint64_t updateDateComponentsWithValues(SInt32 *a1, uint64_t a2, CFDictionaryRef theDict, int a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!theDict) {
    return 0;
  }
  LODWORD(v4) = a4;
  CFIndex Count = CFDictionaryGetCount(theDict);
  MEMORY[0x1F4188790]();
  long long v10 = (const void **)&v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v9 >= 0x200) {
    size_t v11 = 512;
  }
  else {
    size_t v11 = v9;
  }
  bzero(&v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v11);
  CFDictionaryGetKeysAndValues(theDict, v10, 0);
  if (Count < 1)
  {
LABEL_77:
    if (a1[10] || a1[11] || a1[12])
    {
      a1[13] = a1[2];
      a1[2] = 0;
    }
    int v25 = a1[4];
    if (!v25) {
      return 1;
    }
    SInt32 v26 = a1[6];
    if (*((void *)a1 + 3))
    {
      if (!v26 || v25 != 2 && v25 < 5) {
        return 1;
      }
      int v27 = v26 % 12 + 12;
    }
    else
    {
      if (v25 >= 8) {
        return 1;
      }
      int v27 = dword_1A43F7378[v25 - 1];
    }
    a1[6] = v27;
    return 1;
  }
  uint64_t v30 = v28;
  int v29 = 1;
  int v31 = (int)v4;
  uint64_t v32 = a2;
  do
  {
    CFStringRef v12 = (const __CFString *)*v10;
    if (!CFStringHasSuffix((CFStringRef)*v10, @"Date") && !CFStringHasPrefix(v12, @"NUMBERS"))
    {
      if (CFStringHasPrefix(v12, @"SPELLED"))
      {
        if ((v4 & 1) == 0)
        {
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, v12);
          SInt32 v14 = intFromSpelledNumber(Value, a2);
          if (v14 < 0) {
            return 0;
          }
          a1[2] = v14;
        }
      }
      else
      {
        int HasPrefix = CFStringHasPrefix(v12, @"Num");
        CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
        CFDictionaryRef v4 = v16;
        if (HasPrefix)
        {
          if (CFDictionaryContainsKey(v16, @"NUMBERS"))
          {
            CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(v4, @"NUMBERS");
            IntCFStringRef Value = intFromSpelledNumber(v17, v32);
            if (IntValue < 0) {
              return 0;
            }
          }
          else if (CFDictionaryContainsKey(v4, @"DIGITS"))
          {
            CFStringRef v19 = (const __CFString *)CFDictionaryGetValue(v4, @"DIGITS");
            IntCFStringRef Value = CFStringGetIntValue(v19);
          }
          else
          {
            IntCFStringRef Value = -1;
          }
          if (CFStringHasPrefix(v12, @"NumWeeks")) {
            a1[14] = IntValue;
          }
          if (CFStringHasPrefix(v12, @"NumYears")) {
            a1[15] = IntValue;
          }
          goto LABEL_29;
        }
        if (CFStringHasPrefix(v12, @"d") || CFStringHasPrefix(v12, @"DAY_ORDINAL"))
        {
          *a1 = CFStringGetIntValue((CFStringRef)v4);
          a2 = v32;
          LOBYTE(v4) = v31;
          goto LABEL_9;
        }
        if (CFStringHasPrefix(v12, @"E"))
        {
          a1[9] = CFStringGetIntValue((CFStringRef)v4);
          goto LABEL_29;
        }
        if (CFStringHasPrefix(v12, @"M"))
        {
          a1[1] = CFStringGetIntValue((CFStringRef)v4);
          goto LABEL_29;
        }
        if (!CFStringHasPrefix(v12, @"y") && !CFStringHasPrefix(v12, @"Y"))
        {
          if (CFStringHasPrefix(v12, @"F"))
          {
            a1[10] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, @"w"))
          {
            a1[12] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, @"W"))
          {
            a1[11] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, @"G"))
          {
            a1[5] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, @"q") || CFStringHasPrefix(v12, @"Q"))
          {
            a1[3] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, @"h") || CFStringHasPrefix(v12, @"H"))
          {
            a1[6] = CFStringGetIntValue((CFStringRef)v4);
          }
          else if (CFStringHasPrefix(v12, @"m"))
          {
            a1[7] = CFStringGetIntValue((CFStringRef)v4);
          }
          else
          {
            if (!CFStringHasPrefix(v12, @"s"))
            {
              uint64_t result = CFStringHasPrefix(v12, @"a");
              if (!result) {
                return result;
              }
              if (CFStringHasPrefix((CFStringRef)v4, @"am"))
              {
                int v24 = 1;
              }
              else if (CFStringHasPrefix((CFStringRef)v4, @"pm"))
              {
                int v24 = 2;
              }
              else if (CFStringHasPrefix((CFStringRef)v4, @"morning"))
              {
                int v24 = 3;
              }
              else if (CFStringHasPrefix((CFStringRef)v4, @"noon"))
              {
                int v24 = 4;
              }
              else if (CFStringHasPrefix((CFStringRef)v4, @"afternoon"))
              {
                int v24 = 5;
              }
              else if (CFStringHasPrefix((CFStringRef)v4, @"evening"))
              {
                int v24 = 6;
              }
              else
              {
                if (!CFStringHasPrefix((CFStringRef)v4, @"night")) {
                  goto LABEL_29;
                }
                int v24 = 7;
              }
              a1[4] = v24;
              goto LABEL_29;
            }
            a1[8] = CFStringGetIntValue((CFStringRef)v4);
          }
LABEL_29:
          a2 = v32;
          LOBYTE(v4) = v31;
          goto LABEL_9;
        }
        SInt32 v20 = CFStringGetIntValue((CFStringRef)v4);
        int v29 = (v20 < 2101) & v29;
        a1[2] = v20;
        if (CFStringCompare(v12, @"yy", 0)) {
          goto LABEL_29;
        }
        int v21 = a1[2];
        a2 = v32;
        LOBYTE(v4) = v31;
        if (v21 > 69) {
          int v22 = v21 + 1000;
        }
        else {
          int v22 = v21 + 2000;
        }
        a1[2] = v22;
      }
    }
LABEL_9:
    ++v10;
    --Count;
  }
  while (Count);
  if (v29) {
    goto LABEL_77;
  }
  return 0;
}

uint64_t intValueForNumberInValues(const __CFLocale *a1, CFDictionaryRef theDict)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"SPELLED");
  if (Value)
  {
    uint64_t result = intFromSpelledNumber(Value, (uint64_t)a1);
    if ((result & 0x80000000) == 0) {
      return result;
    }
    CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, @"NUMBERS");
  }
  else
  {
    CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, @"DIGITS");
    if (!v6)
    {
      CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, @"NON_YEAR_DIGITS");
      if (!v6)
      {
        CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, @"NON_MONTH_DIGITS");
        if (!v6)
        {
          CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, @"NON_DAY_DIGITS");
          if (!v6) {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }

  return CFStringGetIntValue(v6);
}

void NL::DateConverter::mergeRange(NL::DateConverter *this@<X0>, const NL::DatePeriod *a2@<X1>, const NL::DatePeriod *a3@<X3>, int a4@<W2>, int a5@<W4>, int a6@<W5>, void *a7@<X8>)
{
  unint64_t v9 = (__CFCalendar *)*((void *)a2 + 1);
  CFLocaleRef v8 = (const __CFLocale *)*((void *)a2 + 2);
  if (v9) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    CFDateRef v16 = (const __CFDate *)*((void *)a2 + 28);
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    NL::DatePeriod::resolveDateComponents(a2, (NL::DateComponents *)&v51, (NL::DateComponents *)&v39, a4, *((unsigned __int8 *)a2 + 240));
    if (NL::DateComponents::isEmpty((NL::DateComponents *)&v51))
    {
      long long v51 = v39;
      long long v52 = v40;
      long long v53 = v41;
      long long v54 = v42;
    }
    NL::DatePeriod::resolveDateComponents(a3, (NL::DateComponents *)&v47, (NL::DateComponents *)&v39, a5, *((unsigned __int8 *)a3 + 240));
    if (NL::DateComponents::isEmpty((NL::DateComponents *)&v47)
      || !NL::DateComponents::isEmpty((NL::DateComponents *)&v39))
    {
      long long v47 = v39;
      long long v48 = v40;
      long long v49 = v41;
      long long v50 = v42;
    }
    if (!a6
      || (!v51 || v47)
      && (!DWORD1(v51) || DWORD1(v47))
      && (!DWORD2(v51) || DWORD2(v47))
      && (!DWORD1(v53) || DWORD1(v49)))
    {
      getCurrentDateComponents(v9, v16, v38);
      long long v18 = *(_OWORD *)((char *)a2 + 172);
      long long v43 = *(_OWORD *)((char *)a2 + 156);
      long long v44 = v18;
      long long v19 = *(_OWORD *)((char *)a2 + 204);
      long long v45 = *(_OWORD *)((char *)a2 + 188);
      long long v46 = v19;
      if (DWORD1(v49) && !v47 && NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a3 + 156))) {
        resolveDateComponentsToCurrentDate(v9, v8, v16, (NL::DateComponents *)&v47, *(unsigned __int8 *)(*(void *)this + 66));
      }
      if (DWORD1(v53)
        && !v51
        && NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a2 + 156))
        && !*(unsigned char *)(*(void *)this + 66))
      {
        resolveDateComponentsToCurrentDate(v9, v8, v16, (NL::DateComponents *)&v51, 0);
        while (1)
        {
          double AbsoluteTime = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v51, v9, v16);
          if (AbsoluteTime <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v47, v9, v16)) {
            break;
          }
          updateDateComponentsForWeekdayWithWeekOffset(v9, v8, v16, (NL::DateComponents *)&v51, -1);
        }
      }
      if (DWORD1(v47) && !DWORD2(v47) && NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a3 + 156))) {
        resolveDateComponentsToCurrentDate(v9, v8, v16, (NL::DateComponents *)&v47, *(unsigned __int8 *)(*(void *)this + 66));
      }
      if (DWORD1(v51) && !DWORD2(v51) && NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a2 + 156)))
      {
        resolveDateComponentsToCurrentDate(v9, v8, v16, (NL::DateComponents *)&v51, *(unsigned __int8 *)(*(void *)this + 66));
        memset(v37, 0, sizeof(v37));
        BOOL v20 = *(unsigned char *)(*(void *)this + 66) == 0;
        int v21 = *(unsigned char *)(*(void *)this + 66) ? 1 : -1;
        DWORD2(v37[0]) = v21;
        BOOL v22 = !v20;
        double v23 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v51, v9, v16);
        if (v22 != v23 > NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v47, v9, v16))
        {
          do
          {
            updateDateComponentsWithOffsetComponents((unint64_t)v9, v8, v16, (NL::DateComponents *)&v51, (const NL::DateComponents *)v37);
            BOOL v24 = *(unsigned char *)(*(void *)this + 66) != 0;
            double v25 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v51, v9, v16);
          }
          while (((v24 ^ (v25 > NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v47, v9, v16))) & 1) != 0);
        }
      }
      if (!NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a2 + 156))
        && !NL::DateComponents::isEmpty((const NL::DatePeriod *)((char *)a3 + 156)))
      {
        goto LABEL_86;
      }
      if (NL::DateComponents::isTime((NL::DateComponents *)&v47))
      {
        NL::DateComponents::merge((int *)&v51, (int *)&v47);
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        if (*(unsigned char *)(*(void *)this + 66))
        {
LABEL_48:
          double v26 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v51, v9, v16);
          if (v26 < NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v38, v9, v16)
            && *((_DWORD *)a2 + 6) == 40
            && !CFStringsAreEqual(*(const __CFString **)a2, @"HOLIDAY"))
          {
            long long v41 = 0u;
            long long v42 = 0u;
            long long v39 = 0u;
            long long v40 = 0u;
            do
              double v27 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v51, v9, v16);
            while (v27 > NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v47, v9, v16)
                 && (updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(void *)this + 24), *(const __CFString **)a2, v9, v16, v8, (double *)(DWORD2(v51) - 1), (NL::DateComponents *)&v51, (NL::DateComponents *)&v39) & 1) != 0);
          }
          goto LABEL_86;
        }
        double v31 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v51, v9, v16);
        if (v31 <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v38, v9, v16))
        {
          if (!*(unsigned char *)(*(void *)this + 66)) {
            goto LABEL_86;
          }
          goto LABEL_48;
        }
        if (*((_DWORD *)a3 + 6) == 40 && !CFStringsAreEqual(*(const __CFString **)a3, @"HOLIDAY"))
        {
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          while (1)
          {
            double v32 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v51, v9, v16);
            if (v32 <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v38, v9, v16)
              || !updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(void *)this + 24), *(const __CFString **)a2, v9, v16, v8, (double *)(DWORD2(v51) - 1), (NL::DateComponents *)&v51, (NL::DateComponents *)&v39))
            {
              break;
            }
            if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v39))
            {
              long long v51 = v39;
              long long v52 = v40;
              long long v53 = v41;
              long long v54 = v42;
            }
          }
        }
LABEL_86:
        operator new();
      }
      if (*(unsigned char *)(*(void *)this + 66))
      {
        char v28 = 1;
      }
      else
      {
        double v33 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v47, v9, v16);
        char v28 = 1;
        if (v33 > NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v38, v9, v16)
          && *((_DWORD *)a3 + 6) == 40
          && !CFStringsAreEqual(*(const __CFString **)a3, @"HOLIDAY"))
        {
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          while (1)
          {
            double v34 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v47, v9, v16);
            if (v34 <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)v38, v9, v16)) {
              break;
            }
            int updated = updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(void *)this + 24), *(const __CFString **)a3, v9, v16, v8, (double *)(DWORD2(v47) - 1), (NL::DateComponents *)&v47, (NL::DateComponents *)&v39);
            char v28 = updated;
            if (!updated) {
              break;
            }
            if (!NL::DateComponents::isEmpty((NL::DateComponents *)&v39))
            {
              long long v47 = v39;
              long long v48 = v40;
              long long v49 = v41;
              long long v50 = v42;
            }
          }
        }
      }
      double v29 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v51, v9, v16);
      if (v29 > NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v47, v9, v16))
      {
        if (*((_DWORD *)a2 + 6) != 40 || CFStringsAreEqual(*(const __CFString **)a2, @"HOLIDAY")) {
          goto LABEL_6;
        }
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        while (1)
        {
          double v30 = NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v51, v9, v16);
          if (v30 <= NL::DateComponents::getAbsoluteTime((NL::DateComponents *)&v47, v9, v16)) {
            break;
          }
          if ((updateDateComponentsWithHolidayReference(*(const __CFDictionary **)(*(void *)this + 24), *(const __CFString **)a2, v9, v16, v8, (double *)(DWORD2(v51) - 1), (NL::DateComponents *)&v51, (NL::DateComponents *)&v39) & 1) == 0)goto LABEL_6; {
        }
          }
      }
      if (v28) {
        goto LABEL_86;
      }
    }
  }
LABEL_6:
  *a7 = 0;
}

void sub_1A438B7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  std::unique_ptr<NL::DatePeriod>::reset[abi:ne180100](v3, 0);
  _Unwind_Resume(a1);
}

int *NL::DateComponents::merge(int *result, int *a2)
{
  int v2 = *a2;
  int v3 = result[1];
  if (*result) {
    int v2 = *result;
  }
  NLTextSlotRecurrentEvent *result = v2;
  int v4 = a2[1];
  if (v3) {
    int v4 = v3;
  }
  result[1] = v4;
  int v5 = a2[2];
  int v6 = result[3];
  if (result[2]) {
    int v5 = result[2];
  }
  result[2] = v5;
  int v7 = a2[3];
  if (v6) {
    int v7 = v6;
  }
  result[3] = v7;
  int v8 = result[4];
  if (!v8) {
    int v8 = a2[4];
  }
  result[4] = v8;
  int v9 = a2[6];
  int v10 = result[7];
  if (result[6]) {
    int v9 = result[6];
  }
  result[6] = v9;
  int v11 = a2[7];
  if (v10) {
    int v11 = v10;
  }
  result[7] = v11;
  int v12 = a2[8];
  int v13 = result[9];
  if (result[8]) {
    int v12 = result[8];
  }
  result[8] = v12;
  int v14 = a2[9];
  if (v13) {
    int v14 = v13;
  }
  result[9] = v14;
  int v15 = a2[10];
  int v16 = result[11];
  if (result[10]) {
    int v15 = result[10];
  }
  result[10] = v15;
  int v17 = a2[11];
  if (v16) {
    int v17 = v16;
  }
  result[11] = v17;
  int v18 = a2[12];
  int v19 = result[13];
  if (result[12]) {
    int v18 = result[12];
  }
  result[12] = v18;
  int v20 = a2[13];
  if (v19) {
    int v20 = v19;
  }
  result[13] = v20;
  return result;
}

CFDictionaryRef composeHolidayAbsoluteDateWithValue(const __CFDictionary *result, const __CFDictionary *a2, CFAbsoluteTime *a3, double *a4, int a5, int *a6, int *a7)
{
  if (a2)
  {
    CFDictionaryRef v10 = result;
    uint64_t valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(result, @"Day");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    }
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v10, @"Month");
    if (v12)
    {
      CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
      uint64_t v13 = valuePtr;
    }
    else
    {
      uint64_t v13 = 0;
    }
    return (const __CFDictionary *)CFCalendarComposeAbsoluteTime(a2, a3, "dMy", HIDWORD(valuePtr), v13, a4);
  }
  return result;
}

_DWORD *extractJulianEasterInYear(_DWORD *result, int *a2, int a3)
{
  if (a3 <= 0) {
    int v3 = -(-a3 & 3);
  }
  else {
    int v3 = a3 & 3;
  }
  int v4 = 4 * (a3 % 7) + 2 * v3 + 34;
  int v5 = v4
     - 7
     * ((v4
       - (__int16)(19 * (a3 % 19)
                 + 15
                 - 30
                 * (((__int16)((34953 * (__int16)(19 * (a3 % 19) + 15)) >> 16) >> 4)
                  + ((unsigned __int16)(((34953 * (__int16)(19 * (a3 % 19) + 15)) >> 16) & 0x8000) >> 15))))
      / 7)
     + 114;
  unsigned int v6 = 9
     * (v4
                       - 7
                       * ((v4
                         - (__int16)(19 * (a3 % 19)
                                   + 15
                                   - 30
                                   * (((__int16)((34953 * (__int16)(19 * (a3 % 19) + 15)) >> 16) >> 4)
                                    + ((unsigned __int16)(((34953 * (__int16)(19 * (a3 % 19) + 15)) >> 16) & 0x8000) >> 15))))
                        / 7)
                       + 114);
  unsigned int v7 = (((v5 - BYTE1(v6)) >> 1) + (v6 >> 8)) >> 4;
  int v8 = (v5 - 31 * v7);
  if (result) {
    NLTextSlotRecurrentEvent *result = (v8 + 13) % extractJulianEasterInYear(int *,int *,int)::lastDayOfMonthLeapYear[v7 - 1] + 1;
  }
  if (a2) {
    *a2 = (v8 + 13) / extractJulianEasterInYear(int *,int *,int)::lastDayOfMonthLeapYear[v7 - 1] + v7;
  }
  return result;
}

_DWORD *extractGregorianEasterInYear(_DWORD *result, unsigned int *a2, int a3)
{
  int v3 = a3 % 19;
  int v4 = a3 / 100;
  int v5 = a3 % 100;
  int v6 = (a3 / 100) & 3;
  if (a3 / -100 >= 0) {
    int v6 = -((a3 / -100) & 3);
  }
  int v7 = ((unint64_t)(1431655765 * (v4 + (v4 + 8) / -25 + 1)) >> 32) - (v4 + (v4 + 8) / -25 + 1);
  int v8 = (int)(v4 + a3 / -400 + 19 * v3 + (v7 >> 1) + (v7 >> 31) + 15) % 30;
  char v9 = v5 + (((char)v5 >> 13) & 3);
  int v10 = (2 * (v6 + (v9 >> 2)) + ((v9 & 0xFC) - v5 + 32) - v8) % 7;
  __int16 v11 = (37201 * (__int16)(v3 + 11 * v8 + 22 * v10)) >> 16;
  char v12 = HIBYTE(v11) + ((unsigned __int16)(v11 & 0x8000) >> 15);
  if (result)
  {
    unsigned int v13 = 9 * (v10 + v8 - 7 * v12 + 114);
    NLTextSlotRecurrentEvent *result = (v10
                              + v8
                              - 7 * v12
                              + 114
                              - 31
                              * ((((v10 + v8 - 7 * v12 + 114 - BYTE1(v13)) >> 1) + (v13 >> 8)) >> 4)
                              + 1);
  }
  if (a2) {
    *a2 = (((v10
  }
                            + v8
                            - 7 * v12
                            + 114
                            - ((unsigned __int16)(9 * (v10 + v8 - 7 * v12 + 114)) >> 8)) >> 1)
         + ((9 * (v10 + v8 - 7 * v12 + 114)) >> 8)) >> 4;
  return result;
}

CFDictionaryRef composeHolidayRelativeDateWithValue(const __CFDictionary *result, __CFCalendar *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  if (result && a2)
  {
    unsigned int valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(result, @"RelativeDays");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    }
    CFCalendarComposeAbsoluteTime(a2, a3, "dMy", a4, a5, a6);
    return (const __CFDictionary *)CFCalendarAddComponents(a2, a3, 0, "d", valuePtr);
  }
  return result;
}

uint64_t resetTimeForUnit(__CFCalendar *a1, CFAbsoluteTime *a2, uint64_t a3, uint64_t a4)
{
  CFAbsoluteTime v8 = *a2;
  if (*(char *)(a3 + 23) >= 0) {
    char v9 = (const char *)a3;
  }
  else {
    char v9 = *(const char **)a3;
  }
  uint64_t v11 = 0;
  CFCalendarDecomposeAbsoluteTime(a1, v8, v9, &v11);
  if (*(char *)(a3 + 23) >= 0) {
    return CFCalendarAddComponents(a1, a2, 0, (const char *)a3, a4 - v11);
  }
  else {
    return CFCalendarAddComponents(a1, a2, 0, *(const char **)a3, a4 - v11);
  }
}

BOOL NL::DateComponents::hasDate(NL::DateComponents *this)
{
  return *(_DWORD *)this
      || *((_DWORD *)this + 9)
      || *((_DWORD *)this + 1)
      || *((_DWORD *)this + 2)
      || *((_DWORD *)this + 3)
      || *((_DWORD *)this + 12)
      || *((_DWORD *)this + 11)
      || *((_DWORD *)this + 10)
      || *((_DWORD *)this + 13)
      || *((_DWORD *)this + 14)
      || *((_DWORD *)this + 15) != 0;
}

NL::DatePeriod *NL::DatePeriod::DatePeriod(NL::DatePeriod *this)
{
  *((void *)this + 2std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *((void *)this + 29) = 0;
  int v2 = (const void **)((char *)this + 232);
  *(_OWORD *)((char *)this + 204) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((unsigned char *)this + 24nlp::CFScopedPtr<_LXLexicon const*>::reset(this, 0) = 0;
  CFDateFormatterRef ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x333uLL);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v2, ISO8601Formatter);
  return this;
}

void sub_1A438BEE8(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v3, 0);
  nlp::CFScopedPtr<__CFDate const*>::reset(v2, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v1 + 2, 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset(v1 + 1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFDateFormatter *>::reset(const void **a1, const void *a2)
{
  int v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFArray const*>::reset(const void **a1, const void *a2)
{
  int v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

const void **std::unique_ptr<NL::DatePeriod>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    NL::DatePeriod::~DatePeriod(result);
    JUMPOUT(0x1A625B130);
  }
  return result;
}

void NL::DatePeriod::~DatePeriod(const void **this)
{
}

void loadPlistFromFile(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  CFStringRef CFStringFromString = createCFStringFromString(a1);
  getPathForResource(CFStringFromString, &v50);
  int v3 = (NL::CFLogger *)std::string::compare(&v50, "");
  if (!v3)
  {
    uint64_t v10 = NL::CFLogger::sharedInstance(v3);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v10 + 16))(v10, 3, "Could not find the mappings from resource bundle");
    if (CFStringFromString) {
      CFRelease(CFStringFromString);
    }
    goto LABEL_58;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v5 = &v50;
  }
  else {
    int v5 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v5, 0x8000100u);
  CFURLRef v7 = CFURLCreateWithFileSystemPath(v4, v6, kCFURLPOSIXPathStyle, 0);
  CFURLRef v8 = v7;
  CFDataRef resourceData = 0;
  SInt32 errorCode = 0;
  if (!v7)
  {
    int v9 = 0;
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  CFURLRef v7 = (CFURLRef)CFURLCreateDataAndPropertiesFromResource(v4, v7, &resourceData, 0, 0, &errorCode);
  int v9 = (int)v7;
  if (v6) {
LABEL_11:
  }
    CFRelease(v6);
LABEL_12:
  if (v8) {
    CFRelease(v8);
  }
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  if (v9 && resourceData)
  {
    CFErrorRef error = 0;
    CFDictionaryRef plist = (const __CFDictionary *)CFPropertyListCreateWithData(v4, resourceData, 0, 0, &error);
    if (resourceData) {
      CFRelease(resourceData);
    }
    if (plist && CFPropertyListIsValid(plist, kCFPropertyListXMLFormat_v1_0))
    {
      CFIndex Count = CFDictionaryGetCount(plist);
      std::vector<__CFString const*>::vector(&keys, Count);
      CFDictionaryGetKeysAndValues(plist, (const void **)keys, 0);
      char v12 = (const void **)keys;
      double v30 = v46;
      if (keys != v46)
      {
        do
        {
          CFStringRef v13 = (const __CFString *)*v12;
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(plist, *v12);
          getUTF8StringFromCFString(v13, v43);
          CFIndex v15 = CFDictionaryGetCount(Value);
          std::vector<__CFString const*>::vector(&v41, v15);
          double v32 = v12;
          CFDictionaryGetKeysAndValues(Value, (const void **)v41, 0);
          int v17 = (const __CFString **)v41;
          int v16 = v42;
          if (v41 != v42)
          {
            do
            {
              CFStringRef v18 = *v17;
              getUTF8StringFromCFString(*v17, v39);
              CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(Value, v18);
              CFIndex v20 = CFArrayGetCount(v19);
              int v36 = 0;
              CFStringRef v37 = 0;
              unint64_t v38 = 0;
              if (v20 >= 1)
              {
                for (CFIndex i = 0; i != v20; ++i)
                {
                  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v19, i);
                  getUTF8StringFromCFString(ValueAtIndex, __p);
                  double v23 = v37;
                  if ((unint64_t)v37 >= v38)
                  {
                    double v25 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v36, (long long *)__p);
                  }
                  else
                  {
                    if (SHIBYTE(v35) < 0)
                    {
                      std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                    }
                    else
                    {
                      long long v24 = *(_OWORD *)__p;
                      v37->__r_.__value_.__r.__words[2] = v35;
                      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
                    }
                    double v25 = (long long *)&v23[1];
                  }
                  CFStringRef v37 = (std::string *)v25;
                  if (SHIBYTE(v35) < 0) {
                    operator delete(__p[0]);
                  }
                }
              }
              v51[0] = (long long *)v43;
              double v26 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v43, (uint64_t)&std::piecewise_construct, v51);
              v51[0] = (long long *)v39;
              double v27 = (std::vector<std::string> *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v26 + 40), (unsigned __int8 *)v39, (uint64_t)&std::piecewise_construct, v51)+ 40);
              if (v27 != (std::vector<std::string> *)&v36) {
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v27, v36, (long long *)v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
              }
              __p[0] = &v36;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              if (v40 < 0) {
                operator delete(v39[0]);
              }
              ++v17;
            }
            while (v17 != (const __CFString **)v16);
            int v17 = (const __CFString **)v41;
          }
          if (v17)
          {
            long long v42 = (void **)v17;
            operator delete(v17);
          }
          if (v44 < 0) {
            operator delete(v43[0]);
          }
          char v12 = v32 + 1;
        }
        while (v32 + 1 != (const void **)v30);
        char v12 = (const void **)keys;
      }
      if (v12)
      {
        long long v46 = (void **)v12;
        operator delete(v12);
      }
LABEL_57:
      CFRelease(plist);
      goto LABEL_58;
    }
    CFShow(error);
    if (LogHandleForNLMessageIntentDomainDetector(void)::onceToken != -1) {
      dispatch_once(&LogHandleForNLMessageIntentDomainDetector(void)::onceToken, &__block_literal_global_2);
    }
    double v29 = LogHandleForNLMessageIntentDomainDetector(void)::logHandle;
    if (os_log_type_enabled((os_log_t)LogHandleForNLMessageIntentDomainDetector(void)::logHandle, OS_LOG_TYPE_FAULT)) {
      loadPlistFromFile(v29);
    }
    if (plist) {
      goto LABEL_57;
    }
  }
  else
  {
    if (resourceData) {
      CFRelease(resourceData);
    }
    uint64_t v28 = NL::CFLogger::sharedInstance(v7);
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v28 + 16))(v28, 3, "Could not load the mappings from resource bundle %d", errorCode);
  }
LABEL_58:
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
}

#error "1A438C68C: call analysis failed (funcsize=65)"

void sub_1A438C6E8()
{
}

void NLMessageIntentDomainDetector::NLMessageIntentDomainDetector(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 1065353216;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  LODWORD(this[4].__r_.__value_.__l.__data_) = 1065353216;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  LODWORD(this[5].__r_.__value_.__r.__words[2]) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "photosharing-keywords.plist");
  loadPlistFromFile((uint64_t)__p, (uint64_t)v6);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__move_assign((uint64_t)&this[4].__r_.__value_.__l.__size_, v6);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::~__hash_table((uint64_t)v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1A438C7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::~__hash_table(v17);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table(v16);
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::~__hash_table(v15);
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(a1);
}

void NLMessageIntentDomainDetector::getLemmatizedTextWithSurfaceform(const char *a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E4F5C900]);
  CFURLRef v8 = (const void *)NLTaggerCreate();
  CFRelease(Mutable);
  NLTaggerSetString();
  CFStringGetLength(v6);
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  CFStringRef v9 = CFStringCreateWithCString(v5, a1, 0x8000100u);
  CFStringRef CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString(v5, v9);
  CFLocaleRef v11 = CFLocaleCreate(v5, CanonicalLocaleIdentifierFromString);
  NLTaggerSetLocaleForRange();
  if (v9) {
    CFRelease(v9);
  }
  if (CanonicalLocaleIdentifierFromString) {
    CFRelease(CanonicalLocaleIdentifierFromString);
  }
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v18 = 0;
  CFArrayRef v19 = (long long **)&v18;
  uint64_t v20 = 0x4002000000;
  int v21 = __Block_byref_object_copy__6;
  BOOL v22 = __Block_byref_object_dispose__6;
  memset(v23, 0, sizeof(v23));
  char v12 = 0;
  CFStringRef v13 = &v12;
  uint64_t v14 = 0x4002000000;
  uint64_t v15 = __Block_byref_object_copy__6;
  uint64_t v16 = __Block_byref_object_dispose__6;
  memset(v17, 0, sizeof(v17));
  NLTaggerEnumerateTokens();
  if (v6) {
    CFRelease(v6);
  }
  if (v8) {
    CFRelease(v8);
  }
  std::pair<std::vector<std::string>,std::vector<std::string>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::string>&,0>(a3, v19 + 5, (long long **)v13 + 5);
  _Block_object_dispose(&v12, 8);
  long long v24 = (void **)v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  _Block_object_dispose(&v18, 8);
  char v12 = (void **)v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_1A438CAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a18, 8);
  *(void *)(v27 - 72) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 72));
  _Block_object_dispose(&a26, 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__6(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN29NLMessageIntentDomainDetector32getLemmatizedTextWithSurfaceformERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, CFRange *a2)
{
  CFStringRef v3 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFStringRef *)(a1 + 48), *a2);
  getUTF8StringFromCFString(v3, v18);
  CFStringRef v4 = (const __CFString *)NLTaggerCopyTagForCurrentToken();
  CFStringRef v5 = v4;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v17 = 0;
  if (v4) {
    getUTF8StringFromCFString(v4, &v14);
  }
  else {
    getUTF8StringFromCFString(v3, &v14);
  }
  *(_OWORD *)long long __p = v14;
  uint64_t v17 = v15;
  CFStringRef v6 = *(void **)(*(void *)(a1 + 32) + 8);
  unint64_t v7 = v6[6];
  if (v7 >= v6[7])
  {
    uint64_t v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6 + 5, (long long *)__p);
  }
  else
  {
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v6[6], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 16) = v17;
      *(_OWORD *)unint64_t v7 = v8;
    }
    uint64_t v9 = v7 + 24;
    v6[6] = v7 + 24;
  }
  v6[6] = v9;
  uint64_t v10 = *(void **)(*(void *)(a1 + 40) + 8);
  unint64_t v11 = v10[6];
  if (v11 >= v10[7])
  {
    uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v10 + 5, (long long *)v18);
  }
  else
  {
    if (SHIBYTE(v19) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v10[6], (const std::string::value_type *)v18[0], (std::string::size_type)v18[1]);
    }
    else
    {
      long long v12 = *(_OWORD *)v18;
      *(void *)(v11 + 16) = v19;
      *(_OWORD *)unint64_t v11 = v12;
    }
    uint64_t v13 = v11 + 24;
    v10[6] = v11 + 24;
  }
  v10[6] = v13;
  if (v3) {
    CFRelease(v3);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
}

void sub_1A438CCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  *(void *)(v25 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v24;
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

BOOL NLMessageIntentDomainDetector::regExEvaluated(NLMessageIntentDomainDetector *this)
{
  return *((void *)this + 16)
      && !std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((void *)this + 3, (unsigned __int8 *)this)&& !std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>((void *)this + 8, (unsigned __int8 *)this);
}

void NLMessageIntentDomainDetector::hasPhotoSharingKeywords(std::string *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v129[2] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v127 = *(std::string *)a2;
  }
  memset(&v126, 0, sizeof(v126));
  memset(&v125, 0, sizeof(v125));
  *(void *)((char *)v129 + 7) = 0;
  v129[0] = 0;
  if (!std::string::compare(this, "zh-Hans"))
  {
    std::string::basic_string[abi:ne180100]<0>(&v112, " ");
    std::string::basic_string[abi:ne180100]<0>(&v99, "");
    replaceAll(&v127, (char *)&v112, (uint64_t)&v99);
    if (SHIBYTE(v99.__pregex_) < 0) {
      operator delete((void *)v99.__begin_.__i_);
    }
    if (SHIBYTE(v112.__pregex_) < 0) {
      operator delete((void *)v112.__begin_.__i_);
    }
  }
  else
  {
    NLMessageIntentDomainDetector::getLemmatizedTextWithSurfaceform((const char *)this, (const char *)a2, (std::string *)&v112);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v126, (std::string *)v112.__begin_.__i_, (long long *)v112.__end_.__i_, 0xAAAAAAAAAAAAAAABLL * ((v112.__end_.__i_ - v112.__begin_.__i_) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v125, *(std::string **)&v112.__flags_, (long long *)v112.__match_.__matches_.__begin_, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v112.__match_.__matches_.__begin_ - *(void *)&v112.__flags_) >> 3));
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    join((uint64_t *)&v126, (uint64_t)__p, (std::string *)&v99);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v127.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = *(_OWORD *)&v99.__begin_.__i_;
    v127.__r_.__value_.__r.__words[2] = (std::string::size_type)v99.__pregex_;
    HIBYTE(v99.__pregex_) = 0;
    LOBYTE(v99.__begin_.__i_) = 0;
    if (SHIBYTE(__p[0].__end_cap_.__value_) < 0) {
      operator delete(__p[0].__begin_);
    }
    v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v112.__flags_;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v112;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  }
  long long v123 = 0uLL;
  pregex = 0;
  long long v121 = 0uLL;
  uint64_t v122 = 0;
  std::regex_traits<char>::regex_traits(&v117);
  uint64_t v120 = 0;
  long long v119 = 0u;
  long long v118 = 0u;
  std::regex_traits<char>::regex_traits(&v113);
  uint64_t v116 = 0;
  long long v115 = 0u;
  long long v114 = 0u;
  if (NLMessageIntentDomainDetector::regExEvaluated((NLMessageIntentDomainDetector *)this))
  {
    memset(__p, 0, 24);
    memset(&__v, 0, 24);
    v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)this;
    CFStringRef v6 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[4].__r_.__value_.__l.__size_, (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (long long **)&v99);
    std::string::basic_string[abi:ne180100]<0>(&v112, "nouns");
    v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v112;
    unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v6 + 40), (unsigned __int8 *)&v112, (uint64_t)&std::piecewise_construct, (long long **)&v99);
    uint64_t v8 = *((void *)v7 + 5);
    uint64_t v9 = *((void *)v7 + 6);
    if (SHIBYTE(v112.__pregex_) < 0) {
      operator delete((void *)v112.__begin_.__i_);
    }
    uint64_t v10 = MEMORY[0x1E4FBA418];
    if (v8 != v9)
    {
      v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)this;
      unint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[4].__r_.__value_.__l.__size_, (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (long long **)&v99);
      std::string::basic_string[abi:ne180100]<0>(&v112, "nouns");
      v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v112;
      long long v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v11 + 40), (unsigned __int8 *)&v112, (uint64_t)&std::piecewise_construct, (long long **)&v99);
      if (SHIBYTE(v112.__pregex_) < 0) {
        operator delete((void *)v112.__begin_.__i_);
      }
      uint64_t v13 = (long long *)*((void *)v12 + 5);
      long long v14 = (long long *)*((void *)v12 + 6);
      while (v13 != v14)
      {
        if (*((char *)v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v112, *(const std::string::value_type **)v13, *((void *)v13 + 1));
        }
        else
        {
          long long v15 = *v13;
          v112.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)*((void *)v13 + 2);
          *(_OWORD *)&v112.__begin_.__i_ = v15;
        }
        std::vector<std::ssub_match>::pointer end = __p[0].__end_;
        if (__p[0].__end_ >= __p[0].__end_cap_.__value_)
        {
          uint64_t v18 = (std::sub_match<std::__wrap_iter<const char *>> *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, (long long *)&v112);
        }
        else
        {
          if (SHIBYTE(v112.__pregex_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p[0].__end_, v112.__begin_.__i_, (std::string::size_type)v112.__end_.__i_);
          }
          else
          {
            std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v17 = *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v112.__begin_.__i_;
            *(void *)&__p[0].__end_->matched = v112.__pregex_;
            end->std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v17;
          }
          uint64_t v18 = end + 1;
        }
        __p[0].__end_ = v18;
        if (SHIBYTE(v112.__pregex_) < 0) {
          operator delete((void *)v112.__begin_.__i_);
        }
        uint64_t v13 = (long long *)((char *)v13 + 24);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v112);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::ostream_iterator<std::string,char,std::char_traits<char>>,0>((uint64_t)__p[0].__begin_, (uint64_t)&__p[0].__end_[-1], (uint64_t)&v112, (uint64_t)"|", (uint64_t *)&v99);
      int v19 = *((char *)&__p[0].__end_[-1].matched + 7);
      if (v19 >= 0) {
        std::__wrap_iter<const char *>::iterator_type i = (std::__wrap_iter<const char *>::iterator_type)&__p[0].__end_[-1];
      }
      else {
        std::__wrap_iter<const char *>::iterator_type i = __p[0].__end_[-1].first.__i_;
      }
      if (v19 >= 0) {
        uint64_t v21 = *((unsigned __int8 *)&__p[0].__end_[-1].matched + 7);
      }
      else {
        uint64_t v21 = (uint64_t)__p[0].__end_[-1].second.__i_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)i, v21);
      std::stringbuf::str();
      if (SHIBYTE(pregex) < 0) {
        operator delete((void *)v123);
      }
      long long v123 = *(_OWORD *)&v99.__begin_.__i_;
      pregex = v99.__pregex_;
      v112.__begin_.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)v10;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v112.__begin_.__i_
                                                       + *((void *)v112.__begin_.__i_ - 3)) = *(std::__wrap_iter<const char *>::iterator_type *)(v10 + 24);
      v112.__end_.__i_ = (std::__wrap_iter<const char *>::iterator_type)(MEMORY[0x1E4FBA470] + 16);
      if (SHIBYTE(v112.__match_.__prefix_.second.__i_) < 0) {
        operator delete(*(void **)&v112.__match_.__unmatched_.matched);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A625B0A0](&v112.__match_.__suffix_.second);
    }
    v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)this;
    BOOL v22 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[4].__r_.__value_.__l.__size_, (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (long long **)&v99);
    std::string::basic_string[abi:ne180100]<0>(&v112, "verbs");
    v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v112;
    double v23 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v22 + 40), (unsigned __int8 *)&v112, (uint64_t)&std::piecewise_construct, (long long **)&v99);
    uint64_t v24 = *((void *)v23 + 5);
    uint64_t v25 = *((void *)v23 + 6);
    if (SHIBYTE(v112.__pregex_) < 0) {
      operator delete((void *)v112.__begin_.__i_);
    }
    if (v24 != v25)
    {
      v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)this;
      uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[4].__r_.__value_.__l.__size_, (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (long long **)&v99);
      std::string::basic_string[abi:ne180100]<0>(&v112, "verbs");
      v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v112;
      uint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v26 + 40), (unsigned __int8 *)&v112, (uint64_t)&std::piecewise_construct, (long long **)&v99);
      if (SHIBYTE(v112.__pregex_) < 0) {
        operator delete((void *)v112.__begin_.__i_);
      }
      uint64_t v28 = (long long *)*((void *)v27 + 5);
      double v29 = (long long *)*((void *)v27 + 6);
      while (v28 != v29)
      {
        if (*((char *)v28 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v112, *(const std::string::value_type **)v28, *((void *)v28 + 1));
        }
        else
        {
          long long v30 = *v28;
          v112.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)*((void *)v28 + 2);
          *(_OWORD *)&v112.__begin_.__i_ = v30;
        }
        std::__split_buffer<std::string>::pointer begin = __v.__begin_;
        if (__v.__begin_ >= __v.__end_)
        {
          double v33 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (long long *)&v112);
        }
        else
        {
          if (SHIBYTE(v112.__pregex_) < 0)
          {
            std::string::__init_copy_ctor_external(__v.__begin_, v112.__begin_.__i_, (std::string::size_type)v112.__end_.__i_);
          }
          else
          {
            long long v32 = *(_OWORD *)&v112.__begin_.__i_;
            __v.__begin_->__r_.__value_.__r.__words[2] = (std::string::size_type)v112.__pregex_;
            *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v32;
          }
          double v33 = begin + 1;
        }
        __v.__begin_ = v33;
        if (SHIBYTE(v112.__pregex_) < 0) {
          operator delete((void *)v112.__begin_.__i_);
        }
        uint64_t v28 = (long long *)((char *)v28 + 24);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v112);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::ostream_iterator<std::string,char,std::char_traits<char>>,0>((uint64_t)__v.__first_, (uint64_t)&__v.__begin_[-1], (uint64_t)&v112, (uint64_t)"|", (uint64_t *)&v99);
      int v34 = SHIBYTE(__v.__begin_[-1].__r_.__value_.__r.__words[2]);
      if (v34 >= 0) {
        std::__split_buffer<std::string>::pointer data = __v.__begin_ - 1;
      }
      else {
        std::__split_buffer<std::string>::pointer data = (std::__split_buffer<std::string>::pointer)__v.__begin_[-1].__r_.__value_.__l.__data_;
      }
      if (v34 >= 0) {
        std::string::size_type size = HIBYTE(__v.__begin_[-1].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __v.__begin_[-1].__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)data, size);
      std::stringbuf::str();
      if (SHIBYTE(v122) < 0) {
        operator delete((void *)v121);
      }
      long long v121 = *(_OWORD *)&v99.__begin_.__i_;
      uint64_t v122 = v99.__pregex_;
      v112.__begin_.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)v10;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v112.__begin_.__i_
                                                       + *((void *)v112.__begin_.__i_ - 3)) = *(std::__wrap_iter<const char *>::iterator_type *)(v10 + 24);
      v112.__end_.__i_ = (std::__wrap_iter<const char *>::iterator_type)(MEMORY[0x1E4FBA470] + 16);
      if (SHIBYTE(v112.__match_.__prefix_.second.__i_) < 0) {
        operator delete(*(void **)&v112.__match_.__unmatched_.matched);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A625B0A0](&v112.__match_.__suffix_.second);
    }
    if (std::string::compare(this, "zh-Hans"))
    {
      std::operator+<char>();
      CFStringRef v37 = std::string::append((std::string *)&v99, ")\\b");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v112.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__begin_.__i_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::__wrap_iter<const char *>::iterator_type pregex_high = (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v112.__pregex_);
      if (SHIBYTE(v112.__pregex_) >= 0) {
        uint64_t v40 = (uint64_t)&v112;
      }
      else {
        uint64_t v40 = (uint64_t)v112.__begin_.__i_;
      }
      if (SHIBYTE(v112.__pregex_) < 0) {
        std::__wrap_iter<const char *>::iterator_type pregex_high = v112.__end_.__i_;
      }
      std::basic_regex<char,std::regex_traits<char>>::assign[abi:ne180100]<std::__wrap_iter<char const*>,0>((uint64_t)&v117, v40, (uint64_t)&pregex_high[v40], 1);
    }
    std::operator+<char>();
    long long v41 = std::string::append((std::string *)&v99, ")");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v112.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v112.__begin_.__i_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::__wrap_iter<const char *>::iterator_type v43 = (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v112.__pregex_);
    if (SHIBYTE(v112.__pregex_) >= 0) {
      uint64_t v44 = (uint64_t)&v112;
    }
    else {
      uint64_t v44 = (uint64_t)v112.__begin_.__i_;
    }
    if (SHIBYTE(v112.__pregex_) < 0) {
      std::__wrap_iter<const char *>::iterator_type v43 = v112.__end_.__i_;
    }
    std::basic_regex<char,std::regex_traits<char>>::assign[abi:ne180100]<std::__wrap_iter<char const*>,0>((uint64_t)&v117, v44, (uint64_t)&v43[v44], 1);
  }
  std::string::basic_string[abi:ne180100]<0>(&v110, "");
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  char v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  char v107 = 0;
  char v108 = 0;
  uint64_t v109 = 0;
  memset(__p, 0, 41);
  v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)this;
  long long v45 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[4].__r_.__value_.__l.__size_, (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (long long **)&v99);
  std::string::basic_string[abi:ne180100]<0>(&v112, "nouns");
  v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v112;
  long long v46 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v45 + 40), (unsigned __int8 *)&v112, (uint64_t)&std::piecewise_construct, (long long **)&v99);
  uint64_t v47 = *((void *)v46 + 5);
  uint64_t v48 = *((void *)v46 + 6);
  if (SHIBYTE(v112.__pregex_) < 0) {
    operator delete((void *)v112.__begin_.__i_);
  }
  if (v47 == v48)
  {
    char v65 = 0;
    CFIndex v66 = 0;
    goto LABEL_175;
  }
  memset(&v100, 0, sizeof(v100));
  if (!std::string::compare(this, "zh-Hans"))
  {
    uint64_t v67 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
    long long v68 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
    v99.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)this;
    int v69 = std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[1], (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (long long **)&v99);
    if ((v67 & 0x80u) == 0) {
      v70.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v127;
    }
    else {
      v70.__i_ = (std::__wrap_iter<const char *>::iterator_type)v68;
    }
    if ((v67 & 0x80u) == 0) {
      uint64_t v71 = v67;
    }
    else {
      uint64_t v71 = *((void *)&v68 + 1);
    }
    v72.__i_ = &v70.__i_[v71];
    std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v112, v70, v72, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(v69 + 40), match_default);
    for (char j = 0; ; char j = 1)
    {
      memset(&v99.__match_.__prefix_, 0, 17);
      memset(&v99.__match_.__suffix_, 0, 17);
      v99.__match_.__ready_ = 0;
      v99.__match_.__position_start_.__i_ = 0;
      memset(&v99.__match_, 0, 41);
      memset(&v99, 0, 28);
      BOOL v73 = std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v112, &v99);
      if (v99.__match_.__matches_.__begin_)
      {
        v99.__match_.__matches_.__end_ = v99.__match_.__matches_.__begin_;
        operator delete(v99.__match_.__matches_.__begin_);
      }
      if (v73) {
        break;
      }
      memset(&v99, 0, 24);
      std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>((char *)&v99, (long long *)v112.__match_.__matches_.__begin_, (long long *)v112.__match_.__matches_.__end_, 0xAAAAAAAAAAAAAAABLL* (((char *)v112.__match_.__matches_.__end_ - (char *)v112.__match_.__matches_.__begin_) >> 3));
      v99.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v112.__match_.__prefix_.second.__i_;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v99.__match_.__unmatched_.matched = v112.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
      *(_OWORD *)&v99.__match_.__prefix_.second.__i_ = *(_OWORD *)&v112.__match_.__suffix_.matched;
      v99.__match_.__suffix_.first.__i_ = v112.__match_.__position_start_.__i_;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v99.__flags_ = v112.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
      *(_OWORD *)&v99.__match_.__matches_.__end_ = *(_OWORD *)&v112.__match_.__unmatched_.matched;
      std::match_results<std::__wrap_iter<char const*>>::str[abi:ne180100](&v99, 0, v97);
      std::vector<std::string>::pointer v74 = v100.__end_;
      if (v100.__end_ >= v100.__end_cap_.__value_)
      {
        unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * (((char *)v100.__end_ - (char *)v100.__begin_) >> 3);
        unint64_t v77 = v76 + 1;
        if (v76 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v100.__end_cap_.__value_ - (char *)v100.__begin_) >> 3) > v77) {
          unint64_t v77 = 0x5555555555555556 * (((char *)v100.__end_cap_.__value_ - (char *)v100.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v100.__end_cap_.__value_ - (char *)v100.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v78 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v78 = v77;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v100.__end_cap_;
        if (v78) {
          int v79 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v100.__end_cap_, v78);
        }
        else {
          int v79 = 0;
        }
        long long v80 = v79 + v76;
        __v.__first_ = v79;
        __v.__begin_ = v80;
        __v.__end_cap_.__value_ = &v79[v78];
        long long v81 = *(_OWORD *)v97;
        v80->__r_.__value_.__r.__words[2] = v98;
        *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
        v97[1] = 0;
        std::string::size_type v98 = 0;
        v97[0] = 0;
        __v.__end_ = v80 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v100, &__v);
        long long v82 = v100.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v100.__end_ = v82;
        if (SHIBYTE(v98) < 0) {
          operator delete(v97[0]);
        }
      }
      else
      {
        long long v75 = *(_OWORD *)v97;
        v100.__end_->__r_.__value_.__r.__words[2] = v98;
        *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
        v100.__end_ = v74 + 1;
      }
      if (v99.__begin_.__i_)
      {
        v99.__end_.__i_ = v99.__begin_.__i_;
        operator delete((void *)v99.__begin_.__i_);
      }
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++[abi:ne180100]((uint64_t)&v112, (uint64_t)v94);
      if (v95)
      {
        CFStringRef v96 = v95;
        operator delete(v95);
      }
    }
    if (v112.__match_.__matches_.__begin_)
    {
      v112.__match_.__matches_.__end_ = v112.__match_.__matches_.__begin_;
      operator delete(v112.__match_.__matches_.__begin_);
    }
  }
  else
  {
    std::vector<std::string>::pointer v49 = v126.__begin_;
    if (v126.__end_ == v126.__begin_)
    {
      char j = 0;
    }
    else
    {
      uint64_t v50 = 0;
      unint64_t v51 = 0;
      char j = 0;
      do
      {
        long long v53 = &v49[v50];
        if (SHIBYTE(v53->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v99, v53->__r_.__value_.__l.__data_, v53->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v99.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v99.__begin_.__i_ = v54;
        }
        __v.__first_ = this;
        int v55 = std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[1], (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (long long **)&__v)+ 40;
        memset(&v112.__match_.__matches_.__end_cap_, 0, 17);
        memset(&v112.__match_.__unmatched_.matched, 0, 17);
        v112.__match_.__prefix_.matched = 0;
        v112.__match_.__suffix_.first.__i_ = 0;
        memset(&v112, 0, 41);
        std::__wrap_iter<const char *>::iterator_type v56 = (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v99.__pregex_);
        if (SHIBYTE(v99.__pregex_) >= 0) {
          uint64_t v57 = (char *)&v99;
        }
        else {
          uint64_t v57 = (char *)v99.__begin_.__i_;
        }
        if (SHIBYTE(v99.__pregex_) < 0) {
          std::__wrap_iter<const char *>::iterator_type v56 = v99.__end_.__i_;
        }
        int v58 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v55, v57, (char *)&v56[(void)v57], (std::match_results<const char *> *)&v112, 0);
        std::__wrap_iter<const char *>::iterator_type v59 = (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v99.__pregex_);
        if (SHIBYTE(v99.__pregex_) >= 0) {
          uint64_t v60 = (uint64_t)&v99;
        }
        else {
          uint64_t v60 = (uint64_t)v99.__begin_.__i_;
        }
        if (SHIBYTE(v99.__pregex_) < 0) {
          std::__wrap_iter<const char *>::iterator_type v59 = v99.__end_.__i_;
        }
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(__p, v60, (std::sub_match<std::__wrap_iter<const char *>> *)&v59[v60], (uint64_t *)&v112, 0);
        if (v112.__begin_.__i_)
        {
          v112.__end_.__i_ = v112.__begin_.__i_;
          operator delete((void *)v112.__begin_.__i_);
        }
        if (v58)
        {
          int v61 = &v125.__begin_[v50];
          std::vector<std::string>::pointer v62 = v100.__end_;
          if (v100.__end_ >= v100.__end_cap_.__value_)
          {
            int v64 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v100, (long long *)v61);
          }
          else
          {
            if (SHIBYTE(v61->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v100.__end_, v125.__begin_[v50].__r_.__value_.__l.__data_, v125.__begin_[v50].__r_.__value_.__l.__size_);
            }
            else
            {
              long long v63 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
              v100.__end_->__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
            }
            int v64 = v62 + 1;
          }
          v100.__end_ = v64;
          char j = 1;
        }
        if (SHIBYTE(v99.__pregex_) < 0) {
          operator delete((void *)v99.__begin_.__i_);
        }
        ++v51;
        std::vector<std::string>::pointer v49 = v126.__begin_;
        ++v50;
      }
      while (0xAAAAAAAAAAAAAAABLL * (((char *)v126.__end_ - (char *)v126.__begin_) >> 3) > v51);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v99, ",");
  join((uint64_t *)&v100, (uint64_t)&v99, (std::string *)&v112);
  v129[0] = v112.__end_.__i_;
  CFIndex v66 = (char *)v112.__begin_.__i_;
  *(void *)((char *)v129 + 7) = *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v112.__end_.__i_ + 7);
  char v65 = HIBYTE(v112.__pregex_);
  HIBYTE(v112.__pregex_) = 0;
  LOBYTE(v112.__begin_.__i_) = 0;
  if ((SHIBYTE(v99.__pregex_) & 0x80000000) == 0)
  {
    if (j) {
      goto LABEL_154;
    }
LABEL_174:
    v112.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v100;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    goto LABEL_175;
  }
  operator delete((void *)v99.__begin_.__i_);
  if ((j & 1) == 0) {
    goto LABEL_174;
  }
LABEL_154:
  memset(&v99.__match_.__matches_.__end_cap_, 0, 17);
  memset(&v99.__match_.__unmatched_.matched, 0, 17);
  v99.__match_.__prefix_.matched = 0;
  v99.__match_.__suffix_.first.__i_ = 0;
  memset(&v99, 0, 41);
  __v.__first_ = this;
  long long v83 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[4].__r_.__value_.__l.__size_, (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (long long **)&__v);
  std::string::basic_string[abi:ne180100]<0>(&v112, "verbs");
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v112;
  long long v84 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v83 + 40), (unsigned __int8 *)&v112, (uint64_t)&std::piecewise_construct, (long long **)&__v);
  uint64_t v85 = *((void *)v84 + 5);
  uint64_t v86 = *((void *)v84 + 6);
  if (SHIBYTE(v112.__pregex_) < 0) {
    operator delete((void *)v112.__begin_.__i_);
  }
  if (v85 == v86)
  {
    if (v99.__begin_.__i_)
    {
      v99.__end_.__i_ = v99.__begin_.__i_;
      operator delete((void *)v99.__begin_.__i_);
    }
    v112.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v100;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    goto LABEL_179;
  }
  __v.__first_ = this;
  long long v87 = std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&this[2].__r_.__value_.__r.__words[2], (unsigned __int8 *)this, (uint64_t)&std::piecewise_construct, (long long **)&__v)+ 40;
  memset(&v112.__match_.__matches_.__end_cap_, 0, 17);
  memset(&v112.__match_.__unmatched_.matched, 0, 17);
  v112.__match_.__prefix_.matched = 0;
  v112.__match_.__suffix_.first.__i_ = 0;
  memset(&v112, 0, 41);
  std::string::size_type v88 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v89 = &v127;
  }
  else {
    int v89 = (std::string *)v127.__r_.__value_.__r.__words[0];
  }
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v88 = v127.__r_.__value_.__l.__size_;
  }
  char v90 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v87, (char *)v89, (char *)v89 + v88, (std::match_results<const char *> *)&v112, 0);
  std::string::size_type v91 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v92 = &v127;
  }
  else {
    int v92 = (std::string *)v127.__r_.__value_.__r.__words[0];
  }
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v91 = v127.__r_.__value_.__l.__size_;
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v99, (uint64_t)v92, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v92 + v91), (uint64_t *)&v112, 0);
  if (v112.__begin_.__i_)
  {
    v112.__end_.__i_ = v112.__begin_.__i_;
    operator delete((void *)v112.__begin_.__i_);
  }
  if (v99.__begin_.__i_)
  {
    v99.__end_.__i_ = v99.__begin_.__i_;
    operator delete((void *)v99.__begin_.__i_);
  }
  v112.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  if ((v90 & 1) == 0)
  {
LABEL_175:
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
    goto LABEL_180;
  }
LABEL_179:
  uint64_t v93 = v129[0];
  *(void *)a3 = v66;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v93;
  *(void *)(a3 + 15) = *(void *)((char *)v129 + 7);
  *(unsigned char *)(a3 + 23) = v65;
  v129[0] = 0;
  *(void *)((char *)v129 + 7) = 0;
  char v65 = 0;
  CFIndex v66 = 0;
LABEL_180:
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
  if (v111 < 0) {
    operator delete(v110);
  }
  if (*((void *)&v115 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v115 + 1));
  }
  std::locale::~locale(&v113.__loc_);
  if (*((void *)&v119 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
  }
  std::locale::~locale(&v117.__loc_);
  if (SHIBYTE(v122) < 0) {
    operator delete((void *)v121);
  }
  if (SHIBYTE(pregex) < 0)
  {
    operator delete((void *)v123);
    if ((v65 & 0x80) == 0) {
      goto LABEL_192;
    }
  }
  else if ((v65 & 0x80) == 0)
  {
    goto LABEL_192;
  }
  operator delete(v66);
LABEL_192:
  v112.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  v112.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v126;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
}

void sub_1A438E0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  STACK[0x200] = v58 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  STACK[0x200] = (unint64_t)&a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x310]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x350]);
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    operator delete((void *)STACK[0x390]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  STACK[0x200] = v58 - 240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  STACK[0x200] = v58 - 216;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  if (*(char *)(v58 - 169) < 0) {
    operator delete(*(void **)(v58 - 192));
  }
  _Unwind_Resume(a1);
}

void **std::pair<std::vector<std::string>,std::vector<std::string>>::~pair(void **a1)
{
  CFStringRef v3 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  CFStringRef v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  CFStringRef v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1A438E5FC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1A625B0A0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A625B0A0](a1 + 112);
  return a1;
}

void *std::match_results<std::__wrap_iter<char const*>>::str[abi:ne180100]@<X0>(void *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3) <= a2) {
    uint64_t v3 = (uint64_t)(result + 3);
  }
  else {
    uint64_t v3 = *result + 24 * a2;
  }
  if (*(unsigned char *)(v3 + 16)) {
    return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a3, *(char **)v3, *(char **)(v3 + 8), *(void *)(v3 + 8) - *(void *)v3);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++[abi:ne180100]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)(a1 + 12);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>((char *)(a2 + 32), *(long long **)(a1 + 32), *(long long **)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3));
  *(_OWORD *)(a2 + 8std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *(_OWORD *)(a1 + 120);
  *(void *)(a2 + 136) = *(void *)(a1 + 136);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  return std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++((std::regex_iterator<std::__wrap_iter<const char *>, char> *)a1);
}

void sub_1A438E818(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }

  std::locale::~locale(this);
}

void NLMessageIntentDomainDetector::getCandidateIntentTypes(std::string *a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v27 = *(std::string *)a2;
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v8 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v8 = (size_t)a3[1];
  }
  uint64_t v9 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v8 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = *a3;
    }
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + vstd::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 32;
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    long long v12 = (const std::string::value_type *)a2;
  }
  else {
    long long v12 = *(const std::string::value_type **)a2;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a2 + 8);
  }
  long long v14 = std::string::append(&v23, v12, v13);
  long long v15 = (void *)v14->__r_.__value_.__r.__words[0];
  int v16 = SHIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  CFStringRef CFStringFromString = createCFStringFromString((uint64_t)&v27);
  NLMessageIntentDomainDetector::hasPhotoSharingKeywords(a1, a2, (uint64_t)&__str);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v24, 0, sizeof(v24));
    int v25 = 1065353216;
    getUTF8StringFromCFString(kNLMessageIntentAttributeKeywordsKey, &v23);
    uint64_t v28 = &v23;
    int v19 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v24, (unsigned __int8 *)&v23, (uint64_t)&std::piecewise_construct, (long long **)&v28);
    std::string::operator=((std::string *)(v19 + 40), &__str);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v22, (uint64_t)v24);
    NLMessageIntentTypeWithMetadata::NLMessageIntentTypeWithMetadata(&v23, 1, (uint64_t)v22);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v22);
    uint64_t v20 = (_DWORD *)a4[1];
    if ((unint64_t)v20 >= a4[2])
    {
      uint64_t v21 = std::vector<NLMessageIntentTypeWithMetadata>::__push_back_slow_path<NLMessageIntentTypeWithMetadata const&>(a4, &v23);
    }
    else
    {
      *uint64_t v20 = v23.__r_.__value_.__l.__data_;
      std::unordered_map<std::string,std::string>::unordered_map((uint64_t)(v20 + 2), (uint64_t)&v23.__r_.__value_.__l.__size_);
      uint64_t v21 = (uint64_t)(v20 + 12);
      a4[1] = (uint64_t)(v20 + 12);
    }
    a4[1] = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v23.__r_.__value_.__l.__size_);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v24);
  }
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_35;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(v15);
LABEL_35:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_1A438EAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a24);
  if (a34 < 0) {
    operator delete(__p);
  }
  std::vector<NLMessageIntentTypeWithMetadata>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (v35 < 0) {
    operator delete(v34);
  }
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  _Unwind_Resume(a1);
}

os_log_t ___ZL41LogHandleForNLMessageIntentDomainDetectorv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.NLP", "NLMessageIntentDomainDetector");
  LogHandleForNLMessageIntentDomainDetector(void)::logHandle = (uint64_t)result;
  return result;
}

std::string *std::pair<std::vector<std::string>,std::vector<std::string>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::string>&,0>(std::string *a1, long long **a2, long long **a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return a1;
}

void sub_1A438EC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    os_log_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A438ECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  os_log_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  int v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      long long v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1A438EDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

char *std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    os_log_t result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1A438EEEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (std::__wrap_iter<const char *>::iterator_type i = *v14; i; std::__wrap_iter<const char *>::iterator_type i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  std::string v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *std::string v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  std::__wrap_iter<const char *>::iterator_type i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A438F18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  long long v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)long long v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0u;
  *((_DWORD *)v8 + 1std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A438F23C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<std::string>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (std::__wrap_iter<const char *>::iterator_type i = *v14; i; std::__wrap_iter<const char *>::iterator_type i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  std::string v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *std::string v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  std::__wrap_iter<const char *>::iterator_type i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A438F530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  long long v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1A438F5D4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    uint8x8_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint8x8_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  long long v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1A438F7AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1A438F7B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  unint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  CFStringRef v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<std::string>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *float v17 = 0;
  v17[1] = v10;
  float v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)float v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1A438FBA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::ostream_iterator<std::string,char,std::char_traits<char>>,0>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5 = result;
  uint64_t v8 = a3;
  uint64_t v9 = a4;
  if (result != a2)
  {
    do
    {
      double result = std::ostream_iterator<std::string,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v8, v5);
      v5 += 24;
    }
    while (v5 != a2);
    a3 = v8;
    a4 = v9;
    uint64_t v5 = a2;
  }
  *a5 = v5;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

uint64_t std::ostream_iterator<std::string,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v5 = v4;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, a2, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    size_t v7 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)a1, v6, v7);
  }
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A625AF40](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1A625AF50](v13);
  return a1;
}

void sub_1A438FDD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1A625AF50](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1A438FDB8);
}

void sub_1A438FE2C(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      unint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1A438FFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::assign[abi:ne180100]<std::__wrap_iter<char const*>,0>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::__wrap_iter<char const*>>(v4, a2, a3, a4);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::assign[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::locale::operator=((std::locale *)a1, (const std::locale *)a2);
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::__wrap_iter<char const*>>(std::regex_traits<char> *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v5[1].__loc_.__locale_) = a4;
  *(_OWORD *)((char *)&v5[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[1].__col_ + 4) = 0u;
  HIDWORD(v5[2].__ct_) = 0;
  std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>();
}

void sub_1A43900E8(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

void sub_1A43902C8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A4390340(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v2, a2);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    operator new();
  }
  while (v7 != (unsigned __int8 *)a3)
  {
    if (*v7 != 124) {
      return v7;
    }
    int v8 = a1->__end_;
    int v9 = v7 + 1;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, v7 + 1, a3);
    if (v9 == v7) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v8);
  }
  return (unsigned __int8 *)a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  long long v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(this, (char *)v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  int v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<char> *)v8;
    }
    int v9 = a1->__end_;
    unint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(v8 + 1), a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    int v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  uint64_t v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    int v8 = v7;
  }
  else {
    int v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
  while (1)
  {
    uint64_t v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    int v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      int v8 = v9;
    }
    else {
      int v8 = a3;
    }
    unint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  uint64_t v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    int v8 = v7;
  }
  else {
    int v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
  while (1)
  {
    uint64_t v11 = v8 == a3 ? v8 : (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3) {
      break;
    }
    int v9 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v9) {
      int v8 = v9;
    }
    else {
      int v8 = a3;
    }
    unint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A439093C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A43909D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x1A625B130);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  do
  {
    uint64_t v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, (char *)a2, a3);
  }
  while (v5 != a2);
  return v5;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  double result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    std::vector<std::string>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    int v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, a3);
    double result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        int v7 = a2[2];
        if (v7 == 33)
        {
          std::regex_traits<char>::regex_traits(&v14.__traits_);
          memset(&v14.__flags_, 0, 40);
          v14.__flags_ = this->__flags_;
          int v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v14, v3 + 3, a3);
          unsigned int marked_count = v14.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v14, 1, this->__marked_count_);
          this->__marked_count_ += marked_count;
          if (v8 == a3 || *v8 != 41) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          }
          goto LABEL_27;
        }
        if (v7 == 61)
        {
          std::regex_traits<char>::regex_traits(&v14.__traits_);
          memset(&v14.__flags_, 0, 40);
          v14.__flags_ = this->__flags_;
          int v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v14, v3 + 3, a3);
          unsigned int v9 = v14.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v14, 0, this->__marked_count_);
          this->__marked_count_ += v9;
          if (v8 == a3 || *v8 != 41) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          }
LABEL_27:
          uint64_t v3 = v8 + 1;
          std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v14.__traits_.__loc_);
          return v3;
        }
      }
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v11 = a2[1];
    if (v11 == 66)
    {
      BOOL v12 = 1;
    }
    else
    {
      if (v11 != 98) {
        return v3;
      }
      BOOL v12 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v12);
    v3 += 2;
  }
  return v3;
}

void sub_1A4390ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    int v6 = (char)*a2;
    if (v6 <= 62)
    {
      if (v6 != 40)
      {
        if (v6 == 46) {
          operator new();
        }
        if ((v6 - 42) >= 2) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
        }
LABEL_28:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      }
      int v8 = a2 + 1;
      if (a2 + 1 != (unsigned __int8 *)a3)
      {
        if (a2 + 2 != (unsigned __int8 *)a3 && *v8 == 63 && a2[2] == 58)
        {
          ++this->__open_count_;
          unsigned int v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 3, a3);
          if (v9 != a3 && *v9 == 41)
          {
            --this->__open_count_;
            return (unsigned __int8 *)(v9 + 1);
          }
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          unsigned int marked_count = this->__marked_count_;
          ++this->__open_count_;
          int v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, v8, a3);
          if (v11 != a3)
          {
            BOOL v12 = v11;
            if (*v11 == 41)
            {
              std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
              --this->__open_count_;
              return (unsigned __int8 *)(v12 + 1);
            }
          }
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if (v6 > 91)
    {
      if (v6 == 92) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, a2, (unsigned __int8 *)a3);
      }
      if (v6 == 123) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v6 == 91) {
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, a3);
      }
      if (v6 == 63) {
        goto LABEL_28;
      }
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      unint64_t v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        unint64_t v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    unint64_t v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    uint64_t v15 = a2 + 1;
    unint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a1, a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            unint64_t v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              unint64_t v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              float v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            float v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        unint64_t v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          unint64_t v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            unint64_t v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        size_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v10, v23, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            unint64_t v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                unint64_t v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            float v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    unint64_t v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      unint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  unint64_t v13 = a2;
  if (v12 == 43)
  {
    unint64_t v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      unint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void sub_1A4391610(_Unwind_Exception *a1)
{
  MEMORY[0x1A625B130](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A4391678(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF7CE298;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF7CE298;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_1EF7CE178;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EF7CE178;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EF7CE178;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x1A625B130);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::csub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
    std::__split_buffer<std::string>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *(void *)(a1 + 8);
  std::__split_buffer<std::string>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    uint64_t v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1A4391ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A4391FA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A4391FFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  int v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  void v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)int v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 1nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v13;
  uint64_t v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_1A439214C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      *(void *)(v7 - 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  int v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (void *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  CFStringRef value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      long long v15 = &v9[__n];
      std::vector<std::csub_match>::size_type v16 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v17 = __x->std::pair<const char *, const char *>;
        *(void *)&v9->matched = *(void *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    unint64_t v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    }
    else {
      long long v14 = 0;
    }
    std::vector<std::csub_match>::value_type v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    uint64_t v19 = &v18[__n];
    std::vector<std::csub_match>::size_type v20 = 24 * __n;
    char v21 = v18;
    do
    {
      std::pair<const char *, const char *> v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      *char v21 = v22;
      char v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    char v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    std::vector<std::string>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v26 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v18[-1].matched = *(void *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      std::vector<std::string>::pointer end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
    {
      operator delete(end);
    }
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1A43925A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1A4392618(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  unint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  double result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
  if (v5 == result)
  {
    double result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(a1, (char *)a2 + 1, (char *)a3);
    if (v5 == result)
    {
      double result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (v5 == result) {
        return a2;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    unint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint64_t v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      long long v8 = v5;
      unint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v5, a3, v7);
    }
    while (v8 != v5);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A43929C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1A625B130);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A4392B18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = *a2;
    unsigned int v5 = v4 - 48;
    if (v4 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return ++v3;
    }
    if ((v4 - 49) > 8) {
      return v3;
    }
    if (++v3 == a3)
    {
      uint64_t v3 = a3;
    }
    else
    {
      while (1)
      {
        int v6 = *v3;
        if ((v6 - 48) > 9) {
          break;
        }
        if (v5 >= 0x19999999) {
          goto LABEL_16;
        }
        ++v3;
        unsigned int v5 = v6 + 10 * v5 - 48;
        if (v3 == a3)
        {
          uint64_t v3 = a3;
          break;
        }
      }
      if (!v5) {
        goto LABEL_16;
      }
    }
    if (v5 <= a1->__marked_count_)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
      return v3;
    }
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      BOOL v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      BOOL v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100) {
      return v3;
    }
    BOOL v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    int v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      BOOL v6 = 1;
      goto LABEL_12;
    case 'S':
      BOOL v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      int v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      BOOL v5 = 1;
LABEL_15:
      unint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  int v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      char v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_61;
        case 'r':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_61;
        case 't':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_61;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_66;
          }
          int v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
            goto LABEL_66;
          }
          int v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_66;
          }
          int v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_24;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6) {
            goto LABEL_66;
          }
          char v11 = -87;
LABEL_24:
          char v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_66;
          }
          int v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_30;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6) {
            goto LABEL_66;
          }
          char v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_66;
          }
          int v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
            goto LABEL_35;
          }
          v14 |= 0x20u;
          if ((v14 - 97) >= 6) {
            goto LABEL_66;
          }
          char v15 = -87;
LABEL_35:
          std::string::value_type v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4) {
            std::string::operator=(a4, v16);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_47;
      }
      goto LABEL_61;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        uint64_t v7 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_52;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_61:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          uint64_t v7 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_52:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_61;
      }
LABEL_47:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          uint64_t v7 = a4;
          goto LABEL_52;
        }
        goto LABEL_61;
      }
LABEL_66:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_66;
    }
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65) {
      goto LABEL_66;
    }
    unsigned int v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v17 >= 0x5B && (v17 - 97) > 0x19u) {
      goto LABEL_66;
    }
    std::string::value_type v18 = v17 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v18);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1A43930E4(_Unwind_Exception *a1)
{
  MEMORY[0x1A625B130](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A439314C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EF7CE3E0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_1A4393324(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = (uint64_t)v1[1];
  if (v4) {
    std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF7CE3E0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF7CE3E0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        double result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF7CE470;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF7CE470;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF7CE2C8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF7CE2C8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        double result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF7CE3B0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF7CE3B0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      int v9 = *(unsigned __int8 **)(a2 + 16);
      uint64_t v10 = v6;
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v9++;
        if (v11 != v13) {
          break;
        }
        if (!--v10) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1A625B130);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        double result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (double result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v10;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v8[(void)v12];
        char v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          std::pair<const char *, const char *> v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      size_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v25[(void)v12];
        char v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          double v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  std::vector<std::csub_match>::size_type v20 = &v15[(void)v12];
  char v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    double v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v12;
  *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0u;
  *(_OWORD *)(a1 + 8std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 16std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 17nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_1A4394150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *unint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  unint64_t v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  unint64_t v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1A4394370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1A4394508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a4;
      }
      else {
        uint64_t v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1A4394630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A4394690(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
LABEL_38:
      uint64_t v6 = (uint64_t)v10;
      char v21 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  uint64_t v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = v19;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::locale v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          std::locale v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          std::locale v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    std::locale v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (uint64_t v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          unint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        unint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      unint64_t v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_40;
      }
LABEL_25:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    char v21 = 1;
    unint64_t v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    unint64_t v4 = v18;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if (v17 == 92)
    {
      if (v11) {
        uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v17) = *v17;
  }
  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v21 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v21) {
    return v4;
  }
  return (char *)v6;
}

void sub_1A43949F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  uint64_t v6 = a3 - 2;
  unint64_t v7 = a2;
  uint64_t v8 = a2;
  for (i = a2; ; uint64_t v8 = i)
  {
    int v10 = *i++;
    if (v10 == 61 && *i == 93) {
      break;
    }
    if (a2 == v6) {
      goto LABEL_33;
    }
    ++v7;
    --v6;
  }
  if (v8 == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, v7, (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    uint64_t v11 = v22;
    if (v22)
    {
      int v12 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v11 = v21;
  if (!v21) {
    goto LABEL_34;
  }
  int v12 = (char *)v20;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v12, &v12[v11], (uint64_t)__p);
  unint64_t v13 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v13 = (unint64_t)__p[1];
  }
  if (v13)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v14 = v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v14 = v21;
    }
    if (v14 == 2)
    {
      unint64_t v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0) {
        unint64_t v16 = (char *)v20;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      int v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0) {
        int v15 = (char *)v20;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v15);
    }
  }
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v22 < 0) {
    operator delete(v20);
  }
  return v7 + 2;
}

void sub_1A4394C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  unint64_t v7 = a2;
  for (i = a2; ; unint64_t v7 = i)
  {
    int v9 = *i++;
    if (v9 == 58 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_11;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v10 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  unint64_t v7 = a2;
  for (i = a2; ; unint64_t v7 = i)
  {
    int v9 = *i++;
    if (v9 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        unint64_t v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 16nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    std::string::value_type v9 = 0;
    unint64_t v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        uint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      uint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if (v4[23] < 0) {
          int v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        int v10 = v4;
        if (v4[23] < 0) {
          int v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        long long v13 = v3;
        if (v3[23] < 0) {
          long long v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if (a2[23] < 0) {
          unsigned __int8 v19 = *(char **)a2;
        }
        std::vector<std::csub_match>::size_type v20 = a2;
        if (a2[23] < 0) {
          std::vector<std::csub_match>::size_type v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        char v23 = a3;
        if (a3[23] < 0) {
          char v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string v26 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)uint64_t v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      char v30 = a2;
      if (a2[23] < 0) {
        char v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      char v32 = v4;
      if (v4[23] < 0) {
        char v32 = *(unsigned char **)v4;
      }
      *char v32 = v31;
      double v33 = v3;
      if (v3[23] < 0) {
        double v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      int v35 = v3;
      if (v3[23] < 0) {
        int v35 = *(unsigned char **)v3;
      }
      unsigned char *v35 = v34;
    }
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_1A43954F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    int v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        uint64_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        uint64_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        uint64_t v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }
  int v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  char v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v26;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A43957E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A439587C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    __int16 v8 = __p;
  }
  else {
    __int16 v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_1A4395948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      __int16 v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          unsigned __int8 v12 = operator new(v11);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned __int8 v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 64);
  unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unsigned __int8 v12 = operator new(v28);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  unint64_t v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    unsigned __int8 v12 = operator new(v18);
  }
  else {
    unsigned __int8 v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  unsigned __int8 v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A4395BF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A4395EA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A4395EF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1A625B130);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    uint64_t v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(void *)(v7 - std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v5;
      *(void *)uint64_t v7 = v5;
      *(unsigned char *)(v7 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *(void *)(result + 8);
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
  {
    uint64_t v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A625ADB0](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A4396080(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  std::vector<std::string>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  __int16 v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  uint64_t v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    uint64_t v9 = (uint64_t)v6;
    if (*a2 == 92) {
      uint64_t v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    }
    if ((char *)v9 == a2)
    {
      if (*a2 == 92)
      {
        BOOL v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, a2[1]);
        uint64_t v13 = 2;
        if (!v12) {
          uint64_t v13 = 0;
        }
        return &a2[v13];
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      unsigned int marked_count = a1->__marked_count_;
      size_t v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (uint64_t)a3);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      uint64_t v7 = v11 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      uint64_t v13 = a2 + 2;
      int v25 = 0;
      unint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 2, a3, &v25);
      if (v13 == v14) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        unint64_t v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          unint64_t v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            unint64_t v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          unint64_t v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
      return a2 + 1;
    }
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  unsigned int v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1A625B130);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3) {
    goto LABEL_12;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale_low == 40)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    BOOL v12 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v12 == a3 || (uint64_t v13 = v12, LOBYTE(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (locale_low != 94) {
    return (unsigned __int8 *)a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v14);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (char *)a2)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    uint64_t v5 = (locale_low - 36);
    if (v5 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0) {
      return v3;
    }
    if (v5 == 5)
    {
      if (a1->__open_count_) {
        return v3;
      }
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2) {
        return v3;
      }
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      int v5 = *v4;
      char v6 = *v4;
      BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (v7 && (v5 - 123) >= 3)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
        {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
        }
        else
        {
          BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
          uint64_t v10 = 2;
          if (!v9) {
            uint64_t v10 = 0;
          }
          v3 += v10;
        }
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
        v3 += 2;
      }
    }
  }
  return v3;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unsigned int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    size_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  char v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *char v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A4396D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unsigned int v8 = (char *)operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unsigned int v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::basic_regex<char,std::regex_traits<char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A4396E08(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::basic_regex<char,std::regex_traits<char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  std::regex_traits<char>::regex_traits((std::regex_traits<char> *)&this[1]);
  this[3].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_1A4396E84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::basic_regex<char,std::regex_traits<char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::basic_regex<char,std::regex_traits<char>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  std::vector<std::ssub_match>::pointer begin = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      float v17 = (void *)(v15 + v12 * 24);
      if (v16 <= v13) {
        float v18 = a4 + 3;
      }
      else {
        float v18 = v17;
      }
      begin[v12].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        BOOL v19 = a4 + 3;
      }
      else {
        BOOL v19 = (uint64_t *)(*a4 + v12 * 24);
      }
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + v19[1] - v10);
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        unint64_t v20 = a4 + 3;
      }
      else {
        unint64_t v20 = (uint64_t *)(*a4 + v12 * 24);
      }
      char v21 = *((unsigned char *)v20 + 16);
      std::vector<std::ssub_match>::pointer begin = a1->__begin_;
      std::vector<std::ssub_match>::pointer end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  char v23 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[4].__end_ = v23;
  }
  LOBYTE(a1[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)uint64_t v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    memset(v60, 0, 21);
    std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    long long v52 = a4;
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v63 + 1);
    uint64_t v21 = *((void *)&v61 + 1);
    unint64_t v22 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v23) + 32 * v24 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 8std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unint64_t v27 = v20 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v19)
          {
            uint64_t v53 = v38;
            std::deque<std::__state<char>>::pop_back(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          __int16 v39 = (void **)*((void *)&v61 + 1);
          uint64_t v40 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v40 = *((void *)&v61 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            long long v42 = (void *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v63 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  uint64_t v44 = (void *)v41[1];
                  ++v41;
                  long long v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v61 + 1);
              uint64_t v40 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v39;
              unint64_t v47 = v62 - (void)v39;
            }
            while ((void)v62 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v63 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v49 = *v52;
          *(void *)uint64_t v49 = v54;
          *(void *)(v49 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v54 + v53;
          uint64_t v50 = 1;
          *(unsigned char *)(v49 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)uint64_t v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v50 = 0;
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v61);
  return v50;
}

void sub_1A43975C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v54 = 0;
  char v55 = 0;
  v56[0] = 0;
  *(_DWORD *)unint64_t v51 = 0;
  memset(&v51[8], 0, 32);
  long long v52 = 0u;
  memset(v53, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)unint64_t v47 = 0;
    memset(&v47[8], 0, 48);
    *(_OWORD *)std::string __p = 0uLL;
    memset(v49, 0, 21);
    char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v47[32])
    {
      *(void *)&v47[40] = *(void *)&v47[32];
      operator delete(*(void **)&v47[32]);
    }
    long long v42 = a4;
    unint64_t v11 = v55;
    *((_DWORD *)v55 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 1nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = a2;
    *((void *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v55 - 40), *(unsigned int *)(a1 + 32));
    unint64_t v43 = a3;
    uint64_t v44 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = (const char *)(a3 - a2);
    uint64_t v15 = v55;
    *((void *)v55 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((unsigned char *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = (const char *)*((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v43) {
            goto LABEL_19;
          }
          char v27 = v12;
          uint64_t v28 = &v20[-*((void *)v15 - 11)];
          unint64_t v29 = v44;
          if ((v27 & ((uint64_t)v44 >= (uint64_t)v28)) == 0)
          {
            long long v30 = *(v15 - 5);
            *(_OWORD *)unint64_t v51 = *(_OWORD *)v19;
            *(_OWORD *)&v51[16] = v30;
            if (v51 != v19)
            {
              std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v51[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v53, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }
            uint64_t v31 = (void *)*v18;
            *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v15 - 11);
            v53[3] = v31;
            unint64_t v29 = v28;
          }
          char v32 = v55;
          if (v29 == v14)
          {
            uint64_t v33 = (uint64_t)v54;
            while (v32 != (void *)v33)
            {
              v32 -= 12;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, v32);
            }
            char v55 = (_OWORD *)v33;
            char v12 = 1;
            uint64_t v44 = v14;
          }
          else
          {
            uint64_t v44 = v29;
            unint64_t v34 = v55 - 6;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
            char v55 = v34;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v55 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
          char v55 = v21;
          break;
        case 0xFFFFFC20:
          long long v22 = *(v15 - 5);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v19;
          *(_OWORD *)&v47[16] = v22;
          memset(&v47[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v47[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v49[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          unint64_t v23 = (void *)*v18;
          *(void *)((char *)&v49[1] + 5) = *(void *)((char *)v15 - 11);
          v49[1] = v23;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v49[1] + 24))(v49[1], 0, v47);
          unint64_t v24 = v55;
          if ((unint64_t)v55 >= v56[0])
          {
            char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v47[16];
            *char v55 = *(_OWORD *)v47;
            v24[1] = v25;
            *((void *)v24 + 4) = 0;
            *((void *)v24 + 5) = 0;
            *((void *)v24 + 6) = 0;
            *((void *)v24 + 7) = 0;
            _OWORD v24[2] = *(_OWORD *)&v47[32];
            *((void *)v24 + 6) = *(void *)&v47[48];
            memset(&v47[32], 0, 24);
            *((void *)v24 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
            *((void *)v24 + 9) = 0;
            *(_OWORD *)((char *)v24 + 56) = *(_OWORD *)__p;
            *((void *)v24 + 9) = v49[0];
            __p[0] = 0;
            __p[1] = 0;
            v49[0] = 0;
            uint64_t v26 = v49[1];
            *(void *)((char *)v24 + 85) = *(void *)((char *)&v49[1] + 5);
            *((void *)v24 + 1nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v26;
            char v55 = v24 + 6;
          }
          if (*(void *)&v47[32])
          {
            *(void *)&v47[40] = *(void *)&v47[32];
            operator delete(*(void **)&v47[32]);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      uint64_t v15 = v55;
    }
    while (v54 != v55);
    if (v12)
    {
      uint64_t v35 = *v42;
      *(void *)uint64_t v35 = a2;
      *(void *)(v35 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = &v44[(void)a2];
      *(unsigned char *)(v35 + 16) = 1;
      if ((void)v52 != *(void *)&v51[32])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)&v51[32]) >> 3);
        uint64_t v37 = (unsigned char *)(*(void *)&v51[32] + 16);
        unsigned int v38 = 1;
        do
        {
          uint64_t v39 = v35 + 24 * v38;
          *(_OWORD *)uint64_t v39 = *((_OWORD *)v37 - 1);
          char v40 = *v37;
          v37 += 24;
          *(unsigned char *)(v39 + 16) = v40;
          BOOL v16 = v36 > v38++;
        }
        while (v16);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (*(void *)&v51[32])
  {
    *(void *)&long long v52 = *(void *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }
  *(void *)unint64_t v51 = &v54;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  return v6;
}

void sub_1A4397B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a17);
  std::__state<char>::~__state(&a33);
  a33 = v33 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(v8 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(void *a1)
{
  unsigned int v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;

  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(v7 - 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1A43F73A0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::__wrap_iter<const char *>::iterator_type v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1A4398158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      char v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>(v7, v11);
      unint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      __int16 v41 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLTransliterationCandidate *>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              unint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      unint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &__p);
        unint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1A4398958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  *uint64_t v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          void v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      uint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = std::vector<std::string>::__vallocate[abi:ne180100](a1, v12);
    int64_t v15 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  *uint64_t v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  void *v13 = &v17[(void)v12];
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  CFStringRef value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      uint64_t v13 = &v7[__n];
      std::vector<std::ssub_match>::size_type v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int64_t v15 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v8];
    long long v16 = &v15[__n];
    std::vector<std::ssub_match>::size_type v17 = 24 * __n;
    int64_t v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    unint64_t v19 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v11];
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::vector<std::ssub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v15[-1].matched = *(void *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    std::string __p = 0;
    size_t v19 = 0;
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v15, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v17);
    unint64_t v5 = v15;
    size_t v4 = v16;
  }
  else
  {
    size_t v4 = 0;
    unint64_t v5 = 0;
    unsigned int v3 = 0;
    int64_t v15 = 0;
    size_t v16 = 0;
    uint64_t v17 = 0;
  }
  char v6 = HIBYTE(v20);
  if (v20 >= 0) {
    size_t v7 = HIBYTE(v20);
  }
  else {
    size_t v7 = v19;
  }
  if (v20 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    unint64_t v10 = (void **)&v15;
  }
  else {
    unint64_t v10 = v5;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  unsigned int v13 = v9 < v7;
  if (v7 < v9) {
    unsigned int v13 = -1;
  }
  if (v12) {
    return v12;
  }
  else {
    return v13;
  }
}

void sub_1A43990E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  int i = (int)p_match[-1].__position_start_.__i_;
  unsigned __int32 flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin) {
    p_unmatched = &p_match->__unmatched_;
  }
  else {
    p_unmatched = begin;
  }
  size_t v7 = (char *)p_unmatched->second.__i_;
  if (p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    size_t v9 = (char *)this->__end_.__i_;
    pregex = this->__pregex_;
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    char v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, &__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v9, (uint64_t *)&__p, (flags & 0x800) != 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v10 & 1) == 0)
    {
      std::vector<std::ssub_match>::pointer begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                   + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  size_t v11 = (char *)this->__end_.__i_;
  if (v11 == v7) {
    goto LABEL_14;
  }
  unsigned int v12 = this->__pregex_;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  char v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v12, v7, v11, &__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v11, (uint64_t *)&__p, 1);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v13 & 1) == 0)
  {
    ++v7;
    unsigned __int32 flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1A43992A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<NLMessageIntentTypeWithMetadata>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    size_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 48;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(v4 - 40));
        size_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    std::vector<std::ssub_match>::size_type v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *uint64_t v17 = 0;
  v17[1] = v10;
  int64_t v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)int64_t v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  int i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1A43995DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<NLMessageIntentTypeWithMetadata>::__push_back_slow_path<NLMessageIntentTypeWithMetadata const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[48 * v4];
  v14[0] = v10;
  v14[1] = v11;
  int64_t v15 = v11;
  unint64_t v16 = &v10[48 * v9];
  *(_DWORD *)unint64_t v11 = *a2;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 48;
  std::vector<NLMessageIntentTypeWithMetadata>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<NLMessageIntentTypeWithMetadata>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1A43996F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<NLMessageIntentTypeWithMetadata>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<NLMessageIntentTypeWithMetadata>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    int v7 = *(_DWORD *)(v4 - 48);
    v4 -= 48;
    *(_DWORD *)(v6 - 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v7;
    v6 -= 48;
    int64x2_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(v6 + 8, (uint64_t *)(v4 + 8));
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)int64x2_t result = v2;
  *(void *)(result + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__split_buffer<NLMessageIntentTypeWithMetadata>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void NLGujaratiWordLanguageModeler::NLGujaratiWordLanguageModeler(NLGujaratiWordLanguageModeler *this, CFDictionaryRef theDict)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EF7CDA20;
  if (CFDictionaryGetValue(theDict, @"useLanguageModel") == (const void *)*MEMORY[0x1E4F1CFD0]) {
    NLGujaratiWordLanguageModeler::loadLanguageModel(this, theDict);
  }
  else {
    void *v4 = 0;
  }
}

void sub_1A43998EC(_Unwind_Exception *a1)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(v1);
  _Unwind_Resume(a1);
}

void NLGujaratiWordLanguageModeler::loadLanguageModel(NLGujaratiWordLanguageModeler *this, CFDictionaryRef theDict)
{
  if (theDict) {
    MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  }
  else {
    MutableCFStringRef Copy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  uint64_t v4 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F72358], (const void *)*MEMORY[0x1E4F1CFD0]);
  uint64_t valuePtr = 0x3FD0000000000000;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F72390], v5);
  CFRelease(v5);
  uint64_t v9 = 1;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &v9);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F72398], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F723A8], v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F723A0], v6);
  CFRelease(v6);
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F723C8], @"gu");
  *((void *)this + 1) = LMLanguageModelCreate();
  CFRelease(v4);
  if (!*((void *)this + 1))
  {
    uint64_t v8 = NL::CFLogger::sharedInstance(v7);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v8 + 16))(v8, 3, "Could not locate Gujarati language model");
  }
}

void NLGujaratiWordLanguageModeler::removeDiacritics(uint64_t a1@<X1>, char a2@<W2>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "ઁ");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "ં");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "઼");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(v7[0]);
    if (a2) {
      goto LABEL_22;
    }
  }
  else if (a2)
  {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "્");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
LABEL_22:
  std::string::basic_string[abi:ne180100]<0>(v7, "ઃ");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  replaceAll(a3, (char *)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1A4399C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void NLGujaratiWordLanguageModeler::~NLGujaratiWordLanguageModeler(NLGujaratiWordLanguageModeler *this)
{
  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);

  JUMPOUT(0x1A625B130);
}

uint64_t NLCommons::isVowel(NLCommons *this, int8x16_t a2)
{
  a2.i32[0] = this & 0xFFFFFFFB;
  a2.i8[1] = (char)this;
  a2.i8[8] = this & 0xFB;
  a2.i8[9] = (char)this;
  return vmaxv_u8((uint8x8_t)vceq_s8(vqtbl1_s8(a2, (int8x8_t)0x101010001010100), (int8x8_t)0x554F4941756F6961)) & 1;
}

uint64_t NLCommons::isConsonant(NLCommons *this)
{
  return ((this - 66) < 0x39) & (0x1F7DF7701F7DF77uLL >> (this - 66));
}

BOOL NLCommons::isPunct(const std::string *a1)
{
  return !std::string::compare(a1, ",")
      || !std::string::compare(a1, ",")
      || !std::string::compare(a1, ";")
      || !std::string::compare(a1, ":")
      || !std::string::compare(a1, "{")
      || !std::string::compare(a1, "}")
      || !std::string::compare(a1, "[")
      || !std::string::compare(a1, "]")
      || !std::string::compare(a1, "<")
      || !std::string::compare(a1, ">")
      || !std::string::compare(a1, "'")
      || !std::string::compare(a1, "\"")
      || !std::string::compare(a1, "/")
      || !std::string::compare(a1, "\\"")
      || !std::string::compare(a1, "~")
      || !std::string::compare(a1, "!")
      || !std::string::compare(a1, "@")
      || !std::string::compare(a1, "#")
      || !std::string::compare(a1, "$")
      || !std::string::compare(a1, "%")
      || !std::string::compare(a1, "^")
      || !std::string::compare(a1, "&")
      || !std::string::compare(a1, "*")
      || !std::string::compare(a1, ")")
      || !std::string::compare(a1, "(")
      || !std::string::compare(a1, "-")
      || !std::string::compare(a1, "_")
      || !std::string::compare(a1, "+")
      || !std::string::compare(a1, "=")
      || !std::string::compare(a1, "|")
      || !std::string::compare(a1, ".")
      || std::string::compare(a1, "?") == 0;
}

uint64_t NLCommons::isPunct(NLCommons *this, int8x16_t a2)
{
  a2.i32[0] = this & 0xFFFFFFFE;
  a2.i8[1] = (char)this;
  a2.i8[6] = this & 0xFD;
  uint8x16_t v2 = (uint8x16_t)vceqq_s8(vqtbl1q_s8(a2, (int8x16_t)xmmword_1A43F7870), (int8x16_t)xmmword_1A43F7880);
  v2.i8[0] = vmaxvq_u8(v2);
  __int32 v3 = v2.i32[0];
  *(int8x8_t *)v2.i8 = vceq_s8(vdup_n_s8(this), (int8x8_t)0x3F2E7C3D2B5F2D26);
  v2.i8[0] = vmaxv_u8(*(uint8x8_t *)v2.i8);
  return (v3 | v2.i32[0]) & 1 | ((this - 35) < 3) | ((this - 40) < 3);
}

uint64_t NLCommons::isNumeric(unsigned __int8 *a1)
{
  uint64_t v1 = a1[23];
  if ((v1 & 0x80u) == 0) {
    uint8x16_t v2 = a1;
  }
  else {
    uint8x16_t v2 = *(unsigned __int8 **)a1;
  }
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (!v1) {
    return 1;
  }
  while (((char)*v2 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *v2 + 60) & 0x400) != 0)
  {
    ++v2;
    if (!--v1) {
      return 1;
    }
  }
  return 0;
}

uint64_t NLCommons::isNonAlphaNumericStr(char *a1, int8x16_t a2)
{
  int v2 = a1[23];
  if (v2 >= 0) {
    __int32 v3 = a1;
  }
  else {
    __int32 v3 = *(char **)a1;
  }
  if (v2 >= 0) {
    uint64_t v4 = a1[23];
  }
  else {
    uint64_t v4 = *((void *)a1 + 1);
  }
  if (!v4) {
    return 0;
  }
  uint64_t v5 = MEMORY[0x1E4F14390];
  while (1)
  {
    char v6 = (NLCommons *)*v3;
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x500) == 0) {
      goto LABEL_13;
    }
LABEL_14:
    ++v3;
    if (!--v4) {
      return 0;
    }
  }
  if (__maskrune(*v3, 0x500uLL)) {
    goto LABEL_14;
  }
LABEL_13:
  if (NLCommons::isPunct(v6, a2)) {
    goto LABEL_14;
  }
  return 1;
}

uint64_t NLCommons::min(uint64_t this, uint64_t a2)
{
  if (a2 < this) {
    return a2;
  }
  return this;
}

uint64_t *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x1E4FBA488] + 104;
  a1[16] = MEMORY[0x1E4FBA488] + 104;
  unint64_t v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x1E4FBA488] + 64;
  a1[2] = MEMORY[0x1E4FBA488] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  uint64_t v10 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - 24)) = v11;
  a1[1] = 0;
  unint64_t v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x1E4FBA488] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - 24)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - 24)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  std::stringbuf::basic_stringbuf[abi:ne180100](v9, a2, a3);
  return a1;
}

void sub_1A439A480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A625B0A0](a1 + 128);
  return a1;
}

uint64_t NLCommons::split@<X0>(const std::string *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v13, a1, 24);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (uint64_t)__p, a2);
    if ((*((unsigned char *)v5 + *(void *)(*v5 - 24) + 32) & 5) != 0) {
      break;
    }
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v7 = *(_OWORD *)__p;
        *(void *)(v6 + 16) = v12;
        *(_OWORD *)unint64_t v6 = v7;
      }
      uint64_t v8 = v6 + 24;
      a3[1] = v6 + 24;
    }
    a3[1] = v8;
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  v13[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v13[2] = v9;
  void v13[3] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A625B0A0](&v15);
}

void sub_1A439A7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

std::string *NLCommons::trim(std::string *this)
{
  uint64_t v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  int v3 = (char)v2;
  uint64_t v4 = (char *)this + v2;
  if (v3 >= 0) {
    std::string::size_type v5 = (std::string::size_type)v4;
  }
  else {
    std::string::size_type v5 = this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_;
  }
  if (v3 >= 0) {
    unint64_t v6 = this;
  }
  else {
    unint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  uint64_t v7 = MEMORY[0x1E4F14390];
  while ((std::string *)v5 != v6)
  {
    unsigned int v9 = *(char *)--v5;
    unsigned int v8 = v9;
    if ((v9 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x4000uLL))
      {
LABEL_13:
        unint64_t v6 = (std::string *)(v5 + 1);
        break;
      }
    }
    else if ((*(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000) == 0)
    {
      goto LABEL_13;
    }
  }
  uint64_t v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  int v11 = (char)v10;
  uint64_t v12 = (char *)this + v10;
  if (v11 >= 0)
  {
    unint64_t v13 = this;
  }
  else
  {
    uint64_t v12 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    unint64_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  std::string::erase(this, (char *)v6 - (char *)v13, v12 - (char *)v6);
  int v14 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  std::string::size_type v15 = this->__r_.__value_.__r.__words[0];
  if (v14 >= 0) {
    uint64_t v16 = this;
  }
  else {
    uint64_t v16 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v14 >= 0) {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int64_t v18 = (std::string *)((char *)v16 + size);
    long long v19 = v16;
    do
    {
      unsigned int v20 = v19->__r_.__value_.__s.__data_[0];
      if ((v20 & 0x80000000) != 0)
      {
        if (!__maskrune(v20, 0x4000uLL)) {
          goto LABEL_31;
        }
      }
      else if ((*(_DWORD *)(v7 + 4 * v20 + 60) & 0x4000) == 0)
      {
        goto LABEL_31;
      }
      long long v19 = (std::string *)((char *)v19 + 1);
      --size;
    }
    while (size);
    long long v19 = v18;
LABEL_31:
    LOBYTE(v14) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    std::string::size_type v15 = this->__r_.__value_.__r.__words[0];
  }
  else
  {
    long long v19 = v16;
  }
  if ((v14 & 0x80u) == 0) {
    float v21 = this;
  }
  else {
    float v21 = (std::string *)v15;
  }
  std::string::erase(this, (char *)v16 - (char *)v21, (char *)v19 - (char *)v16);
  return this;
}

void NLCommons::normalize(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 23) >= 0) {
    int v3 = (const char *)a1;
  }
  else {
    int v3 = *(const char **)a1;
  }
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, 0x8000100u);
  if (v4)
  {
    CFStringRef v5 = v4;
    MutableCFStringRef Copy = CFStringCreateMutableCopy(0, 0, v4);
    CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
    getUTF8StringFromCFString(MutableCopy, a2);
    CFRelease(v5);
    CFRelease(MutableCopy);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1A439AA34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL NLCommons::isAbbreviation(unsigned char *a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  if ((char)a1[23] >= 0) {
    uint64_t v1 = a1;
  }
  char v2 = *v1;
  if (!*v1) {
    return 1;
  }
  int v3 = v1 + 1;
  uint64_t v4 = MEMORY[0x1E4F14390];
  do
  {
    if (v2 < 0) {
      int v5 = __maskrune(v2, 0x8000uLL);
    }
    else {
      int v5 = *(_DWORD *)(v4 + 4 * v2 + 60) & 0x8000;
    }
    BOOL result = v5 != 0;
    if (!v5) {
      break;
    }
    int v7 = *v3++;
    char v2 = v7;
  }
  while (v7);
  return result;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1A439AB4C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  char v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v4;
    *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v4;
      }
      if (v5) {
        *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = (char *)v4 + v5;
      }
    }
  }
}

void NLBengaliOrthographyChecker::NLBengaliOrthographyChecker(NLBengaliOrthographyChecker *this)
{
  *(void *)this = &unk_1EF7CD7C8;
  *((void *)this + 1) = @"‍";
  *((void *)this + 2) = @"়";
  *((void *)this + 3) = @"্";
  *((void *)this + 4) = @"ঃ";
  *((void *)this + 5) = @"ং";
  *((void *)this + 6) = @"ঁ";
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, *((CFStringRef *)this + 2));
  CFStringAppend(Mutable, *((CFStringRef *)this + 3));
  CFStringAppend(Mutable, *((CFStringRef *)this + 4));
  CFStringAppend(Mutable, *((CFStringRef *)this + 5));
  CFStringAppend(Mutable, *((CFStringRef *)this + 6));
  CFStringAppend(Mutable, @"া");
  CFStringAppend(Mutable, @"ি");
  CFStringAppend(Mutable, @"ী");
  CFStringAppend(Mutable, @"ু");
  CFStringAppend(Mutable, @"ূ");
  CFStringAppend(Mutable, @"ৃ");
  CFStringAppend(Mutable, @"ে");
  CFStringAppend(Mutable, @"ৈ");
  CFStringAppend(Mutable, @"ো");
  CFStringAppend(Mutable, @"ৌ");
  *((void *)this + 7) = CFCharacterSetCreateWithCharactersInString(0, Mutable);
  CFRelease(Mutable);
  CFMutableStringRef v3 = CFStringCreateMutable(0, 0);
  CFStringAppend(v3, @"ক");
  CFStringAppend(v3, @"খ");
  CFStringAppend(v3, @"গ");
  CFStringAppend(v3, @"ঘ");
  CFStringAppend(v3, @"ঙ");
  CFStringAppend(v3, @"চ");
  CFStringAppend(v3, @"ছ");
  CFStringAppend(v3, @"জ");
  CFStringAppend(v3, @"ঝ");
  CFStringAppend(v3, @"ঞ");
  CFStringAppend(v3, @"ট");
  CFStringAppend(v3, @"ঠ");
  CFStringAppend(v3, @"ড");
  CFStringAppend(v3, @"ঢ");
  CFStringAppend(v3, @"ণ");
  CFStringAppend(v3, @"ত");
  CFStringAppend(v3, @"থ");
  CFStringAppend(v3, @"দ");
  CFStringAppend(v3, @"ধ");
  CFStringAppend(v3, @"ন");
  CFStringAppend(v3, @"প");
  CFStringAppend(v3, @"ফ");
  CFStringAppend(v3, @"ব");
  CFStringAppend(v3, @"ভ");
  CFStringAppend(v3, @"ম");
  CFStringAppend(v3, @"য");
  CFStringAppend(v3, @"র");
  CFStringAppend(v3, @"ল");
  CFStringAppend(v3, @"শ");
  CFStringAppend(v3, @"ষ");
  CFStringAppend(v3, @"স");
  CFStringAppend(v3, @"হ");
  CFStringAppend(v3, @"ৎ");
  CFStringAppend(v3, @"ড়");
  CFStringAppend(v3, @"ঢ়");
  CFStringAppend(v3, @"য়");
  *((void *)this + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = CFCharacterSetCreateWithCharactersInString(0, v3);
  CFRelease(v3);
  CFMutableStringRef v4 = CFStringCreateMutable(0, 0);
  CFStringAppend(v4, @"অ");
  CFStringAppend(v4, @"আ");
  CFStringAppend(v4, @"ই");
  CFStringAppend(v4, @"ঈ");
  CFStringAppend(v4, @"উ");
  CFStringAppend(v4, @"ঊ");
  CFStringAppend(v4, @"ঋ");
  CFStringAppend(v4, @"এ");
  CFStringAppend(v4, @"ঐ");
  CFStringAppend(v4, @"ও");
  CFStringAppend(v4, @"ঔ");
  *((void *)this + 9) = CFCharacterSetCreateWithCharactersInString(0, v4);
  CFRelease(v4);
  MutableCFStringRef Copy = CFCharacterSetCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *((CFCharacterSetRef *)this + 9));
  CFCharacterSetUnion(MutableCopy, *((CFCharacterSetRef *)this + 8));
  CFCharacterSetUnion(MutableCopy, *((CFCharacterSetRef *)this + 7));
  *((void *)this + 1nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = CFCharacterSetCreateInvertedSet(0, MutableCopy);
  CFRelease(MutableCopy);
}

void sub_1A439B17C(_Unwind_Exception *a1)
{
  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v1);
  _Unwind_Resume(a1);
}

void NLBengaliOrthographyChecker::~NLBengaliOrthographyChecker(CFTypeRef *this)
{
  *this = &unk_1EF7CD7C8;
  CFRelease(this[7]);
  CFRelease(this[8]);
  CFRelease(this[9]);
  CFRelease(this[10]);

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)this);
}

{
  uint64_t vars8;

  NLBengaliOrthographyChecker::~NLBengaliOrthographyChecker(this);

  JUMPOUT(0x1A625B130);
}

BOOL NLBengaliOrthographyChecker::isVowelSign(NLBengaliOrthographyChecker *this, const __CFString *a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, @"া");
  CFStringAppend(Mutable, @"ি");
  CFStringAppend(Mutable, @"ী");
  CFStringAppend(Mutable, @"ু");
  CFStringAppend(Mutable, @"ূ");
  CFStringAppend(Mutable, @"ৃ");
  CFStringAppend(Mutable, @"ে");
  CFStringAppend(Mutable, @"ৈ");
  CFStringAppend(Mutable, @"ো");
  CFStringAppend(Mutable, @"ৌ");
  CFCharacterSetRef v4 = CFCharacterSetCreateWithCharactersInString(0, Mutable);
  CFCharacterSetRef InvertedSet = CFCharacterSetCreateInvertedSet(0, v4);
  CFRelease(Mutable);
  CFRelease(v4);
  v8.CFIndex length = CFStringGetLength(a2);
  v8.CFIndex location = 0;
  BOOL v6 = CFStringFindCharacterFromSet(a2, InvertedSet, v8, 0, 0) == 0;
  CFRelease(InvertedSet);
  return v6;
}

BOOL NLBengaliOrthographyChecker::canNuktaFollowLetter(NLBengaliOrthographyChecker *this, const __CFString *a2)
{
  CFCharacterSetRef v3 = CFCharacterSetCreateWithCharactersInString(0, @"ডঢয");
  CFCharacterSetRef InvertedSet = CFCharacterSetCreateInvertedSet(0, v3);
  CFRelease(@"ডঢয");
  CFRelease(v3);
  v7.CFIndex length = CFStringGetLength(a2);
  v7.CFIndex location = 0;
  BOOL v5 = CFStringFindCharacterFromSet(a2, InvertedSet, v7, 0, 0) == 0;
  CFRelease(InvertedSet);
  return v5;
}

BOOL NLBengaliOrthographyChecker::canViramaFollowLetter(CFStringRef *this, CFStringRef theString1)
{
  if (CFEqual(theString1, @"অ")
    || CFEqual(theString1, @"এ")
    || CFEqual(theString1, this[2]))
  {
    return 1;
  }
  CFCharacterSetRef v4 = (const __CFCharacterSet *)this[8];
  UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString1, 0);
  return CFCharacterSetIsCharacterMember(v4, CharacterAtIndex) != 0;
}

BOOL NLBengaliOrthographyChecker::canViramaPrecedeLetter(NLBengaliOrthographyChecker *this, CFStringRef theString)
{
  CFCharacterSetRef v4 = (const __CFCharacterSet *)*((void *)this + 8);
  UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString, 0);
  return CFCharacterSetIsCharacterMember(v4, CharacterAtIndex)
      || CFEqual(theString, *((CFStringRef *)this + 1));
}

BOOL NLBengaliOrthographyChecker::checkSpelling(NLBengaliOrthographyChecker *this, CFStringRef theString, const __CFString **a3, const __CFString **a4)
{
  CFIndex Length = CFStringGetLength(theString);
  CFRange result = (CFRange)xmmword_1A43F6B90;
  v34.CFIndex location = 0;
  v34.CFIndex length = Length;
  if (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 7), v34, 0, &result))
  {
    CFIndex v8 = 0;
    CFIndex location = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      if (!result.location) {
        goto LABEL_59;
      }
      if (location != 0x7FFFFFFFFFFFFFFFLL && result.location == v8 + location)
      {
        v35.CFIndex location = location;
        v35.CFIndex length = v8;
        CFStringRef v10 = CFStringCreateWithSubstring(0, theString, v35);
        CFStringRef v11 = CFStringCreateWithSubstring(0, theString, result);
        if ((CFStringCompare(v10, *((CFStringRef *)this + 2), 0)
           || CFEqual(v11, *((CFStringRef *)this + 2)))
          && (CFStringCompare(v11, *((CFStringRef *)this + 5), 0)
           || !NLBengaliOrthographyChecker::isVowelSign(0, v10))
          && (CFStringCompare(v11, *((CFStringRef *)this + 6), 0)
           || !NLBengaliOrthographyChecker::isVowelSign(0, v10))
          && (CFStringCompare(v11, *((CFStringRef *)this + 4), 0)
           || !NLBengaliOrthographyChecker::isVowelSign(0, v10)))
        {
          if (v10) {
            CFRelease(v10);
          }
          if (v11) {
            CFRelease(v11);
          }
LABEL_59:
          BOOL v29 = 0;
          CFStringRef v31 = @"illegal diacritic placement";
          if (!a4) {
            goto LABEL_72;
          }
          goto LABEL_70;
        }
        if (v10) {
          CFRelease(v10);
        }
        if (v11) {
          CFRelease(v11);
        }
      }
      CFIndex location = result.location;
      CFIndex v8 = result.length;
      v36.CFIndex location = result.length + result.location;
      v36.CFIndex length = Length - (result.length + result.location);
    }
    while (CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 7), v36, 0, &result));
  }
  CFRange result = (CFRange)xmmword_1A43F6B90;
  CFStringRef v12 = (const __CFString *)*((void *)this + 2);
  CFStringRef v13 = theString;
  v14.CFIndex location = 0;
  v14.CFIndex length = Length;
  while (CFStringFindWithOptions(v13, v12, v14, 0, &result))
  {
    if (!result.location) {
      goto LABEL_53;
    }
    v37.CFIndex location = result.location - 1;
    v37.CFIndex length = 1;
    std::string::size_type v15 = (__CFString *)CFStringCreateWithSubstring(0, theString, v37);
    if (!NLBengaliOrthographyChecker::canNuktaFollowLetter((NLBengaliOrthographyChecker *)v15, v15))
    {
      if (v15) {
        CFRelease(v15);
      }
LABEL_53:
      BOOL v29 = 0;
      CFStringRef v31 = @"illegal nukta placement";
      if (!a4) {
        goto LABEL_72;
      }
LABEL_70:
      if (v29) {
        goto LABEL_72;
      }
      *a4 = v31;
      return v29;
    }
    if (v15) {
      CFRelease(v15);
    }
    v14.CFIndex location = result.length + result.location;
    v14.CFIndex length = Length - (result.length + result.location);
    CFStringRef v12 = (const __CFString *)*((void *)this + 2);
    CFStringRef v13 = theString;
  }
  CFRange result = (CFRange)xmmword_1A43F6B90;
  CFStringRef v16 = (const __CFString *)*((void *)this + 3);
  CFStringRef v17 = theString;
  v18.CFIndex location = 0;
  v18.CFIndex length = Length;
  while (1)
  {
    if (!CFStringFindWithOptions(v17, v16, v18, 0, &result))
    {
      CFCharacterSetRef v22 = CFCharacterSetCreateWithCharactersInString(0, @"ঁং্");
      CFIndex v23 = CFStringGetLength(theString);
      CFCharacterSetRef v24 = (const __CFCharacterSet *)*((void *)this + 9);
      CFStringRef v25 = theString;
      v26.CFIndex location = 0;
      v26.CFIndex length = v23;
      while (1)
      {
        if (!CFStringFindCharacterFromSet(v25, v24, v26, 0, &result))
        {
          CFRelease(v22);
          v40.CFIndex length = CFStringGetLength(theString);
          v40.CFIndex location = 0;
          int CharacterFromSet = CFStringFindCharacterFromSet(theString, *((CFCharacterSetRef *)this + 10), v40, 0, &result);
          BOOL v29 = CharacterFromSet == 0;
          if (CharacterFromSet)
          {
            CFStringRef v30 = CFStringCreateWithSubstring(0, theString, result);
            CFStringRef v31 = CFStringCreateWithFormat(0, 0, @"invalid letter '%@'", v30);
            CFRelease(v30);
            if (a4) {
              goto LABEL_70;
            }
          }
          else
          {
            CFStringRef v31 = 0;
            if (a4) {
              goto LABEL_70;
            }
          }
          goto LABEL_72;
        }
        if (result.location + 1 < v23)
        {
          UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString, result.location + 1);
          if (CFCharacterSetIsCharacterMember(*((CFCharacterSetRef *)this + 7), CharacterAtIndex))
          {
            if (!CFCharacterSetIsCharacterMember(v22, CharacterAtIndex)) {
              break;
            }
          }
        }
        v26.CFIndex location = result.length + result.location;
        CFCharacterSetRef v24 = (const __CFCharacterSet *)*((void *)this + 9);
        v26.CFIndex length = v23 - (result.length + result.location);
        CFStringRef v25 = theString;
      }
      CFRelease(v22);
      BOOL v29 = 0;
      CFStringRef v31 = @"illegal diacritic after vowel letter";
      if (!a4) {
        goto LABEL_72;
      }
      goto LABEL_70;
    }
    if (!result.location) {
      break;
    }
    v38.CFIndex location = result.location - 1;
    v38.CFIndex length = 1;
    CFStringRef v19 = CFStringCreateWithSubstring(0, theString, v38);
    if (result.location + 1 >= Length)
    {
      CFStringRef v20 = 0;
      if (!NLBengaliOrthographyChecker::canViramaFollowLetter((CFStringRef *)this, v19))
      {
LABEL_61:
        if (v19) {
          CFRelease(v19);
        }
        if (v20) {
          CFRelease(v20);
        }
        break;
      }
LABEL_37:
      char v21 = 1;
      if (!v19) {
        goto LABEL_39;
      }
LABEL_38:
      CFRelease(v19);
      goto LABEL_39;
    }
    v39.CFIndex length = 1;
    v39.CFIndex location = result.location + 1;
    CFStringRef v20 = CFStringCreateWithSubstring(0, theString, v39);
    if (!NLBengaliOrthographyChecker::canViramaFollowLetter((CFStringRef *)this, v19)) {
      goto LABEL_61;
    }
    if (!v20) {
      goto LABEL_37;
    }
    if (!NLBengaliOrthographyChecker::canViramaPrecedeLetter(this, v20)) {
      goto LABEL_61;
    }
    char v21 = 0;
    if (v19) {
      goto LABEL_38;
    }
LABEL_39:
    if ((v21 & 1) == 0) {
      CFRelease(v20);
    }
    v18.CFIndex location = result.length + result.location;
    v18.CFIndex length = Length - (result.length + result.location);
    CFStringRef v16 = (const __CFString *)*((void *)this + 3);
    CFStringRef v17 = theString;
  }
  BOOL v29 = 0;
  CFStringRef v31 = @"illegal virama placement";
  if (a4) {
    goto LABEL_70;
  }
LABEL_72:
  if (!a4 && v31) {
    CFRelease(v31);
  }
  return v29;
}

uint64_t _CFInit_SentenceCorrectorWrapper(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF7CD400;
  return result;
}

uint64_t createSentenceCorrectorWrapper(NLSentenceCorrectorModel *a1)
{
  CFAllocatorGetDefault();
  if (!g_CFTypeID_SentenceCorrectorWrapper)
  {
    qword_1EC023E88 = 0;
    unk_1EC023E98 = 0u;
    unk_1EC023EA8 = 0u;
    g_CFTypeID_SentenceCorrectorWrapper = _CFRuntimeRegisterClass();
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  return result;
}

CFDictionaryRef NLSentenceCorrectorCreate(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    CFDictionaryGetValue(result, (const void *)kNLSentenceCorrectorLocaleKey);
    if (CFDictionaryContainsKey(v1, (const void *)kNLSentenceCorrectorResourceDirectoryLocationKey)) {
      CFDictionaryGetValue(v1, (const void *)kNLSentenceCorrectorResourceDirectoryLocationKey);
    }
    operator new();
  }
  return result;
}

#error "1A439BBD4: call analysis failed (funcsize=41)"

void NLSentenceCorrectorEnumerateErrorsForSentenceWithBlock(uint64_t a1, const __CFString *a2, CFIndex a3, CFIndex a4, uint64_t a5)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v9 = *(CFLocaleRef **)(a1 + 24);
      NLSentenceCorrectorModel::clearInputTokens(v9);
      v25.CFIndex location = a3;
      v25.CFIndex length = a4;
      CFStringRef v10 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, v25);
      if (v9)
      {
        CFStringRef v11 = v10;
        if (v10)
        {
          NLSentenceCorrectorModel::setInputTokens(v9, v10);
          NLSentenceCorrectorModel::getErrorCategoriesAndErrorRanges((NLSentenceCorrectorModel *)v9, v11, &__p);
          CFStringRef v12 = v24;
          if (__p != v24)
          {
            CFStringRef v13 = (char *)__p + 24;
            do
            {
              long long v21 = *(_OWORD *)(v13 - 24);
              uint64_t v22 = *((void *)v13 - 1);
              long long v19 = v21;
              uint64_t v20 = v22;
              CFRange v14 = NLSentenceCorrectorModel::possibleCorrectionsForSentenceError((uint64_t)v9, v11, (unsigned int *)&v19);
              char v18 = 0;
              long long v16 = v21;
              uint64_t v17 = v22;
              (*(void (**)(uint64_t, long long *, __CFArray *, char *))(a5 + 16))(a5, &v16, v14, &v18);
              if (v14) {
                CFRelease(v14);
              }
              if (v18) {
                break;
              }
              BOOL v15 = v13 == v12;
              v13 += 24;
            }
            while (!v15);
          }
          CFRelease(v11);
          if (__p)
          {
            CFCharacterSetRef v24 = (char *)__p;
            operator delete(__p);
          }
        }
      }
    }
  }
}

void sub_1A439BD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SentenceCorrectorWrapper::~SentenceCorrectorWrapper(SentenceCorrectorWrapper *this)
{
  SentenceCorrectorWrapper::~SentenceCorrectorWrapper(this);

  JUMPOUT(0x1A625B130);
}

{
  NLSentenceCorrectorModel *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF7CD400;
  char v2 = (NLSentenceCorrectorModel *)*((void *)this + 1);
  if (v2)
  {
    NLSentenceCorrectorModel::~NLSentenceCorrectorModel(v2);
    MEMORY[0x1A625B130]();
  }

  NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
}

void NLAbstractLanguageModeler::NLAbstractLanguageModeler(NLAbstractLanguageModeler *this, const __CFString *a2)
{
  *(void *)this = &unk_1EF7CD448;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = createLexicon(a2);
}

void NLAbstractLanguageModeler::~NLAbstractLanguageModeler(NLAbstractLanguageModeler *this)
{
  *(void *)this = &unk_1EF7CD448;
  if (*((void *)this + 1)) {
    LMLanguageModelRelease();
  }
  char v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
}

{
  uint64_t vars8;

  NLAbstractLanguageModeler::~NLAbstractLanguageModeler(this);

  JUMPOUT(0x1A625B130);
}

void NLAbstractLanguageModeler::getNBestCandidates(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*(void *)(a1 + 8))
  {
    NLCommons::split((const std::string *)a2, 0x20u, &v31);
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(void *)(a2 + 8)) {
LABEL_4:
      }
        operator new[]();
    }
    else if (*(unsigned char *)(a2 + 23))
    {
      goto LABEL_4;
    }
    int v24 = a3;
    uint64_t v7 = v31;
    if (v32 != v31)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      int v10 = 0;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        CFStringRef v12 = NLCommons::trim((std::string *)(v7 + v8));
        if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v33, v12->__r_.__value_.__l.__data_, v12->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v33.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v13;
        }
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFRange v14 = &v33;
        }
        else {
          CFRange v14 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        CFStringRef v15 = CFStringCreateWithCString(v11, (const char *)v14, 0x8000100u);
        if (v15)
        {
          *(_DWORD *)(4 * v9) = LMLanguageModelGetTokenIDForString();
          CFRelease(v15);
          ++v10;
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        ++v9;
        uint64_t v7 = v31;
        v8 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3) > v9);
    }
    LMLanguageModelCreatePredictionEnumerator();
    int v16 = 0;
    memset(v29, 0, sizeof(v29));
    int v30 = 1065353216;
    do
    {
      int v17 = LMPredictionEnumeratorAdvance();
      if (v16 < 100) {
        int v18 = v17;
      }
      else {
        int v18 = 0;
      }
      if (v18 != 1) {
        break;
      }
      int v28 = 0;
      uint64_t v27 = 0;
      LMPredictionEnumeratorGetPrediction();
      CFStringRef StringForTokenID = (const __CFString *)LMLanguageModelCreateStringForTokenID();
      CFStringGetCString(StringForTokenID, (char *)&v33, 1024, 0x8000100u);
      CFRelease(StringForTokenID);
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(v29, (unsigned __int8 *)__p))
      {
        int v20 = 5;
      }
      else
      {
        unint64_t v21 = a4[1];
        if (v21 >= a4[2])
        {
          uint64_t v23 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (long long *)__p);
        }
        else
        {
          if (SHIBYTE(v26) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)a4[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            long long v22 = *(_OWORD *)__p;
            *(void *)(v21 + 16) = v26;
            *(_OWORD *)unint64_t v21 = v22;
          }
          uint64_t v23 = v21 + 24;
          a4[1] = v21 + 24;
        }
        a4[1] = v23;
        int v20 = ++v16 >= v24 ? 6 : 0;
      }
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
    }
    while (v20 != 6);
    LMPredictionEnumeratorRelease();
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v29);
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  }
}

void sub_1A439C7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  a26 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

uint64_t NLAbstractLanguageModeler::getLanguageModel(NLAbstractLanguageModeler *this)
{
  return *((void *)this + 1);
}

uint64_t NLAbstractLanguageModeler::logProbability(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (a1[1]) {
    return (*(uint64_t (**)(void))(v1 + 88))();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 80))();
  }
}

uint64_t NLAbstractLanguageModeler::logProbability(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

double NLAbstractLanguageModeler::calcNgramProb(uint64_t a1, const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  if (LMLanguageModelGetTokenIDForString())
  {
    LMLanguageModelConditionalProbability();
    double v4 = v3;
    if (!v2) {
      return v4;
    }
    goto LABEL_7;
  }
  double v4 = -15.6535598;
  if (v2) {
LABEL_7:
  }
    CFRelease(v2);
  return v4;
}

void sub_1A439C97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t caseInsensitiveCompare(char *a1, char *a2)
{
  uint64_t v2 = a1[23];
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v2 != v4) {
    return 0;
  }
  if (v3 >= 0) {
    BOOL v6 = a1;
  }
  else {
    BOOL v6 = *(char **)a1;
  }
  if (!v2) {
    return 1;
  }
  if (v5 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(char **)a2;
  }
  uint64_t v8 = v2 - 1;
  do
  {
    __darwin_ct_rune_t v10 = *v6++;
    __darwin_ct_rune_t v9 = v10;
    __darwin_ct_rune_t v11 = *v7++;
    __darwin_ct_rune_t v12 = __toupper(v9);
    BOOL v14 = v12 == __toupper(v11);
    uint64_t result = v14;
    BOOL v14 = !v14 || v8-- == 0;
  }
  while (!v14);
  return result;
}

double NLAbstractLanguageModeler::calcUnigramsProbability(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString = createCFStringFromString(a2);
  CFStringRef v14 = CFStringFromString;
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  long long v13 = RootCursor;
  uint64_t v4 = (const void *)LXCursorCreateByAdvancing();
  __darwin_ct_rune_t v12 = v4;
  uint64_t v8 = 0;
  __darwin_ct_rune_t v9 = (double *)&v8;
  uint64_t v5 = *MEMORY[0x1E4F72480];
  uint64_t v10 = 0x2000000000;
  uint64_t v11 = v5;
  if (!v4)
  {
    double v6 = v9[3];
    _Block_object_dispose(&v8, 8);
    if (!RootCursor) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (LXCursorHasEntries()) {
    LXCursorEnumerateEntries();
  }
  double v6 = v9[3];
  _Block_object_dispose(&v8, 8);
  CFRelease(v4);
  if (RootCursor) {
LABEL_7:
  }
    CFRelease(RootCursor);
LABEL_8:
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  return v6;
}

void sub_1A439CBA4(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<_LXCursor const*>::reset((const void **)(v1 - 64), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void ___ZNK25NLAbstractLanguageModeler23calcUnigramsProbabilityERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  CFStringRef v5 = (const __CFString *)LXEntryCopyString();
  CFStringRef v18 = v5;
  getUTF8StringFromCFString(v5, __p);
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(char *)(v6 + 23);
  if ((v17 & 0x80u) == 0) {
    size_t v8 = v17;
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  if ((v17 & 0x80u) == 0) {
    __darwin_ct_rune_t v9 = __p;
  }
  else {
    __darwin_ct_rune_t v9 = (void **)__p[0];
  }
  if (v7 >= 0) {
    size_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    size_t v10 = *(void *)(v6 + 8);
  }
  if (v7 >= 0) {
    uint64_t v11 = *(const void **)(a1 + 40);
  }
  else {
    uint64_t v11 = *(const void **)v6;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  if (!memcmp(v9, v11, v12) && v10 == v8)
  {
    LXEntryGetProbability();
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v15;
    *a3 = 1;
  }
  else if (caseInsensitiveCompare((char *)__p, (char *)v6))
  {
    LXEntryGetProbability();
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v14;
  }
  if ((char)v17 < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return;
    }
    goto LABEL_27;
  }
  if (v5) {
LABEL_27:
  }
    CFRelease(v5);
}

void sub_1A439CD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
}

BOOL NLAbstractLanguageModeler::isPresentInLexicon(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  CFStringRef CFStringFromString = createCFStringFromString(a2);
  LXLexiconEnumerateEntriesForString();
  int v3 = *((unsigned __int8 *)v6 + 24);
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  _Block_object_dispose(&v5, 8);
  return v3 != 0;
}

void sub_1A439CE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  __darwin_ct_rune_t v9 = va_arg(va1, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void ___ZN25NLAbstractLanguageModeler18isPresentInLexiconERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERj_block_invoke(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  CFStringRef v5 = (const __CFString *)LXEntryCopyString();
  CFStringRef v8 = v5;
  getUTF8StringFromCFString(v5, __p);
  if (caseInsensitiveCompare((char *)__p, *(char **)(a1 + 40)))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return;
    }
    goto LABEL_7;
  }
  if (v5) {
LABEL_7:
  }
    CFRelease(v5);
}

void sub_1A439CEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFString const*>::reset(&a15, 0);
  _Unwind_Resume(a1);
}

uint64_t NLAbstractLanguageModeler::getTokenIDForStringFromUnigrams(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  CFStringRef CFStringFromString = createCFStringFromString(a2);
  LXLexiconEnumerateEntriesForString();
  uint64_t v3 = *((unsigned int *)v6 + 6);
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  _Block_object_dispose(&v5, 8);
  return v3;
}

void sub_1A439CFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  __darwin_ct_rune_t v9 = va_arg(va1, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void ___ZN25NLAbstractLanguageModeler31getTokenIDForStringFromUnigramsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  CFStringRef v5 = (const __CFString *)LXEntryCopyString();
  CFStringRef v16 = v5;
  getUTF8StringFromCFString(v5, __p);
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(char *)(v6 + 23);
  if ((v15 & 0x80u) == 0) {
    size_t v8 = v15;
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  if ((v15 & 0x80u) == 0) {
    __darwin_ct_rune_t v9 = __p;
  }
  else {
    __darwin_ct_rune_t v9 = (void **)__p[0];
  }
  if (v7 >= 0) {
    size_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    size_t v10 = *(void *)(v6 + 8);
  }
  if (v7 >= 0) {
    uint64_t v11 = *(const void **)(a1 + 40);
  }
  else {
    uint64_t v11 = *(const void **)v6;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  if (!memcmp(v9, v11, v12) && v10 == v8)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = LXEntryGetTokenID();
    *a3 = 1;
  }
  else if (caseInsensitiveCompare((char *)__p, (char *)v6))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = LXEntryGetTokenID();
  }
  if ((char)v15 < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return;
    }
    goto LABEL_27;
  }
  if (v5) {
LABEL_27:
  }
    CFRelease(v5);
}

void sub_1A439D138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
}

void NLAbstractLanguageModeler::getDiacriticsInsensitiveCandidatesFromLexicon(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x4002000000;
  size_t v8 = __Block_byref_object_copy__7;
  __darwin_ct_rune_t v9 = __Block_byref_object_dispose__7;
  memset(v10, 0, sizeof(v10));
  CFStringRef CFStringFromString = createCFStringFromString(a1);
  p_isa = &CFStringFromString->isa;
  LXLexiconEnumerateEntriesForString();
  uint64_t v4 = v6;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, (long long *)v4[5], (long long *)v4[6], 0xAAAAAAAAAAAAAAABLL * ((v4[6] - v4[5]) >> 3));
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  _Block_object_dispose(&v5, 8);
  p_isa = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_isa);
}

void sub_1A439D2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  *(void *)(v11 - 72) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 72));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN25NLAbstractLanguageModeler45getDiacriticsInsensitiveCandidatesFromLexiconERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  CFStringRef v3 = (const __CFString *)LXEntryCopyString();
  CFStringRef v32 = v3;
  getUTF8StringFromCFString(v3, v30);
  (*(void (**)(void **__return_ptr, uint64_t, void **, void))(*(void *)v2 + 72))(&__s1, v2, v30, *(unsigned __int8 *)(a1 + 56));
  (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)v2 + 72))(__p, v2, *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  uint64_t v4 = v29;
  unsigned __int8 v5 = v29;
  if ((v29 & 0x80u) == 0) {
    size_t v6 = v29;
  }
  else {
    size_t v6 = __n;
  }
  unint64_t v7 = v26;
  int v8 = (char)v26;
  if ((v26 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)__p[1];
  }
  if (v6 == v7)
  {
    __darwin_ct_rune_t v9 = __p[0];
    if ((v26 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if (((char)v29 & 0x80000000) == 0)
    {
      if (v29)
      {
        p_s1 = &__s1;
        while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v10)
        {
          p_s1 = (void **)((char *)p_s1 + 1);
          uint64_t v10 = (void **)((char *)v10 + 1);
          if (!--v4) {
            goto LABEL_20;
          }
        }
        goto LABEL_17;
      }
LABEL_20:
      uint64_t v12 = *(void *)(a1 + 48);
      int v13 = *(char *)(v12 + 23);
      if (v31 >= 0) {
        uint64_t v14 = (void *)HIBYTE(v31);
      }
      else {
        uint64_t v14 = v30[1];
      }
      if (v31 >= 0) {
        unsigned __int8 v15 = v30;
      }
      else {
        unsigned __int8 v15 = (void **)v30[0];
      }
      if (v13 >= 0) {
        size_t v16 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        size_t v16 = *(void *)(v12 + 8);
      }
      if (v13 >= 0) {
        unsigned __int8 v17 = *(const void **)(a1 + 48);
      }
      else {
        unsigned __int8 v17 = *(const void **)v12;
      }
      if (v16 >= (unint64_t)v14) {
        size_t v18 = (size_t)v14;
      }
      else {
        size_t v18 = v16;
      }
      BOOL v19 = memcmp(v15, v17, v18) == 0;
      BOOL v20 = (void *)v16 == v14 && v19;
      if (v8 < 0)
      {
        operator delete(v9);
        if ((v29 & 0x80) == 0)
        {
LABEL_40:
          if (v20) {
            goto LABEL_53;
          }
          goto LABEL_46;
        }
      }
      else if ((v5 & 0x80) == 0)
      {
        goto LABEL_40;
      }
      operator delete(__s1);
      if (v20) {
        goto LABEL_53;
      }
LABEL_46:
      unint64_t v21 = *(void **)(*(void *)(a1 + 32) + 8);
      unint64_t v22 = v21[6];
      if (v22 >= v21[7])
      {
        uint64_t v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v21 + 5, (long long *)v30);
      }
      else
      {
        if (SHIBYTE(v31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v21[6], (const std::string::value_type *)v30[0], (std::string::size_type)v30[1]);
        }
        else
        {
          long long v23 = *(_OWORD *)v30;
          *(void *)(v22 + 16) = v31;
          *(_OWORD *)unint64_t v22 = v23;
        }
        uint64_t v24 = v22 + 24;
        void v21[6] = v22 + 24;
      }
      void v21[6] = v24;
      goto LABEL_53;
    }
    if (!memcmp(__s1, v10, __n)) {
      goto LABEL_20;
    }
  }
LABEL_17:
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if ((v29 & 0x80) == 0) {
      goto LABEL_53;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_53;
  }
  operator delete(__s1);
LABEL_53:
  if (SHIBYTE(v31) < 0)
  {
    operator delete(v30[0]);
    if (!v3) {
      return;
    }
    goto LABEL_57;
  }
  if (v3) {
LABEL_57:
  }
    CFRelease(v3);
}

void sub_1A439D5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24)
{
  *(void *)(v25 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v24;
  if (a23 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFString const*>::reset(&a24, 0);
  _Unwind_Resume(a1);
}

void NLAbstractLanguageModeler::removeDiacritics(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void nlp::CFScopedPtr<_LXCursor const*>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void NLSentenceCorrectorModel::NLSentenceCorrectorModel(NLSentenceCorrectorModel *this, const __CFLocale *a2, const __CFString *a3)
{
  v66[19] = *MEMORY[0x1E4F143B8];
  *((void *)this + 12) = 0;
  size_t v6 = (char *)this + 96;
  *((void *)this + 11) = (char *)this + 96;
  unint64_t v7 = (void *)((char *)this + 88);
  *((void *)this + 1nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  *((void *)this + 3) = MEMORY[0x1A625A380](*MEMORY[0x1E4F1CF80]);
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a3)
  {
    MutableCFStringRef Copy = CFStringCreateMutableCopy(v8, 0, a3);
    if (MutableCopy)
    {
      CFStringRef v12 = (const __CFString *)MEMORY[0x1A625A3A0](a2);
      CFStringAppend(MutableCopy, v12);
      CFStringAppend(MutableCopy, @"/scmodel.dat");
      CFDictionaryAddValue(Mutable, kMRLModelFileLocationKey, MutableCopy);
      CFRelease(MutableCopy);
    }
  }
  else
  {
    AssetResource = (const __CFURL **)NL::Resource::createAssetResource(a2, (const __CFLocale *)@"SentenceCorrection", @"scmodel.dat", v9);
    if (AssetResource) {
      NL::Resource::exists(AssetResource);
    }
  }
  if (!CFDictionaryContainsKey(Mutable, kMRLModelFileLocationKey))
  {
    CFRelease(Mutable);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "OptionalAssets absent.");
    NL::ResourceCreationException::ResourceCreationException(exception, (long long *)__p);
  }
  uint64_t v14 = MRLModelCreate();
  *(void *)this = v14;
  if (!v14)
  {
    CFRelease(Mutable);
    uint64_t v45 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "Montreal model creation failed.");
    NL::ResourceCreationException::ResourceCreationException(v45, (long long *)__p);
  }
  *((void *)this + 1) = MRLModelGetOutputSize();
  uint64_t IOMappings = MRLModelGetIOMappings();
  *((void *)this + 1nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = IOMappings;
  std::string::basic_string[abi:ne180100]<0>(__p, "xOOVx");
  *((_DWORD *)this + 16) = *(_DWORD *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(IOMappings, (const void **)__p)+ 56);
  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = *((void *)this + 10);
  std::string::basic_string[abi:ne180100]<0>(__p, "xNUMx");
  *((_DWORD *)this + 17) = *(_DWORD *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v16, (const void **)__p)+ 56);
  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = *((void *)this + 10);
  std::string::basic_string[abi:ne180100]<0>(__p, "xCURx");
  *((_DWORD *)this + 1std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = *(_DWORD *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v17, (const void **)__p)+ 56);
  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  unint64_t v46 = (uint64_t *)&v47;
  if (a3)
  {
    CFMutableStringRef v19 = CFStringCreateMutableCopy(v8, 0, a3);
    if (v19)
    {
      CFStringRef v20 = (const __CFString *)MEMORY[0x1A625A3A0](a2);
      CFStringAppend(v19, v20);
      CFStringAppend(v19, @"/scsubs.dat");
      CFStringRef Copy = CFStringCreateCopy(v8, v19);
      CFRelease(v19);
      if (Copy)
      {
        unint64_t v22 = (char *)convertToCString(Copy);
        if (v22)
        {
          std::string::basic_string[abi:ne180100]<0>(&v61, v22);
          std::ifstream::basic_ifstream((uint64_t *)__p);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v61.__r_.__value_.__l.__data_);
          }
          v56[0] = 0;
          v56[1] = 0;
          uint64_t v57 = 0;
          memset(&v55, 0, sizeof(v55));
          long long v23 = (std::locale::id *)MEMORY[0x1E4FBA258];
          while (1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)__p + *((void *)__p[0] - 3)));
            uint64_t v24 = std::locale::use_facet((const std::locale *)&v61, v23);
            unsigned __int8 v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
            std::locale::~locale((std::locale *)&v61);
            unsigned __int8 v26 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)v56, v25);
            if ((*((unsigned char *)v26 + *(void *)(*v26 - 24) + 32) & 5) != 0) {
              break;
            }
            uint64_t v52 = 0;
            uint64_t v53 = 0;
            uint64_t v54 = 0;
            splitWithChar((uint64_t)v56, 9u, (uint64_t)&v52);
            uint64_t v27 = v52;
            uint64_t v28 = v53;
            if (v53 - (void)v52 == 24)
            {
              std::string::operator=(&v55, v52);
              uint64_t v49 = &v55;
              std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v46, (const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v49);
              uint64_t v27 = v52;
              uint64_t v28 = v53;
            }
            if (v28 - (void)v27 == 48)
            {
              uint64_t v49 = 0;
              uint64_t v50 = 0;
              uint64_t v51 = 0;
              splitWithChar((uint64_t)&v27[1], 0x2Fu, (uint64_t)&v49);
              unsigned __int8 v29 = v49;
              unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v49) >> 3);
              if (v30 == 1)
              {
                if (SHIBYTE(v49->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v63, v49->__r_.__value_.__l.__data_, v49->__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v32 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
                  v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v32;
                }
                memset(&v61, 0, sizeof(v61));
                long long v58 = &v61;
                char v59 = 0;
                v61.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
                v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
                v61.__r_.__value_.__r.__words[2] = v61.__r_.__value_.__r.__words[0] + 24;
                v61.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v61.__r_.__value_.__r.__words[2], (long long *)&v63, (long long *)__p, (std::string *)v61.__r_.__value_.__l.__data_);
                uint64_t v60 = &v55;
                uint64_t v34 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v46, (const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v60);
                uint64_t v60 = v52;
                CFRange v35 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v34 + 7, (const void **)&v52->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v60);
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v35 + 7));
                *(std::string *)(v35 + 7) = v61;
                memset(&v61, 0, sizeof(v61));
                long long v58 = &v61;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
                if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v63.__r_.__value_.__l.__data_);
                }
              }
              else if (v30 == 2)
              {
                if (SHIBYTE(v49->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v61, v49->__r_.__value_.__l.__data_, v49->__r_.__value_.__l.__size_);
                  unsigned __int8 v29 = v49;
                }
                else
                {
                  long long v31 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
                  v61.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v31;
                }
                if (SHIBYTE(v29[1].__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v62, v29[1].__r_.__value_.__l.__data_, v29[1].__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v33 = *(_OWORD *)&v29[1].__r_.__value_.__l.__data_;
                  v62.__r_.__value_.__r.__words[2] = v29[1].__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v33;
                }
                memset(&v63, 0, sizeof(v63));
                long long v58 = &v63;
                char v59 = 0;
                v63.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
                v63.__r_.__value_.__l.__size_ = v63.__r_.__value_.__r.__words[0];
                v63.__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[0] + 48;
                v63.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v63.__r_.__value_.__r.__words[2], (long long *)&v61, (long long *)&v63, (std::string *)v63.__r_.__value_.__l.__data_);
                uint64_t v60 = &v55;
                CFRange v36 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v46, (const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v60);
                uint64_t v60 = v52;
                CFRange v37 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v36 + 7, (const void **)&v52->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v60);
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v37 + 7));
                *(std::string *)(v37 + 7) = v63;
                memset(&v63, 0, sizeof(v63));
                long long v58 = &v63;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
                for (uint64_t i = 0; i != -6; i -= 3)
                {
                  if (SHIBYTE(v62.__r_.__value_.__r.__words[i + 2]) < 0) {
                    operator delete(*(void **)((char *)&v61 + i * 8 + 24));
                  }
                }
              }
              v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
            }
            v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
          }
          free(v22);
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v55.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v57) < 0) {
            operator delete(v56[0]);
          }
          __p[0] = *(void **)MEMORY[0x1E4FBA3F8];
          *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA3F8] + 24);
          MEMORY[0x1A625AEE0](&v65);
          std::istream::~istream();
          MEMORY[0x1A625B0A0](v66);
        }
        CFRelease(Copy);
      }
    }
  }
  else
  {
    CFRange v39 = (const __CFURL **)NL::Resource::createAssetResource(a2, (const __CFLocale *)@"SentenceCorrection", @"scsubs.dat", v18);
    if (v39) {
      NL::Resource::exists(v39);
    }
  }
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy((uint64_t)v7, *((void **)this + 12));
  CFRange v40 = v47;
  *((void *)this + 11) = v46;
  *((void *)this + 12) = v40;
  uint64_t v41 = v48;
  *((void *)this + 13) = v48;
  if (v41)
  {
    v40[2] = v6;
    unint64_t v46 = (uint64_t *)&v47;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    CFRange v40 = 0;
  }
  else
  {
    *unint64_t v7 = v6;
  }
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy((uint64_t)&v46, v40);
  uint64_t v42 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  unint64_t v43 = v42;
  if (v42)
  {
    CFArrayAppendValue(v42, (const void *)*MEMORY[0x1E4F5C920]);
    *((void *)this + 2) = NLTaggerCreate();
    CFRelease(v43);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1A439E0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::locale a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy((uint64_t)&a20, (void *)a21);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy(v54, *(void **)(v53 + 96));
  std::__wrap_iter<const char *>::iterator_type v56 = *(void **)(v53 + 40);
  if (v56)
  {
    *(void *)(v53 + 4std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(a1);
}

void NLSentenceCorrectorModel::~NLSentenceCorrectorModel(NLSentenceCorrectorModel *this)
{
  if (*(void *)this) {
    MRLModelRelease();
  }
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = (const void *)*((void *)this + 3);
  if (v3) {
    CFRelease(v3);
  }
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy((uint64_t)this + 88, *((void **)this + 12));
  uint64_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
}

uint64_t NLSentenceCorrectorModel::getLabelProbabilities@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void *)(this + 32);
  if (v3)
  {
    unint64_t v4 = *(void *)(this + 8) * v3;
    int v6 = 0;
    std::vector<float>::vector(&v7, v4, &v6);
    uint64_t v5 = v8;
    *(_OWORD *)a2 = v7;
    a2[2] = v5;
    return MRLModelRecognize();
  }
  return this;
}

void sub_1A439E3D0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void NLSentenceCorrectorModel::createLabelSequenceString(void *a1@<X0>, void *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "A");
    int v23 = 1058642330;
    std::string::basic_string[abi:ne180100]<0>(v24, "B");
    int v25 = 1056964608;
    std::string::basic_string[abi:ne180100]<0>(v26, "C");
    int v27 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(v28, "D");
    int v29 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(v30, "0");
    int v31 = 1065353216;
    std::map<std::string,float>::map[abi:ne180100]((uint64_t)&NLSentenceCorrectorModel::createLabelSequenceString(std::vector<float>)::kIncorrectThresholdMap, (const void **)&v22.__r_.__value_.__l.__data_, 5);
    for (uint64_t i = 0; i != -20; i -= 4)
    {
      if (SHIBYTE(v30[i + 2]) < 0) {
        operator delete((void *)v30[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::map<std::string,float>::~map[abi:ne180100], &NLSentenceCorrectorModel::createLabelSequenceString(std::vector<float>)::kIncorrectThresholdMap, &dword_1A431F000);
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (!((unint64_t)((uint64_t)(a2[1] - *a2) >> 2) % a1[1]) && a1[4])
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      int v21 = 0;
      uint64_t v8 = a1[1];
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *a2 + v8 * v6;
        float v11 = 0.0;
        do
        {
          float v12 = *(float *)(v10 + 4 * v9);
          if (v12 > v11)
          {
            int v21 = v9;
            float v11 = v12;
          }
          ++v9;
        }
        while (v8 != v9);
      }
      else
      {
        float v11 = 0.0;
      }
      int v13 = *(_DWORD *)std::map<int,int>::at(a1[10] + 72, &v21);
      *((unsigned char *)&v22.__r_.__value_.__s + 23) = 1;
      LOWORD(v22.__r_.__value_.__l.__data_) = v13;
      if (!std::string::compare(&v22, "Y")
        || v11 > *(float *)std::map<std::string,float>::at((uint64_t)&NLSentenceCorrectorModel::createLabelSequenceString(std::vector<float>)::kIncorrectThresholdMap, (const void **)&v22.__r_.__value_.__l.__data_))
      {
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v14 = &v22;
        }
        else {
          uint64_t v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
        }
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v22.__r_.__value_.__l.__size_;
        }
        std::string::append(a3, (const std::string::value_type *)v14, size);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Y");
        if ((v20 & 0x80u) == 0) {
          uint64_t v16 = __p;
        }
        else {
          uint64_t v16 = (void **)__p[0];
        }
        if ((v20 & 0x80u) == 0) {
          std::string::size_type v17 = v20;
        }
        else {
          std::string::size_type v17 = (std::string::size_type)__p[1];
        }
        std::string::append(a3, (const std::string::value_type *)v16, v17);
        if ((char)v20 < 0) {
          operator delete(__p[0]);
        }
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      ++v7;
      v6 += 4;
    }
    while (a1[4] > v7);
  }
}

void sub_1A439E6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v23 = 0;
  while (1)
  {
    if (*(char *)(v21 + v23 + 151) < 0) {
      operator delete(*(void **)(v21 + v23 + 128));
    }
    v23 -= 32;
    if (v23 == -160)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string,float>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t *std::map<int,int>::at(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 4;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t std::map<std::string,float>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::string>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

void *NLSentenceCorrectorModel::clearInputTokens(void *this)
{
  uint64_t v1 = this[5];
  if (this[6] != v1) {
    this[6] = v1;
  }
  this[4] = 0;
  return this;
}

void findAndNormalizePunctuation(__CFString *theString)
{
  v6[38] = *MEMORY[0x1E4F143B8];
  {
    v6[1] = @"\"";
    void v6[3] = @"'";
    _OWORD v6[4] = @"‘";
    uint64_t v6[5] = @"'";
    v6[6] = @"’";
    v6[7] = @"'";
    v6[8] = @"‚";
    v6[9] = @"'";
    v6[10] = @"‛";
    v6[11] = @"'";
    v6[12] = @"“";
    v6[13] = @"\"";
    v6[14] = @"”";
    v6[15] = @"\"";
    uint8_t v6[16] = @"„";
    v6[17] = @"\"";
    v6[18] = @"‟";
    v6[19] = @"\"";
    v6[20] = @"--";
    v6[21] = @"—";
    v6[22] = @"‐‐";
    v6[23] = @"—";
    v6[24] = @" - ";
    v6[25] = @"—";
    v6[26] = @" ‑ ";
    v6[27] = @"—";
    v6[28] = @"-";
    v6[29] = @"‐";
    v6[30] = @"-";
    v6[31] = @"‐";
    v6[32] = @"‒";
    v6[33] = @"—";
    v6[34] = @"‒";
    v6[35] = @"—";
    v6[36] = @"‒";
    v6[37] = @"—";
    std::vector<std::pair<__CFString const*,__CFString const*>>::vector[abi:ne180100](findAndNormalizePunctuation(__CFString *)::punctuationMap, (uint64_t)v6, 0x13uLL);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<__CFString const*,__CFString const*>>::~vector[abi:ne180100], findAndNormalizePunctuation(__CFString *)::punctuationMap, &dword_1A431F000);
  }
  uint64_t v2 = findAndNormalizePunctuation(__CFString *)::punctuationMap[0];
  uint64_t v3 = unk_1E96463B8;
  while (v2 != v3)
  {
    CFStringRef v4 = *(const __CFString **)v2;
    CFStringRef v5 = *(const __CFString **)(v2 + 8);
    v7.CFIndex length = CFStringGetLength(theString);
    v7.CFIndex location = 0;
    CFStringFindAndReplace(theString, v4, v5, v7, 0);
    v2 += 16;
  }
}

void sub_1A439EA94(_Unwind_Exception *a1)
{
}

void *std::vector<std::pair<__CFString const*,__CFString const*>>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<NL::Entity>>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = 0;
    uint64_t v7 = a1[1];
    do
    {
      *(_OWORD *)(v7 + v6) = *(_OWORD *)(a2 + v6);
      v6 += 16;
    }
    while (16 * a3 != v6);
    a1[1] = v7 + v6;
  }
  return a1;
}

void sub_1A439EB28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<__CFString const*,__CFString const*>>::~vector[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL isNumericalToken(const std::string *a1)
{
  std::istringstream::basic_istringstream[abi:ne180100](v4, a1, 8);
  int v3 = 0;
  *(_DWORD *)((char *)&v4[1] + *(void *)(v4[0] - 24)) &= ~0x1000u;
  MEMORY[0x1A625AF10](v4, &v3);
  int v1 = *(_DWORD *)((char *)&v4[4] + *(void *)(v4[0] - 24));
  v4[0] = *MEMORY[0x1E4FBA410];
  *(uint64_t *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  std::regex_traits<char> v4[2] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A625B0A0](&v6);
  return (v1 & 7) == 2;
}

void sub_1A439ECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x1E4FBA490] + 64;
  a1[15] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  a1[1] = 0;
  uint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x1E4FBA490] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_1A439EE64(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1A625B0A0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA410];
  uint64_t v3 = *MEMORY[0x1E4FBA410];
  *(void *)a1 = *MEMORY[0x1E4FBA410];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A625B0A0](a1 + 120);
  return a1;
}

BOOL isCurrencyToken(unsigned __int8 **a1)
{
  void v11[3] = *MEMORY[0x1E4F143B8];
  {
    std::string::basic_string[abi:ne180100]<0>(&v4, "$");
    std::string::basic_string[abi:ne180100]<0>(v5, "usd");
    std::string::basic_string[abi:ne180100]<0>(v6, "£");
    std::string::basic_string[abi:ne180100]<0>(v7, "gbp");
    std::string::basic_string[abi:ne180100]<0>(v8, "€");
    std::string::basic_string[abi:ne180100]<0>(v9, "eur");
    std::string::basic_string[abi:ne180100]<0>(v10, "¥");
    std::string::basic_string[abi:ne180100]<0>(v11, "yen");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&isCurrencyToken(std::string const&)::currency, &v4, 8uLL);
    for (uint64_t i = 0; i != -24; i -= 3)
    {
      if (SHIBYTE(v11[i + 2]) < 0) {
        operator delete((void *)v11[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &isCurrencyToken(std::string const&)::currency, &dword_1A431F000);
  }
  return std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(isCurrencyToken(std::string const&)::currency, qword_1E96463D8, a1) != qword_1E96463D8;
}

void sub_1A439F14C(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 191) < 0) {
      operator delete(*(void **)(v1 + v3 + 168));
    }
    v3 -= 24;
    if (v3 == -192)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1A439F238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::clear((uint64_t)this + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void NLSentenceCorrectorModel::setInputTokens(CFLocaleRef *this, CFStringRef theString)
{
  MutableCFStringRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
  if (MutableCopy)
  {
    uint64_t v4 = MutableCopy;
    CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
    CFStringLowercase(v4, this[3]);
    findAndNormalizePunctuation(v4);
    uint64_t v44 = 0;
    uint64_t v45 = &v44;
    uint64_t v46 = 0x4002000000;
    uint64_t v47 = __Block_byref_object_copy__8;
    uint64_t v48 = __Block_byref_object_dispose__8;
    uint64_t v49 = 0;
    v50[0] = 0;
    v50[1] = 0;
    if (this[2])
    {
      NLTaggerSetString();
      CFStringGetLength(v4);
      NLTaggerSetLocaleForRange();
      CFStringGetLength(v4);
      v40.__r_.__value_.__r.__words[0] = 0;
      v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v40;
      v40.__r_.__value_.__r.__words[2] = 0x4002000000;
      uint64_t v41 = __Block_byref_object_copy__93;
      uint64_t v42 = __Block_byref_object_dispose__94;
      long long v43 = xmmword_1A43F6B80;
      NLTaggerEnumerateTokens();
      _Block_object_dispose(&v40, 8);
      char v5 = (long long **)(v45 + 6);
      uint64_t v6 = (long long *)v45[5];
    }
    else
    {
      uint64_t v6 = 0;
      char v5 = (long long **)v50;
    }
    uint64_t v7 = *v5;
    if (v6 != *v5)
    {
      uint64_t v8 = (void **)(this + 5);
      do
      {
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v9 = *v6;
          v40.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
        }
        uint64_t v10 = (uint64_t)this[10];
        if (!v10) {
          goto LABEL_74;
        }
        uint64_t v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v10, (const void **)&v40.__r_.__value_.__l.__data_);
        uint64_t v12 = v11;
        if ((CFLocaleRef)((char *)this[10] + 8) == (CFLocaleRef)v11)
        {
          if (isNumericalToken(&v40))
          {
            uint64_t v14 = this[6];
            CFLocaleRef v16 = this[7];
            if (v14 >= (_DWORD *)v16)
            {
              CFLocaleRef v17 = (CFLocaleRef)*v8;
              uint64_t v28 = ((char *)v14 - (unsigned char *)*v8) >> 2;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 62) {
                goto LABEL_79;
              }
              uint64_t v30 = v16 - v17;
              if (v30 >> 1 > v29) {
                unint64_t v29 = v30 >> 1;
              }
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v21 = v29;
              }
              if (v21)
              {
                std::string v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(this + 7), v21);
                CFLocaleRef v17 = this[5];
                uint64_t v14 = this[6];
              }
              else
              {
                std::string v22 = 0;
              }
              CFLocaleRef v25 = (const __CFLocale *)&v22[4 * v28];
              *(_DWORD *)CFLocaleRef v25 = *((_DWORD *)this + 17);
              CFLocaleRef v26 = (const __CFLocale *)((char *)v25 + 4);
              while (v14 != (_DWORD *)v17)
              {
                int v37 = *--v14;
                *((_DWORD *)v25 - 1) = v37;
                CFLocaleRef v25 = (const __CFLocale *)((char *)v25 - 4);
              }
              goto LABEL_71;
            }
            int v15 = *((_DWORD *)this + 17);
          }
          else
          {
            BOOL v23 = isCurrencyToken((unsigned __int8 **)&v40);
            uint64_t v14 = this[6];
            CFLocaleRef v24 = this[7];
            if (v23)
            {
              if (v14 >= (_DWORD *)v24)
              {
                CFLocaleRef v17 = (CFLocaleRef)*v8;
                uint64_t v31 = ((char *)v14 - (unsigned char *)*v8) >> 2;
                unint64_t v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 62) {
                  goto LABEL_79;
                }
                uint64_t v33 = v24 - v17;
                if (v33 >> 1 > v32) {
                  unint64_t v32 = v33 >> 1;
                }
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v21 = v32;
                }
                if (v21)
                {
                  std::string v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(this + 7), v21);
                  CFLocaleRef v17 = this[5];
                  uint64_t v14 = this[6];
                }
                else
                {
                  std::string v22 = 0;
                }
                CFLocaleRef v25 = (const __CFLocale *)&v22[4 * v31];
                *(_DWORD *)CFLocaleRef v25 = *((_DWORD *)this + 18);
                CFLocaleRef v26 = (const __CFLocale *)((char *)v25 + 4);
                while (v14 != (_DWORD *)v17)
                {
                  int v38 = *--v14;
                  *((_DWORD *)v25 - 1) = v38;
                  CFLocaleRef v25 = (const __CFLocale *)((char *)v25 - 4);
                }
                goto LABEL_71;
              }
              int v15 = *((_DWORD *)this + 18);
            }
            else
            {
              if (v14 >= (_DWORD *)v24)
              {
                CFLocaleRef v17 = (CFLocaleRef)*v8;
                uint64_t v34 = ((char *)v14 - (unsigned char *)*v8) >> 2;
                unint64_t v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62) {
LABEL_79:
                }
                  std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                uint64_t v36 = v24 - v17;
                if (v36 >> 1 > v35) {
                  unint64_t v35 = v36 >> 1;
                }
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v21 = v35;
                }
                if (v21)
                {
                  std::string v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(this + 7), v21);
                  CFLocaleRef v17 = this[5];
                  uint64_t v14 = this[6];
                }
                else
                {
                  std::string v22 = 0;
                }
                CFLocaleRef v25 = (const __CFLocale *)&v22[4 * v34];
                *(_DWORD *)CFLocaleRef v25 = *((_DWORD *)this + 16);
                CFLocaleRef v26 = (const __CFLocale *)((char *)v25 + 4);
                while (v14 != (_DWORD *)v17)
                {
                  int v39 = *--v14;
                  *((_DWORD *)v25 - 1) = v39;
                  CFLocaleRef v25 = (const __CFLocale *)((char *)v25 - 4);
                }
                goto LABEL_71;
              }
              int v15 = *((_DWORD *)this + 16);
            }
          }
        }
        else
        {
          uint64_t v14 = this[6];
          CFLocaleRef v13 = this[7];
          if (v14 >= (_DWORD *)v13)
          {
            CFLocaleRef v17 = (CFLocaleRef)*v8;
            uint64_t v18 = ((char *)v14 - (unsigned char *)*v8) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              goto LABEL_79;
            }
            uint64_t v20 = v13 - v17;
            if (v20 >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              std::string v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(this + 7), v21);
              CFLocaleRef v17 = this[5];
              uint64_t v14 = this[6];
            }
            else
            {
              std::string v22 = 0;
            }
            CFLocaleRef v25 = (const __CFLocale *)&v22[4 * v18];
            *(_DWORD *)CFLocaleRef v25 = *(_DWORD *)(v12 + 56);
            CFLocaleRef v26 = (const __CFLocale *)((char *)v25 + 4);
            while (v14 != (_DWORD *)v17)
            {
              int v27 = *--v14;
              *((_DWORD *)v25 - 1) = v27;
              CFLocaleRef v25 = (const __CFLocale *)((char *)v25 - 4);
            }
LABEL_71:
            this[5] = v25;
            this[6] = v26;
            this[7] = (CFLocaleRef)&v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
            goto LABEL_73;
          }
          int v15 = *(_DWORD *)(v11 + 56);
        }
        *uint64_t v14 = v15;
        CFLocaleRef v26 = (const __CFLocale *)(v14 + 1);
LABEL_73:
        this[6] = v26;
LABEL_74:
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != v7);
    }
    this[4] = (CFLocaleRef)((this[6] - this[5]) >> 2);
    CFRelease(v4);
    _Block_object_dispose(&v44, 8);
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  }
}

void sub_1A439F770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::match_results<const char *> __p = a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4_Block_object_dispose(&__p, 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

__n128 __Block_byref_object_copy__93(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = result;
  return result;
}

void ___ZN24NLSentenceCorrectorModel14setInputTokensEPK10__CFString_block_invoke(uint64_t a1, CFRange *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  v5.CFIndex location = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  if (v6 + v5.location == a2->location && (a2[1].location & 0x410) == 0x10)
  {
    v5.CFIndex length = a2->length + v6;
    CFStringRef v7 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 48), v5);
    if (!v7) {
      return;
    }
    CFStringRef v8 = v7;
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = (void **)(v10 - 24);
    if (*(char *)(v10 - 1) < 0) {
      operator delete(*v11);
    }
    *(void *)(v9 + 4_Block_object_dispose(&__p, 8) = v11;
    uint64_t v12 = (char *)convertToCString(v8);
    std::string::basic_string[abi:ne180100]<0>(__p, v12);
    free(v12);
    CFLocaleRef v13 = *(void **)(*(void *)(a1 + 40) + 8);
    unint64_t v14 = v13[6];
    if (v14 < v13[7])
    {
      if (SHIBYTE(v24) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v13[6], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v15 = *(_OWORD *)__p;
        *(void *)(v14 + 16) = v24;
        *(_OWORD *)unint64_t v14 = v15;
      }
      uint64_t v20 = v14 + 24;
      v13[6] = v14 + 24;
      goto LABEL_19;
    }
  }
  else
  {
    CFStringRef v16 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 48), *a2);
    if (!v16) {
      return;
    }
    CFStringRef v8 = v16;
    CFLocaleRef v17 = (char *)convertToCString(v16);
    std::string::basic_string[abi:ne180100]<0>(__p, v17);
    free(v17);
    CFLocaleRef v13 = *(void **)(*(void *)(a1 + 40) + 8);
    unint64_t v18 = v13[6];
    if (v18 < v13[7])
    {
      if (SHIBYTE(v24) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v13[6], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v19 = *(_OWORD *)__p;
        *(void *)(v18 + 16) = v24;
        *(_OWORD *)unint64_t v18 = v19;
      }
      uint64_t v20 = v18 + 24;
      v13[6] = v18 + 24;
      goto LABEL_19;
    }
  }
  uint64_t v20 = std::vector<std::string>::__emplace_back_slow_path<std::string&>(v13 + 5, (long long *)__p);
LABEL_19:
  v13[6] = v20;
  uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 8);
  CFRange v22 = *a2;
  *(void *)(v21 + 56) = a2[1].location;
  *(CFRange *)(v21 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v22;
  CFRelease(v8);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1A439FA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 + 4_Block_object_dispose(&__p, 8) = v15;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NLSentenceCorrectorModel::getErrorCategoriesAndErrorRanges(NLSentenceCorrectorModel *this@<X0>, const __CFString *a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  NLSentenceCorrectorModel::getLabelProbabilities((uint64_t)this, &__p);
  uint64_t v6 = *((void *)this + 1);
  CFStringRef v7 = __p;
  if (!v6)
  {
LABEL_5:
    if (!__p) {
      return;
    }
    goto LABEL_6;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 4 * v6;
  while (*(float *)((char *)__p + v8) == 0.0)
  {
    v8 += 4;
    if (v9 == v8) {
      goto LABEL_5;
    }
  }
  char v107 = 0;
  uint64_t v108 = 0;
  uint64_t v106 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v106, __p, v111, (v111 - (uint64_t)__p) >> 2);
  NLSentenceCorrectorModel::createLabelSequenceString(this, &v106, &v109);
  if (v106)
  {
    char v107 = v106;
    operator delete(v106);
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v109;
  }
  else {
    uint64_t v11 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  CFStringRef v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v11, 0x8000100u);
  CFStringRef v13 = v12;
  if (v12)
  {
    v116.CFIndex length = CFStringGetLength(v12);
    v116.CFIndex location = 0;
    CFArrayRef Results = CFStringCreateArrayWithFindResults(v10, v13, @"A", v116, 0);
    CFArrayRef v15 = Results;
    CFStringRef v101 = v13;
    CFAllocatorRef v102 = v10;
    if (Results)
    {
      CFIndex Count = CFArrayGetCount(Results);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFStringRef ValueAtIndex = (unint64_t *)CFArrayGetValueAtIndex(v15, i);
          CFIndex v19 = sentenceRangeForErrorIndex(*((void **)this + 2), *((const __CFLocale **)this + 3), a2, *ValueAtIndex);
          CFIndex v21 = v20;
          v113.CFIndex location = v19;
          v113.CFIndex length = v20;
          CFStringRef v22 = CFStringCreateWithSubstring(v10, a2, v113);
          if (v22)
          {
            std::string::basic_string[abi:ne180100]<0>(v103, (char *)kErrorTypeMap);
            v112[0] = v103;
            BOOL v23 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 11, (const void **)v103, (uint64_t)&std::piecewise_construct, v112);
            possibleCorrectionsForErrorString(v22, (uint64_t)v23 + 56, *((const __CFLocale **)this + 3), &v105);
            if (v104 < 0) {
              operator delete(v103[0]);
            }
            if (v105.__end_ != v105.__begin_)
            {
              CFLocaleRef v25 = (char *)a3[1];
              uint64_t v24 = (char *)a3[2];
              if (v25 >= v24)
              {
                int v27 = (char *)*a3;
                unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (unsigned char *)*a3) >> 3);
                unint64_t v29 = v28 + 1;
                if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v27) >> 3);
                if (2 * v30 > v29) {
                  unint64_t v29 = 2 * v30;
                }
                if (v30 >= 0x555555555555555) {
                  unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v31);
                  int v27 = (char *)*a3;
                  CFLocaleRef v25 = (char *)a3[1];
                }
                else
                {
                  unint64_t v32 = 0;
                }
                uint64_t v33 = &v32[24 * v28];
                *(_DWORD *)uint64_t v33 = 0;
                *((void *)v33 + 1) = v19;
                *((void *)v33 + 2) = v21;
                uint64_t v34 = v33;
                if (v25 != v27)
                {
                  do
                  {
                    long long v35 = *(_OWORD *)(v25 - 24);
                    *((void *)v34 - 1) = *((void *)v25 - 1);
                    *(_OWORD *)(v34 - 24) = v35;
                    v34 -= 24;
                    v25 -= 24;
                  }
                  while (v25 != v27);
                  int v27 = (char *)*a3;
                }
                CFLocaleRef v26 = v33 + 24;
                *a3 = v34;
                a3[1] = v33 + 24;
                a3[2] = &v32[24 * v31];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *(_DWORD *)CFLocaleRef v25 = 0;
                CFLocaleRef v26 = v25 + 24;
                *((void *)v25 + 1) = v19;
                *((void *)v25 + 2) = v21;
              }
              a3[1] = v26;
              CFAllocatorRef v10 = v102;
            }
            CFRelease(v22);
            v103[0] = &v105;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
          }
        }
      }
      CFRelease(v15);
      CFStringRef v13 = v101;
    }
    v117.CFIndex length = CFStringGetLength(v13);
    v117.CFIndex location = 0;
    CFArrayRef v36 = CFStringCreateArrayWithFindResults(v10, v13, @"B", v117, 0);
    CFArrayRef v37 = v36;
    if (v36)
    {
      CFIndex v38 = CFArrayGetCount(v36);
      if (v38 >= 1)
      {
        for (CFIndex j = 0; j != v38; ++j)
        {
          std::string v40 = (unint64_t *)CFArrayGetValueAtIndex(v37, j);
          CFIndex v41 = sentenceRangeForErrorIndex(*((void **)this + 2), *((const __CFLocale **)this + 3), a2, *v40);
          CFIndex v43 = v42;
          v114.CFIndex location = v41;
          v114.CFIndex length = v42;
          CFStringRef v44 = CFStringCreateWithSubstring(v10, a2, v114);
          if (v44)
          {
            std::string::basic_string[abi:ne180100]<0>(v103, (char *)qword_1E9646158);
            v112[0] = v103;
            uint64_t v45 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 11, (const void **)v103, (uint64_t)&std::piecewise_construct, v112);
            possibleCorrectionsForErrorString(v44, (uint64_t)v45 + 56, *((const __CFLocale **)this + 3), &v105);
            if (v104 < 0) {
              operator delete(v103[0]);
            }
            if (v105.__end_ != v105.__begin_)
            {
              uint64_t v47 = (char *)a3[1];
              uint64_t v46 = (char *)a3[2];
              if (v47 >= v46)
              {
                uint64_t v49 = (char *)*a3;
                unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v47 - (unsigned char *)*a3) >> 3);
                unint64_t v51 = v50 + 1;
                if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v49) >> 3);
                if (2 * v52 > v51) {
                  unint64_t v51 = 2 * v52;
                }
                if (v52 >= 0x555555555555555) {
                  unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v53 = v51;
                }
                if (v53)
                {
                  uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v53);
                  uint64_t v49 = (char *)*a3;
                  uint64_t v47 = (char *)a3[1];
                }
                else
                {
                  uint64_t v54 = 0;
                }
                std::string v55 = &v54[24 * v50];
                *(_DWORD *)std::string v55 = 1;
                *((void *)v55 + 1) = v41;
                *((void *)v55 + 2) = v43;
                std::__wrap_iter<const char *>::iterator_type v56 = v55;
                if (v47 != v49)
                {
                  do
                  {
                    long long v57 = *(_OWORD *)(v47 - 24);
                    *((void *)v56 - 1) = *((void *)v47 - 1);
                    *(_OWORD *)(v56 - 24) = v57;
                    v56 -= 24;
                    v47 -= 24;
                  }
                  while (v47 != v49);
                  uint64_t v49 = (char *)*a3;
                }
                uint64_t v48 = v55 + 24;
                *a3 = v56;
                a3[1] = v55 + 24;
                a3[2] = &v54[24 * v53];
                if (v49) {
                  operator delete(v49);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v47 = 1;
                uint64_t v48 = v47 + 24;
                *((void *)v47 + 1) = v41;
                *((void *)v47 + 2) = v43;
              }
              a3[1] = v48;
              CFAllocatorRef v10 = v102;
            }
            CFRelease(v44);
            v103[0] = &v105;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
          }
        }
      }
      CFRelease(v37);
      CFStringRef v13 = v101;
    }
    v118.CFIndex length = CFStringGetLength(v13);
    v118.CFIndex location = 0;
    CFArrayRef v58 = CFStringCreateArrayWithFindResults(v10, v13, @"C", v118, 0);
    CFArrayRef v59 = v58;
    if (v58)
    {
      CFIndex v60 = CFArrayGetCount(v58);
      if (v60 >= 1)
      {
        for (CFIndex k = 0; k != v60; ++k)
        {
          std::string v62 = (unint64_t *)CFArrayGetValueAtIndex(v59, k);
          CFIndex v63 = sentenceRangeForErrorIndex(*((void **)this + 2), *((const __CFLocale **)this + 3), a2, *v62);
          CFIndex v65 = v64;
          v115.CFIndex location = v63;
          v115.CFIndex length = v64;
          CFStringRef v66 = CFStringCreateWithSubstring(v10, a2, v115);
          if (v66)
          {
            std::string::basic_string[abi:ne180100]<0>(v103, (char *)qword_1E9646160);
            v112[0] = v103;
            uint64_t v67 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 11, (const void **)v103, (uint64_t)&std::piecewise_construct, v112);
            possibleCorrectionsForErrorString(v66, (uint64_t)v67 + 56, *((const __CFLocale **)this + 3), &v105);
            if (v104 < 0) {
              operator delete(v103[0]);
            }
            if (v105.__end_ != v105.__begin_)
            {
              int v69 = (char *)a3[1];
              long long v68 = (char *)a3[2];
              if (v69 >= v68)
              {
                uint64_t v71 = (char *)*a3;
                unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((v69 - (unsigned char *)*a3) >> 3);
                unint64_t v73 = v72 + 1;
                if (v72 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((v68 - v71) >> 3);
                if (2 * v74 > v73) {
                  unint64_t v73 = 2 * v74;
                }
                if (v74 >= 0x555555555555555) {
                  unint64_t v75 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v75 = v73;
                }
                if (v75)
                {
                  unint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v75);
                  uint64_t v71 = (char *)*a3;
                  int v69 = (char *)a3[1];
                }
                else
                {
                  unint64_t v76 = 0;
                }
                unint64_t v77 = &v76[24 * v72];
                *(_DWORD *)unint64_t v77 = 1;
                *((void *)v77 + 1) = v63;
                *((void *)v77 + 2) = v65;
                unint64_t v78 = v77;
                if (v69 != v71)
                {
                  do
                  {
                    long long v79 = *(_OWORD *)(v69 - 24);
                    *((void *)v78 - 1) = *((void *)v69 - 1);
                    *(_OWORD *)(v78 - 24) = v79;
                    v78 -= 24;
                    v69 -= 24;
                  }
                  while (v69 != v71);
                  uint64_t v71 = (char *)*a3;
                }
                std::__wrap_iter<const char *> v70 = v77 + 24;
                *a3 = v78;
                a3[1] = v77 + 24;
                a3[2] = &v76[24 * v75];
                if (v71) {
                  operator delete(v71);
                }
              }
              else
              {
                *(_DWORD *)int v69 = 1;
                std::__wrap_iter<const char *> v70 = v69 + 24;
                *((void *)v69 + 1) = v63;
                *((void *)v69 + 2) = v65;
              }
              a3[1] = v70;
              CFAllocatorRef v10 = v102;
            }
            CFRelease(v66);
            v103[0] = &v105;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
          }
        }
      }
      CFRelease(v59);
      CFStringRef v13 = v101;
    }
    v119.CFIndex length = CFStringGetLength(v13);
    v119.CFIndex location = 0;
    CFArrayRef v80 = CFStringCreateArrayWithFindResults(v10, v13, @"D", v119, 0);
    CFArrayRef v81 = v80;
    if (v80)
    {
      CFIndex v82 = CFArrayGetCount(v80);
      if (v82 >= 1)
      {
        for (CFIndex m = 0; m != v82; ++m)
        {
          long long v84 = (unint64_t *)CFArrayGetValueAtIndex(v81, m);
          uint64_t v85 = sentenceRangeForErrorIndex(*((void **)this + 2), *((const __CFLocale **)this + 3), a2, *v84);
          uint64_t v87 = v85;
          uint64_t v88 = v86;
          char v90 = (char *)a3[1];
          int v89 = (char *)a3[2];
          if (v90 >= v89)
          {
            int v92 = (char *)*a3;
            unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((v90 - (unsigned char *)*a3) >> 3);
            unint64_t v94 = v93 + 1;
            if (v93 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * ((v89 - v92) >> 3);
            if (2 * v95 > v94) {
              unint64_t v94 = 2 * v95;
            }
            if (v95 >= 0x555555555555555) {
              unint64_t v96 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v96 = v94;
            }
            if (v96)
            {
              int v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v96);
              int v92 = (char *)*a3;
              char v90 = (char *)a3[1];
            }
            else
            {
              int v97 = 0;
            }
            std::string::size_type v98 = &v97[24 * v93];
            *(_DWORD *)std::string::size_type v98 = 3;
            *((void *)v98 + 1) = v87;
            *((void *)v98 + 2) = v88;
            std::regex_iterator<std::__wrap_iter<const char *>, char> v99 = v98;
            if (v90 == v92)
            {
              CFStringRef v13 = v101;
            }
            else
            {
              CFStringRef v13 = v101;
              do
              {
                long long v100 = *(_OWORD *)(v90 - 24);
                *((void *)v99 - 1) = *((void *)v90 - 1);
                *(_OWORD *)(v99 - 24) = v100;
                v99 -= 24;
                v90 -= 24;
              }
              while (v90 != v92);
              int v92 = (char *)*a3;
            }
            std::string::size_type v91 = v98 + 24;
            *a3 = v99;
            a3[1] = v98 + 24;
            a3[2] = &v97[24 * v96];
            if (v92) {
              operator delete(v92);
            }
          }
          else
          {
            *(_DWORD *)char v90 = 3;
            std::string::size_type v91 = v90 + 24;
            *((void *)v90 + 1) = v85;
            *((void *)v90 + 2) = v86;
            CFStringRef v13 = v101;
          }
          a3[1] = v91;
        }
      }
      CFRelease(v81);
    }
    CFRelease(v13);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  CFStringRef v7 = __p;
  if (__p) {
LABEL_6:
  }
    operator delete(v7);
}

void sub_1A43A03D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  unint64_t v30 = *(void **)v28;
  if (*(void *)v28)
  {
    *(void *)(v28 + _Block_object_dispose(&__p, 8) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A43A04C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1A43A0494);
}

uint64_t sentenceRangeForErrorIndex(void *a1, const __CFLocale *a2, const __CFString *a3, unint64_t a4)
{
  CFRange v5 = &v12;
  uint64_t v12 = 0;
  CFStringRef v13 = &v12;
  uint64_t v14 = 0x4002000000;
  CFArrayRef v15 = __Block_byref_object_copy__124;
  uint64_t v16 = __Block_byref_object_dispose__125;
  std::match_results<const char *> __p = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  if (a1)
  {
    NLTaggerSetString();
    CFStringGetLength(a3);
    NLTaggerSetLocaleForRange();
    CFStringGetLength(a3);
    v10[0] = 0;
    v10[1] = v10;
    v10[2] = 0x4002000000;
    void v10[3] = __Block_byref_object_copy__93;
    v10[4] = __Block_byref_object_dispose__94;
    long long v11 = xmmword_1A43F6B80;
    NLTaggerEnumerateTokens();
    _Block_object_dispose(v10, 8);
    CFRange v5 = v13;
    uint64_t v7 = v13[5];
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (a4 >= (v5[6] - v7) >> 4) {
    std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v8 = *(void *)(v7 + 16 * a4);
  _Block_object_dispose(&v12, 8);
  if (__p)
  {
    unint64_t v18 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_1A43A06A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void possibleCorrectionsForErrorString(CFStringRef theString@<X0>, uint64_t a2@<X1>, const __CFLocale *a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  MutableCFStringRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
  CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
  CFStringLowercase(MutableCopy, a3);
  findAndNormalizePunctuation(MutableCopy);
  if (MutableCopy)
  {
    uint64_t v8 = (char *)convertToCString(MutableCopy);
    if (v8)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v8);
      uint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a2, (const void **)__p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (a2 + 8 != v9 && (std::vector<std::string> *)(v9 + 56) != a4) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a4, *(std::string **)(v9 + 56), *(long long **)(v9 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 64) - *(void *)(v9 + 56)) >> 3));
      }
      free(v8);
    }
    CFRelease(MutableCopy);
  }
}

void sub_1A43A07F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

__CFArray *NLSentenceCorrectorModel::possibleCorrectionsForSentenceError(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v8 = Mutable;
  if (*a3 == 3)
  {
    CFArrayAppendValue(Mutable, @"a");
    CFArrayAppendValue(v8, @"an");
    CFArrayAppendValue(v8, @"the");
  }
  else
  {
    CFStringRef v9 = CFStringCreateWithSubstring(v6, a2, *(CFRange *)(a3 + 2));
    if (v9)
    {
      CFStringRef v10 = v9;
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kErrorTypeMap[*a3]);
      p_p = &__p;
      char v11 = std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 88), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      possibleCorrectionsForErrorString(v10, (uint64_t)v11 + 56, *(const __CFLocale **)(a1 + 24), &v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      CFRelease(v10);
      std::vector<std::string>::pointer begin = v19.__begin_;
      for (std::vector<std::string>::pointer i = v19.__end_; begin != i; ++begin)
      {
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v14 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFArrayRef v15 = &__p;
        }
        else {
          CFArrayRef v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        CFStringRef v16 = CFStringCreateWithCString(v6, (const char *)v15, 0x8000100u);
        if (v16)
        {
          CFArrayAppendValue(v8, v16);
          CFRelease(v16);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
  }
  return v8;
}

void sub_1A43A09F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *NL::ResourceCreationException::ResourceCreationException(void *a1, long long *a2)
{
  *a1 = &unk_1EF7CDD58;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1A43A0AB0(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void NL::ResourceCreationException::~ResourceCreationException(std::exception *this)
{
  NL::ResourceCreationException::~ResourceCreationException(this);

  JUMPOUT(0x1A625B130);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1EF7CDD58;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

uint64_t NL::ResourceCreationException::what(NL::ResourceCreationException *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  CFAllocatorRef v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  CFAllocatorRef v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&__p, 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1A43A0CA4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<std::string>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<std::string>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  CFAllocatorRef v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  CFAllocatorRef v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&__p, 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1A43A0EF0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__124(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4_Block_object_dispose(&__p, 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__125(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4_Block_object_dispose(&__p, 8) = v2;
    operator delete(v2);
  }
}

__n128 ___ZL26sentenceRangeForErrorIndexPvPK10__CFLocalePK10__CFStringl_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48)
     + *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != *(void *)a2
    || (*(void *)(a2 + 16) & 0x410) != 0x10)
  {
    long long v4 = *(void **)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = (char *)v4[6];
    unint64_t v10 = v4[7];
    if ((unint64_t)v8 < v10)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
      goto LABEL_7;
    }
    uint64_t v12 = v4[5];
    uint64_t v13 = (uint64_t)&v8[-v12] >> 4;
    unint64_t v14 = v13 + 1;
    if (!((unint64_t)(v13 + 1) >> 60))
    {
      uint64_t v15 = v10 - v12;
      if (v15 >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        CFLocaleRef v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)(v4 + 7), v16);
      }
      else {
        CFLocaleRef v17 = 0;
      }
      unint64_t v18 = &v17[16 * v13];
      std::vector<std::string> v19 = &v17[16 * v16];
      *(_OWORD *)unint64_t v18 = *(_OWORD *)a2;
      uint64_t v11 = v18 + 16;
      CFIndex v21 = (char *)v4[5];
      CFIndex v20 = (char *)v4[6];
      if (v20 != v21)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
          v18 -= 16;
          v20 -= 16;
        }
        while (v20 != v21);
        CFIndex v20 = (char *)v4[5];
      }
      v4[5] = v18;
      goto LABEL_34;
    }
LABEL_37:
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) -= 16;
  long long v4 = *(void **)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = *(void *)(a2 + 8) + *(void *)(v5 + 48);
  uint64_t v8 = (char *)v4[6];
  unint64_t v9 = v4[7];
  if ((unint64_t)v8 < v9)
  {
    *(void *)uint64_t v8 = v6;
    *((void *)v8 + 1) = v7;
LABEL_7:
    uint64_t v11 = v8 + 16;
    goto LABEL_36;
  }
  CFIndex v20 = (char *)v4[5];
  uint64_t v22 = (v8 - v20) >> 4;
  unint64_t v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 60) {
    goto LABEL_37;
  }
  uint64_t v24 = v9 - (void)v20;
  if (v24 >> 3 > v23) {
    unint64_t v23 = v24 >> 3;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v25 = v23;
  }
  if (v25)
  {
    CFLocaleRef v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<NL::ParseIntent>>>((uint64_t)(v4 + 7), v25);
    CFIndex v20 = (char *)v4[5];
    uint64_t v8 = (char *)v4[6];
  }
  else
  {
    CFLocaleRef v26 = 0;
  }
  int v27 = &v26[16 * v22];
  std::vector<std::string> v19 = &v26[16 * v25];
  *(void *)int v27 = v6;
  *((void *)v27 + 1) = v7;
  uint64_t v11 = v27 + 16;
  if (v8 != v20)
  {
    do
    {
      *((_OWORD *)v27 - 1) = *((_OWORD *)v8 - 1);
      v27 -= 16;
      v8 -= 16;
    }
    while (v8 != v20);
    CFIndex v20 = (char *)v4[5];
  }
  v4[5] = v27;
LABEL_34:
  v4[6] = v11;
  v4[7] = v19;
  if (v20) {
    operator delete(v20);
  }
LABEL_36:
  v4[6] = v11;
  uint64_t v28 = *(void *)(*(void *)(a1 + 32) + 8);
  __n128 result = *(__n128 *)a2;
  *(void *)(v28 + 56) = *(void *)(a2 + 16);
  *(__n128 *)(v28 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = result;
  return result;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<std::string>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  uint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1A43A12DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    long long v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1A43A1358(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&__p, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t std::map<std::string,float>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(&__p, 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1A43A1420(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

float std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&__p, 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  long long v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  float result = *(float *)(a2 + 24);
  *((float *)v6 + 14) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1A43A1548(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      long long v7 = (unsigned __int8 *)a3;
    }
    else {
      long long v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1A43A172C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A43A17A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&__p, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *unint64_t v9 = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + _Block_object_dispose(&__p, 8) = 0;
    *((void *)v7 + 7) = v7 + 4;
    char v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

NL::AssetResource *NL::AssetResource::AssetResource(NL::AssetResource *this, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4)
{
  *((void *)this + 1) = 0;
  uint64_t v7 = (const void **)((char *)this + 8);
  *((void *)this + 2) = 0;
  size_t v8 = (const void **)((char *)this + 16);
  *(void *)this = 0;
  if (cf)
  {
    CFTypeRef v9 = CFRetain(cf);
    nlp::CFScopedPtr<__CFURL const*>::reset((const void **)this, v9);
  }
  if (a3)
  {
    CFTypeRef v10 = CFRetain(a3);
    nlp::CFScopedPtr<__CFLocale const*>::reset(v7, v10);
  }
  if (a4)
  {
    CFTypeRef v11 = CFRetain(a4);
    nlp::CFScopedPtr<__CFString const*>::reset(v8, v11);
  }
  return this;
}

void sub_1A43A1924(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset(v3, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v2, 0);
  nlp::CFScopedPtr<__CFURL const*>::reset(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t NL::AssetResource::URL(NL::AssetResource *this)
{
  return *(void *)this;
}

void *NL::AssetResource::path@<X0>(const __CFURL **this@<X0>, void *a2@<X8>)
{
  CFURLRef v2 = *this;
  if (v2) {
    getFileSystemRepresentationFromCFURL(v2);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

BOOL NL::AssetResource::exists(const __CFURL **this)
{
  NL::AssetResource::path(this, __p);
  if (v6 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  int v2 = open((const char *)v1, 0);
  int v3 = v2;
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3 >= 0;
}

void sub_1A43A19E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NL::AssetResourceManager *NL::AssetResourceManager::AssetResourceManager(NL::AssetResourceManager *this)
{
  *(unsigned char *)this = 0;
  *((_DWORD *)this + 2) = 0;
  int v2 = (int *)((char *)this + 8);
  *((_DWORD *)this + 1) = 0;
  int v3 = (int *)((char *)this + 4);
  unint64_t v4 = dispatch_queue_create("com.apple.NLP.assetmanager", 0);
  *((void *)this + 2) = v4;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = ___ZN2NL20AssetResourceManagerC2Ev_block_invoke;
  handler[3] = &__block_descriptor_tmp_8;
  handler[4] = this;
  notify_register_dispatch("com.apple.MobileAsset.LinguisticData.new-asset-installed", v3, v4, handler);
  unint64_t v5 = *((void *)this + 2);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN2NL20AssetResourceManagerC2Ev_block_invoke_2;
  void v7[3] = &__block_descriptor_tmp_3_0;
  void v7[4] = this;
  notify_register_dispatch("com.apple.MobileAsset.LinguisticData.cached-metadata-updated", v2, v5, v7);
  return this;
}

uint64_t ___ZN2NL20AssetResourceManagerC2Ev_block_invoke(uint64_t result)
{
  **(unsigned char **)(result + 32) = 1;
  return result;
}

uint64_t ___ZN2NL20AssetResourceManagerC2Ev_block_invoke_2(uint64_t result)
{
  **(unsigned char **)(result + 32) = 1;
  return result;
}

void NL::AssetResourceManager::~AssetResourceManager(NL::AssetResourceManager *this)
{
  notify_cancel(*((_DWORD *)this + 1));
  notify_cancel(*((_DWORD *)this + 2));
  int v2 = *((void *)this + 2);
  if (v2) {
    dispatch_release(v2);
  }
}

uint64_t NL::AssetResourceManager::checkHasUpdatedAssetsAndReset(NL::AssetResourceManager *this)
{
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  uint64_t v1 = *((void *)this + 2);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  std::regex_traits<char> v4[2] = ___ZN2NL20AssetResourceManager29checkHasUpdatedAssetsAndResetEv_block_invoke;
  v4[3] = &unk_1E5B36AD0;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZN2NL20AssetResourceManager29checkHasUpdatedAssetsAndResetEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(unsigned char **)(result + 40);
  if (*v1)
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *uint64_t v1 = 0;
  }
  return result;
}

void NL::AssetResourceManager::enumerateAssetResourcesWithContentTypeOfType()
{
  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x2000000000;
  char v1 = 0;
  LDEnumerateAssetDataItems();
  _Block_object_dispose(v0, 8);
}

void sub_1A43A1D00(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN2NL20AssetResourceManager44enumerateAssetResourcesWithContentTypeOfTypeEPK10__CFLocalePK10__CFStringjU13block_pointerFvNSt3__110shared_ptrINS_13AssetResourceEEEPbE_block_invoke(uint64_t a1, const void *a2, int a3, const void *a4, const __CFString *a5, unsigned char *a6)
{
  CFTypeRef v15 = a4;
  CFTypeRef v16 = a2;
  if (a3 == 2)
  {
    if ((*(unsigned char *)(a1 + 56) & 8) == 0) {
      return;
    }
  }
  else if (a3 == 1)
  {
    if ((*(unsigned char *)(a1 + 56) & 4) == 0) {
      return;
    }
  }
  else if (a3 || (*(unsigned char *)(a1 + 56) & 2) == 0)
  {
    return;
  }
  if (CFStringsAreEqual(a5, *(const __CFString **)(a1 + 48)))
  {
    CFTypeRef cf = CFURLCopyLastPathComponent((CFURLRef)a2);
    std::allocate_shared[abi:ne180100]<NL::AssetResource,std::allocator<NL::AssetResource>,__CFURL const*&,__CFLocale const*&,nlp::CFScopedPtr<__CFString const*> &,void>(&v16, &v15, &cf, &v12);
    if (NL::AssetResource::exists((const __CFURL **)v12))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      CFTypeRef v10 = v12;
      CFTypeRef v11 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, NL::AssetResource **, uint64_t))(v9 + 16))(v9, &v10, *(void *)(*(void *)(a1 + 40) + 8) + 24);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
    *a6 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1A43A1E34(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void NL::AssetResourceManager::createAssetResourceOfType(void *a1@<X8>)
{
  uint64_t v7 = 0;
  char v8 = &v7;
  uint64_t v9 = 0x3802000000;
  CFTypeRef v10 = __Block_byref_object_copy__9;
  uint64_t v12 = 0;
  char v13 = 0;
  CFTypeRef v11 = __Block_byref_object_dispose__9;
  NL::AssetResourceManager::enumerateAssetResourcesWithContentTypeOfType();
  uint64_t v6 = v8[6];
  *a1 = v8[5];
  a1[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(&v7, 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1A43A1F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = result;
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 4_Block_object_dispose(&__p, 8) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN2NL20AssetResourceManager25createAssetResourceOfTypeEPK10__CFLocalePK10__CFStringS6_j_block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  CFStringRef v4 = *(const __CFString **)(*a2 + 16);
  if (v4)
  {
    CFStringRef v6 = *(const __CFString **)(a1 + 40);
    if (v6)
    {
      if (CFStringFind(v4, v6, 0).location != -1)
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v10 = *a2;
        uint64_t v9 = a2[1];
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        CFTypeRef v11 = *(std::__shared_weak_count **)(v8 + 48);
        *(void *)(v8 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v10;
        *(void *)(v8 + 4_Block_object_dispose(&__p, 8) = v9;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        *a3 = 1;
      }
    }
  }
}

void NL::AssetResourceManager::createAssetResourceFromBundle(NL::AssetResourceManager *this@<X0>, const __CFString *a2@<X1>, const __CFString *a3@<X2>, const __CFString *a4@<X3>, void *a5@<X8>)
{
  CFStringRef v12 = a2;
  CFTypeRef v13 = this;
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.NLP");
  CFTypeRef cf = CFBundleCopyResourceURL(BundleWithIdentifier, a2, a3, a4);
  std::allocate_shared[abi:ne180100]<NL::AssetResource,std::allocator<NL::AssetResource>,nlp::CFScopedPtr<__CFURL const*> &,__CFLocale const*&,__CFString const*&,void>(&cf, &v13, (CFTypeRef *)&v12, a5);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1A43A20C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void NL::AssetResourceManager::createAssetResourceFromPathWithName(NL::AssetResourceManager *this@<X0>, CFURLRef baseURL@<X1>, CFStringRef URLString@<X2>, void *a4@<X8>)
{
  CFTypeRef v7 = URLString;
  CFTypeRef v8 = this;
  CFTypeRef cf = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], URLString, baseURL);
  std::allocate_shared[abi:ne180100]<NL::AssetResource,std::allocator<NL::AssetResource>,nlp::CFScopedPtr<__CFURL const*> &,__CFLocale const*&,__CFString const*&,void>(&cf, &v8, &v7, a4);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1A43A214C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void *std::allocate_shared[abi:ne180100]<NL::AssetResource,std::allocator<NL::AssetResource>,__CFURL const*&,__CFLocale const*&,nlp::CFScopedPtr<__CFString const*> &,void>@<X0>(CFTypeRef *a1@<X1>, CFTypeRef *a2@<X2>, CFTypeRef *a3@<X3>, void *a4@<X8>)
{
  CFTypeRef v8 = operator new(0x30uLL);
  __n128 result = std::__shared_ptr_emplace<NL::AssetResource>::__shared_ptr_emplace[abi:ne180100]<__CFURL const*&,__CFLocale const*&,nlp::CFScopedPtr<__CFString const*> &,std::allocator<NL::AssetResource>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1A43A21C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<NL::AssetResource>::__shared_ptr_emplace[abi:ne180100]<__CFURL const*&,__CFLocale const*&,nlp::CFScopedPtr<__CFString const*> &,std::allocator<NL::AssetResource>,0>(void *a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF7CE658;
  NL::AssetResource::AssetResource((NL::AssetResource *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1A43A222C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NL::AssetResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NL::AssetResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF7CE658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1A625B130);
}

void std::__shared_ptr_emplace<NL::AssetResource>::__on_zero_shared(uint64_t a1)
{
  std::allocator<NL::AssetResource>::destroy[abi:ne180100]((uint64_t)&v1, (const void **)(a1 + 24));
}

void std::allocator<NL::AssetResource>::destroy[abi:ne180100](uint64_t a1, const void **a2)
{
  nlp::CFScopedPtr<__CFString const*>::reset(a2 + 2, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(a2 + 1, 0);

  nlp::CFScopedPtr<__CFURL const*>::reset(a2, 0);
}

void *std::allocate_shared[abi:ne180100]<NL::AssetResource,std::allocator<NL::AssetResource>,nlp::CFScopedPtr<__CFURL const*> &,__CFLocale const*&,__CFString const*&,void>@<X0>(CFTypeRef *a1@<X1>, CFTypeRef *a2@<X2>, CFTypeRef *a3@<X3>, void *a4@<X8>)
{
  CFTypeRef v8 = operator new(0x30uLL);
  __n128 result = std::__shared_ptr_emplace<NL::AssetResource>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFURL const*> &,__CFLocale const*&,__CFString const*&,std::allocator<NL::AssetResource>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1A43A2390(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<NL::AssetResource>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFURL const*> &,__CFLocale const*&,__CFString const*&,std::allocator<NL::AssetResource>,0>(void *a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF7CE658;
  NL::AssetResource::AssetResource((NL::AssetResource *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1A43A23F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::NLGenericTransliterator(NLGenericTransliterator *this, const __CFDictionary *a2)
{
  *(void *)this = &unk_1EF7CD130;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 2_Block_object_dispose(&__p, 8) = 1065353216;
  *(_OWORD *)((char *)this + 12nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = xmmword_1A43F7930;
  *((_DWORD *)this + 34) = 2;
  *((void *)this + 1_Block_object_dispose(&__p, 8) = 0xC03E000000000000;
  *((void *)this + 19) = 0x3E800000005;
  *((_DWORD *)this + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = 3;
  *((void *)this + 21) = 0x3FF3333333333333;
  *((void *)this + 22) = 0x1F40000000ALL;
  operator new();
}

void sub_1A43A2620(_Unwind_Exception *a1)
{
  MEMORY[0x1A625B130](v2, 0xE1C40D30581F4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::~NLGenericTransliterator(NLGenericTransliterator *this)
{
  *(void *)this = &unk_1EF7CD130;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *uint64_t v2 = &unk_1EF7CD0F8;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::~__hash_table((uint64_t)(v2 + 16));
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(v2 + 11));
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(v2 + 6));
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::~__hash_table((uint64_t)(v2 + 1));
    MEMORY[0x1A625B130](v2, 0x10A1C405853761CLL);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (NLAbstractDictionaryLookup *)*((void *)this + 7);
  if (v9)
  {
    NLAbstractDictionaryLookup::~NLAbstractDictionaryLookup(v9);
    MEMORY[0x1A625B130]();
  }
  uint64_t v10 = (NLAbstractDictionaryLookup *)*((void *)this + 8);
  if (v10)
  {
    NLAbstractDictionaryLookup::~NLAbstractDictionaryLookup(v10);
    MEMORY[0x1A625B130]();
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 80);
}

{
  uint64_t vars8;

  NLGenericTransliterator::~NLGenericTransliterator(this);

  JUMPOUT(0x1A625B130);
}

BOOL NLGenericTransliterator::isPresentInTargetLexicon(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString = createCFStringFromString(a2);
  (*(void (**)(void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16));
  LODWORD(a1) = LMLanguageModelGetTokenIDForString();
  CFRelease(CFStringFromString);
  return a1 != 0;
}

void NLGenericTransliterator::acceptCandidateInDynamicLanguageModel(uint64_t a1, void *a2, NLTransliterationCandidate *this)
{
  uint64_t TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(this);
  CFStringRef CFStringFromString = createCFStringFromString(TransliteratedWord);
  (*(void (**)(void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16));
  int TokenIDForString = LMLanguageModelGetTokenIDForString();
  if (!TokenIDForString)
  {
    (*(void (**)(void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16));
    uint64_t v7 = (NL::CFLogger *)LMLanguageModelAddTokenForString();
    int v8 = (int)v7;
    uint64_t v9 = NL::CFLogger::sharedInstance(v7);
    if (v8)
    {
      int v10 = TokenIDForString;
      getUTF8StringFromCFString(CFStringFromString, __p);
      CFTypeRef v11 = v14 >= 0 ? (const char *)__p : (const char *)__p[0];
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v9 + 16))(v9, 7, "Token ID: %u added\t for %s", v10, v11);
    }
    else
    {
      getUTF8StringFromCFString(CFStringFromString, __p);
      CFStringRef v12 = v14 >= 0 ? (const char *)__p : (const char *)__p[0];
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v9 + 16))(v9, 3, "Could not add %s in dynamic language model", v12);
    }
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a2[1] != *a2) {
    operator new[]();
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16));
  LMLanguageModelIncrementUsageCount();
  CFRelease(CFStringFromString);
}

void sub_1A43A2C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NLGenericTransliterator::flushDynamicData(NLGenericTransliterator *this)
{
  uint64_t v1 = (*(uint64_t (**)(void))(**((void **)this + 2) + 56))(*((void *)this + 2));

  return MEMORY[0x1F412A190](v1, 0);
}

uint64_t NLGenericTransliterator::resetDynamicData(NLGenericTransliterator *this)
{
  uint64_t v1 = (*(uint64_t (**)(void))(**((void **)this + 2) + 56))(*((void *)this + 2));

  return MEMORY[0x1F412A1F8](v1, 0);
}

void NLGenericTransliterator::reRankOOVCandidates(uint64_t a1, int a2, uint64_t *a3)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v6 = *a3;
    uint64_t v5 = a3[1];
    unint64_t v7 = (unint64_t)(v5 - *a3) >> 3;
    if (*(_DWORD *)(a1 + 180) >= (int)v7) {
      int v8 = (unint64_t)(v5 - *a3) >> 3;
    }
    else {
      int v8 = *(_DWORD *)(a1 + 180);
    }
    int v9 = a2 - v8;
    if (a2 >= v8)
    {
      uint64_t v10 = a2;
    }
    else
    {
      uint64_t v10 = a2;
      unint64_t v11 = a2;
      do
      {
        if (v11 >= (a3[1] - *a3) >> 3) {
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(*a3 + 8 * v11));
        if (*(char *)(TransliteratedWord + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)TransliteratedWord, *(void *)(TransliteratedWord + 8));
        }
        else
        {
          long long v13 = *(_OWORD *)TransliteratedWord;
          v22.__r_.__value_.__r.__words[2] = *(void *)(TransliteratedWord + 16);
          *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
        }
        stringToUTF32Characters((uint64_t *)&v22, (int **)__p);
        (*(void (**)(void, std::string *))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), &v22);
        if (v11 >= (a3[1] - *a3) >> 3) {
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        NLTransliterationCandidate::setCharLMScore(*(void *)(*a3 + 8 * v11), v14);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        ++v11;
      }
      while (!__CFADD__(v9++, 1));
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      unint64_t v7 = (unint64_t)(v5 - *a3) >> 3;
    }
    CFTypeRef v16 = (uint64_t *)(v6 + 8 * v10);
    CFLocaleRef v17 = (uint64_t *)(v5 - 8 * ((int)v7 - v8));
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)NLTransliteratorUtils::greater_than_key_oov;
    if ((char *)v17 - (char *)v16 < 1025)
    {
      unint64_t v18 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      unint64_t v18 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<NLTransliterationCandidate *>(v17 - v16);
      uint64_t v20 = v19;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(v16, v17, (uint64_t (**)(uint64_t, uint64_t))&v22, v17 - v16, v18, v20);
    if (v18) {
      operator delete(v18);
    }
  }
}

void sub_1A43A2E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::preProcessForCanonicalization(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  (***(void (****)(std::string *__return_ptr))(a1 + 64))(&v5);
  if (!std::string::compare(&v5, ""))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    *a3 = v5;
    memset(&v5, 0, sizeof(v5));
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_1A43A2F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::getTargetNumberString(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    for (std::string::size_type i = 0; i < v11; ++i)
    {
      std::string::const_reference v8 = std::string::at((const std::string *)a2, i);
      (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 80))(__p, a1, (*v8 - 48));
      if ((v13 & 0x80u) == 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        std::string::size_type v10 = v13;
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(a3, (const std::string::value_type *)v9, v10);
      if ((char)v13 < 0) {
        operator delete(__p[0]);
      }
      std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
      if ((v11 & 0x80u) != 0) {
        std::string::size_type v11 = *(void *)(a2 + 8);
      }
    }
  }
}

void sub_1A43A30B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::getTargetDigit(NLGenericTransliterator *this@<X0>, int __val@<W1>, std::string *a3@<X8>)
{
  std::to_string(a3, __val);
  (*(void (**)(NLAbstractOrthographyConvertor **__return_ptr))(**((void **)this + 1) + 32))(v6);
  if (v6[1] != v6[0])
  {
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v6[0]);
    std::string::operator=(a3, v5);
  }
  unint64_t v7 = v6;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
}

void sub_1A43A317C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::makeNumericLattice(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, uint64_t *a5)
{
  memset(v19, 0, sizeof(v19));
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 80))(v17);
  NLExtendedString::NLExtendedString(__p, v17, *a3, 1.0);
  std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)v19, (long long *)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *a3;
  unsigned __int8 v10 = *(unsigned char *)(a2 + v9);
  char v14 = 1;
  LOWORD(v13) = v10;
  NLExtendedString::NLExtendedString(__p, &v13, v9, 1.0);
  std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)v19, (long long *)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v11 = a5[1];
  if (v11 >= a5[2])
  {
    uint64_t v12 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(a5, v19);
  }
  else
  {
    std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)a5, v19);
    uint64_t v12 = v11 + 24;
  }
  a5[1] = v12;
  ++*a4;
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  __p[0] = v19;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1A43A3308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  a16 = (void *)(v30 - 56);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::makePunctuationLattice(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, uint64_t *a5)
{
  memset(v15, 0, sizeof(v15));
  uint64_t v7 = *a3;
  unsigned __int8 v8 = *(unsigned char *)(a2 + v7);
  char v14 = 1;
  LOWORD(v13) = v8;
  NLExtendedString::NLExtendedString(__p, &v13, v7, 1.0);
  std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)v15, (long long *)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v9 = a5[1];
  if (v9 >= a5[2])
  {
    uint64_t v10 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(a5, v15);
  }
  else
  {
    std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)a5, v15);
    uint64_t v10 = v9 + 24;
  }
  a5[1] = v10;
  ++*a4;
  if (v14 < 0) {
    operator delete(v13);
  }
  __p[0] = v15;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1A43A3460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  a9 = (void *)(v23 - 56);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::addAbbreviationCandidates(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v7 = 0;
    do
    {
      NLCommons::split((const std::string *)(v5 + 24 * v7), 0x20u, &v11);
      uint64_t v8 = v11;
      if (v12 != v11)
      {
        unint64_t v9 = 0;
        do
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a5, (unsigned __int8 *)(v8 + 24 * v9)))
          {
            if (0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3) > v9)
            {
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a5, (unsigned __int8 *)(v11 + 24 * v9), v11 + 24 * v9);
              operator new();
            }
            std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
          }
          ++v9;
          uint64_t v8 = v11;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3) > v9);
      }
      unsigned __int8 v13 = (void **)&v11;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
      ++v7;
      uint64_t v5 = *a3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v7);
  }
}

void sub_1A43A36DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t NLGenericTransliterator::getLetterType(NLGenericTransliterator *this, NLCommons *a2, int8x16_t a3)
{
  if (NLCommons::isVowel(a2, a3)) {
    return 1;
  }
  if (NLCommons::isConsonant(a2)) {
    return 2;
  }
  if (NLCommons::isPunct(a2, v5)) {
    return 3;
  }
  if ((a2 & 0x80000000) == 0
    && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a2 + 60) & 0x400) != 0)
  {
    return 4;
  }
  return 0;
}

void NLGenericTransliterator::createTransliterationCandidates(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  uint64_t v7 = *a3;
  if (a3[1] == *a3)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    unint64_t v26 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(v7 + 8 * v9));
      uint64_t v11 = v28;
      if ((unint64_t)v28 >= v29)
      {
        unsigned __int8 v13 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v27, (long long *)TransliteratedWord);
      }
      else
      {
        if (*(char *)(TransliteratedWord + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)TransliteratedWord, *(void *)(TransliteratedWord + 8));
        }
        else
        {
          long long v12 = *(_OWORD *)TransliteratedWord;
          v28->__r_.__value_.__r.__words[2] = *(void *)(TransliteratedWord + 16);
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
        }
        unsigned __int8 v13 = v11 + 1;
      }
      uint64_t v28 = v13;
      ++v9;
      uint64_t v7 = *a3;
      uint64_t v14 = a3[1];
    }
    while (v9 < (v14 - *a3) >> 3);
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    if (v14 != v7)
    {
      unint64_t v15 = 0;
      do
      {
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(*(NLAbstractOrthographyConvertor **)(v7 + 8 * v15));
        CFLocaleRef v17 = v25;
        if ((unint64_t)v25 >= v26)
        {
          uint64_t v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v24, (long long *)v16);
        }
        else
        {
          if (*(char *)(v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
          }
          else
          {
            long long v18 = *(_OWORD *)v16;
            v25->__r_.__value_.__r.__words[2] = *(void *)(v16 + 16);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          uint64_t v19 = v17 + 1;
        }
        unint64_t v25 = v19;
        ++v15;
        uint64_t v7 = *a3;
      }
      while (v15 < (a3[1] - *a3) >> 3);
    }
  }
  if (std::string::compare((const std::string *)a2, ""))
  {
    unint64_t v20 = *(unsigned __int8 *)(a2 + 23);
    if ((v20 & 0x80u) != 0) {
      unint64_t v20 = *(void *)(a2 + 8);
    }
    if (v20 <= a1[30])
    {
      memset(&v23, 0, sizeof(v23));
      (*(void (**)(void **__return_ptr, int *, uint64_t))(*(void *)a1 + 200))(__p, a1, a2);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(void *)(a2 + 16) = v22;
      (*(void (**)(int *, uint64_t))(*(void *)a1 + 88))(a1, a2);
      NLTransliteratorUtils::separateByNonAlphanumericDelimeter();
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  __p[0] = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1A43A5018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a31);
  a31 = &a40;
  std::vector<NLLatticePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = &a43;
  std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = &a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (a54 < 0) {
    operator delete(a49);
  }
  a31 = &a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  a31 = &a71;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = (void *)(v71 - 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = (void *)(v71 - 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = (void *)(v71 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void NLLatticePath::~NLLatticePath(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t NLGenericTransliterator::isOrthographyCorrect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v13 = 0;
  CFTypeRef cf = 0;
  NLCommons::normalize(a2, &v11);
  if (!std::string::compare(&v11, ""))
  {
    uint64_t v7 = 0;
  }
  else
  {
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int8x16_t v5 = &v11;
    }
    else {
      int8x16_t v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v5, 0x8000100u);
    if (v6)
    {
      uint64_t v7 = (*(uint64_t (**)(void, CFStringRef, const __CFString **, CFTypeRef *))(**(void **)(a1 + 48)
                                                                                            + 16))(*(void *)(a1 + 48), v6, &v13, &cf);
      if (v13)
      {
        getUTF8StringFromCFString(v13, &v9);
        if (*(char *)(a3 + 23) < 0) {
          operator delete(*(void **)a3);
        }
        *(_OWORD *)a3 = v9;
        *(void *)(a3 + 16) = v10;
        CFRelease(v13);
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1A43A5570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::evaluatePaths(uint64_t a1, uint64_t *a2, NLLatticePath *this, int a4, int a5, int a6, uint64_t *a7, unint64_t a8, char a9, int a10, uint64_t a11)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > a5)
  {
    unint64_t v12 = a5;
    uint64_t v14 = (uint64_t *)(*a2 + 24 * a5);
    uint64_t v13 = *v14;
    if (0xAAAAAAAAAAAAAAABLL * ((v14[1] - *v14) >> 4) > a6)
    {
      unint64_t v21 = a6;
      if (NLLatticePath::appendPathString((std::string *)this, (const NLExtendedString *)(v13 + 48 * a6)))
      {
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v12) {
LABEL_63:
        }
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        long long v22 = (void *)(*a2 + 24 * (int)v12);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22[1] - *v22) >> 4) <= v21) {
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        double Weight = NLExtendedString::getWeight((NLExtendedString *)(*v22 + 48 * (int)v21));
        NLLatticePath::addPathScore(this, Weight);
        long long v58 = 0uLL;
        std::string::size_type v59 = 0;
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
        if (std::string::compare(v24, ""))
        {
          if (a9)
          {
            NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
            if (((*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 160))(a1, v25, &v58) & 1) == 0)
            {
              NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
              if ((NLCommons::isNumeric(v26) & 1) == 0) {
                goto LABEL_21;
              }
            }
          }
        }
        if (*(_DWORD *)(a1 + 152) < a5)
        {
          double v27 = *(double *)(a11 + 8 * v12);
          if (fabs(v27) != INFINITY && v27 < *(double *)(a1 + 144)) {
            goto LABEL_21;
          }
        }
        uint64_t v28 = *(void *)(a1 + 40);
        if (!v28 || *(_DWORD *)(a1 + 160) >= a5 || *(_DWORD *)(a1 + 156) >= a10) {
          goto LABEL_20;
        }
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
        double v30 = (*(double (**)(uint64_t, uint64_t))(*(void *)v28 + 32))(v28, v29);
        double v31 = *(double *)(a11 + 8 * v12);
        if (v30 > v31)
        {
          *(double *)(a11 + 8 * v12) = v30;
          double v31 = v30;
        }
        if (v31 == 0.0 || v30 / v31 <= *(double *)(a1 + 168)) {
LABEL_20:
        }
          char v32 = 1;
        else {
LABEL_21:
        }
          char v32 = 0;
        if (SHIBYTE(v59) < 0)
        {
          operator delete((void *)v58);
          if ((v32 & 1) == 0) {
            return;
          }
        }
        else if ((v32 & 1) == 0)
        {
          return;
        }
        unint64_t v33 = v12 + 1;
        uint64_t v34 = *a2;
        unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
        if (v35 == v12 + 1)
        {
          NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
          if (!std::string::compare(v36, "") || (a9 & 1) != 0)
          {
            unint64_t v48 = a7[1];
            if (v48 >= a7[2])
            {
              uint64_t v49 = std::vector<NLLatticePath>::__push_back_slow_path<NLLatticePath const&>(a7, (long long *)this);
            }
            else
            {
              std::allocator<NLLatticePath>::construct[abi:ne180100]<NLLatticePath,NLLatticePath const&>(a7 + 16, (std::string *)a7[1], (long long *)this);
              uint64_t v49 = v48 + 56;
              a7[1] = v48 + 56;
            }
            a7[1] = v49;
          }
          else
          {
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 304))(&v56, a1);
            NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(this);
            int v38 = *(char *)(v37 + 23);
            if (v38 >= 0) {
              int v39 = (const std::string::value_type *)v37;
            }
            else {
              int v39 = *(const std::string::value_type **)v37;
            }
            if (v38 >= 0) {
              std::string::size_type v40 = *(unsigned __int8 *)(v37 + 23);
            }
            else {
              std::string::size_type v40 = *(void *)(v37 + 8);
            }
            CFIndex v41 = std::string::append(&v56, v39, v40);
            long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            v57.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 304))(__p, a1);
            if ((v55 & 0x80u) == 0) {
              CFIndex v43 = __p;
            }
            else {
              CFIndex v43 = (void **)__p[0];
            }
            if ((v55 & 0x80u) == 0) {
              std::string::size_type v44 = v55;
            }
            else {
              std::string::size_type v44 = (std::string::size_type)__p[1];
            }
            uint64_t v45 = std::string::append(&v57, (const std::string::value_type *)v43, v44);
            long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
            std::string::size_type v59 = v45->__r_.__value_.__r.__words[2];
            long long v58 = v46;
            v45->__r_.__value_.__l.__size_ = 0;
            v45->__r_.__value_.__r.__words[2] = 0;
            v45->__r_.__value_.__r.__words[0] = 0;
            if ((char)v55 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v57.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v56.__r_.__value_.__l.__data_);
            }
            memset(&v57, 0, sizeof(v57));
            if ((*(unsigned int (**)(uint64_t, long long *, std::string *))(*(void *)a1 + 160))(a1, &v58, &v57))
            {
              std::vector<NLLatticePath>::push_back[abi:ne180100](a7, (long long *)this);
            }
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v57.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v59) < 0) {
              operator delete((void *)v58);
            }
          }
        }
        else if (v35 > v12 + 1)
        {
          unint64_t v47 = 0;
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v34 + 24 * v33 + 8) - *(void *)(v34 + 24 * v33)) >> 4) >= v47)
          {
            if (v47 < a8)
            {
              if (*((char *)this + 23) < 0) {
                std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)this, *((void *)this + 1));
              }
              else {
                std::string v51 = *(std::string *)this;
              }
              memset(&v52, 0, sizeof(v52));
              std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(&v52, *((long long **)this + 3), *((long long **)this + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 4));
              uint64_t v53 = *((void *)this + 6);
              HIDWORD(v5nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = a10;
              LOBYTE(v5nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = a9;
              (*(void (**)(uint64_t, uint64_t *, std::string *, void, unint64_t, unint64_t, uint64_t *, unint64_t, uint64_t, uint64_t))(*(void *)a1 + 112))(a1, a2, &v51, (a4 + 1), v33, v47, a7, a8, v50, a11);
              *(void *)&long long v58 = &v52;
              std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
              if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v51.__r_.__value_.__l.__data_);
              }
            }
            ++v47;
            uint64_t v34 = *a2;
            if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v33) {
              goto LABEL_63;
            }
          }
        }
      }
    }
  }
}

void sub_1A43A5B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  *(void *)(v37 + _Block_object_dispose(&__p, 8) = v38;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<NLLatticePath>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = a1 + 2;
  unint64_t v5 = *(v3 - 1);
  if (v5 >= v4)
  {
    uint64_t result = std::vector<NLLatticePath>::__push_back_slow_path<NLLatticePath const&>(a1, a2);
  }
  else
  {
    std::allocator<NLLatticePath>::construct[abi:ne180100]<NLLatticePath,NLLatticePath const&>((int)v3, (std::string *)*(v3 - 1), a2);
    uint64_t result = v5 + 56;
    a1[1] = v5 + 56;
  }
  a1[1] = result;
  return result;
}

void sub_1A43A5C5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&__p, 8) = v2;
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::postProcessForNewOrthography(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void NLGenericTransliterator::postProcessForPhonetics(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t NLGenericTransliterator::pruneLattice(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int MaximumLayerSize = NLTransliteratorUtils::getMaximumLayerSize(a2);
  uint64_t v5 = *a3;
  if (a3[1] == *a3) {
    return 1;
  }
  int v6 = MaximumLayerSize;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  LODWORD(v9) = 1;
  do
  {
    uint64_t v10 = v5 + v7;
    std::string v11 = *(uint64_t **)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = v12 - *(void *)v10;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 4);
    if (v13 < 1)
    {
      unint64_t v15 = 0;
      uint64_t v17 = 0;
    }
    else
    {
      unint64_t v15 = (long long *)std::get_temporary_buffer[abi:ne180100]<NLExtendedString>(0xAAAAAAAAAAAAAAABLL * (v13 >> 4));
      uint64_t v17 = v16;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(v11, v12, (uint64_t)&v23, v14, v15, v17);
    if (v15) {
      operator delete(v15);
    }
    uint64_t v18 = *a3;
    if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v8) {
      goto LABEL_16;
    }
    uint64_t v19 = (uint64_t *)(v18 + v7);
    int v20 = -1431655765 * ((*(void *)(v18 + v7 + 8) - *(void *)(v18 + v7)) >> 4);
    if (v6 < v20) {
      int v20 = v6;
    }
    std::vector<NLExtendedString>::resize(v19, v20);
    uint64_t v5 = *a3;
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
    if (v21 <= v8) {
LABEL_16:
    }
      std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    uint64_t v9 = -1431655765 * ((*(void *)(v5 + v7 + 8) - *(void *)(v5 + v7)) >> 4) * v9;
    ++v8;
    v7 += 24;
  }
  while (v21 > v8);
  return v9;
}

void sub_1A43A5E04(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<NLExtendedString>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<NLExtendedString>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 25) < 0) {
        operator delete(*(void **)(v3 - 48));
      }
      v3 -= 48;
    }
    a1[1] = v7;
  }
}

void NLGenericTransliterator::getBestCandidate(uint64_t a1, uint64_t *a2, int a3, int a4, const char *a5, uint64_t *a6)
{
  int v39 = 0;
  std::string::size_type v40 = 0;
  unint64_t v41 = 0;
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    size_t v35 = a3;
    uint64_t v13 = a4;
    while (1)
    {
      unint64_t v14 = (long long *)(v7 + v11);
      if (*(char *)(v7 + v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v14, *((void *)v14 + 1));
      }
      else
      {
        long long v15 = *v14;
        v36.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
      }
      long long v16 = *(_OWORD *)(v7 + v11 + 24);
      std::string::value_type v38 = *(unsigned char *)(v7 + v11 + 40);
      long long v37 = v16;
      int Pos = NLExtendedString::getPos((NLExtendedString *)&v36);
      if (!a3 && Pos == 1)
      {
        uint64_t v18 = v40;
        if ((unint64_t)v40 < v41)
        {
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_23;
          }
          goto LABEL_27;
        }
        goto LABEL_29;
      }
      int v19 = NLExtendedString::getPos((NLExtendedString *)&v36);
      if (a3 >= 1 && v19 == 2)
      {
        size_t v20 = strlen(a5) - 1;
        if (v20 > v35 && v20 != v13) {
          break;
        }
      }
      if (NLExtendedString::getPos((NLExtendedString *)&v36) == 3)
      {
        size_t v21 = strlen(a5);
        if (a3)
        {
          if (v21 - 1 == v13)
          {
            uint64_t v18 = v40;
            if ((unint64_t)v40 < v41)
            {
              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_23;
              }
              goto LABEL_27;
            }
            goto LABEL_29;
          }
        }
      }
      if (NLExtendedString::getPos((NLExtendedString *)&v36) == 4)
      {
        uint64_t v18 = v40;
        if ((unint64_t)v40 < v41)
        {
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_27;
          }
LABEL_23:
          std::string::__init_copy_ctor_external(v40, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
          goto LABEL_28;
        }
        goto LABEL_29;
      }
LABEL_31:
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      ++v12;
      uint64_t v7 = *a2;
      v11 += 48;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4) <= v12)
      {
        uint64_t v25 = v39;
        unint64_t v26 = v40;
        goto LABEL_37;
      }
    }
    uint64_t v18 = v40;
    if ((unint64_t)v40 < v41)
    {
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_23;
      }
LABEL_27:
      long long v22 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      v18->__r_.__value_.__r.__words[2] = v36.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v22;
LABEL_28:
      long long v23 = v37;
      v18[1].__r_.__value_.__s.__data_[16] = v38;
      *(_OWORD *)&v18[1].__r_.__value_.__l.__data_ = v23;
      uint64_t v24 = v18 + 2;
LABEL_30:
      std::string::size_type v40 = v24;
      goto LABEL_31;
    }
LABEL_29:
    uint64_t v24 = (std::string *)std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v39, (long long *)&v36);
    goto LABEL_30;
  }
  uint64_t v25 = 0;
  unint64_t v26 = 0;
LABEL_37:
  uint64_t v27 = (char *)v26 - (char *)v25;
  if (v27 == 48)
  {
    unint64_t v28 = a6[1];
    if (v28 >= a6[2])
    {
      uint64_t v29 = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>(a6, v25);
    }
    else
    {
      std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)a6, v25);
      uint64_t v29 = v28 + 48;
    }
    a6[1] = v29;
  }
  else if (0xAAAAAAAAAAAAAAABLL * (v27 >> 4) >= 2 && v40 != (std::string *)v25)
  {
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    unint64_t v33 = a6[1];
    do
    {
      uint64_t v34 = &v25[v31];
      if (v33 >= a6[2])
      {
        unint64_t v33 = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>(a6, v34);
      }
      else
      {
        std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)a6, v34);
        v33 += 48;
      }
      a6[1] = v33;
      ++v32;
      uint64_t v25 = v39;
      v31 += 3;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (char *)v39) >> 4) > v32);
  }
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_1A43A61DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::string __p = &a21;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *NLGenericTransliterator::getCharLexiconSet@<X0>(unsigned __int8 *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (uint64_t i = *((void *)this + 1) + 144;
        ;
        this = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, (unsigned __int8 *)(i + 16), i + 16))
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
  }
  return this;
}

void sub_1A43A6284(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void NLGenericTransliterator::getTransliterationForAbbreviation(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  if ((a2[23] & 0x80u) == 0) {
    BOOL v5 = a2;
  }
  else {
    BOOL v5 = *(unsigned __int8 **)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  unsigned __int8 v6 = *v5;
  if (*v5)
  {
    uint64_t v7 = v5 + 1;
    do
    {
      char v17 = 1;
      LOWORD(__p[0]) = v6;
      (*(void (**)(NLAbstractOrthographyConvertor **__return_ptr))(**(void **)(a1 + 8) + 32))(v15);
      if (v15[1] == v15[0])
      {
        std::string::size_type v9 = v17;
        uint64_t v10 = __p[1];
        BOOL v11 = v17 < 0;
        if (v17 >= 0) {
          unint64_t v12 = __p;
        }
        else {
          unint64_t v12 = (void **)__p[0];
        }
      }
      else
      {
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v15[0]);
        std::string::size_type v9 = *(unsigned __int8 *)(v8 + 23);
        uint64_t v10 = *(void **)(v8 + 8);
        BOOL v11 = (v9 & 0x80u) != 0;
        if ((v9 & 0x80u) == 0) {
          unint64_t v12 = (void **)v8;
        }
        else {
          unint64_t v12 = *(void ***)v8;
        }
      }
      if (v11) {
        std::string::size_type v13 = (std::string::size_type)v10;
      }
      else {
        std::string::size_type v13 = v9;
      }
      std::string::append(a3, (const std::string::value_type *)v12, v13);
      uint64_t v18 = v15;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      int v14 = *v7++;
      unsigned __int8 v6 = v14;
    }
    while (v14);
  }
}

void sub_1A43A63B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 + 23) < 0) {
    operator delete(*(void **)v19);
  }
  _Unwind_Resume(exception_object);
}

void NLGenericTransliterator::getAllSubParts(uint64_t a1@<X0>, std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v5 >= 0) {
    unsigned __int8 v6 = a2;
  }
  else {
    unsigned __int8 v6 = *(std::string::value_type **)a2;
  }
  double v30 = v6;
  uint64_t v31 = v4;
  int v29 = (int)exp2((double)(v4 - 1));
  if (v29 >= 1)
  {
    for (unsigned int i = 0; i != v29; ++i)
    {
      std::string::basic_string[abi:ne180100]<0>(&v35, "");
      std::string::basic_string[abi:ne180100]<0>(&v34, "");
      uint64_t v8 = v30;
      uint64_t v9 = v31;
      unsigned int v10 = i;
      if (v31 >= 1)
      {
        do
        {
          std::string::value_type v11 = *v8++;
          std::string::value_type v12 = v11;
          if (v10)
          {
            std::string::push_back(&v35, v12);
          }
          else
          {
            std::string::push_back(&v35, v12);
            std::string::size_type v13 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + 80), (unsigned __int8 *)&v35);
            if (*(void *)(a1 + 104) && !v13) {
              goto LABEL_54;
            }
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t size = v35.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
            if ((v33 & 0x80u) == 0) {
              long long v15 = __p;
            }
            else {
              long long v15 = (void **)__p[0];
            }
            if (size)
            {
              if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v16 = &v35;
              }
              else {
                long long v16 = (std::string *)v35.__r_.__value_.__r.__words[0];
              }
              memmove(v15, v16, size);
            }
            *(_WORD *)((char *)v15 + size) = 32;
            if ((v33 & 0x80u) == 0) {
              char v17 = __p;
            }
            else {
              char v17 = (void **)__p[0];
            }
            if ((v33 & 0x80u) == 0) {
              std::string::size_type v18 = v33;
            }
            else {
              std::string::size_type v18 = (std::string::size_type)__p[1];
            }
            std::string::append(&v34, (const std::string::value_type *)v17, v18);
            if ((char)v33 < 0) {
              operator delete(__p[0]);
            }
            MEMORY[0x1A625AE00](&v35, "");
          }
          v10 >>= 1;
          --v9;
        }
        while (v9);
      }
      uint64_t v19 = NLCommons::trim(&v34);
      std::string::operator=(&v34, v19);
      int v20 = a2[23];
      if (v20 >= 0) {
        size_t v21 = a2[23];
      }
      else {
        size_t v21 = *((void *)a2 + 1);
      }
      if (v20 >= 0) {
        long long v22 = a2;
      }
      else {
        long long v22 = *(std::string::value_type **)a2;
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = v34.__r_.__value_.__l.__size_;
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v34;
      }
      else {
        uint64_t v24 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if (v23 >= v21) {
        size_t v25 = v21;
      }
      else {
        size_t v25 = v23;
      }
      if (memcmp(v22, v24, v25) || v23 != v21) {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)&v34, (uint64_t)&v34);
      }
LABEL_54:
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1A43A6654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

uint64_t NLGenericTransliterator::createContextIDs(uint64_t a1, void *a2)
{
  if (a2[1] != *a2) {
    operator new[]();
  }
  return 0;
}

void sub_1A43A688C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NLGenericTransliterator::isCurrentEnglish(void **a1, uint64_t a2, uint64_t a3)
{
  unsigned int v12 = 0;
  uint64_t v5 = ((uint64_t (*)(void **, uint64_t, unsigned int *))(*a1)[30])(a1, a3, &v12);
  int v11 = 0;
  int v6 = (*(uint64_t (**)(void *, uint64_t, int *))(*a1[3] + 16))(a1[3], a2, &v11);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(*a1[4] + 16))(a1[4], a2, &v11)) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    BOOL v9 = 1;
    if (!v5) {
      return v9 & ~v6;
    }
    goto LABEL_9;
  }
  double v8 = (*(double (**)(void *, uint64_t, uint64_t, void))(*a1[3] + 24))(a1[3], a2, v5, v12);
  BOOL v9 = (*(double (**)(void *, uint64_t, uint64_t, void))(*a1[4] + 24))(a1[4], a2, v5, v12) > v8;
  if (v5) {
LABEL_9:
  }
    MEMORY[0x1A625B130](v5, 0x1000C4052888210);
  return v9 & ~v6;
}

void NLGenericTransliterator::preProcessForRomanSuffixes(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

uint64_t NLGenericTransliterator::shouldProcessForPhonetics()
{
  return 0;
}

uint64_t NLGenericTransliterator::shouldHandleNasalizationException()
{
  return 0;
}

uint64_t NLGenericTransliterator::addLatticeCandidates(void **a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void *a6, double *a7)
{
  v92[0] = 0;
  uint64_t v77 = ((uint64_t (*)(void **, uint64_t, unsigned int *))(*a1)[30])(a1, a4, v92);
  uint64_t v10 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v11 = 0;
    while (1)
    {
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v10 + 56 * v11));
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, v12))break; {
      ++v11;
      }
      uint64_t v10 = *a3;
      if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11) {
        goto LABEL_77;
      }
    }
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11
      || (std::string::size_type v13 = a1[2],
          NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11)),
          (*(void (**)(void *, uint64_t, uint64_t, void))(*v13 + 24))(v13, v14, v77, v92[0]),
          int v91 = 0,
          0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11))
    {
LABEL_153:
      std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    }
    double v16 = v15;
    char v17 = a1[2];
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
    if ((*(uint64_t (**)(void *, uint64_t, int *))(*v17 + 16))(v17, v18, &v91))
    {
      BOOL v19 = 1;
      goto LABEL_10;
    }
    if ((*(uint64_t (**)(void *))(*a1[2] + 56))(a1[2]))
    {
      BOOL v19 = fabs(v16) != INFINITY;
      if (v19)
      {
LABEL_10:
        if (v16 < *a7)
        {
          *a7 = v16;
          BOOL v19 = 1;
        }
      }
    }
    else
    {
      BOOL v19 = 0;
    }
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) > v11)
    {
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
      ((void (*)(std::vector<std::string> *__return_ptr, void **, uint64_t))(*a1)[26])(&v90, a1, v20);
      memset(&v89, 0, sizeof(v89));
      if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) > v11)
      {
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
        int v22 = *((char *)v21 + 23);
        if (SHIBYTE(v90.__end_cap_.__value_) >= 0) {
          std::vector<std::string>::pointer value_high = (std::vector<std::string>::pointer)HIBYTE(v90.__end_cap_.__value_);
        }
        else {
          std::vector<std::string>::pointer value_high = v90.__end_;
        }
        std::vector<std::string>::pointer begin = &v90;
        if (SHIBYTE(v90.__end_cap_.__value_) < 0) {
          std::vector<std::string>::pointer begin = v90.__begin_;
        }
        if (v22 >= 0) {
          size_t v25 = *((unsigned __int8 *)v21 + 23);
        }
        else {
          size_t v25 = (size_t)v21[1];
        }
        if (v22 >= 0) {
          unint64_t v26 = v21;
        }
        else {
          unint64_t v26 = *v21;
        }
        if (v25 >= (unint64_t)value_high) {
          size_t v27 = (size_t)value_high;
        }
        else {
          size_t v27 = v25;
        }
        if ((memcmp(begin, v26, v27) || (std::vector<std::string>::pointer)v25 != value_high)
          && ((unsigned int (*)(void **, std::vector<std::string> *, std::vector<std::string> *))(*a1)[20])(a1, &v90, &v89))
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)&v90))
          {
            LODWORD(v85.__begin_) = 0;
            (*(void (**)(void *, std::vector<std::string> *, std::vector<std::string> *))(*a1[2] + 16))(a1[2], &v90, &v85);
            (*(void (**)(void *, std::vector<std::string> *, uint64_t, void))(*a1[2] + 24))(a1[2], &v90, v77, v92[0]);
            operator new();
          }
          std::string __p = 0;
          uint64_t v87 = 0;
          uint64_t v88 = 0;
          std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(&__p, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
          ExistingCandidate = (NLTransliterationCandidate *)NLTransliteratorUtils::findExistingCandidate((uint64_t *)&__p, (uint64_t)&v90);
          if (__p)
          {
            uint64_t v87 = __p;
            operator delete(__p);
          }
          if (ExistingCandidate) {
            BOOL v29 = v19;
          }
          else {
            BOOL v29 = 0;
          }
          if (v29 && NLTransliterationCandidate::getType(ExistingCandidate) == 4)
          {
            double v30 = (*(double (**)(void *, std::vector<std::string> *, uint64_t, void))(*a1[2] + 24))(a1[2], &v90, v77, v92[0]);
            NLTransliterationCandidate::setType((uint64_t)ExistingCandidate, 1);
            NLTransliterationCandidate::setLMScore((uint64_t)ExistingCandidate, v30);
          }
        }
        if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) <= v11) {
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v31 = a1[9];
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
        (*(void (**)(std::vector<std::string> *__return_ptr, void *, uint64_t))(*v31 + 24))(&v85, v31, v32);
        if (SHIBYTE(v90.__end_cap_.__value_) < 0) {
          operator delete(v90.__begin_);
        }
        std::vector<std::string> v90 = v85;
        if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3) > v11)
        {
          NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*a3 + 56 * v11));
          int v34 = *((char *)v33 + 23);
          if (SHIBYTE(v90.__end_cap_.__value_) >= 0) {
            std::vector<std::string>::pointer end = (std::vector<std::string>::pointer)HIBYTE(v90.__end_cap_.__value_);
          }
          else {
            std::vector<std::string>::pointer end = v90.__end_;
          }
          std::string v36 = &v90;
          if (SHIBYTE(v90.__end_cap_.__value_) < 0) {
            std::string v36 = v90.__begin_;
          }
          if (v34 >= 0) {
            size_t v37 = *((unsigned __int8 *)v33 + 23);
          }
          else {
            size_t v37 = (size_t)v33[1];
          }
          if (v34 >= 0) {
            std::string::value_type v38 = v33;
          }
          else {
            std::string::value_type v38 = *v33;
          }
          if (v37 >= (unint64_t)end) {
            size_t v39 = (size_t)end;
          }
          else {
            size_t v39 = v37;
          }
          BOOL v40 = !memcmp(v36, v38, v39) && v37 == (void)end;
          if (!v40
            && ((unsigned int (*)(void **, std::vector<std::string> *, std::vector<std::string> *))(*a1)[20])(a1, &v90, &v89))
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)&v90))
            {
              LODWORD(v85.__begin_) = 0;
              (*(void (**)(void *, std::vector<std::string> *, std::vector<std::string> *))(*a1[2] + 16))(a1[2], &v90, &v85);
              (*(void (**)(void *, std::vector<std::string> *, uint64_t, void))(*a1[2] + 24))(a1[2], &v90, v77, v92[0]);
              operator new();
            }
            CFIndex v82 = 0;
            long long v83 = 0;
            uint64_t v84 = 0;
            std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(&v82, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
            unint64_t v41 = (NLTransliterationCandidate *)NLTransliteratorUtils::findExistingCandidate((uint64_t *)&v82, (uint64_t)&v90);
            if (v82)
            {
              long long v83 = v82;
              operator delete(v82);
            }
            if (v41) {
              BOOL v42 = v19;
            }
            else {
              BOOL v42 = 0;
            }
            if (v42 && NLTransliterationCandidate::getType(v41) == 4)
            {
              double v43 = (*(double (**)(void *, std::vector<std::string> *, uint64_t, void))(*a1[2] + 24))(a1[2], &v90, v77, v92[0]);
              NLTransliterationCandidate::setType((uint64_t)v41, 1);
              NLTransliterationCandidate::setLMScore((uint64_t)v41, v43);
            }
          }
          operator new();
        }
      }
      std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    }
    goto LABEL_153;
  }
LABEL_77:
  char v76 = ((uint64_t (*)(void **, char *))(*a1)[32])(a1, a2);
  long long v79 = a3;
  uint64_t v45 = a3;
  uint64_t v44 = *a3;
  if (v45[1] != v44)
  {
    unint64_t v46 = 0;
    do
    {
      memset(&v90, 0, sizeof(v90));
      uint64_t v47 = a2[23];
      BOOL v48 = (v47 & 0x80u) != 0;
      if ((v47 & 0x80u) != 0) {
        uint64_t v47 = *((void *)a2 + 1);
      }
      if (v48) {
        uint64_t v49 = *(char **)a2;
      }
      else {
        uint64_t v49 = a2;
      }
      uint64_t v50 = &v49[v47];
      if (v47 >= 2)
      {
        std::string v51 = v49;
        do
        {
          std::string v52 = (char *)memchr(v51, 110, v47 - 1);
          if (!v52) {
            break;
          }
          uint64_t v53 = v52;
          if (*(_WORD *)v52 == 24942) {
            goto LABEL_90;
          }
          std::string v51 = v52 + 1;
          uint64_t v47 = v50 - (v53 + 1);
        }
        while (v47 > 1);
      }
      uint64_t v53 = v50;
LABEL_90:
      uint64_t v54 = a1[2];
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v44 + 56 * v46));
      BOOL v57 = v53 != v50 && v53 - v49 != -1;
      (*(void (**)(std::vector<std::string> *__return_ptr, void *, uint64_t, BOOL))(*v54 + 64))(&v89, v54, v55, v57);
      std::vector<std::string>::__vdeallocate(&v90);
      std::vector<std::string> v90 = v89;
      memset(&v89, 0, sizeof(v89));
      v85.__begin_ = (std::vector<std::string>::pointer)&v89;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      std::vector<std::string>::pointer v58 = v90.__begin_;
      if (v90.__end_ != v90.__begin_)
      {
        unint64_t v59 = 0;
        do
        {
          if ((((uint64_t (*)(void **, char *, std::string *))(*a1)[34])(a1, a2, &v58[v59]) & 1) == 0)
          {
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v90.__end_ - (char *)v90.__begin_) >> 3) <= v59) {
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            }
            if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)&v90.__begin_[v59]))
            {
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v90.__end_ - (char *)v90.__begin_) >> 3) > v59)
              {
                (*(void (**)(void *, std::string *, uint64_t, void))(*a1[2] + 24))(a1[2], &v90.__begin_[v59], v77, v92[0]);
                operator new();
              }
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            }
          }
          ++v59;
          std::vector<std::string>::pointer v58 = v90.__begin_;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v90.__end_ - (char *)v90.__begin_) >> 3) > v59);
      }
      if (v76)
      {
        if (0x6DB6DB6DB6DB6DB7 * ((v79[1] - *v79) >> 3) <= v46) {
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(*v79 + 56 * v46));
        ((void (*)(std::vector<std::string> *__return_ptr, void **, uint64_t))(*a1)[28])(&v89, a1, v60);
        std::vector<std::string>::pointer v61 = v89.__begin_;
        if (v89.__end_ != v89.__begin_)
        {
          unint64_t v62 = 0;
          do
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)&v61[v62]))
            {
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v89.__end_ - (char *)v89.__begin_) >> 3) > v62)
              {
                (*(void (**)(void *, std::string *, uint64_t, void))(*a1[2] + 24))(a1[2], &v89.__begin_[v62], v77, v92[0]);
                LODWORD(v85.__begin_) = 0;
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v89.__end_ - (char *)v89.__begin_) >> 3) > v62)
                {
                  if (((*(uint64_t (**)(void *, std::string *, std::vector<std::string> *))(*a1[2] + 16))(a1[2], &v89.__begin_[v62], &v85) & 1) == 0)(*(void (**)(void *))(*a1[2] + 56))(a1[2]); {
                  operator new();
                  }
                }
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              }
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            }
            ++v62;
            std::vector<std::string>::pointer v61 = v89.__begin_;
          }
          while (0xAAAAAAAAAAAAAAABLL * (((char *)v89.__end_ - (char *)v89.__begin_) >> 3) > v62);
        }
        v85.__begin_ = (std::vector<std::string>::pointer)&v89;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      }
      v89.__begin_ = (std::vector<std::string>::pointer)&v90;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      ++v46;
      uint64_t v44 = *v79;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v79[1] - *v79) >> 3) > v46);
  }
  CFIndex v63 = *(NLTransliterationCandidate ***)a5;
  if (*(void *)(a5 + 8) != *(void *)a5)
  {
    unint64_t v64 = 0;
    do
    {
      if (NLTransliterationCandidate::getType(v63[v64]) != 4)
      {
        if (v64 >= (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3) {
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        CFIndex v65 = a1[9];
        uint64_t TransliteratedWord = NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(*(void *)a5 + 8 * v64));
        (*(void (**)(std::vector<std::string> *__return_ptr, void *, uint64_t))(*v65 + 24))(&v90, v65, TransliteratedWord);
        if (v64 >= (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3) {
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v67 = NLTransliterationCandidate::getTransliteratedWord(*(NLTransliterationCandidate **)(*(void *)a5 + 8 * v64));
        int v68 = *(char *)(v67 + 23);
        if (SHIBYTE(v90.__end_cap_.__value_) >= 0) {
          std::vector<std::string>::pointer v69 = (std::vector<std::string>::pointer)HIBYTE(v90.__end_cap_.__value_);
        }
        else {
          std::vector<std::string>::pointer v69 = v90.__end_;
        }
        if (SHIBYTE(v90.__end_cap_.__value_) >= 0) {
          std::__wrap_iter<const char *> v70 = &v90;
        }
        else {
          std::__wrap_iter<const char *> v70 = v90.__begin_;
        }
        if (v68 >= 0) {
          size_t v71 = *(unsigned __int8 *)(v67 + 23);
        }
        else {
          size_t v71 = *(void *)(v67 + 8);
        }
        if (v68 >= 0) {
          unint64_t v72 = (const void *)v67;
        }
        else {
          unint64_t v72 = *(const void **)v67;
        }
        if (v71 >= (unint64_t)v69) {
          size_t v73 = (size_t)v69;
        }
        else {
          size_t v73 = v71;
        }
        BOOL v74 = !memcmp(v70, v72, v73) && v71 == (void)v69;
        if (!v74
          && !std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)&v90))
        {
          LODWORD(v89.__begin_) = 0;
          (*(void (**)(void *, std::vector<std::string> *, std::vector<std::string> *))(*a1[2] + 16))(a1[2], &v90, &v89);
          (*(void (**)(void *, std::vector<std::string> *, uint64_t, void))(*a1[2] + 24))(a1[2], &v90, v77, v92[0]);
          operator new();
        }
        if (SHIBYTE(v90.__end_cap_.__value_) < 0) {
          operator delete(v90.__begin_);
        }
      }
      ++v64;
      CFIndex v63 = *(NLTransliterationCandidate ***)a5;
    }
    while (v64 < (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
  }
  uint64_t result = v77;
  if (v77) {
    return MEMORY[0x1A625B130](v77, 0x1000C4052888210);
  }
  return result;
}

void sub_1A43A817C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NLGenericTransliterator::splitCharacters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 128))(v84);
  *a3 = 0;
  a3[1] = 0;
  std::vector<std::string>::pointer v58 = a3;
  a3[2] = 0;
  (*(void (**)(const void **__return_ptr, uint64_t))(*(void *)a1 + 280))(v82, a1);
  (*(void (**)(void ***__return_ptr, uint64_t))(*(void *)a1 + 288))(&v79, a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 296))(&__p, a1);
  uint64_t v5 = v85;
  if (!v85) {
    goto LABEL_113;
  }
  do
  {
    unint64_t v59 = (uint64_t *)v5;
    NLCommons::split((const std::string *)(v5 + 16), 0x20u, &v74);
    size_t v71 = 0;
    unint64_t v72 = 0;
    unint64_t v73 = 0;
    if (v75 == v74) {
      goto LABEL_103;
    }
    unint64_t v6 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 32))(&v69);
      uint64_t v7 = v69;
      if (v70 == v69)
      {
        v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
        std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
        goto LABEL_112;
      }
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      CFStringRef v66 = 0;
      uint64_t v67 = 0;
      unint64_t v68 = 0;
      do
      {
        uint64_t v10 = *(void *)(a1 + 72);
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v7 + v8));
        int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v11);
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 4);
        if (v12)
        {
          if (v13 <= v9
            || (uint64_t v14 = v69 + v8,
                double Weight = NLExtendedString::getWeight((NLExtendedString *)(v69 + v8)),
                NLExtendedString::setWeight(v14, Weight * 0.5),
                0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 4) <= v9))
          {
LABEL_120:
            std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
          }
          double v16 = v67;
          if ((unint64_t)v67 < v68)
          {
            std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)&v66, (long long *)(v69 + v8));
LABEL_14:
            uint64_t v18 = v16 + 3;
            goto LABEL_17;
          }
          char v17 = (long long *)(v69 + 48 * v9);
        }
        else
        {
          if (v13 <= v9) {
            goto LABEL_120;
          }
          char v17 = (long long *)(v69 + v8);
          double v16 = v67;
          if ((unint64_t)v67 < v68)
          {
            std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)&v66, v17);
            goto LABEL_14;
          }
        }
        uint64_t v18 = (long long *)std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v66, v17);
LABEL_17:
        uint64_t v67 = v18;
        ++v9;
        uint64_t v7 = v69;
        v8 += 48;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 4) > v9);
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      if (v70 == v69) {
        goto LABEL_99;
      }
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      while (2)
      {
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v7 + v19));
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v21, *((void *)v21 + 1));
        }
        else
        {
          long long v22 = *v21;
          __str.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v22;
        }
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if ((char)v81 < 0)
          {
            if (!v80) {
              goto LABEL_79;
            }
          }
          else if (!v81)
          {
            goto LABEL_79;
          }
          if ((char)v78 < 0)
          {
            if (!v77) {
              goto LABEL_79;
            }
          }
          else if (!v78)
          {
LABEL_79:
            if (0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 4) <= v20) {
              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t Pos = NLExtendedString::getPos((NLExtendedString *)(v69 + v19));
            if (0xAAAAAAAAAAAAAAABLL * ((v75 - v74) >> 3) - 1 > v6)
            {
              uint64_t v43 = Pos;
              if ((*(unsigned int (**)(void, std::string *))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), &__str))
              {
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str.__r_.__value_.__l.__data_, v82, (uint64_t)&v61);
                if (0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 4) <= v20) {
                  std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
                }
                double v44 = NLExtendedString::getWeight((NLExtendedString *)(v69 + v19));
                NLExtendedString::NLExtendedString(&v60, &v61, v43, v44 * 0.35);
                std::vector<NLExtendedString>::push_back[abi:ne180100](&v63, (long long *)&v60);
              }
              else
              {
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str.__r_.__value_.__l.__data_, v82, (uint64_t)&v61);
                if (0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 4) <= v20) {
                  std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
                }
                double v45 = NLExtendedString::getWeight((NLExtendedString *)(v69 + v19));
                NLExtendedString::NLExtendedString(&v60, &v61, v43, v45 * 1.001);
                std::vector<NLExtendedString>::push_back[abi:ne180100](&v63, (long long *)&v60);
              }
              if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v60.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v61.__r_.__value_.__l.__data_);
              }
            }
            goto LABEL_90;
          }
          std::string::basic_string(&v60, &__str, 0, 1uLL, (std::allocator<char> *)&v61);
          char v24 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v25 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v25 = v60.__r_.__value_.__l.__size_;
          }
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v26 = &v60;
          }
          else {
            unint64_t v26 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          if ((v81 & 0x80u) == 0) {
            size_t v27 = v81;
          }
          else {
            size_t v27 = v80;
          }
          if ((v81 & 0x80u) == 0) {
            unint64_t v28 = (void **)&v79;
          }
          else {
            unint64_t v28 = v79;
          }
          if (v27 >= v25) {
            size_t v29 = v25;
          }
          else {
            size_t v29 = v27;
          }
          int v30 = memcmp(v26, v28, v29);
          BOOL v31 = v25 < v27;
          if (v30) {
            BOOL v31 = v30 < 0;
          }
          if (v31)
          {
            std::string::basic_string(&v61, &__str, 0, 1uLL, (std::allocator<char> *)v86);
            int v32 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
            unsigned __int8 v33 = (void *)v61.__r_.__value_.__r.__words[0];
            if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v34 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v34 = v61.__r_.__value_.__l.__size_;
            }
            if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v35 = &v61;
            }
            else {
              std::string v35 = (std::string *)v61.__r_.__value_.__r.__words[0];
            }
            if ((v78 & 0x80u) == 0) {
              size_t v36 = v78;
            }
            else {
              size_t v36 = v77;
            }
            if ((v78 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            if (v36 >= v34) {
              size_t v38 = v34;
            }
            else {
              size_t v38 = v36;
            }
            int v39 = memcmp(v35, p_p, v38);
            if (v34 < v36) {
              int v40 = -1;
            }
            else {
              int v40 = v36 < v34;
            }
            if (v39) {
              int v40 = v39;
            }
            BOOL v41 = v40 > 0;
            if (v32 < 0) {
              operator delete(v33);
            }
            if ((*((unsigned char *)&v60.__r_.__value_.__s + 23) & 0x80) != 0) {
              goto LABEL_75;
            }
LABEL_78:
            if (!v41) {
              goto LABEL_79;
            }
          }
          else
          {
            BOOL v41 = 0;
            if ((v24 & 0x80) == 0) {
              goto LABEL_78;
            }
LABEL_75:
            operator delete(v60.__r_.__value_.__l.__data_);
            if (!v41) {
              goto LABEL_79;
            }
          }
        }
LABEL_90:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        ++v20;
        uint64_t v7 = v69;
        v19 += 48;
        if (0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 4) > v20) {
          continue;
        }
        break;
      }
      uint64_t v46 = v63;
      if (v64 != v63)
      {
        uint64_t v47 = 0;
        unint64_t v48 = 0;
        uint64_t v49 = v67;
        do
        {
          uint64_t v50 = (long long *)(v46 + v47);
          if ((unint64_t)v49 >= v68)
          {
            uint64_t v49 = (long long *)std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v66, v50);
          }
          else
          {
            std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)&v66, v50);
            v49 += 3;
          }
          uint64_t v67 = v49;
          ++v48;
          uint64_t v46 = v63;
          v47 += 48;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v64 - v63) >> 4) > v48);
      }
LABEL_99:
      std::string v51 = v72;
      if ((unint64_t)v72 >= v73)
      {
        uint64_t v52 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>((uint64_t *)&v71, &v66);
      }
      else
      {
        v72->__r_.__value_.__r.__words[0] = 0;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(v51, v66, v67, 0xAAAAAAAAAAAAAAABLL * (v67 - v66));
        uint64_t v52 = (uint64_t)&v51[1];
      }
      unint64_t v72 = (std::string *)v52;
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
      ++v6;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v75 - v74) >> 3) > v6);
LABEL_103:
    unint64_t v53 = v58[1];
    if (v53 == *v58) {
      goto LABEL_107;
    }
    uint64_t v54 = *(unsigned __int8 *)(a2 + 23);
    if ((v54 & 0x80u) != 0) {
      uint64_t v54 = *(void *)(a2 + 8);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v72 - (char *)v71) >> 3) != v54)
    {
LABEL_107:
      if (v53 >= v58[2])
      {
        uint64_t v55 = std::vector<std::vector<std::vector<NLExtendedString>>>::__push_back_slow_path<std::vector<std::vector<NLExtendedString>> const&>(v58, &v71);
      }
      else
      {
        std::vector<std::vector<std::vector<NLExtendedString>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<NLExtendedString>> const&>((uint64_t)v58, &v71);
        uint64_t v55 = v53 + 24;
      }
      v58[1] = v55;
    }
LABEL_112:
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
    std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    uint64_t v5 = *v59;
  }
  while (*v59);
LABEL_113:
  if ((char)v78 < 0) {
    operator delete(__p);
  }
  if ((char)v81 < 0) {
    operator delete(v79);
  }
  if (v83 < 0) {
    operator delete((void *)v82[0]);
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v84);
}

void sub_1A43A8B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (*(char *)(v53 - 193) < 0) {
    operator delete(*(void **)(v53 - 216));
  }
  if (*(char *)(v53 - 169) < 0) {
    operator delete(*(void **)(v53 - 192));
  }
  a12 = a10;
  std::vector<std::vector<std::vector<NLExtendedString>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v53 - 168);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v9 = a1;
    }
    else {
      unint64_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void *NLGenericTransliterator::getHalantCharacter@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void *NLGenericTransliterator::getFirstLetter@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void *NLGenericTransliterator::getLastLetter@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void *NLGenericTransliterator::getAnyConsonant@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t NLGenericTransliterator::addSpecialCandidates()
{
  return 0;
}

double NLGenericTransliterator::getEnglishCandidateSequenceScore(uint64_t a1, uint64_t *a2)
{
  stringToUTF32Characters(a2, &v5);
  uint64_t v2 = v5;
  uint64_t v3 = v6;
  if (v5)
  {
    size_t v6 = v5;
    operator delete(v5);
  }
  return (double)(unint64_t)(v3 - v2);
}

void NLGenericTransliterator::addEnglishCandidates(void **a1, double a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6)
{
  if (a4[1] != *a4)
  {
    ((void (*)(void **))(*a1)[42])(a1);
    uint64_t v11 = *a4;
    if (a4[1] != *a4)
    {
      unint64_t v12 = 0;
      BOOL v20 = fabs(a2) == INFINITY;
      double v13 = a2 + -0.0001;
      while (1)
      {
        int v27 = 0;
        int v14 = (*(uint64_t (**)(void *, unint64_t, int *))(*a1[2] + 16))(a1[2], v11 + 24 * v12, &v27);
        memset(&__str, 0, sizeof(__str));
        std::string::basic_string[abi:ne180100]<0>(&v25, "");
        int v24 = 0;
        if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v12) {
LABEL_42:
        }
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        if (NLCommons::isNumeric((unsigned __int8 *)(*a4 + 24 * v12))) {
          break;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v12) {
          goto LABEL_42;
        }
        if (((uint64_t (*)(void **, unint64_t, std::string *))(*a1)[20])(a1, *a4 + 24 * v12, &__str))break; {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        }
        {
          if (!__str.__r_.__value_.__l.__size_) {
            break;
          }
        }
        else if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
        {
          break;
        }
        std::string::operator=(&v25, &__str);
        if (v14) {
          int v14 = 1;
        }
        else {
          int v14 = (*(uint64_t (**)(void *, std::string *, int *))(*a1[2] + 16))(a1[2], &v25, &v24);
        }
        double v15 = (*(double (**)(void *, std::string *, void, void))(*a1[2] + 24))(a1[2], &v25, 0, 0);
        if (v14)
        {
LABEL_9:
          double v16 = (*(double (**)(void *, unint64_t, void, void))(*a1[2] + 24))(a1[2], *a4 + 24 * v12, 0, 0);
          int v17 = 0;
          if (v16 >= v15) {
            double v15 = v16;
          }
          goto LABEL_21;
        }
LABEL_20:
        double v15 = 1.0;
        int v17 = 3;
LABEL_21:
        if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v12) {
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::find<std::string>(a6, (unsigned __int8 *)(*a4 + 24 * v12)))
        {
          if ((v20 | v14) == 1) {
            operator new();
          }
          operator new();
        }
        std::string __p = 0;
        long long v22 = 0;
        uint64_t v23 = 0;
        std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(&__p, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v12) {
          std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
        }
        ExistingCandidate = (NLTransliterationCandidate *)NLTransliteratorUtils::findExistingCandidate((uint64_t *)&__p, *a4 + 24 * v12);
        if (__p)
        {
          long long v22 = __p;
          operator delete(__p);
        }
        if (v20
          || (!NLTransliterationCandidate::getType(ExistingCandidate) ? (char v19 = 1) : (char v19 = v14),
              double v15 = v13,
              (v19 & 1) == 0))
        {
          NLTransliterationCandidate::setLMScore((uint64_t)ExistingCandidate, v15);
        }
        NLTransliterationCandidate::setType((uint64_t)ExistingCandidate, v17);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        ++v12;
        uint64_t v11 = *a4;
        if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v12) {
          return;
        }
      }
      double v15 = -INFINITY;
      if (v14) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
}

void sub_1A43A9550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NLGenericTransliterator::isSpecialCharSeq()
{
  return 0;
}

void NLGenericTransliterator::makeCharacterLattice(void **a1, const char *a2, NLGenericTransliterator *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t *a7)
{
  CFStringRef v101 = 0;
  CFAllocatorRef v102 = 0;
  uint64_t v103 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v100, "");
  unsigned __int8 v81 = (int *)a3;
  int v12 = *(_DWORD *)a3;
  double v13 = (NLGenericTransliterator *)strlen(a2);
  LODWORD(a3) = v12;
  if ((unint64_t)v13 > v12)
  {
    a3 = (NLGenericTransliterator *)v12;
    do
    {
      Letterint Type = NLGenericTransliterator::getLetterType(v13, (NLCommons *)*((char *)a3 + (void)a2), v14);
      BOOL v18 = a4 == 4 && LetterType == 3;
      LODWORD(a3) = *v81;
      if (LetterType != a4 && !v18) {
        break;
      }
      std::string::push_back(&v100, a2[(int)a3]);
      uint64_t v19 = *v81;
      a3 = (NLGenericTransliterator *)(v19 + 1);
      *unsigned __int8 v81 = v19 + 1;
      double v13 = (NLGenericTransliterator *)strlen(a2);
    }
    while (v13 > a3);
  }
  *unsigned __int8 v81 = a3 - 1;
  (*(void (**)(std::string *__return_ptr))(*a1[1] + 32))(&v84);
  std::vector<NLExtendedString>::__assign_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>((uint64_t)&v101, (std::string *)v84.__r_.__value_.__l.__data_, (long long *)v84.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 4));
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  BOOL v20 = v101;
  size_t v21 = v102;
  if (v101 == v102)
  {
    if (((uint64_t (*)(void **, std::string *))(*a1)[33])(a1, &v100))
    {
      ((void (*)(std::string *__return_ptr, void **, std::string *, const char *, void))(*a1)[27])(&v84, a1, &v100, a2, *a5);
      int v22 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v22 = v100.__r_.__value_.__r.__words[1];
      }
      *a6 += v22;
      unint64_t v23 = a7[1];
      if (v23 >= a7[2])
      {
        uint64_t v24 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(a7, (long long **)&v84);
      }
      else
      {
        std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)a7, (long long **)&v84);
        uint64_t v24 = v23 + 24;
      }
      a7[1] = v24;
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
      unsigned __int8 v78 = &v83;
LABEL_117:
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)v78);
      goto LABEL_118;
    }
    BOOL v20 = v101;
    size_t v21 = v102;
  }
  if (v20 != v21) {
    goto LABEL_64;
  }
  std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v100.__r_.__value_.__l.__size_;
  }
  if (size <= *((int *)a1 + 31))
  {
LABEL_64:
    int v46 = ((uint64_t (*)(void **, uint64_t, const char *, void))(*a1)[41])(a1, a4, a2, *v81);
    int v97 = 0;
    std::string::size_type v98 = 0;
    uint64_t v99 = 0;
    if (v46)
    {
      LODWORD(v84.__r_.__value_.__l.__data_) = *v81 + 1;
      ((void (*)(void **, const char *, int *, int *, std::string *, std::string **))(*a1)[39])(a1, a2, v81, v81, &v84, &v97);
    }
    unint64_t v94 = 0;
    unint64_t v95 = 0;
    uint64_t v96 = 0;
    if (v101 != v102)
    {
      uint64_t v47 = (long long *)std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>((uint64_t *)&v94, &v101);
      unint64_t v48 = v94;
      unint64_t v95 = v47;
      if (v47 != v94)
      {
        uint64_t v49 = 0;
        unint64_t v50 = 0;
        do
        {
          memset(&v84, 0, sizeof(v84));
          std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(&v84, *(long long **)((char *)v48 + v49), *(long long **)((char *)v48 + v49 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)((char *)v48 + v49 + 8) - *(void *)((char *)v48 + v49)) >> 4));
          memset(&v83, 0, sizeof(v83));
          if (v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0] == 48) {
            v83.__r_.__value_.__l.__size_ = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v83, (long long *)v84.__r_.__value_.__l.__data_);
          }
          else {
            ((void (*)(void **, std::string *, void, void, const char *, std::string *))(*a1)[18])(a1, &v84, (v50 + *a5), *v81, a2, &v83);
          }
          if (v46) {
            std::vector<NLExtendedString>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>((uint64_t *)&v83, (std::string *)v83.__r_.__value_.__l.__size_, v97, v98, 0xAAAAAAAAAAAAAAABLL * (((char *)v98 - (char *)v97) >> 4));
          }
          unint64_t v51 = a7[1];
          if (v51 >= a7[2])
          {
            uint64_t v52 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(a7, (long long **)&v83);
          }
          else
          {
            std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)a7, (long long **)&v83);
            uint64_t v52 = v51 + 24;
          }
          a7[1] = v52;
          int v92 = &v83;
          std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
          v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
          std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
          ++v50;
          unint64_t v48 = v94;
          v49 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)v94) >> 3) > v50);
      }
      goto LABEL_112;
    }
    ((void (*)(std::string **__return_ptr, void **, std::string *))(*a1)[7])(&v92, a1, &v100);
    memset(&v91, 0, sizeof(v91));
    uint64_t v53 = v92;
    if (v93 == (void **)v92)
    {
      unint64_t v75 = a7[1];
      if (v75 >= a7[2])
      {
        uint64_t v76 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(a7, (long long **)&v91);
      }
      else
      {
        std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)a7, (long long **)&v91);
        uint64_t v76 = v75 + 24;
      }
      a7[1] = v76;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
      std::vector<std::vector<std::vector<NLExtendedString>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
LABEL_112:
      int v77 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v77 = v100.__r_.__value_.__r.__words[1];
      }
      *a6 += v77;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
      std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
      unsigned __int8 v78 = &v84;
      goto LABEL_117;
    }
    uint64_t v88 = 0;
    std::vector<std::string> v89 = 0;
    unint64_t v90 = 0;
    if (!(0xAAAAAAAAAAAAAAABLL * (((char *)v93 - (char *)v92) >> 3))) {
LABEL_126:
    }
      std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
    uint64_t v54 = 0;
    unint64_t v55 = 0;
    while (1)
    {
      BOOL v57 = v53;
      std::string::size_type v56 = v53->__r_.__value_.__r.__words[0];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57->__r_.__value_.__l.__size_ - v56) >> 3) <= v55)
      {
        if (v46)
        {
          std::string v61 = v97;
          if (v98 != (long long *)v97)
          {
            uint64_t v62 = 0;
            unint64_t v63 = 0;
            do
            {
              if (v89 == (void **)v88) {
                std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v64 = (uint64_t *)(v89 - 2);
              unint64_t v65 = (unint64_t)*(v89 - 2);
              CFStringRef v66 = (uint64_t *)(v89 - 3);
              uint64_t v67 = (long long *)&v61[v62];
              if (v65 >= (unint64_t)*(v89 - 1))
              {
                uint64_t v68 = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>(v66, v67);
              }
              else
              {
                std::vector<NLExtendedString>::__construct_one_at_end[abi:ne180100]<NLExtendedString const&>((uint64_t)v66, v67);
                uint64_t v68 = v65 + 48;
              }
              *uint64_t v64 = v68;
              ++v63;
              std::string v61 = v97;
              v62 += 2;
            }
            while (0xAAAAAAAAAAAAAAABLL * (((char *)v98 - (char *)v97) >> 4) > v63);
          }
        }
        unint64_t v69 = 0;
        if (v89 != (void **)v88)
        {
          if ((unint64_t)(((char *)v89 - (char *)v88) / 24) <= 1) {
            uint64_t v70 = 1;
          }
          else {
            uint64_t v70 = ((char *)v89 - (char *)v88) / 24;
          }
          p_std::string::size_type size = (void **)&v88->__r_.__value_.__l.__size_;
          int v72 = 1;
          do
          {
            uint64_t v73 = (uint64_t)*(p_size - 1);
            unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)*p_size - v73) >> 4);
            if (v74 > v69) {
              unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)*p_size - v73) >> 4);
            }
            v72 *= v74;
            p_size += 3;
            --v70;
          }
          while (v70);
        }
        operator new[]();
      }
      memset(&v84, 0, sizeof(v84));
      std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(&v84, *(long long **)(v56 + v54), *(long long **)(v56 + v54 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v56 + v54 + 8) - *(void *)(v56 + v54)) >> 4));
      if (v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0] == 48)
      {
        memset(&v83, 0, sizeof(v83));
        std::string::size_type v58 = std::vector<NLExtendedString>::__push_back_slow_path<NLExtendedString const&>((uint64_t *)&v83, (long long *)v84.__r_.__value_.__l.__data_);
        unint64_t v59 = (std::string *)v89;
        v83.__r_.__value_.__l.__size_ = v58;
        if ((unint64_t)v89 >= v90) {
          goto LABEL_88;
        }
      }
      else
      {
        memset(&v83, 0, sizeof(v83));
        ((void (*)(void **, std::string *, void, void, const char *, std::string *))(*a1)[18])(a1, &v84, (v55 + *a5), *v81, a2, &v83);
        unint64_t v59 = (std::string *)v89;
        if ((unint64_t)v89 >= v90)
        {
LABEL_88:
          uint64_t v60 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>((uint64_t *)&v88, (long long **)&v83);
          goto LABEL_89;
        }
      }
      *std::vector<std::string> v89 = 0;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(v59, (long long *)v83.__r_.__value_.__l.__data_, (long long *)v83.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83.__r_.__value_.__l.__size_ - v83.__r_.__value_.__r.__words[0]) >> 4));
      uint64_t v60 = (uint64_t)&v59[1];
LABEL_89:
      std::vector<std::string> v89 = (void **)v60;
      __p[0] = &v83;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
      ++v55;
      uint64_t v53 = v92;
      v54 += 24;
      if (!(0xAAAAAAAAAAAAAAABLL * (((char *)v93 - (char *)v92) >> 3))) {
        goto LABEL_126;
      }
    }
  }
  size_t v80 = a7;
  std::string::basic_string[abi:ne180100]<0>(&v97, "");
  ((void (*)(std::string *__return_ptr, void **, std::string *))(*a1)[16])(&v83, a1, &v100);
  unint64_t v94 = 0;
  unint64_t v95 = 0;
  uint64_t v96 = 0;
  unint64_t v26 = (uint64_t *)v83.__r_.__value_.__r.__words[2];
  if (v83.__r_.__value_.__r.__words[2])
  {
    while (1)
    {
      NLCommons::split((const std::string *)(v26 + 2), 0x20u, (uint64_t *)&v92);
      std::string::basic_string[abi:ne180100]<0>(&v91, "");
      if (v93 != (void **)v92) {
        break;
      }
LABEL_57:
      NLExtendedString::NLExtendedString(&v84, &v91, *v81);
      std::vector<NLExtendedString>::push_back[abi:ne180100]((uint64_t *)&v94, (long long *)&v84);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      unint64_t v26 = (uint64_t *)*v26;
      if (!v26) {
        goto LABEL_62;
      }
    }
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      (*(void (**)(std::string *__return_ptr))(*a1[1] + 32))(&v84);
      uint64_t v88 = 0;
      std::vector<std::string> v89 = 0;
      unint64_t v90 = 0;
      ((void (*)(void **, std::string *, void, void, const char *, std::string **))(*a1)[18])(a1, &v84, (v28 + *a5), *v81, a2, &v88);
      size_t v29 = (NLAbstractOrthographyConvertor *)v88;
      if (v89 != (void **)v88) {
        break;
      }
LABEL_56:
      __p[0] = &v88;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      uint64_t v88 = &v84;
      std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      ++v28;
      v27 += 24;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v93 - (char *)v92) >> 3) <= v28) {
        goto LABEL_57;
      }
    }
    if (a4 == 1)
    {
      if (!v28)
      {
        NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)v88);
        goto LABEL_49;
      }
      size_t v29 = (NLAbstractOrthographyConvertor *)v84.__r_.__value_.__r.__words[0];
      if (v84.__r_.__value_.__l.__size_ == v84.__r_.__value_.__r.__words[0]) {
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
      }
    }
    else if (v28 != -1 - 0x5555555555555555 * (((char *)v93 - (char *)v92) >> 3))
    {
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)v88);
      uint64_t v32 = v31;
      ((void (*)(std::string *__return_ptr, void **))(*a1)[35])(&v85, a1);
      int v33 = *(char *)(v32 + 23);
      if (v33 >= 0) {
        std::string::size_type v34 = (const std::string::value_type *)v32;
      }
      else {
        std::string::size_type v34 = *(const std::string::value_type **)v32;
      }
      if (v33 >= 0) {
        std::string::size_type v35 = *(unsigned __int8 *)(v32 + 23);
      }
      else {
        std::string::size_type v35 = *(void *)(v32 + 8);
      }
      size_t v36 = std::string::insert(&v85, 0, v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      int64_t v87 = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0) {
        size_t v38 = __p;
      }
      else {
        size_t v38 = (void **)__p[0];
      }
      if (v87 >= 0) {
        std::string::size_type v39 = HIBYTE(v87);
      }
      else {
        std::string::size_type v39 = (std::string::size_type)__p[1];
      }
      std::string::append(&v91, (const std::string::value_type *)v38, v39);
      if (SHIBYTE(v87) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      goto LABEL_56;
    }
    NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor(v29);
LABEL_49:
    int v40 = *(char *)(v30 + 23);
    if (v40 >= 0) {
      BOOL v41 = (const std::string::value_type *)v30;
    }
    else {
      BOOL v41 = *(const std::string::value_type **)v30;
    }
    if (v40 >= 0) {
      std::string::size_type v42 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      std::string::size_type v42 = *(void *)(v30 + 8);
    }
    std::string::append(&v91, v41, v42);
    goto LABEL_56;
  }
LABEL_62:
  unint64_t v43 = v80[1];
  if (v43 >= v80[2])
  {
    uint64_t v45 = std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(v80, &v94);
    double v44 = a6;
  }
  else
  {
    std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>((uint64_t)v80, &v94);
    double v44 = a6;
    uint64_t v45 = v43 + 24;
  }
  v80[1] = v45;
  int v79 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v79 = v100.__r_.__value_.__r.__words[1];
  }
  *v44 += v79;
  v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v83);
  if (SHIBYTE(v99) < 0) {
    operator delete(v97);
  }
LABEL_118:
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
}

void sub_1A43AA5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  std::string __p = (void *)(v35 - 192);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a21);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  if (*(char *)(v35 - 121) < 0) {
    operator delete(*(void **)(v35 - 144));
  }
  std::string __p = (void *)(v35 - 120);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t NLGenericTransliterator::shouldHandleExaggeration()
{
  return 0;
}

void NLGenericTransliterator::postProcessForExaggeration(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  size_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + _Block_object_dispose(&__p, 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::get_temporary_buffer[abi:ne180100]<NLTransliterationCandidate *>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t *std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = result;
    if (a4 == 2)
    {
      uint64_t result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if (result)
      {
        uint64_t v9 = *v8;
        uint64_t *v8 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v13 = a4 >> 1;
      int8x16_t v14 = &result[a4 >> 1];
      unint64_t v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(result, v14, a3, v15, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13]);
        return (uint64_t *)std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),NLTransliterationCandidate**,NLTransliterationCandidate**,std::__wrap_iter<NLTransliterationCandidate**>>((uint64_t)a5, &a5[v13], &a5[v13], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(result, v14, a3, v15, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (uint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      return (uint64_t *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>((uint64_t)result, a2, a3);
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    BOOL v4 = (void *)result;
    size_t v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v9 = *v8;
        uint64_t v8 = v5;
        uint64_t result = (*a3)(*v5, v9);
        if (result)
        {
          uint64_t v10 = *v8;
          uint64_t v11 = v7;
          while (1)
          {
            *(void *)((char *)v4 + v11 + _Block_object_dispose(&__p, 8) = *(void *)((char *)v4 + v11);
            if (!v11) {
              break;
            }
            uint64_t result = (*a3)(v10, *(void *)((char *)v4 + v11 - 8));
            v11 -= 8;
            if ((result & 1) == 0)
            {
              unint64_t v12 = (void *)((char *)v4 + v11 + 8);
              goto LABEL_10;
            }
          }
          unint64_t v12 = v4;
LABEL_10:
          *unint64_t v12 = v10;
        }
        size_t v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v9 = result;
    if (a4 == 2)
    {
      uint64_t result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if (result)
      {
        *a5 = *(a2 - 1);
        uint64_t v10 = *v9;
      }
      else
      {
        *a5 = *v9;
        uint64_t v10 = *(a2 - 1);
      }
      a5[1] = v10;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return (uint64_t *)std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>,std::__wrap_iter<NLTransliterationCandidate**>>((uint64_t)v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(result, a2, a5, a3);
    }
  }
  return result;
}

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),NLTransliterationCandidate**,NLTransliterationCandidate**,std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  if ((uint64_t *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      uint64_t v13 = *a3++;
      *a5++ = v13;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      uint64_t result = (*a6)(*a3, *v11);
      if (result) {
        unint64_t v12 = a3;
      }
      else {
        unint64_t v12 = v11;
      }
      v11 += result ^ 1;
      a3 += result;
      *a5++ = *v12;
      if (v11 == a2) {
        goto LABEL_10;
      }
    }
    if (v11 != a2)
    {
      uint64_t v14 = 0;
      do
      {
        a5[v14] = v11[v14];
        ++v14;
      }
      while (&v11[v14] != a2);
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t result, char *a2, char *a3, uint64_t (**a4)(void, uint64_t), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v52 = a6;
  if (a6)
  {
    uint64_t v14 = (char *)result;
    while (v52 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v15 = 0;
      uint64_t v16 = -a5;
      while (1)
      {
        uint64_t result = (*a4)(*(void *)a2, *(void *)&v14[v15]);
        if (result) {
          break;
        }
        v15 += 8;
        if (__CFADD__(v16++, 1)) {
          return result;
        }
      }
      uint64_t v18 = -v16;
      uint64_t v19 = v52;
      uint64_t v49 = a8;
      unint64_t v50 = a7;
      unint64_t v51 = a3;
      unint64_t v48 = &v14[v15];
      if (-v16 >= v52)
      {
        if (v16 == -1)
        {
          uint64_t v46 = *(void *)&v14[v15];
          *(void *)&v14[v15] = *(void *)a2;
          *(void *)a2 = v46;
          return result;
        }
        if (v16 > 0) {
          uint64_t v18 = 1 - v16;
        }
        uint64_t v28 = v18 >> 1;
        unint64_t v23 = &v14[8 * (v18 >> 1) + v15];
        size_t v29 = a3;
        int v22 = a2;
        if (a2 != v29)
        {
          uint64_t v47 = v28;
          uint64_t v54 = *a4;
          unint64_t v30 = (v51 - a2) >> 3;
          int v22 = a2;
          do
          {
            uint64_t v31 = &v22[8 * (v30 >> 1)];
            uint64_t v33 = *(void *)v31;
            uint64_t v32 = v31 + 8;
            int v34 = v54(v33, *(void *)v23);
            if (v34) {
              v30 += ~(v30 >> 1);
            }
            else {
              v30 >>= 1;
            }
            if (v34) {
              int v22 = v32;
            }
          }
          while (v30);
          uint64_t v19 = v52;
          uint64_t v28 = v47;
        }
        uint64_t v21 = (v22 - a2) >> 3;
      }
      else
      {
        if (v52 >= 0) {
          uint64_t v20 = v52;
        }
        else {
          uint64_t v20 = v52 + 1;
        }
        uint64_t v21 = v20 >> 1;
        int v22 = &a2[8 * (v20 >> 1)];
        unint64_t v23 = a2;
        if (a2 - v14 != v15)
        {
          uint64_t v53 = v20 >> 1;
          unint64_t v24 = (a2 - v14 - v15) >> 3;
          unint64_t v23 = &v14[v15];
          do
          {
            std::string v25 = &v23[8 * (v24 >> 1)];
            uint64_t v27 = *(void *)v25;
            unint64_t v26 = v25 + 8;
            if ((*a4)(*(void *)v22, v27))
            {
              v24 >>= 1;
            }
            else
            {
              unint64_t v23 = v26;
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
          uint64_t v19 = v52;
          uint64_t v21 = v53;
        }
        uint64_t v28 = (v23 - v14 - v15) >> 3;
      }
      a5 = -(v28 + v16);
      uint64_t v55 = v19 - v21;
      uint64_t v35 = a2;
      uint64_t v36 = v19;
      uint64_t v37 = v28;
      size_t v38 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLTransliterationCandidate **>,std::__wrap_iter<NLTransliterationCandidate **>>(v23, v35, v22);
      uint64_t v39 = v21;
      int v40 = v38;
      if (v37 + v39 >= v36 - (v37 + v39) - v16)
      {
        double v44 = v22;
        uint64_t v45 = v37;
        uint64_t v43 = v39;
        a7 = v50;
        a3 = v38;
        uint64_t result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(v38, v44, v51, a4, a5, v55, v50, v49);
        a2 = v23;
        a8 = v49;
        a5 = v45;
        uint64_t v14 = v48;
      }
      else
      {
        BOOL v41 = v23;
        uint64_t v42 = v37;
        a8 = v49;
        a7 = v50;
        uint64_t result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(&v14[v15], v41, v38, a4, v42, v39, v50, v49);
        uint64_t v14 = v40;
        a2 = v22;
        a3 = v51;
        uint64_t v43 = v55;
      }
      uint64_t v52 = v43;
      if (!v43) {
        return result;
      }
    }
    return (uint64_t)std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(v14, a2, a3, a4, a5, v52, a7);
  }
  return result;
}

uint64_t *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a3;
      do
      {
        uint64_t v10 = v9;
        uint64_t v11 = *v9++;
        uint64_t result = (uint64_t *)(*a4)(*v6, v11);
        unint64_t v12 = v9;
        if (result)
        {
          v10[1] = *v10;
          unint64_t v12 = a3;
          if (v10 != a3)
          {
            uint64_t v13 = v8;
            while (1)
            {
              unint64_t v12 = (uint64_t *)((char *)a3 + v13);
              uint64_t result = (uint64_t *)(*a4)(*v6, *(uint64_t *)((char *)a3 + v13 - 8));
              if (!result) {
                break;
              }
              *unint64_t v12 = *(v12 - 1);
              v13 -= 8;
              if (!v13)
              {
                unint64_t v12 = a3;
                break;
              }
            }
          }
        }
        uint64_t v14 = *v6++;
        *unint64_t v12 = v14;
        v8 += 8;
      }
      while (v6 != a2);
    }
  }
  return result;
}

uint64_t std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>,std::__wrap_iter<NLTransliterationCandidate**>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  if ((uint64_t *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      uint64_t v13 = *a3++;
      *a5++ = v13;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      uint64_t result = (*a6)(*a3, *v11);
      if (result) {
        unint64_t v12 = a3;
      }
      else {
        unint64_t v12 = v11;
      }
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v12;
      if (v11 == a2) {
        goto LABEL_10;
      }
    }
    if (v11 != a2)
    {
      uint64_t v14 = 0;
      do
      {
        a5[v14] = v11[v14];
        ++v14;
      }
      while (&v11[v14] != a2);
    }
  }
  return result;
}

char *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLTransliterationCandidate const*,NLTransliterationCandidate const*),std::__wrap_iter<NLTransliterationCandidate**>>(char *__dst, char *a2, char *a3, uint64_t (**a4)(void, void), uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v10 = a2;
  uint64_t v11 = __dst;
  if (a5 <= a6)
  {
    if (__dst != a2)
    {
      unint64_t v16 = 0;
      do
      {
        *(void *)&__src[v16] = *(void *)&__dst[v16];
        v16 += 8;
      }
      while (&__dst[v16] != a2);
      if (v16)
      {
        int v17 = &__src[v16];
        uint64_t v18 = __src;
        while (v10 != a3)
        {
          __dst = (char *)(*a4)(*(void *)v10, *(void *)v18);
          if (__dst) {
            uint64_t v19 = v10;
          }
          else {
            uint64_t v19 = v18;
          }
          v10 += 8 * __dst;
          v18 += 8 * (__dst ^ 1);
          *(void *)uint64_t v11 = *(void *)v19;
          v11 += 8;
          if (v17 == v18) {
            return __dst;
          }
        }
        return (char *)memmove(v11, v18, __src - v18 + v16);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v12 = 0;
    do
    {
      *(void *)&__src[v12] = *(void *)&a2[v12];
      v12 += 8;
    }
    while (&a2[v12] != a3);
    if (v12)
    {
      uint64_t v13 = &__src[v12];
      uint64_t v14 = a3 - 8;
      while (v10 != v11)
      {
        __dst = (char *)(*a4)(*((void *)v13 - 1), *((void *)v10 - 1));
        if (__dst) {
          uint64_t v15 = v10;
        }
        else {
          uint64_t v15 = v13;
        }
        if (__dst) {
          v10 -= 8;
        }
        else {
          v13 -= 8;
        }
        *(void *)uint64_t v14 = *((void *)v15 - 1);
        v14 -= 8;
        if (v13 == __src) {
          return __dst;
        }
      }
      uint64_t v20 = 0;
      do
      {
        *(void *)&v14[v20] = *(void *)&v13[v20 - 8];
        v20 -= 8;
      }
      while (&v13[v20] != __src);
    }
  }
  return __dst;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLTransliterationCandidate **>,std::__wrap_iter<NLTransliterationCandidate **>>(char *__src, char *a2, char *a3)
{
  BOOL v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      uint64_t v6 = *(void *)__src;
      int64_t v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      BOOL v4 = &__src[v7];
      *(void *)BOOL v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      uint64_t v8 = *((void *)a3 - 1);
      BOOL v4 = __src + 8;
      size_t v9 = a3 - 8 - __src;
      if (a3 - 8 != __src) {
        memmove(__src + 8, __src, v9);
      }
      *(void *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLTransliterationCandidate **>>(__src, a2, a3);
    }
  }
  return v4;
}

void *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLTransliterationCandidate **>>(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      BOOL v4 = a1 + 1;
      size_t v5 = a2 + 1;
      do
      {
        uint64_t v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2) {
          break;
        }
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    uint64_t v8 = a3 - a2;
    uint64_t v9 = a2 - a1;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      uint64_t v11 = &a1[v9];
      do
      {
        uint64_t v13 = *--v11;
        uint64_t v12 = v13;
        uint64_t v14 = &v11[v3];
        uint64_t v15 = v11;
        do
        {
          unint64_t v16 = v14;
          *uint64_t v15 = *v14;
          int v17 = &v14[v3];
          BOOL v18 = __OFSUB__(v3, a3 - v14);
          uint64_t v20 = v3 - (a3 - v14);
          char v19 = (v20 < 0) ^ v18;
          uint64_t v14 = &a1[v20];
          if (v19) {
            uint64_t v14 = v17;
          }
          uint64_t v15 = v16;
        }
        while (v14 != v11);
        *unint64_t v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

std::string *std::vector<std::vector<NLExtendedString>>::__construct_one_at_end[abi:ne180100]<std::vector<NLExtendedString> const&>(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  uint64_t result = std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(void *)(a1 + _Block_object_dispose(&__p, 8) = v3 + 1;
  return result;
}

void sub_1A43AB6E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&__p, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<NLExtendedString>>::__push_back_slow_path<std::vector<NLExtendedString> const&>(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<NLExtendedString>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<NLExtendedString>>::~__split_buffer(v14);
  return v12;
}

void sub_1A43AB800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<NLExtendedString>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<NLExtendedString>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>,std::reverse_iterator<std::vector<NLExtendedString>*>,std::reverse_iterator<std::vector<NLExtendedString>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>,std::reverse_iterator<std::vector<NLExtendedString>*>,std::reverse_iterator<std::vector<NLExtendedString>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - _Block_object_dispose(&__p, 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - _Block_object_dispose(&__p, 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::reverse_iterator<std::vector<NLExtendedString>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<NLExtendedString>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<NLExtendedString>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::vector<NLTransliterationCandidate *>>::__push_back_slow_path<std::vector<NLTransliterationCandidate *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<NLTransliterationCandidate *>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1A43ABB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<NLTransliterationCandidate *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<NLTransliterationCandidate *>>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<NLTransliterationCandidate *>>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - _Block_object_dispose(&__p, 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - _Block_object_dispose(&__p, 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLTransliterationCandidate *>>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLTransliterationCandidate *>>,std::reverse_iterator<std::vector<NLTransliterationCandidate *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<NLLatticePath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<NLLatticePath>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<NLLatticePath>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 24);
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

std::string *std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<NLExtendedString>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NLExtendedString>,NLExtendedString*,NLExtendedString*,NLExtendedString*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A43ABE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose(&__p, 8) = v10;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<NLLatticePath>::__push_back_slow_path<NLLatticePath const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLLatticePath>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = (std::string *)&v7[56 * v3];
  long long v13 = &v7[56 * v6];
  std::allocator<NLLatticePath>::construct[abi:ne180100]<NLLatticePath,NLLatticePath const&>(a1 + 16, v11, a2);
  char v12 = &v11[2].__r_.__value_.__s.__data_[8];
  std::vector<NLLatticePath>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<NLLatticePath>::~__split_buffer(&v10);
  return v8;
}

void sub_1A43ABF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<NLLatticePath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

double std::allocator<NLLatticePath>::construct[abi:ne180100]<NLLatticePath,NLLatticePath const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(this + 1, *((long long **)a3 + 3), *((long long **)a3 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 4) - *((void *)a3 + 3)) >> 4));
  double result = *((double *)a3 + 6);
  *(double *)&this[2].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_1A43AC028(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<NLLatticePath>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>,std::reverse_iterator<NLLatticePath*>,std::reverse_iterator<NLLatticePath*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NLLatticePath>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>,std::reverse_iterator<NLLatticePath*>,std::reverse_iterator<NLLatticePath*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(a3 - 4_Block_object_dispose(&__p, 8) = 0;
      *(void *)(a3 - 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - _Block_object_dispose(&__p, 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 56;
      *((void *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NLLatticePath>,std::reverse_iterator<NLLatticePath*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<NLLatticePath>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<NLLatticePath>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<NLLatticePath>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<NLLatticePath>::destroy[abi:ne180100](v4, i - 56);
  }
}

void *std::get_temporary_buffer[abi:ne180100]<NLExtendedString>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v1 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(48 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, long long *a5, uint64_t a6)
{
  int v17 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v16 = a2 - 48;
      if (NLExtendedString::operator>(a2 - 48, (uint64_t)a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<NLExtendedString *> &,std::__wrap_iter<NLExtendedString *> &>(&v17, &v16);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>((uint64_t)a1, a2);
    }
    else
    {
      uint64_t v12 = a4 >> 1;
      uint64_t v13 = (uint64_t)&a1[6 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>((uint64_t)a1, (uint64_t)&a1[6 * (a4 >> 1)], a3, a4 >> 1, (uint64_t)a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>((uint64_t)&a1[6 * (a4 >> 1)], a2, a3, a4 - v12, (uint64_t)&a5[3 * v12]);
        unint64_t v15 = a4;
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,NLExtendedString*,NLExtendedString*,std::__wrap_iter<NLExtendedString*>>((uint64_t)a5, &a5[3 * v12], (uint64_t)&a5[3 * v12], (uint64_t)&a5[3 * a4], (uint64_t)a1);
        if (a5) {
          std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&v15, (uint64_t)a5);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(a1, &a1[6 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(v13, a2, a3, v14, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>((uint64_t)a1, v13, a2, a3, v12, v14, a5, a6);
      }
    }
  }
}

void sub_1A43AC520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<NLExtendedString *> &,std::__wrap_iter<NLExtendedString *> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = **a1;
  *(void *)uint64_t v10 = (*a1)[1];
  *(void *)&v10[7] = *(uint64_t *)((char *)*a1 + 15);
  char v5 = *((unsigned char *)*a1 + 23);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  __n128 v8 = *(__n128 *)(v2 + 3);
  char v9 = *((unsigned char *)v2 + 40);
  uint64_t v6 = *(void *)(v3 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)v3;
  v2[2] = v6;
  *(unsigned char *)(v3 + 23) = 0;
  *(unsigned char *)uint64_t v3 = 0;
  LOBYTE(v6) = *(unsigned char *)(v3 + 40);
  *(_OWORD *)(v2 + 3) = *(_OWORD *)(v3 + 24);
  *((unsigned char *)v2 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = v6;
  if (*(char *)(v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  *(void *)uint64_t v3 = v4;
  *(void *)(v3 + _Block_object_dispose(&__p, 8) = *(void *)v10;
  *(void *)(v3 + 15) = *(void *)&v10[7];
  *(unsigned char *)(v3 + 23) = v5;
  __n128 result = v8;
  *(__n128 *)(v3 + 24) = v8;
  *(unsigned char *)(v3 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = v9;
  return result;
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 48;
    if (a1 + 48 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1;
      do
      {
        uint64_t v7 = v4;
        if (NLExtendedString::operator>(v4, v6))
        {
          long long v8 = *(_OWORD *)v7;
          uint64_t v19 = *(void *)(v7 + 16);
          long long v18 = v8;
          *(void *)(v7 + _Block_object_dispose(&__p, 8) = 0;
          *(void *)(v7 + 16) = 0;
          *(void *)uint64_t v7 = 0;
          long long v20 = *(_OWORD *)(v6 + 72);
          char v21 = *(unsigned char *)(v6 + 88);
          uint64_t v9 = v5;
          while (1)
          {
            uint64_t v10 = v9;
            uint64_t v11 = a1 + v9;
            uint64_t v12 = a1 + v9 + 48;
            if (*(char *)(a1 + v9 + 71) < 0) {
              operator delete(*(void **)v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
            *(void *)(v12 + 16) = *(void *)(v11 + 16);
            *(unsigned char *)(v11 + 23) = 0;
            *(unsigned char *)uint64_t v11 = 0;
            *(_OWORD *)(v11 + 72) = *(_OWORD *)(v11 + 24);
            *(unsigned char *)(v11 + 8_Block_object_dispose(&__p, 8) = *(unsigned char *)(v11 + 40);
            if (!v10) {
              break;
            }
            BOOL v13 = NLExtendedString::operator>((uint64_t)&v18, a1 + v10 - 48);
            uint64_t v9 = v10 - 48;
            if (!v13)
            {
              uint64_t v14 = a1 + v10;
              goto LABEL_12;
            }
          }
          uint64_t v14 = a1;
LABEL_12:
          if (*(char *)(v14 + 23) < 0) {
            operator delete(*(void **)v14);
          }
          uint64_t v15 = a1 + v10 + 24;
          long long v16 = v18;
          *(void *)(v14 + 16) = v19;
          *(_OWORD *)uint64_t v14 = v16;
          long long v17 = v20;
          *(unsigned char *)(v15 + 16) = v21;
          *(_OWORD *)uint64_t v15 = v17;
        }
        uint64_t v4 = v7 + 48;
        v5 += 48;
        uint64_t v6 = v7;
      }
      while (v7 + 48 != a2);
    }
  }
}

void sub_1A43AC78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a4 == 2)
    {
      uint64_t v11 = (long long *)(a2 - 48);
      BOOL v12 = NLExtendedString::operator>(a2 - 48, a1);
      BOOL v13 = (_OWORD *)(a5 + 24);
      uint64_t v14 = (_OWORD *)(a5 + 48);
      if (v12)
      {
        long long v15 = *v11;
        *(void *)(a5 + 16) = *(void *)(a2 - 32);
        *(_OWORD *)a5 = v15;
        *(void *)(a2 - 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = 0;
        *(void *)(a2 - 32) = 0;
        *(void *)uint64_t v11 = 0;
        long long v16 = *(_OWORD *)(a2 - 24);
        *(unsigned char *)(a5 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(a2 - 8);
        _OWORD *v13 = v16;
        long long v17 = *(_OWORD *)a1;
        *(void *)(a5 + 64) = *(void *)(a1 + 16);
        *uint64_t v14 = v17;
        *(void *)(a1 + _Block_object_dispose(&__p, 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        long long v18 = (__n128 *)(a1 + 24);
      }
      else
      {
        long long v20 = *(_OWORD *)a1;
        *(void *)(a5 + 16) = *(void *)(a1 + 16);
        *(_OWORD *)a5 = v20;
        *(void *)(a1 + _Block_object_dispose(&__p, 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        long long v21 = *(_OWORD *)(a1 + 24);
        *(unsigned char *)(a5 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(a1 + 40);
        _OWORD *v13 = v21;
        long long v22 = *v11;
        *(void *)(a5 + 64) = *(void *)(a2 - 32);
        *uint64_t v14 = v22;
        *(void *)(a2 - 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = 0;
        *(void *)(a2 - 32) = 0;
        *(void *)uint64_t v11 = 0;
        long long v18 = (__n128 *)(a2 - 24);
      }
      __n128 result = *v18;
      *(unsigned char *)(a5 + 8_Block_object_dispose(&__p, 8) = v18[1].n128_u8[0];
      *(__n128 *)(a5 + 72) = result;
    }
    else if (a4 == 1)
    {
      long long v9 = *(_OWORD *)a1;
      *(void *)(a5 + 16) = *(void *)(a1 + 16);
      *(_OWORD *)a5 = v9;
      *(void *)(a1 + _Block_object_dispose(&__p, 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      __n128 result = *(__n128 *)(a1 + 24);
      *(unsigned char *)(a5 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(a1 + 40);
      *(__n128 *)(a5 + 24) = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(a1, a1 + 48 * (a4 >> 1), a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(a1 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5 + 48 * (a4 >> 1), a4 - (a4 >> 1));
      result.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>(a1, (void *)(a1 + 48 * (a4 >> 1)), a1 + 48 * (a4 >> 1), a2, a5).n128_u64[0];
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(a1, a2, a5);
    }
  }
  return result;
}

void sub_1A43AC9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,NLExtendedString*,NLExtendedString*,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((unsigned char *)a1 == a2)
  {
LABEL_16:
    while (a3 != a4)
    {
      if (*(char *)(a5 + 23) < 0) {
        operator delete(*(void **)a5);
      }
      long long v15 = *(_OWORD *)a3;
      *(void *)(a5 + 16) = *(void *)(a3 + 16);
      *(_OWORD *)a5 = v15;
      *(unsigned char *)(a3 + 23) = 0;
      *(unsigned char *)a3 = 0;
      __n128 result = *(__n128 *)(a3 + 24);
      *(unsigned char *)(a5 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(a3 + 40);
      *(__n128 *)(a5 + 24) = result;
      a5 += 48;
      a3 += 48;
    }
  }
  else
  {
    uint64_t v9 = a1;
    while (a3 != a4)
    {
      BOOL v10 = NLExtendedString::operator>(a3, v9);
      int v11 = *(char *)(a5 + 23);
      if (v10)
      {
        if (v11 < 0) {
          operator delete(*(void **)a5);
        }
        long long v12 = *(_OWORD *)a3;
        *(void *)(a5 + 16) = *(void *)(a3 + 16);
        *(_OWORD *)a5 = v12;
        *(unsigned char *)(a3 + 23) = 0;
        *(unsigned char *)a3 = 0;
        __n128 result = *(__n128 *)(a3 + 24);
        *(unsigned char *)(a5 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(a3 + 40);
        *(__n128 *)(a5 + 24) = result;
        a3 += 48;
      }
      else
      {
        if (v11 < 0) {
          operator delete(*(void **)a5);
        }
        long long v14 = *(_OWORD *)v9;
        *(void *)(a5 + 16) = *(void *)(v9 + 16);
        *(_OWORD *)a5 = v14;
        *(unsigned char *)(v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        __n128 result = *(__n128 *)(v9 + 24);
        *(unsigned char *)(a5 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(v9 + 40);
        *(__n128 *)(a5 + 24) = result;
        v9 += 48;
      }
      a5 += 48;
      if ((unsigned char *)v9 == a2) {
        goto LABEL_16;
      }
    }
    if ((unsigned char *)v9 != a2)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = a5 + v16;
        if (*(char *)(a5 + v16 + 23) < 0) {
          operator delete(*(void **)v17);
        }
        long long v18 = (unsigned char *)(v9 + v16);
        long long v19 = *(_OWORD *)(v9 + v16);
        *(void *)(v17 + 16) = *(void *)(v9 + v16 + 16);
        *(_OWORD *)uint64_t v17 = v19;
        v18[23] = 0;
        *long long v18 = 0;
        __n128 result = *(__n128 *)(v9 + v16 + 24);
        *(unsigned char *)(v17 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(v9 + v16 + 40);
        *(__n128 *)(v17 + 24) = result;
        v16 += 48;
      }
      while (v18 + 48 != a2);
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8)
{
  uint64_t v44 = a2;
  if (a6)
  {
    uint64_t v8 = a8;
    long long v12 = (uint64_t *)a2;
    uint64_t v14 = v44;
    uint64_t v15 = a2;
    while (a6 > v8 && a5 > v8)
    {
      if (!a5) {
        goto LABEL_45;
      }
      uint64_t v43 = a6;
      uint64_t v16 = 0;
      uint64_t v17 = -a5;
      while (1)
      {
        long long v18 = (uint64_t *)(a1 + v16);
        if (NLExtendedString::operator>(v15, a1 + v16)) {
          break;
        }
        v16 += 48;
        if (__CFADD__(v17++, 1)) {
          goto LABEL_45;
        }
      }
      uint64_t v45 = (uint64_t *)(a1 + v16);
      uint64_t v20 = -v17;
      uint64_t v21 = v43;
      if (-v17 >= v43)
      {
        if (v17 == -1)
        {
          uint64_t v44 = v14;
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<NLExtendedString *> &,std::__wrap_iter<NLExtendedString *> &>(&v45, &v44);
          return;
        }
        if (v17 > 0) {
          uint64_t v20 = 1 - v17;
        }
        uint64_t v27 = v20 >> 1;
        uint64_t v28 = a1 + 48 * (v20 >> 1);
        unint64_t v26 = v27;
        long long v12 = (uint64_t *)(v28 + v16);
        uint64_t v14 = a3;
        if (a3 != v15)
        {
          unint64_t v40 = v27;
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((a3 - v15) >> 4);
          uint64_t v14 = v15;
          do
          {
            uint64_t v30 = v14 + 48 * (v29 >> 1);
            BOOL v31 = NLExtendedString::operator>(v30, (uint64_t)v12);
            if (v31) {
              v29 += ~(v29 >> 1);
            }
            else {
              v29 >>= 1;
            }
            if (v31) {
              uint64_t v14 = v30 + 48;
            }
          }
          while (v29);
          unint64_t v26 = v40;
          uint64_t v21 = v43;
        }
        uint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 4);
      }
      else
      {
        if (v43 >= 0) {
          uint64_t v22 = v43;
        }
        else {
          uint64_t v22 = v43 + 1;
        }
        uint64_t v23 = v22 >> 1;
        uint64_t v14 = (uint64_t)&v12[6 * (v22 >> 1)];
        uint64_t v24 = (uint64_t)v12 - a1 - v16;
        if (v24)
        {
          uint64_t v38 = v22 >> 1;
          uint64_t v39 = a7;
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 4);
          long long v12 = (uint64_t *)(a1 + v16);
          do
          {
            if (NLExtendedString::operator>(v14, (uint64_t)&v12[6 * (v25 >> 1)]))
            {
              v25 >>= 1;
            }
            else
            {
              v12 += 6 * (v25 >> 1) + 6;
              v25 += ~(v25 >> 1);
            }
          }
          while (v25);
          a7 = v39;
          uint64_t v21 = v43;
          uint64_t v23 = v38;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - a1 - v16) >> 4);
      }
      if (v12 == (uint64_t *)v15)
      {
        int v34 = (uint64_t *)v14;
      }
      else if (v15 == v14)
      {
        int v34 = v12;
      }
      else
      {
        uint64_t v32 = v23;
        uint64_t v33 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLExtendedString *>>(v12, v15, v14);
        uint64_t v23 = v32;
        uint64_t v21 = v43;
        int v34 = v33;
      }
      a5 = -(uint64_t)(v26 + v17);
      uint64_t v35 = v21 - v23;
      if ((uint64_t)(v26 + v23) >= (uint64_t)(v21 - (v26 + v23) - v17))
      {
        uint64_t v8 = a8;
        uint64_t v36 = a5;
        uint64_t v37 = v23;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(v34, v14, a3, a4, v36, v21 - v23, a7, a8);
        uint64_t v14 = (uint64_t)v12;
        uint64_t v35 = v37;
        a5 = v26;
        a3 = (uint64_t)v34;
      }
      else
      {
        uint64_t v8 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(v18, v12, v34, a4, v26, v23, a7, a8);
        uint64_t v45 = v34;
        long long v18 = v34;
        long long v12 = (uint64_t *)v14;
      }
      uint64_t v15 = v14;
      a1 = (uint64_t)v18;
      a6 = v35;
      if (!v35)
      {
LABEL_45:
        uint64_t v44 = v14;
        return;
      }
    }
    uint64_t v44 = v14;
    std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(a1, v15, a3, a4, a5, a6, a7);
  }
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    long long v6 = *(_OWORD *)a1;
    *(void *)(a3 + 16) = *(void *)(a1 + 16);
    *(_OWORD *)a3 = v6;
    *(void *)(a1 + _Block_object_dispose(&__p, 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(unsigned char *)(a3 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(a1 + 40);
    *(_OWORD *)(a3 + 24) = v7;
    uint64_t v23 = 1;
    uint64_t v8 = a1 + 48;
    if (a1 + 48 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = a3;
      do
      {
        uint64_t v11 = v8;
        BOOL v12 = NLExtendedString::operator>(v8, v10);
        BOOL v13 = (_OWORD *)(v10 + 48);
        uint64_t v14 = (_OWORD *)(v10 + 72);
        if (v12)
        {
          _OWORD *v13 = *(_OWORD *)v10;
          *(void *)(v10 + 64) = *(void *)(v10 + 16);
          *(void *)(v10 + _Block_object_dispose(&__p, 8) = 0;
          *(void *)(v10 + 16) = 0;
          *(void *)uint64_t v10 = 0;
          *uint64_t v14 = *(_OWORD *)(v10 + 24);
          *(unsigned char *)(v10 + 8_Block_object_dispose(&__p, 8) = *(unsigned char *)(v10 + 40);
          uint64_t v15 = a3;
          ++v23;
          if (v10 != a3)
          {
            uint64_t v16 = v9;
            while (1)
            {
              uint64_t v17 = a3 + v16;
              if (!NLExtendedString::operator>(v11, a3 + v16 - 48)) {
                break;
              }
              uint64_t v18 = a3 + v16;
              if (*(char *)(a3 + v16 + 23) < 0) {
                operator delete(*(void **)v17);
              }
              *(_OWORD *)uint64_t v17 = *(_OWORD *)(a3 + v16 - 48);
              *(void *)(v17 + 16) = *(void *)(a3 + v16 - 32);
              *(unsigned char *)(v18 - 25) = 0;
              *(unsigned char *)(v17 - 4_Block_object_dispose(&__p, 8) = 0;
              *(_OWORD *)(v18 + 24) = *(_OWORD *)(v18 - 24);
              *(unsigned char *)(v18 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(v18 - 8);
              v16 -= 48;
              if (!v16)
              {
                uint64_t v15 = a3;
                goto LABEL_14;
              }
            }
            uint64_t v15 = a3 + v16;
          }
LABEL_14:
          if (*(char *)(v15 + 23) < 0) {
            operator delete(*(void **)v15);
          }
          long long v21 = *(_OWORD *)v11;
          *(void *)(v15 + 16) = *(void *)(v11 + 16);
          *(_OWORD *)uint64_t v15 = v21;
          *(unsigned char *)(v5 + 71) = 0;
          *(unsigned char *)uint64_t v11 = 0;
          long long v22 = *(_OWORD *)(v5 + 72);
          *(unsigned char *)(v15 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(v5 + 88);
          *(_OWORD *)(v15 + 24) = v22;
        }
        else
        {
          long long v19 = *(_OWORD *)v11;
          *(void *)(v10 + 64) = *(void *)(v11 + 16);
          _OWORD *v13 = v19;
          *(void *)(v11 + _Block_object_dispose(&__p, 8) = 0;
          *(void *)(v11 + 16) = 0;
          *(void *)uint64_t v11 = 0;
          long long v20 = *(_OWORD *)(v5 + 72);
          *(unsigned char *)(v10 + 8_Block_object_dispose(&__p, 8) = *(unsigned char *)(v5 + 88);
          *uint64_t v14 = v20;
          ++v23;
        }
        uint64_t v8 = v11 + 48;
        v9 += 48;
        v10 += 48;
        uint64_t v5 = v11;
      }
      while (v11 + 48 != a2);
    }
  }
}

void sub_1A43AD098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = 0;
  if ((void *)a1 == a2)
  {
    uint64_t v9 = a5;
LABEL_11:
    while (a3 != a4)
    {
      long long v15 = *(_OWORD *)a3;
      *(void *)(v9 + 16) = *(void *)(a3 + 16);
      *(_OWORD *)uint64_t v9 = v15;
      *(void *)(a3 + _Block_object_dispose(&__p, 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      __n128 result = *(__n128 *)(a3 + 24);
      *(unsigned char *)(v9 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(a3 + 40);
      *(__n128 *)(v9 + 24) = result;
      a3 += 48;
      v9 += 48;
    }
  }
  else
  {
    uint64_t v8 = a1;
    uint64_t v9 = a5;
    while (a3 != a4)
    {
      BOOL v10 = NLExtendedString::operator>(a3, v8);
      uint64_t v11 = (__n128 *)(v9 + 24);
      if (v10)
      {
        long long v12 = *(_OWORD *)a3;
        *(void *)(v9 + 16) = *(void *)(a3 + 16);
        *(_OWORD *)uint64_t v9 = v12;
        *(void *)(a3 + _Block_object_dispose(&__p, 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)a3 = 0;
        __n128 result = *(__n128 *)(a3 + 24);
        *(unsigned char *)(v9 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(a3 + 40);
        *uint64_t v11 = result;
        a3 += 48;
      }
      else
      {
        long long v14 = *(_OWORD *)v8;
        *(void *)(v9 + 16) = *(void *)(v8 + 16);
        *(_OWORD *)uint64_t v9 = v14;
        *(void *)(v8 + _Block_object_dispose(&__p, 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = 0;
        __n128 result = *(__n128 *)(v8 + 24);
        *(unsigned char *)(v9 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(v8 + 40);
        *uint64_t v11 = result;
        v8 += 48;
      }
      ++v20;
      v9 += 48;
      if ((void *)v8 == a2) {
        goto LABEL_11;
      }
    }
    if ((void *)v8 != a2)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = v9 + v16;
        uint64_t v18 = (void *)(v8 + v16);
        long long v19 = *(_OWORD *)(v8 + v16);
        *(void *)(v17 + 16) = *(void *)(v8 + v16 + 16);
        *(_OWORD *)uint64_t v17 = v19;
        v18[1] = 0;
        v18[2] = 0;
        *uint64_t v18 = 0;
        __n128 result = *(__n128 *)(v8 + v16 + 24);
        *(unsigned char *)(v17 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(v8 + v16 + 40);
        *(__n128 *)(v17 + 24) = result;
        v16 += 48;
      }
      while (v18 + 6 != a2);
    }
  }
  return result;
}

void sub_1A43AD234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v5 = 0;
    do
    {
      if (*(char *)(a2 + 23) < 0)
      {
        operator delete(*(void **)a2);
        unint64_t v2 = *a1;
      }
      ++v5;
      a2 += 48;
    }
    while (v5 < v2);
  }
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,std::__wrap_iter<NLExtendedString*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7)
{
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      unint64_t v15 = 0;
      uint64_t v16 = a7;
    }
    else
    {
      unint64_t v15 = 0;
      uint64_t v16 = a7;
      uint64_t v17 = a1;
      do
      {
        long long v18 = *(_OWORD *)v17;
        *((void *)v16 + 2) = *(void *)(v17 + 16);
        *uint64_t v16 = v18;
        *(void *)(v17 + _Block_object_dispose(&__p, 8) = 0;
        *(void *)(v17 + 16) = 0;
        *(void *)uint64_t v17 = 0;
        long long v19 = *(_OWORD *)(v17 + 24);
        *((unsigned char *)v16 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(v17 + 40);
        *(long long *)((char *)v16 + 24) = v19;
        ++v15;
        v16 += 3;
        v17 += 48;
      }
      while (v17 != a2);
    }
    unint64_t v20 = v15;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,NLExtendedString*,NLExtendedString*,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>(a7, v16, a2, a3, a1);
  }
  else
  {
    if (a2 == a3)
    {
      unint64_t v10 = 0;
      uint64_t v11 = (uint64_t)a7;
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v11 = (uint64_t)a7;
      uint64_t v12 = a2;
      do
      {
        long long v13 = *(_OWORD *)v12;
        *(void *)(v11 + 16) = *(void *)(v12 + 16);
        *(_OWORD *)uint64_t v11 = v13;
        *(void *)(v12 + _Block_object_dispose(&__p, 8) = 0;
        *(void *)(v12 + 16) = 0;
        *(void *)uint64_t v12 = 0;
        long long v14 = *(_OWORD *)(v12 + 24);
        *(unsigned char *)(v11 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(v12 + 40);
        *(_OWORD *)(v11 + 24) = v14;
        ++v10;
        v11 += 48;
        v12 += 48;
      }
      while (v12 != a3);
    }
    unint64_t v20 = v10;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::greater<NLExtendedString> &>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>>(v11, v11, (uint64_t)a7, (uint64_t)a7, a2, a2, a1, a1, a3, a3);
  }
  if (a7) {
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>(&v20, (uint64_t)a7);
  }
}

void sub_1A43AD400(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__destruct_n::__process[abi:ne180100]<NLExtendedString>((unint64_t *)(v2 - 24), v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<NLExtendedString> &,NLExtendedString*,NLExtendedString*,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>,std::__wrap_iter<NLExtendedString*>>(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 != a2)
  {
    uint64_t v19 = v5;
    uint64_t v20 = v6;
    uint64_t v11 = (uint64_t)a1;
    while (a3 != a4)
    {
      BOOL v12 = NLExtendedString::operator>(a3, v11);
      int v13 = *(char *)(a5 + 23);
      if (v12)
      {
        if (v13 < 0) {
          operator delete(*(void **)a5);
        }
        long long v14 = *(_OWORD *)a3;
        *(void *)(a5 + 16) = *(void *)(a3 + 16);
        *(_OWORD *)a5 = v14;
        *(unsigned char *)(a3 + 23) = 0;
        *(unsigned char *)a3 = 0;
        long long v15 = *(_OWORD *)(a3 + 24);
        *(unsigned char *)(a5 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(a3 + 40);
        *(_OWORD *)(a5 + 24) = v15;
        a3 += 48;
      }
      else
      {
        if (v13 < 0) {
          operator delete(*(void **)a5);
        }
        long long v16 = *(_OWORD *)v11;
        *(void *)(a5 + 16) = *(void *)(v11 + 16);
        *(_OWORD *)a5 = v16;
        *(unsigned char *)(v11 + 23) = 0;
        *(unsigned char *)uint64_t v11 = 0;
        long long v17 = *(_OWORD *)(v11 + 24);
        *(unsigned char *)(a5 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *(unsigned char *)(v11 + 40);
        *(_OWORD *)(a5 + 24) = v17;
        v11 += 48;
      }
      a5 += 48;
      if ((long long *)v11 == a2) {
        return;
      }
    }
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<NLExtendedString *,NLExtendedString *,NLExtendedString *>((uint64_t)&v18, (long long *)v11, a2, a5);
  }
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::greater<NLExtendedString> &>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<NLExtendedString*>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>,std::reverse_iterator<std::__wrap_iter<NLExtendedString*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 != a4)
  {
    uint64_t v13 = a2;
    while (a6 != a8)
    {
      BOOL v15 = NLExtendedString::operator>(v13 - 48, a6 - 48);
      long long v16 = (void **)(a10 - 48);
      if (v15) {
        uint64_t v17 = a6;
      }
      else {
        uint64_t v17 = v13;
      }
      if (v15) {
        char v18 = (long long *)(a6 - 48);
      }
      else {
        char v18 = (long long *)(v13 - 48);
      }
      if (v15) {
        a6 -= 48;
      }
      else {
        v13 -= 48;
      }
      if (*(char *)(a10 - 25) < 0) {
        operator delete(*v16);
      }
      long long v19 = *v18;
      *(void *)(a10 - 32) = *((void *)v18 + 2);
      *(_OWORD *)long long v16 = v19;
      *(unsigned char *)(v17 - 25) = 0;
      *(unsigned char *)char v18 = 0;
      long long v20 = *(_OWORD *)(v17 - 24);
      *(unsigned char *)(a10 - _Block_object_dispose(&__p, 8) = *(unsigned char *)(v17 - 8);
      *(_OWORD *)(a10 - 24) = v20;
      a10 -= 48;
      if (v13 == a4) {
        return;
      }
    }
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = a10 + v21;
      uint64_t v23 = (void **)(a10 + v21 - 48);
      if (*(char *)(a10 + v21 - 25) < 0) {
        operator delete(*v23);
      }
      uint64_t v24 = (long long *)(v13 + v21 - 48);
      long long v25 = *v24;
      *(void *)(a10 + v21 - 32) = *(void *)(v13 + v21 - 32);
      *(_OWORD *)uint64_t v23 = v25;
      *(unsigned char *)(v13 + v21 - 25) = 0;
      *(unsigned char *)uint64_t v24 = 0;
      long long v26 = *(_OWORD *)(v13 + v21 - 24);
      *(unsigned char *)(v22 - _Block_object_dispose(&__p, 8) = *(unsigned char *)(v13 + v21 - 8);
      *(_OWORD *)(v22 - 24) = v26;
      v21 -= 48;
    }
    while (v13 + v21 != a4);
  }
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<NLExtendedString *,NLExtendedString *,NLExtendedString *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      long long v8 = *(long long *)((char *)v5 + 24);
      *(unsigned char *)(a4 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = *((unsigned char *)v5 + 40);
      *(_OWORD *)(a4 + 24) = v8;
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<NLExtendedString *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  while (1)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<NLExtendedString *> &,std::__wrap_iter<NLExtendedString *> &>(&v11, &v10);
    uint64_t v5 = v11 + 6;
    uint64_t v6 = v10 + 48;
    uint64_t v10 = v6;
    v11 += 6;
    if (v6 == a3) {
      break;
    }
    if (v5 == (uint64_t *)v4) {
      uint64_t v4 = v6;
    }
  }
  if (v5 != (uint64_t *)v4)
  {
    do
    {
      uint64_t v10 = v4;
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<NLExtendedString *> &,std::__wrap_iter<NLExtendedString *> &>(&v11, &v10);
        long long v7 = v11 + 6;
        uint64_t v8 = v10 + 48;
        uint64_t v10 = v8;
        v11 += 6;
        if (v8 == a3) {
          break;
        }
        if (v7 == (uint64_t *)v4) {
          uint64_t v4 = v8;
        }
      }
    }
    while (v7 != (uint64_t *)v4);
  }
  return v5;
}

void std::vector<NLExtendedString>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  long long v7 = *(NLExtendedString **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (NLExtendedString *)((char *)v7 + 48 * a2);
      uint64_t v14 = 48 * a2;
      do
      {
        NLExtendedString::NLExtendedString(v7);
        long long v7 = (NLExtendedString *)((char *)v7 + 48);
        v14 -= 48;
      }
      while (v14);
      long long v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v22 = v4;
    if (v11) {
      BOOL v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NLExtendedString>>(v4, v11);
    }
    else {
      BOOL v12 = 0;
    }
    BOOL v15 = (NLExtendedString *)&v12[48 * v8];
    v19[0] = v12;
    v19[1] = v15;
    long long v20 = v15;
    uint64_t v21 = &v12[48 * v11];
    uint64_t v16 = 3 * a2;
    uint64_t v17 = (NLExtendedString *)((char *)v15 + 48 * a2);
    uint64_t v18 = 16 * v16;
    do
    {
      NLExtendedString::NLExtendedString(v15);
      BOOL v15 = (NLExtendedString *)((char *)v15 + 48);
      v18 -= 48;
    }
    while (v18);
    long long v20 = v17;
    std::vector<NLExtendedString>::__swap_out_circular_buffer(a1, v19);
    std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)v19);
  }
}

void sub_1A43AD8E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<NLExtendedString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<__CFString const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1A43AD970(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&__p, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::vector<NLExtendedString>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::vector<std::vector<std::vector<NLExtendedString>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<NLExtendedString>> const&>(uint64_t a1, long long ***a2)
{
  uint64_t v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  __n128 result = std::vector<std::vector<NLExtendedString>>::__init_with_size[abi:ne180100]<std::vector<NLExtendedString>*,std::vector<NLExtendedString>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(void *)(a1 + _Block_object_dispose(&__p, 8) = v3 + 1;
  return result;
}

void sub_1A43ADA58(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&__p, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<NLExtendedString>>>::__push_back_slow_path<std::vector<std::vector<NLExtendedString>> const&>(uint64_t *a1, long long ***a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<NLExtendedString>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  BOOL v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<NLExtendedString>>::__init_with_size[abi:ne180100]<std::vector<NLExtendedString>*,std::vector<NLExtendedString>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<std::vector<NLExtendedString>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<NLExtendedString>>>::~__split_buffer(v14);
  return v12;
}

void sub_1A43ADB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<NLExtendedString>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<NLExtendedString>>::__init_with_size[abi:ne180100]<std::vector<NLExtendedString>*,std::vector<NLExtendedString>*>(std::string *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*,std::vector<NLExtendedString>*,std::vector<NLExtendedString>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A43ADBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose(&__p, 8) = v10;
  std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*,std::vector<NLExtendedString>*,std::vector<NLExtendedString>*>(uint64_t a1, long long **a2, long long **a3, std::string *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  uint64_t v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<NLExtendedString>::__init_with_size[abi:ne180100]<NLExtendedString*,NLExtendedString*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      unint64_t v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1A43ADCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<NLExtendedString>>,std::vector<NLExtendedString>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::vector<std::vector<std::vector<NLExtendedString>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - _Block_object_dispose(&__p, 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - _Block_object_dispose(&__p, 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<NLExtendedString>>>,std::reverse_iterator<std::vector<std::vector<NLExtendedString>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<NLExtendedString>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<NLExtendedString>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<NLExtendedString>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void NLExtendedString::NLExtendedString(NLExtendedString *this)
{
  uint64_t v1 = std::string::basic_string[abi:ne180100]<0>(this, "");
  *((_DWORD *)v1 + 6) = 0;
  v1[4] = 0x3FF0000000000000;
  *((unsigned char *)v1 + 40) |= 3u;
}

void NLExtendedString::NLExtendedString(std::string *this, long long *a2, int a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  this[1].__r_.__value_.__l.__size_ = 0x3FF0000000000000;
  this[1].__r_.__value_.__s.__data_[16] |= 3u;
}

void NLExtendedString::NLExtendedString(std::string *this, long long *a2, int a3, double a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  *(double *)&this[1].__r_.__value_.__l.__size_ = a4;
  this[1].__r_.__value_.__s.__data_[16] |= 3u;
}

void NLExtendedString::NLExtendedString(std::string *this, long long *a2, int a3, int a4, double a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  *(double *)&this[1].__r_.__value_.__l.__size_ = a5;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = a4;
}

uint64_t NLExtendedString::getPos(NLExtendedString *this)
{
  return *((unsigned int *)this + 6);
}

double NLExtendedString::getWeight(NLExtendedString *this)
{
  return *((double *)this + 4);
}

uint64_t NLExtendedString::setWeight(uint64_t this, double a2)
{
  *(double *)(this + 32) = a2;
  return this;
}

BOOL NLExtendedString::operator>(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 32) > *(double *)(a2 + 32);
}

uint64_t NLExtendedString::getJoinNext(NLExtendedString *this)
{
  return (*((unsigned __int8 *)this + 40) >> 1) & 1;
}

uint64_t NLExtendedString::getJoinPrev(NLExtendedString *this)
{
  return *((unsigned char *)this + 40) & 1;
}

uint64_t NLExtendedString::setJoin(uint64_t result, char a2)
{
  *(unsigned char *)(result + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = a2;
  return result;
}

void NLGujaratiTransliterator::NLGujaratiTransliterator(NLGujaratiTransliterator *this, const __CFDictionary *a2)
{
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 2_Block_object_dispose(&__p, 8) = 1065353216;
  *(_OWORD *)((char *)this + 12nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = xmmword_1A43F7930;
  *((_DWORD *)this + 34) = 2;
  *((void *)this + 1_Block_object_dispose(&__p, 8) = 0xC03E000000000000;
  *((void *)this + 19) = 0x3E800000005;
  *((_DWORD *)this + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = 3;
  *((void *)this + 21) = 0x3FF3333333333333;
  *((void *)this + 22) = 0x1F40000000ALL;
  *(void *)this = &unk_1EF7CD298;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 184), "[\",,;.\"'?!:{}<>*\\-]",
    0);
}

void sub_1A43AE454(_Unwind_Exception *a1)
{
  MEMORY[0x1A625B130](v8, 0xE1C40D30581F4);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v7);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v6);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v5);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v4);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v3);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v2);
  NLGenericTransliterator::~NLGenericTransliterator(v1);
  _Unwind_Resume(a1);
}

void NLGujaratiTransliterator::addSpecialElements(void **a1, char *a2, int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  std::string::basic_string(&v13, &__str, *a3, 2uLL, (std::allocator<char> *)&p_str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  (*(void (**)(std::string *__return_ptr))(*a1[1] + 32))(&__str);
  ((void (*)(void **, std::string *, void, void, char *, uint64_t))(*a1)[18])(a1, &__str, *a4, *a5, a2, a6);
  p_str = &__str;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1A43AE650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double NLGujaratiTransliterator::getEnglishCandidateSequenceScore(uint64_t a1, uint64_t *a2)
{
  stringToUTF32Characters(a2, &v8);
  double v2 = 0.0;
  if (v8 != v9)
  {
    uint64_t v3 = v8;
    do
    {
      int v4 = *v3;
      double v5 = -0.75;
      if (*v3 != 2765)
      {
        double v5 = 1.0;
        if ((v4 - 2709) >= 0x25)
        {
          if ((v4 - 2750) >= 0xF && (v4 - 2693) >= 0xF) {
            double v5 = 0.3;
          }
          else {
            double v5 = 0.5;
          }
        }
      }
      double v2 = v2 + v5;
      ++v3;
    }
    while (v3 != v9);
  }
  if (v8)
  {
    long long v9 = v8;
    operator delete(v8);
  }
  return v2;
}

void NLGujaratiTransliterator::preProcessForRomanSuffixes(uint64_t a1@<X0>, std::__wrap_iter<const char *> a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5 = *((unsigned __int8 *)a2.__i_ + 23);
  if ((a2.__i_[23] & 0x80000000) == 0)
  {
    if (v5 < 4)
    {
      *(_OWORD *)a3 = *(_OWORD *)a2.__i_;
      std::string::size_type v6 = *((void *)a2.__i_ + 2);
LABEL_19:
      *(void *)(a3 + 16) = v6;
      return;
    }
    std::string::size_type v7 = *((void *)a2.__i_ + 1);
LABEL_9:
    *(void *)a3 = 0;
    *(void *)(a3 + _Block_object_dispose(&__p, 8) = 0;
    *(void *)(a3 + 16) = 0;
    if ((v5 & 0x80u) != 0)
    {
      a2.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a2.__i_;
      std::string::size_type v5 = v7;
    }
    v9.__i_ = &a2.__i_[v5];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)a3, a2, v9, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(a1 + 248), "$1$2", 0);
    memset(&v13, 0, sizeof(v13));
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0) {
      v11.__i_ = (std::__wrap_iter<const char *>::iterator_type)a3;
    }
    else {
      v11.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a3;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a3 + 8);
    }
    v12.__i_ = &v11.__i_[v10];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v13, v11, v12, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(a1 + 312), "$1", 0);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    std::string::size_type v6 = v13.__r_.__value_.__r.__words[2];
    goto LABEL_19;
  }
  std::string::size_type v7 = *((void *)a2.__i_ + 1);
  if (v7 >= 4) {
    goto LABEL_9;
  }
  uint64_t v8 = *(const std::string::value_type **)a2.__i_;

  std::string::__init_copy_ctor_external((std::string *)a3, v8, v7);
}

void sub_1A43AE854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void NLGujaratiTransliterator::addDynamicMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  char v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  memset(v29, 0, 41);
  uint64_t v4 = a1 + 376;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 32);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v6 = *(void *)(a2 + 8);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(void *)a2;
    uint64_t v5 = v6;
  }
  *(std::pair<const char *, const char *> *)((char *)&__p.__unmatched_.std::pair<const char *, const char *> + 1) = 0uLL;
  int v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v4, (char *)a2, (char *)(a2 + v5), &__p, 0);
  uint64_t v8 = *(unsigned __int8 *)(v2 + 23);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v2;
  }
  else {
    uint64_t v9 = *(void *)v2;
  }
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(v2 + 8);
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v29, v9, (std::sub_match<std::__wrap_iter<const char *>> *)(v9 + v8), (uint64_t *)&__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (v7)
  {
    char v10 = *(unsigned char *)(v2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v2 + 8);
    }
    if (v10 >= 0) {
      std::__wrap_iter<const char *> v12 = (char *)v2;
    }
    else {
      std::__wrap_iter<const char *> v12 = *(char **)v2;
    }
    std::string v13 = &v12[v11];
    long long v14 = &v12[v11];
    if (v11 > 4)
    {
      uint64_t v15 = v11;
      uint64_t v16 = v12;
      do
      {
        uint64_t v17 = (char *)memchr(v16, 112, v15 - 4);
        if (!v17) {
          break;
        }
        long long v14 = v17;
        if (*(_DWORD *)v17 == 1953067632 && v17[4] == 104) {
          goto LABEL_26;
        }
        uint64_t v16 = v17 + 1;
        uint64_t v15 = v13 - (v14 + 1);
      }
      while (v15 > 4);
      long long v14 = &v12[v11];
    }
LABEL_26:
    if (v11 >= 4)
    {
      long long v19 = v12;
      do
      {
        long long v20 = (char *)memchr(v19, 103, v11 - 3);
        if (!v20) {
          break;
        }
        if (*(_DWORD *)v20 == 1751741031) {
          goto LABEL_32;
        }
        long long v19 = v20 + 1;
        uint64_t v11 = v13 - (unsigned char *)v19;
      }
      while (v13 - (unsigned char *)v19 > 3);
    }
    long long v20 = v13;
LABEL_32:
    BOOL v22 = v20 != v13 && v20 - v12 != -1;
    BOOL v23 = v14 - v12 == -1 || v14 == v13;
    if (!v23 || v22)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "");
      NLExtendedString::NLExtendedString((std::string *)&__p, (long long *)v27, 2, 2, 1.0);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "");
      NLExtendedString::NLExtendedString((std::string *)&__p, (long long *)v27, 2, 2, 0.005);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    uint64_t v24 = *(void *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v27, "i");
    (*(void (**)(uint64_t, void **, std::match_results<const char *> *))(*(void *)v24 + 16))(v24, v27, &__p);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(__p.__matches_.__end_cap_.__value_) < 0) {
      operator delete(__p.__matches_.__begin_);
    }
  }
  int v25 = *(char *)(v2 + 23);
  if (v25 < 0)
  {
    if (*(void *)(v2 + 8) != 1) {
      goto LABEL_65;
    }
    uint64_t v2 = *(void *)v2;
  }
  else if (v25 != 1)
  {
    goto LABEL_65;
  }
  if (*(unsigned char *)v2 == 111)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "ઑ");
    NLExtendedString::NLExtendedString(&__p, v27, 1, 1.0);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    uint64_t v26 = *(void *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v27, "o");
    (*(void (**)(uint64_t, void **, std::match_results<const char *> *))(*(void *)v26 + 16))(v26, v27, &__p);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(__p.__matches_.__end_cap_.__value_) < 0) {
      operator delete(__p.__matches_.__begin_);
    }
  }
LABEL_65:
  if (v29[0].__begin_)
  {
    v29[0].__end_ = v29[0].__begin_;
    operator delete(v29[0].__begin_);
  }
}

void sub_1A43AEC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void NLGujaratiTransliterator::postProcessForExaggeration(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = a1[1];
  std::string::basic_string(&__p, (const std::string *)a2, 0, 2uLL, (std::allocator<char> *)&v22);
  (*(void (**)(void *__return_ptr, uint64_t, std::string *))(*(void *)v10 + 32))(v21, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  int v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0) {
    int v11 = *(_DWORD *)(a2 + 8);
  }
  (*(void (**)(void *, void *, uint64_t, void, uint64_t, uint64_t *))(*a1 + 144))(a1, v21, a4, (v11 + a4), a3, a5);
  uint64_t v12 = *a5;
  if (a5[1] != *a5)
  {
    unint64_t v13 = 0;
    do
    {
      NLAbstractOrthographyConvertor::~NLAbstractOrthographyConvertor((NLAbstractOrthographyConvertor *)(v12 + 48 * v13));
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v14, *((void *)v14 + 1));
      }
      else
      {
        long long v15 = *v14;
        __p.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) <= v13) {
        goto LABEL_24;
      }
      double Weight = NLExtendedString::getWeight((NLExtendedString *)(*a5 + 48 * v13));
      unint64_t v17 = *(unsigned __int8 *)(a2 + 23);
      if ((v17 & 0x80u) != 0) {
        unint64_t v17 = *(void *)(a2 + 8);
      }
      if (v17 >= 3)
      {
        for (unint64_t i = 2; i < v19; ++i)
        {
          std::string::append(&__p, "ઽ");
          double Weight = Weight + Weight;
          unint64_t v19 = *(unsigned __int8 *)(a2 + 23);
          if ((v19 & 0x80u) != 0) {
            unint64_t v19 = *(void *)(a2 + 8);
          }
        }
      }
      if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) <= v13
        || (NLExtendedString::setString((std::string *)(*a5 + 48 * v13), &__p),
            0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) <= v13))
      {
LABEL_24:
        std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
      }
      NLExtendedString::setWeight(*a5 + 48 * v13, Weight);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v13;
      uint64_t v12 = *a5;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 4) > v13);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1A43AEF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::string __p = &a16;
  std::vector<NLExtendedString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t NLGujaratiTransliterator::isSpecialCharSeq(int a1, int a2, char *__s, int a4)
{
  if (a2 != 2) {
    return 0;
  }
  uint64_t v5 = a4;
  size_t v6 = a4 + 1;
  if (strlen(__s) > v6 && __s[v5] == 114 && (unsigned int v7 = __s[v6] - 97, v7 <= 0x14)) {
    return (0x100101u >> v7) & 1;
  }
  else {
    return 0;
  }
}

uint64_t NLGujaratiTransliterator::addSpecialCandidates(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 23);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (v2 != 2)
    {
      uint64_t result = 0;
      goto LABEL_20;
    }
    uint64_t v3 = (_WORD *)a2;
    if (*(_WORD *)a2 == 26994)
    {
      uint64_t v4 = (_WORD *)a2;
      goto LABEL_17;
    }
LABEL_7:
    if (*v3 != 30066)
    {
      uint64_t result = 0;
      if ((v2 & 0x80) != 0) {
        goto LABEL_22;
      }
LABEL_20:
      size_t v6 = (_WORD *)a2;
      if (v2 != 2) {
        return result;
      }
      goto LABEL_24;
    }
LABEL_12:
    if ((v2 & 0x80) != 0)
    {
      if (*(void *)(a2 + 8) != 2) {
        goto LABEL_18;
      }
      uint64_t v4 = *(_WORD **)a2;
    }
    else
    {
      uint64_t v4 = (_WORD *)a2;
      if (v2 != 2) {
        goto LABEL_18;
      }
    }
LABEL_17:
    if (*v4 == 26994) {
      operator new();
    }
LABEL_18:
    operator new();
  }
  if (*(void *)(a2 + 8) == 2)
  {
    uint64_t v3 = *(_WORD **)a2;
    if (**(_WORD **)a2 == 26994) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t result = 0;
LABEL_22:
  if (*(void *)(a2 + 8) != 2) {
    return result;
  }
  size_t v6 = *(_WORD **)a2;
LABEL_24:
  if (*v6 == 28015) {
    operator new();
  }
  return result;
}

void sub_1A43AFA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  MEMORY[0x1A625B130](v16, 0x1012C40B0087DDBLL);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *NLGujaratiTransliterator::getHalantCharacter@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "્");
}

void *NLGujaratiTransliterator::getFirstLetter@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "અ");
}

void *NLGujaratiTransliterator::getLastLetter@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "હ");
}

void *NLGujaratiTransliterator::getAnyConsonant@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "બ");
}

void NLGujaratiTransliterator::~NLGujaratiTransliterator(std::locale *this)
{
  NLGujaratiTransliterator::~NLGujaratiTransliterator(this);

  JUMPOUT(0x1A625B130);
}

{
  std::locale *v2;
  std::__shared_weak_count *locale;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t vars8;

  this->__locale_ = (std::locale::__imp *)&unk_1EF7CD298;
  int v2 = this + 63;
  std::basic_regex<char>::value_type locale = (std::__shared_weak_count *)this[69].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v2);
  uint64_t v4 = (std::__shared_weak_count *)this[61].__locale_;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::locale::~locale(this + 55);
  uint64_t v5 = (std::__shared_weak_count *)this[53].__locale_;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::locale::~locale(this + 47);
  size_t v6 = (std::__shared_weak_count *)this[45].__locale_;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::locale::~locale(this + 39);
  unsigned int v7 = (std::__shared_weak_count *)this[37].__locale_;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::locale::~locale(this + 31);
  uint64_t v8 = (std::__shared_weak_count *)this[29].__locale_;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::locale::~locale(this + 23);

  NLGenericTransliterator::~NLGenericTransliterator((NLGenericTransliterator *)this);
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2, int a3)
{
  uint64_t v5 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v5[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v5[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[1].__col_ + 4) = 0u;
  HIDWORD(v5[2].__ct_) = 0;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_1A43AFD4C(_Unwind_Exception *a1)
{
  std::basic_regex<char>::value_type locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  uint64_t v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      size_t v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, (char *)v3, v4);
    }
    while (v3 != v6);
    if (v6 != (unsigned __int8 *)v4)
    {
      if (v6 + 1 != (unsigned __int8 *)v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a3;
  std::vector<std::string>::pointer end = a1->__end_;
  unsigned int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<char> *)v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  unsigned int v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    int v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  unsigned int v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    int v11 = v8 == a3 ? v8 : (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  unsigned int v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8) {
    return a2;
  }
  size_t v6 = a3;
  unsigned int v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      int v8 = *v7;
      if ((v8 - 48) > 9) {
        break;
      }
      if (v5 >= 0x19999999) {
        goto LABEL_16;
      }
      ++v7;
      unsigned int v5 = v8 + 10 * v5 - 48;
      if (v7 == a3) {
        goto LABEL_12;
      }
    }
    size_t v6 = v7;
LABEL_12:
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 > a1->__marked_count_) {
LABEL_16:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  int v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      char v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            unsigned int v7 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            unsigned int v7 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            unsigned int v7 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          int v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
            goto LABEL_64;
          }
          int v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          int v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_24;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6) {
            goto LABEL_64;
          }
          char v11 = -87;
LABEL_24:
          char v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          int v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_30;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6) {
            goto LABEL_64;
          }
          char v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          int v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
            goto LABEL_35;
          }
          v14 |= 0x20u;
          if ((v14 - 97) >= 6) {
            goto LABEL_64;
          }
          char v15 = -87;
LABEL_35:
          std::string::value_type v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4) {
            std::string::operator=(a4, v16);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            unsigned int v7 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        unsigned int v7 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_50;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          unsigned int v7 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_50:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          unsigned int v7 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_64;
    }
    char v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v17 & 0xDF) - 65) > 0x19u) {
      goto LABEL_64;
    }
    std::string::value_type v18 = v17 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v18);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i] == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    uint64_t v8 = v19;
    if (v19)
    {
      int v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  int v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v9, &v9[v8], (uint64_t)__p);
  unint64_t v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v11 = v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      char v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        char v13 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      int v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        int v12 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i + 2];
}

void sub_1A43B07A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i] == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v7 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, a2, &a2[i], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        long long v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 16nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
LABEL_25:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          char v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          char v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          char v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          char v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            char v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            char v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        char v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      char v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  std::vector<std::string>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  int v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  std::string::value_type v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int marked_count = a1->__marked_count_;
        do
        {
          std::string::value_type v11 = (char *)v9;
          uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::string::value_type v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        BOOL v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        uint64_t v14 = 2;
        if (!v13) {
          uint64_t v14 = 0;
        }
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  char v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      BOOL v13 = a2 + 2;
      int v25 = 0;
      uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        char v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          char v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            char v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            char v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          char v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          char v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
      return a2 + 1;
    }
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3) {
    goto LABEL_12;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale_low == 40)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    int v12 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v12 == a3 || (BOOL v13 = v12, LOBYTE(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (locale_low != 94) {
    return (unsigned __int8 *)a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v14);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (char *)a2)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  int v5 = *v4;
  std::basic_regex<char>::value_type v6 = *v4;
  BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    uint64_t v10 = 2;
    if (!v9) {
      uint64_t v10 = 0;
    }
    v3 += v10;
    return v3;
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

std::string *std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, std::__wrap_iter<const char *> a2, std::__wrap_iter<const char *> a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, char *a5, unsigned __int32 __m)
{
  __int16 v6 = __m;
  uint64_t i = (std::string::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v18, a2, a3, a4, (std::regex_constants::match_flag_type)__m);
  memset(&v17.__match_.__prefix_, 0, 17);
  memset(&v17.__match_.__suffix_, 0, 17);
  v17.__match_.__ready_ = 0;
  v17.__match_.__position_start_.__i_ = 0;
  memset(&v17.__match_, 0, 41);
  memset(&v17, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v18, &v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (i != a3.__i_)
        std::string::push_back(a1, *i++);
    }
  }
  else
  {
    std::__wrap_iter<const char *>::iterator_type v11 = 0;
    int v12 = 0;
    BOOL v13 = (unsigned __int8 *)&a5[strlen(a5)];
    while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v18, &v17))
    {
      if ((v6 & 0x200) == 0)
      {
        size_t v14 = (std::string::value_type *)v18.__match_.__prefix_.first.__i_;
        std::__wrap_iter<const char *>::iterator_type v15 = v18.__match_.__prefix_.second.__i_;
        while (v14 != v15)
          std::string::push_back(a1, *v14++);
      }
      a1 = std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>((std::string::value_type ***)&v18.__match_, a1, (unsigned __int8 *)a5, v13, v6);
      int v12 = (std::string::value_type *)v18.__match_.__suffix_.first.__i_;
      std::__wrap_iter<const char *>::iterator_type v11 = v18.__match_.__suffix_.second.__i_;
      if ((v6 & 0x400) != 0) {
        break;
      }
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v18);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::string::push_back(a1, *v12++);
    }
  }
  if (v17.__match_.__matches_.__begin_)
  {
    v17.__match_.__matches_.__end_ = v17.__match_.__matches_.__begin_;
    operator delete(v17.__match_.__matches_.__begin_);
  }
  if (v18.__match_.__matches_.__begin_)
  {
    v18.__match_.__matches_.__end_ = v18.__match_.__matches_.__begin_;
    operator delete(v18.__match_.__matches_.__begin_);
  }
  return a1;
}

void sub_1A43B1634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>(std::string::value_type ***a1, std::string *this, unsigned __int8 *a3, unsigned __int8 *a4, __int16 a5)
{
  __int16 v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4) {
      return this;
    }
    while (1)
    {
      int v30 = *v6;
      if (v30 == 92)
      {
        uint64_t v34 = v6 + 1;
        if (v6 + 1 != a4)
        {
          int v30 = *v34;
          if ((v30 - 48) <= 9u)
          {
            unint64_t v35 = (v30 - 48);
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v35) {
              uint64_t v36 = (uint64_t)(a1 + 3);
            }
            else {
              uint64_t v36 = (uint64_t)&(*a1)[3 * v35];
            }
            uint64_t v37 = *(std::string::value_type **)v36;
            uint64_t v38 = *(std::string::value_type **)(v36 + 8);
            while (v37 != v38)
            {
              std::string::value_type v39 = *v37++;
              std::string::push_back(this, v39);
            }
            goto LABEL_55;
          }
          ++v6;
        }
      }
      else if (v30 == 38)
      {
        uint64_t v31 = **a1;
        char v32 = (*a1)[1];
        while (v31 != v32)
        {
          std::string::value_type v33 = *v31++;
          std::string::push_back(this, v33);
        }
        goto LABEL_54;
      }
      std::string::push_back(this, v30);
LABEL_54:
      uint64_t v34 = v6;
LABEL_55:
      __int16 v6 = v34 + 1;
      if (v34 + 1 == a4) {
        return this;
      }
    }
  }
  if (a3 != a4)
  {
    do
    {
      int v9 = *v6;
      uint64_t v10 = v6 + 1;
      if (v9 == 36 && v10 != a4)
      {
        int v12 = (char)*v10;
        int v9 = *v10;
        if (v12 > 38)
        {
          if (v12 == 39)
          {
            size_t v19 = (std::string::value_type *)a1[9];
            size_t v20 = (std::string::value_type *)a1[10];
            while (v19 != v20)
            {
              std::string::value_type v21 = *v19++;
              std::string::push_back(this, v21);
            }
            goto LABEL_10;
          }
          if (v12 == 96)
          {
            int v16 = (std::string::value_type *)a1[6];
            std::regex_iterator<std::__wrap_iter<const char *>, char> v17 = (std::string::value_type *)a1[7];
            while (v16 != v17)
            {
              std::string::value_type v18 = *v16++;
              std::string::push_back(this, v18);
            }
            goto LABEL_10;
          }
        }
        else
        {
          if (v12 == 36) {
            goto LABEL_9;
          }
          if (v12 == 38)
          {
            BOOL v13 = **a1;
            size_t v14 = (*a1)[1];
            while (v13 != v14)
            {
              std::string::value_type v15 = *v13++;
              std::string::push_back(this, v15);
            }
            goto LABEL_10;
          }
        }
        if ((v9 - 48) <= 9)
        {
          unint64_t v22 = *v10 - 48;
          if (v6 + 2 != a4)
          {
            uint64_t v23 = v6[2];
            unsigned int v24 = v23 - 48;
            uint64_t v25 = v23 + 10 * (int)v22 - 48;
            if (v24 > 9)
            {
              uint64_t v10 = v6 + 1;
            }
            else
            {
              unint64_t v22 = v25;
              uint64_t v10 = v6 + 2;
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v22) {
            uint64_t v26 = (uint64_t)(a1 + 3);
          }
          else {
            uint64_t v26 = (uint64_t)&(*a1)[3 * (int)v22];
          }
          uint64_t v27 = *(std::string::value_type **)v26;
          char v28 = *(std::string::value_type **)(v26 + 8);
          while (v27 != v28)
          {
            std::string::value_type v29 = *v27++;
            std::string::push_back(this, v29);
          }
          goto LABEL_10;
        }
        LOBYTE(v9) = 36;
      }
      uint64_t v10 = v6;
LABEL_9:
      std::string::push_back(this, v9);
LABEL_10:
      __int16 v6 = v10 + 1;
    }
    while (v10 + 1 != a4);
  }
  return this;
}

void *std::vector<std::vector<NLTransliterationCandidate *>>::__construct_one_at_end[abi:ne180100]<std::vector<NLTransliterationCandidate *> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<NLTransliterationCandidate *>::__init_with_size[abi:ne180100]<NLTransliterationCandidate **,NLTransliterationCandidate **>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + _Block_object_dispose(&__p, 8) = v3 + 3;
  return result;
}

void sub_1A43B192C(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&__p, 8) = v2;
  _Unwind_Resume(a1);
}

void createPathForLocalizedResource(const __CFLocale *a1, const __CFString *a2)
{
  CFTypeRef Value = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  CFTypeRef v5 = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
  if (v5) {
    CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"%@_%@-%@", Value, v5, a2);
  }
  else {
    CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"%@-%@", Value, a2);
  }
  NL::Resource::createBundleResource(a1, v6, 0, 0, v7);
}

void NLEmojiGenerator::NLEmojiGenerator(NLEmojiGenerator *this, CFDictionaryRef theDict)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (theDict)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, kNLEmojiPredictionLocaleKey[0]);
    if (Value)
    {
      CFStringRef v4 = Value;
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFStringGetTypeID())
      {
        CFLocaleRef v6 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4);
        goto LABEL_7;
      }
      CFTypeID v7 = CFGetTypeID(v4);
      if (v7 == CFLocaleGetTypeID())
      {
        CFLocaleRef v6 = (const __CFLocale *)CFRetain(v4);
LABEL_7:
        *((void *)this + 1) = v6;
        if (!v6) {
          return;
        }
LABEL_10:
        createPathForLocalizedResource(v6, @"phrase-to-emojis.plist");
      }
    }
    CFLocaleRef v6 = (const __CFLocale *)*((void *)this + 1);
    if (!v6) {
      return;
    }
    goto LABEL_10;
  }
}

void NLEmojiGenerator::~NLEmojiGenerator(NLEmojiGenerator *this)
{
  uint64_t v2 = *(const void **)this;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 1);
  if (v3) {
    CFRelease(v3);
  }
}

CFStringRef NLEmojiGenerator::copyKeyEndingWithPhrase(CFDictionaryRef *this, const __CFString *a2)
{
  CFDictionaryRef v3 = *this;
  if (!v3) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(v3);
  if (Count < 1) {
    return 0;
  }
  std::vector<__CFString const*>::vector(&keys, Count);
  CFDictionaryGetKeysAndValues(*this, (const void **)keys, 0);
  CFLocaleRef v6 = v14;
  if (v14 == keys)
  {
LABEL_10:
    CFStringRef Copy = 0;
    if (!v6) {
      return Copy;
    }
    goto LABEL_14;
  }
  unint64_t v7 = 0;
  CFLocaleRef v6 = keys;
  while (1)
  {
    if (CFStringHasSuffix(a2, (CFStringRef)v6[v7]))
    {
      CFStringRef v8 = (const __CFString *)keys[v7];
      CFIndex Length = CFStringGetLength(a2);
      CFIndex v10 = CFStringGetLength(v8);
      if (Length == v10 || Length > v10 && CFStringGetCharacterAtIndex(a2, Length + ~v10) == 32) {
        break;
      }
    }
    ++v7;
    CFLocaleRef v6 = keys;
    if (v7 >= v14 - keys) {
      goto LABEL_10;
    }
  }
  CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFStringRef)keys[v7]);
  CFLocaleRef v6 = keys;
  if (keys)
  {
LABEL_14:
    size_t v14 = v6;
    operator delete(v6);
  }
  return Copy;
}

void sub_1A43B1C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *NLEmojiGenerator::createEmojisForString(NLEmojiGenerator *this, const __CFString *a2)
{
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (a2)
  {
    CFLocaleRef v5 = (const __CFLocale *)*((void *)this + 1);
    if (v5)
    {
      if (*(void *)this)
      {
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFIndex Length = CFStringGetLength(a2);
        MutableCFStringRef Copy = CFStringCreateMutableCopy(v6, Length, a2);
        if (MutableCopy)
        {
          int v9 = MutableCopy;
          CFStringTrimWhitespace(MutableCopy);
          CFStringLowercase(v9, v5);
          CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
          v26.CFIndex length = CFStringGetLength(v9);
          v26.CFIndex location = 0;
          if (CFStringFindCharacterFromSet(v9, Predefined, v26, 0, &v24)) {
            BOOL v11 = v24.location == 0;
          }
          else {
            BOOL v11 = 0;
          }
          if (v11)
          {
            do
            {
              v25.CFIndex length = v24.length;
              v25.CFIndex location = 0;
              CFStringDelete(v9, v25);
              v27.CFIndex length = CFStringGetLength(v9);
              v27.CFIndex location = 0;
            }
            while (CFStringFindCharacterFromSet(v9, Predefined, v27, 0, &v24) && !v24.location);
          }
          while (1)
          {
            v28.CFIndex length = CFStringGetLength(v9);
            v28.CFIndex location = 0;
            if (!CFStringFindCharacterFromSet(v9, Predefined, v28, 4uLL, &v24)) {
              break;
            }
            CFIndex location = v24.location;
            if (location != CFStringGetLength(v9) - 1) {
              break;
            }
            CFStringDelete(v9, v24);
          }
          CFStringTrimWhitespace(v9);
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)this, v9);
          if (Value)
          {
            CFArrayRef v14 = Value;
            if (CFArrayGetCount(Value) >= 1)
            {
              CFIndex v15 = 0;
              do
              {
                CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
                CFArrayAppendValue(Mutable, ValueAtIndex);
                ++v15;
              }
              while (v15 < CFArrayGetCount(v14));
            }
          }
          else
          {
            CFStringRef v17 = NLEmojiGenerator::copyKeyEndingWithPhrase((CFDictionaryRef *)this, v9);
            if (v17)
            {
              CFStringRef v18 = v17;
              CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)this, v17);
              if (v19)
              {
                CFArrayRef v20 = v19;
                if (CFArrayGetCount(v19) >= 1)
                {
                  CFIndex v21 = 0;
                  do
                  {
                    unint64_t v22 = CFArrayGetValueAtIndex(v20, v21);
                    CFArrayAppendValue(Mutable, v22);
                    ++v21;
                  }
                  while (v21 < CFArrayGetCount(v20));
                }
              }
              CFRelease(v18);
            }
          }
          CFRelease(v9);
        }
      }
    }
  }
  return Mutable;
}

void loadAlternteKeywordsPlistFromFile(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  CFStringRef CFStringFromString = createCFStringFromString(a1);
  getPathForResource(CFStringFromString, &v60);
  CFStringRef v4 = (NL::CFLogger *)std::string::compare(&v60, "");
  if (v4)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFAllocatorRef v6 = &v60;
    }
    else {
      CFAllocatorRef v6 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v6, 0x8000100u);
    CFURLRef v8 = CFURLCreateWithFileSystemPath(v5, v7, kCFURLPOSIXPathStyle, 0);
    CFURLRef v9 = v8;
    CFDataRef resourceData = 0;
    SInt32 errorCode = 0;
    if (v8)
    {
      CFURLRef v8 = (CFURLRef)CFURLCreateDataAndPropertiesFromResource(v5, v8, &resourceData, 0, 0, &errorCode);
      int v10 = (int)v8;
      if (!v7) {
        goto LABEL_12;
      }
    }
    else
    {
      int v10 = 0;
      if (!v7)
      {
LABEL_12:
        if (v9) {
          CFRelease(v9);
        }
        if (CFStringFromString) {
          CFRelease(CFStringFromString);
        }
        if (v10 && resourceData)
        {
          CFErrorRef error = 0;
          CFDictionaryRef v12 = (const __CFDictionary *)CFPropertyListCreateWithData(v5, resourceData, 0, 0, &error);
          if (resourceData) {
            CFRelease(resourceData);
          }
          if (v12)
          {
            CFIndex Count = CFDictionaryGetCount(v12);
            std::vector<__CFString const*>::vector(&v55, Count);
            CFDictionaryGetKeysAndValues(v12, v55, 0);
            CFArrayRef v14 = v55;
            uint64_t v34 = v56;
            if (v55 != v56)
            {
              CFDictionaryRef theDict = v12;
              do
              {
                uint64_t v36 = v14;
                CFStringRef v15 = (const __CFString *)*v14;
                CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, *v14);
                getUTF8StringFromCFString(v15, v53);
                CFIndex v16 = CFDictionaryGetCount(Value);
                std::vector<__CFString const*>::vector(&keys, v16);
                CFDictionaryGetKeysAndValues(Value, (const void **)keys, 0);
                CFStringRef v17 = (const __CFString **)keys;
                uint64_t v37 = v52;
                if (keys != v52)
                {
                  do
                  {
                    std::string::value_type v39 = v17;
                    CFStringRef v18 = *v17;
                    getUTF8StringFromCFString(*v17, v49);
                    CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(Value, v18);
                    CFIndex v20 = CFArrayGetCount(v19);
                    memset(v47, 0, sizeof(v47));
                    int v48 = 1065353216;
                    if (v20 >= 1)
                    {
                      CFIndex v21 = 0;
                      CFArrayRef v40 = v19;
                      do
                      {
                        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, v21);
                        CFIndex v23 = CFDictionaryGetCount(ValueAtIndex);
                        std::vector<__CFString const*>::vector(&v45, v23);
                        CFDictionaryGetKeysAndValues(ValueAtIndex, (const void **)v45, 0);
                        CFRange v24 = v46;
                        if (v46 != v45)
                        {
                          unint64_t v25 = 0;
                          CFRange v24 = v45;
                          do
                          {
                            CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v24[v25]);
                            if (v25 >= v46 - v45) {
                              std::vector<NLExtendedString>::__throw_out_of_range[abi:ne180100]();
                            }
                            CFStringRef v27 = v26;
                            getUTF8StringFromCFString((const __CFString *)v45[v25], __p);
                            getUTF8StringFromCFString(v27, v41);
                            v61[0] = (long long *)v53;
                            CFRange v28 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v53, (uint64_t)&std::piecewise_construct, v61);
                            v61[0] = (long long *)v49;
                            std::string::value_type v29 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v28 + 40), (unsigned __int8 *)v49, (uint64_t)&std::piecewise_construct, v61);
                            v61[0] = (long long *)__p;
                            int v30 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v29 + 40), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, v61);
                            uint64_t v31 = v30 + 40;
                            if ((char)v30[63] < 0) {
                              operator delete(*(void **)v31);
                            }
                            *(_OWORD *)uint64_t v31 = *(_OWORD *)v41;
                            *((void *)v31 + 2) = v42;
                            if (v44 < 0) {
                              operator delete(__p[0]);
                            }
                            ++v25;
                            CFRange v24 = v45;
                          }
                          while (v25 < v46 - v45);
                        }
                        if (v24)
                        {
                          uint64_t v46 = v24;
                          operator delete(v24);
                        }
                        ++v21;
                        CFArrayRef v19 = v40;
                      }
                      while (v21 != v20);
                    }
                    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v47);
                    if (v50 < 0) {
                      operator delete(v49[0]);
                    }
                    CFStringRef v17 = v39 + 1;
                  }
                  while (v39 + 1 != (const __CFString **)v37);
                  CFStringRef v17 = (const __CFString **)keys;
                }
                if (v17)
                {
                  uint64_t v52 = (void **)v17;
                  operator delete(v17);
                }
                if (v54 < 0) {
                  operator delete(v53[0]);
                }
                CFArrayRef v14 = v36 + 1;
              }
              while (v36 + 1 != v34);
              CFArrayRef v14 = v55;
              CFDictionaryRef v12 = theDict;
            }
            if (v14)
            {
              std::string::size_type v56 = v14;
              operator delete(v14);
            }
            CFRelease(v12);
          }
          else
          {
            CFShow(error);
          }
        }
        else
        {
          if (resourceData) {
            CFRelease(resourceData);
          }
          uint64_t v32 = NL::CFLogger::sharedInstance(v8);
          (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v32 + 16))(v32, 3, "Could not load the mappings from resource bundle %d", errorCode);
          if (LogHandleForNLPhotoSharingIntentRecognizer(void)::onceToken != -1) {
            dispatch_once(&LogHandleForNLPhotoSharingIntentRecognizer(void)::onceToken, &__block_literal_global_4);
          }
          std::string::value_type v33 = LogHandleForNLPhotoSharingIntentRecognizer(void)::logHandle;
          if (os_log_type_enabled((os_log_t)LogHandleForNLPhotoSharingIntentRecognizer(void)::logHandle, OS_LOG_TYPE_FAULT))
          {
            loadAlternteKeywordsPlistFromFile(v33);
          }
        }
        goto LABEL_58;
      }
    }
    CFRelease(v7);
    goto LABEL_12;
  }
  uint64_t v11 = NL::CFLogger::sharedInstance(v4);
  (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v11 + 16))(v11, 3, "Could not find the mappings from resource bundle");
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
LABEL_58:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
}

void sub_1A43B25E8()
{
}

void sub_1A43B25F8(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 105) < 0) {
    operator delete(*(void **)(v2 - 128));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t NLPhotoSharingIntentRecognizer::NLPhotoSharingIntentRecognizer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = NLAbstractIntentRecognizer::NLAbstractIntentRecognizer(a1, (long long *)a2);
  *(void *)uint64_t v4 = &unk_1EF7CDBE8;
  *(_OWORD *)(v4 + 8nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = 0u;
  uint64_t v5 = v4 + 80;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 1065353216;
  CFAllocatorRef v6 = std::string::basic_string[abi:ne180100]<0>(&v22, "photosharing-alternate-keywords.plist");
  loadAlternteKeywordsPlistFromFile((uint64_t)v6, (uint64_t)&v14);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__move_assign(v5, &v14);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table((uint64_t)&v14);
  if (v23 < 0) {
    operator delete(v22);
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (*(char *)(a2 + 23) >= 0) {
    CFURLRef v8 = (const char *)a2;
  }
  else {
    CFURLRef v8 = *(const char **)a2;
  }
  CFStringRef v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8, 0x8000100u);
  CFLocaleCreate(0, v9);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v14 = 0;
  CFStringRef v15 = &v14;
  uint64_t v16 = 0x4002000000;
  CFStringRef v17 = __Block_byref_object_copy__10;
  CFStringRef v18 = __Block_byref_object_dispose__10;
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  LDEnumerateAssetDataItems();
  if (*((char *)v15 + 63) < 0)
  {
    if (!v15[6]) {
      goto LABEL_18;
    }
  }
  else if (!*((unsigned char *)v15 + 63))
  {
    goto LABEL_18;
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v11 = (const char *)(v15 + 5);
  if (*((char *)v15 + 63) < 0) {
    uint64_t v11 = *(const char **)v11;
  }
  CFStringRef v12 = CFStringCreateWithCString(v7, v11, 0);
  CFDictionaryAddValue(Mutable, kMRLModelFileLocationKey, v12);
  *(void *)(a1 + 32) = MRLModelCreate();
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = MRLModelGetIOMappings();
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v12) {
    CFRelease(v12);
  }
LABEL_18:
  _Block_object_dispose(&v14, 8);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_1A43B2878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Block_object_dispose(&a14, 8);
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table(v25);
  NLAbstractIntentRecognizer::~NLAbstractIntentRecognizer(v24);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = result;
  *(void *)(a2 + 4_Block_object_dispose(&__p, 8) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void ___ZN30NLPhotoSharingIntentRecognizerC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, const __CFURL *a2, int a3, int a4, CFTypeRef cf1, unsigned char *a6)
{
  if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F724C8]))
  {
    CFStringRef v9 = CFURLCopyPath(a2);
    getUTF8StringFromCFString(v9, &v12);
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v11 = v10 + 40;
    if (*(char *)(v10 + 63) < 0) {
      operator delete(*(void **)v11);
    }
    *(_OWORD *)uint64_t v11 = v12;
    *(void *)(v11 + 16) = v13;
    if (v9) {
      CFRelease(v9);
    }
    *a6 = 1;
  }
}

uint64_t NLPhotoSharingIntentRecognizer::NLPhotoSharingIntentRecognizer(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = NLAbstractIntentRecognizer::NLAbstractIntentRecognizer(a1, a2);
  *(void *)uint64_t v6 = &unk_1EF7CDBE8;
  *(_OWORD *)(v6 + 8nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = 0u;
  uint64_t v7 = v6 + 80;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_DWORD *)(v6 + 112) = 1065353216;
  std::string::operator=((std::string *)(v6 + 8), (const std::string *)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "photosharing-alternate-keywords.plist");
  loadAlternteKeywordsPlistFromFile((uint64_t)__p, (uint64_t)v15);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__move_assign(v7, v15);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table((uint64_t)v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v10 = (const char *)a3;
  }
  else {
    uint64_t v10 = *(const char **)a3;
  }
  CFStringRef v11 = CFStringCreateWithCString(v8, v10, 0);
  CFDictionaryAddValue(Mutable, kMRLModelFileLocationKey, v11);
  *(void *)(a1 + 32) = MRLModelCreate();
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0) = MRLModelGetIOMappings();
  if (v11) {
    CFRelease(v11);
  }
  return a1;
}

void sub_1A43B2B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table(v15);
  NLAbstractIntentRecognizer::~NLAbstractIntentRecognizer(v14);
  _Unwind_Resume(a1);
}

uint64_t NLPhotoSharingIntentRecognizer::copyIntentCandidate@<X0>(uint64_t result@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(void *)(result + 32))
  {
    uint64_t v3 = result;
    if (a2[23] < 0) {
      a2 = *(const char **)a2;
    }
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
    CFArrayRef v10 = NLTokenizerWithDataDetector::copyTokenizedSentences((NLTokenizerWithDataDetector *)(v3 + 72), v11);
    CFIndex Count = CFArrayGetCount(v10);
    CFMutableStringRef Mutable = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      uint64_t v5 = 0;
      CFIndex v6 = Count;
      do
      {
        if (!std::string::compare((const std::string *)(v3 + 8), "zh-Hans")) {
          uint64_t v7 = NLTokenizerWithDataDetector::copyCharacterTokens((NLTokenizerWithDataDetector *)(v3 + 72), v11);
        }
        else {
          uint64_t v7 = NLTokenizerWithDataDetector::copyTokens((NLTokenizerWithDataDetector *)(v3 + 72), v11);
        }
        CFAllocatorRef v8 = v7;
        CFIndex v9 = CFArrayGetCount(v7);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
        v5 += v9;
        --v6;
      }
      while (v6);
    }
    operator new[]();
  }
  return result;
}

void sub_1A43B3A38(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 184);
  if (v3)
  {
    *(void *)(v1 - 176) = v3;
    operator delete(v3);
  }
  *(void *)(v1 - 256) = *(void *)(v1 - 440);
  std::vector<std::unique_ptr<NLMessageIntentCandidate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 256));
  _Unwind_Resume(a1);
}

uint64_t IOMappings::lookupInput(IOMappings *this, char *src, size_t srcLength)
{
  UErrorCode pErrorCode = U_ZERO_ERROR;
  u_strFromUTF8(0, 0, 0, src, srcLength, &pErrorCode);
  if (pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR && pErrorCode != U_BUFFER_OVERFLOW_ERROR)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "UNKNOWN");
    CFArrayRef v10 = (unsigned int *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)this, (const void **)__p);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if ((unsigned int *)((char *)this + 8) == v10) {
      return 1;
    }
    else {
      return v10[14];
    }
  }
  std::string::basic_string[abi:ne180100](__p, src, srcLength);
  uint64_t v7 = (IOMappings *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)this, (const void **)__p);
  CFAllocatorRef v8 = v7;
  if ((IOMappings *)((char *)this + 8) != v7)
  {
    uint64_t v9 = (uint64_t)v7;
LABEL_15:
    uint64_t v11 = *(unsigned int *)(v9 + 56);
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "UNKNOWN");
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)this, (const void **)v13);
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v8 != (IOMappings *)v9) {
    goto LABEL_15;
  }
  uint64_t v11 = 1;
LABEL_16:
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_1A43B3D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&__p, 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void NLPhotoSharingIntentRecognizer::~NLPhotoSharingIntentRecognizer(NLPhotoSharingIntentRecognizer *this)
{
  *(void *)this = &unk_1EF7CDBE8;
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table((uint64_t)this + 80);

  NLAbstractIntentRecognizer::~NLAbstractIntentRecognizer(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF7CDBE8;
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table((uint64_t)this + 80);
  NLAbstractIntentRecognizer::~NLAbstractIntentRecognizer(this);

  JUMPOUT(0x1A625B130);
}

os_log_t ___ZL42LogHandleForNLPhotoSharingIntentRecognizerv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.NLP", "NLPhotoSharingIntentRecognizer");
  LogHandleForNLPhotoSharingIntentRecognizer(void)::logHandle = (uint64_t)result;
  return result;
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    CFIndex v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    CFIndex v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  size_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<NLExtendedString>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<NLExtendedString>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  char v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *char v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}