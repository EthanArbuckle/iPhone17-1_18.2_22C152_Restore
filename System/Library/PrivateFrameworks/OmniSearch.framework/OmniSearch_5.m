uint64_t initializeWithCopy for SearchSpotlightEntity(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  char *v94;
  void *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  char *v134;
  void *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  int *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int *v216;
  uint64_t v217;
  void *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  uint64_t v374;
  int *v375;
  uint64_t v376;
  char *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int *v388;
  uint64_t v389;
  char *v390;
  void *v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  long long v395;
  int *v396;
  uint64_t v397;
  void *v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  void *v402;
  void *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  char *v413;
  uint64_t v414;
  void *v415;
  uint64_t v416;
  void *v417;
  void *v418;
  uint64_t v419;
  uint64_t v420;
  void *v421;
  void *v422;
  uint64_t v423;
  int *v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  size_t v431;
  char *v432;
  const void *v433;
  uint64_t v434;
  char *v435;
  char *v436;
  uint64_t v437;
  void *v438;
  uint64_t v439;
  void *v440;
  void *v441;
  uint64_t v442;
  uint64_t v443;
  void *v444;
  void *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  size_t v452;
  char *v453;
  const void *v454;
  uint64_t v455;
  char *v456;
  char *v457;
  uint64_t v458;
  char *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  void *v463;
  void *v464;
  uint64_t v465;
  uint64_t v466;
  void *v467;
  void *v468;
  uint64_t v469;
  uint64_t v470;
  char *v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  void *v475;
  void *v476;
  uint64_t v477;
  uint64_t v478;
  void *v479;
  void *v480;
  uint64_t v481;
  uint64_t v482;
  void *v483;
  void *v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  char *v488;
  uint64_t v489;
  void *v490;
  void *v491;
  uint64_t v492;
  uint64_t v493;
  void *v494;
  void *v495;
  uint64_t v496;
  uint64_t v497;
  char *v498;
  char *v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  char *v503;
  uint64_t v504;
  uint64_t v505;
  void *v506;
  void *v507;
  uint64_t v508;
  uint64_t v509;
  void *v510;
  void *v511;
  uint64_t v512;
  uint64_t v513;
  void *v514;
  void *v515;
  uint64_t v516;
  uint64_t v517;
  void *v518;
  void *v519;
  uint64_t v520;
  uint64_t v521;
  void *v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  void *v526;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  void *v530;
  void *v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  void *v535;
  uint64_t v536;
  uint64_t v537;
  char *v538;
  char *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  void *v543;
  void *v544;
  uint64_t v545;
  uint64_t v546;
  char *v547;
  char *v548;
  uint64_t v549;
  uint64_t v550;
  char *v551;
  char *v552;
  uint64_t *v553;
  uint64_t v554;
  char *v555;
  char *v556;
  uint64_t v557;
  uint64_t v558;
  char *v559;
  char *v560;
  uint64_t v561;
  uint64_t v562;
  char *v563;
  char *v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  void *v569;
  void *v570;
  uint64_t v571;
  void *v572;
  uint64_t v573;
  uint64_t v574;
  void *v575;
  void *v576;
  uint64_t v577;
  int *v578;
  uint64_t v579;
  uint64_t v580;
  void *v581;
  void *v582;
  uint64_t v583;
  uint64_t v584;
  void *v585;
  void *v586;
  uint64_t v587;
  uint64_t v588;
  void *v589;
  char *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  void *v597;
  void *v598;
  uint64_t v599;
  uint64_t v600;
  void *v601;
  void *v602;
  uint64_t v603;
  uint64_t v604;
  void *v605;
  char *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  void *v614;
  void *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  void *v621;
  void *v622;
  uint64_t v623;
  uint64_t v624;
  void *v625;
  void *v626;
  uint64_t v627;
  char *v628;
  char *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  void *v635;
  void *v636;
  void *v637;
  uint64_t v638;
  uint64_t v639;
  void *v640;
  void *v641;
  uint64_t v642;
  uint64_t v643;
  void *v644;
  void *v645;
  uint64_t v646;
  uint64_t v647;
  char *v648;
  uint64_t v649;
  void (*v650)(char *, uint64_t, uint64_t);
  uint64_t v651;
  void *v652;
  void *v653;
  uint64_t v654;
  uint64_t v655;
  void *v656;
  void *v657;
  uint64_t v658;
  void *v659;
  void *v660;
  uint64_t v661;
  void *v662;
  void *v663;
  uint64_t v664;
  void *v665;
  void *v666;
  uint64_t v667;
  void *v668;
  void *v669;
  uint64_t v670;
  void *v671;
  void *v672;
  uint64_t v673;
  void *v674;
  void *v675;
  uint64_t v676;
  void *v677;
  void *v678;
  uint64_t v679;
  void *v680;
  void *v681;
  uint64_t v682;
  void *v683;
  void *v684;
  uint64_t v685;
  void *v686;
  void *v687;
  uint64_t v688;
  void *v689;
  void *v690;
  uint64_t v691;
  uint64_t v692;
  void *v693;
  void *v694;
  uint64_t v695;
  uint64_t v696;
  void *v697;
  void *v698;
  uint64_t v699;
  uint64_t v700;
  void *v701;
  void *v702;
  uint64_t v703;
  uint64_t v704;
  char *v705;
  char *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  void *v710;
  void *v711;
  uint64_t v712;
  uint64_t v713;
  void *v714;
  void *v715;
  uint64_t v716;
  uint64_t v717;
  void *v718;
  void *v719;
  uint64_t v720;
  void *v721;
  void *v722;
  uint64_t v723;
  void *v724;
  void *v725;
  uint64_t v726;
  uint64_t v727;
  char *v728;
  uint64_t v729;
  uint64_t v730;
  char *v731;
  uint64_t v732;
  uint64_t v733;
  void *v734;
  void *v735;
  uint64_t v736;
  uint64_t v737;
  void *v738;
  void *v739;
  uint64_t v740;
  uint64_t v741;
  void *v742;
  void *v743;
  uint64_t v744;
  uint64_t v745;
  void *v746;
  void *v747;
  uint64_t v748;
  uint64_t v749;
  char *v750;
  uint64_t v751;
  uint64_t v752;
  char *v753;
  char *v754;
  uint64_t v755;
  uint64_t v756;
  char *v757;
  uint64_t v758;
  uint64_t v759;
  long long v760;
  void *v761;
  int *v762;
  uint64_t v763;
  void *v764;
  void *v765;
  uint64_t v766;
  uint64_t v767;
  void *v768;
  void *v769;
  uint64_t v770;
  uint64_t v771;
  long long v772;
  uint64_t v773;
  void *v774;
  void *v775;
  uint64_t v776;
  uint64_t v777;
  void *v778;
  void *v779;
  uint64_t v780;
  uint64_t v781;
  char *v782;
  uint64_t v783;
  uint64_t v784;
  void *v785;
  void *v786;
  uint64_t v787;
  uint64_t v788;
  char *v789;
  uint64_t v790;
  uint64_t v791;
  void *v792;
  void *v793;
  uint64_t v794;
  uint64_t v795;
  void *v796;
  void *v797;
  uint64_t v798;
  uint64_t v799;
  void *v800;
  void *v801;
  uint64_t v802;
  uint64_t v803;
  void *v804;
  void *v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  void *v811;
  void *v812;
  uint64_t v813;
  uint64_t v814;
  int *v815;
  void *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  char *v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  char *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  char *v899;
  uint64_t v900;
  uint64_t v901;
  char *v902;
  char *v903;
  uint64_t v904;
  uint64_t v905;
  char *v906;
  char *v907;
  uint64_t v908;
  uint64_t v909;
  char *v910;
  char *v911;
  uint64_t v912;
  void *v913;
  uint64_t v914;
  void *v915;
  void *v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  void *v940;
  int EnumTagSinglePayload;
  uint64_t v942;
  uint64_t v943;
  void *v944;
  void *v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  char *v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  void *v972;
  void *v973;
  uint64_t v974;
  uint64_t v975;
  void *v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  char *v996;
  uint64_t v997;
  uint64_t v998;
  char *v999;
  char *v1000;
  uint64_t v1001;
  uint64_t v1002;
  char *v1003;
  char *v1004;
  uint64_t v1005;
  uint64_t v1006;
  char *v1007;
  char *v1008;
  uint64_t v1009;
  uint64_t v1010;
  void *v1011;
  void *v1012;
  int *v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  char *v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  void *v1038;
  void *v1039;
  int *v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  char *v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  void *v1065;
  void *v1066;
  uint64_t v1067;
  uint64_t v1068;
  void *v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  char *v1090;
  char *v1091;
  uint64_t v1092;
  uint64_t v1093;
  void *v1094;
  void *v1095;
  uint64_t v1096;
  uint64_t v1097;
  char *v1098;
  char *v1099;
  uint64_t v1100;
  uint64_t v1101;
  void *v1102;
  void *v1103;
  uint64_t v1104;
  uint64_t v1105;
  char *v1106;
  char *v1107;
  uint64_t v1108;
  uint64_t v1109;
  void *v1110;
  void *v1111;
  uint64_t v1112;
  uint64_t v1113;
  char *v1114;
  char *v1115;
  uint64_t v1116;
  uint64_t v1117;
  char *v1118;
  char *v1119;
  uint64_t v1120;
  uint64_t v1121;
  char *v1122;
  char *v1123;
  uint64_t v1124;
  uint64_t v1125;
  char *v1126;
  char *v1127;
  uint64_t v1128;
  uint64_t v1129;
  void *v1130;
  void *v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  char *v1154;
  uint64_t v1155;
  uint64_t v1156;
  void *v1157;
  void *v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  char *v1181;
  uint64_t v1182;
  uint64_t v1183;
  void *v1184;
  void *v1185;
  uint64_t v1186;
  uint64_t v1187;
  void *v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  char *v1209;
  uint64_t v1210;
  uint64_t v1211;
  char *v1212;
  char *v1213;
  uint64_t v1214;
  uint64_t v1215;
  char *v1216;
  char *v1217;
  uint64_t v1218;
  uint64_t v1219;
  char *v1220;
  char *v1221;
  uint64_t v1222;
  uint64_t v1223;
  void *v1224;
  void *v1225;
  int *v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  char *v1244;
  uint64_t v1245;
  uint64_t v1246;
  void *v1247;
  void *v1248;
  int *v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  char *v1267;
  uint64_t v1268;
  uint64_t v1269;
  void *v1270;
  void *v1271;
  int *v1272;
  uint64_t v1273;
  void *v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  char *v1291;
  uint64_t v1292;
  uint64_t v1293;
  char *v1294;
  char *v1295;
  uint64_t v1296;
  uint64_t v1297;
  char *v1298;
  char *v1299;
  uint64_t v1300;
  uint64_t v1301;
  char *v1302;
  char *v1303;
  uint64_t v1304;
  uint64_t v1305;
  char *v1306;
  char *v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  char *v1311;
  char *v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  char *v1316;
  char *v1317;
  uint64_t v1318;
  uint64_t v1319;
  void *v1320;
  void *v1321;
  int *v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  char *v1338;
  uint64_t v1339;
  uint64_t v1340;
  void *v1341;
  void *v1342;
  int *v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  char *v1359;
  uint64_t v1360;
  uint64_t v1361;
  void *v1362;
  void *v1363;
  int *v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  char *v1380;
  uint64_t v1381;
  uint64_t v1382;
  char *v1383;
  char *v1384;
  uint64_t v1385;
  uint64_t v1386;
  char *v1387;
  char *v1388;
  uint64_t v1389;
  uint64_t v1390;
  char *v1391;
  char *v1392;
  uint64_t v1393;
  uint64_t v1394;
  char *v1395;
  char *v1396;
  uint64_t v1397;
  char *v1398;
  char *v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  char *v1403;
  char *v1404;
  uint64_t v1405;
  char *v1406;
  char *v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  char *v1411;
  char *v1412;
  uint64_t v1413;
  char *v1414;
  char *v1415;
  uint64_t v1416;
  uint64_t v1417;
  void *v1418;
  void *v1419;
  int *v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  char *v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  void *v1434;
  void *v1435;
  int *v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  char *v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  void *v1450;
  void *v1451;
  int *v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  char *v1462;
  uint64_t v1463;
  uint64_t v1464;
  char *v1465;
  char *v1466;
  uint64_t v1467;
  uint64_t v1468;
  char *v1469;
  char *v1470;
  uint64_t v1471;
  uint64_t v1472;
  char *v1473;
  char *v1474;
  uint64_t v1475;
  uint64_t v1476;
  void *v1477;
  void *v1478;
  uint64_t v1479;
  uint64_t v1480;
  void *v1481;
  void *v1482;
  uint64_t v1483;
  uint64_t v1484;
  void *v1485;
  void *v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  void (*v1490)(char *, char *, uint64_t);
  uint64_t v1491;
  void *v1492;
  void *v1493;
  uint64_t v1494;
  uint64_t v1495;
  void *v1496;
  void *v1497;
  uint64_t v1498;
  uint64_t v1499;
  void *v1500;
  void *v1501;
  uint64_t v1502;
  void *v1503;
  void *v1504;
  uint64_t v1505;
  void *v1506;
  void *v1507;
  uint64_t v1508;
  void *v1509;
  void *v1510;
  uint64_t v1511;
  void *v1512;
  void *v1513;
  uint64_t v1514;
  void *v1515;
  void *v1516;
  uint64_t v1517;
  void *v1518;
  void *v1519;
  uint64_t v1520;
  void *v1521;
  void *v1522;
  uint64_t v1523;
  void *v1524;
  void *v1525;
  uint64_t v1526;
  void *v1527;
  void *v1528;
  uint64_t v1529;
  void *v1530;
  void *v1531;
  uint64_t v1532;
  void *v1533;
  void *v1534;
  uint64_t v1535;
  uint64_t v1536;
  void *v1537;
  void *v1538;
  uint64_t v1539;
  uint64_t v1540;
  void *v1541;
  void *v1542;
  uint64_t v1543;
  uint64_t v1544;
  char *v1545;
  uint64_t v1546;
  uint64_t v1547;
  void *v1548;
  void *v1549;
  uint64_t v1550;
  uint64_t v1551;
  void *v1552;
  void *v1553;
  uint64_t v1554;
  uint64_t v1555;
  void *v1556;
  void *v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  void (*v1561)(char *, char *, uint64_t);
  uint64_t v1562;
  void *v1563;
  void *v1564;
  uint64_t v1565;
  uint64_t v1566;
  void *v1567;
  void *v1568;
  uint64_t v1569;
  void *v1570;
  void *v1571;
  uint64_t v1572;
  void *v1573;
  void *v1574;
  uint64_t v1575;
  void *v1576;
  void *v1577;
  uint64_t v1578;
  void *v1579;
  void *v1580;
  uint64_t v1581;
  void *v1582;
  void *v1583;
  uint64_t v1584;
  void *v1585;
  void *v1586;
  uint64_t v1587;
  void *v1588;
  void *v1589;
  uint64_t v1590;
  void *v1591;
  void *v1592;
  uint64_t v1593;
  void *v1594;
  void *v1595;
  uint64_t v1596;
  void *v1597;
  void *v1598;
  uint64_t v1599;
  void *v1600;
  void *v1601;
  uint64_t v1602;
  void *v1603;
  void *v1604;
  uint64_t v1605;
  uint64_t v1606;
  void *v1607;
  void *v1608;
  uint64_t v1609;
  uint64_t v1610;
  void *v1611;
  void *v1612;
  uint64_t v1613;
  uint64_t v1614;
  char *v1615;
  uint64_t v1616;
  uint64_t v1617;
  void *v1618;
  void *v1619;
  uint64_t v1620;
  uint64_t v1621;
  void *v1622;
  void *v1623;
  uint64_t v1624;
  uint64_t v1625;
  void *v1626;
  void *v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  void (*v1631)(char *, char *, uint64_t);
  uint64_t v1632;
  void *v1633;
  void *v1634;
  uint64_t v1635;
  uint64_t v1636;
  void *v1637;
  void *v1638;
  uint64_t v1639;
  void *v1640;
  void *v1641;
  uint64_t v1642;
  void *v1643;
  void *v1644;
  uint64_t v1645;
  void *v1646;
  void *v1647;
  uint64_t v1648;
  void *v1649;
  void *v1650;
  uint64_t v1651;
  void *v1652;
  void *v1653;
  uint64_t v1654;
  void *v1655;
  void *v1656;
  uint64_t v1657;
  void *v1658;
  void *v1659;
  uint64_t v1660;
  void *v1661;
  void *v1662;
  uint64_t v1663;
  void *v1664;
  void *v1665;
  uint64_t v1666;
  void *v1667;
  void *v1668;
  uint64_t v1669;
  void *v1670;
  void *v1671;
  uint64_t v1672;
  void *v1673;
  void *v1674;
  uint64_t v1675;
  uint64_t v1676;
  void *v1677;
  void *v1678;
  uint64_t v1679;
  uint64_t v1680;
  void *v1681;
  void *v1682;
  uint64_t v1683;
  uint64_t v1684;
  char *v1685;
  uint64_t v1686;
  uint64_t v1687;
  void *v1688;
  void *v1689;
  uint64_t v1690;
  uint64_t v1691;
  void *v1692;
  void *v1693;
  uint64_t v1694;
  uint64_t v1695;
  char *v1696;
  char *v1697;
  uint64_t v1698;
  void *v1699;
  void *v1700;
  uint64_t v1701;
  uint64_t v1702;
  char *v1703;
  char *v1704;
  uint64_t v1705;
  void *v1706;
  void *v1707;
  uint64_t v1708;
  uint64_t v1709;
  void *v1710;
  void *v1711;
  uint64_t v1712;
  uint64_t v1713;
  void *v1714;
  void *v1715;
  uint64_t v1716;
  uint64_t v1717;
  void *v1718;
  void *v1719;
  uint64_t v1720;
  uint64_t v1721;
  void *v1722;
  void *v1723;
  int *v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  char *v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  void *v1739;
  void *v1740;
  uint64_t v1741;
  uint64_t v1742;
  void *v1743;
  void *v1744;
  uint64_t v1745;
  uint64_t v1746;
  char *v1747;
  char *v1748;
  uint64_t v1749;
  void *v1750;
  void *v1751;
  uint64_t v1752;
  uint64_t v1753;
  char *v1754;
  char *v1755;
  uint64_t v1756;
  void *v1757;
  void *v1758;
  uint64_t v1759;
  uint64_t v1760;
  void *v1761;
  void *v1762;
  uint64_t v1763;
  uint64_t v1764;
  void *v1765;
  void *v1766;
  uint64_t v1767;
  uint64_t v1768;
  void *v1769;
  void *v1770;
  uint64_t v1771;
  uint64_t v1772;
  void *v1773;
  void *v1774;
  int *v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  char *v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  void *v1790;
  void *v1791;
  uint64_t v1792;
  uint64_t v1793;
  void *v1794;
  void *v1795;
  uint64_t v1796;
  uint64_t v1797;
  char *v1798;
  char *v1799;
  uint64_t v1800;
  void *v1801;
  void *v1802;
  uint64_t v1803;
  uint64_t v1804;
  char *v1805;
  char *v1806;
  uint64_t v1807;
  void *v1808;
  void *v1809;
  uint64_t v1810;
  uint64_t v1811;
  void *v1812;
  void *v1813;
  uint64_t v1814;
  uint64_t v1815;
  void *v1816;
  void *v1817;
  uint64_t v1818;
  uint64_t v1819;
  void *v1820;
  void *v1821;
  uint64_t v1822;
  uint64_t v1823;
  void *v1824;
  void *v1825;
  int *v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  char *v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  char *v1841;
  char *v1842;
  uint64_t v1843;
  uint64_t v1844;
  char *v1845;
  char *v1846;
  uint64_t v1847;
  uint64_t v1848;
  char *v1849;
  char *v1850;
  uint64_t v1851;
  uint64_t v1852;
  void *v1853;
  void *v1854;
  uint64_t v1855;
  uint64_t v1856;
  void *v1857;
  void *v1858;
  uint64_t v1859;
  uint64_t v1860;
  void *v1861;
  void *v1862;
  uint64_t v1863;
  void *v1864;
  void *v1865;
  uint64_t v1866;
  void *v1867;
  void *v1868;
  uint64_t v1869;
  char *v1870;
  char *v1871;
  uint64_t v1872;
  char *v1873;
  char *v1874;
  uint64_t v1875;
  void *v1876;
  void *v1877;
  uint64_t v1878;
  uint64_t v1879;
  void *v1880;
  void *v1881;
  uint64_t v1882;
  uint64_t v1883;
  void *v1884;
  void *v1885;
  uint64_t v1886;
  uint64_t v1887;
  void *v1888;
  void *v1889;
  uint64_t v1890;
  uint64_t v1891;
  char *v1892;
  char *v1893;
  uint64_t v1894;
  void *v1895;
  void *v1896;
  int *v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  char *v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  void *v1912;
  void *v1913;
  uint64_t v1914;
  uint64_t v1915;
  void *v1916;
  void *v1917;
  uint64_t v1918;
  uint64_t v1919;
  void *v1920;
  void *v1921;
  uint64_t v1922;
  void *v1923;
  void *v1924;
  uint64_t v1925;
  void *v1926;
  void *v1927;
  uint64_t v1928;
  char *v1929;
  char *v1930;
  uint64_t v1931;
  char *v1932;
  char *v1933;
  uint64_t v1934;
  void *v1935;
  void *v1936;
  uint64_t v1937;
  uint64_t v1938;
  void *v1939;
  void *v1940;
  uint64_t v1941;
  uint64_t v1942;
  void *v1943;
  void *v1944;
  uint64_t v1945;
  uint64_t v1946;
  void *v1947;
  void *v1948;
  uint64_t v1949;
  uint64_t v1950;
  char *v1951;
  char *v1952;
  uint64_t v1953;
  void *v1954;
  void *v1955;
  int *v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  char *v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  void *v1971;
  void *v1972;
  uint64_t v1973;
  uint64_t v1974;
  void *v1975;
  void *v1976;
  uint64_t v1977;
  uint64_t v1978;
  void *v1979;
  void *v1980;
  uint64_t v1981;
  uint64_t v1982;
  void *v1983;
  void *v1984;
  uint64_t v1985;
  void *v1986;
  void *v1987;
  uint64_t v1988;
  char *v1989;
  char *v1990;
  uint64_t v1991;
  char *v1992;
  char *v1993;
  uint64_t v1994;
  void *v1995;
  void *v1996;
  uint64_t v1997;
  uint64_t v1998;
  void *v1999;
  void *v2000;
  uint64_t v2001;
  uint64_t v2002;
  void *v2003;
  void *v2004;
  uint64_t v2005;
  uint64_t v2006;
  void *v2007;
  void *v2008;
  uint64_t v2009;
  uint64_t v2010;
  char *v2011;
  char *v2012;
  uint64_t v2013;
  void *v2014;
  void *v2015;
  int *v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  uint64_t v2026;
  char *v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  void *v2031;
  void *v2032;
  uint64_t v2033;
  uint64_t v2034;
  void *v2035;
  void *v2036;
  uint64_t v2037;
  uint64_t v2038;
  void *v2039;
  void *v2040;
  uint64_t v2041;
  uint64_t v2042;
  void *v2043;
  void *v2044;
  uint64_t v2045;
  uint64_t v2046;
  void *v2047;
  void *v2048;
  uint64_t v2049;
  uint64_t v2050;
  void *v2051;
  void *v2052;
  uint64_t v2053;
  uint64_t v2054;
  void *v2055;
  void *v2056;
  uint64_t v2057;
  uint64_t v2058;
  void *v2059;
  void *v2060;
  uint64_t v2061;
  uint64_t v2062;
  void *v2063;
  void *v2064;
  uint64_t v2065;
  uint64_t v2066;
  void *v2067;
  uint64_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  char *v2075;
  uint64_t v2076;
  uint64_t v2077;
  char *v2078;
  char *v2079;
  uint64_t v2080;
  uint64_t v2081;
  void *v2082;
  void *v2083;
  uint64_t v2084;
  uint64_t v2085;
  void *v2086;
  void *v2087;
  uint64_t v2088;
  uint64_t v2089;
  void *v2090;
  void *v2091;
  uint64_t v2092;
  uint64_t v2093;
  char *v2094;
  char *v2095;
  uint64_t v2096;
  uint64_t v2097;
  void *v2098;
  void *v2099;
  uint64_t v2100;
  uint64_t v2101;
  void *v2102;
  void *v2103;
  uint64_t v2104;
  uint64_t v2105;
  void *v2106;
  void *v2107;
  uint64_t v2108;
  void *v2109;
  void *v2110;
  uint64_t v2111;
  uint64_t v2112;
  void *v2113;
  void *v2114;
  uint64_t v2115;
  uint64_t v2116;
  void *v2117;
  void *v2118;
  uint64_t v2119;
  uint64_t v2120;
  void *v2121;
  void *v2122;
  uint64_t v2123;
  uint64_t v2124;
  void *v2125;
  void *v2126;
  uint64_t v2127;
  uint64_t v2128;
  void *v2129;
  void *v2130;
  int *v2131;
  uint64_t v2132;
  void *v2133;
  uint64_t v2134;
  uint64_t v2135;
  uint64_t v2136;
  uint64_t v2137;
  uint64_t v2138;
  uint64_t v2139;
  uint64_t v2140;
  char *v2141;
  uint64_t v2142;
  uint64_t v2143;
  void *v2144;
  void *v2145;
  uint64_t v2146;
  uint64_t v2147;
  char *v2148;
  char *v2149;
  uint64_t v2150;
  uint64_t v2151;
  void *v2152;
  void *v2153;
  uint64_t v2154;
  uint64_t v2155;
  void *v2156;
  void *v2157;
  uint64_t v2158;
  uint64_t v2159;
  uint64_t v2160;
  uint64_t v2161;
  uint64_t v2162;
  int *v2163;
  uint64_t v2164;
  uint64_t v2165;
  char *v2166;
  char *v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2170;
  void *v2171;
  void *v2172;
  uint64_t v2173;
  uint64_t v2174;
  void *v2175;
  void *v2176;
  uint64_t v2177;
  uint64_t v2178;
  void *v2179;
  void *v2180;
  uint64_t v2181;
  uint64_t v2182;
  char *v2183;
  char *v2184;
  uint64_t v2185;
  uint64_t v2186;
  char *v2187;
  char *v2188;
  uint64_t v2189;
  uint64_t v2190;
  char *v2191;
  char *v2192;
  uint64_t v2193;
  void *v2194;
  void *v2195;
  uint64_t v2196;
  uint64_t v2197;
  void *v2198;
  void *v2199;
  uint64_t v2200;
  uint64_t v2201;
  void *v2202;
  void *v2203;
  uint64_t v2204;
  uint64_t v2205;
  void *v2206;
  void *v2207;
  uint64_t v2208;
  uint64_t v2209;
  void *v2210;
  void *v2211;
  uint64_t v2212;
  uint64_t v2213;
  void *v2214;
  void *v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t v2221;
  uint64_t v2222;
  uint64_t v2223;
  uint64_t v2224;
  void *v2225;
  void *v2226;
  uint64_t v2227;
  uint64_t v2228;
  void *v2229;
  void *v2230;
  uint64_t v2231;
  uint64_t v2232;
  void *v2233;
  void *v2234;
  uint64_t v2235;
  void *v2236;
  void *v2237;
  uint64_t v2238;
  uint64_t v2239;
  void *v2240;
  void *v2241;
  uint64_t v2242;
  uint64_t v2243;
  void *v2244;
  void *v2245;
  uint64_t v2246;
  uint64_t v2247;
  void *v2248;
  void *v2249;
  uint64_t v2250;
  uint64_t v2251;
  void *v2252;
  void *v2253;
  uint64_t v2254;
  uint64_t v2255;
  void *v2256;
  void *v2257;
  int *v2258;
  uint64_t v2259;
  void *v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t v2265;
  uint64_t v2266;
  uint64_t v2267;
  char *v2268;
  uint64_t v2269;
  uint64_t v2270;
  char *v2271;
  char *v2272;
  uint64_t v2273;
  uint64_t v2274;
  void *v2275;
  void *v2276;
  uint64_t v2277;
  uint64_t v2278;
  void *v2279;
  void *v2280;
  uint64_t v2281;
  uint64_t v2282;
  void *v2283;
  void *v2284;
  uint64_t v2285;
  uint64_t v2286;
  char *v2287;
  char *v2288;
  uint64_t v2289;
  int *v2290;
  uint64_t v2291;
  void *v2292;
  void *v2293;
  uint64_t v2294;
  uint64_t v2295;
  void *v2296;
  void *v2297;
  uint64_t v2298;
  uint64_t v2299;
  void *v2300;
  void *v2301;
  uint64_t v2302;
  uint64_t v2303;
  void *v2304;
  void *v2305;
  uint64_t v2306;
  uint64_t v2307;
  void *v2308;
  void *v2309;
  uint64_t v2310;
  uint64_t v2311;
  void *v2312;
  void *v2313;
  uint64_t v2314;
  uint64_t v2315;
  void *v2316;
  void *v2317;
  uint64_t v2318;
  uint64_t v2319;
  void *v2320;
  void *v2321;
  uint64_t v2322;
  int *v2323;
  uint64_t v2324;
  void *v2325;
  void *v2326;
  int *v2327;
  uint64_t v2328;
  void *v2329;
  uint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  uint64_t v2336;
  char *v2337;
  uint64_t v2338;
  uint64_t v2339;
  void *v2340;
  void *v2341;
  uint64_t v2342;
  uint64_t v2343;
  char *v2344;
  char *v2345;
  uint64_t v2346;
  uint64_t v2347;
  void *v2348;
  void *v2349;
  uint64_t v2350;
  uint64_t v2351;
  void *v2352;
  void *v2353;
  int *v2354;
  uint64_t v2355;
  uint64_t v2356;
  uint64_t v2357;
  uint64_t v2358;
  uint64_t v2359;
  uint64_t v2360;
  char *v2361;
  char *v2362;
  uint64_t v2363;
  uint64_t v2364;
  uint64_t v2365;
  void *v2366;
  void *v2367;
  uint64_t v2368;
  uint64_t v2369;
  void *v2370;
  void *v2371;
  uint64_t v2372;
  uint64_t v2373;
  void *v2374;
  void *v2375;
  uint64_t v2376;
  uint64_t v2377;
  char *v2378;
  char *v2379;
  uint64_t v2380;
  uint64_t v2381;
  char *v2382;
  char *v2383;
  uint64_t v2384;
  uint64_t v2385;
  char *v2386;
  char *v2387;
  uint64_t v2388;
  void *v2389;
  void *v2390;
  uint64_t v2391;
  uint64_t v2392;
  void *v2393;
  void *v2394;
  uint64_t v2395;
  uint64_t v2396;
  void *v2397;
  void *v2398;
  uint64_t v2399;
  uint64_t v2400;
  void *v2401;
  void *v2402;
  uint64_t v2403;
  uint64_t v2404;
  void *v2405;
  void *v2406;
  uint64_t v2407;
  uint64_t v2408;
  void *v2409;
  void *v2410;
  uint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  void *v2418;
  uint64_t v2419;
  void *v2420;
  void *v2421;
  uint64_t v2422;
  id v2423;
  uint64_t v2424;
  uint64_t v2425;
  void *v2426;
  void *v2427;
  uint64_t v2428;
  uint64_t v2430;
  void *v2431;
  void *v2432;
  uint64_t v2433;
  uint64_t v2434;
  void *v2435;
  void *v2436;
  uint64_t v2437;
  uint64_t v2438;
  void *v2439;
  void *v2440;
  uint64_t v2441;
  uint64_t v2442;
  void *v2443;
  void *v2444;
  uint64_t v2445;
  uint64_t v2446;
  void *v2447;
  void *v2448;
  uint64_t v2449;
  uint64_t v2450;
  void *v2451;
  void *v2452;
  uint64_t v2453;
  uint64_t v2454;
  void *v2455;
  void *v2456;
  uint64_t v2457;
  uint64_t v2458;
  void *v2459;
  void *v2460;
  uint64_t v2461;
  uint64_t v2462;
  void *v2463;
  void *v2464;
  uint64_t v2465;
  uint64_t v2466;
  void *v2467;
  uint64_t v2468;
  uint64_t v2469;
  uint64_t v2470;
  uint64_t v2471;
  uint64_t v2472;
  uint64_t v2473;
  uint64_t v2474;
  char *v2475;
  uint64_t v2476;
  uint64_t v2477;
  char *v2478;
  char *v2479;
  uint64_t v2480;
  uint64_t v2481;
  void *v2482;
  void *v2483;
  uint64_t v2484;
  uint64_t v2485;
  void *v2486;
  void *v2487;
  uint64_t v2488;
  uint64_t v2489;
  void *v2490;
  void *v2491;
  uint64_t v2492;
  uint64_t v2493;
  char *v2494;
  char *v2495;
  uint64_t v2496;
  uint64_t v2497;
  void *v2498;
  void *v2499;
  uint64_t v2500;
  uint64_t v2501;
  void *v2502;
  void *v2503;
  uint64_t v2504;
  uint64_t v2505;
  void *v2506;
  void *v2507;
  uint64_t v2508;
  void *v2509;
  void *v2510;
  uint64_t v2511;
  uint64_t v2512;
  void *v2513;
  void *v2514;
  uint64_t v2515;
  uint64_t v2516;
  void *v2517;
  void *v2518;
  uint64_t v2519;
  uint64_t v2520;
  void *v2521;
  void *v2522;
  uint64_t v2523;
  uint64_t v2524;
  void *v2525;
  void *v2526;
  uint64_t v2527;
  uint64_t v2528;
  void *v2529;
  void *v2530;
  int *v2531;
  uint64_t v2532;
  void *v2533;
  uint64_t v2534;
  uint64_t v2535;
  uint64_t v2536;
  uint64_t v2537;
  uint64_t v2538;
  uint64_t v2539;
  uint64_t v2540;
  char *v2541;
  uint64_t v2542;
  uint64_t v2543;
  void *v2544;
  void *v2545;
  uint64_t v2546;
  uint64_t v2547;
  char *v2548;
  char *v2549;
  uint64_t v2550;
  uint64_t v2551;
  void *v2552;
  void *v2553;
  uint64_t v2554;
  uint64_t v2555;
  void *v2556;
  void *v2557;
  int *v2558;
  uint64_t v2559;
  uint64_t v2560;
  uint64_t v2561;
  uint64_t v2562;
  uint64_t v2563;
  uint64_t v2564;
  char *v2565;
  char *v2566;
  uint64_t v2567;
  uint64_t v2568;
  void *v2569;
  void *v2570;
  uint64_t v2571;
  uint64_t v2572;
  void *v2573;
  void *v2574;
  uint64_t v2575;
  uint64_t v2576;
  void *v2577;
  void *v2578;
  uint64_t v2579;
  uint64_t v2580;
  char *v2581;
  char *v2582;
  uint64_t v2583;
  uint64_t v2584;
  char *v2585;
  char *v2586;
  uint64_t v2587;
  uint64_t v2588;
  char *v2589;
  char *v2590;
  uint64_t v2591;
  void *v2592;
  void *v2593;
  uint64_t v2594;
  uint64_t v2595;
  void *v2596;
  void *v2597;
  uint64_t v2598;
  uint64_t v2599;
  void *v2600;
  void *v2601;
  uint64_t v2602;
  uint64_t v2603;
  void *v2604;
  void *v2605;
  uint64_t v2606;
  uint64_t v2607;
  void *v2608;
  void *v2609;
  uint64_t v2610;
  uint64_t v2611;
  void *v2612;
  void *v2613;
  uint64_t v2614;
  uint64_t v2615;
  uint64_t v2616;
  uint64_t v2617;
  uint64_t v2618;
  uint64_t v2619;
  uint64_t v2620;
  uint64_t v2621;
  uint64_t v2622;
  uint64_t v2623;
  uint64_t v2624;
  uint64_t v2625;
  uint64_t v2626;
  uint64_t v2627;
  uint64_t v2628;
  uint64_t v2629;
  uint64_t v2630;
  uint64_t v2631;
  uint64_t v2632;
  uint64_t v2633;
  uint64_t v2634;
  uint64_t v2635;
  uint64_t v2636;
  uint64_t v2637;
  uint64_t v2638;
  uint64_t v2639;
  int *v2640;
  void *v2641;
  void *v2642;
  char *v2643;
  void *v2644;
  char *v2645;
  void *v2646;
  int *v2647;
  uint64_t v2648;
  uint64_t v2649;
  uint64_t v2650;
  uint64_t v2651;
  uint64_t v2652;
  uint64_t v2653;
  uint64_t v2654;
  uint64_t v2655;
  uint64_t v2656;
  uint64_t v2657;
  uint64_t v2658;
  uint64_t v2659;
  char *__dst;
  void *__dstb;
  char *__dsta;
  void *__dstc;
  void *__dstd;
  void *__dste;
  void *__dstf;
  int *v2667;
  void *v2668;
  char *v2669;
  int *v2670;
  void *v2671;
  char *v2672;
  char *v2673;
  char *v2674;
  char *v2675;
  char *v2676;
  void *v2677;
  void *v2678;
  void *v2679;
  void *v2680;
  void *v2681;
  int *v2682;
  char *v2683;
  void *v2684;
  void *v2685;
  void *v2686;
  char *v2687;
  void *v2688;
  char *v2689;
  void *v2690;
  void *v2691;
  char *v2692;
  int *v2693;
  char *v2694;
  void *v2695;
  int *v2696;
  char *v2697;
  char *v2698;
  char *v2699;
  char *v2700;
  char *v2701;
  char *v2702;
  char *v2703;
  char *v2704;
  void *v2705;
  char *v2706;
  void *v2707;
  char *v2708;
  void *v2709;
  void *v2710;
  char *v2711;
  void *v2712;
  void *v2713;
  uint64_t v2714;
  int *v2715;
  char *v2716;
  int *v2717;
  uint64_t v2718;
  uint64_t v2719;
  char *v2720;
  int *v2721;
  uint64_t v2722;
  uint64_t v2723;
  char *v2724;
  char *v2725;
  uint64_t v2726;
  uint64_t v2727;
  void (*v2728)(char *, char *, uint64_t);
  uint64_t v2729;
  uint64_t v2730;
  uint64_t v2731;
  uint64_t v2732;
  uint64_t v2733;
  uint64_t v2734;
  int *v2735;
  int *v2736;
  int *v2737;
  uint64_t v2738;
  uint64_t v2739;
  uint64_t v2740;
  void *v2741;
  void *v2742;
  void *v2743;
  void *v2744;
  void *v2745;
  void *v2746;
  void *v2747;
  void *v2748;
  void *v2749;
  void *v2750;
  uint64_t v2751;
  uint64_t v2752;
  uint64_t v2753;
  void *v2754;
  uint64_t v2755;
  uint64_t v2756;
  void *v2757;
  char *v2758;
  char *v2759;
  char *v2760;
  char *v2761;
  char *v2762;
  uint64_t v2763;
  char *v2764;
  uint64_t v2765;
  char *v2766;
  char *v2767;
  uint64_t v2768;
  char *v2769;
  uint64_t v2770;
  char *v2771;
  char *v2772;
  char *v2773;
  int *v2774;
  char *v2775;
  int *v2776;
  uint64_t v2777;
  uint64_t v2778;
  char *v2779;
  char *v2780;
  uint64_t v2781;
  char *v2782;
  int *v2783;
  char *v2784;
  uint64_t v2785;
  void *v2786;

  *(void *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[2];
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v5;
  }
  else
  {
    v7 = *v5;
    outlined copy of Data._Representation(*v5, v6);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v6;
  }
  v8 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v8;
  v9 = a2[6];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = v9;
  v10 = a2[8];
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = v10;
  v11 = a2[9];
  v12 = *(int *)(a3 + 48);
  v13 = (void *)(a1 + v12);
  v14 = a1;
  v15 = a2;
  v16 = (void *)((char *)a2 + v12);
  v2755 = v14;
  *(void *)(v14 + 72) = v11;
  v17 = type metadata accessor for SearchResult(0);
  swift_retain();
  swift_retain();
  swift_retain();
  v18 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v2786 = v15;
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
    memcpy(v13, v16, *(void *)(*(void *)(v19 - 8) + 64));
    v20 = v2755;
    v21 = a3;
  }
  else
  {
    v2751 = v17;
    v2754 = v13;
    type metadata accessor for SearchResultItem(0);
    v22 = v13;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v47 = v16[1];
        *v13 = *v16;
        v13[1] = v47;
        v48 = v16[3];
        v13[2] = v16[2];
        v13[3] = v48;
        v49 = v16[5];
        v13[4] = v16[4];
        v13[5] = v49;
        v50 = v16[7];
        v13[6] = v16[6];
        v13[7] = v50;
        v51 = v16[9];
        v13[8] = v16[8];
        v13[9] = v51;
        v2735 = (int *)type metadata accessor for MobileSMSDocument(0);
        v52 = v2735[10];
        v53 = (char *)v13 + v52;
        v2742 = v16;
        v54 = (char *)v16 + v52;
        v55 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v2729 = v55;
        if (__swift_getEnumTagSinglePayload((uint64_t)v54, 1, v55))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16))(v53, v54, v55);
          __swift_storeEnumTagSinglePayload((uint64_t)v53, 0, 1, v55);
        }
        v20 = v2755;
        v406 = v2735[11];
        v407 = (char *)v2754 + v406;
        v408 = (char *)v2742 + v406;
        v409 = type metadata accessor for URL();
        v2718 = v409;
        if (__swift_getEnumTagSinglePayload((uint64_t)v408, 1, v409))
        {
          v410 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v407, v408, *(void *)(*(void *)(v410 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v409 - 8) + 16))(v407, v408, v409);
          __swift_storeEnumTagSinglePayload((uint64_t)v407, 0, 1, v409);
        }
        *(void *)((char *)v2754 + v2735[12]) = *(void *)((char *)v2742 + v2735[12]);
        v580 = v2735[13];
        v581 = (void *)((char *)v2754 + v580);
        v582 = (void *)((char *)v2742 + v580);
        v583 = v582[1];
        *v581 = *v582;
        v581[1] = v583;
        v584 = v2735[14];
        v585 = (void *)((char *)v2754 + v584);
        v586 = (void *)((char *)v2742 + v584);
        v587 = v586[1];
        *v585 = *v586;
        v585[1] = v587;
        *(void *)((char *)v2754 + v2735[15]) = *(void *)((char *)v2742 + v2735[15]);
        *(void *)((char *)v2754 + v2735[16]) = *(void *)((char *)v2742 + v2735[16]);
        v588 = v2735[17];
        v589 = (void *)((char *)v2754 + v588);
        v590 = (char *)v2742 + v588;
        v591 = *(void *)((char *)v2742 + v588);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v591)
        {
          v592 = *((void *)v590 + 1);
          v593 = *((void *)v590 + 2);
          *v589 = v591;
          v589[1] = v592;
          v594 = *((void *)v590 + 3);
          v595 = *((void *)v590 + 4);
          v589[2] = v593;
          v589[3] = v594;
          v589[4] = v595;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v760 = *((_OWORD *)v590 + 1);
          *(_OWORD *)v589 = *(_OWORD *)v590;
          *((_OWORD *)v589 + 1) = v760;
          v589[4] = *((void *)v590 + 4);
        }
        v21 = a3;
        v761 = v2754;
        v18 = v2742;
        v762 = v2735;
        v763 = v2735[18];
        v764 = (void *)((char *)v2754 + v763);
        v765 = (void *)((char *)v2742 + v763);
        v766 = v765[1];
        *v764 = *v765;
        v764[1] = v766;
        v767 = v2735[19];
        v768 = (void *)((char *)v2754 + v767);
        v769 = (void *)((char *)v2742 + v767);
        v770 = type metadata accessor for PartialExtractedAttributes(0);
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v769, 1, v770))
        {
          v771 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v768, v769, *(void *)(*(void *)(v771 - 8) + 64));
        }
        else
        {
          v808 = v770;
          v809 = v769[1];
          *v768 = *v769;
          v768[1] = v809;
          v2715 = (int *)v808;
          v810 = *(int *)(v808 + 20);
          v2727 = (uint64_t)v768;
          v811 = (void *)((char *)v768 + v810);
          v2757 = v769;
          v812 = (void *)((char *)v769 + v810);
          v813 = type metadata accessor for RentalCarReservation(0);
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v812, 1, v813))
          {
            v814 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v811, v812, *(void *)(*(void *)(v814 - 8) + 64));
            v815 = v2715;
            v816 = v2757;
          }
          else
          {
            v873 = v812[1];
            *v811 = *v812;
            v811[1] = v873;
            v874 = v812[3];
            v811[2] = v812[2];
            v811[3] = v874;
            v875 = v812[5];
            v811[4] = v812[4];
            v811[5] = v875;
            v876 = v812[7];
            v811[6] = v812[6];
            v811[7] = v876;
            v877 = v812[9];
            v811[8] = v812[8];
            v811[9] = v877;
            v878 = v812[11];
            v811[10] = v812[10];
            v811[11] = v878;
            v879 = v812[13];
            v811[12] = v812[12];
            v811[13] = v879;
            v880 = v812[15];
            v811[14] = v812[14];
            v811[15] = v880;
            *((unsigned char *)v811 + 128) = *((unsigned char *)v812 + 128);
            *(_WORD *)((char *)v811 + 129) = *(_WORD *)((char *)v812 + 129);
            v881 = v812[18];
            v811[17] = v812[17];
            v811[18] = v881;
            v882 = v812[20];
            v811[19] = v812[19];
            v811[20] = v882;
            v883 = v812[22];
            v811[21] = v812[21];
            v811[22] = v883;
            v2623 = v812[24];
            v811[23] = v812[23];
            v811[24] = v2623;
            v884 = v812[26];
            v811[25] = v812[25];
            v811[26] = v884;
            v885 = v812[28];
            v811[27] = v812[27];
            v811[28] = v885;
            v886 = v812[30];
            v811[29] = v812[29];
            v811[30] = v886;
            v887 = v812[32];
            v811[31] = v812[31];
            v811[32] = v887;
            v888 = v812[34];
            v811[33] = v812[33];
            v811[34] = v888;
            v889 = v812[36];
            v811[35] = v812[35];
            v811[36] = v889;
            v890 = v812[38];
            v811[37] = v812[37];
            v811[38] = v890;
            v891 = v812[40];
            v811[39] = v812[39];
            v811[40] = v891;
            v892 = v812[42];
            v811[41] = v812[41];
            v811[42] = v892;
            v893 = v812[44];
            v811[43] = v812[43];
            v811[44] = v893;
            v894 = v812[46];
            v811[45] = v812[45];
            v811[46] = v894;
            v895 = v812[47];
            *((unsigned char *)v811 + 384) = *((unsigned char *)v812 + 384);
            v811[47] = v895;
            v896 = v812[50];
            v811[49] = v812[49];
            v811[50] = v896;
            v897 = v812[52];
            v811[51] = v812[51];
            v811[52] = v897;
            v898 = *(int *)(v813 + 140);
            v2692 = (char *)v811 + v898;
            v899 = (char *)v812 + v898;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v899, 1, v2729))
            {
              v900 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2692, v899, *(void *)(*(void *)(v900 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2692, v899, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v2692, 0, 1, v2729);
            }
            v909 = *(int *)(v813 + 144);
            v910 = (char *)v811 + v909;
            v911 = (char *)v812 + v909;
            v18 = v2742;
            if (__swift_getEnumTagSinglePayload((uint64_t)v812 + v909, 1, v2729))
            {
              v912 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v910, v911, *(void *)(*(void *)(v912 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v910, v911, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v910, 0, 1, v2729);
            }
            v816 = v2757;
            __swift_storeEnumTagSinglePayload((uint64_t)v811, 0, 1, v813);
            v21 = a3;
            v815 = v2715;
          }
          v970 = v815[6];
          v971 = v2727;
          v972 = (void *)(v2727 + v970);
          v973 = (void *)((char *)v816 + v970);
          v974 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v973, 1, v974))
          {
            v975 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v972, v973, *(void *)(*(void *)(v975 - 8) + 64));
            v976 = v2757;
          }
          else
          {
            v977 = v973[1];
            *v972 = *v973;
            v972[1] = v977;
            v978 = v973[3];
            v972[2] = v973[2];
            v972[3] = v978;
            v979 = v973[5];
            v972[4] = v973[4];
            v972[5] = v979;
            v980 = v973[7];
            v972[6] = v973[6];
            v972[7] = v980;
            v981 = v973[9];
            v972[8] = v973[8];
            v972[9] = v981;
            v982 = v973[11];
            v972[10] = v973[10];
            v972[11] = v982;
            v983 = v973[13];
            v972[12] = v973[12];
            v972[13] = v983;
            v984 = v973[15];
            v972[14] = v973[14];
            v972[15] = v984;
            *((unsigned char *)v972 + 128) = *((unsigned char *)v973 + 128);
            *(_WORD *)((char *)v972 + 129) = *(_WORD *)((char *)v973 + 129);
            v985 = v973[18];
            v972[17] = v973[17];
            v972[18] = v985;
            v986 = v973[20];
            v972[19] = v973[19];
            v972[20] = v986;
            v987 = v973[22];
            v972[21] = v973[21];
            v972[22] = v987;
            v988 = v973[24];
            v972[23] = v973[23];
            v972[24] = v988;
            v2684 = (void *)v973[26];
            v972[25] = v973[25];
            v972[26] = v2684;
            v989 = v973[28];
            v972[27] = v973[27];
            v972[28] = v989;
            v990 = v973[30];
            v972[29] = v973[29];
            v972[30] = v990;
            v991 = v973[32];
            v972[31] = v973[31];
            v972[32] = v991;
            v992 = v973[34];
            v972[33] = v973[33];
            v972[34] = v992;
            v993 = v973[36];
            v994 = v973[35];
            *((unsigned char *)v972 + 296) = *((unsigned char *)v973 + 296);
            v972[35] = v994;
            v972[36] = v993;
            v995 = *(int *)(v974 + 112);
            v2694 = (char *)v972 + v995;
            v996 = (char *)v973 + v995;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v996, 1, v2729))
            {
              v997 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2694, v996, *(void *)(*(void *)(v997 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2694, v996, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v2694, 0, 1, v2729);
            }
            v1006 = *(int *)(v974 + 116);
            v1007 = (char *)v972 + v1006;
            v1008 = (char *)v973 + v1006;
            v18 = v2742;
            v971 = v2727;
            if (__swift_getEnumTagSinglePayload((uint64_t)v973 + v1006, 1, v2729))
            {
              v1009 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1007, v1008, *(void *)(*(void *)(v1009 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v1007, v1008, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v1007, 0, 1, v2729);
            }
            v976 = v2757;
            __swift_storeEnumTagSinglePayload((uint64_t)v972, 0, 1, v974);
            v21 = a3;
            v815 = v2715;
          }
          v1064 = v815[7];
          v1065 = (void *)(v971 + v1064);
          v1066 = (void *)((char *)v976 + v1064);
          v1067 = type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1066, 1, v1067))
          {
            v1068 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v1065, v1066, *(void *)(*(void *)(v1068 - 8) + 64));
            v1069 = v2757;
          }
          else
          {
            v1070 = v1066[1];
            *v1065 = *v1066;
            v1065[1] = v1070;
            v1071 = v1066[3];
            v1065[2] = v1066[2];
            v1065[3] = v1071;
            v1072 = v1066[5];
            v1065[4] = v1066[4];
            v1065[5] = v1072;
            v1073 = v1066[7];
            v1065[6] = v1066[6];
            v1065[7] = v1073;
            v1074 = v1066[9];
            v1065[8] = v1066[8];
            v1065[9] = v1074;
            v1075 = v1066[11];
            v1065[10] = v1066[10];
            v1065[11] = v1075;
            v1076 = v1066[13];
            v1065[12] = v1066[12];
            v1065[13] = v1076;
            v1077 = v1066[15];
            v1065[14] = v1066[14];
            v1065[15] = v1077;
            *((unsigned char *)v1065 + 128) = *((unsigned char *)v1066 + 128);
            *(_WORD *)((char *)v1065 + 129) = *(_WORD *)((char *)v1066 + 129);
            v1078 = v1066[18];
            v1065[17] = v1066[17];
            v1065[18] = v1078;
            v1079 = v1066[20];
            v1065[19] = v1066[19];
            v1065[20] = v1079;
            v1080 = v1066[22];
            v1065[21] = v1066[21];
            v1065[22] = v1080;
            v1081 = v1066[24];
            v1065[23] = v1066[23];
            v1065[24] = v1081;
            v1082 = v1066[26];
            v1065[25] = v1066[25];
            v1065[26] = v1082;
            v1083 = v1066[28];
            v1065[27] = v1066[27];
            v1065[28] = v1083;
            v2685 = (void *)v1066[30];
            v1065[29] = v1066[29];
            v1065[30] = v2685;
            v1084 = v1066[32];
            v1065[31] = v1066[31];
            v1065[32] = v1084;
            v1085 = v1066[34];
            v1065[33] = v1066[33];
            v1065[34] = v1085;
            v1086 = v1066[36];
            v1087 = v1066[35];
            *((unsigned char *)v1065 + 296) = *((unsigned char *)v1066 + 296);
            v1065[35] = v1087;
            v1065[36] = v1086;
            v1088 = v1066[39];
            v1065[38] = v1066[38];
            v1065[39] = v1088;
            v2696 = (int *)v1067;
            v1089 = *(int *)(v1067 + 116);
            v1090 = (char *)v1065 + v1089;
            v1091 = (char *)v1066 + v1089;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1091, 1, v2718))
            {
              v1092 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1090, v1091, *(void *)(*(void *)(v1092 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2718 - 8) + 16))(v1090, v1091, v2718);
              __swift_storeEnumTagSinglePayload((uint64_t)v1090, 0, 1, v2718);
            }
            v1109 = v2696[30];
            v1110 = (void *)((char *)v1065 + v1109);
            v1111 = (void *)((char *)v1066 + v1109);
            v1112 = v1111[1];
            *v1110 = *v1111;
            v1110[1] = v1112;
            v1113 = v2696[31];
            v1114 = (char *)v1065 + v1113;
            v1115 = (char *)v1066 + v1113;
            swift_bridgeObjectRetain();
            v18 = v2742;
            v971 = v2727;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1115, 1, v2729))
            {
              v1116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1114, v1115, *(void *)(*(void *)(v1116 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v1114, v1115, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v1114, 0, 1, v2729);
            }
            v1125 = v2696[32];
            v1126 = (char *)v1065 + v1125;
            v1127 = (char *)v1066 + v1125;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1066 + v1125, 1, v2729))
            {
              v1128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1126, v1127, *(void *)(*(void *)(v1128 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v1126, v1127, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v1126, 0, 1, v2729);
            }
            v1069 = v2757;
            __swift_storeEnumTagSinglePayload((uint64_t)v1065, 0, 1, (uint64_t)v2696);
            v21 = a3;
            v815 = v2715;
          }
          v1183 = v815[8];
          v1184 = (void *)(v971 + v1183);
          v1185 = (void *)((char *)v1069 + v1183);
          v1186 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1185, 1, v1186))
          {
            v1187 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v1184, v1185, *(void *)(*(void *)(v1187 - 8) + 64));
            v1188 = v2757;
          }
          else
          {
            v1189 = v1185[1];
            *v1184 = *v1185;
            v1184[1] = v1189;
            v1190 = v1185[3];
            v1184[2] = v1185[2];
            v1184[3] = v1190;
            v1191 = v1185[5];
            v1184[4] = v1185[4];
            v1184[5] = v1191;
            v1192 = v1185[7];
            v1184[6] = v1185[6];
            v1184[7] = v1192;
            v1193 = v1185[9];
            v1184[8] = v1185[8];
            v1184[9] = v1193;
            v1194 = v1185[11];
            v1184[10] = v1185[10];
            v1184[11] = v1194;
            v1195 = v1185[13];
            v1184[12] = v1185[12];
            v1184[13] = v1195;
            v1196 = v1185[15];
            v1184[14] = v1185[14];
            v1184[15] = v1196;
            *((unsigned char *)v1184 + 128) = *((unsigned char *)v1185 + 128);
            *(_WORD *)((char *)v1184 + 129) = *(_WORD *)((char *)v1185 + 129);
            v1197 = v1185[18];
            v1184[17] = v1185[17];
            v1184[18] = v1197;
            v1198 = v1185[20];
            v1184[19] = v1185[19];
            v1184[20] = v1198;
            v1199 = v1185[22];
            v1184[21] = v1185[21];
            v1184[22] = v1199;
            v1200 = v1185[24];
            v1184[23] = v1185[23];
            v1184[24] = v1200;
            v1201 = v1185[26];
            v1184[25] = v1185[25];
            v1184[26] = v1201;
            v1202 = v1185[28];
            v1184[27] = v1185[27];
            v1184[28] = v1202;
            v1203 = v1185[30];
            v1184[29] = v1185[29];
            v1184[30] = v1203;
            v1204 = v1185[32];
            v1184[31] = v1185[31];
            v1184[32] = v1204;
            v1206 = v1185[33];
            v1205 = v1185[34];
            *((unsigned char *)v1184 + 280) = *((unsigned char *)v1185 + 280);
            v1184[33] = v1206;
            v1184[34] = v1205;
            v1207 = v1185[37];
            v1184[36] = v1185[36];
            v1184[37] = v1207;
            v1208 = *(int *)(v1186 + 108);
            v2698 = (char *)v1184 + v1208;
            v1209 = (char *)v1185 + v1208;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1209, 1, v2729))
            {
              v1210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2698, v1209, *(void *)(*(void *)(v1210 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2698, v1209, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v2698, 0, 1, v2729);
            }
            v1219 = *(int *)(v1186 + 112);
            v1220 = (char *)v1184 + v1219;
            v1221 = (char *)v1185 + v1219;
            v18 = v2742;
            v971 = v2727;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1185 + v1219, 1, v2729))
            {
              v1222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1220, v1221, *(void *)(*(void *)(v1222 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v1220, v1221, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v1220, 0, 1, v2729);
            }
            v1188 = v2757;
            __swift_storeEnumTagSinglePayload((uint64_t)v1184, 0, 1, v1186);
            v21 = a3;
            v815 = v2715;
          }
          v1269 = v815[9];
          v1270 = (void *)(v971 + v1269);
          v1271 = (void *)((char *)v1188 + v1269);
          v1272 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1271, 1, (uint64_t)v1272))
          {
            v1273 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v1270, v1271, *(void *)(*(void *)(v1273 - 8) + 64));
            v1274 = v2757;
          }
          else
          {
            v1275 = v1271[1];
            *v1270 = *v1271;
            v1270[1] = v1275;
            v1276 = v1271[3];
            v1270[2] = v1271[2];
            v1270[3] = v1276;
            v1277 = v1271[5];
            v1270[4] = v1271[4];
            v1270[5] = v1277;
            v1278 = v1271[7];
            v1270[6] = v1271[6];
            v1270[7] = v1278;
            v1279 = v1271[9];
            v1270[8] = v1271[8];
            v1270[9] = v1279;
            v1280 = v1271[11];
            v1270[10] = v1271[10];
            v1270[11] = v1280;
            v1281 = v1271[13];
            v1270[12] = v1271[12];
            v1270[13] = v1281;
            v1282 = v1271[15];
            v1270[14] = v1271[14];
            v1270[15] = v1282;
            *((unsigned char *)v1270 + 128) = *((unsigned char *)v1271 + 128);
            *(_WORD *)((char *)v1270 + 129) = *(_WORD *)((char *)v1271 + 129);
            v1283 = v1271[18];
            v1270[17] = v1271[17];
            v1270[18] = v1283;
            v1284 = v1271[20];
            v1270[19] = v1271[19];
            v1270[20] = v1284;
            v1285 = v1271[22];
            v1270[21] = v1271[21];
            v1270[22] = v1285;
            v1286 = v1271[24];
            v1270[23] = v1271[23];
            v1270[24] = v1286;
            v1287 = v1271[26];
            v1270[25] = v1271[25];
            v1270[26] = v1287;
            v1288 = v1271[28];
            v1270[27] = v1271[27];
            v1270[28] = v1288;
            v1289 = v1271[30];
            v1270[29] = v1271[29];
            v1270[30] = v1289;
            v1270[31] = v1271[31];
            v1290 = v1272[24];
            v2700 = (char *)v1270 + v1290;
            v1291 = (char *)v1271 + v1290;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1291, 1, v2729))
            {
              v1292 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2700, v1291, *(void *)(*(void *)(v1292 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2700, v1291, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v2700, 0, 1, v2729);
            }
            v1301 = v1272[25];
            v1302 = (char *)v1270 + v1301;
            v1303 = (char *)v1271 + v1301;
            v18 = v2742;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1271 + v1301, 1, v2729))
            {
              v1304 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1302, v1303, *(void *)(*(void *)(v1304 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v1302, v1303, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v1302, 0, 1, v2729);
            }
            v1315 = v1272[26];
            v1316 = (char *)v1270 + v1315;
            v1317 = (char *)v1271 + v1315;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1271 + v1315, 1, v2718))
            {
              v1318 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1316, v1317, *(void *)(*(void *)(v1318 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2718 - 8) + 16))(v1316, v1317, v2718);
              __swift_storeEnumTagSinglePayload((uint64_t)v1316, 0, 1, v2718);
            }
            v971 = v2727;
            v1274 = v2757;
            __swift_storeEnumTagSinglePayload((uint64_t)v1270, 0, 1, (uint64_t)v1272);
            v21 = a3;
            v815 = v2715;
          }
          v1361 = v815[10];
          v1362 = (void *)(v971 + v1361);
          v1363 = (void *)((char *)v1274 + v1361);
          v1364 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1363, 1, (uint64_t)v1364))
          {
            v1365 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v1362, v1363, *(void *)(*(void *)(v1365 - 8) + 64));
          }
          else
          {
            v1366 = v1363[1];
            *v1362 = *v1363;
            v1362[1] = v1366;
            v1367 = v1363[3];
            v1362[2] = v1363[2];
            v1362[3] = v1367;
            v1368 = v1363[5];
            v1362[4] = v1363[4];
            v1362[5] = v1368;
            v1369 = v1363[7];
            v1362[6] = v1363[6];
            v1362[7] = v1369;
            v1370 = v1363[9];
            v1362[8] = v1363[8];
            v1362[9] = v1370;
            v1371 = v1363[11];
            v1362[10] = v1363[10];
            v1362[11] = v1371;
            v1372 = v1363[13];
            v1362[12] = v1363[12];
            v1362[13] = v1372;
            v1373 = v1363[15];
            v1362[14] = v1363[14];
            v1362[15] = v1373;
            *((unsigned char *)v1362 + 128) = *((unsigned char *)v1363 + 128);
            *(_WORD *)((char *)v1362 + 129) = *(_WORD *)((char *)v1363 + 129);
            v1374 = v1363[18];
            v1362[17] = v1363[17];
            v1362[18] = v1374;
            v1375 = v1363[20];
            v1362[19] = v1363[19];
            v1362[20] = v1375;
            v1376 = v1363[22];
            v1362[21] = v1363[21];
            v1362[22] = v1376;
            v1377 = v1363[24];
            v1362[23] = v1363[23];
            v1362[24] = v1377;
            v1378 = v1363[26];
            v1362[25] = v1363[25];
            v1362[26] = v1378;
            v1362[27] = v1363[27];
            v1379 = v1364[22];
            v2702 = (char *)v1362 + v1379;
            v1380 = (char *)v1363 + v1379;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1380, 1, v2729))
            {
              v1381 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2702, v1380, *(void *)(*(void *)(v1381 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2702, v1380, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v2702, 0, 1, v2729);
            }
            v1390 = v1364[23];
            v1391 = (char *)v1362 + v1390;
            v1392 = (char *)v1363 + v1390;
            v18 = v2742;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1363 + v1390, 1, v2729))
            {
              v1393 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1391, v1392, *(void *)(*(void *)(v1393 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v1391, v1392, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v1391, 0, 1, v2729);
            }
            v1410 = v1364[24];
            v1411 = (char *)v1362 + v1410;
            v1412 = (char *)v1363 + v1410;
            *(void *)v1411 = *(void *)v1412;
            v1411[8] = v1412[8];
            v1413 = v1364[25];
            v1414 = (char *)v1362 + v1413;
            v1415 = (char *)v1363 + v1413;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1363 + v1413, 1, v2718))
            {
              v1416 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1414, v1415, *(void *)(*(void *)(v1416 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2718 - 8) + 16))(v1414, v1415, v2718);
              __swift_storeEnumTagSinglePayload((uint64_t)v1414, 0, 1, v2718);
            }
            v971 = v2727;
            __swift_storeEnumTagSinglePayload((uint64_t)v1362, 0, 1, (uint64_t)v1364);
            v21 = a3;
            v815 = v2715;
          }
          v1449 = v815[11];
          v1450 = (void *)(v971 + v1449);
          v1451 = (void *)((char *)v2757 + v1449);
          v1452 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1451, 1, (uint64_t)v1452))
          {
            v1453 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v1450, v1451, *(void *)(*(void *)(v1453 - 8) + 64));
          }
          else
          {
            v1454 = v1451[1];
            *v1450 = *v1451;
            v1450[1] = v1454;
            v1455 = v1451[3];
            v1450[2] = v1451[2];
            v1450[3] = v1455;
            v1456 = v1451[5];
            v1450[4] = v1451[4];
            v1450[5] = v1456;
            v1457 = v1451[7];
            v1450[6] = v1451[6];
            v1450[7] = v1457;
            v1458 = v1451[9];
            v1450[8] = v1451[8];
            v1450[9] = v1458;
            v1459 = v1451[11];
            v1450[10] = v1451[10];
            v1450[11] = v1459;
            *((unsigned char *)v1450 + 96) = *((unsigned char *)v1451 + 96);
            v1460 = v1451[14];
            v1450[13] = v1451[13];
            v1450[14] = v1460;
            v1461 = v1452[13];
            v2703 = (char *)v1450 + v1461;
            v1462 = (char *)v1451 + v1461;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1462, 1, v2718))
            {
              v1463 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2703, v1462, *(void *)(*(void *)(v1463 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2718 - 8) + 16))(v2703, v1462, v2718);
              __swift_storeEnumTagSinglePayload((uint64_t)v2703, 0, 1, v2718);
            }
            v1472 = v1452[14];
            v1473 = (char *)v1450 + v1472;
            v1474 = (char *)v1451 + v1472;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1451 + v1472, 1, v2718))
            {
              v1475 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1473, v1474, *(void *)(*(void *)(v1475 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2718 - 8) + 16))(v1473, v1474, v2718);
              __swift_storeEnumTagSinglePayload((uint64_t)v1473, 0, 1, v2718);
            }
            v1617 = v1452[15];
            v1618 = (void *)((char *)v1450 + v1617);
            v1619 = (void *)((char *)v1451 + v1617);
            v1620 = v1619[1];
            *v1618 = *v1619;
            v1618[1] = v1620;
            v1621 = v1452[16];
            v1622 = (void *)((char *)v1450 + v1621);
            v1623 = (void *)((char *)v1451 + v1621);
            v1624 = v1623[1];
            *v1622 = *v1623;
            v1622[1] = v1624;
            v1625 = v1452[17];
            v1626 = (void *)((char *)v1450 + v1625);
            v1627 = (void *)((char *)v1451 + v1625);
            v1628 = v1627[1];
            *v1626 = *v1627;
            v1626[1] = v1628;
            v1629 = v1452[18];
            v2687 = (char *)v1451 + v1629;
            v2706 = (char *)v1450 + v1629;
            v1630 = type metadata accessor for DateComponents();
            v1631 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1630 - 8) + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1631(v2706, v2687, v1630);
            v1631((char *)v1450 + v1452[19], (char *)v1451 + v1452[19], v1630);
            v1632 = v1452[20];
            v1633 = (void *)((char *)v1450 + v1632);
            v1634 = (void *)((char *)v1451 + v1632);
            v1635 = v1634[1];
            *v1633 = *v1634;
            v1633[1] = v1635;
            v1636 = v1452[21];
            v1637 = (void *)((char *)v1450 + v1636);
            v1638 = (void *)((char *)v1451 + v1636);
            __dste = (void *)v1638[1];
            *v1637 = *v1638;
            v1637[1] = __dste;
            v1639 = v1452[22];
            v1640 = (void *)((char *)v1450 + v1639);
            v1641 = (void *)((char *)v1451 + v1639);
            v2707 = (void *)v1641[1];
            *v1640 = *v1641;
            v1640[1] = v2707;
            v1642 = v1452[23];
            v1643 = (void *)((char *)v1450 + v1642);
            v1644 = (void *)((char *)v1451 + v1642);
            v2688 = (void *)v1644[1];
            *v1643 = *v1644;
            v1643[1] = v2688;
            v1645 = v1452[24];
            v1646 = (void *)((char *)v1450 + v1645);
            v1647 = (void *)((char *)v1451 + v1645);
            v2678 = (void *)v1647[1];
            *v1646 = *v1647;
            v1646[1] = v2678;
            v1648 = v1452[25];
            v1649 = (void *)((char *)v1450 + v1648);
            v1650 = (void *)((char *)v1451 + v1648);
            v2658 = v1650[1];
            *v1649 = *v1650;
            v1649[1] = v2658;
            v1651 = v1452[26];
            v1652 = (void *)((char *)v1450 + v1651);
            v1653 = (void *)((char *)v1451 + v1651);
            v2654 = v1653[1];
            *v1652 = *v1653;
            v1652[1] = v2654;
            v1654 = v1452[27];
            v1655 = (void *)((char *)v1450 + v1654);
            v1656 = (void *)((char *)v1451 + v1654);
            v2650 = v1656[1];
            *v1655 = *v1656;
            v1655[1] = v2650;
            v1657 = v1452[28];
            v1658 = (void *)((char *)v1450 + v1657);
            v1659 = (void *)((char *)v1451 + v1657);
            v2646 = (void *)v1659[1];
            *v1658 = *v1659;
            v1658[1] = v2646;
            v1660 = v1452[29];
            v1661 = (void *)((char *)v1450 + v1660);
            v1662 = (void *)((char *)v1451 + v1660);
            v2639 = v1662[1];
            *v1661 = *v1662;
            v1661[1] = v2639;
            v1663 = v1452[30];
            v1664 = (void *)((char *)v1450 + v1663);
            v1665 = (void *)((char *)v1451 + v1663);
            v2635 = v1665[1];
            *v1664 = *v1665;
            v1664[1] = v2635;
            v1666 = v1452[31];
            v1667 = (void *)((char *)v1450 + v1666);
            v1668 = (void *)((char *)v1451 + v1666);
            v2632 = v1668[1];
            *v1667 = *v1668;
            v1667[1] = v2632;
            v1669 = v1452[32];
            v1670 = (void *)((char *)v1450 + v1669);
            v1671 = (void *)((char *)v1451 + v1669);
            v2629 = v1671[1];
            *v1670 = *v1671;
            v1670[1] = v2629;
            *(void *)((char *)v1450 + v1452[33]) = *(void *)((char *)v1451 + v1452[33]);
            *(void *)((char *)v1450 + v1452[34]) = *(void *)((char *)v1451 + v1452[34]);
            v1672 = v1452[35];
            v1673 = (void *)((char *)v1450 + v1672);
            v1674 = (void *)((char *)v1451 + v1672);
            v1675 = v1674[1];
            *v1673 = *v1674;
            v1673[1] = v1675;
            v1676 = v1452[36];
            v1677 = (void *)((char *)v1450 + v1676);
            v1678 = (void *)((char *)v1451 + v1676);
            v1679 = v1678[1];
            *v1677 = *v1678;
            v1677[1] = v1679;
            v1680 = v1452[37];
            v1681 = (void *)((char *)v1450 + v1680);
            v1682 = (void *)((char *)v1451 + v1680);
            v1683 = v1682[1];
            *v1681 = *v1682;
            v1681[1] = v1683;
            v1684 = v1452[38];
            v2643 = (char *)v1450 + v1684;
            v1685 = (char *)v1451 + v1684;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1685, 1, v2729))
            {
              v1686 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2643, v1685, *(void *)(*(void *)(v1686 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2643, v1685, v2729);
              __swift_storeEnumTagSinglePayload((uint64_t)v2643, 0, 1, v2729);
            }
            v1789 = v1452[39];
            v1790 = (void *)((char *)v1450 + v1789);
            v1791 = (void *)((char *)v1451 + v1789);
            v1792 = v1791[1];
            *v1790 = *v1791;
            v1790[1] = v1792;
            v1793 = v1452[40];
            v1794 = (void *)((char *)v1450 + v1793);
            v1795 = (void *)((char *)v1451 + v1793);
            v1796 = v1795[1];
            *v1794 = *v1795;
            v1794[1] = v1796;
            v1797 = v1452[41];
            v1798 = (char *)v1450 + v1797;
            v1799 = (char *)v1451 + v1797;
            v1798[8] = v1799[8];
            *(void *)v1798 = *(void *)v1799;
            v1800 = v1452[42];
            v1801 = (void *)((char *)v1450 + v1800);
            v1802 = (void *)((char *)v1451 + v1800);
            v1803 = v1802[1];
            *v1801 = *v1802;
            v1801[1] = v1803;
            v1804 = v1452[43];
            v1805 = (char *)v1450 + v1804;
            v1806 = (char *)v1451 + v1804;
            *(_OWORD *)v1805 = *(_OWORD *)v1806;
            *(void *)(v1805 + 13) = *(void *)(v1806 + 13);
            v1807 = v1452[44];
            v1808 = (void *)((char *)v1450 + v1807);
            v1809 = (void *)((char *)v1451 + v1807);
            v1810 = v1809[1];
            *v1808 = *v1809;
            v1808[1] = v1810;
            v1811 = v1452[45];
            v1812 = (void *)((char *)v1450 + v1811);
            v1813 = (void *)((char *)v1451 + v1811);
            v1814 = v1813[1];
            *v1812 = *v1813;
            v1812[1] = v1814;
            v1815 = v1452[46];
            v1816 = (void *)((char *)v1450 + v1815);
            v1817 = (void *)((char *)v1451 + v1815);
            v1818 = v1817[1];
            *v1816 = *v1817;
            v1816[1] = v1818;
            v1819 = v1452[47];
            v1820 = (void *)((char *)v1450 + v1819);
            v1821 = (void *)((char *)v1451 + v1819);
            v1822 = v1821[1];
            *v1820 = *v1821;
            v1820[1] = v1822;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1450, 0, 1, (uint64_t)v1452);
            v18 = v2742;
            v21 = a3;
            v815 = v2715;
          }
          v1823 = v815[12];
          v1824 = (void *)(v2727 + v1823);
          v1825 = (void *)((char *)v2757 + v1823);
          v1826 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1825, 1, (uint64_t)v1826))
          {
            v1827 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v1824, v1825, *(void *)(*(void *)(v1827 - 8) + 64));
          }
          else
          {
            v1828 = v1825[1];
            *v1824 = *v1825;
            v1824[1] = v1828;
            v1829 = v1825[3];
            v1824[2] = v1825[2];
            v1824[3] = v1829;
            v1830 = v1825[5];
            v1824[4] = v1825[4];
            v1824[5] = v1830;
            v1831 = v1825[7];
            v1824[6] = v1825[6];
            v1824[7] = v1831;
            v1832 = v1825[9];
            v1824[8] = v1825[8];
            v1824[9] = v1832;
            v1833 = v1825[11];
            v1824[10] = v1825[10];
            v1824[11] = v1833;
            *((unsigned char *)v1824 + 96) = *((unsigned char *)v1825 + 96);
            v1834 = v1825[14];
            v1824[13] = v1825[13];
            v1824[14] = v1834;
            v1835 = v1825[16];
            v1824[15] = v1825[15];
            v1824[16] = v1835;
            v1836 = v1826[14];
            v2708 = (char *)v1824 + v1836;
            v1837 = (char *)v1825 + v1836;
            v1838 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1837, 1, v1838))
            {
              v1839 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2708, v1837, *(void *)(*(void *)(v1839 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1838 - 8) + 16))(v2708, v1837, v1838);
              __swift_storeEnumTagSinglePayload((uint64_t)v2708, 0, 1, v1838);
            }
            v1848 = v1826[15];
            v1849 = (char *)v1824 + v1848;
            v1850 = (char *)v1825 + v1848;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1825 + v1848, 1, v1838))
            {
              v1851 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1849, v1850, *(void *)(*(void *)(v1851 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1838 - 8) + 16))(v1849, v1850, v1838);
              __swift_storeEnumTagSinglePayload((uint64_t)v1849, 0, 1, v1838);
            }
            v1970 = v1826[16];
            v1971 = (void *)((char *)v1824 + v1970);
            v1972 = (void *)((char *)v1825 + v1970);
            v1973 = v1972[1];
            *v1971 = *v1972;
            v1971[1] = v1973;
            v1974 = v1826[17];
            v1975 = (void *)((char *)v1824 + v1974);
            v1976 = (void *)((char *)v1825 + v1974);
            v1977 = v1976[1];
            *v1975 = *v1976;
            v1975[1] = v1977;
            v1978 = v1826[18];
            v1979 = (void *)((char *)v1824 + v1978);
            v1980 = (void *)((char *)v1825 + v1978);
            v1981 = v1980[1];
            *v1979 = *v1980;
            v1979[1] = v1981;
            v1982 = v1826[19];
            v1983 = (void *)((char *)v1824 + v1982);
            v1984 = (void *)((char *)v1825 + v1982);
            v2710 = (void *)v1984[1];
            *v1983 = *v1984;
            v1983[1] = v2710;
            v1985 = v1826[20];
            v1986 = (void *)((char *)v1824 + v1985);
            v1987 = (void *)((char *)v1825 + v1985);
            v2680 = (void *)v1987[1];
            *v1986 = *v1987;
            v1986[1] = v2680;
            *(void *)((char *)v1824 + v1826[21]) = *(void *)((char *)v1825 + v1826[21]);
            *(void *)((char *)v1824 + v1826[22]) = *(void *)((char *)v1825 + v1826[22]);
            v1988 = v1826[23];
            v1989 = (char *)v1824 + v1988;
            v1990 = (char *)v1825 + v1988;
            *(void *)v1989 = *(void *)v1990;
            v1989[8] = v1990[8];
            v1991 = v1826[24];
            v1992 = (char *)v1824 + v1991;
            v1993 = (char *)v1825 + v1991;
            *(void *)v1992 = *(void *)v1993;
            v1992[8] = v1993[8];
            v1994 = v1826[25];
            v1995 = (void *)((char *)v1824 + v1994);
            v1996 = (void *)((char *)v1825 + v1994);
            v1997 = v1996[1];
            *v1995 = *v1996;
            v1995[1] = v1997;
            v1998 = v1826[26];
            v1999 = (void *)((char *)v1824 + v1998);
            v2000 = (void *)((char *)v1825 + v1998);
            v2001 = v2000[1];
            *v1999 = *v2000;
            v1999[1] = v2001;
            v2002 = v1826[27];
            v2003 = (void *)((char *)v1824 + v2002);
            v2004 = (void *)((char *)v1825 + v2002);
            v2005 = v2004[1];
            *v2003 = *v2004;
            v2003[1] = v2005;
            v2006 = v1826[28];
            v2007 = (void *)((char *)v1824 + v2006);
            v2008 = (void *)((char *)v1825 + v2006);
            v2009 = v2008[1];
            *v2007 = *v2008;
            v2007[1] = v2009;
            v2010 = v1826[29];
            v2011 = (char *)v1824 + v2010;
            v2012 = (char *)v1825 + v2010;
            *(void *)v2011 = *(void *)v2012;
            v2011[8] = v2012[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1824, 0, 1, (uint64_t)v1826);
            v18 = v2742;
            v21 = a3;
            v815 = v2715;
          }
          v2013 = v815[13];
          v2014 = (void *)(v2727 + v2013);
          v2015 = (void *)((char *)v2757 + v2013);
          v2016 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2015, 1, (uint64_t)v2016))
          {
            v2017 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v2014, v2015, *(void *)(*(void *)(v2017 - 8) + 64));
          }
          else
          {
            v2018 = v2015[1];
            *v2014 = *v2015;
            v2014[1] = v2018;
            v2019 = v2015[3];
            v2014[2] = v2015[2];
            v2014[3] = v2019;
            v2020 = v2015[5];
            v2014[4] = v2015[4];
            v2014[5] = v2020;
            v2021 = v2015[7];
            v2014[6] = v2015[6];
            v2014[7] = v2021;
            v2022 = v2015[9];
            v2014[8] = v2015[8];
            v2014[9] = v2022;
            v2023 = v2015[11];
            v2014[10] = v2015[10];
            v2014[11] = v2023;
            *((unsigned char *)v2014 + 96) = *((unsigned char *)v2015 + 96);
            v2024 = v2015[14];
            v2014[13] = v2015[13];
            v2014[14] = v2024;
            v2025 = v2015[16];
            v2014[15] = v2015[15];
            v2014[16] = v2025;
            v2026 = v2016[14];
            v2772 = (char *)v2014 + v2026;
            v2027 = (char *)v2015 + v2026;
            v2028 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2027, 1, v2028))
            {
              v2029 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2772, v2027, *(void *)(*(void *)(v2029 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2028 - 8) + 16))(v2772, v2027, v2028);
              __swift_storeEnumTagSinglePayload((uint64_t)v2772, 0, 1, v2028);
            }
            v2430 = v2016[15];
            v2431 = (void *)((char *)v2014 + v2430);
            v2432 = (void *)((char *)v2015 + v2430);
            v2433 = v2432[1];
            *v2431 = *v2432;
            v2431[1] = v2433;
            v2434 = v2016[16];
            v2435 = (void *)((char *)v2014 + v2434);
            v2436 = (void *)((char *)v2015 + v2434);
            v2437 = v2436[1];
            *v2435 = *v2436;
            v2435[1] = v2437;
            v2438 = v2016[17];
            v2439 = (void *)((char *)v2014 + v2438);
            v2440 = (void *)((char *)v2015 + v2438);
            v2441 = v2440[1];
            *v2439 = *v2440;
            v2439[1] = v2441;
            v2442 = v2016[18];
            v2443 = (void *)((char *)v2014 + v2442);
            v2444 = (void *)((char *)v2015 + v2442);
            v2445 = v2444[1];
            *v2443 = *v2444;
            v2443[1] = v2445;
            v2446 = v2016[19];
            v2447 = (void *)((char *)v2014 + v2446);
            v2448 = (void *)((char *)v2015 + v2446);
            v2449 = v2448[1];
            *v2447 = *v2448;
            v2447[1] = v2449;
            *(void *)((char *)v2014 + v2016[20]) = *(void *)((char *)v2015 + v2016[20]);
            v2450 = v2016[21];
            v2451 = (void *)((char *)v2014 + v2450);
            v2452 = (void *)((char *)v2015 + v2450);
            v2453 = v2452[1];
            *v2451 = *v2452;
            v2451[1] = v2453;
            v2454 = v2016[22];
            v2455 = (void *)((char *)v2014 + v2454);
            v2456 = (void *)((char *)v2015 + v2454);
            v2457 = v2456[1];
            *v2455 = *v2456;
            v2455[1] = v2457;
            v2458 = v2016[23];
            v2459 = (void *)((char *)v2014 + v2458);
            v2460 = (void *)((char *)v2015 + v2458);
            v2461 = v2460[1];
            *v2459 = *v2460;
            v2459[1] = v2461;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2014, 0, 1, (uint64_t)v2016);
            v18 = v2742;
            v21 = a3;
            v815 = v2715;
          }
          __swift_storeEnumTagSinglePayload(v2727, 0, 1, (uint64_t)v815);
          v761 = v2754;
          v762 = v2735;
        }
        v2462 = v762[20];
        v2463 = (void *)((char *)v761 + v2462);
        v2464 = (void *)((char *)v18 + v2462);
        v2465 = type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2464, 1, v2465))
        {
          v2466 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v2463, v2464, *(void *)(*(void *)(v2466 - 8) + 64));
          v150 = v2751;
          v2467 = v2754;
        }
        else
        {
          v2468 = v2464[1];
          *v2463 = *v2464;
          v2463[1] = v2468;
          v2469 = v2464[3];
          v2463[2] = v2464[2];
          v2463[3] = v2469;
          v2470 = v2464[5];
          v2463[4] = v2464[4];
          v2463[5] = v2470;
          v2471 = v2464[7];
          v2463[6] = v2464[6];
          v2463[7] = v2471;
          v2472 = v2464[9];
          v2463[8] = v2464[8];
          v2463[9] = v2472;
          v2473 = v2464[11];
          v2463[10] = v2464[10];
          v2463[11] = v2473;
          v2474 = *(int *)(v2465 + 40);
          v2782 = (char *)v2463 + v2474;
          v2475 = (char *)v2464 + v2474;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2475, 1, v2729))
          {
            v2476 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2782, v2475, *(void *)(*(void *)(v2476 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2782, v2475, v2729);
            __swift_storeEnumTagSinglePayload((uint64_t)v2782, 0, 1, v2729);
          }
          v2783 = (int *)v2465;
          v2477 = *(int *)(v2465 + 44);
          v2478 = (char *)v2463 + v2477;
          v2479 = (char *)v2464 + v2477;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2464 + v2477, 1, v2729))
          {
            v2480 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2478, v2479, *(void *)(*(void *)(v2480 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2478, v2479, v2729);
            __swift_storeEnumTagSinglePayload((uint64_t)v2478, 0, 1, v2729);
          }
          v150 = v2751;
          v2481 = v2783[12];
          v2482 = (void *)((char *)v2463 + v2481);
          v2483 = (void *)((char *)v2464 + v2481);
          v2484 = v2483[1];
          *v2482 = *v2483;
          v2482[1] = v2484;
          v2485 = v2783[13];
          v2486 = (void *)((char *)v2463 + v2485);
          v2487 = (void *)((char *)v2464 + v2485);
          v2488 = v2487[1];
          *v2486 = *v2487;
          v2486[1] = v2488;
          v2489 = v2783[14];
          v2490 = (void *)((char *)v2463 + v2489);
          v2491 = (void *)((char *)v2464 + v2489);
          v2492 = v2491[1];
          *v2490 = *v2491;
          v2490[1] = v2492;
          v2493 = v2783[15];
          v2494 = (char *)v2463 + v2493;
          v2495 = (char *)v2464 + v2493;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2495, 1, v2729))
          {
            v2496 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2494, v2495, *(void *)(*(void *)(v2496 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2494, v2495, v2729);
            __swift_storeEnumTagSinglePayload((uint64_t)v2494, 0, 1, v2729);
          }
          v2497 = v2783[16];
          v2498 = (void *)((char *)v2463 + v2497);
          v2499 = (void *)((char *)v2464 + v2497);
          v2500 = v2499[1];
          *v2498 = *v2499;
          v2498[1] = v2500;
          v2501 = v2783[17];
          v2502 = (void *)((char *)v2463 + v2501);
          v2503 = (void *)((char *)v2464 + v2501);
          v2504 = v2503[1];
          *v2502 = *v2503;
          v2502[1] = v2504;
          v2505 = v2783[18];
          v2506 = (void *)((char *)v2463 + v2505);
          v2507 = (void *)((char *)v2464 + v2505);
          v2753 = v2507[1];
          *v2506 = *v2507;
          v2506[1] = v2753;
          v2508 = v2783[19];
          v2509 = (void *)((char *)v2463 + v2508);
          v2510 = (void *)((char *)v2464 + v2508);
          v2511 = v2510[1];
          *v2509 = *v2510;
          v2509[1] = v2511;
          v2512 = v2783[20];
          v2513 = (void *)((char *)v2463 + v2512);
          v2514 = (void *)((char *)v2464 + v2512);
          v2515 = v2514[1];
          *v2513 = *v2514;
          v2513[1] = v2515;
          v2516 = v2783[21];
          v2517 = (void *)((char *)v2463 + v2516);
          v2518 = (void *)((char *)v2464 + v2516);
          v2519 = v2518[1];
          *v2517 = *v2518;
          v2517[1] = v2519;
          v2520 = v2783[22];
          v2521 = (void *)((char *)v2463 + v2520);
          v2522 = (void *)((char *)v2464 + v2520);
          v2523 = v2522[1];
          *v2521 = *v2522;
          v2521[1] = v2523;
          v2524 = v2783[23];
          v2525 = (void *)((char *)v2463 + v2524);
          v2526 = (void *)((char *)v2464 + v2524);
          v2527 = v2526[1];
          *v2525 = *v2526;
          v2525[1] = v2527;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2463, 0, 1, (uint64_t)v2783);
          v2467 = v2754;
          v18 = v2742;
          v21 = a3;
        }
        v2528 = v2735[21];
        v2529 = (void *)((char *)v2467 + v2528);
        v2530 = (void *)((char *)v18 + v2528);
        v2531 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2530, 1, (uint64_t)v2531))
        {
          v2532 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v2529, v2530, *(void *)(*(void *)(v2532 - 8) + 64));
          v2533 = v2754;
        }
        else
        {
          v2534 = v2530[1];
          *v2529 = *v2530;
          v2529[1] = v2534;
          v2535 = v2530[3];
          v2529[2] = v2530[2];
          v2529[3] = v2535;
          v2536 = v2530[5];
          v2529[4] = v2530[4];
          v2529[5] = v2536;
          v2537 = v2530[7];
          v2529[6] = v2530[6];
          v2529[7] = v2537;
          v2538 = v2530[9];
          v2529[8] = v2530[8];
          v2529[9] = v2538;
          v2539 = v2530[11];
          v2529[10] = v2530[10];
          v2529[11] = v2539;
          v2540 = v2531[11];
          v2784 = (char *)v2529 + v2540;
          v2541 = (char *)v2530 + v2540;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2541, 1, v2729))
          {
            v2542 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2784, v2541, *(void *)(*(void *)(v2542 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2784, v2541, v2729);
            __swift_storeEnumTagSinglePayload((uint64_t)v2784, 0, 1, v2729);
          }
          v2543 = v2531[12];
          v2544 = (void *)((char *)v2529 + v2543);
          v2545 = (void *)((char *)v2530 + v2543);
          v2546 = v2545[1];
          *v2544 = *v2545;
          v2544[1] = v2546;
          *(void *)((char *)v2529 + v2531[13]) = *(void *)((char *)v2530 + v2531[13]);
          v2547 = v2531[14];
          v2548 = (char *)v2529 + v2547;
          v2549 = (char *)v2530 + v2547;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2549, 1, v2729))
          {
            v2550 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2548, v2549, *(void *)(*(void *)(v2550 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2548, v2549, v2729);
            __swift_storeEnumTagSinglePayload((uint64_t)v2548, 0, 1, v2729);
          }
          *(void *)((char *)v2529 + v2531[15]) = *(void *)((char *)v2530 + v2531[15]);
          *(void *)((char *)v2529 + v2531[16]) = *(void *)((char *)v2530 + v2531[16]);
          v2551 = v2531[17];
          v2552 = (void *)((char *)v2529 + v2551);
          v2553 = (void *)((char *)v2530 + v2551);
          v2554 = v2553[1];
          *v2552 = *v2553;
          v2552[1] = v2554;
          *(void *)((char *)v2529 + v2531[18]) = *(void *)((char *)v2530 + v2531[18]);
          *(void *)((char *)v2529 + v2531[19]) = *(void *)((char *)v2530 + v2531[19]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2529, 0, 1, (uint64_t)v2531);
          v2533 = v2754;
          v18 = v2742;
          v21 = a3;
        }
        v2555 = v2735[22];
        v2556 = (void *)((char *)v2533 + v2555);
        v2557 = (void *)((char *)v18 + v2555);
        v2558 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2557, 1, (uint64_t)v2558))
        {
          v2559 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v2556, v2557, *(void *)(*(void *)(v2559 - 8) + 64));
          v22 = v2754;
        }
        else
        {
          v2560 = v2557[1];
          *v2556 = *v2557;
          v2556[1] = v2560;
          v2561 = v2557[3];
          v2556[2] = v2557[2];
          v2556[3] = v2561;
          v2562 = v2557[5];
          v2556[4] = v2557[4];
          v2556[5] = v2562;
          v2563 = v2557[7];
          v2556[6] = v2557[6];
          v2556[7] = v2563;
          v2564 = v2558[8];
          v2565 = (char *)v2556 + v2564;
          v2566 = (char *)v2557 + v2564;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2566, 1, v2718))
          {
            v2567 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2565, v2566, *(void *)(*(void *)(v2567 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2718 - 8) + 16))(v2565, v2566, v2718);
            __swift_storeEnumTagSinglePayload((uint64_t)v2565, 0, 1, v2718);
          }
          v2568 = v2558[9];
          v2569 = (void *)((char *)v2556 + v2568);
          v2570 = (void *)((char *)v2557 + v2568);
          v2571 = v2570[1];
          *v2569 = *v2570;
          v2569[1] = v2571;
          v2572 = v2558[10];
          v2573 = (void *)((char *)v2556 + v2572);
          v2574 = (void *)((char *)v2557 + v2572);
          v2575 = v2574[1];
          *v2573 = *v2574;
          v2573[1] = v2575;
          v2576 = v2558[11];
          v2577 = (void *)((char *)v2556 + v2576);
          v2578 = (void *)((char *)v2557 + v2576);
          v2579 = v2578[1];
          *v2577 = *v2578;
          v2577[1] = v2579;
          v2580 = v2558[12];
          v2581 = (char *)v2556 + v2580;
          v2582 = (char *)v2557 + v2580;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2582, 1, v2729))
          {
            v2583 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2581, v2582, *(void *)(*(void *)(v2583 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2581, v2582, v2729);
            __swift_storeEnumTagSinglePayload((uint64_t)v2581, 0, 1, v2729);
          }
          v2584 = v2558[13];
          v2585 = (char *)v2556 + v2584;
          v2586 = (char *)v2557 + v2584;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2557 + v2584, 1, v2729))
          {
            v2587 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2585, v2586, *(void *)(*(void *)(v2587 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2729 - 8) + 16))(v2585, v2586, v2729);
            __swift_storeEnumTagSinglePayload((uint64_t)v2585, 0, 1, v2729);
          }
          v2588 = v2558[14];
          v2589 = (char *)v2556 + v2588;
          v2590 = (char *)v2557 + v2588;
          *(void *)v2589 = *(void *)v2590;
          v2589[8] = v2590[8];
          v2591 = v2558[15];
          v2592 = (void *)((char *)v2556 + v2591);
          v2593 = (void *)((char *)v2557 + v2591);
          v2594 = v2593[1];
          *v2592 = *v2593;
          v2592[1] = v2594;
          v2595 = v2558[16];
          v2596 = (void *)((char *)v2556 + v2595);
          v2597 = (void *)((char *)v2557 + v2595);
          v2598 = v2597[1];
          *v2596 = *v2597;
          v2596[1] = v2598;
          v2599 = v2558[17];
          v2600 = (void *)((char *)v2556 + v2599);
          v2601 = (void *)((char *)v2557 + v2599);
          v2602 = v2601[1];
          *v2600 = *v2601;
          v2600[1] = v2602;
          v2603 = v2558[18];
          v2604 = (void *)((char *)v2556 + v2603);
          v2605 = (void *)((char *)v2557 + v2603);
          v2606 = v2605[1];
          *v2604 = *v2605;
          v2604[1] = v2606;
          v2607 = v2558[19];
          v2608 = (void *)((char *)v2556 + v2607);
          v2609 = (void *)((char *)v2557 + v2607);
          v2610 = v2609[1];
          *v2608 = *v2609;
          v2608[1] = v2610;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2556, 0, 1, (uint64_t)v2558);
          v22 = v2754;
          v18 = v2742;
          v21 = a3;
        }
        v2611 = v2735[23];
        v2612 = (void *)((char *)v22 + v2611);
        v2613 = (void *)((char *)v18 + v2611);
        v2614 = *(void *)((char *)v18 + v2611 + 8);
        if (v2614)
        {
          *v2612 = *v2613;
          v2612[1] = v2614;
          v2615 = v2613[3];
          v2612[2] = v2613[2];
          v2612[3] = v2615;
          v2616 = v2613[5];
          v2612[4] = v2613[4];
          v2612[5] = v2616;
          v2617 = v2613[7];
          v2612[6] = v2613[6];
          v2612[7] = v2617;
          v2618 = v2613[9];
          v2612[8] = v2613[8];
          v2612[9] = v2618;
          v2619 = v2613[11];
          v2612[10] = v2613[10];
          v2612[11] = v2619;
          v2620 = v2613[13];
          v2612[12] = v2613[12];
          v2612[13] = v2620;
          v2785 = v2613[15];
          v2612[14] = v2613[14];
          v2612[15] = v2785;
          v2621 = v2613[17];
          v2612[16] = v2613[16];
          v2612[17] = v2621;
          swift_bridgeObjectRetain();
          v22 = v2754;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v21 = a3;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v18 = v2742;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          memcpy(v2612, v2613, 0x90uLL);
        }
        goto LABEL_522;
      case 2u:
        v57 = v16[1];
        *v13 = *v16;
        v13[1] = v57;
        v58 = v16[3];
        v13[2] = v16[2];
        v13[3] = v58;
        v59 = v16[5];
        v13[4] = v16[4];
        v13[5] = v59;
        v60 = (int *)type metadata accessor for CalendarEvent(0);
        v61 = v60[7];
        v62 = (char *)v13 + v61;
        v63 = (char *)v16 + v61;
        v64 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v63, 1, v64))
        {
          v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v62, v63, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
          __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v64);
        }
        v411 = v60[8];
        v412 = (char *)v13 + v411;
        v413 = (char *)v16 + v411;
        if (__swift_getEnumTagSinglePayload((uint64_t)v16 + v411, 1, v64))
        {
          v414 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v412, v413, *(void *)(*(void *)(v414 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v412, v413, v64);
          __swift_storeEnumTagSinglePayload((uint64_t)v412, 0, 1, v64);
        }
        v20 = v2755;
        v596 = v60[9];
        v597 = (void *)((char *)v13 + v596);
        v598 = (void *)((char *)v16 + v596);
        v599 = v598[1];
        *v597 = *v598;
        v597[1] = v599;
        *(void *)((char *)v13 + v60[10]) = *(void *)((char *)v16 + v60[10]);
        *(void *)((char *)v13 + v60[11]) = *(void *)((char *)v16 + v60[11]);
        v600 = v60[12];
        v601 = (void *)((char *)v13 + v600);
        v602 = (void *)((char *)v16 + v600);
        v603 = v602[1];
        *v601 = *v602;
        v601[1] = v603;
        v604 = v60[13];
        v605 = (void *)((char *)v13 + v604);
        v606 = (char *)v16 + v604;
        v607 = *(void *)((char *)v16 + v604);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v607)
        {
          v608 = *((void *)v606 + 1);
          v609 = *((void *)v606 + 2);
          *v605 = v607;
          v605[1] = v608;
          v610 = *((void *)v606 + 3);
          v611 = *((void *)v606 + 4);
          v605[2] = v609;
          v605[3] = v610;
          v605[4] = v611;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v772 = *((_OWORD *)v606 + 1);
          *(_OWORD *)v605 = *(_OWORD *)v606;
          *((_OWORD *)v605 + 1) = v772;
          v605[4] = *((void *)v606 + 4);
        }
        v21 = a3;
        v150 = v17;
        v22 = v2754;
        v18 = v16;
        goto LABEL_522;
      case 3u:
        v66 = v16[1];
        *v13 = *v16;
        v13[1] = v66;
        v67 = v16[3];
        v13[2] = v16[2];
        v13[3] = v67;
        v2743 = v16;
        v68 = v16[5];
        v13[4] = v16[4];
        v13[5] = v68;
        v69 = v16[7];
        v13[6] = v16[6];
        v13[7] = v69;
        v70 = v16[9];
        v13[8] = v16[8];
        v13[9] = v70;
        v13[10] = v16[10];
        v2736 = (int *)type metadata accessor for Photo(0);
        v71 = v2736[11];
        v72 = (char *)v13 + v71;
        v73 = (char *)v2743 + v71;
        v74 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v2723 = v74;
        if (__swift_getEnumTagSinglePayload((uint64_t)v73, 1, v74))
        {
          v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v72, v73, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16))(v72, v73, v74);
          __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v74);
        }
        v415 = v13;
        *(void *)((char *)v13 + v2736[12]) = *(void *)((char *)v2743 + v2736[12]);
        *(void *)((char *)v13 + v2736[13]) = *(void *)((char *)v2743 + v2736[13]);
        *(void *)((char *)v13 + v2736[14]) = *(void *)((char *)v2743 + v2736[14]);
        *(void *)((char *)v13 + v2736[15]) = *(void *)((char *)v2743 + v2736[15]);
        v416 = v2736[16];
        v417 = (void *)((char *)v13 + v416);
        v418 = (void *)((char *)v2743 + v416);
        v419 = v418[1];
        *v417 = *v418;
        v417[1] = v419;
        v420 = v2736[17];
        v421 = (void *)((char *)v13 + v420);
        v422 = (void *)((char *)v2743 + v420);
        v423 = type metadata accessor for PartialExtractedAttributes(0);
        swift_bridgeObjectRetain();
        v424 = (int *)v423;
        swift_bridgeObjectRetain();
        v425 = v422;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v422, 1, v423))
        {
          v426 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v421, v422, *(void *)(*(void *)(v426 - 8) + 64));
          v20 = v2755;
        }
        else
        {
          v612 = v422[1];
          *v421 = *v422;
          v421[1] = v612;
          v613 = *(int *)(v423 + 20);
          v614 = (void *)((char *)v421 + v613);
          v615 = (void *)((char *)v422 + v613);
          v616 = type metadata accessor for RentalCarReservation(0);
          swift_bridgeObjectRetain();
          v2731 = (uint64_t)v421;
          v2713 = v425;
          if (__swift_getEnumTagSinglePayload((uint64_t)v615, 1, v616))
          {
            v617 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v614, v615, *(void *)(*(void *)(v617 - 8) + 64));
          }
          else
          {
            v845 = v615[1];
            *v614 = *v615;
            v614[1] = v845;
            v846 = v615[3];
            v614[2] = v615[2];
            v614[3] = v846;
            v847 = v615[5];
            v614[4] = v615[4];
            v614[5] = v847;
            v848 = v615[7];
            v614[6] = v615[6];
            v614[7] = v848;
            v849 = v615[9];
            v614[8] = v615[8];
            v614[9] = v849;
            v850 = v615[11];
            v614[10] = v615[10];
            v614[11] = v850;
            v851 = v615[13];
            v614[12] = v615[12];
            v614[13] = v851;
            v852 = v615[15];
            v614[14] = v615[14];
            v614[15] = v852;
            *((unsigned char *)v614 + 128) = *((unsigned char *)v615 + 128);
            *(_WORD *)((char *)v614 + 129) = *(_WORD *)((char *)v615 + 129);
            v853 = v615[18];
            v614[17] = v615[17];
            v614[18] = v853;
            v854 = v615[20];
            v614[19] = v615[19];
            v614[20] = v854;
            v855 = v615[22];
            v614[21] = v615[21];
            v614[22] = v855;
            v2624 = v615[24];
            v614[23] = v615[23];
            v614[24] = v2624;
            v856 = v615[26];
            v614[25] = v615[25];
            v614[26] = v856;
            v857 = v615[28];
            v614[27] = v615[27];
            v614[28] = v857;
            v858 = v615[30];
            v614[29] = v615[29];
            v614[30] = v858;
            v859 = v615[32];
            v614[31] = v615[31];
            v614[32] = v859;
            v860 = v615[34];
            v614[33] = v615[33];
            v614[34] = v860;
            v861 = v615[36];
            v614[35] = v615[35];
            v614[36] = v861;
            v862 = v615[38];
            v614[37] = v615[37];
            v614[38] = v862;
            v863 = v615[40];
            v614[39] = v615[39];
            v614[40] = v863;
            v864 = v615[42];
            v614[41] = v615[41];
            v614[42] = v864;
            v865 = v615[44];
            v614[43] = v615[43];
            v614[44] = v865;
            v866 = v615[46];
            v614[45] = v615[45];
            v614[46] = v866;
            v867 = v615[47];
            *((unsigned char *)v614 + 384) = *((unsigned char *)v615 + 384);
            v614[47] = v867;
            v868 = v615[50];
            v614[49] = v615[49];
            v614[50] = v868;
            v869 = v615[52];
            v614[51] = v615[51];
            v614[52] = v869;
            v870 = *(int *)(v616 + 140);
            v2720 = (char *)v614 + v870;
            v871 = (char *)v615 + v870;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v871, 1, v2723))
            {
              v872 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2720, v871, *(void *)(*(void *)(v872 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2720, v871, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v2720, 0, 1, v2723);
            }
            v905 = *(int *)(v616 + 144);
            v906 = (char *)v614 + v905;
            v907 = (char *)v615 + v905;
            if (__swift_getEnumTagSinglePayload((uint64_t)v615 + v905, 1, v2723))
            {
              v908 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v906, v907, *(void *)(*(void *)(v908 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v906, v907, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v906, 0, 1, v2723);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v614, 0, 1, v616);
            v425 = v2713;
          }
          v943 = v424[6];
          v944 = (void *)(v2731 + v943);
          v945 = (void *)((char *)v425 + v943);
          v946 = type metadata accessor for TicketedTransportation(0);
          v2721 = v424;
          if (__swift_getEnumTagSinglePayload((uint64_t)v945, 1, v946))
          {
            v947 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v944, v945, *(void *)(*(void *)(v947 - 8) + 64));
            v20 = v2755;
          }
          else
          {
            v948 = v945[1];
            *v944 = *v945;
            v944[1] = v948;
            v949 = v945[3];
            v944[2] = v945[2];
            v944[3] = v949;
            v950 = v945[5];
            v944[4] = v945[4];
            v944[5] = v950;
            v951 = v945[7];
            v944[6] = v945[6];
            v944[7] = v951;
            v952 = v945[9];
            v944[8] = v945[8];
            v944[9] = v952;
            v953 = v945[11];
            v944[10] = v945[10];
            v944[11] = v953;
            v954 = v945[13];
            v944[12] = v945[12];
            v944[13] = v954;
            v955 = v945[15];
            v944[14] = v945[14];
            v944[15] = v955;
            *((unsigned char *)v944 + 128) = *((unsigned char *)v945 + 128);
            *(_WORD *)((char *)v944 + 129) = *(_WORD *)((char *)v945 + 129);
            v956 = v945[18];
            v944[17] = v945[17];
            v944[18] = v956;
            v957 = v945[20];
            v944[19] = v945[19];
            v944[20] = v957;
            v958 = v945[22];
            v944[21] = v945[21];
            v944[22] = v958;
            v959 = v945[24];
            v944[23] = v945[23];
            v944[24] = v959;
            v960 = v945[26];
            v944[25] = v945[25];
            v944[26] = v960;
            v961 = v945[28];
            v944[27] = v945[27];
            v944[28] = v961;
            v962 = v945[30];
            v944[29] = v945[29];
            v944[30] = v962;
            v963 = v945[32];
            v944[31] = v945[31];
            v944[32] = v963;
            v964 = v945[34];
            v944[33] = v945[33];
            v944[34] = v964;
            v966 = v945[35];
            v965 = v945[36];
            *((unsigned char *)v944 + 296) = *((unsigned char *)v945 + 296);
            v944[35] = v966;
            v944[36] = v965;
            v967 = *(int *)(v946 + 112);
            v2683 = (char *)v944 + v967;
            v2693 = (int *)v946;
            v968 = (char *)v945 + v967;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v20 = v2755;
            if (__swift_getEnumTagSinglePayload((uint64_t)v968, 1, v2723))
            {
              v969 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2683, v968, *(void *)(*(void *)(v969 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2683, v968, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v2683, 0, 1, v2723);
            }
            v1002 = v2693[29];
            v1003 = (char *)v944 + v1002;
            v1004 = (char *)v945 + v1002;
            if (__swift_getEnumTagSinglePayload((uint64_t)v945 + v1002, 1, v2723))
            {
              v1005 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1003, v1004, *(void *)(*(void *)(v1005 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v1003, v1004, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v1003, 0, 1, v2723);
            }
            v424 = v2721;
            __swift_storeEnumTagSinglePayload((uint64_t)v944, 0, 1, (uint64_t)v2693);
            v425 = v2713;
          }
          v1037 = v424[7];
          v1038 = (void *)(v2731 + v1037);
          v1039 = (void *)((char *)v425 + v1037);
          v1040 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1039, 1, (uint64_t)v1040))
          {
            v1041 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v1038, v1039, *(void *)(*(void *)(v1041 - 8) + 64));
          }
          else
          {
            v1042 = v1039[1];
            *v1038 = *v1039;
            v1038[1] = v1042;
            v1043 = v1039[3];
            v1038[2] = v1039[2];
            v1038[3] = v1043;
            v1044 = v1039[5];
            v1038[4] = v1039[4];
            v1038[5] = v1044;
            v1045 = v1039[7];
            v1038[6] = v1039[6];
            v1038[7] = v1045;
            v1046 = v1039[9];
            v1038[8] = v1039[8];
            v1038[9] = v1046;
            v1047 = v1039[11];
            v1038[10] = v1039[10];
            v1038[11] = v1047;
            v1048 = v1039[13];
            v1038[12] = v1039[12];
            v1038[13] = v1048;
            v1049 = v1039[15];
            v1038[14] = v1039[14];
            v1038[15] = v1049;
            *((unsigned char *)v1038 + 128) = *((unsigned char *)v1039 + 128);
            *(_WORD *)((char *)v1038 + 129) = *(_WORD *)((char *)v1039 + 129);
            v1050 = v1039[18];
            v1038[17] = v1039[17];
            v1038[18] = v1050;
            v1051 = v1039[20];
            v1038[19] = v1039[19];
            v1038[20] = v1051;
            v1052 = v1039[22];
            v1038[21] = v1039[21];
            v1038[22] = v1052;
            v2627 = v1039[24];
            v1038[23] = v1039[23];
            v1038[24] = v2627;
            v1053 = v1039[26];
            v1038[25] = v1039[25];
            v1038[26] = v1053;
            v1054 = v1039[28];
            v1038[27] = v1039[27];
            v1038[28] = v1054;
            v2695 = (void *)v1039[30];
            v1038[29] = v1039[29];
            v1038[30] = v2695;
            v1055 = v1039[32];
            v1038[31] = v1039[31];
            v1038[32] = v1055;
            v1056 = v1039[34];
            v1038[33] = v1039[33];
            v1038[34] = v1056;
            v1057 = v1039[36];
            v1058 = v1039[35];
            *((unsigned char *)v1038 + 296) = *((unsigned char *)v1039 + 296);
            v1038[35] = v1058;
            v1038[36] = v1057;
            v1059 = v1039[39];
            v1038[38] = v1039[38];
            v1038[39] = v1059;
            v1060 = v1040[29];
            v2759 = (char *)v1038 + v1060;
            v1061 = (char *)v1039 + v1060;
            v1062 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1061, 1, v1062))
            {
              v1063 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2759, v1061, *(void *)(*(void *)(v1063 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1062 - 8) + 16))(v2759, v1061, v1062);
              __swift_storeEnumTagSinglePayload((uint64_t)v2759, 0, 1, v1062);
            }
            v1101 = v1040[30];
            v1102 = (void *)((char *)v1038 + v1101);
            v1103 = (void *)((char *)v1039 + v1101);
            v1104 = v1103[1];
            *v1102 = *v1103;
            v1102[1] = v1104;
            v1105 = v1040[31];
            v1106 = (char *)v1038 + v1105;
            v1107 = (char *)v1039 + v1105;
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1107, 1, v2723))
            {
              v1108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1106, v1107, *(void *)(*(void *)(v1108 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v1106, v1107, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v1106, 0, 1, v2723);
            }
            v1121 = v1040[32];
            v1122 = (char *)v1038 + v1121;
            v1123 = (char *)v1039 + v1121;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1039 + v1121, 1, v2723))
            {
              v1124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1122, v1123, *(void *)(*(void *)(v1124 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v1122, v1123, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v1122, 0, 1, v2723);
            }
            v424 = v2721;
            __swift_storeEnumTagSinglePayload((uint64_t)v1038, 0, 1, (uint64_t)v1040);
            v425 = v2713;
          }
          v1156 = v424[8];
          v1157 = (void *)(v2731 + v1156);
          v1158 = (void *)((char *)v425 + v1156);
          v1159 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1158, 1, v1159))
          {
            v1160 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v1157, v1158, *(void *)(*(void *)(v1160 - 8) + 64));
          }
          else
          {
            v1161 = v1158[1];
            *v1157 = *v1158;
            v1157[1] = v1161;
            v1162 = v1158[3];
            v1157[2] = v1158[2];
            v1157[3] = v1162;
            v1163 = v1158[5];
            v1157[4] = v1158[4];
            v1157[5] = v1163;
            v1164 = v1158[7];
            v1157[6] = v1158[6];
            v1157[7] = v1164;
            v1165 = v1158[9];
            v1157[8] = v1158[8];
            v1157[9] = v1165;
            v1166 = v1158[11];
            v1157[10] = v1158[10];
            v1157[11] = v1166;
            v1167 = v1158[13];
            v1157[12] = v1158[12];
            v1157[13] = v1167;
            v1168 = v1158[15];
            v1157[14] = v1158[14];
            v1157[15] = v1168;
            *((unsigned char *)v1157 + 128) = *((unsigned char *)v1158 + 128);
            *(_WORD *)((char *)v1157 + 129) = *(_WORD *)((char *)v1158 + 129);
            v1169 = v1158[18];
            v1157[17] = v1158[17];
            v1157[18] = v1169;
            v1170 = v1158[20];
            v1157[19] = v1158[19];
            v1157[20] = v1170;
            v1171 = v1158[22];
            v1157[21] = v1158[21];
            v1157[22] = v1171;
            v1172 = v1158[24];
            v1157[23] = v1158[23];
            v1157[24] = v1172;
            v1173 = v1158[26];
            v1157[25] = v1158[25];
            v1157[26] = v1173;
            v1174 = v1158[28];
            v1157[27] = v1158[27];
            v1157[28] = v1174;
            v1175 = v1158[30];
            v1157[29] = v1158[29];
            v1157[30] = v1175;
            v1176 = v1158[32];
            v1157[31] = v1158[31];
            v1157[32] = v1176;
            v1178 = v1158[33];
            v1177 = v1158[34];
            *((unsigned char *)v1157 + 280) = *((unsigned char *)v1158 + 280);
            v1157[33] = v1178;
            v1157[34] = v1177;
            v1179 = v1158[37];
            v1157[36] = v1158[36];
            v1157[37] = v1179;
            v1180 = *(int *)(v1159 + 108);
            v2697 = (char *)v1157 + v1180;
            v1181 = (char *)v1158 + v1180;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1181, 1, v2723))
            {
              v1182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2697, v1181, *(void *)(*(void *)(v1182 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2697, v1181, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v2697, 0, 1, v2723);
            }
            v1215 = *(int *)(v1159 + 112);
            v1216 = (char *)v1157 + v1215;
            v1217 = (char *)v1158 + v1215;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1158 + v1215, 1, v2723))
            {
              v1218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1216, v1217, *(void *)(*(void *)(v1218 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v1216, v1217, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v1216, 0, 1, v2723);
            }
            v424 = v2721;
            __swift_storeEnumTagSinglePayload((uint64_t)v1157, 0, 1, v1159);
            v425 = v2713;
          }
          v1246 = v424[9];
          v1247 = (void *)(v2731 + v1246);
          v1248 = (void *)((char *)v425 + v1246);
          v1249 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1248, 1, (uint64_t)v1249))
          {
            v1250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v1247, v1248, *(void *)(*(void *)(v1250 - 8) + 64));
          }
          else
          {
            v1251 = v1248[1];
            *v1247 = *v1248;
            v1247[1] = v1251;
            v1252 = v1248[3];
            v1247[2] = v1248[2];
            v1247[3] = v1252;
            v1253 = v1248[5];
            v1247[4] = v1248[4];
            v1247[5] = v1253;
            v1254 = v1248[7];
            v1247[6] = v1248[6];
            v1247[7] = v1254;
            v1255 = v1248[9];
            v1247[8] = v1248[8];
            v1247[9] = v1255;
            v1256 = v1248[11];
            v1247[10] = v1248[10];
            v1247[11] = v1256;
            v1257 = v1248[13];
            v1247[12] = v1248[12];
            v1247[13] = v1257;
            v1258 = v1248[15];
            v1247[14] = v1248[14];
            v1247[15] = v1258;
            *((unsigned char *)v1247 + 128) = *((unsigned char *)v1248 + 128);
            *(_WORD *)((char *)v1247 + 129) = *(_WORD *)((char *)v1248 + 129);
            v1259 = v1248[18];
            v1247[17] = v1248[17];
            v1247[18] = v1259;
            v1260 = v1248[20];
            v1247[19] = v1248[19];
            v1247[20] = v1260;
            v1261 = v1248[22];
            v1247[21] = v1248[21];
            v1247[22] = v1261;
            v1262 = v1248[24];
            v1247[23] = v1248[23];
            v1247[24] = v1262;
            v1263 = v1248[26];
            v1247[25] = v1248[25];
            v1247[26] = v1263;
            v1264 = v1248[28];
            v1247[27] = v1248[27];
            v1247[28] = v1264;
            v1265 = v1248[30];
            v1247[29] = v1248[29];
            v1247[30] = v1265;
            v1247[31] = v1248[31];
            v1266 = v1249[24];
            v2699 = (char *)v1247 + v1266;
            v1267 = (char *)v1248 + v1266;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1267, 1, v2723))
            {
              v1268 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2699, v1267, *(void *)(*(void *)(v1268 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2699, v1267, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v2699, 0, 1, v2723);
            }
            v1297 = v1249[25];
            v1298 = (char *)v1247 + v1297;
            v1299 = (char *)v1248 + v1297;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1248 + v1297, 1, v2723))
            {
              v1300 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1298, v1299, *(void *)(*(void *)(v1300 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v1298, v1299, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v1298, 0, 1, v2723);
            }
            v424 = v2721;
            v1310 = v1249[26];
            v1311 = (char *)v1247 + v1310;
            v1312 = (char *)v1248 + v1310;
            v1313 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1312, 1, v1313))
            {
              v1314 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1311, v1312, *(void *)(*(void *)(v1314 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1313 - 8) + 16))(v1311, v1312, v1313);
              __swift_storeEnumTagSinglePayload((uint64_t)v1311, 0, 1, v1313);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v1247, 0, 1, (uint64_t)v1249);
            v425 = v2713;
          }
          v1340 = v424[10];
          v1341 = (void *)(v2731 + v1340);
          v1342 = (void *)((char *)v425 + v1340);
          v1343 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1342, 1, (uint64_t)v1343))
          {
            v1344 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v1341, v1342, *(void *)(*(void *)(v1344 - 8) + 64));
          }
          else
          {
            v1345 = v1342[1];
            *v1341 = *v1342;
            v1341[1] = v1345;
            v1346 = v1342[3];
            v1341[2] = v1342[2];
            v1341[3] = v1346;
            v1347 = v1342[5];
            v1341[4] = v1342[4];
            v1341[5] = v1347;
            v1348 = v1342[7];
            v1341[6] = v1342[6];
            v1341[7] = v1348;
            v1349 = v1342[9];
            v1341[8] = v1342[8];
            v1341[9] = v1349;
            v1350 = v1342[11];
            v1341[10] = v1342[10];
            v1341[11] = v1350;
            v1351 = v1342[13];
            v1341[12] = v1342[12];
            v1341[13] = v1351;
            v1352 = v1342[15];
            v1341[14] = v1342[14];
            v1341[15] = v1352;
            *((unsigned char *)v1341 + 128) = *((unsigned char *)v1342 + 128);
            *(_WORD *)((char *)v1341 + 129) = *(_WORD *)((char *)v1342 + 129);
            v1353 = v1342[18];
            v1341[17] = v1342[17];
            v1341[18] = v1353;
            v1354 = v1342[20];
            v1341[19] = v1342[19];
            v1341[20] = v1354;
            v1355 = v1342[22];
            v1341[21] = v1342[21];
            v1341[22] = v1355;
            v1356 = v1342[24];
            v1341[23] = v1342[23];
            v1341[24] = v1356;
            v1357 = v1342[26];
            v1341[25] = v1342[25];
            v1341[26] = v1357;
            v1341[27] = v1342[27];
            v1358 = v1343[22];
            v2701 = (char *)v1341 + v1358;
            v1359 = (char *)v1342 + v1358;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1359, 1, v2723))
            {
              v1360 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2701, v1359, *(void *)(*(void *)(v1360 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2701, v1359, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v2701, 0, 1, v2723);
            }
            v1386 = v1343[23];
            v1387 = (char *)v1341 + v1386;
            v1388 = (char *)v1342 + v1386;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1342 + v1386, 1, v2723))
            {
              v1389 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1387, v1388, *(void *)(*(void *)(v1389 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v1387, v1388, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v1387, 0, 1, v2723);
            }
            v424 = v2721;
            v1402 = v1343[24];
            v1403 = (char *)v1341 + v1402;
            v1404 = (char *)v1342 + v1402;
            *(void *)v1403 = *(void *)v1404;
            v1403[8] = v1404[8];
            v1405 = v1343[25];
            v1406 = (char *)v1341 + v1405;
            v1407 = (char *)v1342 + v1405;
            v1408 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1407, 1, v1408))
            {
              v1409 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1406, v1407, *(void *)(*(void *)(v1409 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1408 - 8) + 16))(v1406, v1407, v1408);
              __swift_storeEnumTagSinglePayload((uint64_t)v1406, 0, 1, v1408);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v1341, 0, 1, (uint64_t)v1343);
            v425 = v2713;
          }
          v1433 = v424[11];
          v1434 = (void *)(v2731 + v1433);
          v1435 = (void *)((char *)v425 + v1433);
          v1436 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1435, 1, (uint64_t)v1436))
          {
            v1437 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v1434, v1435, *(void *)(*(void *)(v1437 - 8) + 64));
          }
          else
          {
            v1438 = v1435[1];
            *v1434 = *v1435;
            v1434[1] = v1438;
            v1439 = v1435[3];
            v1434[2] = v1435[2];
            v1434[3] = v1439;
            v1440 = v1435[5];
            v1434[4] = v1435[4];
            v1434[5] = v1440;
            v1441 = v1435[7];
            v1434[6] = v1435[6];
            v1434[7] = v1441;
            v1442 = v1435[9];
            v1434[8] = v1435[8];
            v1434[9] = v1442;
            v1443 = v1435[11];
            v1434[10] = v1435[10];
            v1434[11] = v1443;
            *((unsigned char *)v1434 + 96) = *((unsigned char *)v1435 + 96);
            v1444 = v1435[14];
            v1434[13] = v1435[13];
            v1434[14] = v1444;
            v1445 = v1436[13];
            v2761 = (char *)v1434 + v1445;
            v1446 = (char *)v1435 + v1445;
            v1447 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1446, 1, v1447))
            {
              v1448 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2761, v1446, *(void *)(*(void *)(v1448 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1447 - 8) + 16))(v2761, v1446, v1447);
              __swift_storeEnumTagSinglePayload((uint64_t)v2761, 0, 1, v1447);
            }
            v1468 = v1436[14];
            v1469 = (char *)v1434 + v1468;
            v1470 = (char *)v1435 + v1468;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1435 + v1468, 1, v1447))
            {
              v1471 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1469, v1470, *(void *)(*(void *)(v1471 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1447 - 8) + 16))(v1469, v1470, v1447);
              __swift_storeEnumTagSinglePayload((uint64_t)v1469, 0, 1, v1447);
            }
            v1547 = v1436[15];
            v1548 = (void *)((char *)v1434 + v1547);
            v1549 = (void *)((char *)v1435 + v1547);
            v1550 = v1549[1];
            *v1548 = *v1549;
            v1548[1] = v1550;
            v1551 = v1436[16];
            v1552 = (void *)((char *)v1434 + v1551);
            v1553 = (void *)((char *)v1435 + v1551);
            v1554 = v1553[1];
            *v1552 = *v1553;
            v1552[1] = v1554;
            v1555 = v1436[17];
            v1556 = (void *)((char *)v1434 + v1555);
            v1557 = (void *)((char *)v1435 + v1555);
            v1558 = v1557[1];
            *v1556 = *v1557;
            v1556[1] = v1558;
            v1559 = v1436[18];
            v2764 = (char *)v1434 + v1559;
            v2704 = (char *)v1435 + v1559;
            v1560 = type metadata accessor for DateComponents();
            v1561 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1560 - 8) + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1561(v2764, v2704, v1560);
            v1561((char *)v1434 + v1436[19], (char *)v1435 + v1436[19], v1560);
            v1562 = v1436[20];
            v1563 = (void *)((char *)v1434 + v1562);
            v1564 = (void *)((char *)v1435 + v1562);
            v1565 = v1564[1];
            *v1563 = *v1564;
            v1563[1] = v1565;
            v1566 = v1436[21];
            v1567 = (void *)((char *)v1434 + v1566);
            v1568 = (void *)((char *)v1435 + v1566);
            v2677 = (void *)v1568[1];
            *v1567 = *v1568;
            v1567[1] = v2677;
            v1569 = v1436[22];
            v1570 = (void *)((char *)v1434 + v1569);
            v1571 = (void *)((char *)v1435 + v1569);
            v2765 = v1571[1];
            *v1570 = *v1571;
            v1570[1] = v2765;
            v1572 = v1436[23];
            v1573 = (void *)((char *)v1434 + v1572);
            v1574 = (void *)((char *)v1435 + v1572);
            v2705 = (void *)v1574[1];
            *v1573 = *v1574;
            v1573[1] = v2705;
            v1575 = v1436[24];
            v1576 = (void *)((char *)v1434 + v1575);
            v1577 = (void *)((char *)v1435 + v1575);
            v2686 = (void *)v1577[1];
            *v1576 = *v1577;
            v1576[1] = v2686;
            v1578 = v1436[25];
            v1579 = (void *)((char *)v1434 + v1578);
            v1580 = (void *)((char *)v1435 + v1578);
            __dstd = (void *)v1580[1];
            *v1579 = *v1580;
            v1579[1] = __dstd;
            v1581 = v1436[26];
            v1582 = (void *)((char *)v1434 + v1581);
            v1583 = (void *)((char *)v1435 + v1581);
            v2657 = v1583[1];
            *v1582 = *v1583;
            v1582[1] = v2657;
            v1584 = v1436[27];
            v1585 = (void *)((char *)v1434 + v1584);
            v1586 = (void *)((char *)v1435 + v1584);
            v2653 = v1586[1];
            *v1585 = *v1586;
            v1585[1] = v2653;
            v1587 = v1436[28];
            v1588 = (void *)((char *)v1434 + v1587);
            v1589 = (void *)((char *)v1435 + v1587);
            v2649 = v1589[1];
            *v1588 = *v1589;
            v1588[1] = v2649;
            v1590 = v1436[29];
            v1591 = (void *)((char *)v1434 + v1590);
            v1592 = (void *)((char *)v1435 + v1590);
            v2642 = (void *)v1592[1];
            *v1591 = *v1592;
            v1591[1] = v2642;
            v1593 = v1436[30];
            v1594 = (void *)((char *)v1434 + v1593);
            v1595 = (void *)((char *)v1435 + v1593);
            v2638 = v1595[1];
            *v1594 = *v1595;
            v1594[1] = v2638;
            v1596 = v1436[31];
            v1597 = (void *)((char *)v1434 + v1596);
            v1598 = (void *)((char *)v1435 + v1596);
            v2634 = v1598[1];
            *v1597 = *v1598;
            v1597[1] = v2634;
            v1599 = v1436[32];
            v1600 = (void *)((char *)v1434 + v1599);
            v1601 = (void *)((char *)v1435 + v1599);
            v2630 = v1601[1];
            *v1600 = *v1601;
            v1600[1] = v2630;
            *(void *)((char *)v1434 + v1436[33]) = *(void *)((char *)v1435 + v1436[33]);
            *(void *)((char *)v1434 + v1436[34]) = *(void *)((char *)v1435 + v1436[34]);
            v1602 = v1436[35];
            v1603 = (void *)((char *)v1434 + v1602);
            v1604 = (void *)((char *)v1435 + v1602);
            v1605 = v1604[1];
            *v1603 = *v1604;
            v1603[1] = v1605;
            v1606 = v1436[36];
            v1607 = (void *)((char *)v1434 + v1606);
            v1608 = (void *)((char *)v1435 + v1606);
            v1609 = v1608[1];
            *v1607 = *v1608;
            v1607[1] = v1609;
            v1610 = v1436[37];
            v1611 = (void *)((char *)v1434 + v1610);
            v1612 = (void *)((char *)v1435 + v1610);
            v1613 = v1612[1];
            *v1611 = *v1612;
            v1611[1] = v1613;
            v1614 = v1436[38];
            v2645 = (char *)v1434 + v1614;
            v1615 = (char *)v1435 + v1614;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1615, 1, v2723))
            {
              v1616 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2645, v1615, *(void *)(*(void *)(v1616 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2645, v1615, v2723);
              __swift_storeEnumTagSinglePayload((uint64_t)v2645, 0, 1, v2723);
            }
            v1738 = v1436[39];
            v1739 = (void *)((char *)v1434 + v1738);
            v1740 = (void *)((char *)v1435 + v1738);
            v1741 = v1740[1];
            *v1739 = *v1740;
            v1739[1] = v1741;
            v1742 = v1436[40];
            v1743 = (void *)((char *)v1434 + v1742);
            v1744 = (void *)((char *)v1435 + v1742);
            v1745 = v1744[1];
            *v1743 = *v1744;
            v1743[1] = v1745;
            v1746 = v1436[41];
            v1747 = (char *)v1434 + v1746;
            v1748 = (char *)v1435 + v1746;
            v1747[8] = v1748[8];
            *(void *)v1747 = *(void *)v1748;
            v1749 = v1436[42];
            v1750 = (void *)((char *)v1434 + v1749);
            v1751 = (void *)((char *)v1435 + v1749);
            v1752 = v1751[1];
            *v1750 = *v1751;
            v1750[1] = v1752;
            v1753 = v1436[43];
            v1754 = (char *)v1434 + v1753;
            v1755 = (char *)v1435 + v1753;
            *(_OWORD *)v1754 = *(_OWORD *)v1755;
            *(void *)(v1754 + 13) = *(void *)(v1755 + 13);
            v1756 = v1436[44];
            v1757 = (void *)((char *)v1434 + v1756);
            v1758 = (void *)((char *)v1435 + v1756);
            v1759 = v1758[1];
            *v1757 = *v1758;
            v1757[1] = v1759;
            v1760 = v1436[45];
            v1761 = (void *)((char *)v1434 + v1760);
            v1762 = (void *)((char *)v1435 + v1760);
            v1763 = v1762[1];
            *v1761 = *v1762;
            v1761[1] = v1763;
            v1764 = v1436[46];
            v1765 = (void *)((char *)v1434 + v1764);
            v1766 = (void *)((char *)v1435 + v1764);
            v1767 = v1766[1];
            *v1765 = *v1766;
            v1765[1] = v1767;
            v1768 = v1436[47];
            v1769 = (void *)((char *)v1434 + v1768);
            v1770 = (void *)((char *)v1435 + v1768);
            v1771 = v1770[1];
            *v1769 = *v1770;
            v1769[1] = v1771;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1434, 0, 1, (uint64_t)v1436);
            v425 = v2713;
            v424 = v2721;
          }
          v1772 = v424[12];
          v1773 = (void *)(v2731 + v1772);
          v1774 = (void *)((char *)v425 + v1772);
          v1775 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1774, 1, (uint64_t)v1775))
          {
            v1776 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v1773, v1774, *(void *)(*(void *)(v1776 - 8) + 64));
          }
          else
          {
            v1777 = v1774[1];
            *v1773 = *v1774;
            v1773[1] = v1777;
            v1778 = v1774[3];
            v1773[2] = v1774[2];
            v1773[3] = v1778;
            v1779 = v1774[5];
            v1773[4] = v1774[4];
            v1773[5] = v1779;
            v1780 = v1774[7];
            v1773[6] = v1774[6];
            v1773[7] = v1780;
            v1781 = v1774[9];
            v1773[8] = v1774[8];
            v1773[9] = v1781;
            v1782 = v1774[11];
            v1773[10] = v1774[10];
            v1773[11] = v1782;
            *((unsigned char *)v1773 + 96) = *((unsigned char *)v1774 + 96);
            v1783 = v1774[14];
            v1773[13] = v1774[13];
            v1773[14] = v1783;
            v1784 = v1774[16];
            v1773[15] = v1774[15];
            v1773[16] = v1784;
            v1785 = v1775[14];
            v2767 = (char *)v1773 + v1785;
            v1786 = (char *)v1774 + v1785;
            v1787 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1786, 1, v1787))
            {
              v1788 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2767, v1786, *(void *)(*(void *)(v1788 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1787 - 8) + 16))(v2767, v1786, v1787);
              __swift_storeEnumTagSinglePayload((uint64_t)v2767, 0, 1, v1787);
            }
            v1844 = v1775[15];
            v1845 = (char *)v1773 + v1844;
            v1846 = (char *)v1774 + v1844;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1774 + v1844, 1, v1787))
            {
              v1847 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1845, v1846, *(void *)(*(void *)(v1847 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1787 - 8) + 16))(v1845, v1846, v1787);
              __swift_storeEnumTagSinglePayload((uint64_t)v1845, 0, 1, v1787);
            }
            v1911 = v1775[16];
            v1912 = (void *)((char *)v1773 + v1911);
            v1913 = (void *)((char *)v1774 + v1911);
            v1914 = v1913[1];
            *v1912 = *v1913;
            v1912[1] = v1914;
            v1915 = v1775[17];
            v1916 = (void *)((char *)v1773 + v1915);
            v1917 = (void *)((char *)v1774 + v1915);
            v1918 = v1917[1];
            *v1916 = *v1917;
            v1916[1] = v1918;
            v1919 = v1775[18];
            v1920 = (void *)((char *)v1773 + v1919);
            v1921 = (void *)((char *)v1774 + v1919);
            v2770 = v1921[1];
            *v1920 = *v1921;
            v1920[1] = v2770;
            v1922 = v1775[19];
            v1923 = (void *)((char *)v1773 + v1922);
            v1924 = (void *)((char *)v1774 + v1922);
            v2709 = (void *)v1924[1];
            *v1923 = *v1924;
            v1923[1] = v2709;
            v1925 = v1775[20];
            v1926 = (void *)((char *)v1773 + v1925);
            v1927 = (void *)((char *)v1774 + v1925);
            __dstf = (void *)v1927[1];
            *v1926 = *v1927;
            v1926[1] = __dstf;
            *(void *)((char *)v1773 + v1775[21]) = *(void *)((char *)v1774 + v1775[21]);
            *(void *)((char *)v1773 + v1775[22]) = *(void *)((char *)v1774 + v1775[22]);
            v1928 = v1775[23];
            v1929 = (char *)v1773 + v1928;
            v1930 = (char *)v1774 + v1928;
            *(void *)v1929 = *(void *)v1930;
            v1929[8] = v1930[8];
            v1931 = v1775[24];
            v1932 = (char *)v1773 + v1931;
            v1933 = (char *)v1774 + v1931;
            *(void *)v1932 = *(void *)v1933;
            v1932[8] = v1933[8];
            v1934 = v1775[25];
            v1935 = (void *)((char *)v1773 + v1934);
            v1936 = (void *)((char *)v1774 + v1934);
            v1937 = v1936[1];
            *v1935 = *v1936;
            v1935[1] = v1937;
            v1938 = v1775[26];
            v1939 = (void *)((char *)v1773 + v1938);
            v1940 = (void *)((char *)v1774 + v1938);
            v1941 = v1940[1];
            *v1939 = *v1940;
            v1939[1] = v1941;
            v1942 = v1775[27];
            v1943 = (void *)((char *)v1773 + v1942);
            v1944 = (void *)((char *)v1774 + v1942);
            v1945 = v1944[1];
            *v1943 = *v1944;
            v1943[1] = v1945;
            v1946 = v1775[28];
            v1947 = (void *)((char *)v1773 + v1946);
            v1948 = (void *)((char *)v1774 + v1946);
            v1949 = v1948[1];
            *v1947 = *v1948;
            v1947[1] = v1949;
            v1950 = v1775[29];
            v1951 = (char *)v1773 + v1950;
            v1952 = (char *)v1774 + v1950;
            *(void *)v1951 = *(void *)v1952;
            v1951[8] = v1952[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1773, 0, 1, (uint64_t)v1775);
            v425 = v2713;
            v424 = v2721;
          }
          v1953 = v424[13];
          v1954 = (void *)(v2731 + v1953);
          v1955 = (void *)((char *)v425 + v1953);
          v1956 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1955, 1, (uint64_t)v1956))
          {
            v1957 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v1954, v1955, *(void *)(*(void *)(v1957 - 8) + 64));
          }
          else
          {
            v1958 = v1955[1];
            *v1954 = *v1955;
            v1954[1] = v1958;
            v1959 = v1955[3];
            v1954[2] = v1955[2];
            v1954[3] = v1959;
            v1960 = v1955[5];
            v1954[4] = v1955[4];
            v1954[5] = v1960;
            v1961 = v1955[7];
            v1954[6] = v1955[6];
            v1954[7] = v1961;
            v1962 = v1955[9];
            v1954[8] = v1955[8];
            v1954[9] = v1962;
            v1963 = v1955[11];
            v1954[10] = v1955[10];
            v1954[11] = v1963;
            *((unsigned char *)v1954 + 96) = *((unsigned char *)v1955 + 96);
            v1964 = v1955[14];
            v1954[13] = v1955[13];
            v1954[14] = v1964;
            v1965 = v1955[16];
            v1954[15] = v1955[15];
            v1954[16] = v1965;
            v1966 = v1956[14];
            v2771 = (char *)v1954 + v1966;
            v1967 = (char *)v1955 + v1966;
            v1968 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1967, 1, v1968))
            {
              v1969 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2771, v1967, *(void *)(*(void *)(v1969 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1968 - 8) + 16))(v2771, v1967, v1968);
              __swift_storeEnumTagSinglePayload((uint64_t)v2771, 0, 1, v1968);
            }
            v2224 = v1956[15];
            v2225 = (void *)((char *)v1954 + v2224);
            v2226 = (void *)((char *)v1955 + v2224);
            v2227 = v2226[1];
            *v2225 = *v2226;
            v2225[1] = v2227;
            v2228 = v1956[16];
            v2229 = (void *)((char *)v1954 + v2228);
            v2230 = (void *)((char *)v1955 + v2228);
            v2231 = v2230[1];
            *v2229 = *v2230;
            v2229[1] = v2231;
            v2232 = v1956[17];
            v2233 = (void *)((char *)v1954 + v2232);
            v2234 = (void *)((char *)v1955 + v2232);
            v2778 = v2234[1];
            *v2233 = *v2234;
            v2233[1] = v2778;
            v2235 = v1956[18];
            v2236 = (void *)((char *)v1954 + v2235);
            v2237 = (void *)((char *)v1955 + v2235);
            v2238 = v2237[1];
            *v2236 = *v2237;
            v2236[1] = v2238;
            v2239 = v1956[19];
            v2240 = (void *)((char *)v1954 + v2239);
            v2241 = (void *)((char *)v1955 + v2239);
            v2242 = v2241[1];
            *v2240 = *v2241;
            v2240[1] = v2242;
            *(void *)((char *)v1954 + v1956[20]) = *(void *)((char *)v1955 + v1956[20]);
            v2243 = v1956[21];
            v2244 = (void *)((char *)v1954 + v2243);
            v2245 = (void *)((char *)v1955 + v2243);
            v2246 = v2245[1];
            *v2244 = *v2245;
            v2244[1] = v2246;
            v2247 = v1956[22];
            v2248 = (void *)((char *)v1954 + v2247);
            v2249 = (void *)((char *)v1955 + v2247);
            v2250 = v2249[1];
            *v2248 = *v2249;
            v2248[1] = v2250;
            v2251 = v1956[23];
            v2252 = (void *)((char *)v1954 + v2251);
            v2253 = (void *)((char *)v1955 + v2251);
            v2254 = v2253[1];
            *v2252 = *v2253;
            v2252[1] = v2254;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1954, 0, 1, (uint64_t)v1956);
            v424 = v2721;
          }
          __swift_storeEnumTagSinglePayload(v2731, 0, 1, (uint64_t)v424);
          v415 = v2754;
        }
        v2255 = v2736[18];
        v2256 = (void *)((char *)v415 + v2255);
        v18 = v2743;
        v2257 = (void *)((char *)v2743 + v2255);
        v2258 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2257, 1, (uint64_t)v2258))
        {
          v2259 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v2256, v2257, *(void *)(*(void *)(v2259 - 8) + 64));
          v2260 = v2754;
        }
        else
        {
          v2261 = v2257[1];
          *v2256 = *v2257;
          v2256[1] = v2261;
          v2262 = v2257[3];
          v2256[2] = v2257[2];
          v2256[3] = v2262;
          v2263 = v2257[5];
          v2256[4] = v2257[4];
          v2256[5] = v2263;
          v2264 = v2257[7];
          v2256[6] = v2257[6];
          v2256[7] = v2264;
          v2265 = v2257[9];
          v2256[8] = v2257[8];
          v2256[9] = v2265;
          v2266 = v2257[11];
          v2256[10] = v2257[10];
          v2256[11] = v2266;
          v2267 = v2258[10];
          v2779 = (char *)v2256 + v2267;
          v2268 = (char *)v2257 + v2267;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2268, 1, v2723))
          {
            v2269 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2779, v2268, *(void *)(*(void *)(v2269 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2779, v2268, v2723);
            __swift_storeEnumTagSinglePayload((uint64_t)v2779, 0, 1, v2723);
          }
          v2270 = v2258[11];
          v2271 = (char *)v2256 + v2270;
          v2272 = (char *)v2257 + v2270;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2257 + v2270, 1, v2723))
          {
            v2273 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2271, v2272, *(void *)(*(void *)(v2273 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2271, v2272, v2723);
            __swift_storeEnumTagSinglePayload((uint64_t)v2271, 0, 1, v2723);
          }
          v2274 = v2258[12];
          v2275 = (void *)((char *)v2256 + v2274);
          v2276 = (void *)((char *)v2257 + v2274);
          v2277 = v2276[1];
          *v2275 = *v2276;
          v2275[1] = v2277;
          v2278 = v2258[13];
          v2279 = (void *)((char *)v2256 + v2278);
          v2280 = (void *)((char *)v2257 + v2278);
          v2281 = v2280[1];
          *v2279 = *v2280;
          v2279[1] = v2281;
          v2282 = v2258[14];
          v2283 = (void *)((char *)v2256 + v2282);
          v2284 = (void *)((char *)v2257 + v2282);
          v2285 = v2284[1];
          *v2283 = *v2284;
          v2283[1] = v2285;
          v2286 = v2258[15];
          v2287 = (char *)v2256 + v2286;
          v2288 = (char *)v2257 + v2286;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2288, 1, v2723))
          {
            v2289 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2287, v2288, *(void *)(*(void *)(v2289 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2287, v2288, v2723);
            __swift_storeEnumTagSinglePayload((uint64_t)v2287, 0, 1, v2723);
          }
          v2290 = v2258;
          v2291 = v2258[16];
          v2292 = (void *)((char *)v2256 + v2291);
          v2293 = (void *)((char *)v2257 + v2291);
          v2294 = v2293[1];
          *v2292 = *v2293;
          v2292[1] = v2294;
          v2295 = v2258[17];
          v2296 = (void *)((char *)v2256 + v2295);
          v2297 = (void *)((char *)v2257 + v2295);
          v2298 = v2297[1];
          *v2296 = *v2297;
          v2296[1] = v2298;
          v2299 = v2290[18];
          v2300 = (void *)((char *)v2256 + v2299);
          v2301 = (void *)((char *)v2257 + v2299);
          v2302 = v2301[1];
          *v2300 = *v2301;
          v2300[1] = v2302;
          v2303 = v2290[19];
          v2304 = (void *)((char *)v2256 + v2303);
          v2305 = (void *)((char *)v2257 + v2303);
          v2306 = v2305[1];
          *v2304 = *v2305;
          v2304[1] = v2306;
          v2307 = v2290[20];
          v2308 = (void *)((char *)v2256 + v2307);
          v2309 = (void *)((char *)v2257 + v2307);
          v2310 = v2309[1];
          *v2308 = *v2309;
          v2308[1] = v2310;
          v2311 = v2290[21];
          v2312 = (void *)((char *)v2256 + v2311);
          v2313 = (void *)((char *)v2257 + v2311);
          v2314 = v2313[1];
          *v2312 = *v2313;
          v2312[1] = v2314;
          v2315 = v2290[22];
          v2316 = (void *)((char *)v2256 + v2315);
          v2317 = (void *)((char *)v2257 + v2315);
          v2318 = v2317[1];
          *v2316 = *v2317;
          v2316[1] = v2318;
          v2319 = v2290[23];
          v2320 = (void *)((char *)v2256 + v2319);
          v2321 = (void *)((char *)v2257 + v2319);
          v2322 = v2321[1];
          *v2320 = *v2321;
          v2320[1] = v2322;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2256, 0, 1, (uint64_t)v2290);
          v2260 = v2754;
          v18 = v2743;
        }
        v2323 = v2736;
        v2324 = v2736[19];
        v2325 = (void *)((char *)v2260 + v2324);
        v2326 = (void *)((char *)v18 + v2324);
        v2327 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2326, 1, (uint64_t)v2327))
        {
          v2328 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v2325, v2326, *(void *)(*(void *)(v2328 - 8) + 64));
          v2329 = v2754;
        }
        else
        {
          v2330 = v2326[1];
          *v2325 = *v2326;
          v2325[1] = v2330;
          v2331 = v2326[3];
          v2325[2] = v2326[2];
          v2325[3] = v2331;
          v2332 = v2326[5];
          v2325[4] = v2326[4];
          v2325[5] = v2332;
          v2333 = v2326[7];
          v2325[6] = v2326[6];
          v2325[7] = v2333;
          v2334 = v2326[9];
          v2325[8] = v2326[8];
          v2325[9] = v2334;
          v2335 = v2326[11];
          v2325[10] = v2326[10];
          v2325[11] = v2335;
          v2336 = v2327[11];
          v2780 = (char *)v2325 + v2336;
          v2337 = (char *)v2326 + v2336;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2337, 1, v2723))
          {
            v2338 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2780, v2337, *(void *)(*(void *)(v2338 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2780, v2337, v2723);
            __swift_storeEnumTagSinglePayload((uint64_t)v2780, 0, 1, v2723);
          }
          v2339 = v2327[12];
          v2340 = (void *)((char *)v2325 + v2339);
          v2341 = (void *)((char *)v2326 + v2339);
          v2342 = v2341[1];
          *v2340 = *v2341;
          v2340[1] = v2342;
          *(void *)((char *)v2325 + v2327[13]) = *(void *)((char *)v2326 + v2327[13]);
          v2343 = v2327[14];
          v2344 = (char *)v2325 + v2343;
          v2345 = (char *)v2326 + v2343;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v2323 = v2736;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2345, 1, v2723))
          {
            v2346 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2344, v2345, *(void *)(*(void *)(v2346 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2344, v2345, v2723);
            __swift_storeEnumTagSinglePayload((uint64_t)v2344, 0, 1, v2723);
          }
          *(void *)((char *)v2325 + v2327[15]) = *(void *)((char *)v2326 + v2327[15]);
          *(void *)((char *)v2325 + v2327[16]) = *(void *)((char *)v2326 + v2327[16]);
          v2347 = v2327[17];
          v2348 = (void *)((char *)v2325 + v2347);
          v2349 = (void *)((char *)v2326 + v2347);
          v2350 = v2349[1];
          *v2348 = *v2349;
          v2348[1] = v2350;
          *(void *)((char *)v2325 + v2327[18]) = *(void *)((char *)v2326 + v2327[18]);
          *(void *)((char *)v2325 + v2327[19]) = *(void *)((char *)v2326 + v2327[19]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2325, 0, 1, (uint64_t)v2327);
          v2329 = v2754;
          v18 = v2743;
        }
        v2351 = v2323[20];
        v2352 = (void *)((char *)v2329 + v2351);
        v2353 = (void *)((char *)v18 + v2351);
        v2354 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2353, 1, (uint64_t)v2354))
        {
          v2355 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v2352, v2353, *(void *)(*(void *)(v2355 - 8) + 64));
          v22 = v2754;
        }
        else
        {
          v2356 = v2353[1];
          *v2352 = *v2353;
          v2352[1] = v2356;
          v2357 = v2353[3];
          v2352[2] = v2353[2];
          v2352[3] = v2357;
          v2358 = v2353[5];
          v2352[4] = v2353[4];
          v2352[5] = v2358;
          v2359 = v2353[7];
          v2352[6] = v2353[6];
          v2352[7] = v2359;
          v2360 = v2354[8];
          v2361 = (char *)v2352 + v2360;
          v2362 = (char *)v2353 + v2360;
          v2363 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2362, 1, v2363))
          {
            v2364 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2361, v2362, *(void *)(*(void *)(v2364 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2363 - 8) + 16))(v2361, v2362, v2363);
            __swift_storeEnumTagSinglePayload((uint64_t)v2361, 0, 1, v2363);
          }
          v2365 = v2354[9];
          v2366 = (void *)((char *)v2352 + v2365);
          v2367 = (void *)((char *)v2353 + v2365);
          v2368 = v2367[1];
          *v2366 = *v2367;
          v2366[1] = v2368;
          v2369 = v2354[10];
          v2370 = (void *)((char *)v2352 + v2369);
          v2371 = (void *)((char *)v2353 + v2369);
          v2372 = v2371[1];
          *v2370 = *v2371;
          v2370[1] = v2372;
          v2373 = v2354[11];
          v2374 = (void *)((char *)v2352 + v2373);
          v2375 = (void *)((char *)v2353 + v2373);
          v2376 = v2375[1];
          *v2374 = *v2375;
          v2374[1] = v2376;
          v2377 = v2354[12];
          v2378 = (char *)v2352 + v2377;
          v2379 = (char *)v2353 + v2377;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v2323 = v2736;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2379, 1, v2723))
          {
            v2380 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2378, v2379, *(void *)(*(void *)(v2380 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2378, v2379, v2723);
            __swift_storeEnumTagSinglePayload((uint64_t)v2378, 0, 1, v2723);
          }
          v2381 = v2354[13];
          v2382 = (char *)v2352 + v2381;
          v2383 = (char *)v2353 + v2381;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2353 + v2381, 1, v2723))
          {
            v2384 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2382, v2383, *(void *)(*(void *)(v2384 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2723 - 8) + 16))(v2382, v2383, v2723);
            __swift_storeEnumTagSinglePayload((uint64_t)v2382, 0, 1, v2723);
          }
          v2385 = v2354[14];
          v2386 = (char *)v2352 + v2385;
          v2387 = (char *)v2353 + v2385;
          *(void *)v2386 = *(void *)v2387;
          v2386[8] = v2387[8];
          v2388 = v2354[15];
          v2389 = (void *)((char *)v2352 + v2388);
          v2390 = (void *)((char *)v2353 + v2388);
          v2391 = v2390[1];
          *v2389 = *v2390;
          v2389[1] = v2391;
          v2392 = v2354[16];
          v2393 = (void *)((char *)v2352 + v2392);
          v2394 = (void *)((char *)v2353 + v2392);
          v2395 = v2394[1];
          *v2393 = *v2394;
          v2393[1] = v2395;
          v2396 = v2354[17];
          v2397 = (void *)((char *)v2352 + v2396);
          v2398 = (void *)((char *)v2353 + v2396);
          v2399 = v2398[1];
          *v2397 = *v2398;
          v2397[1] = v2399;
          v2400 = v2354[18];
          v2401 = (void *)((char *)v2352 + v2400);
          v2402 = (void *)((char *)v2353 + v2400);
          v2403 = v2402[1];
          *v2401 = *v2402;
          v2401[1] = v2403;
          v2404 = v2354[19];
          v2405 = (void *)((char *)v2352 + v2404);
          v2406 = (void *)((char *)v2353 + v2404);
          v2407 = v2406[1];
          *v2405 = *v2406;
          v2405[1] = v2407;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2352, 0, 1, (uint64_t)v2354);
          v22 = v2754;
          v18 = v2743;
        }
        v2408 = v2323[21];
        v2409 = (void *)((char *)v22 + v2408);
        v2410 = (void *)((char *)v18 + v2408);
        v2411 = *(void *)((char *)v18 + v2408 + 8);
        if (v2411)
        {
          *v2409 = *v2410;
          v2409[1] = v2411;
          v2412 = v2410[3];
          v2409[2] = v2410[2];
          v2409[3] = v2412;
          v2413 = v2410[5];
          v2409[4] = v2410[4];
          v2409[5] = v2413;
          v2414 = v2410[7];
          v2409[6] = v2410[6];
          v2409[7] = v2414;
          v2415 = v2410[9];
          v2409[8] = v2410[8];
          v2409[9] = v2415;
          v2722 = v2410[11];
          v2409[10] = v2410[10];
          v2409[11] = v2722;
          v2733 = v2410[13];
          v2409[12] = v2410[12];
          v2409[13] = v2733;
          v2781 = v2410[15];
          v2409[14] = v2410[14];
          v2409[15] = v2781;
          v2416 = v2410[17];
          v2409[16] = v2410[16];
          v2409[17] = v2416;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v22 = v2754;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v18 = v2743;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_520;
        }
        memcpy(v2409, v2410, 0x90uLL);
        goto LABEL_521;
      case 4u:
        v76 = v16[1];
        *v2754 = *v16;
        v22[1] = v76;
        v77 = v16[3];
        v22[2] = v16[2];
        v22[3] = v77;
        v78 = v22;
        v79 = v16[5];
        v78[4] = v16[4];
        v78[5] = v79;
        v80 = v16[7];
        v78[6] = v16[6];
        v78[7] = v80;
        v81 = type metadata accessor for NoteDocument(0);
        v82 = *(int *)(v81 + 32);
        v83 = (char *)v78 + v82;
        v84 = v18;
        v85 = (char *)v18 + v82;
        v86 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86))
        {
          v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v83, v85, *(void *)(*(void *)(v87 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(v83, v85, v86);
          __swift_storeEnumTagSinglePayload((uint64_t)v83, 0, 1, v86);
        }
        v427 = a3;
        v150 = v2751;
        v22 = v2754;
        v18 = v84;
        v428 = *(int *)(v81 + 36);
        v429 = (char *)v2754 + v428;
        v430 = (char *)v84 + v428;
        if (__swift_getEnumTagSinglePayload((uint64_t)v84 + v428, 1, v86))
        {
          v431 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                       - 8)
                           + 64);
          v432 = v429;
          v433 = v430;
          goto LABEL_87;
        }
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(v429, v430, v86);
        v618 = (uint64_t)v429;
        v619 = v86;
        goto LABEL_148;
      case 5u:
        v88 = v16[1];
        *v2754 = *v16;
        v22[1] = v88;
        v89 = v16[3];
        v22[2] = v16[2];
        v22[3] = v89;
        v90 = v22;
        v91 = v16[5];
        v90[4] = v16[4];
        v90[5] = v91;
        v92 = (int *)type metadata accessor for Reminder(0);
        v93 = v92[7];
        v94 = (char *)v90 + v93;
        v95 = v16;
        v96 = (char *)v16 + v93;
        v97 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v96, 1, v97))
        {
          v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v94, v96, *(void *)(*(void *)(v98 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v94, v96, v97);
          __swift_storeEnumTagSinglePayload((uint64_t)v94, 0, 1, v97);
        }
        v22 = v2754;
        v434 = v92[8];
        v435 = (char *)v2754 + v434;
        v436 = (char *)v16 + v434;
        if (__swift_getEnumTagSinglePayload((uint64_t)v16 + v434, 1, v97))
        {
          v437 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v435, v436, *(void *)(*(void *)(v437 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v435, v436, v97);
          __swift_storeEnumTagSinglePayload((uint64_t)v435, 0, 1, v97);
        }
        v438 = v16;
        v20 = v2755;
        *((unsigned char *)v2754 + v92[9]) = *((unsigned char *)v16 + v92[9]);
        v620 = v92[10];
        v621 = (void *)((char *)v2754 + v620);
        v622 = (void *)((char *)v16 + v620);
        v623 = v622[1];
        *v621 = *v622;
        v621[1] = v623;
        v624 = v92[11];
        v625 = (void *)((char *)v2754 + v624);
        v626 = (void *)((char *)v16 + v624);
        v627 = v626[1];
        *v625 = *v626;
        v625[1] = v627;
        v447 = v92[12];
        goto LABEL_142;
      case 6u:
        v99 = v16[1];
        *v2754 = *v16;
        v22[1] = v99;
        v100 = v16;
        v101 = v22;
        v102 = v16[3];
        v101[2] = v16[2];
        v101[3] = v102;
        v103 = v16[5];
        v101[4] = v16[4];
        v101[5] = v103;
        v104 = v16[7];
        v101[6] = v16[6];
        v101[7] = v104;
        v105 = (int *)type metadata accessor for PhoneHistory(0);
        v106 = v105[10];
        v107 = (char *)v101 + v106;
        v95 = v100;
        v108 = (char *)v100 + v106;
        v109 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v108, 1, v109))
        {
          v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v107, v108, *(void *)(*(void *)(v110 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 16))(v107, v108, v109);
          __swift_storeEnumTagSinglePayload((uint64_t)v107, 0, 1, v109);
        }
        v22 = v2754;
        v20 = v2755;
        v438 = v95;
        v439 = v105[11];
        v440 = (void *)((char *)v2754 + v439);
        v441 = (void *)((char *)v95 + v439);
        v442 = v441[1];
        *v440 = *v441;
        v440[1] = v442;
        v443 = v105[12];
        v444 = (void *)((char *)v2754 + v443);
        v445 = (void *)((char *)v95 + v443);
        v446 = v445[1];
        *v444 = *v445;
        v444[1] = v446;
        v447 = v105[13];
LABEL_142:
        v628 = (char *)v22 + v447;
        v629 = (char *)v438 + v447;
        v630 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v629, 1, v630))
        {
          v631 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v628, v629, *(void *)(*(void *)(v631 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v630 - 8) + 16))(v628, v629, v630);
          __swift_storeEnumTagSinglePayload((uint64_t)v628, 0, 1, v630);
        }
        v21 = a3;
        v150 = v2751;
        v18 = v95;
        goto LABEL_522;
      case 7u:
        v111 = v16[1];
        *v2754 = *v16;
        v22[1] = v111;
        v112 = v16[3];
        v22[2] = v16[2];
        v22[3] = v112;
        v113 = v22;
        v114 = v16[5];
        v113[4] = v16[4];
        v113[5] = v114;
        v115 = type metadata accessor for VoicemailTranscript(0);
        v116 = *(int *)(v115 + 28);
        v117 = (char *)v113 + v116;
        v118 = v16;
        v119 = (char *)v16 + v116;
        v120 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v119, 1, v120))
        {
          v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v117, v119, *(void *)(*(void *)(v121 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v120 - 8) + 16))(v117, v119, v120);
          __swift_storeEnumTagSinglePayload((uint64_t)v117, 0, 1, v120);
        }
        v427 = a3;
        v22 = v2754;
        v20 = v2755;
        v150 = v2751;
        v18 = v118;
        v448 = *(int *)(v115 + 32);
        v449 = (char *)v2754 + v448;
        v450 = (uint64_t)v118 + v448;
        v451 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload(v450, 1, v451))
        {
          v452 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                       - 8)
                           + 64);
          v453 = v449;
          v454 = (const void *)v450;
          goto LABEL_163;
        }
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v451 - 8) + 16))(v449, v450, v451);
        v632 = (uint64_t)v449;
        v633 = v451;
        goto LABEL_181;
      case 8u:
        v122 = v16[1];
        *v2754 = *v16;
        v22[1] = v122;
        v123 = v16[3];
        v22[2] = v16[2];
        v22[3] = v123;
        v124 = v16[5];
        v22[4] = v16[4];
        v22[5] = v124;
        v125 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
        v126 = (char *)v22 + v125;
        v127 = (char *)v16 + v125;
        v128 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v127, 1, v128))
        {
          v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v126, v127, *(void *)(*(void *)(v129 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 16))(v126, v127, v128);
          __swift_storeEnumTagSinglePayload((uint64_t)v126, 0, 1, v128);
        }
        v21 = a3;
        v150 = v17;
        v18 = v16;
        v20 = v2755;
        goto LABEL_522;
      case 9u:
        v130 = v16[1];
        *v2754 = *v16;
        v22[1] = v130;
        v131 = v16[3];
        v22[2] = v16[2];
        v22[3] = v131;
        v132 = (int *)type metadata accessor for VoiceMemo(0);
        v133 = v132[6];
        v134 = (char *)v22 + v133;
        v135 = v16;
        v136 = (char *)v16 + v133;
        v137 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v136, 1, v137))
        {
          v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v134, v136, *(void *)(*(void *)(v138 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v137 - 8) + 16))(v134, v136, v137);
          __swift_storeEnumTagSinglePayload((uint64_t)v134, 0, 1, v137);
        }
        v427 = a3;
        v150 = v2751;
        v18 = v135;
        v455 = v132[7];
        v456 = (char *)v22 + v455;
        v457 = (char *)v135 + v455;
        *(void *)v456 = *(void *)v457;
        v456[8] = v457[8];
        v458 = v132[8];
        v459 = (char *)v22 + v458;
        v460 = (uint64_t)v135 + v458;
        v461 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload(v460, 1, v461))
        {
          v431 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                       - 8)
                           + 64);
          v432 = v459;
          v433 = (const void *)v460;
LABEL_87:
          memcpy(v432, v433, v431);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v461 - 8) + 16))(v459, v460, v461);
          v618 = (uint64_t)v459;
          v619 = v461;
LABEL_148:
          __swift_storeEnumTagSinglePayload(v618, 0, 1, v619);
        }
        v20 = v2755;
        goto LABEL_182;
      case 0xAu:
        v139 = v16[1];
        *v2754 = *v16;
        v22[1] = v139;
        v140 = v16[3];
        v22[2] = v16[2];
        v22[3] = v140;
        v141 = (int *)type metadata accessor for Safari(0);
        v142 = v141[6];
        v143 = (char *)v22 + v142;
        v144 = (char *)v16 + v142;
        v145 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v144, 1, v145))
        {
          v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v143, v144, *(void *)(*(void *)(v146 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v145 - 8) + 16))(v143, v144, v145);
          __swift_storeEnumTagSinglePayload((uint64_t)v143, 0, 1, v145);
        }
        v18 = v16;
        v462 = v141[7];
        v463 = (void *)((char *)v22 + v462);
        v464 = (void *)((char *)v16 + v462);
        v465 = v464[1];
        *v463 = *v464;
        v463[1] = v465;
        v466 = v141[8];
        v467 = (void *)((char *)v22 + v466);
        v468 = (void *)((char *)v16 + v466);
        v469 = v468[1];
        *v467 = *v468;
        v467[1] = v469;
        v470 = v141[9];
        v471 = (char *)v22 + v470;
        v472 = (char *)v16 + v470;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v472, 1, v145))
        {
          v473 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v471, v472, *(void *)(*(void *)(v473 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v145 - 8) + 16))(v471, v472, v145);
          __swift_storeEnumTagSinglePayload((uint64_t)v471, 0, 1, v145);
        }
        v21 = a3;
        v150 = v17;
        goto LABEL_152;
      case 0xBu:
        v147 = v16[1];
        *v13 = *v16;
        v13[1] = v147;
        v148 = (void *)v16[2];
        v13[2] = v148;
        swift_bridgeObjectRetain();
        v149 = v148;
        v150 = v17;
        goto LABEL_159;
      case 0xCu:
        v151 = v16[1];
        *v2754 = *v16;
        v22[1] = v151;
        v152 = v16[3];
        v22[2] = v16[2];
        v22[3] = v152;
        v153 = v22;
        v154 = v16[5];
        v153[4] = v16[4];
        v153[5] = v154;
        v155 = (int *)type metadata accessor for WalletTransaction(0);
        v156 = v155[7];
        v157 = (char *)v153 + v156;
        v158 = (char *)v16 + v156;
        v159 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v158, 1, v159))
        {
          v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v157, v158, *(void *)(*(void *)(v160 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v159 - 8) + 16))(v157, v158, v159);
          __swift_storeEnumTagSinglePayload((uint64_t)v157, 0, 1, v159);
        }
        v22 = v2754;
        v20 = v2755;
        v18 = v16;
        v474 = v155[8];
        v475 = (void *)((char *)v2754 + v474);
        v476 = (void *)((char *)v16 + v474);
        v477 = v476[1];
        *v475 = *v476;
        v475[1] = v477;
        v478 = v155[9];
        v479 = (void *)((char *)v2754 + v478);
        v480 = (void *)((char *)v16 + v478);
        v481 = v480[1];
        *v479 = *v480;
        v479[1] = v481;
        v482 = v155[10];
        v483 = (void *)((char *)v2754 + v482);
        v484 = (void *)((char *)v16 + v482);
        v485 = v484[1];
        *v483 = *v484;
        v483[1] = v485;
        v486 = v155[11];
        v487 = (char *)v2754 + v486;
        v488 = (char *)v16 + v486;
        *(_OWORD *)v487 = *(_OWORD *)v488;
        *(void *)(v487 + 13) = *(void *)(v488 + 13);
        v489 = v155[12];
        v490 = (void *)((char *)v2754 + v489);
        v491 = (void *)((char *)v16 + v489);
        v492 = v491[1];
        *v490 = *v491;
        v490[1] = v492;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21 = a3;
        v150 = v2751;
        goto LABEL_522;
      case 0xDu:
        v161 = v16[1];
        *v2754 = *v16;
        v22[1] = v161;
        v162 = v16[3];
        v22[2] = v16[2];
        v22[3] = v162;
        v163 = v22;
        v164 = v16[5];
        v163[4] = v16[4];
        v163[5] = v164;
        v165 = (int *)type metadata accessor for WalletPass(0);
        v166 = v165[7];
        v167 = (char *)v163 + v166;
        v168 = (char *)v16 + v166;
        v169 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v168, 1, v169))
        {
          v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v167, v168, *(void *)(*(void *)(v170 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v169 - 8) + 16))(v167, v168, v169);
          __swift_storeEnumTagSinglePayload((uint64_t)v167, 0, 1, v169);
        }
        v21 = a3;
        v22 = v2754;
        v20 = v2755;
        v150 = v2751;
        v18 = v16;
        v493 = v165[8];
        v494 = (void *)((char *)v2754 + v493);
        v495 = (void *)((char *)v16 + v493);
        v496 = v495[1];
        *v494 = *v495;
        v494[1] = v496;
        *(void *)((char *)v2754 + v165[9]) = *(void *)((char *)v16 + v165[9]);
        swift_bridgeObjectRetain();
        goto LABEL_128;
      case 0xEu:
        v171 = v16[1];
        *v13 = *v16;
        v13[1] = v171;
        v172 = v16[3];
        v13[2] = v16[2];
        v13[3] = v172;
        v173 = v16[5];
        v13[4] = v16[4];
        v13[5] = v173;
        v174 = v16[7];
        v13[6] = v16[6];
        v13[7] = v174;
        v175 = v16[9];
        v13[8] = v16[8];
        v13[9] = v175;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21 = a3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_56;
      case 0xFu:
        v176 = v16[1];
        *v2754 = *v16;
        v22[1] = v176;
        v177 = v16;
        v178 = v22;
        v179 = v16[3];
        v178[2] = v16[2];
        v178[3] = v179;
        v180 = v16[5];
        v178[4] = v16[4];
        v178[5] = v180;
        v181 = v16[7];
        v178[6] = v16[6];
        v178[7] = v181;
        v182 = v16[9];
        v178[8] = v16[8];
        v178[9] = v182;
        v183 = v16[11];
        v178[10] = v16[10];
        v178[11] = v183;
        *((unsigned char *)v178 + 96) = *((unsigned char *)v16 + 96);
        v184 = v16[14];
        v178[13] = v16[13];
        v178[14] = v184;
        v185 = (int *)type metadata accessor for FlightReservation(0);
        v186 = v185[13];
        v2724 = (char *)v178 + v186;
        v187 = (char *)v16 + v186;
        v188 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v187, 1, v188))
        {
          v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v2724, v187, *(void *)(*(void *)(v189 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v188 - 8) + 16))(v2724, v187, v188);
          __swift_storeEnumTagSinglePayload((uint64_t)v2724, 0, 1, v188);
        }
        v497 = v185[14];
        v498 = (char *)v2754 + v497;
        v499 = (char *)v177 + v497;
        if (__swift_getEnumTagSinglePayload((uint64_t)v177 + v497, 1, v188))
        {
          v500 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v498, v499, *(void *)(*(void *)(v500 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v188 - 8) + 16))(v498, v499, v188);
          __swift_storeEnumTagSinglePayload((uint64_t)v498, 0, 1, v188);
        }
        v634 = v185[15];
        v635 = (void *)((char *)v2754 + v634);
        v636 = v177;
        v637 = (void *)((char *)v177 + v634);
        v638 = v637[1];
        *v635 = *v637;
        v635[1] = v638;
        v639 = v185[16];
        v640 = (void *)((char *)v2754 + v639);
        v641 = (void *)((char *)v177 + v639);
        v642 = v641[1];
        *v640 = *v641;
        v640[1] = v642;
        v643 = v185[17];
        v644 = (void *)((char *)v2754 + v643);
        v645 = (void *)((char *)v177 + v643);
        v646 = v645[1];
        *v644 = *v645;
        v644[1] = v646;
        v647 = v185[18];
        v648 = (char *)v2754 + v647;
        v2738 = (uint64_t)v636 + v647;
        v649 = type metadata accessor for DateComponents();
        v650 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v649 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v650(v648, v2738, v649);
        v650((char *)v2754 + v185[19], (uint64_t)v636 + v185[19], v649);
        v651 = v185[20];
        v652 = (void *)((char *)v2754 + v651);
        v653 = (void *)((char *)v636 + v651);
        v654 = v653[1];
        *v652 = *v653;
        v652[1] = v654;
        v655 = v185[21];
        v656 = (void *)((char *)v2754 + v655);
        v657 = (void *)((char *)v636 + v655);
        v2739 = v657[1];
        *v656 = *v657;
        v656[1] = v2739;
        v658 = v185[22];
        v659 = (void *)((char *)v2754 + v658);
        v660 = (void *)((char *)v636 + v658);
        v2732 = v660[1];
        *v659 = *v660;
        v659[1] = v2732;
        v661 = v185[23];
        v662 = (void *)((char *)v2754 + v661);
        v663 = (void *)((char *)v636 + v661);
        v2726 = v663[1];
        *v662 = *v663;
        v662[1] = v2726;
        v664 = v185[24];
        v665 = (void *)((char *)v2754 + v664);
        v666 = (void *)((char *)v636 + v664);
        v2719 = v666[1];
        *v665 = *v666;
        v665[1] = v2719;
        v667 = v185[25];
        v668 = (void *)((char *)v2754 + v667);
        v669 = (void *)((char *)v636 + v667);
        v2714 = v669[1];
        *v668 = *v669;
        v668[1] = v2714;
        v670 = v185[26];
        v671 = (void *)((char *)v2754 + v670);
        v672 = (void *)((char *)v636 + v670);
        v2691 = (void *)v672[1];
        *v671 = *v672;
        v671[1] = v2691;
        v673 = v185[27];
        v674 = (void *)((char *)v2754 + v673);
        v675 = (void *)((char *)v636 + v673);
        v2681 = (void *)v675[1];
        *v674 = *v675;
        v674[1] = v2681;
        v676 = v185[28];
        v677 = (void *)((char *)v2754 + v676);
        v678 = (void *)((char *)v636 + v676);
        v2668 = (void *)v678[1];
        *v677 = *v678;
        v677[1] = v2668;
        v679 = v185[29];
        v680 = (void *)((char *)v2754 + v679);
        v681 = (void *)((char *)v636 + v679);
        __dstb = (void *)v681[1];
        *v680 = *v681;
        v680[1] = __dstb;
        v682 = v185[30];
        v683 = (void *)((char *)v2754 + v682);
        v684 = (void *)((char *)v636 + v682);
        v2655 = v684[1];
        *v683 = *v684;
        v683[1] = v2655;
        v685 = v185[31];
        v686 = (void *)((char *)v2754 + v685);
        v687 = (void *)((char *)v636 + v685);
        v2651 = v687[1];
        *v686 = *v687;
        v686[1] = v2651;
        v688 = v185[32];
        v689 = (void *)((char *)v2754 + v688);
        v690 = (void *)((char *)v636 + v688);
        v691 = v690[1];
        *v689 = *v690;
        v689[1] = v691;
        *(void *)((char *)v2754 + v185[33]) = *(void *)((char *)v636 + v185[33]);
        *(void *)((char *)v2754 + v185[34]) = *(void *)((char *)v636 + v185[34]);
        v692 = v185[35];
        v693 = (void *)((char *)v2754 + v692);
        v694 = (void *)((char *)v636 + v692);
        v695 = v694[1];
        *v693 = *v694;
        v693[1] = v695;
        v696 = v185[36];
        v697 = (void *)((char *)v2754 + v696);
        v698 = (void *)((char *)v636 + v696);
        v699 = v698[1];
        *v697 = *v698;
        v697[1] = v699;
        v700 = v185[37];
        v701 = (void *)((char *)v2754 + v700);
        v702 = (void *)((char *)v636 + v700);
        v703 = v702[1];
        *v701 = *v702;
        v701[1] = v703;
        v704 = v185[38];
        v705 = (char *)v2754 + v704;
        v2750 = v636;
        v706 = (char *)v636 + v704;
        v707 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v706, 1, v707))
        {
          v708 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v705, v706, *(void *)(*(void *)(v708 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v707 - 8) + 16))(v705, v706, v707);
          __swift_storeEnumTagSinglePayload((uint64_t)v705, 0, 1, v707);
        }
        v22 = v2754;
        v20 = v2755;
        v773 = v185[39];
        v774 = (void *)((char *)v2754 + v773);
        v775 = (void *)((char *)v2750 + v773);
        v776 = v775[1];
        *v774 = *v775;
        v774[1] = v776;
        v777 = v185[40];
        v778 = (void *)((char *)v2754 + v777);
        v779 = (void *)((char *)v2750 + v777);
        v780 = v779[1];
        *v778 = *v779;
        v778[1] = v780;
        v781 = v185[41];
        v782 = (char *)v2754 + v781;
        v783 = (uint64_t)v2750 + v781;
        v782[8] = *(unsigned char *)(v783 + 8);
        *(void *)v782 = *(void *)v783;
        v784 = v185[42];
        v785 = (void *)((char *)v2754 + v784);
        v786 = (void *)((char *)v2750 + v784);
        v787 = v786[1];
        *v785 = *v786;
        v785[1] = v787;
        v788 = v185[43];
        v789 = (char *)v2754 + v788;
        v790 = (uint64_t)v2750 + v788;
        *(_OWORD *)v789 = *(_OWORD *)v790;
        *(void *)(v789 + 13) = *(void *)(v790 + 13);
        v791 = v185[44];
        v792 = (void *)((char *)v2754 + v791);
        v793 = (void *)((char *)v2750 + v791);
        v794 = v793[1];
        *v792 = *v793;
        v792[1] = v794;
        v795 = v185[45];
        v796 = (void *)((char *)v2754 + v795);
        v797 = (void *)((char *)v2750 + v795);
        v798 = v797[1];
        *v796 = *v797;
        v796[1] = v798;
        v799 = v185[46];
        v800 = (void *)((char *)v2754 + v799);
        v801 = (void *)((char *)v2750 + v799);
        v802 = v801[1];
        *v800 = *v801;
        v800[1] = v802;
        v803 = v185[47];
        v804 = (void *)((char *)v2754 + v803);
        v805 = (void *)((char *)v2750 + v803);
        v806 = v805[1];
        *v804 = *v805;
        v804[1] = v806;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18 = v2750;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v807 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
        *(void *)((char *)v2754 + *(int *)(v807 + 48)) = *(void *)((char *)v2750 + *(int *)(v807 + 48));
        swift_bridgeObjectRetain();
        v21 = a3;
        v150 = v2751;
        goto LABEL_522;
      case 0x10u:
        v190 = v16[1];
        *v2754 = *v16;
        v22[1] = v190;
        v191 = v16;
        v192 = v22;
        v193 = v16[3];
        v192[2] = v16[2];
        v192[3] = v193;
        v194 = v16[5];
        v192[4] = v18[4];
        v192[5] = v194;
        v195 = v18[6];
        v196 = v18[7];
        v192[6] = v195;
        v192[7] = v196;
        v197 = v191[9];
        v192[8] = v191[8];
        v192[9] = v197;
        v198 = v191[11];
        v192[10] = v191[10];
        v192[11] = v198;
        *((unsigned char *)v192 + 96) = *((unsigned char *)v191 + 96);
        v199 = v191[14];
        v192[13] = v191[13];
        v192[14] = v199;
        v200 = v191[16];
        v192[15] = v191[15];
        v192[16] = v200;
        v201 = (int *)type metadata accessor for HotelReservation(0);
        v202 = v201[14];
        v2725 = (char *)v192 + v202;
        v2744 = v191;
        v203 = (char *)v191 + v202;
        v204 = type metadata accessor for DateComponents();
        swift_bridgeObjectRetain();
        v205 = v204;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v203, 1, v204))
        {
          v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v2725, v203, *(void *)(*(void *)(v206 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v204 - 8) + 16))(v2725, v203, v204);
          __swift_storeEnumTagSinglePayload((uint64_t)v2725, 0, 1, v204);
        }
        v20 = v2755;
        v501 = v201[15];
        v502 = (char *)v2754 + v501;
        v503 = (char *)v2744 + v501;
        if (__swift_getEnumTagSinglePayload((uint64_t)v2744 + v501, 1, v205))
        {
          v504 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v502, v503, *(void *)(*(void *)(v504 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v205 - 8) + 16))(v502, v503, v205);
          __swift_storeEnumTagSinglePayload((uint64_t)v502, 0, 1, v205);
        }
        v709 = v201[16];
        v710 = (void *)((char *)v2754 + v709);
        v711 = (void *)((char *)v2744 + v709);
        v712 = v711[1];
        *v710 = *v711;
        v710[1] = v712;
        v713 = v201[17];
        v714 = (void *)((char *)v2754 + v713);
        v715 = (void *)((char *)v2744 + v713);
        v716 = v715[1];
        *v714 = *v715;
        v714[1] = v716;
        v717 = v201[18];
        v718 = (void *)((char *)v2754 + v717);
        v719 = (void *)((char *)v2744 + v717);
        v2756 = v719[1];
        *v718 = *v719;
        v718[1] = v2756;
        v720 = v201[19];
        v721 = (void *)((char *)v2754 + v720);
        v722 = (void *)((char *)v2744 + v720);
        v2740 = v722[1];
        *v721 = *v722;
        v721[1] = v2740;
        v723 = v201[20];
        v724 = (void *)((char *)v2754 + v723);
        v725 = (void *)((char *)v2744 + v723);
        v726 = v725[1];
        *v724 = *v725;
        v724[1] = v726;
        *(void *)((char *)v2754 + v201[21]) = *(void *)((char *)v2744 + v201[21]);
        *(void *)((char *)v2754 + v201[22]) = *(void *)((char *)v2744 + v201[22]);
        v727 = v201[23];
        v728 = (char *)v2754 + v727;
        v729 = (uint64_t)v2744 + v727;
        *(void *)v728 = *(void *)v729;
        v728[8] = *(unsigned char *)(v729 + 8);
        v730 = v201[24];
        v731 = (char *)v2754 + v730;
        v732 = (uint64_t)v2744 + v730;
        *(void *)v731 = *(void *)v732;
        v731[8] = *(unsigned char *)(v732 + 8);
        v733 = v201[25];
        v734 = (void *)((char *)v2754 + v733);
        v735 = (void *)((char *)v2744 + v733);
        v736 = v735[1];
        *v734 = *v735;
        v734[1] = v736;
        v737 = v201[26];
        v738 = (void *)((char *)v2754 + v737);
        v739 = (void *)((char *)v2744 + v737);
        v740 = v739[1];
        *v738 = *v739;
        v738[1] = v740;
        v741 = v201[27];
        v742 = (void *)((char *)v2754 + v741);
        v743 = (void *)((char *)v2744 + v741);
        v744 = v743[1];
        *v742 = *v743;
        v742[1] = v744;
        v745 = v201[28];
        v746 = (void *)((char *)v2754 + v745);
        v747 = (void *)((char *)v2744 + v745);
        v748 = v747[1];
        *v746 = *v747;
        v746[1] = v748;
        v749 = v201[29];
        v750 = (char *)v2754 + v749;
        v751 = (uint64_t)v2744 + v749;
        *(void *)v750 = *(void *)v751;
        v750[8] = *(unsigned char *)(v751 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v22 = v2754;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18 = v2744;
        swift_bridgeObjectRetain();
        goto LABEL_520;
      case 0x11u:
        v207 = v16[1];
        *v2754 = *v16;
        v22[1] = v207;
        v208 = v22;
        v209 = v16[3];
        v208[2] = v16[2];
        v208[3] = v209;
        v210 = v16[5];
        v208[4] = v16[4];
        v208[5] = v210;
        v211 = v16[7];
        v208[6] = v16[6];
        v208[7] = v211;
        v212 = v16[9];
        v208[8] = v16[8];
        v208[9] = v212;
        v213 = v16[11];
        v208[10] = v16[10];
        v208[11] = v213;
        *((unsigned char *)v208 + 96) = *((unsigned char *)v16 + 96);
        v214 = v16[14];
        v208[13] = v16[13];
        v208[14] = v214;
        v215 = v16[16];
        v208[15] = v16[15];
        v208[16] = v215;
        v216 = (int *)type metadata accessor for RestaurantReservation(0);
        v217 = v216[14];
        v2716 = (char *)v208 + v217;
        v218 = v16;
        v219 = (char *)v16 + v217;
        v220 = type metadata accessor for DateComponents();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v219, 1, v220))
        {
          v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v2716, v219, *(void *)(*(void *)(v221 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v220 - 8) + 16))(v2716, v219, v220);
          __swift_storeEnumTagSinglePayload((uint64_t)v2716, 0, 1, v220);
        }
        v20 = v2755;
        v505 = v216[15];
        v506 = (void *)((char *)v2754 + v505);
        v507 = (void *)((char *)v218 + v505);
        v508 = v507[1];
        *v506 = *v507;
        v506[1] = v508;
        v509 = v216[16];
        v510 = (void *)((char *)v2754 + v509);
        v511 = (void *)((char *)v218 + v509);
        v512 = v511[1];
        *v510 = *v511;
        v510[1] = v512;
        v513 = v216[17];
        v514 = (void *)((char *)v2754 + v513);
        v515 = (void *)((char *)v218 + v513);
        v516 = v515[1];
        *v514 = *v515;
        v514[1] = v516;
        v517 = v216[18];
        v518 = (void *)((char *)v2754 + v517);
        v519 = (void *)((char *)v218 + v517);
        v520 = v519[1];
        *v518 = *v519;
        v518[1] = v520;
        v521 = v216[19];
        v522 = (void *)((char *)v2754 + v521);
        v523 = (void *)((char *)v218 + v521);
        v524 = v523[1];
        *v522 = *v523;
        v522[1] = v524;
        *(void *)((char *)v2754 + v216[20]) = *(void *)((char *)v218 + v216[20]);
        v525 = v216[21];
        v526 = (void *)((char *)v2754 + v525);
        v527 = (void *)((char *)v218 + v525);
        v528 = v527[1];
        *v526 = *v527;
        v526[1] = v528;
        v529 = v216[22];
        v530 = (void *)((char *)v2754 + v529);
        v531 = (void *)((char *)v218 + v529);
        v532 = v531[1];
        *v530 = *v531;
        v530[1] = v532;
        v533 = v216[23];
        v534 = (void *)((char *)v2754 + v533);
        v535 = (void *)((char *)v218 + v533);
        v536 = v535[1];
        *v534 = *v535;
        v534[1] = v536;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18 = v218;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v22 = v2754;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_520:
        swift_bridgeObjectRetain();
LABEL_521:
        v21 = a3;
        v150 = v2751;
        goto LABEL_522;
      case 0x12u:
        v222 = v16[1];
        *v13 = *v16;
        v13[1] = v222;
        v223 = v16[3];
        v13[2] = v16[2];
        v13[3] = v223;
        v224 = v16[5];
        v13[4] = v16[4];
        v13[5] = v224;
        v225 = v16[7];
        v13[6] = v16[6];
        v13[7] = v225;
        v226 = v16[9];
        v13[8] = v16[8];
        v13[9] = v226;
        v227 = v16[11];
        v13[10] = v16[10];
        v13[11] = v227;
        v228 = v16[13];
        v13[12] = v16[12];
        v13[13] = v228;
        v229 = v16[15];
        v13[14] = v16[14];
        v13[15] = v229;
        *((unsigned char *)v13 + 128) = *((unsigned char *)v16 + 128);
        *(_WORD *)((char *)v13 + 129) = *(_WORD *)((char *)v16 + 129);
        v230 = v16[18];
        v13[17] = v16[17];
        v13[18] = v230;
        v231 = v16[20];
        v13[19] = v16[19];
        v13[20] = v231;
        v232 = v16[22];
        v233 = v16[23];
        v13[21] = v16[21];
        v13[22] = v232;
        v235 = v16[25];
        v234 = v16[24];
        v13[23] = v233;
        v13[24] = v234;
        v236 = v16[26];
        v13[25] = v235;
        v13[26] = v236;
        v237 = v16[28];
        v13[27] = v16[27];
        v13[28] = v237;
        v238 = v16[30];
        v13[29] = v16[29];
        v13[30] = v238;
        v239 = v16[32];
        v13[31] = v16[31];
        v13[32] = v239;
        v240 = v16[34];
        v13[33] = v16[33];
        v13[34] = v240;
        v241 = v16[36];
        v13[35] = v16[35];
        v13[36] = v241;
        v242 = v16[38];
        v13[37] = v16[37];
        v13[38] = v242;
        v243 = v16[40];
        v13[39] = v16[39];
        v13[40] = v243;
        v244 = v16[42];
        v13[41] = v16[41];
        v13[42] = v244;
        v245 = v16[44];
        v13[43] = v16[43];
        v13[44] = v245;
        v246 = v16[46];
        v13[45] = v16[45];
        v13[46] = v246;
        v247 = v16[47];
        *((unsigned char *)v13 + 384) = *((unsigned char *)v16 + 384);
        v13[47] = v247;
        v248 = v16[50];
        v13[49] = v16[49];
        v13[50] = v248;
        v249 = v16[52];
        v13[51] = v16[51];
        v13[52] = v249;
        v2626 = type metadata accessor for RentalCarReservation(0);
        v250 = *(int *)(v2626 + 140);
        v251 = (char *)v13 + v250;
        v252 = (char *)v16 + v250;
        v253 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v252, 1, v253))
        {
          v254 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v251, v252, *(void *)(*(void *)(v254 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v253 - 8) + 16))(v251, v252, v253);
          __swift_storeEnumTagSinglePayload((uint64_t)v251, 0, 1, v253);
        }
        v150 = v2751;
        v22 = v2754;
        v18 = v16;
        v537 = *(int *)(v2626 + 144);
        v538 = (char *)v2754 + v537;
        v539 = (char *)v16 + v537;
        if (__swift_getEnumTagSinglePayload((uint64_t)v16 + v537, 1, v253))
        {
          v540 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v538, v539, *(void *)(*(void *)(v540 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v253 - 8) + 16))(v538, v539, v253);
          __swift_storeEnumTagSinglePayload((uint64_t)v538, 0, 1, v253);
        }
LABEL_159:
        v20 = v2755;
        goto LABEL_172;
      case 0x13u:
        v255 = v16[1];
        *v13 = *v16;
        v13[1] = v255;
        v256 = v16[3];
        v13[2] = v16[2];
        v13[3] = v256;
        v257 = v16[5];
        v13[4] = v16[4];
        v13[5] = v257;
        v258 = v16[7];
        v13[6] = v16[6];
        v13[7] = v258;
        v259 = v16[9];
        v13[8] = v16[8];
        v13[9] = v259;
        v260 = v16[11];
        v13[10] = v16[10];
        v13[11] = v260;
        v261 = v16[13];
        v13[12] = v16[12];
        v13[13] = v261;
        v262 = v16[15];
        v13[14] = v16[14];
        v13[15] = v262;
        *((unsigned char *)v13 + 128) = *((unsigned char *)v16 + 128);
        *(_WORD *)((char *)v13 + 129) = *(_WORD *)((char *)v16 + 129);
        v263 = v16[18];
        v13[17] = v16[17];
        v13[18] = v263;
        v264 = v16[20];
        v13[19] = v16[19];
        v13[20] = v264;
        v265 = v16[22];
        v266 = v16[23];
        v13[21] = v16[21];
        v13[22] = v265;
        v268 = v16[25];
        v267 = v16[24];
        v13[23] = v266;
        v13[24] = v267;
        v269 = v16[26];
        v13[25] = v268;
        v13[26] = v269;
        v270 = v16[28];
        v13[27] = v16[27];
        v13[28] = v270;
        v271 = v16[30];
        v13[29] = v16[29];
        v13[30] = v271;
        v272 = v16[32];
        v13[31] = v16[31];
        v13[32] = v272;
        v273 = v16[34];
        v13[33] = v16[33];
        v13[34] = v273;
        v275 = v16[35];
        v274 = v16[36];
        *((unsigned char *)v13 + 296) = *((unsigned char *)v16 + 296);
        v13[35] = v275;
        v13[36] = v274;
        v2636 = type metadata accessor for TicketedTransportation(0);
        v276 = *(int *)(v2636 + 112);
        v277 = (char *)v13 + v276;
        v2745 = v16;
        v278 = (char *)v16 + v276;
        v279 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v278, 1, v279))
        {
          v280 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v277, v278, *(void *)(*(void *)(v280 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v279 - 8) + 16))(v277, v278, v279);
          __swift_storeEnumTagSinglePayload((uint64_t)v277, 0, 1, v279);
        }
        v150 = v2751;
        v22 = v2754;
        v18 = v2745;
        v20 = v2755;
        v541 = *(int *)(v2636 + 116);
        goto LABEL_113;
      case 0x14u:
        v281 = v16[1];
        *v13 = *v16;
        v13[1] = v281;
        v282 = v16[3];
        v13[2] = v16[2];
        v13[3] = v282;
        v283 = v16[5];
        v13[4] = v16[4];
        v13[5] = v283;
        v284 = v16[7];
        v13[6] = v16[6];
        v13[7] = v284;
        v285 = v16[9];
        v13[8] = v16[8];
        v13[9] = v285;
        v286 = v16[11];
        v13[10] = v16[10];
        v13[11] = v286;
        v287 = v16[13];
        v13[12] = v16[12];
        v13[13] = v287;
        v288 = v16[15];
        v13[14] = v16[14];
        v13[15] = v288;
        *((unsigned char *)v13 + 128) = *((unsigned char *)v16 + 128);
        *(_WORD *)((char *)v13 + 129) = *(_WORD *)((char *)v16 + 129);
        v289 = v16[18];
        v13[17] = v16[17];
        v13[18] = v289;
        v290 = v16[20];
        v13[19] = v16[19];
        v13[20] = v290;
        v291 = v16[22];
        v13[21] = v16[21];
        v13[22] = v291;
        v293 = v16[25];
        v292 = v16[24];
        v13[23] = v16[23];
        v13[24] = v292;
        v294 = v16[26];
        v13[25] = v293;
        v13[26] = v294;
        v295 = v16[28];
        v13[27] = v16[27];
        v13[28] = v295;
        v2730 = v16[30];
        v13[29] = v16[29];
        v13[30] = v2730;
        v296 = v16[32];
        v13[31] = v16[31];
        v13[32] = v296;
        v297 = v16[34];
        v13[33] = v16[33];
        v13[34] = v297;
        v298 = v16[36];
        v299 = v16[35];
        *((unsigned char *)v13 + 296) = *((unsigned char *)v16 + 296);
        v13[35] = v299;
        v13[36] = v298;
        v300 = v16[39];
        v13[38] = v16[38];
        v13[39] = v300;
        v2737 = (int *)type metadata accessor for TicketedShow(0);
        v301 = v2737[29];
        v302 = (char *)v13 + v301;
        v2746 = v16;
        v303 = (char *)v16 + v301;
        v304 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v303, 1, v304))
        {
          v305 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v302, v303, *(void *)(*(void *)(v305 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v304 - 8) + 16))(v302, v303, v304);
          __swift_storeEnumTagSinglePayload((uint64_t)v302, 0, 1, v304);
        }
        v22 = v2754;
        v20 = v2755;
        v18 = v2746;
        v542 = v2737[30];
        v543 = (void *)((char *)v2754 + v542);
        v544 = (void *)((char *)v2746 + v542);
        v545 = v544[1];
        *v543 = *v544;
        v543[1] = v545;
        v546 = v2737[31];
        v547 = (char *)v2754 + v546;
        v548 = (char *)v2746 + v546;
        v549 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v548, 1, v549))
        {
          v550 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v547, v548, *(void *)(*(void *)(v550 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v549 - 8) + 16))(v547, v548, v549);
          __swift_storeEnumTagSinglePayload((uint64_t)v547, 0, 1, v549);
        }
        v427 = a3;
        v150 = v17;
        v752 = v2737[32];
        v753 = (char *)v2754 + v752;
        v754 = (char *)v2746 + v752;
        if (__swift_getEnumTagSinglePayload((uint64_t)v2746 + v752, 1, v549))
        {
          v452 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                       - 8)
                           + 64);
          v453 = v753;
          v454 = v754;
LABEL_163:
          memcpy(v453, v454, v452);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v549 - 8) + 16))(v753, v754, v549);
          v632 = (uint64_t)v753;
          v633 = v549;
LABEL_181:
          __swift_storeEnumTagSinglePayload(v632, 0, 1, v633);
        }
LABEL_182:
        v21 = v427;
LABEL_522:
        swift_storeEnumTagMultiPayload();
        v2417 = *(int *)(v150 + 20);
        v2418 = *(void **)((char *)v18 + v2417);
        *(void *)((char *)v22 + v2417) = v2418;
        v2419 = *(int *)(v150 + 24);
        v2420 = (void *)((char *)v22 + v2419);
        v2421 = (void *)((char *)v18 + v2419);
        v2422 = v2421[1];
        *v2420 = *v2421;
        v2420[1] = v2422;
        v2423 = v2418;
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v150);
        break;
      case 0x15u:
        v306 = v16[1];
        *v13 = *v16;
        v13[1] = v306;
        v307 = v16[3];
        v13[2] = v16[2];
        v13[3] = v307;
        v308 = v16[5];
        v13[4] = v16[4];
        v13[5] = v308;
        v309 = v16[7];
        v13[6] = v16[6];
        v13[7] = v309;
        v310 = v16[9];
        v13[8] = v16[8];
        v13[9] = v310;
        v311 = v16[11];
        v13[10] = v16[10];
        v13[11] = v311;
        v312 = v16[13];
        v13[12] = v16[12];
        v13[13] = v312;
        v313 = v16[15];
        v13[14] = v16[14];
        v13[15] = v313;
        *((unsigned char *)v13 + 128) = *((unsigned char *)v16 + 128);
        *(_WORD *)((char *)v13 + 129) = *(_WORD *)((char *)v16 + 129);
        v314 = v16[18];
        v13[17] = v16[17];
        v13[18] = v314;
        v315 = v16[20];
        v13[19] = v16[19];
        v13[20] = v315;
        v316 = v16[22];
        v317 = v16[23];
        v13[21] = v16[21];
        v13[22] = v316;
        v319 = v16[25];
        v318 = v16[24];
        v13[23] = v317;
        v13[24] = v318;
        v320 = v16[26];
        v13[25] = v319;
        v13[26] = v320;
        v321 = v16[28];
        v13[27] = v16[27];
        v13[28] = v321;
        v322 = v16[30];
        v13[29] = v16[29];
        v13[30] = v322;
        v323 = v16[32];
        v13[31] = v16[31];
        v13[32] = v323;
        v325 = v16[33];
        v324 = v16[34];
        *((unsigned char *)v13 + 280) = *((unsigned char *)v16 + 280);
        v13[33] = v325;
        v13[34] = v324;
        v326 = v16[37];
        v13[36] = v16[36];
        v13[37] = v326;
        v2640 = (int *)type metadata accessor for Appointment(0);
        v327 = v2640[27];
        v328 = (char *)v13 + v327;
        v2747 = v16;
        v329 = (char *)v16 + v327;
        v279 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v329, 1, v279))
        {
          v330 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v328, v329, *(void *)(*(void *)(v330 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v279 - 8) + 16))(v328, v329, v279);
          __swift_storeEnumTagSinglePayload((uint64_t)v328, 0, 1, v279);
        }
        v150 = v2751;
        v22 = v2754;
        v18 = v2747;
        v20 = v2755;
        v541 = v2640[28];
LABEL_113:
        v551 = (char *)v22 + v541;
        v552 = (char *)v18 + v541;
        if (!__swift_getEnumTagSinglePayload((uint64_t)v18 + v541, 1, v279)) {
          goto LABEL_171;
        }
        v553 = &demangling cache variable for type metadata for Date?;
        goto LABEL_170;
      case 0x16u:
        v331 = v16[1];
        *v13 = *v16;
        v13[1] = v331;
        v332 = v16[3];
        v13[2] = v16[2];
        v13[3] = v332;
        v333 = v16[5];
        v13[4] = v16[4];
        v13[5] = v333;
        v334 = v16[7];
        v13[6] = v16[6];
        v13[7] = v334;
        v335 = v16[9];
        v13[8] = v16[8];
        v13[9] = v335;
        v336 = v16[11];
        v13[10] = v16[10];
        v13[11] = v336;
        v337 = v16[13];
        v13[12] = v16[12];
        v13[13] = v337;
        v338 = v16[15];
        v13[14] = v16[14];
        v13[15] = v338;
        *((unsigned char *)v13 + 128) = *((unsigned char *)v16 + 128);
        *(_WORD *)((char *)v13 + 129) = *(_WORD *)((char *)v16 + 129);
        v339 = v16[18];
        v13[17] = v16[17];
        v13[18] = v339;
        v340 = v16[20];
        v13[19] = v16[19];
        v13[20] = v340;
        v341 = v16[22];
        v13[21] = v16[21];
        v13[22] = v341;
        v343 = v16[25];
        v342 = v16[24];
        v13[23] = v16[23];
        v13[24] = v342;
        v344 = v16[26];
        v345 = v16[27];
        v13[25] = v343;
        v13[26] = v344;
        v346 = v16[28];
        v13[27] = v345;
        v13[28] = v346;
        v347 = v16[30];
        v13[29] = v16[29];
        v13[30] = v347;
        v13[31] = v16[31];
        v2647 = (int *)type metadata accessor for Party(0);
        v348 = v2647[24];
        v349 = (char *)v13 + v348;
        v2748 = v16;
        v350 = (char *)v16 + v348;
        v351 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v350, 1, v351))
        {
          v352 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v349, v350, *(void *)(*(void *)(v352 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v351 - 8) + 16))(v349, v350, v351);
          __swift_storeEnumTagSinglePayload((uint64_t)v349, 0, 1, v351);
        }
        v150 = v2751;
        v22 = v2754;
        v18 = v2748;
        v20 = v2755;
        v554 = v2647[25];
        v555 = (char *)v2754 + v554;
        v556 = (char *)v2748 + v554;
        if (__swift_getEnumTagSinglePayload((uint64_t)v2748 + v554, 1, v351))
        {
          v557 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v555, v556, *(void *)(*(void *)(v557 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v351 - 8) + 16))(v555, v556, v351);
          __swift_storeEnumTagSinglePayload((uint64_t)v555, 0, 1, v351);
        }
        v755 = v2647[26];
        goto LABEL_168;
      case 0x17u:
        v353 = v16[1];
        *v13 = *v18;
        v13[1] = v353;
        v354 = v18[3];
        v13[2] = v18[2];
        v13[3] = v354;
        v355 = v18[5];
        v13[4] = v18[4];
        v13[5] = v355;
        v356 = v18[7];
        v13[6] = v18[6];
        v13[7] = v356;
        v357 = v18[9];
        v13[8] = v18[8];
        v13[9] = v357;
        v358 = v18[11];
        v13[10] = v18[10];
        v13[11] = v358;
        v359 = v18[13];
        v13[12] = v18[12];
        v13[13] = v359;
        v360 = v18[15];
        v13[14] = v18[14];
        v13[15] = v360;
        *((unsigned char *)v13 + 128) = *((unsigned char *)v18 + 128);
        *(_WORD *)((char *)v13 + 129) = *(_WORD *)((char *)v18 + 129);
        v361 = v18[18];
        v13[17] = v18[17];
        v13[18] = v361;
        v362 = v18[20];
        v13[19] = v18[19];
        v13[20] = v362;
        v363 = v18[22];
        v13[21] = v18[21];
        v13[22] = v363;
        v364 = v18[24];
        v13[23] = v18[23];
        v13[24] = v364;
        v365 = v18[26];
        v13[25] = v18[25];
        v13[26] = v365;
        v13[27] = v18[27];
        v366 = type metadata accessor for Trip(0);
        v367 = *(int *)(v366 + 88);
        __dst = (char *)v13 + v367;
        v2667 = (int *)v366;
        v2749 = v18;
        v368 = (char *)v18 + v367;
        v369 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v368, 1, v369))
        {
          v370 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(__dst, v368, *(void *)(*(void *)(v370 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v369 - 8) + 16))(__dst, v368, v369);
          __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v369);
        }
        v150 = v17;
        v22 = v2754;
        v558 = v2667[23];
        v559 = (char *)v2754 + v558;
        v560 = (char *)v2749 + v558;
        if (__swift_getEnumTagSinglePayload((uint64_t)v2749 + v558, 1, v369))
        {
          v561 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v559, v560, *(void *)(*(void *)(v561 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v369 - 8) + 16))(v559, v560, v369);
          __swift_storeEnumTagSinglePayload((uint64_t)v559, 0, 1, v369);
        }
        v18 = v2749;
        v20 = v2755;
        v756 = v2667[24];
        v757 = (char *)v2754 + v756;
        v758 = (uint64_t)v2749 + v756;
        *(void *)v757 = *(void *)v758;
        v757[8] = *(unsigned char *)(v758 + 8);
        v755 = v2667[25];
LABEL_168:
        v551 = (char *)v22 + v755;
        v552 = (char *)v18 + v755;
        v279 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v552, 1, v279))
        {
          v553 = &demangling cache variable for type metadata for URL?;
LABEL_170:
          v759 = __swift_instantiateConcreteTypeFromMangledName(v553);
          memcpy(v551, v552, *(void *)(*(void *)(v759 - 8) + 64));
        }
        else
        {
LABEL_171:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v279 - 8) + 16))(v551, v552, v279);
          __swift_storeEnumTagSinglePayload((uint64_t)v551, 0, 1, v279);
        }
        goto LABEL_172;
      case 0x18u:
        v371 = v16[1];
        *v2754 = *v16;
        v22[1] = v371;
        v372 = v16[3];
        v22[2] = v16[2];
        v22[3] = v372;
        v373 = v22;
        v374 = v16[5];
        v373[4] = v16[4];
        v373[5] = v374;
        v375 = (int *)type metadata accessor for GlobalItem();
        v376 = v375[7];
        v377 = (char *)v373 + v376;
        v378 = (char *)v16 + v376;
        v379 = type metadata accessor for GlobalDialog();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v378, 1, v379))
        {
          v380 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
          memcpy(v377, v378, *(void *)(*(void *)(v380 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v379 - 8) + 16))(v377, v378, v379);
          __swift_storeEnumTagSinglePayload((uint64_t)v377, 0, 1, v379);
        }
        v22 = v2754;
        v20 = v2755;
        v18 = v16;
        v562 = v375[8];
        v563 = (char *)v2754 + v562;
        v564 = (char *)v16 + v562;
        v565 = *((void *)v564 + 1);
        if (v565 >> 60 == 15)
        {
          *(_OWORD *)v563 = *(_OWORD *)v564;
        }
        else
        {
          v566 = *(void *)v564;
          outlined copy of Data._Representation(*(void *)v564, *((void *)v564 + 1));
          *(void *)v563 = v566;
          *((void *)v563 + 1) = v565;
        }
        v21 = a3;
        v150 = v2751;
        *((unsigned char *)v2754 + v375[9]) = *((unsigned char *)v16 + v375[9]);
        v567 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
        *(void *)((char *)v2754 + *(int *)(v567 + 48)) = *(void *)((char *)v16 + *(int *)(v567 + 48));
        goto LABEL_128;
      case 0x19u:
        v381 = v16[1];
        *v13 = *v16;
        v13[1] = v381;
        v382 = v16[3];
        v13[2] = v16[2];
        v13[3] = v382;
        v383 = v16[5];
        v22[4] = v16[4];
        v22[5] = v383;
        v384 = v16[7];
        v22[6] = v16[6];
        v22[7] = v384;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21 = a3;
LABEL_56:
        swift_bridgeObjectRetain();
        v150 = v2751;
LABEL_152:
        v20 = v2755;
        goto LABEL_522;
      case 0x1Au:
        v385 = v16[1];
        *v2754 = *v16;
        v22[1] = v385;
        v386 = v16[3];
        v22[2] = v16[2];
        v22[3] = v386;
        v387 = v16[5];
        v22[4] = v16[4];
        v22[5] = v387;
        v22[6] = v16[6];
        v388 = (int *)type metadata accessor for Answer(0);
        v389 = v388[9];
        v390 = (char *)v22 + v389;
        v391 = v18;
        v392 = (char *)v18 + v389;
        v393 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v392, 1, v393))
        {
          v394 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v390, v392, *(void *)(*(void *)(v394 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v393 - 8) + 16))(v390, v392, v393);
          __swift_storeEnumTagSinglePayload((uint64_t)v390, 0, 1, v393);
        }
        v21 = a3;
        v22 = v2754;
        v20 = v2755;
        v150 = v2751;
        v18 = v391;
        *((unsigned char *)v2754 + v388[10]) = *((unsigned char *)v391 + v388[10]);
        v568 = v388[11];
        v569 = (void *)((char *)v2754 + v568);
        v570 = (void *)((char *)v391 + v568);
        v571 = v570[1];
        *v569 = *v570;
        v569[1] = v571;
LABEL_128:
        swift_bridgeObjectRetain();
        goto LABEL_522;
      default:
        v23 = v16[1];
        *v13 = *v16;
        v13[1] = v23;
        v24 = v16[3];
        v13[2] = v16[2];
        v13[3] = v24;
        v25 = v16[5];
        v13[4] = v16[4];
        v13[5] = v25;
        v26 = v16;
        v27 = v16[7];
        v13[6] = v16[6];
        v13[7] = v27;
        v28 = v16[9];
        v13[8] = v16[8];
        v13[9] = v28;
        v29 = v16[11];
        v13[10] = v16[10];
        v13[11] = v29;
        v30 = (int *)type metadata accessor for EmailDocument(0);
        v31 = v30[12];
        v2711 = (char *)v13 + v31;
        v2689 = (char *)v16 + v31;
        v32 = type metadata accessor for Date();
        v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v2728 = v33;
        v2734 = v32;
        v33(v2711, v2689, v32);
        *(void *)((char *)v13 + v30[13]) = *(void *)((char *)v26 + v30[13]);
        *(void *)((char *)v13 + v30[14]) = *(void *)((char *)v26 + v30[14]);
        *(void *)((char *)v13 + v30[15]) = *(void *)((char *)v26 + v30[15]);
        *((unsigned char *)v13 + v30[16]) = *((unsigned char *)v26 + v30[16]);
        *((unsigned char *)v13 + v30[17]) = *((unsigned char *)v26 + v30[17]);
        v34 = v30[18];
        v35 = (void *)((char *)v13 + v34);
        v36 = (void *)((char *)v26 + v34);
        v37 = v36[1];
        *v35 = *v36;
        v35[1] = v37;
        v38 = v30;
        v39 = v30[19];
        v40 = (void *)((char *)v13 + v39);
        v2741 = v26;
        v41 = (char *)v26 + v39;
        v42 = *(void *)((char *)v26 + v39);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v42)
        {
          v43 = *((void *)v41 + 1);
          v44 = *((void *)v41 + 2);
          *v40 = v42;
          v40[1] = v43;
          v45 = *((void *)v41 + 3);
          v46 = *((void *)v41 + 4);
          v40[2] = v44;
          v40[3] = v45;
          v40[4] = v46;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v395 = *((_OWORD *)v41 + 1);
          *(_OWORD *)v40 = *(_OWORD *)v41;
          *((_OWORD *)v40 + 1) = v395;
          v40[4] = *((void *)v41 + 4);
        }
        v18 = v26;
        v396 = v30;
        v397 = v30[20];
        v398 = (void *)((char *)v13 + v397);
        v399 = (void *)((char *)v2741 + v397);
        v400 = v399[1];
        *v398 = *v399;
        v398[1] = v400;
        v401 = v30[21];
        v402 = (void *)((char *)v13 + v401);
        v403 = (void *)((char *)v2741 + v401);
        v404 = type metadata accessor for PartialExtractedAttributes(0);
        swift_bridgeObjectRetain();
        v2717 = v38;
        if (__swift_getEnumTagSinglePayload((uint64_t)v403, 1, v404))
        {
          v405 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v402, v403, *(void *)(*(void *)(v405 - 8) + 64));
          v20 = v2755;
        }
        else
        {
          v572 = v403;
          v573 = v403[1];
          *v402 = *v403;
          v402[1] = v573;
          v574 = *(int *)(v404 + 20);
          v575 = (void *)((char *)v402 + v574);
          v2712 = v572;
          v576 = (void *)((char *)v572 + v574);
          v577 = type metadata accessor for RentalCarReservation(0);
          swift_bridgeObjectRetain();
          v2690 = v402;
          v578 = (int *)v404;
          if (__swift_getEnumTagSinglePayload((uint64_t)v576, 1, v577))
          {
            v579 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v575, v576, *(void *)(*(void *)(v579 - 8) + 64));
          }
          else
          {
            v817 = v576[1];
            *v575 = *v576;
            v575[1] = v817;
            v818 = v576[3];
            v575[2] = v576[2];
            v575[3] = v818;
            v819 = v576[5];
            v575[4] = v576[4];
            v575[5] = v819;
            v820 = v576[7];
            v575[6] = v576[6];
            v575[7] = v820;
            v821 = v576[9];
            v575[8] = v576[8];
            v575[9] = v821;
            v822 = v576[11];
            v575[10] = v576[10];
            v575[11] = v822;
            v823 = v576[13];
            v575[12] = v576[12];
            v575[13] = v823;
            v824 = v576[15];
            v575[14] = v576[14];
            v575[15] = v824;
            *((unsigned char *)v575 + 128) = *((unsigned char *)v576 + 128);
            *(_WORD *)((char *)v575 + 129) = *(_WORD *)((char *)v576 + 129);
            v825 = v576[18];
            v575[17] = v576[17];
            v575[18] = v825;
            v826 = v576[20];
            v575[19] = v576[19];
            v575[20] = v826;
            v827 = v576[22];
            v575[21] = v576[21];
            v575[22] = v827;
            v2622 = v576[24];
            v575[23] = v576[23];
            v575[24] = v2622;
            v828 = v576[26];
            v575[25] = v576[25];
            v575[26] = v828;
            v829 = v576[28];
            v575[27] = v576[27];
            v575[28] = v829;
            v830 = v576[30];
            v575[29] = v576[29];
            v575[30] = v830;
            v831 = v576[32];
            v575[31] = v576[31];
            v575[32] = v831;
            v832 = v576[34];
            v575[33] = v576[33];
            v575[34] = v832;
            v833 = v576[36];
            v575[35] = v576[35];
            v575[36] = v833;
            v834 = v576[38];
            v575[37] = v576[37];
            v575[38] = v834;
            v835 = v576[40];
            v575[39] = v576[39];
            v575[40] = v835;
            v836 = v576[42];
            v575[41] = v576[41];
            v575[42] = v836;
            v837 = v576[44];
            v575[43] = v576[43];
            v575[44] = v837;
            v838 = v576[46];
            v575[45] = v576[45];
            v575[46] = v838;
            v839 = v576[47];
            *((unsigned char *)v575 + 384) = *((unsigned char *)v576 + 384);
            v575[47] = v839;
            v840 = v576[50];
            v575[49] = v576[49];
            v575[50] = v840;
            v841 = v576[52];
            v575[51] = v576[51];
            v575[52] = v841;
            v842 = *(int *)(v577 + 140);
            v2669 = (char *)v575 + v842;
            v843 = (char *)v576 + v842;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v843, 1, v2734))
            {
              v844 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2669, v843, *(void *)(*(void *)(v844 - 8) + 64));
            }
            else
            {
              v2728(v2669, v843, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v2669, 0, 1, v2734);
            }
            v901 = *(int *)(v577 + 144);
            v902 = (char *)v575 + v901;
            v903 = (char *)v576 + v901;
            v18 = v2741;
            if (__swift_getEnumTagSinglePayload((uint64_t)v576 + v901, 1, v2734))
            {
              v904 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v902, v903, *(void *)(*(void *)(v904 - 8) + 64));
            }
            else
            {
              v2728(v902, v903, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v902, 0, 1, v2734);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v575, 0, 1, v577);
            v402 = v2690;
          }
          v913 = v2712;
          v914 = v578[6];
          v915 = (void *)((char *)v402 + v914);
          v916 = (void *)((char *)v2712 + v914);
          v917 = type metadata accessor for TicketedTransportation(0);
          v2682 = v578;
          if (__swift_getEnumTagSinglePayload((uint64_t)v916, 1, v917))
          {
            v918 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v915, v916, *(void *)(*(void *)(v918 - 8) + 64));
            v20 = v2755;
          }
          else
          {
            v919 = v916[1];
            *v915 = *v916;
            v915[1] = v919;
            v920 = v916[3];
            v915[2] = v916[2];
            v915[3] = v920;
            v921 = v916[5];
            v915[4] = v916[4];
            v915[5] = v921;
            v922 = v916[7];
            v915[6] = v916[6];
            v915[7] = v922;
            v923 = v916[9];
            v915[8] = v916[8];
            v915[9] = v923;
            v924 = v916[11];
            v915[10] = v916[10];
            v915[11] = v924;
            v925 = v916[13];
            v915[12] = v916[12];
            v915[13] = v925;
            v926 = v916[15];
            v915[14] = v916[14];
            v915[15] = v926;
            *((unsigned char *)v915 + 128) = *((unsigned char *)v916 + 128);
            *(_WORD *)((char *)v915 + 129) = *(_WORD *)((char *)v916 + 129);
            v927 = v916[18];
            v915[17] = v916[17];
            v915[18] = v927;
            v928 = v916[20];
            v915[19] = v916[19];
            v915[20] = v928;
            v929 = v916[22];
            v915[21] = v916[21];
            v915[22] = v929;
            v930 = v916[24];
            v915[23] = v916[23];
            v915[24] = v930;
            v931 = v916[26];
            v915[25] = v916[25];
            v915[26] = v931;
            v932 = v916[28];
            v915[27] = v916[27];
            v915[28] = v932;
            v933 = v916[30];
            v915[29] = v916[29];
            v915[30] = v933;
            v934 = v916[32];
            v915[31] = v916[31];
            v915[32] = v934;
            v935 = v916[34];
            v915[33] = v916[33];
            v915[34] = v935;
            v937 = v916[35];
            v936 = v916[36];
            *((unsigned char *)v915 + 296) = *((unsigned char *)v916 + 296);
            v915[35] = v937;
            v915[36] = v936;
            v938 = *(int *)(v917 + 112);
            __dsta = (char *)v915 + v938;
            v2670 = (int *)v917;
            v939 = (uint64_t)v916 + v938;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v940 = (void *)v939;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v939, 1, v2734);
            v20 = v2755;
            if (EnumTagSinglePayload)
            {
              v942 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dsta, v940, *(void *)(*(void *)(v942 - 8) + 64));
            }
            else
            {
              v2728(__dsta, (char *)v940, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v2734);
            }
            v998 = v2670[29];
            v999 = (char *)v915 + v998;
            v1000 = (char *)v916 + v998;
            v18 = v2741;
            if (__swift_getEnumTagSinglePayload((uint64_t)v916 + v998, 1, v2734))
            {
              v1001 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v999, v1000, *(void *)(*(void *)(v1001 - 8) + 64));
            }
            else
            {
              v2728(v999, v1000, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v999, 0, 1, v2734);
            }
            v578 = v2682;
            __swift_storeEnumTagSinglePayload((uint64_t)v915, 0, 1, (uint64_t)v2670);
            v402 = v2690;
            v913 = v2712;
          }
          v1010 = v578[7];
          v1011 = (void *)((char *)v402 + v1010);
          v1012 = (void *)((char *)v913 + v1010);
          v1013 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1012, 1, (uint64_t)v1013))
          {
            v1014 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v1011, v1012, *(void *)(*(void *)(v1014 - 8) + 64));
          }
          else
          {
            v1015 = v1012[1];
            *v1011 = *v1012;
            v1011[1] = v1015;
            v1016 = v1012[3];
            v1011[2] = v1012[2];
            v1011[3] = v1016;
            v1017 = v1012[5];
            v1011[4] = v1012[4];
            v1011[5] = v1017;
            v1018 = v1012[7];
            v1011[6] = v1012[6];
            v1011[7] = v1018;
            v1019 = v1012[9];
            v1011[8] = v1012[8];
            v1011[9] = v1019;
            v1020 = v1012[11];
            v1011[10] = v1012[10];
            v1011[11] = v1020;
            v1021 = v1012[13];
            v1011[12] = v1012[12];
            v1011[13] = v1021;
            v1022 = v1012[15];
            v1011[14] = v1012[14];
            v1011[15] = v1022;
            *((unsigned char *)v1011 + 128) = *((unsigned char *)v1012 + 128);
            *(_WORD *)((char *)v1011 + 129) = *(_WORD *)((char *)v1012 + 129);
            v1023 = v1012[18];
            v1011[17] = v1012[17];
            v1011[18] = v1023;
            v1024 = v1012[20];
            v1011[19] = v1012[19];
            v1011[20] = v1024;
            v1025 = v1012[22];
            v1011[21] = v1012[21];
            v1011[22] = v1025;
            v2625 = v1012[24];
            v1011[23] = v1012[23];
            v1011[24] = v2625;
            v1026 = v1012[26];
            v1011[25] = v1012[25];
            v1011[26] = v1026;
            v1027 = v1012[28];
            v1011[27] = v1012[27];
            v1011[28] = v1027;
            v2671 = (void *)v1012[30];
            v1011[29] = v1012[29];
            v1011[30] = v2671;
            v1028 = v1012[32];
            v1011[31] = v1012[31];
            v1011[32] = v1028;
            v1029 = v1012[34];
            v1011[33] = v1012[33];
            v1011[34] = v1029;
            v1030 = v1012[36];
            v1031 = v1012[35];
            *((unsigned char *)v1011 + 296) = *((unsigned char *)v1012 + 296);
            v1011[35] = v1031;
            v1011[36] = v1030;
            v1032 = v1012[39];
            v1011[38] = v1012[38];
            v1011[39] = v1032;
            v1033 = v1013[29];
            v2758 = (char *)v1011 + v1033;
            v1034 = (char *)v1012 + v1033;
            v1035 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1034, 1, v1035))
            {
              v1036 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2758, v1034, *(void *)(*(void *)(v1036 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1035 - 8) + 16))(v2758, v1034, v1035);
              __swift_storeEnumTagSinglePayload((uint64_t)v2758, 0, 1, v1035);
            }
            v1093 = v1013[30];
            v1094 = (void *)((char *)v1011 + v1093);
            v1095 = (void *)((char *)v1012 + v1093);
            v1096 = v1095[1];
            *v1094 = *v1095;
            v1094[1] = v1096;
            v1097 = v1013[31];
            v1098 = (char *)v1011 + v1097;
            v1099 = (char *)v1012 + v1097;
            swift_bridgeObjectRetain();
            v18 = v2741;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1099, 1, v2734))
            {
              v1100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1098, v1099, *(void *)(*(void *)(v1100 - 8) + 64));
            }
            else
            {
              v2728(v1098, v1099, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v1098, 0, 1, v2734);
            }
            v1117 = v1013[32];
            v1118 = (char *)v1011 + v1117;
            v1119 = (char *)v1012 + v1117;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1012 + v1117, 1, v2734))
            {
              v1120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1118, v1119, *(void *)(*(void *)(v1120 - 8) + 64));
            }
            else
            {
              v2728(v1118, v1119, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v1118, 0, 1, v2734);
            }
            v578 = v2682;
            __swift_storeEnumTagSinglePayload((uint64_t)v1011, 0, 1, (uint64_t)v1013);
            v402 = v2690;
            v913 = v2712;
          }
          v1129 = v578[8];
          v1130 = (void *)((char *)v402 + v1129);
          v1131 = (void *)((char *)v913 + v1129);
          v1132 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1131, 1, v1132))
          {
            v1133 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v1130, v1131, *(void *)(*(void *)(v1133 - 8) + 64));
          }
          else
          {
            v1134 = v1131[1];
            *v1130 = *v1131;
            v1130[1] = v1134;
            v1135 = v1131[3];
            v1130[2] = v1131[2];
            v1130[3] = v1135;
            v1136 = v1131[5];
            v1130[4] = v1131[4];
            v1130[5] = v1136;
            v1137 = v1131[7];
            v1130[6] = v1131[6];
            v1130[7] = v1137;
            v1138 = v1131[9];
            v1130[8] = v1131[8];
            v1130[9] = v1138;
            v1139 = v1131[11];
            v1130[10] = v1131[10];
            v1130[11] = v1139;
            v1140 = v1131[13];
            v1130[12] = v1131[12];
            v1130[13] = v1140;
            v1141 = v1131[15];
            v1130[14] = v1131[14];
            v1130[15] = v1141;
            *((unsigned char *)v1130 + 128) = *((unsigned char *)v1131 + 128);
            *(_WORD *)((char *)v1130 + 129) = *(_WORD *)((char *)v1131 + 129);
            v1142 = v1131[18];
            v1130[17] = v1131[17];
            v1130[18] = v1142;
            v1143 = v1131[20];
            v1130[19] = v1131[19];
            v1130[20] = v1143;
            v1144 = v1131[22];
            v1130[21] = v1131[21];
            v1130[22] = v1144;
            v1145 = v1131[24];
            v1130[23] = v1131[23];
            v1130[24] = v1145;
            v1146 = v1131[26];
            v1130[25] = v1131[25];
            v1130[26] = v1146;
            v1147 = v1131[28];
            v1130[27] = v1131[27];
            v1130[28] = v1147;
            v1148 = v1131[30];
            v1130[29] = v1131[29];
            v1130[30] = v1148;
            v1149 = v1131[32];
            v1130[31] = v1131[31];
            v1130[32] = v1149;
            v1150 = v1131[34];
            v1151 = v1131[33];
            *((unsigned char *)v1130 + 280) = *((unsigned char *)v1131 + 280);
            v1130[33] = v1151;
            v1130[34] = v1150;
            v1152 = v1131[37];
            v1130[36] = v1131[36];
            v1130[37] = v1152;
            v1153 = *(int *)(v1132 + 108);
            v2672 = (char *)v1130 + v1153;
            v1154 = (char *)v1131 + v1153;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1154, 1, v2734))
            {
              v1155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2672, v1154, *(void *)(*(void *)(v1155 - 8) + 64));
            }
            else
            {
              v2728(v2672, v1154, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v2672, 0, 1, v2734);
            }
            v1211 = *(int *)(v1132 + 112);
            v1212 = (char *)v1130 + v1211;
            v1213 = (char *)v1131 + v1211;
            v18 = v2741;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1131 + v1211, 1, v2734))
            {
              v1214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1212, v1213, *(void *)(*(void *)(v1214 - 8) + 64));
            }
            else
            {
              v2728(v1212, v1213, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v1212, 0, 1, v2734);
            }
            v578 = v2682;
            __swift_storeEnumTagSinglePayload((uint64_t)v1130, 0, 1, v1132);
            v402 = v2690;
            v913 = v2712;
          }
          v1223 = v578[9];
          v1224 = (void *)((char *)v402 + v1223);
          v1225 = (void *)((char *)v913 + v1223);
          v1226 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1225, 1, (uint64_t)v1226))
          {
            v1227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v1224, v1225, *(void *)(*(void *)(v1227 - 8) + 64));
          }
          else
          {
            v1228 = v1225[1];
            *v1224 = *v1225;
            v1224[1] = v1228;
            v1229 = v1225[3];
            v1224[2] = v1225[2];
            v1224[3] = v1229;
            v1230 = v1225[5];
            v1224[4] = v1225[4];
            v1224[5] = v1230;
            v1231 = v1225[7];
            v1224[6] = v1225[6];
            v1224[7] = v1231;
            v1232 = v1225[9];
            v1224[8] = v1225[8];
            v1224[9] = v1232;
            v1233 = v1225[11];
            v1224[10] = v1225[10];
            v1224[11] = v1233;
            v1234 = v1225[13];
            v1224[12] = v1225[12];
            v1224[13] = v1234;
            v1235 = v1225[15];
            v1224[14] = v1225[14];
            v1224[15] = v1235;
            *((unsigned char *)v1224 + 128) = *((unsigned char *)v1225 + 128);
            *(_WORD *)((char *)v1224 + 129) = *(_WORD *)((char *)v1225 + 129);
            v1236 = v1225[18];
            v1224[17] = v1225[17];
            v1224[18] = v1236;
            v1237 = v1225[20];
            v1224[19] = v1225[19];
            v1224[20] = v1237;
            v1238 = v1225[22];
            v1224[21] = v1225[21];
            v1224[22] = v1238;
            v1239 = v1225[24];
            v1224[23] = v1225[23];
            v1224[24] = v1239;
            v1240 = v1225[26];
            v1224[25] = v1225[25];
            v1224[26] = v1240;
            v1241 = v1225[28];
            v1224[27] = v1225[27];
            v1224[28] = v1241;
            v1242 = v1225[30];
            v1224[29] = v1225[29];
            v1224[30] = v1242;
            v1224[31] = v1225[31];
            v1243 = v1226[24];
            v2673 = (char *)v1224 + v1243;
            v1244 = (char *)v1225 + v1243;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1244, 1, v2734))
            {
              v1245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2673, v1244, *(void *)(*(void *)(v1245 - 8) + 64));
            }
            else
            {
              v2728(v2673, v1244, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v2673, 0, 1, v2734);
            }
            v1293 = v1226[25];
            v1294 = (char *)v1224 + v1293;
            v1295 = (char *)v1225 + v1293;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1225 + v1293, 1, v2734))
            {
              v1296 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1294, v1295, *(void *)(*(void *)(v1296 - 8) + 64));
            }
            else
            {
              v2728(v1294, v1295, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v1294, 0, 1, v2734);
            }
            v578 = v2682;
            v1305 = v1226[26];
            v1306 = (char *)v1224 + v1305;
            v1307 = (char *)v1225 + v1305;
            v1308 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1307, 1, v1308))
            {
              v1309 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1306, v1307, *(void *)(*(void *)(v1309 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1308 - 8) + 16))(v1306, v1307, v1308);
              __swift_storeEnumTagSinglePayload((uint64_t)v1306, 0, 1, v1308);
            }
            v18 = v2741;
            __swift_storeEnumTagSinglePayload((uint64_t)v1224, 0, 1, (uint64_t)v1226);
            v402 = v2690;
            v913 = v2712;
          }
          v1319 = v578[10];
          v1320 = (void *)((char *)v402 + v1319);
          v1321 = (void *)((char *)v913 + v1319);
          v1322 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1321, 1, (uint64_t)v1322))
          {
            v1323 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v1320, v1321, *(void *)(*(void *)(v1323 - 8) + 64));
          }
          else
          {
            v1324 = v1321[1];
            *v1320 = *v1321;
            v1320[1] = v1324;
            v1325 = v1321[3];
            v1320[2] = v1321[2];
            v1320[3] = v1325;
            v1326 = v1321[5];
            v1320[4] = v1321[4];
            v1320[5] = v1326;
            v1327 = v1321[7];
            v1320[6] = v1321[6];
            v1320[7] = v1327;
            v1328 = v1321[9];
            v1320[8] = v1321[8];
            v1320[9] = v1328;
            v1329 = v1321[11];
            v1320[10] = v1321[10];
            v1320[11] = v1329;
            v1330 = v1321[13];
            v1320[12] = v1321[12];
            v1320[13] = v1330;
            v1331 = v1321[15];
            v1320[14] = v1321[14];
            v1320[15] = v1331;
            *((unsigned char *)v1320 + 128) = *((unsigned char *)v1321 + 128);
            *(_WORD *)((char *)v1320 + 129) = *(_WORD *)((char *)v1321 + 129);
            v1332 = v1321[18];
            v1320[17] = v1321[17];
            v1320[18] = v1332;
            v1333 = v1321[20];
            v1320[19] = v1321[19];
            v1320[20] = v1333;
            v1334 = v1321[22];
            v1320[21] = v1321[21];
            v1320[22] = v1334;
            v1335 = v1321[24];
            v1320[23] = v1321[23];
            v1320[24] = v1335;
            v1336 = v1321[26];
            v1320[25] = v1321[25];
            v1320[26] = v1336;
            v1320[27] = v1321[27];
            v1337 = v1322[22];
            v2674 = (char *)v1320 + v1337;
            v1338 = (char *)v1321 + v1337;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1338, 1, v2734))
            {
              v1339 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2674, v1338, *(void *)(*(void *)(v1339 - 8) + 64));
            }
            else
            {
              v2728(v2674, v1338, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v2674, 0, 1, v2734);
            }
            v1382 = v1322[23];
            v1383 = (char *)v1320 + v1382;
            v1384 = (char *)v1321 + v1382;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1321 + v1382, 1, v2734))
            {
              v1385 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1383, v1384, *(void *)(*(void *)(v1385 - 8) + 64));
            }
            else
            {
              v2728(v1383, v1384, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v1383, 0, 1, v2734);
            }
            v578 = v2682;
            v1394 = v1322[24];
            v1395 = (char *)v1320 + v1394;
            v1396 = (char *)v1321 + v1394;
            *(void *)v1395 = *(void *)v1396;
            v1395[8] = v1396[8];
            v1397 = v1322[25];
            v1398 = (char *)v1320 + v1397;
            v1399 = (char *)v1321 + v1397;
            v1400 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1399, 1, v1400))
            {
              v1401 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1398, v1399, *(void *)(*(void *)(v1401 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1400 - 8) + 16))(v1398, v1399, v1400);
              __swift_storeEnumTagSinglePayload((uint64_t)v1398, 0, 1, v1400);
            }
            v18 = v2741;
            __swift_storeEnumTagSinglePayload((uint64_t)v1320, 0, 1, (uint64_t)v1322);
            v402 = v2690;
            v913 = v2712;
          }
          v1417 = v578[11];
          v1418 = (void *)((char *)v402 + v1417);
          v1419 = (void *)((char *)v913 + v1417);
          v1420 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1419, 1, (uint64_t)v1420))
          {
            v1421 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v1418, v1419, *(void *)(*(void *)(v1421 - 8) + 64));
          }
          else
          {
            v1422 = v1419[1];
            *v1418 = *v1419;
            v1418[1] = v1422;
            v1423 = v1419[3];
            v1418[2] = v1419[2];
            v1418[3] = v1423;
            v1424 = v1419[5];
            v1418[4] = v1419[4];
            v1418[5] = v1424;
            v1425 = v1419[7];
            v1418[6] = v1419[6];
            v1418[7] = v1425;
            v1426 = v1419[9];
            v1418[8] = v1419[8];
            v1418[9] = v1426;
            v1427 = v1419[11];
            v1418[10] = v1419[10];
            v1418[11] = v1427;
            *((unsigned char *)v1418 + 96) = *((unsigned char *)v1419 + 96);
            v1428 = v1419[14];
            v1418[13] = v1419[13];
            v1418[14] = v1428;
            v1429 = v1420[13];
            v2760 = (char *)v1418 + v1429;
            v1430 = (char *)v1419 + v1429;
            v1431 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1430, 1, v1431))
            {
              v1432 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2760, v1430, *(void *)(*(void *)(v1432 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1431 - 8) + 16))(v2760, v1430, v1431);
              __swift_storeEnumTagSinglePayload((uint64_t)v2760, 0, 1, v1431);
            }
            v1464 = v1420[14];
            v1465 = (char *)v1418 + v1464;
            v1466 = (char *)v1419 + v1464;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1419 + v1464, 1, v1431))
            {
              v1467 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1465, v1466, *(void *)(*(void *)(v1467 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1431 - 8) + 16))(v1465, v1466, v1431);
              __swift_storeEnumTagSinglePayload((uint64_t)v1465, 0, 1, v1431);
            }
            v1476 = v1420[15];
            v1477 = (void *)((char *)v1418 + v1476);
            v1478 = (void *)((char *)v1419 + v1476);
            v1479 = v1478[1];
            *v1477 = *v1478;
            v1477[1] = v1479;
            v1480 = v1420[16];
            v1481 = (void *)((char *)v1418 + v1480);
            v1482 = (void *)((char *)v1419 + v1480);
            v1483 = v1482[1];
            *v1481 = *v1482;
            v1481[1] = v1483;
            v1484 = v1420[17];
            v1485 = (void *)((char *)v1418 + v1484);
            v1486 = (void *)((char *)v1419 + v1484);
            v1487 = v1486[1];
            *v1485 = *v1486;
            v1485[1] = v1487;
            v1488 = v1420[18];
            v2762 = (char *)v1418 + v1488;
            v2675 = (char *)v1419 + v1488;
            v1489 = type metadata accessor for DateComponents();
            v1490 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1489 - 8) + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1490(v2762, v2675, v1489);
            v1490((char *)v1418 + v1420[19], (char *)v1419 + v1420[19], v1489);
            v1491 = v1420[20];
            v1492 = (void *)((char *)v1418 + v1491);
            v1493 = (void *)((char *)v1419 + v1491);
            v1494 = v1493[1];
            *v1492 = *v1493;
            v1492[1] = v1494;
            v1495 = v1420[21];
            v1496 = (void *)((char *)v1418 + v1495);
            v1497 = (void *)((char *)v1419 + v1495);
            v1498 = v1497[1];
            *v1496 = *v1497;
            v1496[1] = v1498;
            v1499 = v1420[22];
            v1500 = (void *)((char *)v1418 + v1499);
            v1501 = (void *)((char *)v1419 + v1499);
            v2652 = v1501[1];
            *v1500 = *v1501;
            v1500[1] = v2652;
            v1502 = v1420[23];
            v1503 = (void *)((char *)v1418 + v1502);
            v1504 = (void *)((char *)v1419 + v1502);
            v2763 = v1504[1];
            *v1503 = *v1504;
            v1503[1] = v2763;
            v1505 = v1420[24];
            v1506 = (void *)((char *)v1418 + v1505);
            v1507 = (void *)((char *)v1419 + v1505);
            __dstc = (void *)v1507[1];
            *v1506 = *v1507;
            v1506[1] = __dstc;
            v1508 = v1420[25];
            v1509 = (void *)((char *)v1418 + v1508);
            v1510 = (void *)((char *)v1419 + v1508);
            v2656 = v1510[1];
            *v1509 = *v1510;
            v1509[1] = v2656;
            v1511 = v1420[26];
            v1512 = (void *)((char *)v1418 + v1511);
            v1513 = (void *)((char *)v1419 + v1511);
            v2648 = v1513[1];
            *v1512 = *v1513;
            v1512[1] = v2648;
            v1514 = v1420[27];
            v1515 = (void *)((char *)v1418 + v1514);
            v1516 = (void *)((char *)v1419 + v1514);
            v2644 = (void *)v1516[1];
            *v1515 = *v1516;
            v1515[1] = v2644;
            v1517 = v1420[28];
            v1518 = (void *)((char *)v1418 + v1517);
            v1519 = (void *)((char *)v1419 + v1517);
            v2641 = (void *)v1519[1];
            *v1518 = *v1519;
            v1518[1] = v2641;
            v1520 = v1420[29];
            v1521 = (void *)((char *)v1418 + v1520);
            v1522 = (void *)((char *)v1419 + v1520);
            v2637 = v1522[1];
            *v1521 = *v1522;
            v1521[1] = v2637;
            v1523 = v1420[30];
            v1524 = (void *)((char *)v1418 + v1523);
            v1525 = (void *)((char *)v1419 + v1523);
            v2633 = v1525[1];
            *v1524 = *v1525;
            v1524[1] = v2633;
            v1526 = v1420[31];
            v1527 = (void *)((char *)v1418 + v1526);
            v1528 = (void *)((char *)v1419 + v1526);
            v2631 = v1528[1];
            *v1527 = *v1528;
            v1527[1] = v2631;
            v1529 = v1420[32];
            v1530 = (void *)((char *)v1418 + v1529);
            v1531 = (void *)((char *)v1419 + v1529);
            v2628 = v1531[1];
            *v1530 = *v1531;
            v1530[1] = v2628;
            *(void *)((char *)v1418 + v1420[33]) = *(void *)((char *)v1419 + v1420[33]);
            *(void *)((char *)v1418 + v1420[34]) = *(void *)((char *)v1419 + v1420[34]);
            v1532 = v1420[35];
            v1533 = (void *)((char *)v1418 + v1532);
            v1534 = (void *)((char *)v1419 + v1532);
            v1535 = v1534[1];
            *v1533 = *v1534;
            v1533[1] = v1535;
            v1536 = v1420[36];
            v1537 = (void *)((char *)v1418 + v1536);
            v1538 = (void *)((char *)v1419 + v1536);
            v1539 = v1538[1];
            *v1537 = *v1538;
            v1537[1] = v1539;
            v1540 = v1420[37];
            v1541 = (void *)((char *)v1418 + v1540);
            v1542 = (void *)((char *)v1419 + v1540);
            v1543 = v1542[1];
            *v1541 = *v1542;
            v1541[1] = v1543;
            v1544 = v1420[38];
            v2676 = (char *)v1418 + v1544;
            v1545 = (char *)v1419 + v1544;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1545, 1, v2734))
            {
              v1546 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2676, v1545, *(void *)(*(void *)(v1546 - 8) + 64));
            }
            else
            {
              v2728(v2676, v1545, v2734);
              __swift_storeEnumTagSinglePayload((uint64_t)v2676, 0, 1, v2734);
            }
            v578 = v2682;
            v1687 = v1420[39];
            v1688 = (void *)((char *)v1418 + v1687);
            v1689 = (void *)((char *)v1419 + v1687);
            v1690 = v1689[1];
            *v1688 = *v1689;
            v1688[1] = v1690;
            v1691 = v1420[40];
            v1692 = (void *)((char *)v1418 + v1691);
            v1693 = (void *)((char *)v1419 + v1691);
            v1694 = v1693[1];
            *v1692 = *v1693;
            v1692[1] = v1694;
            v1695 = v1420[41];
            v1696 = (char *)v1418 + v1695;
            v1697 = (char *)v1419 + v1695;
            v1696[8] = v1697[8];
            *(void *)v1696 = *(void *)v1697;
            v1698 = v1420[42];
            v1699 = (void *)((char *)v1418 + v1698);
            v1700 = (void *)((char *)v1419 + v1698);
            v1701 = v1700[1];
            *v1699 = *v1700;
            v1699[1] = v1701;
            v1702 = v1420[43];
            v1703 = (char *)v1418 + v1702;
            v1704 = (char *)v1419 + v1702;
            *(_OWORD *)v1703 = *(_OWORD *)v1704;
            *(void *)(v1703 + 13) = *(void *)(v1704 + 13);
            v1705 = v1420[44];
            v1706 = (void *)((char *)v1418 + v1705);
            v1707 = (void *)((char *)v1419 + v1705);
            v1708 = v1707[1];
            *v1706 = *v1707;
            v1706[1] = v1708;
            v1709 = v1420[45];
            v1710 = (void *)((char *)v1418 + v1709);
            v1711 = (void *)((char *)v1419 + v1709);
            v1712 = v1711[1];
            *v1710 = *v1711;
            v1710[1] = v1712;
            v1713 = v1420[46];
            v1714 = (void *)((char *)v1418 + v1713);
            v1715 = (void *)((char *)v1419 + v1713);
            v1716 = v1715[1];
            *v1714 = *v1715;
            v1714[1] = v1716;
            v1717 = v1420[47];
            v1718 = (void *)((char *)v1418 + v1717);
            v1719 = (void *)((char *)v1419 + v1717);
            v1720 = v1719[1];
            *v1718 = *v1719;
            v1718[1] = v1720;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1418, 0, 1, (uint64_t)v1420);
            v18 = v2741;
            v402 = v2690;
            v913 = v2712;
            v396 = v2717;
          }
          v1721 = v578[12];
          v1722 = (void *)((char *)v402 + v1721);
          v1723 = (void *)((char *)v913 + v1721);
          v1724 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1723, 1, (uint64_t)v1724))
          {
            v1725 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v1722, v1723, *(void *)(*(void *)(v1725 - 8) + 64));
          }
          else
          {
            v1726 = v1723[1];
            *v1722 = *v1723;
            v1722[1] = v1726;
            v1727 = v1723[3];
            v1722[2] = v1723[2];
            v1722[3] = v1727;
            v1728 = v1723[5];
            v1722[4] = v1723[4];
            v1722[5] = v1728;
            v1729 = v1723[7];
            v1722[6] = v1723[6];
            v1722[7] = v1729;
            v1730 = v1723[9];
            v1722[8] = v1723[8];
            v1722[9] = v1730;
            v1731 = v1723[11];
            v1722[10] = v1723[10];
            v1722[11] = v1731;
            *((unsigned char *)v1722 + 96) = *((unsigned char *)v1723 + 96);
            v1732 = v1723[14];
            v1722[13] = v1723[13];
            v1722[14] = v1732;
            v1733 = v1723[16];
            v1722[15] = v1723[15];
            v1722[16] = v1733;
            v1734 = v1724[14];
            v2766 = (char *)v1722 + v1734;
            v1735 = (char *)v1723 + v1734;
            v1736 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1735, 1, v1736))
            {
              v1737 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2766, v1735, *(void *)(*(void *)(v1737 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1736 - 8) + 16))(v2766, v1735, v1736);
              __swift_storeEnumTagSinglePayload((uint64_t)v2766, 0, 1, v1736);
            }
            v1840 = v1724[15];
            v1841 = (char *)v1722 + v1840;
            v1842 = (char *)v1723 + v1840;
            v578 = v2682;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1723 + v1840, 1, v1736))
            {
              v1843 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1841, v1842, *(void *)(*(void *)(v1843 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1736 - 8) + 16))(v1841, v1842, v1736);
              __swift_storeEnumTagSinglePayload((uint64_t)v1841, 0, 1, v1736);
            }
            v1852 = v1724[16];
            v1853 = (void *)((char *)v1722 + v1852);
            v1854 = (void *)((char *)v1723 + v1852);
            v1855 = v1854[1];
            *v1853 = *v1854;
            v1853[1] = v1855;
            v1856 = v1724[17];
            v1857 = (void *)((char *)v1722 + v1856);
            v1858 = (void *)((char *)v1723 + v1856);
            v1859 = v1858[1];
            *v1857 = *v1858;
            v1857[1] = v1859;
            v1860 = v1724[18];
            v1861 = (void *)((char *)v1722 + v1860);
            v1862 = (void *)((char *)v1723 + v1860);
            v2768 = v1862[1];
            *v1861 = *v1862;
            v1861[1] = v2768;
            v1863 = v1724[19];
            v1864 = (void *)((char *)v1722 + v1863);
            v1865 = (void *)((char *)v1723 + v1863);
            v2679 = (void *)v1865[1];
            *v1864 = *v1865;
            v1864[1] = v2679;
            v1866 = v1724[20];
            v1867 = (void *)((char *)v1722 + v1866);
            v1868 = (void *)((char *)v1723 + v1866);
            v2659 = v1868[1];
            *v1867 = *v1868;
            v1867[1] = v2659;
            *(void *)((char *)v1722 + v1724[21]) = *(void *)((char *)v1723 + v1724[21]);
            *(void *)((char *)v1722 + v1724[22]) = *(void *)((char *)v1723 + v1724[22]);
            v1869 = v1724[23];
            v1870 = (char *)v1722 + v1869;
            v1871 = (char *)v1723 + v1869;
            *(void *)v1870 = *(void *)v1871;
            v1870[8] = v1871[8];
            v1872 = v1724[24];
            v1873 = (char *)v1722 + v1872;
            v1874 = (char *)v1723 + v1872;
            *(void *)v1873 = *(void *)v1874;
            v1873[8] = v1874[8];
            v1875 = v1724[25];
            v1876 = (void *)((char *)v1722 + v1875);
            v1877 = (void *)((char *)v1723 + v1875);
            v1878 = v1877[1];
            *v1876 = *v1877;
            v1876[1] = v1878;
            v1879 = v1724[26];
            v1880 = (void *)((char *)v1722 + v1879);
            v1881 = (void *)((char *)v1723 + v1879);
            v1882 = v1881[1];
            *v1880 = *v1881;
            v1880[1] = v1882;
            v1883 = v1724[27];
            v1884 = (void *)((char *)v1722 + v1883);
            v1885 = (void *)((char *)v1723 + v1883);
            v1886 = v1885[1];
            *v1884 = *v1885;
            v1884[1] = v1886;
            v1887 = v1724[28];
            v1888 = (void *)((char *)v1722 + v1887);
            v1889 = (void *)((char *)v1723 + v1887);
            v1890 = v1889[1];
            *v1888 = *v1889;
            v1888[1] = v1890;
            v1891 = v1724[29];
            v1892 = (char *)v1722 + v1891;
            v1893 = (char *)v1723 + v1891;
            *(void *)v1892 = *(void *)v1893;
            v1892[8] = v1893[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1722, 0, 1, (uint64_t)v1724);
            v18 = v2741;
            v402 = v2690;
            v913 = v2712;
            v396 = v2717;
          }
          v1894 = v578[13];
          v1895 = (void *)((char *)v402 + v1894);
          v1896 = (void *)((char *)v913 + v1894);
          v1897 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1896, 1, (uint64_t)v1897))
          {
            v1898 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v1895, v1896, *(void *)(*(void *)(v1898 - 8) + 64));
          }
          else
          {
            v1899 = v1896[1];
            *v1895 = *v1896;
            v1895[1] = v1899;
            v1900 = v1896[3];
            v1895[2] = v1896[2];
            v1895[3] = v1900;
            v1901 = v1896[5];
            v1895[4] = v1896[4];
            v1895[5] = v1901;
            v1902 = v1896[7];
            v1895[6] = v1896[6];
            v1895[7] = v1902;
            v1903 = v1896[9];
            v1895[8] = v1896[8];
            v1895[9] = v1903;
            v1904 = v1896[11];
            v1895[10] = v1896[10];
            v1895[11] = v1904;
            *((unsigned char *)v1895 + 96) = *((unsigned char *)v1896 + 96);
            v1905 = v1896[14];
            v1895[13] = v1896[13];
            v1895[14] = v1905;
            v1906 = v1896[16];
            v1895[15] = v1896[15];
            v1895[16] = v1906;
            v1907 = v1897[14];
            v2769 = (char *)v1895 + v1907;
            v1908 = (char *)v1896 + v1907;
            v1909 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1908, 1, v1909))
            {
              v1910 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2769, v1908, *(void *)(*(void *)(v1910 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1909 - 8) + 16))(v2769, v1908, v1909);
              __swift_storeEnumTagSinglePayload((uint64_t)v2769, 0, 1, v1909);
            }
            v2030 = v1897[15];
            v2031 = (void *)((char *)v1895 + v2030);
            v2032 = (void *)((char *)v1896 + v2030);
            v2033 = v2032[1];
            *v2031 = *v2032;
            v2031[1] = v2033;
            v2034 = v1897[16];
            v2035 = (void *)((char *)v1895 + v2034);
            v2036 = (void *)((char *)v1896 + v2034);
            v2037 = v2036[1];
            *v2035 = *v2036;
            v2035[1] = v2037;
            v2038 = v1897[17];
            v2039 = (void *)((char *)v1895 + v2038);
            v2040 = (void *)((char *)v1896 + v2038);
            v2041 = v2040[1];
            *v2039 = *v2040;
            v2039[1] = v2041;
            v2042 = v1897[18];
            v2043 = (void *)((char *)v1895 + v2042);
            v2044 = (void *)((char *)v1896 + v2042);
            v2045 = v2044[1];
            *v2043 = *v2044;
            v2043[1] = v2045;
            v2046 = v1897[19];
            v2047 = (void *)((char *)v1895 + v2046);
            v2048 = (void *)((char *)v1896 + v2046);
            v2049 = v2048[1];
            *v2047 = *v2048;
            v2047[1] = v2049;
            *(void *)((char *)v1895 + v1897[20]) = *(void *)((char *)v1896 + v1897[20]);
            v2050 = v1897[21];
            v2051 = (void *)((char *)v1895 + v2050);
            v2052 = (void *)((char *)v1896 + v2050);
            v2053 = v2052[1];
            *v2051 = *v2052;
            v2051[1] = v2053;
            v2054 = v1897[22];
            v2055 = (void *)((char *)v1895 + v2054);
            v2056 = (void *)((char *)v1896 + v2054);
            v2057 = v2056[1];
            *v2055 = *v2056;
            v2055[1] = v2057;
            v2058 = v1897[23];
            v2059 = (void *)((char *)v1895 + v2058);
            v2060 = (void *)((char *)v1896 + v2058);
            v2061 = v2060[1];
            *v2059 = *v2060;
            v2059[1] = v2061;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1895, 0, 1, (uint64_t)v1897);
            v18 = v2741;
            v578 = v2682;
            v402 = v2690;
            v396 = v2717;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v402, 0, 1, (uint64_t)v578);
          v13 = v2754;
        }
        v2062 = v396[22];
        v2063 = (void *)((char *)v13 + v2062);
        v2064 = (void *)((char *)v18 + v2062);
        v2065 = type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2064, 1, v2065))
        {
          v2066 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v2063, v2064, *(void *)(*(void *)(v2066 - 8) + 64));
          v150 = v2751;
          v2067 = v2754;
        }
        else
        {
          v2068 = v2064[1];
          *v2063 = *v2064;
          v2063[1] = v2068;
          v2069 = v2064[3];
          v2063[2] = v2064[2];
          v2063[3] = v2069;
          v2070 = v2064[5];
          v2063[4] = v2064[4];
          v2063[5] = v2070;
          v2071 = v2064[7];
          v2063[6] = v2064[6];
          v2063[7] = v2071;
          v2072 = v2064[9];
          v2063[8] = v2064[8];
          v2063[9] = v2072;
          v2073 = v2064[11];
          v2063[10] = v2064[10];
          v2063[11] = v2073;
          v2074 = *(int *)(v2065 + 40);
          v2773 = (char *)v2063 + v2074;
          v2075 = (char *)v2064 + v2074;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2075, 1, v2734))
          {
            v2076 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2773, v2075, *(void *)(*(void *)(v2076 - 8) + 64));
          }
          else
          {
            v2728(v2773, v2075, v2734);
            __swift_storeEnumTagSinglePayload((uint64_t)v2773, 0, 1, v2734);
          }
          v2774 = (int *)v2065;
          v2077 = *(int *)(v2065 + 44);
          v2078 = (char *)v2063 + v2077;
          v2079 = (char *)v2064 + v2077;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2064 + v2077, 1, v2734))
          {
            v2080 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2078, v2079, *(void *)(*(void *)(v2080 - 8) + 64));
          }
          else
          {
            v2728(v2078, v2079, v2734);
            __swift_storeEnumTagSinglePayload((uint64_t)v2078, 0, 1, v2734);
          }
          v150 = v2751;
          v2081 = v2774[12];
          v2082 = (void *)((char *)v2063 + v2081);
          v2083 = (void *)((char *)v2064 + v2081);
          v2084 = v2083[1];
          *v2082 = *v2083;
          v2082[1] = v2084;
          v2085 = v2774[13];
          v2086 = (void *)((char *)v2063 + v2085);
          v2087 = (void *)((char *)v2064 + v2085);
          v2088 = v2087[1];
          *v2086 = *v2087;
          v2086[1] = v2088;
          v2089 = v2774[14];
          v2090 = (void *)((char *)v2063 + v2089);
          v2091 = (void *)((char *)v2064 + v2089);
          v2092 = v2091[1];
          *v2090 = *v2091;
          v2090[1] = v2092;
          v2093 = v2774[15];
          v2094 = (char *)v2063 + v2093;
          v2095 = (char *)v2064 + v2093;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2095, 1, v2734))
          {
            v2096 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2094, v2095, *(void *)(*(void *)(v2096 - 8) + 64));
          }
          else
          {
            v2728(v2094, v2095, v2734);
            __swift_storeEnumTagSinglePayload((uint64_t)v2094, 0, 1, v2734);
          }
          v2097 = v2774[16];
          v2098 = (void *)((char *)v2063 + v2097);
          v2099 = (void *)((char *)v2064 + v2097);
          v2100 = v2099[1];
          *v2098 = *v2099;
          v2098[1] = v2100;
          v2101 = v2774[17];
          v2102 = (void *)((char *)v2063 + v2101);
          v2103 = (void *)((char *)v2064 + v2101);
          v2104 = v2103[1];
          *v2102 = *v2103;
          v2102[1] = v2104;
          v2105 = v2774[18];
          v2106 = (void *)((char *)v2063 + v2105);
          v2107 = (void *)((char *)v2064 + v2105);
          v2752 = v2107[1];
          *v2106 = *v2107;
          v2106[1] = v2752;
          v2108 = v2774[19];
          v2109 = (void *)((char *)v2063 + v2108);
          v2110 = (void *)((char *)v2064 + v2108);
          v2111 = v2110[1];
          *v2109 = *v2110;
          v2109[1] = v2111;
          v2112 = v2774[20];
          v2113 = (void *)((char *)v2063 + v2112);
          v2114 = (void *)((char *)v2064 + v2112);
          v2115 = v2114[1];
          *v2113 = *v2114;
          v2113[1] = v2115;
          v2116 = v2774[21];
          v2117 = (void *)((char *)v2063 + v2116);
          v2118 = (void *)((char *)v2064 + v2116);
          v2119 = v2118[1];
          *v2117 = *v2118;
          v2117[1] = v2119;
          v2120 = v2774[22];
          v2121 = (void *)((char *)v2063 + v2120);
          v2122 = (void *)((char *)v2064 + v2120);
          v2123 = v2122[1];
          *v2121 = *v2122;
          v2121[1] = v2123;
          v2124 = v2774[23];
          v2125 = (void *)((char *)v2063 + v2124);
          v2126 = (void *)((char *)v2064 + v2124);
          v2127 = v2126[1];
          *v2125 = *v2126;
          v2125[1] = v2127;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2063, 0, 1, (uint64_t)v2774);
          v2067 = v2754;
          v18 = v2741;
          v396 = v2717;
        }
        v2128 = v396[23];
        v2129 = (void *)((char *)v2067 + v2128);
        v2130 = (void *)((char *)v18 + v2128);
        v2131 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2130, 1, (uint64_t)v2131))
        {
          v2132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v2129, v2130, *(void *)(*(void *)(v2132 - 8) + 64));
          v2133 = v2754;
        }
        else
        {
          v2134 = v2130[1];
          *v2129 = *v2130;
          v2129[1] = v2134;
          v2135 = v2130[3];
          v2129[2] = v2130[2];
          v2129[3] = v2135;
          v2136 = v2130[5];
          v2129[4] = v2130[4];
          v2129[5] = v2136;
          v2137 = v2130[7];
          v2129[6] = v2130[6];
          v2129[7] = v2137;
          v2138 = v2130[9];
          v2129[8] = v2130[8];
          v2129[9] = v2138;
          v2139 = v2130[11];
          v2129[10] = v2130[10];
          v2129[11] = v2139;
          v2140 = v2131[11];
          v2775 = (char *)v2129 + v2140;
          v2141 = (char *)v2130 + v2140;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2141, 1, v2734))
          {
            v2142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2775, v2141, *(void *)(*(void *)(v2142 - 8) + 64));
          }
          else
          {
            v2728(v2775, v2141, v2734);
            __swift_storeEnumTagSinglePayload((uint64_t)v2775, 0, 1, v2734);
          }
          v2143 = v2131[12];
          v2144 = (void *)((char *)v2129 + v2143);
          v2145 = (void *)((char *)v2130 + v2143);
          v2146 = v2145[1];
          *v2144 = *v2145;
          v2144[1] = v2146;
          *(void *)((char *)v2129 + v2131[13]) = *(void *)((char *)v2130 + v2131[13]);
          v2147 = v2131[14];
          v2148 = (char *)v2129 + v2147;
          v2149 = (char *)v2130 + v2147;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2149, 1, v2734))
          {
            v2150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2148, v2149, *(void *)(*(void *)(v2150 - 8) + 64));
          }
          else
          {
            v2728(v2148, v2149, v2734);
            __swift_storeEnumTagSinglePayload((uint64_t)v2148, 0, 1, v2734);
          }
          v396 = v2717;
          *(void *)((char *)v2129 + v2131[15]) = *(void *)((char *)v2130 + v2131[15]);
          *(void *)((char *)v2129 + v2131[16]) = *(void *)((char *)v2130 + v2131[16]);
          v2151 = v2131[17];
          v2152 = (void *)((char *)v2129 + v2151);
          v2153 = (void *)((char *)v2130 + v2151);
          v2154 = v2153[1];
          *v2152 = *v2153;
          v2152[1] = v2154;
          *(void *)((char *)v2129 + v2131[18]) = *(void *)((char *)v2130 + v2131[18]);
          *(void *)((char *)v2129 + v2131[19]) = *(void *)((char *)v2130 + v2131[19]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2129, 0, 1, (uint64_t)v2131);
          v2133 = v2754;
          v18 = v2741;
        }
        v2155 = v396[24];
        v2156 = (void *)((char *)v2133 + v2155);
        v2157 = (void *)((char *)v18 + v2155);
        v2158 = type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2157, 1, v2158))
        {
          v2159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v2156, v2157, *(void *)(*(void *)(v2159 - 8) + 64));
          v22 = v2754;
        }
        else
        {
          v2160 = v2157[1];
          *v2156 = *v2157;
          v2156[1] = v2160;
          v2161 = v2157[3];
          v2156[2] = v2157[2];
          v2156[3] = v2161;
          v2162 = v2157[5];
          v2156[4] = v2157[4];
          v2156[5] = v2162;
          v2163 = (int *)v2158;
          v2164 = v2157[7];
          v2156[6] = v2157[6];
          v2156[7] = v2164;
          v2776 = v2163;
          v2165 = v2163[8];
          v2166 = (char *)v2156 + v2165;
          v2167 = (char *)v2157 + v2165;
          v2168 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2167, 1, v2168))
          {
            v2169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2166, v2167, *(void *)(*(void *)(v2169 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2168 - 8) + 16))(v2166, v2167, v2168);
            __swift_storeEnumTagSinglePayload((uint64_t)v2166, 0, 1, v2168);
          }
          v2170 = v2776[9];
          v2171 = (void *)((char *)v2156 + v2170);
          v2172 = (void *)((char *)v2157 + v2170);
          v2173 = v2172[1];
          *v2171 = *v2172;
          v2171[1] = v2173;
          v2174 = v2776[10];
          v2175 = (void *)((char *)v2156 + v2174);
          v2176 = (void *)((char *)v2157 + v2174);
          v2177 = v2176[1];
          *v2175 = *v2176;
          v2175[1] = v2177;
          v2178 = v2776[11];
          v2179 = (void *)((char *)v2156 + v2178);
          v2180 = (void *)((char *)v2157 + v2178);
          v2181 = v2180[1];
          *v2179 = *v2180;
          v2179[1] = v2181;
          v2182 = v2776[12];
          v2183 = (char *)v2156 + v2182;
          v2184 = (char *)v2157 + v2182;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2184, 1, v2734))
          {
            v2185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2183, v2184, *(void *)(*(void *)(v2185 - 8) + 64));
          }
          else
          {
            v2728(v2183, v2184, v2734);
            __swift_storeEnumTagSinglePayload((uint64_t)v2183, 0, 1, v2734);
          }
          v2186 = v2776[13];
          v2187 = (char *)v2156 + v2186;
          v2188 = (char *)v2157 + v2186;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2157 + v2186, 1, v2734))
          {
            v2189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2187, v2188, *(void *)(*(void *)(v2189 - 8) + 64));
          }
          else
          {
            v2728(v2187, v2188, v2734);
            __swift_storeEnumTagSinglePayload((uint64_t)v2187, 0, 1, v2734);
          }
          v2190 = v2776[14];
          v2191 = (char *)v2156 + v2190;
          v2192 = (char *)v2157 + v2190;
          *(void *)v2191 = *(void *)v2192;
          v2191[8] = v2192[8];
          v2193 = v2776[15];
          v2194 = (void *)((char *)v2156 + v2193);
          v2195 = (void *)((char *)v2157 + v2193);
          v2196 = v2195[1];
          *v2194 = *v2195;
          v2194[1] = v2196;
          v2197 = v2776[16];
          v2198 = (void *)((char *)v2156 + v2197);
          v2199 = (void *)((char *)v2157 + v2197);
          v2200 = v2199[1];
          *v2198 = *v2199;
          v2198[1] = v2200;
          v2201 = v2776[17];
          v2202 = (void *)((char *)v2156 + v2201);
          v2203 = (void *)((char *)v2157 + v2201);
          v2204 = v2203[1];
          *v2202 = *v2203;
          v2202[1] = v2204;
          v2205 = v2776[18];
          v2206 = (void *)((char *)v2156 + v2205);
          v2207 = (void *)((char *)v2157 + v2205);
          v2208 = v2207[1];
          *v2206 = *v2207;
          v2206[1] = v2208;
          v2209 = v2776[19];
          v2210 = (void *)((char *)v2156 + v2209);
          v2211 = (void *)((char *)v2157 + v2209);
          v2212 = v2211[1];
          *v2210 = *v2211;
          v2210[1] = v2212;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2156, 0, 1, (uint64_t)v2776);
          v22 = v2754;
          v18 = v2741;
          v396 = v2717;
        }
        v2213 = v396[25];
        v2214 = (void *)((char *)v22 + v2213);
        v2215 = (void *)((char *)v18 + v2213);
        v2216 = *(void *)((char *)v18 + v2213 + 8);
        if (v2216)
        {
          *v2214 = *v2215;
          v2214[1] = v2216;
          v2217 = v2215[3];
          v2214[2] = v2215[2];
          v2214[3] = v2217;
          v2218 = v2215[5];
          v2214[4] = v2215[4];
          v2214[5] = v2218;
          v2219 = v2215[7];
          v2214[6] = v2215[6];
          v2214[7] = v2219;
          v2220 = v2215[9];
          v2214[8] = v2215[8];
          v2214[9] = v2220;
          v2221 = v2215[11];
          v2214[10] = v2215[10];
          v2214[11] = v2221;
          v2222 = v2215[13];
          v2214[12] = v2215[12];
          v2214[13] = v2222;
          v2777 = v2215[15];
          v2214[14] = v2215[14];
          v2214[15] = v2777;
          v2223 = v2215[17];
          v2214[16] = v2215[16];
          v2214[17] = v2223;
          swift_bridgeObjectRetain();
          v22 = v2754;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v18 = v2741;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          memcpy(v2214, v2215, 0x90uLL);
        }
LABEL_172:
        v21 = a3;
        goto LABEL_522;
    }
  }
  v2424 = *(int *)(v21 + 52);
  v2425 = *(int *)(v21 + 56);
  v2426 = (void *)(v20 + v2424);
  v2427 = (void *)((char *)v2786 + v2424);
  v2428 = v2427[1];
  *v2426 = *v2427;
  v2426[1] = v2428;
  *(void *)(v20 + v2425) = *(void *)((char *)v2786 + v2425);
  swift_bridgeObjectRetain();
  swift_retain();
  return v20;
}

#error "2582E18CC: too big function (funcsize=0)"

uint64_t initializeWithTake for SearchSpotlightEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(int *)(a3 + 48);
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v9 = type metadata accessor for SearchResult(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for SearchResultItem(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        long long v12 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v12;
        long long v13 = v8[3];
        v7[2] = v8[2];
        v7[3] = v13;
        long long v14 = v8[5];
        v7[4] = v8[4];
        v7[5] = v14;
        v15 = (int *)type metadata accessor for EmailDocument(0);
        uint64_t v16 = v15[12];
        v17 = (char *)v7 + v16;
        v18 = (char *)v8 + v16;
        uint64_t v19 = type metadata accessor for Date();
        v1146 = *(void (**)(char *, char *))(*(void *)(v19 - 8) + 32);
        uint64_t v1149 = v19;
        v1146(v17, v18);
        *(void *)((char *)v7 + v15[13]) = *(void *)((char *)v8 + v15[13]);
        *(void *)((char *)v7 + v15[14]) = *(void *)((char *)v8 + v15[14]);
        *(void *)((char *)v7 + v15[15]) = *(void *)((char *)v8 + v15[15]);
        *((unsigned char *)v7 + v15[16]) = *((unsigned char *)v8 + v15[16]);
        *((unsigned char *)v7 + v15[17]) = *((unsigned char *)v8 + v15[17]);
        *(_OWORD *)((char *)v7 + v15[18]) = *(_OWORD *)((char *)v8 + v15[18]);
        uint64_t v20 = v15[19];
        v21 = (char *)v7 + v20;
        v22 = (char *)v8 + v20;
        long long v23 = *((_OWORD *)v22 + 1);
        *(_OWORD *)v21 = *(_OWORD *)v22;
        *((_OWORD *)v21 + 1) = v23;
        *((void *)v21 + 4) = *((void *)v22 + 4);
        *(_OWORD *)((char *)v7 + v15[20]) = *(_OWORD *)((char *)v8 + v15[20]);
        v1182 = v15;
        uint64_t v24 = v15[21];
        v25 = (_OWORD *)((char *)v7 + v24);
        v26 = (_OWORD *)((char *)v8 + v24);
        v27 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v1185 = v9;
        if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, (uint64_t)v27))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          _OWORD *v25 = *v26;
          uint64_t v239 = v27[5];
          v240 = (char *)v26;
          v241 = (_OWORD *)((char *)v25 + v239);
          v1152 = v240;
          v242 = &v240[v239];
          uint64_t v243 = type metadata accessor for RentalCarReservation(0);
          __src = v25;
          v1128 = v27;
          if (__swift_getEnumTagSinglePayload((uint64_t)v242, 1, v243))
          {
            uint64_t v244 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v241, v242, *(void *)(*(void *)(v244 - 8) + 64));
          }
          else
          {
            long long v366 = *((_OWORD *)v242 + 1);
            _OWORD *v241 = *(_OWORD *)v242;
            v241[1] = v366;
            long long v367 = *((_OWORD *)v242 + 3);
            v241[2] = *((_OWORD *)v242 + 2);
            v241[3] = v367;
            long long v368 = *((_OWORD *)v242 + 5);
            v241[4] = *((_OWORD *)v242 + 4);
            v241[5] = v368;
            long long v369 = *((_OWORD *)v242 + 7);
            v241[6] = *((_OWORD *)v242 + 6);
            v241[7] = v369;
            *((unsigned char *)v241 + 128) = v242[128];
            *(_WORD *)((char *)v241 + 129) = *(_WORD *)(v242 + 129);
            *((void *)v241 + 17) = *((void *)v242 + 17);
            long long v370 = *((_OWORD *)v242 + 10);
            v241[9] = *((_OWORD *)v242 + 9);
            v241[10] = v370;
            long long v371 = *((_OWORD *)v242 + 12);
            v241[11] = *((_OWORD *)v242 + 11);
            v241[12] = v371;
            long long v372 = *((_OWORD *)v242 + 14);
            v241[13] = *((_OWORD *)v242 + 13);
            v241[14] = v372;
            v241[15] = *((_OWORD *)v242 + 15);
            *((void *)v241 + 32) = *((void *)v242 + 32);
            *(_OWORD *)((char *)v241 + 264) = *(_OWORD *)(v242 + 264);
            *(_OWORD *)((char *)v241 + 280) = *(_OWORD *)(v242 + 280);
            *(_OWORD *)((char *)v241 + 296) = *(_OWORD *)(v242 + 296);
            *(_OWORD *)((char *)v241 + 312) = *(_OWORD *)(v242 + 312);
            *(_OWORD *)((char *)v241 + 328) = *(_OWORD *)(v242 + 328);
            *(_OWORD *)((char *)v241 + 344) = *(_OWORD *)(v242 + 344);
            *(_OWORD *)((char *)v241 + 360) = *(_OWORD *)(v242 + 360);
            *((unsigned char *)v241 + 384) = v242[384];
            *((void *)v241 + 47) = *((void *)v242 + 47);
            *(_OWORD *)((char *)v241 + 392) = *(_OWORD *)(v242 + 392);
            *(_OWORD *)((char *)v241 + 408) = *(_OWORD *)(v242 + 408);
            uint64_t v373 = *(int *)(v243 + 140);
            v374 = (char *)v241 + v373;
            v375 = &v242[v373];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v242[v373], 1, v1149))
            {
              uint64_t v376 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v374, v375, *(void *)(*(void *)(v376 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(v374, v375, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)v374, 0, 1, v1149);
            }
            uint64_t v399 = *(int *)(v243 + 144);
            v400 = (char *)v241 + v399;
            v401 = &v242[v399];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v242[v399], 1, v1149))
            {
              uint64_t v402 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v400, v401, *(void *)(*(void *)(v402 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(v400, v401, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)v400, 0, 1, v1149);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v241, 0, 1, v243);
            v25 = __src;
            v27 = v1128;
          }
          uint64_t v412 = v27[6];
          v413 = (_OWORD *)((char *)v25 + v412);
          v414 = &v1152[v412];
          uint64_t v415 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v414, 1, v415))
          {
            uint64_t v416 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v413, v414, *(void *)(*(void *)(v416 - 8) + 64));
          }
          else
          {
            long long v417 = *((_OWORD *)v414 + 1);
            _OWORD *v413 = *(_OWORD *)v414;
            v413[1] = v417;
            long long v418 = *((_OWORD *)v414 + 3);
            v413[2] = *((_OWORD *)v414 + 2);
            v413[3] = v418;
            long long v419 = *((_OWORD *)v414 + 5);
            v413[4] = *((_OWORD *)v414 + 4);
            v413[5] = v419;
            long long v420 = *((_OWORD *)v414 + 7);
            v413[6] = *((_OWORD *)v414 + 6);
            v413[7] = v420;
            *((unsigned char *)v413 + 128) = v414[128];
            *(_WORD *)((char *)v413 + 129) = *(_WORD *)(v414 + 129);
            *((void *)v413 + 17) = *((void *)v414 + 17);
            long long v421 = *((_OWORD *)v414 + 10);
            v413[9] = *((_OWORD *)v414 + 9);
            v413[10] = v421;
            long long v422 = *((_OWORD *)v414 + 12);
            v413[11] = *((_OWORD *)v414 + 11);
            v413[12] = v422;
            *((void *)v413 + 26) = *((void *)v414 + 26);
            *(_OWORD *)((char *)v413 + 216) = *(_OWORD *)(v414 + 216);
            *(_OWORD *)((char *)v413 + 232) = *(_OWORD *)(v414 + 232);
            *(_OWORD *)((char *)v413 + 248) = *(_OWORD *)(v414 + 248);
            *(_OWORD *)((char *)v413 + 264) = *(_OWORD *)(v414 + 264);
            *((unsigned char *)v413 + 296) = v414[296];
            uint64_t v423 = *((void *)v414 + 36);
            *((void *)v413 + 35) = *((void *)v414 + 35);
            *((void *)v413 + 36) = v423;
            uint64_t v424 = *(int *)(v415 + 112);
            __dst = (char *)v413 + v424;
            v425 = &v414[v424];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v414[v424], 1, v1149))
            {
              uint64_t v426 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dst, v425, *(void *)(*(void *)(v426 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(__dst, v425, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v1149);
            }
            uint64_t v458 = *(int *)(v415 + 116);
            __dsta = (char *)v413 + v458;
            v459 = &v414[v458];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v414[v458], 1, v1149))
            {
              uint64_t v460 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dsta, v459, *(void *)(*(void *)(v460 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(__dsta, v459, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v1149);
            }
            v27 = v1128;
            __swift_storeEnumTagSinglePayload((uint64_t)v413, 0, 1, v415);
            v25 = __src;
          }
          uint64_t v469 = v27[7];
          v470 = (_OWORD *)((char *)v25 + v469);
          v471 = &v1152[v469];
          uint64_t v472 = type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v471, 1, v472))
          {
            uint64_t v473 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v470, v471, *(void *)(*(void *)(v473 - 8) + 64));
          }
          else
          {
            long long v474 = *((_OWORD *)v471 + 1);
            _OWORD *v470 = *(_OWORD *)v471;
            v470[1] = v474;
            long long v475 = *((_OWORD *)v471 + 3);
            v470[2] = *((_OWORD *)v471 + 2);
            v470[3] = v475;
            long long v476 = *((_OWORD *)v471 + 5);
            v470[4] = *((_OWORD *)v471 + 4);
            v470[5] = v476;
            long long v477 = *((_OWORD *)v471 + 7);
            v470[6] = *((_OWORD *)v471 + 6);
            v470[7] = v477;
            *((unsigned char *)v470 + 128) = v471[128];
            *(_WORD *)((char *)v470 + 129) = *(_WORD *)(v471 + 129);
            *((void *)v470 + 17) = *((void *)v471 + 17);
            long long v478 = *((_OWORD *)v471 + 10);
            v470[9] = *((_OWORD *)v471 + 9);
            v470[10] = v478;
            long long v479 = *((_OWORD *)v471 + 12);
            v470[11] = *((_OWORD *)v471 + 11);
            v470[12] = v479;
            long long v480 = *((_OWORD *)v471 + 14);
            v470[13] = *((_OWORD *)v471 + 13);
            v470[14] = v480;
            *((void *)v470 + 30) = *((void *)v471 + 30);
            *(_OWORD *)((char *)v470 + 248) = *(_OWORD *)(v471 + 248);
            *(_OWORD *)((char *)v470 + 264) = *(_OWORD *)(v471 + 264);
            *((unsigned char *)v470 + 296) = v471[296];
            uint64_t v481 = *((void *)v471 + 36);
            *((void *)v470 + 35) = *((void *)v471 + 35);
            *((void *)v470 + 36) = v481;
            v470[19] = *((_OWORD *)v471 + 19);
            __dstb = (int *)v472;
            uint64_t v482 = *(int *)(v472 + 116);
            v483 = (char *)v470 + v482;
            v484 = &v471[v482];
            uint64_t v485 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v484, 1, v485))
            {
              uint64_t v486 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v483, v484, *(void *)(*(void *)(v486 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v485 - 8) + 32))(v483, v484, v485);
              __swift_storeEnumTagSinglePayload((uint64_t)v483, 0, 1, v485);
            }
            *(_OWORD *)((char *)v470 + __dstb[30]) = *(_OWORD *)&v471[__dstb[30]];
            uint64_t v521 = __dstb[31];
            v522 = (char *)v470 + v521;
            v523 = &v471[v521];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v471[v521], 1, v1149))
            {
              uint64_t v524 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v522, v523, *(void *)(*(void *)(v524 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(v522, v523, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)v522, 0, 1, v1149);
            }
            uint64_t v532 = __dstb[32];
            v533 = (char *)v470 + v532;
            v534 = &v471[v532];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v471[v532], 1, v1149))
            {
              uint64_t v535 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v533, v534, *(void *)(*(void *)(v535 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(v533, v534, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)v533, 0, 1, v1149);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v470, 0, 1, (uint64_t)__dstb);
            v25 = __src;
            v27 = v1128;
          }
          uint64_t v544 = v27[8];
          v545 = (_OWORD *)((char *)v25 + v544);
          v546 = &v1152[v544];
          uint64_t v547 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v546, 1, v547))
          {
            uint64_t v548 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v545, v546, *(void *)(*(void *)(v548 - 8) + 64));
          }
          else
          {
            long long v549 = *((_OWORD *)v546 + 1);
            _OWORD *v545 = *(_OWORD *)v546;
            v545[1] = v549;
            long long v550 = *((_OWORD *)v546 + 3);
            v545[2] = *((_OWORD *)v546 + 2);
            v545[3] = v550;
            long long v551 = *((_OWORD *)v546 + 5);
            v545[4] = *((_OWORD *)v546 + 4);
            v545[5] = v551;
            long long v552 = *((_OWORD *)v546 + 7);
            v545[6] = *((_OWORD *)v546 + 6);
            v545[7] = v552;
            *((unsigned char *)v545 + 128) = v546[128];
            *(_WORD *)((char *)v545 + 129) = *(_WORD *)(v546 + 129);
            *((void *)v545 + 17) = *((void *)v546 + 17);
            long long v553 = *((_OWORD *)v546 + 10);
            v545[9] = *((_OWORD *)v546 + 9);
            v545[10] = v553;
            long long v554 = *((_OWORD *)v546 + 12);
            v545[11] = *((_OWORD *)v546 + 11);
            v545[12] = v554;
            long long v555 = *((_OWORD *)v546 + 14);
            v545[13] = *((_OWORD *)v546 + 13);
            v545[14] = v555;
            long long v556 = *((_OWORD *)v546 + 16);
            v545[15] = *((_OWORD *)v546 + 15);
            v545[16] = v556;
            *((unsigned char *)v545 + 280) = v546[280];
            *((void *)v545 + 34) = *((void *)v546 + 34);
            v545[18] = *((_OWORD *)v546 + 18);
            uint64_t v557 = *(int *)(v547 + 108);
            __dstc = (char *)v545 + v557;
            v558 = &v546[v557];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v546[v557], 1, v1149))
            {
              uint64_t v559 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dstc, v558, *(void *)(*(void *)(v559 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(__dstc, v558, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstc, 0, 1, v1149);
            }
            uint64_t v593 = *(int *)(v547 + 112);
            __dstd = (char *)v545 + v593;
            v594 = &v546[v593];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v546[v593], 1, v1149))
            {
              uint64_t v595 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dstd, v594, *(void *)(*(void *)(v595 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(__dstd, v594, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstd, 0, 1, v1149);
            }
            v27 = v1128;
            __swift_storeEnumTagSinglePayload((uint64_t)v545, 0, 1, v547);
            v25 = __src;
          }
          uint64_t v604 = v27[9];
          v605 = (_OWORD *)((char *)v25 + v604);
          v606 = &v1152[v604];
          v607 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v606, 1, (uint64_t)v607))
          {
            uint64_t v608 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v605, v606, *(void *)(*(void *)(v608 - 8) + 64));
          }
          else
          {
            long long v609 = *((_OWORD *)v606 + 1);
            _OWORD *v605 = *(_OWORD *)v606;
            v605[1] = v609;
            long long v610 = *((_OWORD *)v606 + 3);
            v605[2] = *((_OWORD *)v606 + 2);
            v605[3] = v610;
            long long v611 = *((_OWORD *)v606 + 5);
            v605[4] = *((_OWORD *)v606 + 4);
            v605[5] = v611;
            long long v612 = *((_OWORD *)v606 + 7);
            v605[6] = *((_OWORD *)v606 + 6);
            v605[7] = v612;
            *((unsigned char *)v605 + 128) = v606[128];
            *(_WORD *)((char *)v605 + 129) = *(_WORD *)(v606 + 129);
            *((void *)v605 + 17) = *((void *)v606 + 17);
            long long v613 = *((_OWORD *)v606 + 10);
            v605[9] = *((_OWORD *)v606 + 9);
            v605[10] = v613;
            long long v614 = *((_OWORD *)v606 + 12);
            v605[11] = *((_OWORD *)v606 + 11);
            v605[12] = v614;
            long long v615 = *((_OWORD *)v606 + 14);
            v605[13] = *((_OWORD *)v606 + 13);
            v605[14] = v615;
            v605[15] = *((_OWORD *)v606 + 15);
            uint64_t v616 = v607[24];
            v617 = (char *)v605 + v616;
            v618 = &v606[v616];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v606[v616], 1, v1149))
            {
              uint64_t v619 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v617, v618, *(void *)(*(void *)(v619 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(v617, v618, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)v617, 0, 1, v1149);
            }
            uint64_t v651 = v607[25];
            v652 = (char *)v605 + v651;
            v653 = &v606[v651];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v606[v651], 1, v1149))
            {
              uint64_t v654 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v652, v653, *(void *)(*(void *)(v654 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(v652, v653, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)v652, 0, 1, v1149);
            }
            uint64_t v662 = v607[26];
            v1098 = (char *)v605 + v662;
            v663 = &v606[v662];
            uint64_t v664 = type metadata accessor for URL();
            v25 = __src;
            if (__swift_getEnumTagSinglePayload((uint64_t)v663, 1, v664))
            {
              uint64_t v665 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1098, v663, *(void *)(*(void *)(v665 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v664 - 8) + 32))(v1098, v663, v664);
              __swift_storeEnumTagSinglePayload((uint64_t)v1098, 0, 1, v664);
            }
            v27 = v1128;
            __swift_storeEnumTagSinglePayload((uint64_t)v605, 0, 1, (uint64_t)v607);
          }
          uint64_t v675 = v27[10];
          v676 = (_OWORD *)((char *)v25 + v675);
          v677 = &v1152[v675];
          v678 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v677, 1, (uint64_t)v678))
          {
            uint64_t v679 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v676, v677, *(void *)(*(void *)(v679 - 8) + 64));
          }
          else
          {
            long long v680 = *((_OWORD *)v677 + 1);
            _OWORD *v676 = *(_OWORD *)v677;
            v676[1] = v680;
            long long v681 = *((_OWORD *)v677 + 3);
            v676[2] = *((_OWORD *)v677 + 2);
            v676[3] = v681;
            long long v682 = *((_OWORD *)v677 + 5);
            v676[4] = *((_OWORD *)v677 + 4);
            v676[5] = v682;
            long long v683 = *((_OWORD *)v677 + 7);
            v676[6] = *((_OWORD *)v677 + 6);
            v676[7] = v683;
            *((unsigned char *)v676 + 128) = v677[128];
            *(_WORD *)((char *)v676 + 129) = *(_WORD *)(v677 + 129);
            *((void *)v676 + 17) = *((void *)v677 + 17);
            long long v684 = *((_OWORD *)v677 + 10);
            v676[9] = *((_OWORD *)v677 + 9);
            v676[10] = v684;
            long long v685 = *((_OWORD *)v677 + 12);
            v676[11] = *((_OWORD *)v677 + 11);
            v676[12] = v685;
            v676[13] = *((_OWORD *)v677 + 13);
            uint64_t v686 = v678[22];
            __dste = (char *)v676 + v686;
            v687 = &v677[v686];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v677[v686], 1, v1149))
            {
              uint64_t v688 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dste, v687, *(void *)(*(void *)(v688 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(__dste, v687, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)__dste, 0, 1, v1149);
            }
            uint64_t v718 = v678[23];
            __dstf = (char *)v676 + v718;
            v719 = &v677[v718];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v677[v718], 1, v1149))
            {
              uint64_t v720 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dstf, v719, *(void *)(*(void *)(v720 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(__dstf, v719, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstf, 0, 1, v1149);
            }
            uint64_t v728 = v678[24];
            v729 = (char *)v676 + v728;
            v730 = &v677[v728];
            *(void *)v729 = *(void *)v730;
            v729[8] = v730[8];
            uint64_t v731 = v678[25];
            __dstg = (char *)v676 + v731;
            v732 = &v677[v731];
            uint64_t v733 = type metadata accessor for URL();
            v25 = __src;
            if (__swift_getEnumTagSinglePayload((uint64_t)v732, 1, v733))
            {
              uint64_t v734 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__dstg, v732, *(void *)(*(void *)(v734 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v733 - 8) + 32))(__dstg, v732, v733);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstg, 0, 1, v733);
            }
            v27 = v1128;
            __swift_storeEnumTagSinglePayload((uint64_t)v676, 0, 1, (uint64_t)v678);
          }
          uint64_t v750 = v27[11];
          v751 = (_OWORD *)((char *)v25 + v750);
          v752 = &v1152[v750];
          v753 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v752, 1, (uint64_t)v753))
          {
            uint64_t v754 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v751, v752, *(void *)(*(void *)(v754 - 8) + 64));
          }
          else
          {
            long long v755 = *((_OWORD *)v752 + 1);
            _OWORD *v751 = *(_OWORD *)v752;
            v751[1] = v755;
            long long v756 = *((_OWORD *)v752 + 3);
            v751[2] = *((_OWORD *)v752 + 2);
            v751[3] = v756;
            long long v757 = *((_OWORD *)v752 + 5);
            v751[4] = *((_OWORD *)v752 + 4);
            v751[5] = v757;
            *((unsigned char *)v751 + 96) = v752[96];
            *(_OWORD *)((char *)v751 + 104) = *(_OWORD *)(v752 + 104);
            uint64_t v758 = v753[13];
            v1099 = (char *)v751 + v758;
            v759 = &v752[v758];
            uint64_t v760 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v759, 1, v760))
            {
              uint64_t v761 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1099, v759, *(void *)(*(void *)(v761 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v760 - 8) + 32))(v1099, v759, v760);
              __swift_storeEnumTagSinglePayload((uint64_t)v1099, 0, 1, v760);
            }
            uint64_t v786 = v753[14];
            __dsth = (char *)v751 + v786;
            v787 = &v752[v786];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v752[v786], 1, v760))
            {
              uint64_t v788 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__dsth, v787, *(void *)(*(void *)(v788 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v760 - 8) + 32))(__dsth, v787, v760);
              __swift_storeEnumTagSinglePayload((uint64_t)__dsth, 0, 1, v760);
            }
            *(_OWORD *)((char *)v751 + v753[15]) = *(_OWORD *)&v752[v753[15]];
            *(_OWORD *)((char *)v751 + v753[16]) = *(_OWORD *)&v752[v753[16]];
            *(_OWORD *)((char *)v751 + v753[17]) = *(_OWORD *)&v752[v753[17]];
            uint64_t v796 = v753[18];
            v1097 = &v752[v796];
            v1100 = (char *)v751 + v796;
            uint64_t v797 = type metadata accessor for DateComponents();
            v798 = *(void (**)(char *, char *, uint64_t))(*(void *)(v797 - 8) + 32);
            v798(v1100, v1097, v797);
            v798((char *)v751 + v753[19], &v752[v753[19]], v797);
            *(_OWORD *)((char *)v751 + v753[20]) = *(_OWORD *)&v752[v753[20]];
            *(_OWORD *)((char *)v751 + v753[21]) = *(_OWORD *)&v752[v753[21]];
            *(_OWORD *)((char *)v751 + v753[22]) = *(_OWORD *)&v752[v753[22]];
            *(_OWORD *)((char *)v751 + v753[23]) = *(_OWORD *)&v752[v753[23]];
            *(_OWORD *)((char *)v751 + v753[24]) = *(_OWORD *)&v752[v753[24]];
            *(_OWORD *)((char *)v751 + v753[25]) = *(_OWORD *)&v752[v753[25]];
            *(_OWORD *)((char *)v751 + v753[26]) = *(_OWORD *)&v752[v753[26]];
            *(_OWORD *)((char *)v751 + v753[27]) = *(_OWORD *)&v752[v753[27]];
            *(_OWORD *)((char *)v751 + v753[28]) = *(_OWORD *)&v752[v753[28]];
            *(_OWORD *)((char *)v751 + v753[29]) = *(_OWORD *)&v752[v753[29]];
            *(_OWORD *)((char *)v751 + v753[30]) = *(_OWORD *)&v752[v753[30]];
            *(_OWORD *)((char *)v751 + v753[31]) = *(_OWORD *)&v752[v753[31]];
            *(_OWORD *)((char *)v751 + v753[32]) = *(_OWORD *)&v752[v753[32]];
            *(void *)((char *)v751 + v753[33]) = *(void *)&v752[v753[33]];
            *(void *)((char *)v751 + v753[34]) = *(void *)&v752[v753[34]];
            *(_OWORD *)((char *)v751 + v753[35]) = *(_OWORD *)&v752[v753[35]];
            *(_OWORD *)((char *)v751 + v753[36]) = *(_OWORD *)&v752[v753[36]];
            *(_OWORD *)((char *)v751 + v753[37]) = *(_OWORD *)&v752[v753[37]];
            uint64_t v799 = v753[38];
            __dsti = (char *)v751 + v799;
            v800 = &v752[v799];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v752[v799], 1, v1149))
            {
              uint64_t v801 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__dsti, v800, *(void *)(*(void *)(v801 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v1146)(__dsti, v800, v1149);
              __swift_storeEnumTagSinglePayload((uint64_t)__dsti, 0, 1, v1149);
            }
            v27 = v1128;
            *(_OWORD *)((char *)v751 + v753[39]) = *(_OWORD *)&v752[v753[39]];
            *(_OWORD *)((char *)v751 + v753[40]) = *(_OWORD *)&v752[v753[40]];
            uint64_t v815 = v753[41];
            v816 = (char *)v751 + v815;
            v817 = &v752[v815];
            *(void *)v816 = *(void *)v817;
            v816[8] = v817[8];
            *(_OWORD *)((char *)v751 + v753[42]) = *(_OWORD *)&v752[v753[42]];
            uint64_t v818 = v753[43];
            v819 = (char *)v751 + v818;
            v820 = &v752[v818];
            *(_OWORD *)v819 = *(_OWORD *)v820;
            *(void *)(v819 + 13) = *(void *)(v820 + 13);
            *(_OWORD *)((char *)v751 + v753[44]) = *(_OWORD *)&v752[v753[44]];
            *(_OWORD *)((char *)v751 + v753[45]) = *(_OWORD *)&v752[v753[45]];
            *(_OWORD *)((char *)v751 + v753[46]) = *(_OWORD *)&v752[v753[46]];
            *(_OWORD *)((char *)v751 + v753[47]) = *(_OWORD *)&v752[v753[47]];
            __swift_storeEnumTagSinglePayload((uint64_t)v751, 0, 1, (uint64_t)v753);
            v25 = __src;
          }
          uint64_t v821 = v27[12];
          v822 = (_OWORD *)((char *)v25 + v821);
          v823 = &v1152[v821];
          v824 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v823, 1, (uint64_t)v824))
          {
            uint64_t v825 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v822, v823, *(void *)(*(void *)(v825 - 8) + 64));
          }
          else
          {
            long long v826 = *((_OWORD *)v823 + 1);
            _OWORD *v822 = *(_OWORD *)v823;
            v822[1] = v826;
            long long v827 = *((_OWORD *)v823 + 3);
            v822[2] = *((_OWORD *)v823 + 2);
            v822[3] = v827;
            long long v828 = *((_OWORD *)v823 + 5);
            v822[4] = *((_OWORD *)v823 + 4);
            v822[5] = v828;
            *((unsigned char *)v822 + 96) = v823[96];
            *(_OWORD *)((char *)v822 + 104) = *(_OWORD *)(v823 + 104);
            *(_OWORD *)((char *)v822 + 120) = *(_OWORD *)(v823 + 120);
            uint64_t v829 = v824[14];
            __srcb = (char *)v822 + v829;
            v830 = &v823[v829];
            uint64_t v831 = type metadata accessor for DateComponents();
            __dstj = v830;
            uint64_t v832 = (uint64_t)v830;
            uint64_t v833 = v831;
            if (__swift_getEnumTagSinglePayload(v832, 1, v831))
            {
              uint64_t v834 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__srcb, __dstj, *(void *)(*(void *)(v834 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(*(void *)(v833 - 8) + 32))(__srcb, __dstj, v833);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcb, 0, 1, v833);
            }
            uint64_t v871 = v824[15];
            __dstl = &v823[v871];
            __srce = (char *)v822 + v871;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v823[v871], 1, v833))
            {
              uint64_t v872 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__srce, __dstl, *(void *)(*(void *)(v872 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v833 - 8) + 32))(__srce, __dstl, v833);
              __swift_storeEnumTagSinglePayload((uint64_t)__srce, 0, 1, v833);
            }
            *(_OWORD *)((char *)v822 + v824[16]) = *(_OWORD *)&v823[v824[16]];
            *(_OWORD *)((char *)v822 + v824[17]) = *(_OWORD *)&v823[v824[17]];
            *(_OWORD *)((char *)v822 + v824[18]) = *(_OWORD *)&v823[v824[18]];
            *(_OWORD *)((char *)v822 + v824[19]) = *(_OWORD *)&v823[v824[19]];
            *(_OWORD *)((char *)v822 + v824[20]) = *(_OWORD *)&v823[v824[20]];
            *(void *)((char *)v822 + v824[21]) = *(void *)&v823[v824[21]];
            *(void *)((char *)v822 + v824[22]) = *(void *)&v823[v824[22]];
            uint64_t v878 = v824[23];
            v879 = (char *)v822 + v878;
            v880 = &v823[v878];
            v879[8] = v880[8];
            *(void *)v879 = *(void *)v880;
            uint64_t v881 = v824[24];
            v882 = (char *)v822 + v881;
            v883 = &v823[v881];
            v882[8] = v883[8];
            *(void *)v882 = *(void *)v883;
            *(_OWORD *)((char *)v822 + v824[25]) = *(_OWORD *)&v823[v824[25]];
            *(_OWORD *)((char *)v822 + v824[26]) = *(_OWORD *)&v823[v824[26]];
            *(_OWORD *)((char *)v822 + v824[27]) = *(_OWORD *)&v823[v824[27]];
            *(_OWORD *)((char *)v822 + v824[28]) = *(_OWORD *)&v823[v824[28]];
            uint64_t v884 = v824[29];
            v885 = (char *)v822 + v884;
            v886 = &v823[v884];
            *(void *)v885 = *(void *)v886;
            v885[8] = v886[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v822, 0, 1, (uint64_t)v824);
            v27 = v1128;
          }
          uint64_t v887 = v27[13];
          v888 = (_OWORD *)((char *)v25 + v887);
          v889 = &v1152[v887];
          v890 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v889, 1, (uint64_t)v890))
          {
            uint64_t v891 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v888, v889, *(void *)(*(void *)(v891 - 8) + 64));
          }
          else
          {
            long long v892 = *((_OWORD *)v889 + 1);
            _OWORD *v888 = *(_OWORD *)v889;
            v888[1] = v892;
            long long v893 = *((_OWORD *)v889 + 3);
            v888[2] = *((_OWORD *)v889 + 2);
            v888[3] = v893;
            long long v894 = *((_OWORD *)v889 + 5);
            v888[4] = *((_OWORD *)v889 + 4);
            v888[5] = v894;
            *((unsigned char *)v888 + 96) = v889[96];
            *(_OWORD *)((char *)v888 + 104) = *(_OWORD *)(v889 + 104);
            *(_OWORD *)((char *)v888 + 120) = *(_OWORD *)(v889 + 120);
            uint64_t v895 = v890[14];
            v1155 = (char *)v888 + v895;
            v896 = &v889[v895];
            uint64_t v897 = type metadata accessor for DateComponents();
            __srcg = v896;
            uint64_t v898 = (uint64_t)v896;
            uint64_t v899 = v897;
            if (__swift_getEnumTagSinglePayload(v898, 1, v897))
            {
              uint64_t v900 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1155, __srcg, *(void *)(*(void *)(v900 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(*(void *)(v899 - 8) + 32))(v1155, __srcg, v899);
              __swift_storeEnumTagSinglePayload((uint64_t)v1155, 0, 1, v899);
            }
            *(_OWORD *)((char *)v888 + v890[15]) = *(_OWORD *)&v889[v890[15]];
            *(_OWORD *)((char *)v888 + v890[16]) = *(_OWORD *)&v889[v890[16]];
            *(_OWORD *)((char *)v888 + v890[17]) = *(_OWORD *)&v889[v890[17]];
            *(_OWORD *)((char *)v888 + v890[18]) = *(_OWORD *)&v889[v890[18]];
            *(_OWORD *)((char *)v888 + v890[19]) = *(_OWORD *)&v889[v890[19]];
            *(void *)((char *)v888 + v890[20]) = *(void *)&v889[v890[20]];
            *(_OWORD *)((char *)v888 + v890[21]) = *(_OWORD *)&v889[v890[21]];
            *(_OWORD *)((char *)v888 + v890[22]) = *(_OWORD *)&v889[v890[22]];
            *(_OWORD *)((char *)v888 + v890[23]) = *(_OWORD *)&v889[v890[23]];
            __swift_storeEnumTagSinglePayload((uint64_t)v888, 0, 1, (uint64_t)v890);
            v27 = v1128;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, (uint64_t)v27);
        }
        uint64_t v943 = v1182[22];
        v944 = (_OWORD *)((char *)v7 + v943);
        v945 = (_OWORD *)((char *)v8 + v943);
        v946 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v945, 1, (uint64_t)v946))
        {
          uint64_t v947 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v944, v945, *(void *)(*(void *)(v947 - 8) + 64));
        }
        else
        {
          long long v948 = v945[1];
          _OWORD *v944 = *v945;
          v944[1] = v948;
          long long v949 = v945[3];
          v944[2] = v945[2];
          v944[3] = v949;
          long long v950 = v945[5];
          v944[4] = v945[4];
          v944[5] = v950;
          uint64_t v951 = v946[10];
          v1157 = (char *)v944 + v951;
          v952 = (char *)v945 + v951;
          if (__swift_getEnumTagSinglePayload((uint64_t)v945 + v951, 1, v1149))
          {
            uint64_t v953 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1157, v952, *(void *)(*(void *)(v953 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v1146)(v1157, v952, v1149);
            __swift_storeEnumTagSinglePayload((uint64_t)v1157, 0, 1, v1149);
          }
          uint64_t v954 = v946[11];
          v1158 = (char *)v944 + v954;
          v955 = (char *)v945 + v954;
          if (__swift_getEnumTagSinglePayload((uint64_t)v945 + v954, 1, v1149))
          {
            uint64_t v956 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1158, v955, *(void *)(*(void *)(v956 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v1146)(v1158, v955, v1149);
            __swift_storeEnumTagSinglePayload((uint64_t)v1158, 0, 1, v1149);
          }
          *(_OWORD *)((char *)v944 + v946[12]) = *(_OWORD *)((char *)v945 + v946[12]);
          *(_OWORD *)((char *)v944 + v946[13]) = *(_OWORD *)((char *)v945 + v946[13]);
          *(_OWORD *)((char *)v944 + v946[14]) = *(_OWORD *)((char *)v945 + v946[14]);
          uint64_t v957 = v946[15];
          v1159 = (char *)v944 + v957;
          v958 = (char *)v945 + v957;
          if (__swift_getEnumTagSinglePayload((uint64_t)v945 + v957, 1, v1149))
          {
            uint64_t v959 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1159, v958, *(void *)(*(void *)(v959 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v1146)(v1159, v958, v1149);
            __swift_storeEnumTagSinglePayload((uint64_t)v1159, 0, 1, v1149);
          }
          *(_OWORD *)((char *)v944 + v946[16]) = *(_OWORD *)((char *)v945 + v946[16]);
          *(_OWORD *)((char *)v944 + v946[17]) = *(_OWORD *)((char *)v945 + v946[17]);
          *(_OWORD *)((char *)v944 + v946[18]) = *(_OWORD *)((char *)v945 + v946[18]);
          *(_OWORD *)((char *)v944 + v946[19]) = *(_OWORD *)((char *)v945 + v946[19]);
          *(_OWORD *)((char *)v944 + v946[20]) = *(_OWORD *)((char *)v945 + v946[20]);
          *(_OWORD *)((char *)v944 + v946[21]) = *(_OWORD *)((char *)v945 + v946[21]);
          *(_OWORD *)((char *)v944 + v946[22]) = *(_OWORD *)((char *)v945 + v946[22]);
          *(_OWORD *)((char *)v944 + v946[23]) = *(_OWORD *)((char *)v945 + v946[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v944, 0, 1, (uint64_t)v946);
        }
        uint64_t v960 = v1182[23];
        v961 = (_OWORD *)((char *)v7 + v960);
        v962 = (_OWORD *)((char *)v8 + v960);
        v963 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v962, 1, (uint64_t)v963))
        {
          uint64_t v964 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v961, v962, *(void *)(*(void *)(v964 - 8) + 64));
        }
        else
        {
          long long v965 = v962[1];
          _OWORD *v961 = *v962;
          v961[1] = v965;
          long long v966 = v962[3];
          v961[2] = v962[2];
          v961[3] = v966;
          long long v967 = v962[5];
          v961[4] = v962[4];
          v961[5] = v967;
          uint64_t v968 = v963[11];
          v1160 = (char *)v961 + v968;
          v969 = (char *)v962 + v968;
          if (__swift_getEnumTagSinglePayload((uint64_t)v962 + v968, 1, v1149))
          {
            uint64_t v970 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1160, v969, *(void *)(*(void *)(v970 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v1146)(v1160, v969, v1149);
            __swift_storeEnumTagSinglePayload((uint64_t)v1160, 0, 1, v1149);
          }
          *(_OWORD *)((char *)v961 + v963[12]) = *(_OWORD *)((char *)v962 + v963[12]);
          *(void *)((char *)v961 + v963[13]) = *(void *)((char *)v962 + v963[13]);
          uint64_t v971 = v963[14];
          v1161 = (char *)v961 + v971;
          v972 = (char *)v962 + v971;
          if (__swift_getEnumTagSinglePayload((uint64_t)v962 + v971, 1, v1149))
          {
            uint64_t v973 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1161, v972, *(void *)(*(void *)(v973 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v1146)(v1161, v972, v1149);
            __swift_storeEnumTagSinglePayload((uint64_t)v1161, 0, 1, v1149);
          }
          *(void *)((char *)v961 + v963[15]) = *(void *)((char *)v962 + v963[15]);
          *(void *)((char *)v961 + v963[16]) = *(void *)((char *)v962 + v963[16]);
          *(_OWORD *)((char *)v961 + v963[17]) = *(_OWORD *)((char *)v962 + v963[17]);
          *(void *)((char *)v961 + v963[18]) = *(void *)((char *)v962 + v963[18]);
          *(void *)((char *)v961 + v963[19]) = *(void *)((char *)v962 + v963[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v961, 0, 1, (uint64_t)v963);
        }
        uint64_t v974 = v1182[24];
        v975 = (_OWORD *)((char *)v7 + v974);
        v976 = (_OWORD *)((char *)v8 + v974);
        v977 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v976, 1, (uint64_t)v977))
        {
          uint64_t v978 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v975, v976, *(void *)(*(void *)(v978 - 8) + 64));
        }
        else
        {
          long long v979 = v976[1];
          _OWORD *v975 = *v976;
          v975[1] = v979;
          long long v980 = v976[3];
          v975[2] = v976[2];
          v975[3] = v980;
          uint64_t v981 = v977[8];
          v1162 = (char *)v975 + v981;
          v982 = (char *)v976 + v981;
          uint64_t v983 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v982, 1, v983))
          {
            uint64_t v984 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1162, v982, *(void *)(*(void *)(v984 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v983 - 8) + 32))(v1162, v982, v983);
            __swift_storeEnumTagSinglePayload((uint64_t)v1162, 0, 1, v983);
          }
          *(_OWORD *)((char *)v975 + v977[9]) = *(_OWORD *)((char *)v976 + v977[9]);
          *(_OWORD *)((char *)v975 + v977[10]) = *(_OWORD *)((char *)v976 + v977[10]);
          *(_OWORD *)((char *)v975 + v977[11]) = *(_OWORD *)((char *)v976 + v977[11]);
          uint64_t v985 = v977[12];
          v1163 = (char *)v975 + v985;
          v986 = (char *)v976 + v985;
          if (__swift_getEnumTagSinglePayload((uint64_t)v976 + v985, 1, v1149))
          {
            uint64_t v987 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1163, v986, *(void *)(*(void *)(v987 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v1146)(v1163, v986, v1149);
            __swift_storeEnumTagSinglePayload((uint64_t)v1163, 0, 1, v1149);
          }
          uint64_t v988 = v977[13];
          v1164 = (char *)v975 + v988;
          v989 = (char *)v976 + v988;
          if (__swift_getEnumTagSinglePayload((uint64_t)v976 + v988, 1, v1149))
          {
            uint64_t v990 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1164, v989, *(void *)(*(void *)(v990 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v1146)(v1164, v989, v1149);
            __swift_storeEnumTagSinglePayload((uint64_t)v1164, 0, 1, v1149);
          }
          uint64_t v991 = v977[14];
          v992 = (char *)v975 + v991;
          v993 = (char *)v976 + v991;
          *(void *)v992 = *(void *)v993;
          v992[8] = v993[8];
          *(_OWORD *)((char *)v975 + v977[15]) = *(_OWORD *)((char *)v976 + v977[15]);
          *(_OWORD *)((char *)v975 + v977[16]) = *(_OWORD *)((char *)v976 + v977[16]);
          *(_OWORD *)((char *)v975 + v977[17]) = *(_OWORD *)((char *)v976 + v977[17]);
          *(_OWORD *)((char *)v975 + v977[18]) = *(_OWORD *)((char *)v976 + v977[18]);
          *(_OWORD *)((char *)v975 + v977[19]) = *(_OWORD *)((char *)v976 + v977[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v975, 0, 1, (uint64_t)v977);
        }
        uint64_t v9 = v1185;
        memcpy((char *)v7 + v1182[25], (char *)v8 + v1182[25], 0x90uLL);
        goto LABEL_524;
      case 1u:
        long long v29 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v29;
        long long v30 = v8[3];
        v7[2] = v8[2];
        v7[3] = v30;
        v7[4] = v8[4];
        v1183 = (int *)type metadata accessor for MobileSMSDocument(0);
        uint64_t v31 = v1183[10];
        v32 = (char *)v7 + v31;
        v33 = (char *)v8 + v31;
        uint64_t v34 = type metadata accessor for Date();
        uint64_t v1144 = v34;
        if (__swift_getEnumTagSinglePayload((uint64_t)v33, 1, v34))
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
          __swift_storeEnumTagSinglePayload((uint64_t)v32, 0, 1, v34);
        }
        uint64_t v245 = v1183[11];
        v246 = (char *)v7 + v245;
        v247 = (char *)v8 + v245;
        uint64_t v248 = type metadata accessor for URL();
        uint64_t v1181 = v3;
        if (__swift_getEnumTagSinglePayload((uint64_t)v247, 1, v248))
        {
          uint64_t v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v246, v247, *(void *)(*(void *)(v249 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v248 - 8) + 32))(v246, v247, v248);
          __swift_storeEnumTagSinglePayload((uint64_t)v246, 0, 1, v248);
        }
        uint64_t v303 = v248;
        *(void *)((char *)v7 + v1183[12]) = *(void *)((char *)v8 + v1183[12]);
        *(_OWORD *)((char *)v7 + v1183[13]) = *(_OWORD *)((char *)v8 + v1183[13]);
        *(_OWORD *)((char *)v7 + v1183[14]) = *(_OWORD *)((char *)v8 + v1183[14]);
        *(void *)((char *)v7 + v1183[15]) = *(void *)((char *)v8 + v1183[15]);
        *(void *)((char *)v7 + v1183[16]) = *(void *)((char *)v8 + v1183[16]);
        uint64_t v304 = v1183[17];
        v305 = (char *)v7 + v304;
        v306 = (char *)v8 + v304;
        long long v307 = *((_OWORD *)v306 + 1);
        *(_OWORD *)v305 = *(_OWORD *)v306;
        *((_OWORD *)v305 + 1) = v307;
        *((void *)v305 + 4) = *((void *)v306 + 4);
        *(_OWORD *)((char *)v7 + v1183[18]) = *(_OWORD *)((char *)v8 + v1183[18]);
        uint64_t v308 = v1183[19];
        v309 = (_OWORD *)((char *)v7 + v308);
        v310 = (_OWORD *)((char *)v8 + v308);
        uint64_t v311 = type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v1147 = v303;
        uint64_t v1189 = v9;
        if (__swift_getEnumTagSinglePayload((uint64_t)v310, 1, v311))
        {
          uint64_t v312 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v309, v310, *(void *)(*(void *)(v312 - 8) + 64));
          uint64_t v3 = v1181;
          v313 = v1183;
          uint64_t v314 = v1147;
        }
        else
        {
          _OWORD *v309 = *v310;
          v1151 = (int *)v311;
          v1154 = (char *)v309;
          uint64_t v352 = *(int *)(v311 + 20);
          v353 = (_OWORD *)((char *)v309 + v352);
          v354 = (_OWORD *)((char *)v310 + v352);
          uint64_t v355 = type metadata accessor for RentalCarReservation(0);
          v1130 = v310;
          if (__swift_getEnumTagSinglePayload((uint64_t)v354, 1, v355))
          {
            v356 = v310;
            uint64_t v357 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v353, v354, *(void *)(*(void *)(v357 - 8) + 64));
            v358 = v1151;
            v313 = v1183;
          }
          else
          {
            long long v388 = v354[1];
            _OWORD *v353 = *v354;
            v353[1] = v388;
            long long v389 = v354[3];
            v353[2] = v354[2];
            v353[3] = v389;
            long long v390 = v354[5];
            v353[4] = v354[4];
            v353[5] = v390;
            long long v391 = v354[7];
            v353[6] = v354[6];
            v353[7] = v391;
            *((unsigned char *)v353 + 128) = *((unsigned char *)v354 + 128);
            *(_WORD *)((char *)v353 + 129) = *(_WORD *)((char *)v354 + 129);
            *((void *)v353 + 17) = *((void *)v354 + 17);
            long long v392 = v354[10];
            v353[9] = v354[9];
            v353[10] = v392;
            long long v393 = v354[12];
            v353[11] = v354[11];
            v353[12] = v393;
            long long v394 = v354[14];
            v353[13] = v354[13];
            v353[14] = v394;
            v353[15] = v354[15];
            *((void *)v353 + 32) = *((void *)v354 + 32);
            *(_OWORD *)((char *)v353 + 264) = *(_OWORD *)((char *)v354 + 264);
            *(_OWORD *)((char *)v353 + 280) = *(_OWORD *)((char *)v354 + 280);
            *(_OWORD *)((char *)v353 + 296) = *(_OWORD *)((char *)v354 + 296);
            *(_OWORD *)((char *)v353 + 312) = *(_OWORD *)((char *)v354 + 312);
            *(_OWORD *)((char *)v353 + 328) = *(_OWORD *)((char *)v354 + 328);
            *(_OWORD *)((char *)v353 + 344) = *(_OWORD *)((char *)v354 + 344);
            *(_OWORD *)((char *)v353 + 360) = *(_OWORD *)((char *)v354 + 360);
            *((unsigned char *)v353 + 384) = *((unsigned char *)v354 + 384);
            *((void *)v353 + 47) = *((void *)v354 + 47);
            *(_OWORD *)((char *)v353 + 392) = *(_OWORD *)((char *)v354 + 392);
            *(_OWORD *)((char *)v353 + 408) = *(_OWORD *)((char *)v354 + 408);
            uint64_t v395 = *(int *)(v355 + 140);
            v396 = (char *)v353 + v395;
            v397 = (char *)v354 + v395;
            if (__swift_getEnumTagSinglePayload((uint64_t)v354 + v395, 1, v1144))
            {
              uint64_t v398 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v396, v397, *(void *)(*(void *)(v398 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v396, v397, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v396, 0, 1, v1144);
            }
            uint64_t v407 = v355;
            uint64_t v408 = *(int *)(v355 + 144);
            v409 = (char *)v353 + v408;
            v410 = (char *)v354 + v408;
            if (__swift_getEnumTagSinglePayload((uint64_t)v354 + v408, 1, v1144))
            {
              uint64_t v411 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v409, v410, *(void *)(*(void *)(v411 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v409, v410, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v409, 0, 1, v1144);
            }
            v356 = v1130;
            __swift_storeEnumTagSinglePayload((uint64_t)v353, 0, 1, v407);
            v313 = v1183;
            v358 = v1151;
          }
          uint64_t v442 = v358[6];
          v443 = &v1154[v442];
          v444 = (_OWORD *)((char *)v356 + v442);
          uint64_t v445 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v444, 1, v445))
          {
            uint64_t v446 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v443, v444, *(void *)(*(void *)(v446 - 8) + 64));
          }
          else
          {
            long long v447 = v444[1];
            *(_OWORD *)v443 = *v444;
            *((_OWORD *)v443 + 1) = v447;
            long long v448 = v444[3];
            *((_OWORD *)v443 + 2) = v444[2];
            *((_OWORD *)v443 + 3) = v448;
            long long v449 = v444[5];
            *((_OWORD *)v443 + 4) = v444[4];
            *((_OWORD *)v443 + 5) = v449;
            long long v450 = v444[7];
            *((_OWORD *)v443 + 6) = v444[6];
            *((_OWORD *)v443 + 7) = v450;
            v443[128] = *((unsigned char *)v444 + 128);
            *(_WORD *)(v443 + 129) = *(_WORD *)((char *)v444 + 129);
            *((void *)v443 + 17) = *((void *)v444 + 17);
            long long v451 = v444[10];
            *((_OWORD *)v443 + 9) = v444[9];
            *((_OWORD *)v443 + 10) = v451;
            long long v452 = v444[12];
            *((_OWORD *)v443 + 11) = v444[11];
            *((_OWORD *)v443 + 12) = v452;
            *((void *)v443 + 26) = *((void *)v444 + 26);
            *(_OWORD *)(v443 + 216) = *(_OWORD *)((char *)v444 + 216);
            *(_OWORD *)(v443 + 232) = *(_OWORD *)((char *)v444 + 232);
            *(_OWORD *)(v443 + 248) = *(_OWORD *)((char *)v444 + 248);
            *(_OWORD *)(v443 + 264) = *(_OWORD *)((char *)v444 + 264);
            v443[296] = *((unsigned char *)v444 + 296);
            uint64_t v453 = *((void *)v444 + 36);
            *((void *)v443 + 35) = *((void *)v444 + 35);
            *((void *)v443 + 36) = v453;
            uint64_t v454 = *(int *)(v445 + 112);
            v455 = &v443[v454];
            v456 = (char *)v444 + v454;
            if (__swift_getEnumTagSinglePayload((uint64_t)v444 + v454, 1, v1144))
            {
              uint64_t v457 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v455, v456, *(void *)(*(void *)(v457 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v455, v456, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v455, 0, 1, v1144);
            }
            uint64_t v465 = *(int *)(v445 + 116);
            v466 = &v443[v465];
            v467 = (char *)v444 + v465;
            if (__swift_getEnumTagSinglePayload((uint64_t)v467, 1, v1144))
            {
              uint64_t v468 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v466, v467, *(void *)(*(void *)(v468 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v466, v467, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v466, 0, 1, v1144);
            }
            v356 = v1130;
            __swift_storeEnumTagSinglePayload((uint64_t)v443, 0, 1, v445);
            v313 = v1183;
          }
          uint64_t v504 = v1151[7];
          v505 = &v1154[v504];
          v506 = (_OWORD *)((char *)v356 + v504);
          v507 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v506, 1, (uint64_t)v507))
          {
            uint64_t v508 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v505, v506, *(void *)(*(void *)(v508 - 8) + 64));
          }
          else
          {
            long long v509 = v506[1];
            *(_OWORD *)v505 = *v506;
            *((_OWORD *)v505 + 1) = v509;
            long long v510 = v506[3];
            *((_OWORD *)v505 + 2) = v506[2];
            *((_OWORD *)v505 + 3) = v510;
            long long v511 = v506[5];
            *((_OWORD *)v505 + 4) = v506[4];
            *((_OWORD *)v505 + 5) = v511;
            long long v512 = v506[7];
            *((_OWORD *)v505 + 6) = v506[6];
            *((_OWORD *)v505 + 7) = v512;
            v505[128] = *((unsigned char *)v506 + 128);
            *(_WORD *)(v505 + 129) = *(_WORD *)((char *)v506 + 129);
            *((void *)v505 + 17) = *((void *)v506 + 17);
            long long v513 = v506[10];
            *((_OWORD *)v505 + 9) = v506[9];
            *((_OWORD *)v505 + 10) = v513;
            long long v514 = v506[12];
            *((_OWORD *)v505 + 11) = v506[11];
            *((_OWORD *)v505 + 12) = v514;
            long long v515 = v506[14];
            *((_OWORD *)v505 + 13) = v506[13];
            *((_OWORD *)v505 + 14) = v515;
            *((void *)v505 + 30) = *((void *)v506 + 30);
            *(_OWORD *)(v505 + 248) = *(_OWORD *)((char *)v506 + 248);
            *(_OWORD *)(v505 + 264) = *(_OWORD *)((char *)v506 + 264);
            v505[296] = *((unsigned char *)v506 + 296);
            uint64_t v516 = *((void *)v506 + 36);
            *((void *)v505 + 35) = *((void *)v506 + 35);
            *((void *)v505 + 36) = v516;
            *((_OWORD *)v505 + 19) = v506[19];
            uint64_t v517 = v507[29];
            v518 = &v505[v517];
            v519 = (char *)v506 + v517;
            if (__swift_getEnumTagSinglePayload((uint64_t)v506 + v517, 1, v1147))
            {
              uint64_t v520 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v518, v519, *(void *)(*(void *)(v520 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1147 - 8) + 32))(v518, v519, v1147);
              __swift_storeEnumTagSinglePayload((uint64_t)v518, 0, 1, v1147);
            }
            *(_OWORD *)&v505[v507[30]] = *(_OWORD *)((char *)v506 + v507[30]);
            uint64_t v528 = v507[31];
            v529 = &v505[v528];
            v530 = (char *)v506 + v528;
            if (__swift_getEnumTagSinglePayload((uint64_t)v506 + v528, 1, v1144))
            {
              uint64_t v531 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v529, v530, *(void *)(*(void *)(v531 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v529, v530, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v529, 0, 1, v1144);
            }
            uint64_t v540 = v507[32];
            v541 = &v505[v540];
            v542 = (char *)v506 + v540;
            if (__swift_getEnumTagSinglePayload((uint64_t)v542, 1, v1144))
            {
              uint64_t v543 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v541, v542, *(void *)(*(void *)(v543 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v541, v542, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v541, 0, 1, v1144);
            }
            v356 = v1130;
            __swift_storeEnumTagSinglePayload((uint64_t)v505, 0, 1, (uint64_t)v507);
            v313 = v1183;
          }
          uint64_t v576 = v1151[8];
          v577 = &v1154[v576];
          v578 = (_OWORD *)((char *)v356 + v576);
          uint64_t v579 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v578, 1, v579))
          {
            uint64_t v580 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v577, v578, *(void *)(*(void *)(v580 - 8) + 64));
          }
          else
          {
            long long v581 = v578[1];
            *(_OWORD *)v577 = *v578;
            *((_OWORD *)v577 + 1) = v581;
            long long v582 = v578[3];
            *((_OWORD *)v577 + 2) = v578[2];
            *((_OWORD *)v577 + 3) = v582;
            long long v583 = v578[5];
            *((_OWORD *)v577 + 4) = v578[4];
            *((_OWORD *)v577 + 5) = v583;
            long long v584 = v578[7];
            *((_OWORD *)v577 + 6) = v578[6];
            *((_OWORD *)v577 + 7) = v584;
            v577[128] = *((unsigned char *)v578 + 128);
            *(_WORD *)(v577 + 129) = *(_WORD *)((char *)v578 + 129);
            *((void *)v577 + 17) = *((void *)v578 + 17);
            long long v585 = v578[10];
            *((_OWORD *)v577 + 9) = v578[9];
            *((_OWORD *)v577 + 10) = v585;
            long long v586 = v578[12];
            *((_OWORD *)v577 + 11) = v578[11];
            *((_OWORD *)v577 + 12) = v586;
            long long v587 = v578[14];
            *((_OWORD *)v577 + 13) = v578[13];
            *((_OWORD *)v577 + 14) = v587;
            long long v588 = v578[16];
            *((_OWORD *)v577 + 15) = v578[15];
            *((_OWORD *)v577 + 16) = v588;
            v577[280] = *((unsigned char *)v578 + 280);
            *((void *)v577 + 34) = *((void *)v578 + 34);
            *((_OWORD *)v577 + 18) = v578[18];
            uint64_t v589 = *(int *)(v579 + 108);
            v590 = &v577[v589];
            v591 = (char *)v578 + v589;
            if (__swift_getEnumTagSinglePayload((uint64_t)v578 + v589, 1, v1144))
            {
              uint64_t v592 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v590, v591, *(void *)(*(void *)(v592 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v590, v591, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v590, 0, 1, v1144);
            }
            uint64_t v600 = *(int *)(v579 + 112);
            v601 = &v577[v600];
            v602 = (char *)v578 + v600;
            if (__swift_getEnumTagSinglePayload((uint64_t)v602, 1, v1144))
            {
              uint64_t v603 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v601, v602, *(void *)(*(void *)(v603 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v601, v602, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v601, 0, 1, v1144);
            }
            v356 = v1130;
            __swift_storeEnumTagSinglePayload((uint64_t)v577, 0, 1, v579);
            v313 = v1183;
          }
          uint64_t v635 = v1151[9];
          v636 = &v1154[v635];
          v637 = (_OWORD *)((char *)v356 + v635);
          v638 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v637, 1, (uint64_t)v638))
          {
            uint64_t v639 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v636, v637, *(void *)(*(void *)(v639 - 8) + 64));
          }
          else
          {
            long long v640 = v637[1];
            *(_OWORD *)v636 = *v637;
            *((_OWORD *)v636 + 1) = v640;
            long long v641 = v637[3];
            *((_OWORD *)v636 + 2) = v637[2];
            *((_OWORD *)v636 + 3) = v641;
            long long v642 = v637[5];
            *((_OWORD *)v636 + 4) = v637[4];
            *((_OWORD *)v636 + 5) = v642;
            long long v643 = v637[7];
            *((_OWORD *)v636 + 6) = v637[6];
            *((_OWORD *)v636 + 7) = v643;
            v636[128] = *((unsigned char *)v637 + 128);
            *(_WORD *)(v636 + 129) = *(_WORD *)((char *)v637 + 129);
            *((void *)v636 + 17) = *((void *)v637 + 17);
            long long v644 = v637[10];
            *((_OWORD *)v636 + 9) = v637[9];
            *((_OWORD *)v636 + 10) = v644;
            long long v645 = v637[12];
            *((_OWORD *)v636 + 11) = v637[11];
            *((_OWORD *)v636 + 12) = v645;
            long long v646 = v637[14];
            *((_OWORD *)v636 + 13) = v637[13];
            *((_OWORD *)v636 + 14) = v646;
            *((_OWORD *)v636 + 15) = v637[15];
            uint64_t v647 = v638[24];
            v648 = &v636[v647];
            v649 = (char *)v637 + v647;
            if (__swift_getEnumTagSinglePayload((uint64_t)v637 + v647, 1, v1144))
            {
              uint64_t v650 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v648, v649, *(void *)(*(void *)(v650 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v648, v649, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v648, 0, 1, v1144);
            }
            uint64_t v658 = v638[25];
            v659 = &v636[v658];
            v660 = (char *)v637 + v658;
            if (__swift_getEnumTagSinglePayload((uint64_t)v637 + v658, 1, v1144))
            {
              uint64_t v661 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v659, v660, *(void *)(*(void *)(v661 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v659, v660, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v659, 0, 1, v1144);
            }
            v356 = v1130;
            uint64_t v671 = v638[26];
            v672 = &v636[v671];
            v673 = (char *)v637 + v671;
            if (__swift_getEnumTagSinglePayload((uint64_t)v673, 1, v1147))
            {
              uint64_t v674 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v672, v673, *(void *)(*(void *)(v674 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1147 - 8) + 32))(v672, v673, v1147);
              __swift_storeEnumTagSinglePayload((uint64_t)v672, 0, 1, v1147);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v636, 0, 1, (uint64_t)v638);
            v313 = v1183;
          }
          uint64_t v703 = v1151[10];
          v704 = &v1154[v703];
          v705 = (_OWORD *)((char *)v356 + v703);
          v706 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v705, 1, (uint64_t)v706))
          {
            uint64_t v707 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v704, v705, *(void *)(*(void *)(v707 - 8) + 64));
          }
          else
          {
            long long v708 = v705[1];
            *(_OWORD *)v704 = *v705;
            *((_OWORD *)v704 + 1) = v708;
            long long v709 = v705[3];
            *((_OWORD *)v704 + 2) = v705[2];
            *((_OWORD *)v704 + 3) = v709;
            long long v710 = v705[5];
            *((_OWORD *)v704 + 4) = v705[4];
            *((_OWORD *)v704 + 5) = v710;
            long long v711 = v705[7];
            *((_OWORD *)v704 + 6) = v705[6];
            *((_OWORD *)v704 + 7) = v711;
            v704[128] = *((unsigned char *)v705 + 128);
            *(_WORD *)(v704 + 129) = *(_WORD *)((char *)v705 + 129);
            *((void *)v704 + 17) = *((void *)v705 + 17);
            long long v712 = v705[10];
            *((_OWORD *)v704 + 9) = v705[9];
            *((_OWORD *)v704 + 10) = v712;
            long long v713 = v705[12];
            *((_OWORD *)v704 + 11) = v705[11];
            *((_OWORD *)v704 + 12) = v713;
            *((_OWORD *)v704 + 13) = v705[13];
            uint64_t v714 = v706[22];
            v715 = &v704[v714];
            v716 = (char *)v705 + v714;
            if (__swift_getEnumTagSinglePayload((uint64_t)v705 + v714, 1, v1144))
            {
              uint64_t v717 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v715, v716, *(void *)(*(void *)(v717 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v715, v716, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v715, 0, 1, v1144);
            }
            uint64_t v724 = v706[23];
            v725 = &v704[v724];
            v726 = (char *)v705 + v724;
            if (__swift_getEnumTagSinglePayload((uint64_t)v705 + v724, 1, v1144))
            {
              uint64_t v727 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v725, v726, *(void *)(*(void *)(v727 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v725, v726, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v725, 0, 1, v1144);
            }
            v356 = v1130;
            uint64_t v743 = v706[24];
            v744 = &v704[v743];
            v745 = (char *)v705 + v743;
            *(void *)v744 = *(void *)v745;
            v744[8] = v745[8];
            uint64_t v746 = v706[25];
            v747 = &v704[v746];
            v748 = (char *)v705 + v746;
            if (__swift_getEnumTagSinglePayload((uint64_t)v748, 1, v1147))
            {
              uint64_t v749 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v747, v748, *(void *)(*(void *)(v749 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1147 - 8) + 32))(v747, v748, v1147);
              __swift_storeEnumTagSinglePayload((uint64_t)v747, 0, 1, v1147);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v704, 0, 1, (uint64_t)v706);
            v313 = v1183;
          }
          uint64_t v774 = v1151[11];
          v775 = &v1154[v774];
          v776 = (_OWORD *)((char *)v356 + v774);
          v777 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v776, 1, (uint64_t)v777))
          {
            uint64_t v778 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v775, v776, *(void *)(*(void *)(v778 - 8) + 64));
          }
          else
          {
            long long v779 = v776[1];
            *(_OWORD *)v775 = *v776;
            *((_OWORD *)v775 + 1) = v779;
            long long v780 = v776[3];
            *((_OWORD *)v775 + 2) = v776[2];
            *((_OWORD *)v775 + 3) = v780;
            long long v781 = v776[5];
            *((_OWORD *)v775 + 4) = v776[4];
            *((_OWORD *)v775 + 5) = v781;
            v775[96] = *((unsigned char *)v776 + 96);
            *(_OWORD *)(v775 + 104) = *(_OWORD *)((char *)v776 + 104);
            uint64_t v782 = v777[13];
            v783 = &v775[v782];
            v784 = (char *)v776 + v782;
            if (__swift_getEnumTagSinglePayload((uint64_t)v776 + v782, 1, v1147))
            {
              uint64_t v785 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v783, v784, *(void *)(*(void *)(v785 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1147 - 8) + 32))(v783, v784, v1147);
              __swift_storeEnumTagSinglePayload((uint64_t)v783, 0, 1, v1147);
            }
            uint64_t v792 = v777[14];
            v793 = &v775[v792];
            v794 = (char *)v776 + v792;
            if (__swift_getEnumTagSinglePayload((uint64_t)v776 + v792, 1, v1147))
            {
              uint64_t v795 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v793, v794, *(void *)(*(void *)(v795 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1147 - 8) + 32))(v793, v794, v1147);
              __swift_storeEnumTagSinglePayload((uint64_t)v793, 0, 1, v1147);
            }
            *(_OWORD *)&v775[v777[15]] = *(_OWORD *)((char *)v776 + v777[15]);
            *(_OWORD *)&v775[v777[16]] = *(_OWORD *)((char *)v776 + v777[16]);
            *(_OWORD *)&v775[v777[17]] = *(_OWORD *)((char *)v776 + v777[17]);
            uint64_t v808 = v777[18];
            __dsto = (char *)v776 + v808;
            __srci = &v775[v808];
            uint64_t v809 = type metadata accessor for DateComponents();
            v810 = *(void (**)(char *, char *, uint64_t))(*(void *)(v809 - 8) + 32);
            v810(__srci, __dsto, v809);
            v810(&v775[v777[19]], (char *)v776 + v777[19], v809);
            *(_OWORD *)&v775[v777[20]] = *(_OWORD *)((char *)v776 + v777[20]);
            *(_OWORD *)&v775[v777[21]] = *(_OWORD *)((char *)v776 + v777[21]);
            *(_OWORD *)&v775[v777[22]] = *(_OWORD *)((char *)v776 + v777[22]);
            *(_OWORD *)&v775[v777[23]] = *(_OWORD *)((char *)v776 + v777[23]);
            *(_OWORD *)&v775[v777[24]] = *(_OWORD *)((char *)v776 + v777[24]);
            *(_OWORD *)&v775[v777[25]] = *(_OWORD *)((char *)v776 + v777[25]);
            *(_OWORD *)&v775[v777[26]] = *(_OWORD *)((char *)v776 + v777[26]);
            *(_OWORD *)&v775[v777[27]] = *(_OWORD *)((char *)v776 + v777[27]);
            *(_OWORD *)&v775[v777[28]] = *(_OWORD *)((char *)v776 + v777[28]);
            *(_OWORD *)&v775[v777[29]] = *(_OWORD *)((char *)v776 + v777[29]);
            *(_OWORD *)&v775[v777[30]] = *(_OWORD *)((char *)v776 + v777[30]);
            *(_OWORD *)&v775[v777[31]] = *(_OWORD *)((char *)v776 + v777[31]);
            *(_OWORD *)&v775[v777[32]] = *(_OWORD *)((char *)v776 + v777[32]);
            *(void *)&v775[v777[33]] = *(void *)((char *)v776 + v777[33]);
            *(void *)&v775[v777[34]] = *(void *)((char *)v776 + v777[34]);
            *(_OWORD *)&v775[v777[35]] = *(_OWORD *)((char *)v776 + v777[35]);
            *(_OWORD *)&v775[v777[36]] = *(_OWORD *)((char *)v776 + v777[36]);
            *(_OWORD *)&v775[v777[37]] = *(_OWORD *)((char *)v776 + v777[37]);
            uint64_t v811 = v777[38];
            v812 = &v775[v811];
            v813 = (char *)v776 + v811;
            if (__swift_getEnumTagSinglePayload((uint64_t)v776 + v811, 1, v1144))
            {
              uint64_t v814 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v812, v813, *(void *)(*(void *)(v814 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v812, v813, v1144);
              __swift_storeEnumTagSinglePayload((uint64_t)v812, 0, 1, v1144);
            }
            v313 = v1183;
            v356 = v1130;
            *(_OWORD *)&v775[v777[39]] = *(_OWORD *)((char *)v776 + v777[39]);
            *(_OWORD *)&v775[v777[40]] = *(_OWORD *)((char *)v776 + v777[40]);
            uint64_t v855 = v777[41];
            v856 = &v775[v855];
            v857 = (char *)v776 + v855;
            *(void *)v856 = *(void *)v857;
            v856[8] = v857[8];
            *(_OWORD *)&v775[v777[42]] = *(_OWORD *)((char *)v776 + v777[42]);
            uint64_t v858 = v777[43];
            v859 = &v775[v858];
            v860 = (char *)v776 + v858;
            *(_OWORD *)v859 = *(_OWORD *)v860;
            *(void *)(v859 + 13) = *(void *)(v860 + 13);
            *(_OWORD *)&v775[v777[44]] = *(_OWORD *)((char *)v776 + v777[44]);
            *(_OWORD *)&v775[v777[45]] = *(_OWORD *)((char *)v776 + v777[45]);
            *(_OWORD *)&v775[v777[46]] = *(_OWORD *)((char *)v776 + v777[46]);
            *(_OWORD *)&v775[v777[47]] = *(_OWORD *)((char *)v776 + v777[47]);
            __swift_storeEnumTagSinglePayload((uint64_t)v775, 0, 1, (uint64_t)v777);
          }
          uint64_t v3 = v1181;
          uint64_t v861 = v1151[12];
          v862 = &v1154[v861];
          v863 = (_OWORD *)((char *)v356 + v861);
          v864 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v863, 1, (uint64_t)v864))
          {
            uint64_t v865 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v862, v863, *(void *)(*(void *)(v865 - 8) + 64));
          }
          else
          {
            long long v866 = v863[1];
            *(_OWORD *)v862 = *v863;
            *((_OWORD *)v862 + 1) = v866;
            long long v867 = v863[3];
            *((_OWORD *)v862 + 2) = v863[2];
            *((_OWORD *)v862 + 3) = v867;
            long long v868 = v863[5];
            *((_OWORD *)v862 + 4) = v863[4];
            *((_OWORD *)v862 + 5) = v868;
            v862[96] = *((unsigned char *)v863 + 96);
            *(_OWORD *)(v862 + 104) = *(_OWORD *)((char *)v863 + 104);
            *(_OWORD *)(v862 + 120) = *(_OWORD *)((char *)v863 + 120);
            uint64_t v869 = v864[14];
            __dstk = &v862[v869];
            v1101 = (char *)v863 + v869;
            __srcd = (void *)type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1101, 1, (uint64_t)__srcd))
            {
              uint64_t v870 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__dstk, v1101, *(void *)(*(void *)(v870 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(__srcd - 1) + 32))(__dstk, v1101, __srcd);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstk, 0, 1, (uint64_t)__srcd);
            }
            uint64_t v875 = v864[15];
            __dstm = &v862[v875];
            v876 = (char *)v863 + v875;
            if (__swift_getEnumTagSinglePayload((uint64_t)v863 + v875, 1, (uint64_t)__srcd))
            {
              uint64_t v877 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__dstm, v876, *(void *)(*(void *)(v877 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(__srcd - 1) + 32))(__dstm, v876, __srcd);
              __swift_storeEnumTagSinglePayload((uint64_t)__dstm, 0, 1, (uint64_t)__srcd);
            }
            v356 = v1130;
            *(_OWORD *)&v862[v864[16]] = *(_OWORD *)((char *)v863 + v864[16]);
            *(_OWORD *)&v862[v864[17]] = *(_OWORD *)((char *)v863 + v864[17]);
            *(_OWORD *)&v862[v864[18]] = *(_OWORD *)((char *)v863 + v864[18]);
            *(_OWORD *)&v862[v864[19]] = *(_OWORD *)((char *)v863 + v864[19]);
            *(_OWORD *)&v862[v864[20]] = *(_OWORD *)((char *)v863 + v864[20]);
            *(void *)&v862[v864[21]] = *(void *)((char *)v863 + v864[21]);
            *(void *)&v862[v864[22]] = *(void *)((char *)v863 + v864[22]);
            uint64_t v922 = v864[23];
            v923 = &v862[v922];
            v924 = (char *)v863 + v922;
            v923[8] = v924[8];
            *(void *)v923 = *(void *)v924;
            uint64_t v925 = v864[24];
            v926 = &v862[v925];
            v927 = (char *)v863 + v925;
            v926[8] = v927[8];
            *(void *)v926 = *(void *)v927;
            *(_OWORD *)&v862[v864[25]] = *(_OWORD *)((char *)v863 + v864[25]);
            *(_OWORD *)&v862[v864[26]] = *(_OWORD *)((char *)v863 + v864[26]);
            *(_OWORD *)&v862[v864[27]] = *(_OWORD *)((char *)v863 + v864[27]);
            *(_OWORD *)&v862[v864[28]] = *(_OWORD *)((char *)v863 + v864[28]);
            uint64_t v928 = v864[29];
            v929 = &v862[v928];
            v930 = (char *)v863 + v928;
            *(void *)v929 = *(void *)v930;
            v929[8] = v930[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v862, 0, 1, (uint64_t)v864);
            v313 = v1183;
          }
          uint64_t v931 = v1151[13];
          v932 = &v1154[v931];
          v933 = (_OWORD *)((char *)v356 + v931);
          v934 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v933, 1, (uint64_t)v934))
          {
            uint64_t v935 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v932, v933, *(void *)(*(void *)(v935 - 8) + 64));
            uint64_t v314 = v1147;
          }
          else
          {
            long long v936 = v933[1];
            *(_OWORD *)v932 = *v933;
            *((_OWORD *)v932 + 1) = v936;
            long long v937 = v933[3];
            *((_OWORD *)v932 + 2) = v933[2];
            *((_OWORD *)v932 + 3) = v937;
            long long v938 = v933[5];
            *((_OWORD *)v932 + 4) = v933[4];
            *((_OWORD *)v932 + 5) = v938;
            v932[96] = *((unsigned char *)v933 + 96);
            *(_OWORD *)(v932 + 104) = *(_OWORD *)((char *)v933 + 104);
            *(_OWORD *)(v932 + 120) = *(_OWORD *)((char *)v933 + 120);
            uint64_t v939 = v934[14];
            v1143 = &v932[v939];
            v940 = (char *)v933 + v939;
            uint64_t v941 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v940, 1, v941))
            {
              uint64_t v942 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1143, v940, *(void *)(*(void *)(v942 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v941 - 8) + 32))(v1143, v940, v941);
              __swift_storeEnumTagSinglePayload((uint64_t)v1143, 0, 1, v941);
            }
            v313 = v1183;
            uint64_t v314 = v1147;
            *(_OWORD *)&v932[v934[15]] = *(_OWORD *)((char *)v933 + v934[15]);
            *(_OWORD *)&v932[v934[16]] = *(_OWORD *)((char *)v933 + v934[16]);
            *(_OWORD *)&v932[v934[17]] = *(_OWORD *)((char *)v933 + v934[17]);
            *(_OWORD *)&v932[v934[18]] = *(_OWORD *)((char *)v933 + v934[18]);
            *(_OWORD *)&v932[v934[19]] = *(_OWORD *)((char *)v933 + v934[19]);
            *(void *)&v932[v934[20]] = *(void *)((char *)v933 + v934[20]);
            *(_OWORD *)&v932[v934[21]] = *(_OWORD *)((char *)v933 + v934[21]);
            *(_OWORD *)&v932[v934[22]] = *(_OWORD *)((char *)v933 + v934[22]);
            *(_OWORD *)&v932[v934[23]] = *(_OWORD *)((char *)v933 + v934[23]);
            __swift_storeEnumTagSinglePayload((uint64_t)v932, 0, 1, (uint64_t)v934);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v1154, 0, 1, (uint64_t)v1151);
        }
        uint64_t v1045 = v313[20];
        v1046 = (_OWORD *)((char *)v7 + v1045);
        v1047 = (_OWORD *)((char *)v8 + v1045);
        v1048 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1047, 1, (uint64_t)v1048))
        {
          uint64_t v1049 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v1046, v1047, *(void *)(*(void *)(v1049 - 8) + 64));
        }
        else
        {
          long long v1050 = v1047[1];
          _OWORD *v1046 = *v1047;
          v1046[1] = v1050;
          long long v1051 = v1047[3];
          v1046[2] = v1047[2];
          v1046[3] = v1051;
          long long v1052 = v1047[5];
          v1046[4] = v1047[4];
          v1046[5] = v1052;
          uint64_t v1053 = v1048[10];
          v1173 = (char *)v1046 + v1053;
          v1054 = (char *)v1047 + v1053;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1047 + v1053, 1, v1144))
          {
            uint64_t v1055 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1173, v1054, *(void *)(*(void *)(v1055 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v1173, v1054, v1144);
            __swift_storeEnumTagSinglePayload((uint64_t)v1173, 0, 1, v1144);
          }
          uint64_t v1056 = v1048[11];
          v1174 = (char *)v1046 + v1056;
          v1057 = (char *)v1047 + v1056;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1047 + v1056, 1, v1144))
          {
            uint64_t v1058 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1174, v1057, *(void *)(*(void *)(v1058 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v1174, v1057, v1144);
            __swift_storeEnumTagSinglePayload((uint64_t)v1174, 0, 1, v1144);
          }
          *(_OWORD *)((char *)v1046 + v1048[12]) = *(_OWORD *)((char *)v1047 + v1048[12]);
          *(_OWORD *)((char *)v1046 + v1048[13]) = *(_OWORD *)((char *)v1047 + v1048[13]);
          *(_OWORD *)((char *)v1046 + v1048[14]) = *(_OWORD *)((char *)v1047 + v1048[14]);
          uint64_t v1059 = v1048[15];
          v1175 = (char *)v1046 + v1059;
          v1060 = (char *)v1047 + v1059;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1047 + v1059, 1, v1144))
          {
            uint64_t v1061 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1175, v1060, *(void *)(*(void *)(v1061 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v1175, v1060, v1144);
            __swift_storeEnumTagSinglePayload((uint64_t)v1175, 0, 1, v1144);
          }
          uint64_t v314 = v1147;
          *(_OWORD *)((char *)v1046 + v1048[16]) = *(_OWORD *)((char *)v1047 + v1048[16]);
          *(_OWORD *)((char *)v1046 + v1048[17]) = *(_OWORD *)((char *)v1047 + v1048[17]);
          *(_OWORD *)((char *)v1046 + v1048[18]) = *(_OWORD *)((char *)v1047 + v1048[18]);
          *(_OWORD *)((char *)v1046 + v1048[19]) = *(_OWORD *)((char *)v1047 + v1048[19]);
          *(_OWORD *)((char *)v1046 + v1048[20]) = *(_OWORD *)((char *)v1047 + v1048[20]);
          *(_OWORD *)((char *)v1046 + v1048[21]) = *(_OWORD *)((char *)v1047 + v1048[21]);
          *(_OWORD *)((char *)v1046 + v1048[22]) = *(_OWORD *)((char *)v1047 + v1048[22]);
          *(_OWORD *)((char *)v1046 + v1048[23]) = *(_OWORD *)((char *)v1047 + v1048[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1046, 0, 1, (uint64_t)v1048);
          v313 = v1183;
        }
        uint64_t v1062 = v313[21];
        v1063 = (_OWORD *)((char *)v7 + v1062);
        v1064 = (_OWORD *)((char *)v8 + v1062);
        v1065 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1064, 1, (uint64_t)v1065))
        {
          uint64_t v1066 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v1063, v1064, *(void *)(*(void *)(v1066 - 8) + 64));
        }
        else
        {
          long long v1067 = v1064[1];
          _OWORD *v1063 = *v1064;
          v1063[1] = v1067;
          long long v1068 = v1064[3];
          v1063[2] = v1064[2];
          v1063[3] = v1068;
          long long v1069 = v1064[5];
          v1063[4] = v1064[4];
          v1063[5] = v1069;
          uint64_t v1070 = v1065[11];
          v1176 = (char *)v1063 + v1070;
          v1071 = (char *)v1064 + v1070;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1064 + v1070, 1, v1144))
          {
            uint64_t v1072 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1176, v1071, *(void *)(*(void *)(v1072 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v1176, v1071, v1144);
            __swift_storeEnumTagSinglePayload((uint64_t)v1176, 0, 1, v1144);
          }
          *(_OWORD *)((char *)v1063 + v1065[12]) = *(_OWORD *)((char *)v1064 + v1065[12]);
          *(void *)((char *)v1063 + v1065[13]) = *(void *)((char *)v1064 + v1065[13]);
          uint64_t v1073 = v1065[14];
          v1177 = (char *)v1063 + v1073;
          v1074 = (char *)v1064 + v1073;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1064 + v1073, 1, v1144))
          {
            uint64_t v1075 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1177, v1074, *(void *)(*(void *)(v1075 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v1177, v1074, v1144);
            __swift_storeEnumTagSinglePayload((uint64_t)v1177, 0, 1, v1144);
          }
          uint64_t v314 = v1147;
          *(void *)((char *)v1063 + v1065[15]) = *(void *)((char *)v1064 + v1065[15]);
          *(void *)((char *)v1063 + v1065[16]) = *(void *)((char *)v1064 + v1065[16]);
          *(_OWORD *)((char *)v1063 + v1065[17]) = *(_OWORD *)((char *)v1064 + v1065[17]);
          *(void *)((char *)v1063 + v1065[18]) = *(void *)((char *)v1064 + v1065[18]);
          *(void *)((char *)v1063 + v1065[19]) = *(void *)((char *)v1064 + v1065[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1063, 0, 1, (uint64_t)v1065);
          v313 = v1183;
        }
        uint64_t v1076 = v313[22];
        v1077 = (_OWORD *)((char *)v7 + v1076);
        v1078 = (_OWORD *)((char *)v8 + v1076);
        v1079 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1078, 1, (uint64_t)v1079))
        {
          uint64_t v1080 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v1077, v1078, *(void *)(*(void *)(v1080 - 8) + 64));
        }
        else
        {
          long long v1081 = v1078[1];
          _OWORD *v1077 = *v1078;
          v1077[1] = v1081;
          long long v1082 = v1078[3];
          v1077[2] = v1078[2];
          v1077[3] = v1082;
          uint64_t v1083 = v1079[8];
          v1178 = (char *)v1077 + v1083;
          v1084 = (char *)v1078 + v1083;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1078 + v1083, 1, v314))
          {
            uint64_t v1085 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1178, v1084, *(void *)(*(void *)(v1085 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v314 - 8) + 32))(v1178, v1084, v314);
            __swift_storeEnumTagSinglePayload((uint64_t)v1178, 0, 1, v314);
          }
          *(_OWORD *)((char *)v1077 + v1079[9]) = *(_OWORD *)((char *)v1078 + v1079[9]);
          *(_OWORD *)((char *)v1077 + v1079[10]) = *(_OWORD *)((char *)v1078 + v1079[10]);
          *(_OWORD *)((char *)v1077 + v1079[11]) = *(_OWORD *)((char *)v1078 + v1079[11]);
          uint64_t v1086 = v1079[12];
          v1179 = (char *)v1077 + v1086;
          v1087 = (char *)v1078 + v1086;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1078 + v1086, 1, v1144))
          {
            uint64_t v1088 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1179, v1087, *(void *)(*(void *)(v1088 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v1179, v1087, v1144);
            __swift_storeEnumTagSinglePayload((uint64_t)v1179, 0, 1, v1144);
          }
          uint64_t v1089 = v1079[13];
          v1180 = (char *)v1077 + v1089;
          v1090 = (char *)v1078 + v1089;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1078 + v1089, 1, v1144))
          {
            uint64_t v1091 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1180, v1090, *(void *)(*(void *)(v1091 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1144 - 8) + 32))(v1180, v1090, v1144);
            __swift_storeEnumTagSinglePayload((uint64_t)v1180, 0, 1, v1144);
          }
          uint64_t v1092 = v1079[14];
          v1093 = (char *)v1077 + v1092;
          v1094 = (char *)v1078 + v1092;
          *(void *)v1093 = *(void *)v1094;
          v1093[8] = v1094[8];
          *(_OWORD *)((char *)v1077 + v1079[15]) = *(_OWORD *)((char *)v1078 + v1079[15]);
          *(_OWORD *)((char *)v1077 + v1079[16]) = *(_OWORD *)((char *)v1078 + v1079[16]);
          *(_OWORD *)((char *)v1077 + v1079[17]) = *(_OWORD *)((char *)v1078 + v1079[17]);
          *(_OWORD *)((char *)v1077 + v1079[18]) = *(_OWORD *)((char *)v1078 + v1079[18]);
          *(_OWORD *)((char *)v1077 + v1079[19]) = *(_OWORD *)((char *)v1078 + v1079[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1077, 0, 1, (uint64_t)v1079);
        }
        uint64_t v9 = v1189;
        memcpy((char *)v7 + v1183[23], (char *)v8 + v1183[23], 0x90uLL);
        goto LABEL_524;
      case 2u:
        uint64_t v36 = v9;
        long long v37 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v37;
        v7[2] = v8[2];
        v38 = (int *)type metadata accessor for CalendarEvent(0);
        uint64_t v39 = v38[7];
        v40 = (char *)v7 + v39;
        v41 = (char *)v8 + v39;
        uint64_t v42 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v41, 1, v42))
        {
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v40, v41, v42);
          __swift_storeEnumTagSinglePayload((uint64_t)v40, 0, 1, v42);
        }
        uint64_t v250 = v38[8];
        v251 = (char *)v7 + v250;
        v252 = (char *)v8 + v250;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v250, 1, v42))
        {
          uint64_t v253 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v251, v252, *(void *)(*(void *)(v253 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v251, v252, v42);
          __swift_storeEnumTagSinglePayload((uint64_t)v251, 0, 1, v42);
        }
        uint64_t v9 = v36;
        *(_OWORD *)((char *)v7 + v38[9]) = *(_OWORD *)((char *)v8 + v38[9]);
        *(void *)((char *)v7 + v38[10]) = *(void *)((char *)v8 + v38[10]);
        *(void *)((char *)v7 + v38[11]) = *(void *)((char *)v8 + v38[11]);
        *(_OWORD *)((char *)v7 + v38[12]) = *(_OWORD *)((char *)v8 + v38[12]);
        uint64_t v315 = v38[13];
        v316 = (char *)v7 + v315;
        v317 = (char *)v8 + v315;
        long long v318 = *((_OWORD *)v317 + 1);
        *(_OWORD *)v316 = *(_OWORD *)v317;
        *((_OWORD *)v316 + 1) = v318;
        *((void *)v316 + 4) = *((void *)v317 + 4);
        goto LABEL_524;
      case 3u:
        long long v44 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v44;
        v7[2] = v8[2];
        *((void *)v7 + 6) = *((void *)v8 + 6);
        *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)((char *)v8 + 56);
        *(_OWORD *)((char *)v7 + 72) = *(_OWORD *)((char *)v8 + 72);
        v1184 = (int *)type metadata accessor for Photo(0);
        uint64_t v45 = v1184[11];
        v46 = (char *)v7 + v45;
        v47 = (char *)v8 + v45;
        uint64_t v48 = type metadata accessor for Date();
        uint64_t v1150 = v48;
        if (__swift_getEnumTagSinglePayload((uint64_t)v47, 1, v48))
        {
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v46, v47, v48);
          __swift_storeEnumTagSinglePayload((uint64_t)v46, 0, 1, v48);
        }
        *(void *)((char *)v7 + v1184[12]) = *(void *)((char *)v8 + v1184[12]);
        *(void *)((char *)v7 + v1184[13]) = *(void *)((char *)v8 + v1184[13]);
        *(void *)((char *)v7 + v1184[14]) = *(void *)((char *)v8 + v1184[14]);
        *(void *)((char *)v7 + v1184[15]) = *(void *)((char *)v8 + v1184[15]);
        *(_OWORD *)((char *)v7 + v1184[16]) = *(_OWORD *)((char *)v8 + v1184[16]);
        uint64_t v254 = v1184[17];
        v255 = (_OWORD *)((char *)v7 + v254);
        v256 = (_OWORD *)((char *)v8 + v254);
        v257 = (int *)type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v1188 = v9;
        if (__swift_getEnumTagSinglePayload((uint64_t)v256, 1, (uint64_t)v257))
        {
          uint64_t v258 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v255, v256, *(void *)(*(void *)(v258 - 8) + 64));
        }
        else
        {
          _OWORD *v255 = *v256;
          uint64_t v319 = v257[5];
          v320 = (char *)v256;
          v321 = (_OWORD *)((char *)v255 + v319);
          v1153 = v320;
          v322 = &v320[v319];
          v1129 = (int *)type metadata accessor for RentalCarReservation(0);
          v1145 = v255;
          v1148 = v257;
          if (__swift_getEnumTagSinglePayload((uint64_t)v322, 1, (uint64_t)v1129))
          {
            uint64_t v323 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v321, v322, *(void *)(*(void *)(v323 - 8) + 64));
          }
          else
          {
            long long v377 = *((_OWORD *)v322 + 1);
            _OWORD *v321 = *(_OWORD *)v322;
            v321[1] = v377;
            long long v378 = *((_OWORD *)v322 + 3);
            v321[2] = *((_OWORD *)v322 + 2);
            v321[3] = v378;
            long long v379 = *((_OWORD *)v322 + 5);
            v321[4] = *((_OWORD *)v322 + 4);
            v321[5] = v379;
            long long v380 = *((_OWORD *)v322 + 7);
            v321[6] = *((_OWORD *)v322 + 6);
            v321[7] = v380;
            *((unsigned char *)v321 + 128) = v322[128];
            *(_WORD *)((char *)v321 + 129) = *(_WORD *)(v322 + 129);
            *((void *)v321 + 17) = *((void *)v322 + 17);
            long long v381 = *((_OWORD *)v322 + 10);
            v321[9] = *((_OWORD *)v322 + 9);
            v321[10] = v381;
            long long v382 = *((_OWORD *)v322 + 12);
            v321[11] = *((_OWORD *)v322 + 11);
            v321[12] = v382;
            long long v383 = *((_OWORD *)v322 + 14);
            v321[13] = *((_OWORD *)v322 + 13);
            v321[14] = v383;
            v321[15] = *((_OWORD *)v322 + 15);
            *((void *)v321 + 32) = *((void *)v322 + 32);
            *(_OWORD *)((char *)v321 + 264) = *(_OWORD *)(v322 + 264);
            *(_OWORD *)((char *)v321 + 280) = *(_OWORD *)(v322 + 280);
            *(_OWORD *)((char *)v321 + 296) = *(_OWORD *)(v322 + 296);
            *(_OWORD *)((char *)v321 + 312) = *(_OWORD *)(v322 + 312);
            *(_OWORD *)((char *)v321 + 328) = *(_OWORD *)(v322 + 328);
            *(_OWORD *)((char *)v321 + 344) = *(_OWORD *)(v322 + 344);
            *(_OWORD *)((char *)v321 + 360) = *(_OWORD *)(v322 + 360);
            *((unsigned char *)v321 + 384) = v322[384];
            *((void *)v321 + 47) = *((void *)v322 + 47);
            *(_OWORD *)((char *)v321 + 392) = *(_OWORD *)(v322 + 392);
            *(_OWORD *)((char *)v321 + 408) = *(_OWORD *)(v322 + 408);
            uint64_t v384 = v1129[35];
            v385 = (char *)v321 + v384;
            v386 = &v322[v384];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v322[v384], 1, v1150))
            {
              uint64_t v387 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v385, v386, *(void *)(*(void *)(v387 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v385, v386, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v385, 0, 1, v1150);
            }
            uint64_t v403 = v1129[36];
            v404 = (char *)v321 + v403;
            v405 = &v322[v403];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v322[v403], 1, v1150))
            {
              uint64_t v406 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v404, v405, *(void *)(*(void *)(v406 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v404, v405, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v404, 0, 1, v1150);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v321, 0, 1, (uint64_t)v1129);
            v257 = v1148;
          }
          uint64_t v427 = v257[6];
          v428 = (_OWORD *)((char *)v255 + v427);
          v429 = &v1153[v427];
          uint64_t v430 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v429, 1, v430))
          {
            uint64_t v431 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v428, v429, *(void *)(*(void *)(v431 - 8) + 64));
          }
          else
          {
            long long v432 = *((_OWORD *)v429 + 1);
            _OWORD *v428 = *(_OWORD *)v429;
            v428[1] = v432;
            long long v433 = *((_OWORD *)v429 + 3);
            v428[2] = *((_OWORD *)v429 + 2);
            v428[3] = v433;
            long long v434 = *((_OWORD *)v429 + 5);
            v428[4] = *((_OWORD *)v429 + 4);
            v428[5] = v434;
            long long v435 = *((_OWORD *)v429 + 7);
            v428[6] = *((_OWORD *)v429 + 6);
            v428[7] = v435;
            *((unsigned char *)v428 + 128) = v429[128];
            *(_WORD *)((char *)v428 + 129) = *(_WORD *)(v429 + 129);
            *((void *)v428 + 17) = *((void *)v429 + 17);
            long long v436 = *((_OWORD *)v429 + 10);
            v428[9] = *((_OWORD *)v429 + 9);
            v428[10] = v436;
            long long v437 = *((_OWORD *)v429 + 12);
            v428[11] = *((_OWORD *)v429 + 11);
            v428[12] = v437;
            *((void *)v428 + 26) = *((void *)v429 + 26);
            *(_OWORD *)((char *)v428 + 216) = *(_OWORD *)(v429 + 216);
            *(_OWORD *)((char *)v428 + 232) = *(_OWORD *)(v429 + 232);
            *(_OWORD *)((char *)v428 + 248) = *(_OWORD *)(v429 + 248);
            *(_OWORD *)((char *)v428 + 264) = *(_OWORD *)(v429 + 264);
            *((unsigned char *)v428 + 296) = v429[296];
            uint64_t v438 = *((void *)v429 + 36);
            *((void *)v428 + 35) = *((void *)v429 + 35);
            *((void *)v428 + 36) = v438;
            uint64_t v439 = *(int *)(v430 + 112);
            v1131 = (char *)v428 + v439;
            v440 = &v429[v439];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v429[v439], 1, v1150))
            {
              uint64_t v441 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1131, v440, *(void *)(*(void *)(v441 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1131, v440, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v1131, 0, 1, v1150);
            }
            uint64_t v461 = *(int *)(v430 + 116);
            v462 = (char *)v428 + v461;
            v463 = &v429[v461];
            if (__swift_getEnumTagSinglePayload((uint64_t)v463, 1, v1150))
            {
              uint64_t v464 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v462, v463, *(void *)(*(void *)(v464 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v462, v463, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v462, 0, 1, v1150);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v428, 0, 1, v430);
            v257 = v1148;
          }
          uint64_t v487 = v257[7];
          v488 = (_OWORD *)((char *)v255 + v487);
          v489 = &v1153[v487];
          v490 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v489, 1, (uint64_t)v490))
          {
            uint64_t v491 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v488, v489, *(void *)(*(void *)(v491 - 8) + 64));
          }
          else
          {
            long long v492 = *((_OWORD *)v489 + 1);
            _OWORD *v488 = *(_OWORD *)v489;
            v488[1] = v492;
            long long v493 = *((_OWORD *)v489 + 3);
            v488[2] = *((_OWORD *)v489 + 2);
            v488[3] = v493;
            long long v494 = *((_OWORD *)v489 + 5);
            v488[4] = *((_OWORD *)v489 + 4);
            v488[5] = v494;
            long long v495 = *((_OWORD *)v489 + 7);
            v488[6] = *((_OWORD *)v489 + 6);
            v488[7] = v495;
            *((unsigned char *)v488 + 128) = v489[128];
            *(_WORD *)((char *)v488 + 129) = *(_WORD *)(v489 + 129);
            *((void *)v488 + 17) = *((void *)v489 + 17);
            long long v496 = *((_OWORD *)v489 + 10);
            v488[9] = *((_OWORD *)v489 + 9);
            v488[10] = v496;
            long long v497 = *((_OWORD *)v489 + 12);
            v488[11] = *((_OWORD *)v489 + 11);
            v488[12] = v497;
            long long v498 = *((_OWORD *)v489 + 14);
            v488[13] = *((_OWORD *)v489 + 13);
            v488[14] = v498;
            *((void *)v488 + 30) = *((void *)v489 + 30);
            *(_OWORD *)((char *)v488 + 248) = *(_OWORD *)(v489 + 248);
            *(_OWORD *)((char *)v488 + 264) = *(_OWORD *)(v489 + 264);
            *((unsigned char *)v488 + 296) = v489[296];
            uint64_t v499 = *((void *)v489 + 36);
            *((void *)v488 + 35) = *((void *)v489 + 35);
            *((void *)v488 + 36) = v499;
            v488[19] = *((_OWORD *)v489 + 19);
            uint64_t v500 = v490[29];
            v1132 = (char *)v488 + v500;
            v501 = &v489[v500];
            uint64_t v502 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v501, 1, v502))
            {
              uint64_t v503 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1132, v501, *(void *)(*(void *)(v503 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v502 - 8) + 32))(v1132, v501, v502);
              __swift_storeEnumTagSinglePayload((uint64_t)v1132, 0, 1, v502);
            }
            *(_OWORD *)((char *)v488 + v490[30]) = *(_OWORD *)&v489[v490[30]];
            uint64_t v525 = v490[31];
            v1133 = (char *)v488 + v525;
            v526 = &v489[v525];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v489[v525], 1, v1150))
            {
              uint64_t v527 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1133, v526, *(void *)(*(void *)(v527 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1133, v526, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v1133, 0, 1, v1150);
            }
            uint64_t v536 = v490[32];
            v537 = (char *)v488 + v536;
            v538 = &v489[v536];
            if (__swift_getEnumTagSinglePayload((uint64_t)v538, 1, v1150))
            {
              uint64_t v539 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v537, v538, *(void *)(*(void *)(v539 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v537, v538, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v537, 0, 1, v1150);
            }
            v255 = v1145;
            __swift_storeEnumTagSinglePayload((uint64_t)v488, 0, 1, (uint64_t)v490);
            v257 = v1148;
          }
          uint64_t v560 = v257[8];
          v561 = (_OWORD *)((char *)v255 + v560);
          v562 = &v1153[v560];
          uint64_t v563 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v562, 1, v563))
          {
            uint64_t v564 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v561, v562, *(void *)(*(void *)(v564 - 8) + 64));
          }
          else
          {
            long long v565 = *((_OWORD *)v562 + 1);
            _OWORD *v561 = *(_OWORD *)v562;
            v561[1] = v565;
            long long v566 = *((_OWORD *)v562 + 3);
            v561[2] = *((_OWORD *)v562 + 2);
            v561[3] = v566;
            long long v567 = *((_OWORD *)v562 + 5);
            v561[4] = *((_OWORD *)v562 + 4);
            v561[5] = v567;
            long long v568 = *((_OWORD *)v562 + 7);
            v561[6] = *((_OWORD *)v562 + 6);
            v561[7] = v568;
            *((unsigned char *)v561 + 128) = v562[128];
            *(_WORD *)((char *)v561 + 129) = *(_WORD *)(v562 + 129);
            *((void *)v561 + 17) = *((void *)v562 + 17);
            long long v569 = *((_OWORD *)v562 + 10);
            v561[9] = *((_OWORD *)v562 + 9);
            v561[10] = v569;
            long long v570 = *((_OWORD *)v562 + 12);
            v561[11] = *((_OWORD *)v562 + 11);
            v561[12] = v570;
            long long v571 = *((_OWORD *)v562 + 14);
            v561[13] = *((_OWORD *)v562 + 13);
            v561[14] = v571;
            long long v572 = *((_OWORD *)v562 + 16);
            v561[15] = *((_OWORD *)v562 + 15);
            v561[16] = v572;
            *((unsigned char *)v561 + 280) = v562[280];
            *((void *)v561 + 34) = *((void *)v562 + 34);
            v561[18] = *((_OWORD *)v562 + 18);
            uint64_t v573 = *(int *)(v563 + 108);
            v1134 = (char *)v561 + v573;
            v574 = &v562[v573];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v562[v573], 1, v1150))
            {
              uint64_t v575 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1134, v574, *(void *)(*(void *)(v575 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1134, v574, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v1134, 0, 1, v1150);
            }
            uint64_t v596 = *(int *)(v563 + 112);
            v597 = (char *)v561 + v596;
            v598 = &v562[v596];
            if (__swift_getEnumTagSinglePayload((uint64_t)v598, 1, v1150))
            {
              uint64_t v599 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v597, v598, *(void *)(*(void *)(v599 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v597, v598, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v597, 0, 1, v1150);
            }
            v255 = v1145;
            __swift_storeEnumTagSinglePayload((uint64_t)v561, 0, 1, v563);
            v257 = v1148;
          }
          uint64_t v620 = v257[9];
          v621 = (_OWORD *)((char *)v255 + v620);
          v622 = &v1153[v620];
          v623 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v622, 1, (uint64_t)v623))
          {
            uint64_t v624 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v621, v622, *(void *)(*(void *)(v624 - 8) + 64));
          }
          else
          {
            long long v625 = *((_OWORD *)v622 + 1);
            _OWORD *v621 = *(_OWORD *)v622;
            v621[1] = v625;
            long long v626 = *((_OWORD *)v622 + 3);
            v621[2] = *((_OWORD *)v622 + 2);
            v621[3] = v626;
            long long v627 = *((_OWORD *)v622 + 5);
            v621[4] = *((_OWORD *)v622 + 4);
            v621[5] = v627;
            long long v628 = *((_OWORD *)v622 + 7);
            v621[6] = *((_OWORD *)v622 + 6);
            v621[7] = v628;
            *((unsigned char *)v621 + 128) = v622[128];
            *(_WORD *)((char *)v621 + 129) = *(_WORD *)(v622 + 129);
            *((void *)v621 + 17) = *((void *)v622 + 17);
            long long v629 = *((_OWORD *)v622 + 10);
            v621[9] = *((_OWORD *)v622 + 9);
            v621[10] = v629;
            long long v630 = *((_OWORD *)v622 + 12);
            v621[11] = *((_OWORD *)v622 + 11);
            v621[12] = v630;
            long long v631 = *((_OWORD *)v622 + 14);
            v621[13] = *((_OWORD *)v622 + 13);
            v621[14] = v631;
            v621[15] = *((_OWORD *)v622 + 15);
            uint64_t v632 = v623[24];
            v1135 = (char *)v621 + v632;
            v633 = &v622[v632];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v622[v632], 1, v1150))
            {
              uint64_t v634 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1135, v633, *(void *)(*(void *)(v634 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1135, v633, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v1135, 0, 1, v1150);
            }
            uint64_t v655 = v623[25];
            v1136 = (char *)v621 + v655;
            v656 = &v622[v655];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v622[v655], 1, v1150))
            {
              uint64_t v657 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1136, v656, *(void *)(*(void *)(v657 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1136, v656, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v1136, 0, 1, v1150);
            }
            uint64_t v666 = v623[26];
            v667 = (char *)v621 + v666;
            v668 = &v622[v666];
            uint64_t v669 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v668, 1, v669))
            {
              uint64_t v670 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v667, v668, *(void *)(*(void *)(v670 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v669 - 8) + 32))(v667, v668, v669);
              __swift_storeEnumTagSinglePayload((uint64_t)v667, 0, 1, v669);
            }
            v255 = v1145;
            __swift_storeEnumTagSinglePayload((uint64_t)v621, 0, 1, (uint64_t)v623);
            v257 = v1148;
          }
          uint64_t v689 = v257[10];
          v690 = (_OWORD *)((char *)v255 + v689);
          v691 = &v1153[v689];
          v692 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v691, 1, (uint64_t)v692))
          {
            uint64_t v693 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v690, v691, *(void *)(*(void *)(v693 - 8) + 64));
          }
          else
          {
            long long v694 = *((_OWORD *)v691 + 1);
            _OWORD *v690 = *(_OWORD *)v691;
            v690[1] = v694;
            long long v695 = *((_OWORD *)v691 + 3);
            v690[2] = *((_OWORD *)v691 + 2);
            v690[3] = v695;
            long long v696 = *((_OWORD *)v691 + 5);
            v690[4] = *((_OWORD *)v691 + 4);
            v690[5] = v696;
            long long v697 = *((_OWORD *)v691 + 7);
            v690[6] = *((_OWORD *)v691 + 6);
            v690[7] = v697;
            *((unsigned char *)v690 + 128) = v691[128];
            *(_WORD *)((char *)v690 + 129) = *(_WORD *)(v691 + 129);
            *((void *)v690 + 17) = *((void *)v691 + 17);
            long long v698 = *((_OWORD *)v691 + 10);
            v690[9] = *((_OWORD *)v691 + 9);
            v690[10] = v698;
            long long v699 = *((_OWORD *)v691 + 12);
            v690[11] = *((_OWORD *)v691 + 11);
            v690[12] = v699;
            v690[13] = *((_OWORD *)v691 + 13);
            uint64_t v700 = v692[22];
            v1137 = (char *)v690 + v700;
            v701 = &v691[v700];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v691[v700], 1, v1150))
            {
              uint64_t v702 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1137, v701, *(void *)(*(void *)(v702 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1137, v701, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v1137, 0, 1, v1150);
            }
            uint64_t v721 = v692[23];
            v1138 = (char *)v690 + v721;
            v722 = &v691[v721];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v691[v721], 1, v1150))
            {
              uint64_t v723 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1138, v722, *(void *)(*(void *)(v723 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1138, v722, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v1138, 0, 1, v1150);
            }
            uint64_t v735 = v692[24];
            v736 = (char *)v690 + v735;
            v737 = &v691[v735];
            *(void *)v736 = *(void *)v737;
            v736[8] = v737[8];
            uint64_t v738 = v692[25];
            v739 = (char *)v690 + v738;
            v740 = &v691[v738];
            uint64_t v741 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v740, 1, v741))
            {
              uint64_t v742 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v739, v740, *(void *)(*(void *)(v742 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v741 - 8) + 32))(v739, v740, v741);
              __swift_storeEnumTagSinglePayload((uint64_t)v739, 0, 1, v741);
            }
            v255 = v1145;
            __swift_storeEnumTagSinglePayload((uint64_t)v690, 0, 1, (uint64_t)v692);
            v257 = v1148;
          }
          uint64_t v762 = v257[11];
          v763 = (_OWORD *)((char *)v255 + v762);
          v764 = &v1153[v762];
          v765 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v764, 1, (uint64_t)v765))
          {
            uint64_t v766 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v763, v764, *(void *)(*(void *)(v766 - 8) + 64));
          }
          else
          {
            long long v767 = *((_OWORD *)v764 + 1);
            _OWORD *v763 = *(_OWORD *)v764;
            v763[1] = v767;
            long long v768 = *((_OWORD *)v764 + 3);
            v763[2] = *((_OWORD *)v764 + 2);
            v763[3] = v768;
            long long v769 = *((_OWORD *)v764 + 5);
            v763[4] = *((_OWORD *)v764 + 4);
            v763[5] = v769;
            *((unsigned char *)v763 + 96) = v764[96];
            *(_OWORD *)((char *)v763 + 104) = *(_OWORD *)(v764 + 104);
            uint64_t v770 = v765[13];
            __srca = (char *)v763 + v770;
            v771 = &v764[v770];
            uint64_t v772 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v771, 1, v772))
            {
              uint64_t v773 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__srca, v771, *(void *)(*(void *)(v773 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v772 - 8) + 32))(__srca, v771, v772);
              __swift_storeEnumTagSinglePayload((uint64_t)__srca, 0, 1, v772);
            }
            uint64_t v789 = v765[14];
            v1139 = (char *)v763 + v789;
            v790 = &v764[v789];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v764[v789], 1, v772))
            {
              uint64_t v791 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1139, v790, *(void *)(*(void *)(v791 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v772 - 8) + 32))(v1139, v790, v772);
              __swift_storeEnumTagSinglePayload((uint64_t)v1139, 0, 1, v772);
            }
            *(_OWORD *)((char *)v763 + v765[15]) = *(_OWORD *)&v764[v765[15]];
            *(_OWORD *)((char *)v763 + v765[16]) = *(_OWORD *)&v764[v765[16]];
            *(_OWORD *)((char *)v763 + v765[17]) = *(_OWORD *)&v764[v765[17]];
            uint64_t v802 = v765[18];
            __dstn = &v764[v802];
            __srch = (char *)v763 + v802;
            uint64_t v803 = type metadata accessor for DateComponents();
            v804 = *(void (**)(char *, char *, uint64_t))(*(void *)(v803 - 8) + 32);
            v804(__srch, __dstn, v803);
            v804((char *)v763 + v765[19], &v764[v765[19]], v803);
            *(_OWORD *)((char *)v763 + v765[20]) = *(_OWORD *)&v764[v765[20]];
            *(_OWORD *)((char *)v763 + v765[21]) = *(_OWORD *)&v764[v765[21]];
            *(_OWORD *)((char *)v763 + v765[22]) = *(_OWORD *)&v764[v765[22]];
            *(_OWORD *)((char *)v763 + v765[23]) = *(_OWORD *)&v764[v765[23]];
            *(_OWORD *)((char *)v763 + v765[24]) = *(_OWORD *)&v764[v765[24]];
            *(_OWORD *)((char *)v763 + v765[25]) = *(_OWORD *)&v764[v765[25]];
            *(_OWORD *)((char *)v763 + v765[26]) = *(_OWORD *)&v764[v765[26]];
            *(_OWORD *)((char *)v763 + v765[27]) = *(_OWORD *)&v764[v765[27]];
            *(_OWORD *)((char *)v763 + v765[28]) = *(_OWORD *)&v764[v765[28]];
            *(_OWORD *)((char *)v763 + v765[29]) = *(_OWORD *)&v764[v765[29]];
            *(_OWORD *)((char *)v763 + v765[30]) = *(_OWORD *)&v764[v765[30]];
            *(_OWORD *)((char *)v763 + v765[31]) = *(_OWORD *)&v764[v765[31]];
            *(_OWORD *)((char *)v763 + v765[32]) = *(_OWORD *)&v764[v765[32]];
            *(void *)((char *)v763 + v765[33]) = *(void *)&v764[v765[33]];
            *(void *)((char *)v763 + v765[34]) = *(void *)&v764[v765[34]];
            *(_OWORD *)((char *)v763 + v765[35]) = *(_OWORD *)&v764[v765[35]];
            *(_OWORD *)((char *)v763 + v765[36]) = *(_OWORD *)&v764[v765[36]];
            *(_OWORD *)((char *)v763 + v765[37]) = *(_OWORD *)&v764[v765[37]];
            uint64_t v805 = v765[38];
            v1140 = (char *)v763 + v805;
            v806 = &v764[v805];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v764[v805], 1, v1150))
            {
              uint64_t v807 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1140, v806, *(void *)(*(void *)(v807 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1140, v806, v1150);
              __swift_storeEnumTagSinglePayload((uint64_t)v1140, 0, 1, v1150);
            }
            v255 = v1145;
            *(_OWORD *)((char *)v763 + v765[39]) = *(_OWORD *)&v764[v765[39]];
            *(_OWORD *)((char *)v763 + v765[40]) = *(_OWORD *)&v764[v765[40]];
            uint64_t v835 = v765[41];
            v836 = (char *)v763 + v835;
            v837 = &v764[v835];
            *(void *)v836 = *(void *)v837;
            v836[8] = v837[8];
            *(_OWORD *)((char *)v763 + v765[42]) = *(_OWORD *)&v764[v765[42]];
            uint64_t v838 = v765[43];
            v839 = (char *)v763 + v838;
            v840 = &v764[v838];
            *(_OWORD *)v839 = *(_OWORD *)v840;
            *(void *)(v839 + 13) = *(void *)(v840 + 13);
            *(_OWORD *)((char *)v763 + v765[44]) = *(_OWORD *)&v764[v765[44]];
            *(_OWORD *)((char *)v763 + v765[45]) = *(_OWORD *)&v764[v765[45]];
            *(_OWORD *)((char *)v763 + v765[46]) = *(_OWORD *)&v764[v765[46]];
            *(_OWORD *)((char *)v763 + v765[47]) = *(_OWORD *)&v764[v765[47]];
            __swift_storeEnumTagSinglePayload((uint64_t)v763, 0, 1, (uint64_t)v765);
            v257 = v1148;
          }
          uint64_t v841 = v257[12];
          v842 = (_OWORD *)((char *)v255 + v841);
          v843 = &v1153[v841];
          v844 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v843, 1, (uint64_t)v844))
          {
            uint64_t v845 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v842, v843, *(void *)(*(void *)(v845 - 8) + 64));
          }
          else
          {
            long long v846 = *((_OWORD *)v843 + 1);
            _OWORD *v842 = *(_OWORD *)v843;
            v842[1] = v846;
            long long v847 = *((_OWORD *)v843 + 3);
            v842[2] = *((_OWORD *)v843 + 2);
            v842[3] = v847;
            long long v848 = *((_OWORD *)v843 + 5);
            v842[4] = *((_OWORD *)v843 + 4);
            v842[5] = v848;
            *((unsigned char *)v842 + 96) = v843[96];
            *(_OWORD *)((char *)v842 + 104) = *(_OWORD *)(v843 + 104);
            *(_OWORD *)((char *)v842 + 120) = *(_OWORD *)(v843 + 120);
            uint64_t v849 = v844[14];
            v1141 = (char *)v842 + v849;
            v850 = &v843[v849];
            uint64_t v851 = type metadata accessor for DateComponents();
            __srcc = v850;
            uint64_t v852 = (uint64_t)v850;
            uint64_t v853 = v851;
            if (__swift_getEnumTagSinglePayload(v852, 1, v851))
            {
              uint64_t v854 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1141, __srcc, *(void *)(*(void *)(v854 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(*(void *)(v853 - 8) + 32))(v1141, __srcc, v853);
              __swift_storeEnumTagSinglePayload((uint64_t)v1141, 0, 1, v853);
            }
            uint64_t v873 = v844[15];
            __srcf = &v843[v873];
            v1142 = (char *)v842 + v873;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v843[v873], 1, v853))
            {
              uint64_t v874 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1142, __srcf, *(void *)(*(void *)(v874 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v853 - 8) + 32))(v1142, __srcf, v853);
              __swift_storeEnumTagSinglePayload((uint64_t)v1142, 0, 1, v853);
            }
            *(_OWORD *)((char *)v842 + v844[16]) = *(_OWORD *)&v843[v844[16]];
            *(_OWORD *)((char *)v842 + v844[17]) = *(_OWORD *)&v843[v844[17]];
            *(_OWORD *)((char *)v842 + v844[18]) = *(_OWORD *)&v843[v844[18]];
            *(_OWORD *)((char *)v842 + v844[19]) = *(_OWORD *)&v843[v844[19]];
            *(_OWORD *)((char *)v842 + v844[20]) = *(_OWORD *)&v843[v844[20]];
            *(void *)((char *)v842 + v844[21]) = *(void *)&v843[v844[21]];
            *(void *)((char *)v842 + v844[22]) = *(void *)&v843[v844[22]];
            uint64_t v901 = v844[23];
            v902 = (char *)v842 + v901;
            v903 = &v843[v901];
            v902[8] = v903[8];
            *(void *)v902 = *(void *)v903;
            uint64_t v904 = v844[24];
            v905 = (char *)v842 + v904;
            v906 = &v843[v904];
            v905[8] = v906[8];
            *(void *)v905 = *(void *)v906;
            *(_OWORD *)((char *)v842 + v844[25]) = *(_OWORD *)&v843[v844[25]];
            *(_OWORD *)((char *)v842 + v844[26]) = *(_OWORD *)&v843[v844[26]];
            *(_OWORD *)((char *)v842 + v844[27]) = *(_OWORD *)&v843[v844[27]];
            *(_OWORD *)((char *)v842 + v844[28]) = *(_OWORD *)&v843[v844[28]];
            uint64_t v907 = v844[29];
            v908 = (char *)v842 + v907;
            v909 = &v843[v907];
            *(void *)v908 = *(void *)v909;
            v908[8] = v909[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v842, 0, 1, (uint64_t)v844);
            v257 = v1148;
          }
          uint64_t v910 = v257[13];
          v911 = (_OWORD *)((char *)v255 + v910);
          v912 = &v1153[v910];
          v913 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v912, 1, (uint64_t)v913))
          {
            uint64_t v914 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v911, v912, *(void *)(*(void *)(v914 - 8) + 64));
          }
          else
          {
            long long v915 = *((_OWORD *)v912 + 1);
            _OWORD *v911 = *(_OWORD *)v912;
            v911[1] = v915;
            long long v916 = *((_OWORD *)v912 + 3);
            v911[2] = *((_OWORD *)v912 + 2);
            v911[3] = v916;
            long long v917 = *((_OWORD *)v912 + 5);
            v911[4] = *((_OWORD *)v912 + 4);
            v911[5] = v917;
            *((unsigned char *)v911 + 96) = v912[96];
            *(_OWORD *)((char *)v911 + 104) = *(_OWORD *)(v912 + 104);
            *(_OWORD *)((char *)v911 + 120) = *(_OWORD *)(v912 + 120);
            uint64_t v918 = v913[14];
            v1156 = (char *)v911 + v918;
            v919 = &v912[v918];
            uint64_t v920 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v919, 1, v920))
            {
              uint64_t v921 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1156, v919, *(void *)(*(void *)(v921 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v920 - 8) + 32))(v1156, v919, v920);
              __swift_storeEnumTagSinglePayload((uint64_t)v1156, 0, 1, v920);
            }
            *(_OWORD *)((char *)v911 + v913[15]) = *(_OWORD *)&v912[v913[15]];
            *(_OWORD *)((char *)v911 + v913[16]) = *(_OWORD *)&v912[v913[16]];
            *(_OWORD *)((char *)v911 + v913[17]) = *(_OWORD *)&v912[v913[17]];
            *(_OWORD *)((char *)v911 + v913[18]) = *(_OWORD *)&v912[v913[18]];
            *(_OWORD *)((char *)v911 + v913[19]) = *(_OWORD *)&v912[v913[19]];
            *(void *)((char *)v911 + v913[20]) = *(void *)&v912[v913[20]];
            *(_OWORD *)((char *)v911 + v913[21]) = *(_OWORD *)&v912[v913[21]];
            *(_OWORD *)((char *)v911 + v913[22]) = *(_OWORD *)&v912[v913[22]];
            *(_OWORD *)((char *)v911 + v913[23]) = *(_OWORD *)&v912[v913[23]];
            __swift_storeEnumTagSinglePayload((uint64_t)v911, 0, 1, (uint64_t)v913);
            v255 = v1145;
            v257 = v1148;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v255, 0, 1, (uint64_t)v257);
        }
        uint64_t v994 = v1184[18];
        v995 = (_OWORD *)((char *)v7 + v994);
        v996 = (_OWORD *)((char *)v8 + v994);
        v997 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v996, 1, (uint64_t)v997))
        {
          uint64_t v998 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v995, v996, *(void *)(*(void *)(v998 - 8) + 64));
        }
        else
        {
          long long v999 = v996[1];
          _OWORD *v995 = *v996;
          v995[1] = v999;
          long long v1000 = v996[3];
          v995[2] = v996[2];
          v995[3] = v1000;
          long long v1001 = v996[5];
          v995[4] = v996[4];
          v995[5] = v1001;
          uint64_t v1002 = v997[10];
          v1165 = (char *)v995 + v1002;
          v1003 = (char *)v996 + v1002;
          if (__swift_getEnumTagSinglePayload((uint64_t)v996 + v1002, 1, v1150))
          {
            uint64_t v1004 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1165, v1003, *(void *)(*(void *)(v1004 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1165, v1003, v1150);
            __swift_storeEnumTagSinglePayload((uint64_t)v1165, 0, 1, v1150);
          }
          uint64_t v1005 = v997[11];
          v1166 = (char *)v995 + v1005;
          v1006 = (char *)v996 + v1005;
          if (__swift_getEnumTagSinglePayload((uint64_t)v996 + v1005, 1, v1150))
          {
            uint64_t v1007 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1166, v1006, *(void *)(*(void *)(v1007 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1166, v1006, v1150);
            __swift_storeEnumTagSinglePayload((uint64_t)v1166, 0, 1, v1150);
          }
          *(_OWORD *)((char *)v995 + v997[12]) = *(_OWORD *)((char *)v996 + v997[12]);
          *(_OWORD *)((char *)v995 + v997[13]) = *(_OWORD *)((char *)v996 + v997[13]);
          *(_OWORD *)((char *)v995 + v997[14]) = *(_OWORD *)((char *)v996 + v997[14]);
          uint64_t v1008 = v997[15];
          v1167 = (char *)v995 + v1008;
          v1009 = (char *)v996 + v1008;
          if (__swift_getEnumTagSinglePayload((uint64_t)v996 + v1008, 1, v1150))
          {
            uint64_t v1010 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1167, v1009, *(void *)(*(void *)(v1010 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1167, v1009, v1150);
            __swift_storeEnumTagSinglePayload((uint64_t)v1167, 0, 1, v1150);
          }
          *(_OWORD *)((char *)v995 + v997[16]) = *(_OWORD *)((char *)v996 + v997[16]);
          *(_OWORD *)((char *)v995 + v997[17]) = *(_OWORD *)((char *)v996 + v997[17]);
          *(_OWORD *)((char *)v995 + v997[18]) = *(_OWORD *)((char *)v996 + v997[18]);
          *(_OWORD *)((char *)v995 + v997[19]) = *(_OWORD *)((char *)v996 + v997[19]);
          *(_OWORD *)((char *)v995 + v997[20]) = *(_OWORD *)((char *)v996 + v997[20]);
          *(_OWORD *)((char *)v995 + v997[21]) = *(_OWORD *)((char *)v996 + v997[21]);
          *(_OWORD *)((char *)v995 + v997[22]) = *(_OWORD *)((char *)v996 + v997[22]);
          *(_OWORD *)((char *)v995 + v997[23]) = *(_OWORD *)((char *)v996 + v997[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v995, 0, 1, (uint64_t)v997);
        }
        uint64_t v1011 = v1184[19];
        v1012 = (_OWORD *)((char *)v7 + v1011);
        v1013 = (_OWORD *)((char *)v8 + v1011);
        v1014 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1013, 1, (uint64_t)v1014))
        {
          uint64_t v1015 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v1012, v1013, *(void *)(*(void *)(v1015 - 8) + 64));
        }
        else
        {
          long long v1016 = v1013[1];
          _OWORD *v1012 = *v1013;
          v1012[1] = v1016;
          long long v1017 = v1013[3];
          v1012[2] = v1013[2];
          v1012[3] = v1017;
          long long v1018 = v1013[5];
          v1012[4] = v1013[4];
          v1012[5] = v1018;
          uint64_t v1019 = v1014[11];
          v1168 = (char *)v1012 + v1019;
          v1020 = (char *)v1013 + v1019;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1013 + v1019, 1, v1150))
          {
            uint64_t v1021 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1168, v1020, *(void *)(*(void *)(v1021 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1168, v1020, v1150);
            __swift_storeEnumTagSinglePayload((uint64_t)v1168, 0, 1, v1150);
          }
          *(_OWORD *)((char *)v1012 + v1014[12]) = *(_OWORD *)((char *)v1013 + v1014[12]);
          *(void *)((char *)v1012 + v1014[13]) = *(void *)((char *)v1013 + v1014[13]);
          uint64_t v1022 = v1014[14];
          v1169 = (char *)v1012 + v1022;
          v1023 = (char *)v1013 + v1022;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1013 + v1022, 1, v1150))
          {
            uint64_t v1024 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1169, v1023, *(void *)(*(void *)(v1024 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1169, v1023, v1150);
            __swift_storeEnumTagSinglePayload((uint64_t)v1169, 0, 1, v1150);
          }
          *(void *)((char *)v1012 + v1014[15]) = *(void *)((char *)v1013 + v1014[15]);
          *(void *)((char *)v1012 + v1014[16]) = *(void *)((char *)v1013 + v1014[16]);
          *(_OWORD *)((char *)v1012 + v1014[17]) = *(_OWORD *)((char *)v1013 + v1014[17]);
          *(void *)((char *)v1012 + v1014[18]) = *(void *)((char *)v1013 + v1014[18]);
          *(void *)((char *)v1012 + v1014[19]) = *(void *)((char *)v1013 + v1014[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1012, 0, 1, (uint64_t)v1014);
        }
        uint64_t v1025 = v1184[20];
        v1026 = (_OWORD *)((char *)v7 + v1025);
        v1027 = (_OWORD *)((char *)v8 + v1025);
        v1028 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1027, 1, (uint64_t)v1028))
        {
          uint64_t v1029 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v1026, v1027, *(void *)(*(void *)(v1029 - 8) + 64));
        }
        else
        {
          long long v1030 = v1027[1];
          _OWORD *v1026 = *v1027;
          v1026[1] = v1030;
          long long v1031 = v1027[3];
          v1026[2] = v1027[2];
          v1026[3] = v1031;
          uint64_t v1032 = v1028[8];
          v1170 = (char *)v1026 + v1032;
          v1033 = (char *)v1027 + v1032;
          uint64_t v1034 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v1033, 1, v1034))
          {
            uint64_t v1035 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1170, v1033, *(void *)(*(void *)(v1035 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1034 - 8) + 32))(v1170, v1033, v1034);
            __swift_storeEnumTagSinglePayload((uint64_t)v1170, 0, 1, v1034);
          }
          *(_OWORD *)((char *)v1026 + v1028[9]) = *(_OWORD *)((char *)v1027 + v1028[9]);
          *(_OWORD *)((char *)v1026 + v1028[10]) = *(_OWORD *)((char *)v1027 + v1028[10]);
          *(_OWORD *)((char *)v1026 + v1028[11]) = *(_OWORD *)((char *)v1027 + v1028[11]);
          uint64_t v1036 = v1028[12];
          v1171 = (char *)v1026 + v1036;
          v1037 = (char *)v1027 + v1036;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1027 + v1036, 1, v1150))
          {
            uint64_t v1038 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1171, v1037, *(void *)(*(void *)(v1038 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1171, v1037, v1150);
            __swift_storeEnumTagSinglePayload((uint64_t)v1171, 0, 1, v1150);
          }
          uint64_t v1039 = v1028[13];
          v1172 = (char *)v1026 + v1039;
          v1040 = (char *)v1027 + v1039;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1027 + v1039, 1, v1150))
          {
            uint64_t v1041 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1172, v1040, *(void *)(*(void *)(v1041 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v1150 - 8) + 32))(v1172, v1040, v1150);
            __swift_storeEnumTagSinglePayload((uint64_t)v1172, 0, 1, v1150);
          }
          uint64_t v1042 = v1028[14];
          v1043 = (char *)v1026 + v1042;
          v1044 = (char *)v1027 + v1042;
          *(void *)v1043 = *(void *)v1044;
          v1043[8] = v1044[8];
          *(_OWORD *)((char *)v1026 + v1028[15]) = *(_OWORD *)((char *)v1027 + v1028[15]);
          *(_OWORD *)((char *)v1026 + v1028[16]) = *(_OWORD *)((char *)v1027 + v1028[16]);
          *(_OWORD *)((char *)v1026 + v1028[17]) = *(_OWORD *)((char *)v1027 + v1028[17]);
          *(_OWORD *)((char *)v1026 + v1028[18]) = *(_OWORD *)((char *)v1027 + v1028[18]);
          *(_OWORD *)((char *)v1026 + v1028[19]) = *(_OWORD *)((char *)v1027 + v1028[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1026, 0, 1, (uint64_t)v1028);
        }
        uint64_t v9 = v1188;
        memcpy((char *)v7 + v1184[21], (char *)v8 + v1184[21], 0x90uLL);
        goto LABEL_524;
      case 4u:
        uint64_t v50 = v9;
        long long v51 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v51;
        long long v52 = v8[3];
        v7[2] = v8[2];
        v7[3] = v52;
        uint64_t v53 = type metadata accessor for NoteDocument(0);
        uint64_t v54 = *(int *)(v53 + 32);
        v55 = (char *)v7 + v54;
        v56 = (char *)v8 + v54;
        uint64_t v57 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, v57))
        {
          uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v55, v56, *(void *)(*(void *)(v58 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v55, v56, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v55, 0, 1, v57);
        }
        uint64_t v9 = v50;
        uint64_t v259 = *(int *)(v53 + 36);
        v260 = (char *)v7 + v259;
        v261 = (char *)v8 + v259;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v259, 1, v57)) {
          goto LABEL_139;
        }
        goto LABEL_136;
      case 5u:
        uint64_t v59 = v9;
        long long v60 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v60;
        v7[2] = v8[2];
        v61 = (int *)type metadata accessor for Reminder(0);
        uint64_t v62 = v61[7];
        v63 = (char *)v7 + v62;
        v64 = (char *)v8 + v62;
        uint64_t v65 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v64, 1, v65))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v63, v64, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32))(v63, v64, v65);
          __swift_storeEnumTagSinglePayload((uint64_t)v63, 0, 1, v65);
        }
        uint64_t v262 = v61[8];
        v263 = (char *)v7 + v262;
        v264 = (char *)v8 + v262;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v262, 1, v65))
        {
          uint64_t v265 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v263, v264, *(void *)(*(void *)(v265 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32))(v263, v264, v65);
          __swift_storeEnumTagSinglePayload((uint64_t)v263, 0, 1, v65);
        }
        uint64_t v9 = v59;
        *((unsigned char *)v7 + v61[9]) = *((unsigned char *)v8 + v61[9]);
        *(_OWORD *)((char *)v7 + v61[10]) = *(_OWORD *)((char *)v8 + v61[10]);
        *(_OWORD *)((char *)v7 + v61[11]) = *(_OWORD *)((char *)v8 + v61[11]);
        uint64_t v324 = v61[12];
        v84 = (char *)v7 + v324;
        v85 = (char *)v8 + v324;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 6u:
        long long v67 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v67;
        long long v68 = v8[3];
        v7[2] = v8[2];
        v7[3] = v68;
        v69 = (int *)type metadata accessor for PhoneHistory(0);
        uint64_t v70 = v69[10];
        v71 = (char *)v7 + v70;
        v72 = (char *)v8 + v70;
        uint64_t v73 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v72, 1, v73))
        {
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v71, v72, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 32))(v71, v72, v73);
          __swift_storeEnumTagSinglePayload((uint64_t)v71, 0, 1, v73);
        }
        *(_OWORD *)((char *)v7 + v69[11]) = *(_OWORD *)((char *)v8 + v69[11]);
        *(_OWORD *)((char *)v7 + v69[12]) = *(_OWORD *)((char *)v8 + v69[12]);
        uint64_t v266 = v69[13];
        v84 = (char *)v7 + v266;
        v85 = (char *)v8 + v266;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 7u:
        long long v75 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v75;
        v7[2] = v8[2];
        uint64_t v76 = type metadata accessor for VoicemailTranscript(0);
        uint64_t v77 = *(int *)(v76 + 28);
        v78 = (char *)v7 + v77;
        v79 = (char *)v8 + v77;
        uint64_t v80 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80))
        {
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v78, v79, *(void *)(*(void *)(v81 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
          __swift_storeEnumTagSinglePayload((uint64_t)v78, 0, 1, v80);
        }
        uint64_t v267 = *(int *)(v76 + 32);
        v84 = (char *)v7 + v267;
        v85 = (char *)v8 + v267;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 8u:
        long long v82 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v82;
        v7[2] = v8[2];
        uint64_t v83 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
        v84 = (char *)v7 + v83;
        v85 = (char *)v8 + v83;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 9u:
        long long v87 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v87;
        v88 = (int *)type metadata accessor for VoiceMemo(0);
        uint64_t v89 = v88[6];
        v90 = (char *)v7 + v89;
        v91 = (char *)v8 + v89;
        uint64_t v92 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v91, 1, v92))
        {
          uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v90, v91, *(void *)(*(void *)(v93 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 32))(v90, v91, v92);
          __swift_storeEnumTagSinglePayload((uint64_t)v90, 0, 1, v92);
        }
        uint64_t v268 = v88[7];
        v269 = (char *)v7 + v268;
        v270 = (char *)v8 + v268;
        *(void *)v269 = *(void *)v270;
        v269[8] = v270[8];
        uint64_t v271 = v88[8];
        v84 = (char *)v7 + v271;
        v85 = (char *)v8 + v271;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 0xAu:
        uint64_t v94 = v9;
        long long v95 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v95;
        v96 = (int *)type metadata accessor for Safari(0);
        uint64_t v97 = v96[6];
        v98 = (char *)v7 + v97;
        v99 = (char *)v8 + v97;
        uint64_t v100 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v99, 1, v100))
        {
          uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v98, v99, *(void *)(*(void *)(v101 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 32))(v98, v99, v100);
          __swift_storeEnumTagSinglePayload((uint64_t)v98, 0, 1, v100);
        }
        uint64_t v9 = v94;
        *(_OWORD *)((char *)v7 + v96[7]) = *(_OWORD *)((char *)v8 + v96[7]);
        *(_OWORD *)((char *)v7 + v96[8]) = *(_OWORD *)((char *)v8 + v96[8]);
        uint64_t v272 = v96[9];
        v273 = (char *)v7 + v272;
        v274 = (char *)v8 + v272;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v272, 1, v100))
        {
          uint64_t v275 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v273, v274, *(void *)(*(void *)(v275 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 32))(v273, v274, v100);
          __swift_storeEnumTagSinglePayload((uint64_t)v273, 0, 1, v100);
        }
        goto LABEL_524;
      case 0xCu:
        long long v102 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v102;
        v7[2] = v8[2];
        v103 = (int *)type metadata accessor for WalletTransaction(0);
        uint64_t v104 = v103[7];
        v105 = (char *)v7 + v104;
        v106 = (char *)v8 + v104;
        uint64_t v107 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v106, 1, v107))
        {
          uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v105, v106, *(void *)(*(void *)(v108 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 32))(v105, v106, v107);
          __swift_storeEnumTagSinglePayload((uint64_t)v105, 0, 1, v107);
        }
        *(_OWORD *)((char *)v7 + v103[8]) = *(_OWORD *)((char *)v8 + v103[8]);
        *(_OWORD *)((char *)v7 + v103[9]) = *(_OWORD *)((char *)v8 + v103[9]);
        *(_OWORD *)((char *)v7 + v103[10]) = *(_OWORD *)((char *)v8 + v103[10]);
        uint64_t v276 = v103[11];
        v277 = (char *)v7 + v276;
        v278 = (char *)v8 + v276;
        *(void *)(v277 + 13) = *(void *)(v278 + 13);
        *(_OWORD *)v277 = *(_OWORD *)v278;
        *(_OWORD *)((char *)v7 + v103[12]) = *(_OWORD *)((char *)v8 + v103[12]);
        goto LABEL_524;
      case 0xDu:
        long long v109 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v109;
        v7[2] = v8[2];
        v110 = (int *)type metadata accessor for WalletPass(0);
        uint64_t v111 = v110[7];
        v112 = (char *)v7 + v111;
        v113 = (char *)v8 + v111;
        uint64_t v114 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v113, 1, v114))
        {
          uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v112, v113, *(void *)(*(void *)(v115 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 32))(v112, v113, v114);
          __swift_storeEnumTagSinglePayload((uint64_t)v112, 0, 1, v114);
        }
        *(_OWORD *)((char *)v7 + v110[8]) = *(_OWORD *)((char *)v8 + v110[8]);
        *(void *)((char *)v7 + v110[9]) = *(void *)((char *)v8 + v110[9]);
        goto LABEL_524;
      case 0xFu:
        uint64_t v1186 = v9;
        long long v116 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v116;
        long long v117 = v8[3];
        v7[2] = v8[2];
        v7[3] = v117;
        long long v118 = v8[5];
        v7[4] = v8[4];
        v7[5] = v118;
        *((unsigned char *)v7 + 96) = *((unsigned char *)v8 + 96);
        *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
        v119 = (int *)type metadata accessor for FlightReservation(0);
        uint64_t v120 = v119[13];
        v121 = (char *)v7 + v120;
        v122 = (char *)v8 + v120;
        uint64_t v123 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v122, 1, v123))
        {
          uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v121, v122, *(void *)(*(void *)(v124 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 32))(v121, v122, v123);
          __swift_storeEnumTagSinglePayload((uint64_t)v121, 0, 1, v123);
        }
        uint64_t v279 = v119[14];
        v280 = (char *)v7 + v279;
        v281 = (char *)v8 + v279;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v279, 1, v123))
        {
          uint64_t v282 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v280, v281, *(void *)(*(void *)(v282 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 32))(v280, v281, v123);
          __swift_storeEnumTagSinglePayload((uint64_t)v280, 0, 1, v123);
        }
        *(_OWORD *)((char *)v7 + v119[15]) = *(_OWORD *)((char *)v8 + v119[15]);
        *(_OWORD *)((char *)v7 + v119[16]) = *(_OWORD *)((char *)v8 + v119[16]);
        *(_OWORD *)((char *)v7 + v119[17]) = *(_OWORD *)((char *)v8 + v119[17]);
        uint64_t v325 = v119[18];
        v326 = (char *)v7 + v325;
        v327 = (char *)v8 + v325;
        uint64_t v328 = type metadata accessor for DateComponents();
        v329 = *(void (**)(char *, char *, uint64_t))(*(void *)(v328 - 8) + 32);
        v329(v326, v327, v328);
        v329((char *)v7 + v119[19], (char *)v8 + v119[19], v328);
        *(_OWORD *)((char *)v7 + v119[20]) = *(_OWORD *)((char *)v8 + v119[20]);
        *(_OWORD *)((char *)v7 + v119[21]) = *(_OWORD *)((char *)v8 + v119[21]);
        *(_OWORD *)((char *)v7 + v119[22]) = *(_OWORD *)((char *)v8 + v119[22]);
        *(_OWORD *)((char *)v7 + v119[23]) = *(_OWORD *)((char *)v8 + v119[23]);
        *(_OWORD *)((char *)v7 + v119[24]) = *(_OWORD *)((char *)v8 + v119[24]);
        *(_OWORD *)((char *)v7 + v119[25]) = *(_OWORD *)((char *)v8 + v119[25]);
        *(_OWORD *)((char *)v7 + v119[26]) = *(_OWORD *)((char *)v8 + v119[26]);
        *(_OWORD *)((char *)v7 + v119[27]) = *(_OWORD *)((char *)v8 + v119[27]);
        *(_OWORD *)((char *)v7 + v119[28]) = *(_OWORD *)((char *)v8 + v119[28]);
        *(_OWORD *)((char *)v7 + v119[29]) = *(_OWORD *)((char *)v8 + v119[29]);
        *(_OWORD *)((char *)v7 + v119[30]) = *(_OWORD *)((char *)v8 + v119[30]);
        *(_OWORD *)((char *)v7 + v119[31]) = *(_OWORD *)((char *)v8 + v119[31]);
        *(_OWORD *)((char *)v7 + v119[32]) = *(_OWORD *)((char *)v8 + v119[32]);
        *(void *)((char *)v7 + v119[33]) = *(void *)((char *)v8 + v119[33]);
        *(void *)((char *)v7 + v119[34]) = *(void *)((char *)v8 + v119[34]);
        *(_OWORD *)((char *)v7 + v119[35]) = *(_OWORD *)((char *)v8 + v119[35]);
        *(_OWORD *)((char *)v7 + v119[36]) = *(_OWORD *)((char *)v8 + v119[36]);
        *(_OWORD *)((char *)v7 + v119[37]) = *(_OWORD *)((char *)v8 + v119[37]);
        uint64_t v330 = v119[38];
        v331 = (char *)v7 + v330;
        v332 = (char *)v8 + v330;
        uint64_t v333 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v332, 1, v333))
        {
          uint64_t v334 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v331, v332, *(void *)(*(void *)(v334 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v333 - 8) + 32))(v331, v332, v333);
          __swift_storeEnumTagSinglePayload((uint64_t)v331, 0, 1, v333);
        }
        uint64_t v9 = v1186;
        *(_OWORD *)((char *)v7 + v119[39]) = *(_OWORD *)((char *)v8 + v119[39]);
        *(_OWORD *)((char *)v7 + v119[40]) = *(_OWORD *)((char *)v8 + v119[40]);
        uint64_t v359 = v119[41];
        v360 = (char *)v7 + v359;
        v361 = (char *)v8 + v359;
        *(void *)v360 = *(void *)v361;
        v360[8] = v361[8];
        *(_OWORD *)((char *)v7 + v119[42]) = *(_OWORD *)((char *)v8 + v119[42]);
        uint64_t v362 = v119[43];
        v363 = (char *)v7 + v362;
        v364 = (char *)v8 + v362;
        *(_OWORD *)v363 = *(_OWORD *)v364;
        *(void *)(v363 + 13) = *(void *)(v364 + 13);
        *(_OWORD *)((char *)v7 + v119[44]) = *(_OWORD *)((char *)v8 + v119[44]);
        *(_OWORD *)((char *)v7 + v119[45]) = *(_OWORD *)((char *)v8 + v119[45]);
        *(_OWORD *)((char *)v7 + v119[46]) = *(_OWORD *)((char *)v8 + v119[46]);
        *(_OWORD *)((char *)v7 + v119[47]) = *(_OWORD *)((char *)v8 + v119[47]);
        uint64_t v365 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
        *(void *)((char *)v7 + *(int *)(v365 + 48)) = *(void *)((char *)v8 + *(int *)(v365 + 48));
        goto LABEL_524;
      case 0x10u:
        uint64_t v125 = v9;
        long long v126 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v126;
        long long v127 = v8[3];
        v7[2] = v8[2];
        v7[3] = v127;
        long long v128 = v8[5];
        v7[4] = v8[4];
        v7[5] = v128;
        *((unsigned char *)v7 + 96) = *((unsigned char *)v8 + 96);
        *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
        *(_OWORD *)((char *)v7 + 120) = *(_OWORD *)((char *)v8 + 120);
        v129 = (int *)type metadata accessor for HotelReservation(0);
        uint64_t v130 = v129[14];
        v131 = (char *)v7 + v130;
        v132 = (char *)v8 + v130;
        uint64_t v133 = type metadata accessor for DateComponents();
        if (__swift_getEnumTagSinglePayload((uint64_t)v132, 1, v133))
        {
          uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v131, v132, *(void *)(*(void *)(v134 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32))(v131, v132, v133);
          __swift_storeEnumTagSinglePayload((uint64_t)v131, 0, 1, v133);
        }
        uint64_t v283 = v129[15];
        v284 = (char *)v7 + v283;
        v285 = (char *)v8 + v283;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v283, 1, v133))
        {
          uint64_t v286 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v284, v285, *(void *)(*(void *)(v286 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32))(v284, v285, v133);
          __swift_storeEnumTagSinglePayload((uint64_t)v284, 0, 1, v133);
        }
        uint64_t v9 = v125;
        *(_OWORD *)((char *)v7 + v129[16]) = *(_OWORD *)((char *)v8 + v129[16]);
        *(_OWORD *)((char *)v7 + v129[17]) = *(_OWORD *)((char *)v8 + v129[17]);
        *(_OWORD *)((char *)v7 + v129[18]) = *(_OWORD *)((char *)v8 + v129[18]);
        *(_OWORD *)((char *)v7 + v129[19]) = *(_OWORD *)((char *)v8 + v129[19]);
        *(_OWORD *)((char *)v7 + v129[20]) = *(_OWORD *)((char *)v8 + v129[20]);
        *(void *)((char *)v7 + v129[21]) = *(void *)((char *)v8 + v129[21]);
        *(void *)((char *)v7 + v129[22]) = *(void *)((char *)v8 + v129[22]);
        uint64_t v335 = v129[23];
        v336 = (char *)v7 + v335;
        v337 = (char *)v8 + v335;
        v336[8] = v337[8];
        *(void *)v336 = *(void *)v337;
        uint64_t v338 = v129[24];
        v339 = (char *)v7 + v338;
        v340 = (char *)v8 + v338;
        v339[8] = v340[8];
        *(void *)v339 = *(void *)v340;
        *(_OWORD *)((char *)v7 + v129[25]) = *(_OWORD *)((char *)v8 + v129[25]);
        *(_OWORD *)((char *)v7 + v129[26]) = *(_OWORD *)((char *)v8 + v129[26]);
        *(_OWORD *)((char *)v7 + v129[27]) = *(_OWORD *)((char *)v8 + v129[27]);
        *(_OWORD *)((char *)v7 + v129[28]) = *(_OWORD *)((char *)v8 + v129[28]);
        uint64_t v341 = v129[29];
        v342 = (char *)v7 + v341;
        v343 = (char *)v8 + v341;
        *(void *)v342 = *(void *)v343;
        v342[8] = v343[8];
        goto LABEL_524;
      case 0x11u:
        long long v135 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v135;
        long long v136 = v8[3];
        v7[2] = v8[2];
        v7[3] = v136;
        long long v137 = v8[5];
        v7[4] = v8[4];
        v7[5] = v137;
        *((unsigned char *)v7 + 96) = *((unsigned char *)v8 + 96);
        *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
        *(_OWORD *)((char *)v7 + 120) = *(_OWORD *)((char *)v8 + 120);
        v138 = (int *)type metadata accessor for RestaurantReservation(0);
        uint64_t v139 = v138[14];
        v140 = (char *)v7 + v139;
        v141 = (char *)v8 + v139;
        uint64_t v142 = type metadata accessor for DateComponents();
        if (__swift_getEnumTagSinglePayload((uint64_t)v141, 1, v142))
        {
          uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v140, v141, *(void *)(*(void *)(v143 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v142 - 8) + 32))(v140, v141, v142);
          __swift_storeEnumTagSinglePayload((uint64_t)v140, 0, 1, v142);
        }
        *(_OWORD *)((char *)v7 + v138[15]) = *(_OWORD *)((char *)v8 + v138[15]);
        *(_OWORD *)((char *)v7 + v138[16]) = *(_OWORD *)((char *)v8 + v138[16]);
        *(_OWORD *)((char *)v7 + v138[17]) = *(_OWORD *)((char *)v8 + v138[17]);
        *(_OWORD *)((char *)v7 + v138[18]) = *(_OWORD *)((char *)v8 + v138[18]);
        *(_OWORD *)((char *)v7 + v138[19]) = *(_OWORD *)((char *)v8 + v138[19]);
        *(void *)((char *)v7 + v138[20]) = *(void *)((char *)v8 + v138[20]);
        *(_OWORD *)((char *)v7 + v138[21]) = *(_OWORD *)((char *)v8 + v138[21]);
        *(_OWORD *)((char *)v7 + v138[22]) = *(_OWORD *)((char *)v8 + v138[22]);
        *(_OWORD *)((char *)v7 + v138[23]) = *(_OWORD *)((char *)v8 + v138[23]);
        goto LABEL_524;
      case 0x12u:
        uint64_t v144 = v9;
        long long v145 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v145;
        long long v146 = v8[3];
        v7[2] = v8[2];
        v7[3] = v146;
        long long v147 = v8[5];
        v7[4] = v8[4];
        v7[5] = v147;
        long long v148 = v8[7];
        v7[6] = v8[6];
        v7[7] = v148;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v149 = v8[10];
        v7[9] = v8[9];
        v7[10] = v149;
        long long v150 = v8[12];
        v7[11] = v8[11];
        v7[12] = v150;
        long long v151 = v8[14];
        v7[13] = v8[13];
        v7[14] = v151;
        v7[15] = v8[15];
        *((void *)v7 + 32) = *((void *)v8 + 32);
        *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
        *(_OWORD *)((char *)v7 + 280) = *(_OWORD *)((char *)v8 + 280);
        *(_OWORD *)((char *)v7 + 296) = *(_OWORD *)((char *)v8 + 296);
        *(_OWORD *)((char *)v7 + 312) = *(_OWORD *)((char *)v8 + 312);
        *(_OWORD *)((char *)v7 + 328) = *(_OWORD *)((char *)v8 + 328);
        *(_OWORD *)((char *)v7 + 344) = *(_OWORD *)((char *)v8 + 344);
        *(_OWORD *)((char *)v7 + 360) = *(_OWORD *)((char *)v8 + 360);
        *((unsigned char *)v7 + 384) = *((unsigned char *)v8 + 384);
        *((void *)v7 + 47) = *((void *)v8 + 47);
        *(_OWORD *)((char *)v7 + 392) = *(_OWORD *)((char *)v8 + 392);
        *(_OWORD *)((char *)v7 + 408) = *(_OWORD *)((char *)v8 + 408);
        uint64_t v152 = type metadata accessor for RentalCarReservation(0);
        uint64_t v153 = *(int *)(v152 + 140);
        v154 = (char *)v7 + v153;
        v155 = (char *)v8 + v153;
        uint64_t v57 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v155, 1, v57))
        {
          uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v154, v155, *(void *)(*(void *)(v156 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v154, v155, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v154, 0, 1, v57);
        }
        uint64_t v9 = v144;
        uint64_t v287 = *(int *)(v152 + 144);
        v260 = (char *)v7 + v287;
        v261 = (char *)v8 + v287;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v287, 1, v57)) {
          goto LABEL_139;
        }
        goto LABEL_136;
      case 0x13u:
        uint64_t v157 = v9;
        long long v158 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v158;
        long long v159 = v8[3];
        v7[2] = v8[2];
        v7[3] = v159;
        long long v160 = v8[5];
        v7[4] = v8[4];
        v7[5] = v160;
        long long v161 = v8[7];
        v7[6] = v8[6];
        v7[7] = v161;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v162 = v8[10];
        v7[9] = v8[9];
        v7[10] = v162;
        long long v163 = v8[12];
        v7[11] = v8[11];
        v7[12] = v163;
        *((void *)v7 + 26) = *((void *)v8 + 26);
        *(_OWORD *)((char *)v7 + 216) = *(_OWORD *)((char *)v8 + 216);
        *(_OWORD *)((char *)v7 + 232) = *(_OWORD *)((char *)v8 + 232);
        *(_OWORD *)((char *)v7 + 248) = *(_OWORD *)((char *)v8 + 248);
        *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
        *((unsigned char *)v7 + 296) = *((unsigned char *)v8 + 296);
        uint64_t v164 = *((void *)v8 + 36);
        *((void *)v7 + 35) = *((void *)v8 + 35);
        *((void *)v7 + 36) = v164;
        uint64_t v165 = type metadata accessor for TicketedTransportation(0);
        uint64_t v166 = *(int *)(v165 + 112);
        v167 = (char *)v7 + v166;
        v168 = (char *)v8 + v166;
        uint64_t v57 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v168, 1, v57))
        {
          uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v167, v168, *(void *)(*(void *)(v169 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v167, v168, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v167, 0, 1, v57);
        }
        uint64_t v9 = v157;
        uint64_t v288 = *(int *)(v165 + 116);
        v260 = (char *)v7 + v288;
        v261 = (char *)v8 + v288;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v288, 1, v57)) {
          goto LABEL_139;
        }
        goto LABEL_136;
      case 0x14u:
        long long v170 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v170;
        long long v171 = v8[3];
        v7[2] = v8[2];
        v7[3] = v171;
        long long v172 = v8[5];
        v7[4] = v8[4];
        v7[5] = v172;
        long long v173 = v8[7];
        v7[6] = v8[6];
        v7[7] = v173;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v174 = v8[10];
        v7[9] = v8[9];
        v7[10] = v174;
        long long v175 = v8[12];
        v7[11] = v8[11];
        v7[12] = v175;
        long long v176 = v8[14];
        v7[13] = v8[13];
        v7[14] = v176;
        *((void *)v7 + 30) = *((void *)v8 + 30);
        *(_OWORD *)((char *)v7 + 248) = *(_OWORD *)((char *)v8 + 248);
        *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
        *((unsigned char *)v7 + 296) = *((unsigned char *)v8 + 296);
        uint64_t v177 = *((void *)v8 + 36);
        *((void *)v7 + 35) = *((void *)v8 + 35);
        *((void *)v7 + 36) = v177;
        v7[19] = v8[19];
        v178 = (int *)type metadata accessor for TicketedShow(0);
        uint64_t v179 = v178[29];
        v180 = (char *)v7 + v179;
        v181 = (char *)v8 + v179;
        uint64_t v182 = type metadata accessor for URL();
        uint64_t v1187 = v9;
        if (__swift_getEnumTagSinglePayload((uint64_t)v181, 1, v182))
        {
          uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v180, v181, *(void *)(*(void *)(v183 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v182 - 8) + 32))(v180, v181, v182);
          __swift_storeEnumTagSinglePayload((uint64_t)v180, 0, 1, v182);
        }
        *(_OWORD *)((char *)v7 + v178[30]) = *(_OWORD *)((char *)v8 + v178[30]);
        uint64_t v289 = v178[31];
        v290 = (char *)v7 + v289;
        v291 = (char *)v8 + v289;
        uint64_t v57 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v291, 1, v57))
        {
          uint64_t v292 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v290, v291, *(void *)(*(void *)(v292 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v290, v291, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v290, 0, 1, v57);
        }
        uint64_t v9 = v1187;
        uint64_t v344 = v178[32];
        v260 = (char *)v7 + v344;
        v261 = (char *)v8 + v344;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v344, 1, v57)) {
          goto LABEL_139;
        }
        goto LABEL_136;
      case 0x15u:
        uint64_t v184 = v9;
        long long v185 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v185;
        long long v186 = v8[3];
        v7[2] = v8[2];
        v7[3] = v186;
        long long v187 = v8[5];
        v7[4] = v8[4];
        v7[5] = v187;
        long long v188 = v8[7];
        v7[6] = v8[6];
        v7[7] = v188;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v189 = v8[10];
        v7[9] = v8[9];
        v7[10] = v189;
        long long v190 = v8[12];
        v7[11] = v8[11];
        v7[12] = v190;
        long long v191 = v8[14];
        v7[13] = v8[13];
        v7[14] = v191;
        long long v192 = v8[16];
        v7[15] = v8[15];
        v7[16] = v192;
        *((unsigned char *)v7 + 280) = *((unsigned char *)v8 + 280);
        *((void *)v7 + 34) = *((void *)v8 + 34);
        v7[18] = v8[18];
        uint64_t v193 = type metadata accessor for Appointment(0);
        uint64_t v194 = *(int *)(v193 + 108);
        v195 = (char *)v7 + v194;
        v196 = (char *)v8 + v194;
        uint64_t v57 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v196, 1, v57))
        {
          uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v195, v196, *(void *)(*(void *)(v197 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v195, v196, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v195, 0, 1, v57);
        }
        uint64_t v9 = v184;
        uint64_t v293 = *(int *)(v193 + 112);
        v260 = (char *)v7 + v293;
        v261 = (char *)v8 + v293;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v293, 1, v57))
        {
LABEL_139:
          uint64_t v345 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v260, v261, *(void *)(*(void *)(v345 - 8) + 64));
        }
        else
        {
LABEL_136:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v260, v261, v57);
          __swift_storeEnumTagSinglePayload((uint64_t)v260, 0, 1, v57);
        }
        goto LABEL_524;
      case 0x16u:
        uint64_t v198 = v9;
        long long v199 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v199;
        long long v200 = v8[3];
        v7[2] = v8[2];
        v7[3] = v200;
        long long v201 = v8[5];
        v7[4] = v8[4];
        v7[5] = v201;
        long long v202 = v8[7];
        v7[6] = v8[6];
        v7[7] = v202;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v203 = v8[10];
        v7[9] = v8[9];
        v7[10] = v203;
        long long v204 = v8[12];
        v7[11] = v8[11];
        v7[12] = v204;
        long long v205 = v8[14];
        v7[13] = v8[13];
        v7[14] = v205;
        v7[15] = v8[15];
        v206 = (int *)type metadata accessor for Party(0);
        uint64_t v207 = v206[24];
        v208 = (char *)v7 + v207;
        v209 = (char *)v8 + v207;
        uint64_t v210 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v209, 1, v210))
        {
          uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v208, v209, *(void *)(*(void *)(v211 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v210 - 8) + 32))(v208, v209, v210);
          __swift_storeEnumTagSinglePayload((uint64_t)v208, 0, 1, v210);
        }
        uint64_t v294 = v206[25];
        v295 = (char *)v7 + v294;
        v296 = (char *)v8 + v294;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v294, 1, v210))
        {
          uint64_t v297 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v295, v296, *(void *)(*(void *)(v297 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v210 - 8) + 32))(v295, v296, v210);
          __swift_storeEnumTagSinglePayload((uint64_t)v295, 0, 1, v210);
        }
        uint64_t v9 = v198;
        uint64_t v346 = v206[26];
        v84 = (char *)v7 + v346;
        v85 = (char *)v8 + v346;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86)) {
          goto LABEL_146;
        }
        goto LABEL_128;
      case 0x17u:
        uint64_t v212 = v9;
        long long v213 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v213;
        long long v214 = v8[3];
        v7[2] = v8[2];
        v7[3] = v214;
        long long v215 = v8[5];
        v7[4] = v8[4];
        v7[5] = v215;
        long long v216 = v8[7];
        v7[6] = v8[6];
        v7[7] = v216;
        *((unsigned char *)v7 + 128) = *((unsigned char *)v8 + 128);
        *(_WORD *)((char *)v7 + 129) = *(_WORD *)((char *)v8 + 129);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        long long v217 = v8[10];
        v7[9] = v8[9];
        v7[10] = v217;
        long long v218 = v8[12];
        v7[11] = v8[11];
        v7[12] = v218;
        v7[13] = v8[13];
        v219 = (int *)type metadata accessor for Trip(0);
        uint64_t v220 = v219[22];
        v221 = (char *)v7 + v220;
        v222 = (char *)v8 + v220;
        uint64_t v223 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v222, 1, v223))
        {
          uint64_t v224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v221, v222, *(void *)(*(void *)(v224 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v223 - 8) + 32))(v221, v222, v223);
          __swift_storeEnumTagSinglePayload((uint64_t)v221, 0, 1, v223);
        }
        uint64_t v298 = v219[23];
        v299 = (char *)v7 + v298;
        v300 = (char *)v8 + v298;
        if (__swift_getEnumTagSinglePayload((uint64_t)v8 + v298, 1, v223))
        {
          uint64_t v301 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v299, v300, *(void *)(*(void *)(v301 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v223 - 8) + 32))(v299, v300, v223);
          __swift_storeEnumTagSinglePayload((uint64_t)v299, 0, 1, v223);
        }
        uint64_t v9 = v212;
        uint64_t v347 = v219[24];
        v348 = (char *)v7 + v347;
        v349 = (char *)v8 + v347;
        *(void *)v348 = *(void *)v349;
        v348[8] = v349[8];
        uint64_t v350 = v219[25];
        v84 = (char *)v7 + v350;
        v85 = (char *)v8 + v350;
        uint64_t v86 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v85, 1, v86))
        {
LABEL_146:
          uint64_t v351 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v84, v85, *(void *)(*(void *)(v351 - 8) + 64));
        }
        else
        {
LABEL_128:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32))(v84, v85, v86);
          __swift_storeEnumTagSinglePayload((uint64_t)v84, 0, 1, v86);
        }
        goto LABEL_524;
      case 0x18u:
        long long v225 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v225;
        v7[2] = v8[2];
        v226 = (int *)type metadata accessor for GlobalItem();
        uint64_t v227 = v226[7];
        v228 = (char *)v7 + v227;
        v229 = (char *)v8 + v227;
        uint64_t v230 = type metadata accessor for GlobalDialog();
        if (__swift_getEnumTagSinglePayload((uint64_t)v229, 1, v230))
        {
          uint64_t v231 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
          memcpy(v228, v229, *(void *)(*(void *)(v231 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v230 - 8) + 32))(v228, v229, v230);
          __swift_storeEnumTagSinglePayload((uint64_t)v228, 0, 1, v230);
        }
        *(_OWORD *)((char *)v7 + v226[8]) = *(_OWORD *)((char *)v8 + v226[8]);
        *((unsigned char *)v7 + v226[9]) = *((unsigned char *)v8 + v226[9]);
        uint64_t v302 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
        *(void *)((char *)v7 + *(int *)(v302 + 48)) = *(void *)((char *)v8 + *(int *)(v302 + 48));
        goto LABEL_524;
      case 0x1Au:
        long long v232 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v232;
        v7[2] = v8[2];
        *((void *)v7 + 6) = *((void *)v8 + 6);
        v233 = (int *)type metadata accessor for Answer(0);
        uint64_t v234 = v233[9];
        v235 = (char *)v7 + v234;
        v236 = (char *)v8 + v234;
        uint64_t v237 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v236, 1, v237))
        {
          uint64_t v238 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v235, v236, *(void *)(*(void *)(v238 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v237 - 8) + 32))(v235, v236, v237);
          __swift_storeEnumTagSinglePayload((uint64_t)v235, 0, 1, v237);
        }
        *((unsigned char *)v7 + v233[10]) = *((unsigned char *)v8 + v233[10]);
        *(_OWORD *)((char *)v7 + v233[11]) = *(_OWORD *)((char *)v8 + v233[11]);
LABEL_524:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
        break;
    }
    *(void *)((char *)v7 + *(int *)(v9 + 20)) = *(void *)((char *)v8 + *(int *)(v9 + 20));
    *(_OWORD *)((char *)v7 + *(int *)(v9 + 24)) = *(_OWORD *)((char *)v8 + *(int *)(v9 + 24));
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v1095 = *(int *)(v3 + 56);
  *(_OWORD *)(a1 + *(int *)(v3 + 52)) = *(_OWORD *)(a2 + *(int *)(v3 + 52));
  *(void *)(a1 + v1095) = *(void *)(a2 + v1095);
  return a1;
}

#error "258306A8C: too big function (funcsize=0)"

uint64_t getEnumTagSinglePayload for SearchSpotlightEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_258318638);
}

uint64_t sub_258318638(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return OUTLINED_FUNCTION_65_1(*a1);
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
  uint64_t v8 = (uint64_t)a1 + *(int *)(a3 + 48);
  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for SearchSpotlightEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2583186CC);
}

void *sub_2583186CC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 48);
    return (void *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for SearchSpotlightEntity()
{
  _s10OmniSearch0B6ResultVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for SearchResult?, (void (*)(uint64_t))type metadata accessor for SearchResult);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for SearchSpotlightEntity.Builder(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for IntentFile();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
    uint64_t v15 = v6[7];
    uint64_t v16 = v6[8];
    v17 = (void *)((char *)v4 + v15);
    v18 = (void *)((char *)v3 + v15);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = (void *)((char *)v4 + v16);
    v21 = (void *)((char *)v3 + v16);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = v6[9];
    uint64_t v24 = v6[10];
    v25 = *(void **)((char *)v3 + v23);
    *(void *)((char *)v4 + v23) = v25;
    v26 = (void *)((char *)v4 + v24);
    v27 = (void *)((char *)v3 + v24);
    uint64_t v28 = type metadata accessor for SearchResult(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v29 = v25;
    if (__swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v2753 = v28;
      v2754 = v26;
      type metadata accessor for SearchResultItem(0);
      v2752 = v6;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v2739 = v12;
          uint64_t v53 = v27[1];
          void *v26 = *v27;
          v26[1] = v53;
          uint64_t v54 = v27[3];
          v26[2] = v27[2];
          v26[3] = v54;
          v55 = v26;
          uint64_t v56 = v27[5];
          v55[4] = v27[4];
          v55[5] = v56;
          uint64_t v57 = v27[7];
          v55[6] = v27[6];
          v55[7] = v57;
          uint64_t v58 = v27[9];
          v55[8] = v27[8];
          v55[9] = v58;
          v2723 = (int *)type metadata accessor for MobileSMSDocument(0);
          uint64_t v59 = v2723[10];
          v2689 = (char *)v55 + v59;
          long long v60 = (char *)v27 + v59;
          uint64_t v61 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v60, 1, v61))
          {
            uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2689, v60, *(void *)(*(void *)(v62 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v2689, v60, v61);
            __swift_storeEnumTagSinglePayload((uint64_t)v2689, 0, 1, v61);
          }
          uint64_t v351 = v2723[11];
          uint64_t v352 = (char *)v2754 + v351;
          v353 = (char *)v27 + v351;
          uint64_t v354 = type metadata accessor for URL();
          uint64_t v2715 = v61;
          uint64_t v2683 = v354;
          if (__swift_getEnumTagSinglePayload((uint64_t)v353, 1, v354))
          {
            uint64_t v355 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v352, v353, *(void *)(*(void *)(v355 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v354 - 8) + 16))(v352, v353, v354);
            __swift_storeEnumTagSinglePayload((uint64_t)v352, 0, 1, v354);
          }
          *(void *)((char *)v2754 + v2723[12]) = *(void *)((char *)v27 + v2723[12]);
          uint64_t v512 = v2723[13];
          long long v513 = (void *)((char *)v2754 + v512);
          long long v514 = (void *)((char *)v27 + v512);
          uint64_t v515 = v514[1];
          *long long v513 = *v514;
          v513[1] = v515;
          uint64_t v516 = v2723[14];
          uint64_t v517 = (void *)((char *)v2754 + v516);
          v518 = (void *)((char *)v27 + v516);
          uint64_t v519 = v518[1];
          *uint64_t v517 = *v518;
          v517[1] = v519;
          *(void *)((char *)v2754 + v2723[15]) = *(void *)((char *)v27 + v2723[15]);
          *(void *)((char *)v2754 + v2723[16]) = *(void *)((char *)v27 + v2723[16]);
          uint64_t v520 = v2723[17];
          uint64_t v521 = (void *)((char *)v2754 + v520);
          v522 = (char *)v27 + v520;
          uint64_t v523 = *(void *)((char *)v27 + v520);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v523)
          {
            uint64_t v524 = *((void *)v522 + 1);
            uint64_t v525 = *((void *)v522 + 2);
            *uint64_t v521 = v523;
            v521[1] = v524;
            uint64_t v526 = *((void *)v522 + 3);
            uint64_t v527 = *((void *)v522 + 4);
            v521[2] = v525;
            v521[3] = v526;
            v521[4] = v527;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v687 = *((_OWORD *)v522 + 1);
            *(_OWORD *)uint64_t v521 = *(_OWORD *)v522;
            *((_OWORD *)v521 + 1) = v687;
            v521[4] = *((void *)v522 + 4);
          }
          uint64_t v688 = v2723[18];
          uint64_t v689 = v2754;
          v690 = (void *)((char *)v2754 + v688);
          v691 = (void *)((char *)v27 + v688);
          uint64_t v692 = v691[1];
          void *v690 = *v691;
          v690[1] = v692;
          uint64_t v693 = v2723[19];
          long long v694 = (void *)((char *)v2754 + v693);
          long long v695 = (void *)((char *)v27 + v693);
          uint64_t v696 = type metadata accessor for PartialExtractedAttributes(0);
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v695, 1, v696))
          {
            uint64_t v697 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
            memcpy(v694, v695, *(void *)(*(void *)(v697 - 8) + 64));
          }
          else
          {
            uint64_t v734 = v695[1];
            *long long v694 = *v695;
            v694[1] = v734;
            v2701 = (int *)v696;
            uint64_t v735 = *(int *)(v696 + 20);
            v736 = (void *)((char *)v694 + v735);
            v2660 = v695;
            v737 = (void *)((char *)v695 + v735);
            uint64_t v738 = type metadata accessor for RentalCarReservation(0);
            swift_bridgeObjectRetain();
            v2634 = v694;
            if (__swift_getEnumTagSinglePayload((uint64_t)v737, 1, v738))
            {
              uint64_t v739 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
              memcpy(v736, v737, *(void *)(*(void *)(v739 - 8) + 64));
              uint64_t v740 = v2715;
            }
            else
            {
              uint64_t v796 = v737[1];
              void *v736 = *v737;
              v736[1] = v796;
              uint64_t v797 = v737[3];
              v736[2] = v737[2];
              v736[3] = v797;
              uint64_t v798 = v737[5];
              v736[4] = v737[4];
              v736[5] = v798;
              uint64_t v799 = v737[7];
              v736[6] = v737[6];
              v736[7] = v799;
              uint64_t v800 = v737[9];
              v736[8] = v737[8];
              v736[9] = v800;
              uint64_t v801 = v737[11];
              v736[10] = v737[10];
              v736[11] = v801;
              uint64_t v802 = v737[13];
              v736[12] = v737[12];
              v736[13] = v802;
              uint64_t v803 = v737[15];
              v736[14] = v737[14];
              v736[15] = v803;
              *((unsigned char *)v736 + 128) = *((unsigned char *)v737 + 128);
              *(_WORD *)((char *)v736 + 129) = *(_WORD *)((char *)v737 + 129);
              uint64_t v804 = v737[18];
              v736[17] = v737[17];
              v736[18] = v804;
              uint64_t v805 = v737[20];
              v736[19] = v737[19];
              v736[20] = v805;
              uint64_t v806 = v737[22];
              v736[21] = v737[21];
              v736[22] = v806;
              uint64_t v2468 = v737[24];
              v736[23] = v737[23];
              v736[24] = v2468;
              uint64_t v807 = v737[26];
              v736[25] = v737[25];
              v736[26] = v807;
              uint64_t v808 = v737[28];
              v736[27] = v737[27];
              v736[28] = v808;
              uint64_t v809 = v737[30];
              v736[29] = v737[29];
              v736[30] = v809;
              uint64_t v810 = v737[32];
              v736[31] = v737[31];
              v736[32] = v810;
              uint64_t v811 = v737[34];
              v736[33] = v737[33];
              v736[34] = v811;
              uint64_t v812 = v737[36];
              v736[35] = v737[35];
              v736[36] = v812;
              uint64_t v813 = v737[38];
              v736[37] = v737[37];
              v736[38] = v813;
              uint64_t v814 = v737[40];
              v736[39] = v737[39];
              v736[40] = v814;
              uint64_t v815 = v737[42];
              v736[41] = v737[41];
              v736[42] = v815;
              uint64_t v816 = v737[44];
              v736[43] = v737[43];
              v736[44] = v816;
              uint64_t v817 = v737[46];
              v736[45] = v737[45];
              v736[46] = v817;
              uint64_t v818 = v737[47];
              *((unsigned char *)v736 + 384) = *((unsigned char *)v737 + 384);
              v736[47] = v818;
              uint64_t v819 = v737[50];
              v736[49] = v737[49];
              v736[50] = v819;
              uint64_t v820 = v737[52];
              v736[51] = v737[51];
              v736[52] = v820;
              uint64_t v821 = *(int *)(v738 + 140);
              v2605 = (char *)v736 + v821;
              v822 = (char *)v737 + v821;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v823 = v822;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v824 = (uint64_t)v822;
              uint64_t v740 = v2715;
              if (__swift_getEnumTagSinglePayload(v824, 1, v2715))
              {
                uint64_t v825 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2605, v823, *(void *)(*(void *)(v825 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, const void *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2605, v823, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v2605, 0, 1, v2715);
              }
              uint64_t v834 = *(int *)(v738 + 144);
              uint64_t v835 = (char *)v736 + v834;
              v836 = (char *)v737 + v834;
              if (__swift_getEnumTagSinglePayload((uint64_t)v737 + v834, 1, v2715))
              {
                uint64_t v837 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v835, v836, *(void *)(*(void *)(v837 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v835, v836, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v835, 0, 1, v2715);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v736, 0, 1, v738);
              long long v694 = v2634;
            }
            uint64_t v891 = v2660;
            long long v892 = v2701;
            uint64_t v893 = v2701[6];
            long long v894 = (void *)((char *)v694 + v893);
            uint64_t v895 = (void *)((char *)v2660 + v893);
            uint64_t v896 = type metadata accessor for TicketedTransportation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v895, 1, v896))
            {
              uint64_t v897 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
              memcpy(v894, v895, *(void *)(*(void *)(v897 - 8) + 64));
            }
            else
            {
              uint64_t v898 = v895[1];
              *long long v894 = *v895;
              v894[1] = v898;
              uint64_t v899 = v895[3];
              v894[2] = v895[2];
              v894[3] = v899;
              uint64_t v900 = v895[5];
              v894[4] = v895[4];
              v894[5] = v900;
              uint64_t v901 = v895[7];
              v894[6] = v895[6];
              v894[7] = v901;
              uint64_t v902 = v895[9];
              v894[8] = v895[8];
              v894[9] = v902;
              uint64_t v903 = v895[11];
              v894[10] = v895[10];
              v894[11] = v903;
              uint64_t v904 = v895[13];
              v894[12] = v895[12];
              v894[13] = v904;
              uint64_t v905 = v895[15];
              v894[14] = v895[14];
              v894[15] = v905;
              *((unsigned char *)v894 + 128) = *((unsigned char *)v895 + 128);
              *(_WORD *)((char *)v894 + 129) = *(_WORD *)((char *)v895 + 129);
              uint64_t v906 = v895[18];
              v894[17] = v895[17];
              v894[18] = v906;
              uint64_t v907 = v895[20];
              v894[19] = v895[19];
              v894[20] = v907;
              uint64_t v908 = v895[22];
              v894[21] = v895[21];
              v894[22] = v908;
              uint64_t v2475 = v895[24];
              v894[23] = v895[23];
              v894[24] = v2475;
              v2569 = (void *)v895[26];
              v894[25] = v895[25];
              v894[26] = v2569;
              uint64_t v909 = v895[28];
              v894[27] = v895[27];
              v894[28] = v909;
              uint64_t v910 = v895[30];
              v894[29] = v895[29];
              v894[30] = v910;
              uint64_t v911 = v895[32];
              v894[31] = v895[31];
              v894[32] = v911;
              uint64_t v912 = v895[34];
              v894[33] = v895[33];
              v894[34] = v912;
              uint64_t v913 = v895[36];
              uint64_t v914 = v895[35];
              *((unsigned char *)v894 + 296) = *((unsigned char *)v895 + 296);
              v894[35] = v914;
              v894[36] = v913;
              uint64_t v2607 = v896;
              uint64_t v915 = *(int *)(v896 + 112);
              long long v916 = (char *)v894 + v915;
              long long v917 = (char *)v895 + v915;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v917, 1, v740))
              {
                uint64_t v918 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v916, v917, *(void *)(*(void *)(v918 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v740 - 8) + 16))(v916, v917, v740);
                __swift_storeEnumTagSinglePayload((uint64_t)v916, 0, 1, v740);
              }
              uint64_t v927 = *(int *)(v2607 + 116);
              uint64_t v928 = (char *)v894 + v927;
              v929 = (char *)v895 + v927;
              long long v892 = v2701;
              if (__swift_getEnumTagSinglePayload((uint64_t)v895 + v927, 1, v740))
              {
                uint64_t v930 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v928, v929, *(void *)(*(void *)(v930 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v740 - 8) + 16))(v928, v929, v740);
                __swift_storeEnumTagSinglePayload((uint64_t)v928, 0, 1, v740);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v894, 0, 1, v2607);
              long long v694 = v2634;
              uint64_t v891 = v2660;
            }
            uint64_t v985 = v892[7];
            v986 = (void *)((char *)v694 + v985);
            uint64_t v987 = (void *)((char *)v891 + v985);
            uint64_t v988 = type metadata accessor for TicketedShow(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v987, 1, v988))
            {
              uint64_t v989 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
              memcpy(v986, v987, *(void *)(*(void *)(v989 - 8) + 64));
            }
            else
            {
              uint64_t v990 = v987[1];
              void *v986 = *v987;
              v986[1] = v990;
              uint64_t v991 = v987[3];
              v986[2] = v987[2];
              v986[3] = v991;
              uint64_t v992 = v987[5];
              v986[4] = v987[4];
              v986[5] = v992;
              uint64_t v993 = v987[7];
              v986[6] = v987[6];
              v986[7] = v993;
              uint64_t v994 = v987[9];
              v986[8] = v987[8];
              v986[9] = v994;
              uint64_t v995 = v987[11];
              v986[10] = v987[10];
              v986[11] = v995;
              uint64_t v996 = v987[13];
              v986[12] = v987[12];
              v986[13] = v996;
              uint64_t v997 = v987[15];
              v986[14] = v987[14];
              v986[15] = v997;
              *((unsigned char *)v986 + 128) = *((unsigned char *)v987 + 128);
              *(_WORD *)((char *)v986 + 129) = *(_WORD *)((char *)v987 + 129);
              uint64_t v998 = v987[18];
              v986[17] = v987[17];
              v986[18] = v998;
              uint64_t v999 = v987[20];
              v986[19] = v987[19];
              v986[20] = v999;
              uint64_t v1000 = v987[22];
              v986[21] = v987[21];
              v986[22] = v1000;
              uint64_t v2474 = v987[24];
              v986[23] = v987[23];
              v986[24] = v2474;
              uint64_t v1001 = v987[26];
              v986[25] = v987[25];
              v986[26] = v1001;
              uint64_t v1002 = v987[28];
              v986[27] = v987[27];
              v986[28] = v1002;
              v2572 = (void *)v987[30];
              v986[29] = v987[29];
              v986[30] = v2572;
              uint64_t v1003 = v987[32];
              v986[31] = v987[31];
              v986[32] = v1003;
              uint64_t v1004 = v987[34];
              v986[33] = v987[33];
              v986[34] = v1004;
              uint64_t v1005 = v987[36];
              uint64_t v1006 = v987[35];
              *((unsigned char *)v986 + 296) = *((unsigned char *)v987 + 296);
              v986[35] = v1006;
              v986[36] = v1005;
              uint64_t v1007 = v987[39];
              v986[38] = v987[38];
              v986[39] = v1007;
              v2608 = (int *)v988;
              uint64_t v1008 = *(int *)(v988 + 116);
              v1009 = (char *)v986 + v1008;
              uint64_t v1010 = (char *)v987 + v1008;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1010, 1, v2683))
              {
                uint64_t v1011 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1009, v1010, *(void *)(*(void *)(v1011 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2683 - 8) + 16))(v1009, v1010, v2683);
                __swift_storeEnumTagSinglePayload((uint64_t)v1009, 0, 1, v2683);
              }
              uint64_t v1028 = v2608[30];
              uint64_t v1029 = (void *)((char *)v986 + v1028);
              long long v1030 = (void *)((char *)v987 + v1028);
              uint64_t v1031 = v1030[1];
              *uint64_t v1029 = *v1030;
              v1029[1] = v1031;
              uint64_t v1032 = v2608[31];
              v1033 = (char *)v986 + v1032;
              uint64_t v1034 = (char *)v987 + v1032;
              swift_bridgeObjectRetain();
              long long v892 = v2701;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1034, 1, v2715))
              {
                uint64_t v1035 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1033, v1034, *(void *)(*(void *)(v1035 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v1033, v1034, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v1033, 0, 1, v2715);
              }
              uint64_t v1044 = v2608[32];
              uint64_t v1045 = (char *)v986 + v1044;
              v1046 = (char *)v987 + v1044;
              if (__swift_getEnumTagSinglePayload((uint64_t)v987 + v1044, 1, v2715))
              {
                uint64_t v1047 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1045, v1046, *(void *)(*(void *)(v1047 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v1045, v1046, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v1045, 0, 1, v2715);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v986, 0, 1, (uint64_t)v2608);
              long long v694 = v2634;
              uint64_t v891 = v2660;
            }
            uint64_t v1101 = v892[8];
            v1102 = (void *)((char *)v694 + v1101);
            v1103 = (void *)((char *)v891 + v1101);
            uint64_t v1104 = type metadata accessor for Appointment(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1103, 1, v1104))
            {
              uint64_t v1105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
              memcpy(v1102, v1103, *(void *)(*(void *)(v1105 - 8) + 64));
            }
            else
            {
              uint64_t v1106 = v1103[1];
              void *v1102 = *v1103;
              v1102[1] = v1106;
              uint64_t v1107 = v1103[3];
              v1102[2] = v1103[2];
              v1102[3] = v1107;
              uint64_t v1108 = v1103[5];
              v1102[4] = v1103[4];
              v1102[5] = v1108;
              uint64_t v1109 = v1103[7];
              v1102[6] = v1103[6];
              v1102[7] = v1109;
              uint64_t v1110 = v1103[9];
              v1102[8] = v1103[8];
              v1102[9] = v1110;
              uint64_t v1111 = v1103[11];
              v1102[10] = v1103[10];
              v1102[11] = v1111;
              uint64_t v1112 = v1103[13];
              v1102[12] = v1103[12];
              v1102[13] = v1112;
              uint64_t v1113 = v1103[15];
              v1102[14] = v1103[14];
              v1102[15] = v1113;
              *((unsigned char *)v1102 + 128) = *((unsigned char *)v1103 + 128);
              *(_WORD *)((char *)v1102 + 129) = *(_WORD *)((char *)v1103 + 129);
              uint64_t v1114 = v1103[18];
              v1102[17] = v1103[17];
              v1102[18] = v1114;
              uint64_t v1115 = v1103[20];
              v1102[19] = v1103[19];
              v1102[20] = v1115;
              uint64_t v1116 = v1103[22];
              v1102[21] = v1103[21];
              v1102[22] = v1116;
              uint64_t v2484 = v1103[24];
              v1102[23] = v1103[23];
              v1102[24] = v2484;
              uint64_t v1117 = v1103[26];
              v1102[25] = v1103[25];
              v1102[26] = v1117;
              uint64_t v1118 = v1103[28];
              v1102[27] = v1103[27];
              v1102[28] = v1118;
              uint64_t v1119 = v1103[30];
              v1102[29] = v1103[29];
              v1102[30] = v1119;
              uint64_t v1120 = v1103[32];
              v1102[31] = v1103[31];
              v1102[32] = v1120;
              uint64_t v1122 = v1103[33];
              uint64_t v1121 = v1103[34];
              *((unsigned char *)v1102 + 280) = *((unsigned char *)v1103 + 280);
              v1102[33] = v1122;
              v1102[34] = v1121;
              uint64_t v1123 = v1103[37];
              v1102[36] = v1103[36];
              v1102[37] = v1123;
              uint64_t v1124 = *(int *)(v1104 + 108);
              v2609 = (char *)v1102 + v1124;
              v1125 = (char *)v1103 + v1124;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1125, 1, v2715))
              {
                uint64_t v1126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2609, v1125, *(void *)(*(void *)(v1126 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2609, v1125, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v2609, 0, 1, v2715);
              }
              uint64_t v1135 = *(int *)(v1104 + 112);
              v1136 = (char *)v1102 + v1135;
              v1137 = (char *)v1103 + v1135;
              long long v892 = v2701;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1103 + v1135, 1, v2715))
              {
                uint64_t v1138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1136, v1137, *(void *)(*(void *)(v1138 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v1136, v1137, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v1136, 0, 1, v2715);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1102, 0, 1, v1104);
              long long v694 = v2634;
              uint64_t v891 = v2660;
            }
            uint64_t v1183 = v892[9];
            v1184 = (void *)((char *)v694 + v1183);
            uint64_t v1185 = (void *)((char *)v891 + v1183);
            uint64_t v1186 = type metadata accessor for Party(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1185, 1, v1186))
            {
              uint64_t v1187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
              memcpy(v1184, v1185, *(void *)(*(void *)(v1187 - 8) + 64));
            }
            else
            {
              uint64_t v1188 = v1185[1];
              void *v1184 = *v1185;
              v1184[1] = v1188;
              uint64_t v1189 = v1185[3];
              v1184[2] = v1185[2];
              v1184[3] = v1189;
              uint64_t v1190 = v1185[5];
              v1184[4] = v1185[4];
              v1184[5] = v1190;
              uint64_t v1191 = v1185[7];
              v1184[6] = v1185[6];
              v1184[7] = v1191;
              uint64_t v1192 = v1185[9];
              v1184[8] = v1185[8];
              v1184[9] = v1192;
              uint64_t v1193 = v1185[11];
              v1184[10] = v1185[10];
              v1184[11] = v1193;
              uint64_t v1194 = v1185[13];
              v1184[12] = v1185[12];
              v1184[13] = v1194;
              uint64_t v1195 = v1185[15];
              v1184[14] = v1185[14];
              v1184[15] = v1195;
              *((unsigned char *)v1184 + 128) = *((unsigned char *)v1185 + 128);
              *(_WORD *)((char *)v1184 + 129) = *(_WORD *)((char *)v1185 + 129);
              uint64_t v1196 = v1185[18];
              v1184[17] = v1185[17];
              v1184[18] = v1196;
              uint64_t v1197 = v1185[20];
              v1184[19] = v1185[19];
              v1184[20] = v1197;
              uint64_t v1198 = v1185[22];
              v1184[21] = v1185[21];
              v1184[22] = v1198;
              uint64_t v2485 = v1185[24];
              v1184[23] = v1185[23];
              v1184[24] = v2485;
              uint64_t v1199 = v1185[26];
              v1184[25] = v1185[25];
              v1184[26] = v1199;
              uint64_t v1200 = v1185[28];
              v1184[27] = v1185[27];
              v1184[28] = v1200;
              uint64_t v1201 = v1185[30];
              v1184[29] = v1185[29];
              v1184[30] = v1201;
              v1184[31] = v1185[31];
              uint64_t v2610 = v1186;
              uint64_t v1202 = *(int *)(v1186 + 96);
              v1203 = (char *)v1184 + v1202;
              v1204 = (char *)v1185 + v1202;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1204, 1, v2715))
              {
                uint64_t v1205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1203, v1204, *(void *)(*(void *)(v1205 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v1203, v1204, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v1203, 0, 1, v2715);
              }
              uint64_t v1214 = *(int *)(v2610 + 100);
              v1215 = (char *)v1184 + v1214;
              v1216 = (char *)v1185 + v1214;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1185 + v1214, 1, v2715))
              {
                uint64_t v1217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1215, v1216, *(void *)(*(void *)(v1217 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v1215, v1216, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v1215, 0, 1, v2715);
              }
              uint64_t v1228 = *(int *)(v2610 + 104);
              v1229 = (char *)v1184 + v1228;
              v1230 = (char *)v1185 + v1228;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1185 + v1228, 1, v2683))
              {
                uint64_t v1231 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1229, v1230, *(void *)(*(void *)(v1231 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2683 - 8) + 16))(v1229, v1230, v2683);
                __swift_storeEnumTagSinglePayload((uint64_t)v1229, 0, 1, v2683);
              }
              long long v892 = v2701;
              __swift_storeEnumTagSinglePayload((uint64_t)v1184, 0, 1, v2610);
              long long v694 = v2634;
              uint64_t v891 = v2660;
            }
            uint64_t v1273 = v892[10];
            v1274 = (void *)((char *)v694 + v1273);
            v1275 = (void *)((char *)v891 + v1273);
            uint64_t v1276 = type metadata accessor for Trip(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1275, 1, v1276))
            {
              uint64_t v1277 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
              memcpy(v1274, v1275, *(void *)(*(void *)(v1277 - 8) + 64));
            }
            else
            {
              uint64_t v1278 = v1275[1];
              void *v1274 = *v1275;
              v1274[1] = v1278;
              uint64_t v1279 = v1275[3];
              v1274[2] = v1275[2];
              v1274[3] = v1279;
              uint64_t v1280 = v1275[5];
              v1274[4] = v1275[4];
              v1274[5] = v1280;
              uint64_t v1281 = v1275[7];
              v1274[6] = v1275[6];
              v1274[7] = v1281;
              uint64_t v1282 = v1275[9];
              v1274[8] = v1275[8];
              v1274[9] = v1282;
              uint64_t v1283 = v1275[11];
              v1274[10] = v1275[10];
              v1274[11] = v1283;
              uint64_t v1284 = v1275[13];
              v1274[12] = v1275[12];
              v1274[13] = v1284;
              uint64_t v1285 = v1275[15];
              v1274[14] = v1275[14];
              v1274[15] = v1285;
              *((unsigned char *)v1274 + 128) = *((unsigned char *)v1275 + 128);
              *(_WORD *)((char *)v1274 + 129) = *(_WORD *)((char *)v1275 + 129);
              uint64_t v1286 = v1275[18];
              v1274[17] = v1275[17];
              v1274[18] = v1286;
              uint64_t v1287 = v1275[20];
              v1274[19] = v1275[19];
              v1274[20] = v1287;
              uint64_t v1288 = v1275[22];
              v1274[21] = v1275[21];
              v1274[22] = v1288;
              v2492 = (void *)v1275[24];
              v1274[23] = v1275[23];
              v1274[24] = v2492;
              uint64_t v1289 = v1275[26];
              v1274[25] = v1275[25];
              v1274[26] = v1289;
              v1274[27] = v1275[27];
              v2611 = (int *)v1276;
              uint64_t v1290 = *(int *)(v1276 + 88);
              v2577 = (char *)v1274 + v1290;
              v1291 = (char *)v1275 + v1290;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1291, 1, v2715))
              {
                uint64_t v1292 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2577, v1291, *(void *)(*(void *)(v1292 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2577, v1291, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v2577, 0, 1, v2715);
              }
              uint64_t v1301 = v2611[23];
              v1302 = (char *)v1274 + v1301;
              v1303 = (char *)v1275 + v1301;
              long long v892 = v2701;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1275 + v1301, 1, v2715))
              {
                uint64_t v1304 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1302, v1303, *(void *)(*(void *)(v1304 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v1302, v1303, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v1302, 0, 1, v2715);
              }
              uint64_t v1321 = v2611[24];
              v1322 = (char *)v1274 + v1321;
              v1323 = (char *)v1275 + v1321;
              *(void *)v1322 = *(void *)v1323;
              v1322[8] = v1323[8];
              uint64_t v1324 = v2611[25];
              v1325 = (char *)v1274 + v1324;
              v1326 = (char *)v1275 + v1324;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1275 + v1324, 1, v2683))
              {
                uint64_t v1327 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1325, v1326, *(void *)(*(void *)(v1327 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2683 - 8) + 16))(v1325, v1326, v2683);
                __swift_storeEnumTagSinglePayload((uint64_t)v1325, 0, 1, v2683);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1274, 0, 1, (uint64_t)v2611);
              long long v694 = v2634;
              uint64_t v891 = v2660;
            }
            uint64_t v1359 = v892[11];
            v1360 = (void *)((char *)v694 + v1359);
            v1361 = (void *)((char *)v891 + v1359);
            v1362 = (int *)type metadata accessor for FlightReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1361, 1, (uint64_t)v1362))
            {
              uint64_t v1363 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
              memcpy(v1360, v1361, *(void *)(*(void *)(v1363 - 8) + 64));
            }
            else
            {
              uint64_t v1364 = v1361[1];
              void *v1360 = *v1361;
              v1360[1] = v1364;
              uint64_t v1365 = v1361[3];
              v1360[2] = v1361[2];
              v1360[3] = v1365;
              uint64_t v1366 = v1361[5];
              v1360[4] = v1361[4];
              v1360[5] = v1366;
              uint64_t v1367 = v1361[7];
              v1360[6] = v1361[6];
              v1360[7] = v1367;
              uint64_t v1368 = v1361[9];
              v1360[8] = v1361[8];
              v1360[9] = v1368;
              uint64_t v1369 = v1361[11];
              v1360[10] = v1361[10];
              v1360[11] = v1369;
              *((unsigned char *)v1360 + 96) = *((unsigned char *)v1361 + 96);
              uint64_t v1370 = v1361[14];
              v1360[13] = v1361[13];
              v1360[14] = v1370;
              uint64_t v1371 = v1362[13];
              v2612 = (char *)v1360 + v1371;
              v1372 = (char *)v1361 + v1371;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1372, 1, v2683))
              {
                uint64_t v1373 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2612, v1372, *(void *)(*(void *)(v1373 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2683 - 8) + 16))(v2612, v1372, v2683);
                __swift_storeEnumTagSinglePayload((uint64_t)v2612, 0, 1, v2683);
              }
              uint64_t v1382 = v1362[14];
              v1383 = (char *)v1360 + v1382;
              v1384 = (char *)v1361 + v1382;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1361 + v1382, 1, v2683))
              {
                uint64_t v1385 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1383, v1384, *(void *)(*(void *)(v1385 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2683 - 8) + 16))(v1383, v1384, v2683);
                __swift_storeEnumTagSinglePayload((uint64_t)v1383, 0, 1, v2683);
              }
              uint64_t v1523 = v1362[15];
              v1524 = (void *)((char *)v1360 + v1523);
              v1525 = (void *)((char *)v1361 + v1523);
              uint64_t v2613 = v1525[1];
              void *v1524 = *v1525;
              v1524[1] = v2613;
              uint64_t v1526 = v1362[16];
              v1527 = (void *)((char *)v1360 + v1526);
              v1528 = (void *)((char *)v1361 + v1526);
              v2584 = (void *)v1528[1];
              void *v1527 = *v1528;
              v1527[1] = v2584;
              uint64_t v1529 = v1362[17];
              v1530 = (void *)((char *)v1360 + v1529);
              v1531 = (void *)((char *)v1361 + v1529);
              uint64_t v1532 = v1531[1];
              void *v1530 = *v1531;
              v1530[1] = v1532;
              uint64_t v1533 = v1362[18];
              v2536 = (char *)v1361 + v1533;
              v2555 = (char *)v1360 + v1533;
              uint64_t v1534 = type metadata accessor for DateComponents();
              v1535 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1534 - 8) + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1535(v2555, v2536, v1534);
              v1535((char *)v1360 + v1362[19], (char *)v1361 + v1362[19], v1534);
              uint64_t v1536 = v1362[20];
              v1537 = (void *)((char *)v1360 + v1536);
              v1538 = (void *)((char *)v1361 + v1536);
              uint64_t v1539 = v1538[1];
              void *v1537 = *v1538;
              v1537[1] = v1539;
              uint64_t v1540 = v1362[21];
              v1541 = (void *)((char *)v1360 + v1540);
              v1542 = (void *)((char *)v1361 + v1540);
              uint64_t v2537 = v1542[1];
              void *v1541 = *v1542;
              v1541[1] = v2537;
              uint64_t v1543 = v1362[22];
              v1544 = (void *)((char *)v1360 + v1543);
              v1545 = (void *)((char *)v1361 + v1543);
              uint64_t v2614 = v1545[1];
              void *v1544 = *v1545;
              v1544[1] = v2614;
              uint64_t v1546 = v1362[23];
              v1547 = (void *)((char *)v1360 + v1546);
              v1548 = (void *)((char *)v1361 + v1546);
              v2585 = (void *)v1548[1];
              void *v1547 = *v1548;
              v1547[1] = v2585;
              uint64_t v1549 = v1362[24];
              v1550 = (void *)((char *)v1360 + v1549);
              v1551 = (void *)((char *)v1361 + v1549);
              v2556 = (void *)v1551[1];
              void *v1550 = *v1551;
              v1550[1] = v2556;
              uint64_t v1552 = v1362[25];
              v1553 = (void *)((char *)v1360 + v1552);
              v1554 = (void *)((char *)v1361 + v1552);
              uint64_t v2527 = v1554[1];
              void *v1553 = *v1554;
              v1553[1] = v2527;
              uint64_t v1555 = v1362[26];
              v1556 = (void *)((char *)v1360 + v1555);
              v1557 = (void *)((char *)v1361 + v1555);
              v2521 = (void *)v1557[1];
              void *v1556 = *v1557;
              v1556[1] = v2521;
              uint64_t v1558 = v1362[27];
              v1559 = (void *)((char *)v1360 + v1558);
              v1560 = (void *)((char *)v1361 + v1558);
              uint64_t v2515 = v1560[1];
              void *v1559 = *v1560;
              v1559[1] = v2515;
              uint64_t v1561 = v1362[28];
              v1562 = (void *)((char *)v1360 + v1561);
              v1563 = (void *)((char *)v1361 + v1561);
              v2508 = (void *)v1563[1];
              void *v1562 = *v1563;
              v1562[1] = v2508;
              uint64_t v1564 = v1362[29];
              v1565 = (void *)((char *)v1360 + v1564);
              v1566 = (void *)((char *)v1361 + v1564);
              v2499 = (void *)v1566[1];
              void *v1565 = *v1566;
              v1565[1] = v2499;
              uint64_t v1567 = v1362[30];
              v1568 = (void *)((char *)v1360 + v1567);
              v1569 = (void *)((char *)v1361 + v1567);
              v2495 = (void *)v1569[1];
              void *v1568 = *v1569;
              v1568[1] = v2495;
              uint64_t v1570 = v1362[31];
              v1571 = (void *)((char *)v1360 + v1570);
              v1572 = (void *)((char *)v1361 + v1570);
              uint64_t v2490 = v1572[1];
              void *v1571 = *v1572;
              v1571[1] = v2490;
              uint64_t v1573 = v1362[32];
              v1574 = (void *)((char *)v1360 + v1573);
              v1575 = (void *)((char *)v1361 + v1573);
              uint64_t v2483 = v1575[1];
              void *v1574 = *v1575;
              v1574[1] = v2483;
              *(void *)((char *)v1360 + v1362[33]) = *(void *)((char *)v1361 + v1362[33]);
              *(void *)((char *)v1360 + v1362[34]) = *(void *)((char *)v1361 + v1362[34]);
              uint64_t v1576 = v1362[35];
              v1577 = (void *)((char *)v1360 + v1576);
              v1578 = (void *)((char *)v1361 + v1576);
              uint64_t v1579 = v1578[1];
              void *v1577 = *v1578;
              v1577[1] = v1579;
              uint64_t v1580 = v1362[36];
              v1581 = (void *)((char *)v1360 + v1580);
              v1582 = (void *)((char *)v1361 + v1580);
              uint64_t v1583 = v1582[1];
              void *v1581 = *v1582;
              v1581[1] = v1583;
              uint64_t v1584 = v1362[37];
              v1585 = (void *)((char *)v1360 + v1584);
              v1586 = (void *)((char *)v1361 + v1584);
              uint64_t v1587 = v1586[1];
              void *v1585 = *v1586;
              v1585[1] = v1587;
              uint64_t v1588 = v1362[38];
              v2504 = (char *)v1360 + v1588;
              v1589 = (char *)v1361 + v1588;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1589, 1, v2715))
              {
                uint64_t v1590 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2504, v1589, *(void *)(*(void *)(v1590 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2504, v1589, v2715);
                __swift_storeEnumTagSinglePayload((uint64_t)v2504, 0, 1, v2715);
              }
              uint64_t v1688 = v1362[39];
              v1689 = (void *)((char *)v1360 + v1688);
              v1690 = (void *)((char *)v1361 + v1688);
              uint64_t v1691 = v1690[1];
              void *v1689 = *v1690;
              v1689[1] = v1691;
              uint64_t v1692 = v1362[40];
              v1693 = (void *)((char *)v1360 + v1692);
              v1694 = (void *)((char *)v1361 + v1692);
              uint64_t v2615 = v1694[1];
              void *v1693 = *v1694;
              v1693[1] = v2615;
              uint64_t v1695 = v1362[41];
              v1696 = (char *)v1360 + v1695;
              v1697 = (char *)v1361 + v1695;
              v1696[8] = v1697[8];
              *(void *)v1696 = *(void *)v1697;
              uint64_t v1698 = v1362[42];
              v1699 = (void *)((char *)v1360 + v1698);
              v1700 = (void *)((char *)v1361 + v1698);
              uint64_t v1701 = v1700[1];
              void *v1699 = *v1700;
              v1699[1] = v1701;
              uint64_t v1702 = v1362[43];
              v1703 = (char *)v1360 + v1702;
              v1704 = (char *)v1361 + v1702;
              *(_OWORD *)v1703 = *(_OWORD *)v1704;
              *(void *)(v1703 + 13) = *(void *)(v1704 + 13);
              uint64_t v1705 = v1362[44];
              v1706 = (void *)((char *)v1360 + v1705);
              v1707 = (void *)((char *)v1361 + v1705);
              uint64_t v1708 = v1707[1];
              void *v1706 = *v1707;
              v1706[1] = v1708;
              uint64_t v1709 = v1362[45];
              v1710 = (void *)((char *)v1360 + v1709);
              v1711 = (void *)((char *)v1361 + v1709);
              uint64_t v1712 = v1711[1];
              void *v1710 = *v1711;
              v1710[1] = v1712;
              uint64_t v1713 = v1362[46];
              v1714 = (void *)((char *)v1360 + v1713);
              v1715 = (void *)((char *)v1361 + v1713);
              uint64_t v1716 = v1715[1];
              void *v1714 = *v1715;
              v1714[1] = v1716;
              uint64_t v1717 = v1362[47];
              v1718 = (void *)((char *)v1360 + v1717);
              v1719 = (void *)((char *)v1361 + v1717);
              uint64_t v1720 = v1719[1];
              void *v1718 = *v1719;
              v1718[1] = v1720;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1360, 0, 1, (uint64_t)v1362);
              long long v694 = v2634;
              uint64_t v891 = v2660;
            }
            uint64_t v1721 = v2701[12];
            v1722 = (void *)((char *)v694 + v1721);
            v1723 = (void *)((char *)v891 + v1721);
            v1724 = (int *)type metadata accessor for HotelReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1723, 1, (uint64_t)v1724))
            {
              uint64_t v1725 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
              memcpy(v1722, v1723, *(void *)(*(void *)(v1725 - 8) + 64));
            }
            else
            {
              uint64_t v1726 = v1723[1];
              void *v1722 = *v1723;
              v1722[1] = v1726;
              uint64_t v1727 = v1723[3];
              v1722[2] = v1723[2];
              v1722[3] = v1727;
              uint64_t v1728 = v1723[5];
              v1722[4] = v1723[4];
              v1722[5] = v1728;
              uint64_t v1729 = v1723[7];
              v1722[6] = v1723[6];
              v1722[7] = v1729;
              uint64_t v1730 = v1723[9];
              v1722[8] = v1723[8];
              v1722[9] = v1730;
              uint64_t v1731 = v1723[11];
              v1722[10] = v1723[10];
              v1722[11] = v1731;
              *((unsigned char *)v1722 + 96) = *((unsigned char *)v1723 + 96);
              uint64_t v1732 = v1723[14];
              v1722[13] = v1723[13];
              v1722[14] = v1732;
              uint64_t v1733 = v1723[16];
              v1722[15] = v1723[15];
              v1722[16] = v1733;
              uint64_t v1734 = v1724[14];
              v2616 = (char *)v1722 + v1734;
              v2510 = (char *)v1723 + v1734;
              uint64_t v1735 = type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v2510, 1, v1735))
              {
                uint64_t v1736 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2616, v2510, *(void *)(*(void *)(v1736 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1735 - 8) + 16))(v2616, v2510, v1735);
                __swift_storeEnumTagSinglePayload((uint64_t)v2616, 0, 1, v1735);
              }
              uint64_t v1745 = v1724[15];
              v1746 = (char *)v1722 + v1745;
              v1747 = (char *)v1723 + v1745;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1723 + v1745, 1, v1735))
              {
                uint64_t v1748 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v1746, v1747, *(void *)(*(void *)(v1748 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1735 - 8) + 16))(v1746, v1747, v1735);
                __swift_storeEnumTagSinglePayload((uint64_t)v1746, 0, 1, v1735);
              }
              uint64_t v1864 = v1724[16];
              v1865 = (void *)((char *)v1722 + v1864);
              v1866 = (void *)((char *)v1723 + v1864);
              uint64_t v1867 = v1866[1];
              void *v1865 = *v1866;
              v1865[1] = v1867;
              uint64_t v1868 = v1724[17];
              v1869 = (void *)((char *)v1722 + v1868);
              v1870 = (void *)((char *)v1723 + v1868);
              uint64_t v2617 = v1870[1];
              void *v1869 = *v1870;
              v1869[1] = v2617;
              uint64_t v1871 = v1724[18];
              v1872 = (void *)((char *)v1722 + v1871);
              v1873 = (void *)((char *)v1723 + v1871);
              v2592 = (void *)v1873[1];
              void *v1872 = *v1873;
              v1872[1] = v2592;
              uint64_t v1874 = v1724[19];
              v1875 = (void *)((char *)v1722 + v1874);
              v1876 = (void *)((char *)v1723 + v1874);
              v2561 = (void *)v1876[1];
              void *v1875 = *v1876;
              v1875[1] = v2561;
              uint64_t v1877 = v1724[20];
              v1878 = (void *)((char *)v1722 + v1877);
              v1879 = (void *)((char *)v1723 + v1877);
              uint64_t v2528 = v1879[1];
              void *v1878 = *v1879;
              v1878[1] = v2528;
              *(void *)((char *)v1722 + v1724[21]) = *(void *)((char *)v1723 + v1724[21]);
              *(void *)((char *)v1722 + v1724[22]) = *(void *)((char *)v1723 + v1724[22]);
              uint64_t v1880 = v1724[23];
              v1881 = (char *)v1722 + v1880;
              v1882 = (char *)v1723 + v1880;
              *(void *)v1881 = *(void *)v1882;
              v1881[8] = v1882[8];
              uint64_t v1883 = v1724[24];
              v1884 = (char *)v1722 + v1883;
              v1885 = (char *)v1723 + v1883;
              *(void *)v1884 = *(void *)v1885;
              v1884[8] = v1885[8];
              uint64_t v1886 = v1724[25];
              v1887 = (void *)((char *)v1722 + v1886);
              v1888 = (void *)((char *)v1723 + v1886);
              uint64_t v1889 = v1888[1];
              void *v1887 = *v1888;
              v1887[1] = v1889;
              uint64_t v1890 = v1724[26];
              v1891 = (void *)((char *)v1722 + v1890);
              v1892 = (void *)((char *)v1723 + v1890);
              uint64_t v1893 = v1892[1];
              void *v1891 = *v1892;
              v1891[1] = v1893;
              uint64_t v1894 = v1724[27];
              v1895 = (void *)((char *)v1722 + v1894);
              v1896 = (void *)((char *)v1723 + v1894);
              uint64_t v1897 = v1896[1];
              void *v1895 = *v1896;
              v1895[1] = v1897;
              uint64_t v1898 = v1724[28];
              v1899 = (void *)((char *)v1722 + v1898);
              v1900 = (void *)((char *)v1723 + v1898);
              uint64_t v1901 = v1900[1];
              void *v1899 = *v1900;
              v1899[1] = v1901;
              uint64_t v1902 = v1724[29];
              v1903 = (char *)v1722 + v1902;
              v1904 = (char *)v1723 + v1902;
              *(void *)v1903 = *(void *)v1904;
              v1903[8] = v1904[8];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1722, 0, 1, (uint64_t)v1724);
              long long v694 = v2634;
              uint64_t v891 = v2660;
            }
            uint64_t v1905 = v2701[13];
            v1906 = (void *)((char *)v694 + v1905);
            v1907 = (void *)((char *)v891 + v1905);
            v1908 = (int *)type metadata accessor for RestaurantReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1907, 1, (uint64_t)v1908))
            {
              uint64_t v1909 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
              memcpy(v1906, v1907, *(void *)(*(void *)(v1909 - 8) + 64));
            }
            else
            {
              uint64_t v1910 = v1907[1];
              void *v1906 = *v1907;
              v1906[1] = v1910;
              uint64_t v2618 = v1907[3];
              v1906[2] = v1907[2];
              v1906[3] = v2618;
              uint64_t v1911 = v1907[5];
              v1906[4] = v1907[4];
              v1906[5] = v1911;
              uint64_t v1912 = v1907[7];
              v1906[6] = v1907[6];
              v1906[7] = v1912;
              uint64_t v1913 = v1907[9];
              v1906[8] = v1907[8];
              v1906[9] = v1913;
              uint64_t v1914 = v1907[11];
              v1906[10] = v1907[10];
              v1906[11] = v1914;
              *((unsigned char *)v1906 + 96) = *((unsigned char *)v1907 + 96);
              uint64_t v1915 = v1907[14];
              v1906[13] = v1907[13];
              v1906[14] = v1915;
              uint64_t v1916 = v1907[16];
              v1906[15] = v1907[15];
              v1906[16] = v1916;
              uint64_t v1917 = v1908[14];
              v2662 = (char *)v1906 + v1917;
              v1918 = (char *)v1907 + v1917;
              uint64_t v1919 = type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1918, 1, v1919))
              {
                uint64_t v1920 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2662, v1918, *(void *)(*(void *)(v1920 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1919 - 8) + 16))(v2662, v1918, v1919);
                __swift_storeEnumTagSinglePayload((uint64_t)v2662, 0, 1, v1919);
              }
              uint64_t v2288 = v1908[15];
              v2289 = (void *)((char *)v1906 + v2288);
              v2290 = (void *)((char *)v1907 + v2288);
              uint64_t v2291 = v2290[1];
              void *v2289 = *v2290;
              v2289[1] = v2291;
              uint64_t v2292 = v1908[16];
              v2293 = (void *)((char *)v1906 + v2292);
              v2294 = (void *)((char *)v1907 + v2292);
              uint64_t v2295 = v2294[1];
              void *v2293 = *v2294;
              v2293[1] = v2295;
              uint64_t v2296 = v1908[17];
              v2297 = (void *)((char *)v1906 + v2296);
              v2298 = (void *)((char *)v1907 + v2296);
              uint64_t v2671 = v2298[1];
              void *v2297 = *v2298;
              v2297[1] = v2671;
              uint64_t v2299 = v1908[18];
              v2300 = (void *)((char *)v1906 + v2299);
              v2301 = (void *)((char *)v1907 + v2299);
              uint64_t v2621 = v2301[1];
              void *v2300 = *v2301;
              v2300[1] = v2621;
              uint64_t v2302 = v1908[19];
              v2303 = (void *)((char *)v1906 + v2302);
              v2304 = (void *)((char *)v1907 + v2302);
              uint64_t v2305 = v2304[1];
              void *v2303 = *v2304;
              v2303[1] = v2305;
              *(void *)((char *)v1906 + v1908[20]) = *(void *)((char *)v1907 + v1908[20]);
              uint64_t v2306 = v1908[21];
              v2307 = (void *)((char *)v1906 + v2306);
              v2308 = (void *)((char *)v1907 + v2306);
              uint64_t v2309 = v2308[1];
              void *v2307 = *v2308;
              v2307[1] = v2309;
              uint64_t v2310 = v1908[22];
              v2311 = (void *)((char *)v1906 + v2310);
              v2312 = (void *)((char *)v1907 + v2310);
              uint64_t v2313 = v2312[1];
              void *v2311 = *v2312;
              v2311[1] = v2313;
              uint64_t v2314 = v1908[23];
              v2315 = (void *)((char *)v1906 + v2314);
              v2316 = (void *)((char *)v1907 + v2314);
              uint64_t v2317 = v2316[1];
              void *v2315 = *v2316;
              v2315[1] = v2317;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1906, 0, 1, (uint64_t)v1908);
              long long v694 = v2634;
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v694, 0, 1, (uint64_t)v2701);
            uint64_t v689 = v2754;
          }
          uint64_t v2318 = v2723[20];
          v2319 = (void *)((char *)v689 + v2318);
          v2320 = (void *)((char *)v27 + v2318);
          uint64_t v2321 = type metadata accessor for PreExtractedCard(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2320, 1, v2321))
          {
            uint64_t v2322 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
            memcpy(v2319, v2320, *(void *)(*(void *)(v2322 - 8) + 64));
          }
          else
          {
            uint64_t v2323 = v2320[1];
            void *v2319 = *v2320;
            v2319[1] = v2323;
            uint64_t v2324 = v2320[3];
            v2319[2] = v2320[2];
            v2319[3] = v2324;
            uint64_t v2325 = v2320[5];
            v2319[4] = v2320[4];
            v2319[5] = v2325;
            uint64_t v2326 = v2320[7];
            v2319[6] = v2320[6];
            v2319[7] = v2326;
            uint64_t v2327 = v2320[9];
            v2319[8] = v2320[8];
            v2319[9] = v2327;
            uint64_t v2328 = v2320[11];
            v2319[10] = v2320[10];
            v2319[11] = v2328;
            v2702 = (int *)v2321;
            uint64_t v2329 = *(int *)(v2321 + 40);
            v2672 = (char *)v2319 + v2329;
            v2330 = (char *)v2320 + v2329;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2330, 1, v2715))
            {
              uint64_t v2331 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2672, v2330, *(void *)(*(void *)(v2331 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2672, v2330, v2715);
              __swift_storeEnumTagSinglePayload((uint64_t)v2672, 0, 1, v2715);
            }
            uint64_t v2332 = v2702[11];
            v2333 = (char *)v2319 + v2332;
            v2334 = (char *)v2320 + v2332;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2320 + v2332, 1, v2715))
            {
              uint64_t v2335 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2333, v2334, *(void *)(*(void *)(v2335 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2333, v2334, v2715);
              __swift_storeEnumTagSinglePayload((uint64_t)v2333, 0, 1, v2715);
            }
            uint64_t v2336 = v2702[12];
            v2337 = (void *)((char *)v2319 + v2336);
            v2338 = (void *)((char *)v2320 + v2336);
            uint64_t v2339 = v2338[1];
            void *v2337 = *v2338;
            v2337[1] = v2339;
            uint64_t v2340 = v2702[13];
            v2341 = (void *)((char *)v2319 + v2340);
            v2342 = (void *)((char *)v2320 + v2340);
            uint64_t v2343 = v2342[1];
            void *v2341 = *v2342;
            v2341[1] = v2343;
            uint64_t v2344 = v2702[14];
            v2345 = (void *)((char *)v2319 + v2344);
            v2346 = (void *)((char *)v2320 + v2344);
            uint64_t v2347 = v2346[1];
            void *v2345 = *v2346;
            v2345[1] = v2347;
            uint64_t v2348 = v2702[15];
            v2349 = (char *)v2319 + v2348;
            v2350 = (char *)v2320 + v2348;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2350, 1, v2715))
            {
              uint64_t v2351 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2349, v2350, *(void *)(*(void *)(v2351 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2349, v2350, v2715);
              __swift_storeEnumTagSinglePayload((uint64_t)v2349, 0, 1, v2715);
            }
            uint64_t v2352 = v2702[16];
            v2353 = (void *)((char *)v2319 + v2352);
            v2354 = (void *)((char *)v2320 + v2352);
            uint64_t v2355 = v2354[1];
            void *v2353 = *v2354;
            v2353[1] = v2355;
            uint64_t v2356 = v2702[17];
            v2357 = (void *)((char *)v2319 + v2356);
            v2358 = (void *)((char *)v2320 + v2356);
            uint64_t v2673 = v2358[1];
            void *v2357 = *v2358;
            v2357[1] = v2673;
            uint64_t v2359 = v2702[18];
            v2360 = (void *)((char *)v2319 + v2359);
            v2361 = (void *)((char *)v2320 + v2359);
            uint64_t v2645 = v2361[1];
            void *v2360 = *v2361;
            v2360[1] = v2645;
            uint64_t v2362 = v2702[19];
            v2363 = (void *)((char *)v2319 + v2362);
            v2364 = (void *)((char *)v2320 + v2362);
            uint64_t v2365 = v2364[1];
            void *v2363 = *v2364;
            v2363[1] = v2365;
            uint64_t v2366 = v2702[20];
            v2367 = (void *)((char *)v2319 + v2366);
            v2368 = (void *)((char *)v2320 + v2366);
            uint64_t v2369 = v2368[1];
            void *v2367 = *v2368;
            v2367[1] = v2369;
            uint64_t v2370 = v2702[21];
            v2371 = (void *)((char *)v2319 + v2370);
            v2372 = (void *)((char *)v2320 + v2370);
            uint64_t v2373 = v2372[1];
            void *v2371 = *v2372;
            v2371[1] = v2373;
            uint64_t v2374 = v2702[22];
            v2375 = (void *)((char *)v2319 + v2374);
            v2376 = (void *)((char *)v2320 + v2374);
            uint64_t v2377 = v2376[1];
            void *v2375 = *v2376;
            v2375[1] = v2377;
            uint64_t v2378 = v2702[23];
            v2379 = (void *)((char *)v2319 + v2378);
            v2380 = (void *)((char *)v2320 + v2378);
            uint64_t v2381 = v2380[1];
            void *v2379 = *v2380;
            v2379[1] = v2381;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2319, 0, 1, (uint64_t)v2702);
            uint64_t v689 = v2754;
          }
          uint64_t v2382 = v2723[21];
          v2383 = (void *)((char *)v689 + v2382);
          v2384 = (void *)((char *)v27 + v2382);
          v2385 = (int *)type metadata accessor for PreExtractedContact(0);
          uint64_t v28 = v2753;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2384, 1, (uint64_t)v2385))
          {
            uint64_t v2386 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
            memcpy(v2383, v2384, *(void *)(*(void *)(v2386 - 8) + 64));
          }
          else
          {
            uint64_t v2387 = v2384[1];
            void *v2383 = *v2384;
            v2383[1] = v2387;
            uint64_t v2388 = v2384[3];
            v2383[2] = v2384[2];
            v2383[3] = v2388;
            uint64_t v2389 = v2384[5];
            v2383[4] = v2384[4];
            v2383[5] = v2389;
            uint64_t v2390 = v2384[7];
            v2383[6] = v2384[6];
            v2383[7] = v2390;
            uint64_t v2674 = v2384[9];
            v2383[8] = v2384[8];
            v2383[9] = v2674;
            uint64_t v2646 = v2384[11];
            v2383[10] = v2384[10];
            v2383[11] = v2646;
            uint64_t v2391 = v2385[11];
            v2703 = (char *)v2383 + v2391;
            v2597 = (char *)v2384 + v2391;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2597, 1, v2715))
            {
              uint64_t v2392 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2703, v2597, *(void *)(*(void *)(v2392 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2703, v2597, v2715);
              __swift_storeEnumTagSinglePayload((uint64_t)v2703, 0, 1, v2715);
            }
            uint64_t v2393 = v2385[12];
            v2394 = (void *)((char *)v2383 + v2393);
            v2395 = (void *)((char *)v2384 + v2393);
            uint64_t v2396 = v2395[1];
            void *v2394 = *v2395;
            v2394[1] = v2396;
            *(void *)((char *)v2383 + v2385[13]) = *(void *)((char *)v2384 + v2385[13]);
            uint64_t v2397 = v2385[14];
            v2704 = (char *)v2383 + v2397;
            v2398 = (char *)v2384 + v2397;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2398, 1, v2715))
            {
              uint64_t v2399 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2704, v2398, *(void *)(*(void *)(v2399 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2704, v2398, v2715);
              __swift_storeEnumTagSinglePayload((uint64_t)v2704, 0, 1, v2715);
            }
            *(void *)((char *)v2383 + v2385[15]) = *(void *)((char *)v2384 + v2385[15]);
            *(void *)((char *)v2383 + v2385[16]) = *(void *)((char *)v2384 + v2385[16]);
            uint64_t v2400 = v2385[17];
            v2401 = (void *)((char *)v2383 + v2400);
            v2402 = (void *)((char *)v2384 + v2400);
            uint64_t v2403 = v2402[1];
            void *v2401 = *v2402;
            v2401[1] = v2403;
            *(void *)((char *)v2383 + v2385[18]) = *(void *)((char *)v2384 + v2385[18]);
            *(void *)((char *)v2383 + v2385[19]) = *(void *)((char *)v2384 + v2385[19]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2383, 0, 1, (uint64_t)v2385);
          }
          uint64_t v2404 = v2723[22];
          v2405 = (void *)((char *)v2754 + v2404);
          v2406 = (void *)((char *)v27 + v2404);
          v2407 = (int *)type metadata accessor for PreExtractedSharedLink(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2406, 1, (uint64_t)v2407))
          {
            uint64_t v2408 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
            memcpy(v2405, v2406, *(void *)(*(void *)(v2408 - 8) + 64));
          }
          else
          {
            uint64_t v2409 = v2406[1];
            void *v2405 = *v2406;
            v2405[1] = v2409;
            uint64_t v2410 = v2406[3];
            v2405[2] = v2406[2];
            v2405[3] = v2410;
            uint64_t v2411 = v2406[5];
            v2405[4] = v2406[4];
            v2405[5] = v2411;
            uint64_t v2412 = v2406[7];
            v2405[6] = v2406[6];
            v2405[7] = v2412;
            uint64_t v2413 = v2407[8];
            v2705 = (char *)v2405 + v2413;
            v2675 = (char *)v2406 + v2413;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2675, 1, v2683))
            {
              uint64_t v2414 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2705, v2675, *(void *)(*(void *)(v2414 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2683 - 8) + 16))(v2705, v2675, v2683);
              __swift_storeEnumTagSinglePayload((uint64_t)v2705, 0, 1, v2683);
            }
            uint64_t v2415 = v2407[9];
            v2416 = (void *)((char *)v2405 + v2415);
            v2417 = (void *)((char *)v2406 + v2415);
            uint64_t v2418 = v2417[1];
            void *v2416 = *v2417;
            v2416[1] = v2418;
            uint64_t v2419 = v2407[10];
            v2420 = (void *)((char *)v2405 + v2419);
            v2421 = (void *)((char *)v2406 + v2419);
            uint64_t v2422 = v2421[1];
            void *v2420 = *v2421;
            v2420[1] = v2422;
            uint64_t v2423 = v2407[11];
            v2424 = (void *)((char *)v2405 + v2423);
            v2425 = (void *)((char *)v2406 + v2423);
            uint64_t v2426 = v2425[1];
            void *v2424 = *v2425;
            v2424[1] = v2426;
            uint64_t v2427 = v2407[12];
            v2706 = (char *)v2405 + v2427;
            v2428 = (char *)v2406 + v2427;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2428, 1, v2715))
            {
              uint64_t v2429 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2706, v2428, *(void *)(*(void *)(v2429 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2706, v2428, v2715);
              __swift_storeEnumTagSinglePayload((uint64_t)v2706, 0, 1, v2715);
            }
            uint64_t v2430 = v2407[13];
            v2431 = (char *)v2405 + v2430;
            v2432 = (char *)v2406 + v2430;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2406 + v2430, 1, v2715))
            {
              uint64_t v2433 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2431, v2432, *(void *)(*(void *)(v2433 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2715 - 8) + 16))(v2431, v2432, v2715);
              __swift_storeEnumTagSinglePayload((uint64_t)v2431, 0, 1, v2715);
            }
            uint64_t v2434 = v2407[14];
            v2435 = (char *)v2405 + v2434;
            v2436 = (char *)v2406 + v2434;
            *(void *)v2435 = *(void *)v2436;
            v2435[8] = v2436[8];
            uint64_t v2437 = v2407[15];
            v2438 = (void *)((char *)v2405 + v2437);
            v2439 = (void *)((char *)v2406 + v2437);
            uint64_t v2440 = v2439[1];
            void *v2438 = *v2439;
            v2438[1] = v2440;
            uint64_t v2441 = v2407[16];
            v2442 = (void *)((char *)v2405 + v2441);
            v2443 = (void *)((char *)v2406 + v2441);
            uint64_t v2444 = v2443[1];
            void *v2442 = *v2443;
            v2442[1] = v2444;
            uint64_t v2445 = v2407[17];
            v2446 = (void *)((char *)v2405 + v2445);
            v2447 = (void *)((char *)v2406 + v2445);
            uint64_t v2448 = v2447[1];
            void *v2446 = *v2447;
            v2446[1] = v2448;
            uint64_t v2449 = v2407[18];
            v2450 = (void *)((char *)v2405 + v2449);
            v2451 = (void *)((char *)v2406 + v2449);
            uint64_t v2452 = v2451[1];
            void *v2450 = *v2451;
            v2450[1] = v2452;
            uint64_t v2453 = v2407[19];
            v2454 = (void *)((char *)v2405 + v2453);
            v2455 = (void *)((char *)v2406 + v2453);
            uint64_t v2456 = v2455[1];
            void *v2454 = *v2455;
            v2454[1] = v2456;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2405, 0, 1, (uint64_t)v2407);
          }
          uint64_t v2091 = v2723[23];
          v26 = v2754;
          goto LABEL_555;
        case 2u:
          uint64_t v2740 = v12;
          uint64_t v63 = v27[1];
          void *v26 = *v27;
          v26[1] = v63;
          uint64_t v64 = v27[3];
          v26[2] = v27[2];
          v26[3] = v64;
          uint64_t v65 = v27[5];
          v26[4] = v27[4];
          v26[5] = v65;
          uint64_t v66 = (int *)type metadata accessor for CalendarEvent(0);
          uint64_t v67 = v66[7];
          long long v68 = (char *)v26 + v67;
          v69 = (char *)v27 + v67;
          uint64_t v70 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v69, 1, v70))
          {
            uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 16))(v68, v69, v70);
            __swift_storeEnumTagSinglePayload((uint64_t)v68, 0, 1, v70);
          }
          uint64_t v356 = v66[8];
          uint64_t v357 = (char *)v2754 + v356;
          v358 = (char *)v27 + v356;
          if (__swift_getEnumTagSinglePayload((uint64_t)v27 + v356, 1, v70))
          {
            uint64_t v359 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v357, v358, *(void *)(*(void *)(v359 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 16))(v357, v358, v70);
            __swift_storeEnumTagSinglePayload((uint64_t)v357, 0, 1, v70);
          }
          uint64_t v528 = v66[9];
          v529 = (void *)((char *)v2754 + v528);
          v530 = (void *)((char *)v27 + v528);
          uint64_t v531 = v530[1];
          void *v529 = *v530;
          v529[1] = v531;
          *(void *)((char *)v2754 + v66[10]) = *(void *)((char *)v27 + v66[10]);
          *(void *)((char *)v2754 + v66[11]) = *(void *)((char *)v27 + v66[11]);
          uint64_t v532 = v66[12];
          v533 = (void *)((char *)v2754 + v532);
          v534 = (void *)((char *)v27 + v532);
          uint64_t v535 = v534[1];
          void *v533 = *v534;
          v533[1] = v535;
          uint64_t v536 = v66[13];
          v537 = (void *)((char *)v2754 + v536);
          v538 = (char *)v27 + v536;
          uint64_t v539 = *(void *)((char *)v27 + v536);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v539)
          {
            uint64_t v540 = *((void *)v538 + 1);
            uint64_t v541 = *((void *)v538 + 2);
            void *v537 = v539;
            v537[1] = v540;
            uint64_t v542 = *((void *)v538 + 3);
            uint64_t v543 = *((void *)v538 + 4);
            v537[2] = v541;
            v537[3] = v542;
            v537[4] = v543;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v698 = *((_OWORD *)v538 + 1);
            *(_OWORD *)v537 = *(_OWORD *)v538;
            *((_OWORD *)v537 + 1) = v698;
            v537[4] = *((void *)v538 + 4);
          }
          uint64_t v12 = v2740;
          goto LABEL_167;
        case 3u:
          v2708 = v3;
          v2724 = v27;
          uint64_t v2741 = v12;
          uint64_t v72 = v27[1];
          void *v26 = *v27;
          v26[1] = v72;
          uint64_t v73 = v27[3];
          v26[2] = v27[2];
          v26[3] = v73;
          uint64_t v74 = v27[5];
          v26[4] = v27[4];
          v26[5] = v74;
          uint64_t v75 = v27[7];
          v26[6] = v27[6];
          v26[7] = v75;
          uint64_t v76 = v27[9];
          v26[8] = v27[8];
          v26[9] = v76;
          v26[10] = v27[10];
          v2690 = (int *)type metadata accessor for Photo(0);
          uint64_t v77 = v2690[11];
          v2648 = (char *)v26 + v77;
          v78 = (char *)v27 + v77;
          uint64_t v79 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v2676 = v79;
          if (__swift_getEnumTagSinglePayload((uint64_t)v78, 1, v79))
          {
            uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2648, v78, *(void *)(*(void *)(v80 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v2648, v78, v79);
            __swift_storeEnumTagSinglePayload((uint64_t)v2648, 0, 1, v79);
          }
          v360 = v26;
          *(void *)((char *)v26 + v2690[12]) = *(void *)((char *)v2724 + v2690[12]);
          *(void *)((char *)v26 + v2690[13]) = *(void *)((char *)v2724 + v2690[13]);
          *(void *)((char *)v26 + v2690[14]) = *(void *)((char *)v2724 + v2690[14]);
          *(void *)((char *)v26 + v2690[15]) = *(void *)((char *)v2724 + v2690[15]);
          uint64_t v361 = v2690[16];
          uint64_t v362 = (void *)((char *)v26 + v361);
          v363 = (void *)((char *)v2724 + v361);
          uint64_t v364 = v363[1];
          *uint64_t v362 = *v363;
          v362[1] = v364;
          uint64_t v365 = v2690[17];
          long long v366 = (void *)((char *)v26 + v365);
          long long v367 = (void *)((char *)v2724 + v365);
          uint64_t v368 = type metadata accessor for PartialExtractedAttributes(0);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          long long v369 = v367;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v367, 1, v368))
          {
            uint64_t v370 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
            memcpy(v366, v367, *(void *)(*(void *)(v370 - 8) + 64));
            uint64_t v3 = v2708;
          }
          else
          {
            uint64_t v544 = v367[1];
            *long long v366 = *v367;
            v366[1] = v544;
            v2658 = (int *)v368;
            uint64_t v545 = *(int *)(v368 + 20);
            v546 = (void *)((char *)v366 + v545);
            uint64_t v547 = (void *)((char *)v367 + v545);
            uint64_t v548 = type metadata accessor for RentalCarReservation(0);
            swift_bridgeObjectRetain();
            uint64_t v3 = v2708;
            uint64_t v549 = (uint64_t)v366;
            v2632 = v369;
            if (__swift_getEnumTagSinglePayload((uint64_t)v547, 1, v548))
            {
              uint64_t v550 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
              memcpy(v546, v547, *(void *)(*(void *)(v550 - 8) + 64));
            }
            else
            {
              uint64_t v768 = v547[1];
              void *v546 = *v547;
              v546[1] = v768;
              uint64_t v769 = v547[3];
              v546[2] = v547[2];
              v546[3] = v769;
              uint64_t v770 = v547[5];
              v546[4] = v547[4];
              v546[5] = v770;
              uint64_t v771 = v547[7];
              v546[6] = v547[6];
              v546[7] = v771;
              uint64_t v772 = v547[9];
              v546[8] = v547[8];
              v546[9] = v772;
              uint64_t v773 = v547[11];
              v546[10] = v547[10];
              v546[11] = v773;
              uint64_t v774 = v547[13];
              v546[12] = v547[12];
              v546[13] = v774;
              uint64_t v775 = v547[15];
              v546[14] = v547[14];
              v546[15] = v775;
              *((unsigned char *)v546 + 128) = *((unsigned char *)v547 + 128);
              *(_WORD *)((char *)v546 + 129) = *(_WORD *)((char *)v547 + 129);
              uint64_t v776 = v547[18];
              v546[17] = v547[17];
              v546[18] = v776;
              uint64_t v777 = v547[20];
              v546[19] = v547[19];
              v546[20] = v777;
              uint64_t v778 = v547[22];
              v546[21] = v547[21];
              v546[22] = v778;
              uint64_t v2467 = v547[24];
              v546[23] = v547[23];
              v546[24] = v2467;
              uint64_t v779 = v547[26];
              v546[25] = v547[25];
              v546[26] = v779;
              uint64_t v780 = v547[28];
              v546[27] = v547[27];
              v546[28] = v780;
              uint64_t v781 = v547[30];
              v546[29] = v547[29];
              v546[30] = v781;
              uint64_t v782 = v547[32];
              v546[31] = v547[31];
              v546[32] = v782;
              uint64_t v783 = v547[34];
              v546[33] = v547[33];
              v546[34] = v783;
              uint64_t v784 = v547[36];
              v546[35] = v547[35];
              v546[36] = v784;
              uint64_t v785 = v547[38];
              v546[37] = v547[37];
              v546[38] = v785;
              uint64_t v786 = v547[40];
              v546[39] = v547[39];
              v546[40] = v786;
              uint64_t v787 = v547[42];
              v546[41] = v547[41];
              v546[42] = v787;
              uint64_t v788 = v547[44];
              v546[43] = v547[43];
              v546[44] = v788;
              uint64_t v789 = v547[46];
              v546[45] = v547[45];
              v546[46] = v789;
              uint64_t v790 = v547[47];
              *((unsigned char *)v546 + 384) = *((unsigned char *)v547 + 384);
              v546[47] = v790;
              uint64_t v791 = v547[50];
              v546[49] = v547[49];
              v546[50] = v791;
              uint64_t v792 = v547[52];
              v546[51] = v547[51];
              v546[52] = v792;
              uint64_t v793 = *(int *)(v548 + 140);
              v2567 = (char *)v546 + v793;
              v794 = (char *)v547 + v793;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v794, 1, v2676))
              {
                uint64_t v795 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2567, v794, *(void *)(*(void *)(v795 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2567, v794, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v2567, 0, 1, v2676);
              }
              uint64_t v830 = *(int *)(v548 + 144);
              uint64_t v831 = (char *)v546 + v830;
              uint64_t v832 = (char *)v547 + v830;
              if (__swift_getEnumTagSinglePayload((uint64_t)v547 + v830, 1, v2676))
              {
                uint64_t v833 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v831, v832, *(void *)(*(void *)(v833 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v831, v832, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v831, 0, 1, v2676);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v546, 0, 1, v548);
              long long v369 = v2632;
            }
            uint64_t v865 = v2658;
            uint64_t v866 = v2658[6];
            long long v867 = (void *)(v549 + v866);
            long long v868 = (void *)((char *)v369 + v866);
            uint64_t v869 = type metadata accessor for TicketedTransportation(0);
            uint64_t v2606 = v549;
            if (__swift_getEnumTagSinglePayload((uint64_t)v868, 1, v869))
            {
              uint64_t v870 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
              memcpy(v867, v868, *(void *)(*(void *)(v870 - 8) + 64));
            }
            else
            {
              uint64_t v871 = v868[1];
              *long long v867 = *v868;
              v867[1] = v871;
              uint64_t v872 = v868[3];
              v867[2] = v868[2];
              v867[3] = v872;
              uint64_t v873 = v868[5];
              v867[4] = v868[4];
              v867[5] = v873;
              uint64_t v874 = v868[7];
              v867[6] = v868[6];
              v867[7] = v874;
              uint64_t v875 = v868[9];
              v867[8] = v868[8];
              v867[9] = v875;
              uint64_t v876 = v868[11];
              v867[10] = v868[10];
              v867[11] = v876;
              uint64_t v877 = v868[13];
              v867[12] = v868[12];
              v867[13] = v877;
              uint64_t v878 = v868[15];
              v867[14] = v868[14];
              v867[15] = v878;
              *((unsigned char *)v867 + 128) = *((unsigned char *)v868 + 128);
              *(_WORD *)((char *)v867 + 129) = *(_WORD *)((char *)v868 + 129);
              uint64_t v879 = v868[18];
              v867[17] = v868[17];
              v867[18] = v879;
              uint64_t v880 = v868[20];
              v867[19] = v868[19];
              v867[20] = v880;
              uint64_t v881 = v868[22];
              v867[21] = v868[21];
              v867[22] = v881;
              __dstb = (void *)v868[24];
              v867[23] = v868[23];
              v867[24] = __dstb;
              uint64_t v2531 = v868[26];
              v867[25] = v868[25];
              v867[26] = v2531;
              uint64_t v882 = v868[28];
              v867[27] = v868[27];
              v867[28] = v882;
              uint64_t v883 = v868[30];
              v867[29] = v868[29];
              v867[30] = v883;
              uint64_t v884 = v868[32];
              v867[31] = v868[31];
              v867[32] = v884;
              uint64_t v885 = v868[34];
              v867[33] = v868[33];
              v867[34] = v885;
              uint64_t v886 = v868[36];
              uint64_t v887 = v868[35];
              *((unsigned char *)v867 + 296) = *((unsigned char *)v868 + 296);
              v867[35] = v887;
              v867[36] = v886;
              uint64_t v888 = *(int *)(v869 + 112);
              v2542 = (char *)v867 + v888;
              v889 = (char *)v868 + v888;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v889, 1, v2676))
              {
                uint64_t v890 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2542, v889, *(void *)(*(void *)(v890 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2542, v889, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v2542, 0, 1, v2676);
              }
              uint64_t v923 = *(int *)(v869 + 116);
              v924 = (char *)v867 + v923;
              uint64_t v925 = (char *)v868 + v923;
              if (__swift_getEnumTagSinglePayload((uint64_t)v868 + v923, 1, v2676))
              {
                uint64_t v926 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v924, v925, *(void *)(*(void *)(v926 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v924, v925, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v924, 0, 1, v2676);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v867, 0, 1, v869);
              long long v369 = v2632;
            }
            uint64_t v958 = v2658[7];
            uint64_t v959 = (void *)(v549 + v958);
            uint64_t v960 = (void *)((char *)v369 + v958);
            v961 = (int *)type metadata accessor for TicketedShow(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v960, 1, (uint64_t)v961))
            {
              uint64_t v962 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
              memcpy(v959, v960, *(void *)(*(void *)(v962 - 8) + 64));
            }
            else
            {
              uint64_t v963 = v960[1];
              *uint64_t v959 = *v960;
              v959[1] = v963;
              uint64_t v964 = v960[3];
              v959[2] = v960[2];
              v959[3] = v964;
              uint64_t v965 = v960[5];
              v959[4] = v960[4];
              v959[5] = v965;
              uint64_t v966 = v960[7];
              v959[6] = v960[6];
              v959[7] = v966;
              uint64_t v967 = v960[9];
              v959[8] = v960[8];
              v959[9] = v967;
              uint64_t v968 = v960[11];
              v959[10] = v960[10];
              v959[11] = v968;
              uint64_t v969 = v960[13];
              v959[12] = v960[12];
              v959[13] = v969;
              uint64_t v970 = v960[15];
              v959[14] = v960[14];
              v959[15] = v970;
              *((unsigned char *)v959 + 128) = *((unsigned char *)v960 + 128);
              *(_WORD *)((char *)v959 + 129) = *(_WORD *)((char *)v960 + 129);
              uint64_t v971 = v960[18];
              v959[17] = v960[17];
              v959[18] = v971;
              uint64_t v972 = v960[20];
              v959[19] = v960[19];
              v959[20] = v972;
              uint64_t v973 = v960[22];
              v959[21] = v960[21];
              v959[22] = v973;
              uint64_t v2469 = v960[24];
              v959[23] = v960[23];
              v959[24] = v2469;
              uint64_t v974 = v960[26];
              v959[25] = v960[25];
              v959[26] = v974;
              uint64_t v975 = v960[28];
              v959[27] = v960[27];
              v959[28] = v975;
              v2544 = (void *)v960[30];
              v959[29] = v960[29];
              v959[30] = v2544;
              uint64_t v976 = v960[32];
              v959[31] = v960[31];
              v959[32] = v976;
              uint64_t v977 = v960[34];
              v959[33] = v960[33];
              v959[34] = v977;
              uint64_t v978 = v960[36];
              uint64_t v979 = v960[35];
              *((unsigned char *)v959 + 296) = *((unsigned char *)v960 + 296);
              v959[35] = v979;
              v959[36] = v978;
              uint64_t v980 = v960[39];
              v959[38] = v960[38];
              v959[39] = v980;
              uint64_t v981 = v961[29];
              v2571 = (char *)v959 + v981;
              v982 = (char *)v960 + v981;
              uint64_t v983 = type metadata accessor for URL();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v982, 1, v983))
              {
                uint64_t v984 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2571, v982, *(void *)(*(void *)(v984 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v983 - 8) + 16))(v2571, v982, v983);
                __swift_storeEnumTagSinglePayload((uint64_t)v2571, 0, 1, v983);
              }
              uint64_t v1020 = v961[30];
              uint64_t v1021 = (void *)((char *)v959 + v1020);
              uint64_t v1022 = (void *)((char *)v960 + v1020);
              uint64_t v1023 = v1022[1];
              *uint64_t v1021 = *v1022;
              v1021[1] = v1023;
              uint64_t v1024 = v961[31];
              uint64_t v1025 = (char *)v959 + v1024;
              v1026 = (char *)v960 + v1024;
              swift_bridgeObjectRetain();
              uint64_t v865 = v2658;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1026, 1, v2676))
              {
                uint64_t v1027 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1025, v1026, *(void *)(*(void *)(v1027 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v1025, v1026, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v1025, 0, 1, v2676);
              }
              uint64_t v1040 = v961[32];
              uint64_t v1041 = (char *)v959 + v1040;
              uint64_t v1042 = (char *)v960 + v1040;
              if (__swift_getEnumTagSinglePayload((uint64_t)v960 + v1040, 1, v2676))
              {
                uint64_t v1043 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1041, v1042, *(void *)(*(void *)(v1043 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v1041, v1042, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v1041, 0, 1, v2676);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v959, 0, 1, (uint64_t)v961);
              long long v369 = v2632;
            }
            uint64_t v1075 = v865[8];
            uint64_t v1076 = (void *)(v549 + v1075);
            v1077 = (void *)((char *)v369 + v1075);
            uint64_t v1078 = type metadata accessor for Appointment(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1077, 1, v1078))
            {
              uint64_t v1079 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
              memcpy(v1076, v1077, *(void *)(*(void *)(v1079 - 8) + 64));
            }
            else
            {
              uint64_t v1080 = v1077[1];
              *uint64_t v1076 = *v1077;
              v1076[1] = v1080;
              uint64_t v1081 = v1077[3];
              v1076[2] = v1077[2];
              v1076[3] = v1081;
              uint64_t v1082 = v1077[5];
              v1076[4] = v1077[4];
              v1076[5] = v1082;
              uint64_t v1083 = v1077[7];
              v1076[6] = v1077[6];
              v1076[7] = v1083;
              uint64_t v1084 = v1077[9];
              v1076[8] = v1077[8];
              v1076[9] = v1084;
              uint64_t v1085 = v1077[11];
              v1076[10] = v1077[10];
              v1076[11] = v1085;
              uint64_t v1086 = v1077[13];
              v1076[12] = v1077[12];
              v1076[13] = v1086;
              uint64_t v1087 = v1077[15];
              v1076[14] = v1077[14];
              v1076[15] = v1087;
              *((unsigned char *)v1076 + 128) = *((unsigned char *)v1077 + 128);
              *(_WORD *)((char *)v1076 + 129) = *(_WORD *)((char *)v1077 + 129);
              uint64_t v1088 = v1077[18];
              v1076[17] = v1077[17];
              v1076[18] = v1088;
              uint64_t v1089 = v1077[20];
              v1076[19] = v1077[19];
              v1076[20] = v1089;
              uint64_t v1090 = v1077[22];
              v1076[21] = v1077[21];
              v1076[22] = v1090;
              uint64_t v2478 = v1077[24];
              v1076[23] = v1077[23];
              v1076[24] = v2478;
              uint64_t v1091 = v1077[26];
              v1076[25] = v1077[25];
              v1076[26] = v1091;
              uint64_t v1092 = v1077[28];
              v1076[27] = v1077[27];
              v1076[28] = v1092;
              uint64_t v1093 = v1077[30];
              v1076[29] = v1077[29];
              v1076[30] = v1093;
              uint64_t v1094 = v1077[32];
              v1076[31] = v1077[31];
              v1076[32] = v1094;
              uint64_t v1096 = v1077[33];
              uint64_t v1095 = v1077[34];
              *((unsigned char *)v1076 + 280) = *((unsigned char *)v1077 + 280);
              v1076[33] = v1096;
              v1076[34] = v1095;
              uint64_t v1097 = v1077[37];
              v1076[36] = v1077[36];
              v1076[37] = v1097;
              uint64_t v1098 = *(int *)(v1078 + 108);
              v2546 = (char *)v1076 + v1098;
              v1099 = (char *)v1077 + v1098;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1099, 1, v2676))
              {
                uint64_t v1100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2546, v1099, *(void *)(*(void *)(v1100 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2546, v1099, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v2546, 0, 1, v2676);
              }
              uint64_t v1131 = *(int *)(v1078 + 112);
              v1132 = (char *)v1076 + v1131;
              v1133 = (char *)v1077 + v1131;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1077 + v1131, 1, v2676))
              {
                uint64_t v1134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1132, v1133, *(void *)(*(void *)(v1134 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v1132, v1133, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v1132, 0, 1, v2676);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1076, 0, 1, v1078);
              long long v369 = v2632;
            }
            uint64_t v1161 = v865[9];
            v1162 = (void *)(v549 + v1161);
            v1163 = (void *)((char *)v369 + v1161);
            v1164 = (int *)type metadata accessor for Party(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1163, 1, (uint64_t)v1164))
            {
              uint64_t v1165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
              memcpy(v1162, v1163, *(void *)(*(void *)(v1165 - 8) + 64));
            }
            else
            {
              uint64_t v1166 = v1163[1];
              void *v1162 = *v1163;
              v1162[1] = v1166;
              uint64_t v1167 = v1163[3];
              v1162[2] = v1163[2];
              v1162[3] = v1167;
              uint64_t v1168 = v1163[5];
              v1162[4] = v1163[4];
              v1162[5] = v1168;
              uint64_t v1169 = v1163[7];
              v1162[6] = v1163[6];
              v1162[7] = v1169;
              uint64_t v1170 = v1163[9];
              v1162[8] = v1163[8];
              v1162[9] = v1170;
              uint64_t v1171 = v1163[11];
              v1162[10] = v1163[10];
              v1162[11] = v1171;
              uint64_t v1172 = v1163[13];
              v1162[12] = v1163[12];
              v1162[13] = v1172;
              uint64_t v1173 = v1163[15];
              v1162[14] = v1163[14];
              v1162[15] = v1173;
              *((unsigned char *)v1162 + 128) = *((unsigned char *)v1163 + 128);
              *(_WORD *)((char *)v1162 + 129) = *(_WORD *)((char *)v1163 + 129);
              uint64_t v1174 = v1163[18];
              v1162[17] = v1163[17];
              v1162[18] = v1174;
              uint64_t v1175 = v1163[20];
              v1162[19] = v1163[19];
              v1162[20] = v1175;
              uint64_t v1176 = v1163[22];
              v1162[21] = v1163[21];
              v1162[22] = v1176;
              uint64_t v2480 = v1163[24];
              v1162[23] = v1163[23];
              v1162[24] = v2480;
              uint64_t v1177 = v1163[26];
              v1162[25] = v1163[25];
              v1162[26] = v1177;
              uint64_t v1178 = v1163[28];
              v1162[27] = v1163[27];
              v1162[28] = v1178;
              uint64_t v1179 = v1163[30];
              v1162[29] = v1163[29];
              v1162[30] = v1179;
              v1162[31] = v1163[31];
              v2574 = v1164;
              uint64_t v1180 = v1164[24];
              v2548 = (char *)v1162 + v1180;
              uint64_t v1181 = (char *)v1163 + v1180;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1181, 1, v2676))
              {
                uint64_t v1182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2548, v1181, *(void *)(*(void *)(v1182 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2548, v1181, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v2548, 0, 1, v2676);
              }
              uint64_t v1210 = v1164[25];
              v1211 = (char *)v1162 + v1210;
              v1212 = (char *)v1163 + v1210;
              uint64_t v865 = v2658;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1163 + v1210, 1, v2676))
              {
                uint64_t v1213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1211, v1212, *(void *)(*(void *)(v1213 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v1211, v1212, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v1211, 0, 1, v2676);
              }
              uint64_t v1223 = v1164[26];
              v1224 = (char *)v1162 + v1223;
              v1225 = (char *)v1163 + v1223;
              uint64_t v1226 = type metadata accessor for URL();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1225, 1, v1226))
              {
                uint64_t v1227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1224, v1225, *(void *)(*(void *)(v1227 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1226 - 8) + 16))(v1224, v1225, v1226);
                __swift_storeEnumTagSinglePayload((uint64_t)v1224, 0, 1, v1226);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1162, 0, 1, (uint64_t)v2574);
              long long v369 = v2632;
            }
            uint64_t v1252 = v865[10];
            v1253 = (void *)(v549 + v1252);
            v1254 = (void *)((char *)v369 + v1252);
            v1255 = (int *)type metadata accessor for Trip(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1254, 1, (uint64_t)v1255))
            {
              uint64_t v1256 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
              memcpy(v1253, v1254, *(void *)(*(void *)(v1256 - 8) + 64));
            }
            else
            {
              uint64_t v1257 = v1254[1];
              void *v1253 = *v1254;
              v1253[1] = v1257;
              uint64_t v1258 = v1254[3];
              v1253[2] = v1254[2];
              v1253[3] = v1258;
              uint64_t v1259 = v1254[5];
              v1253[4] = v1254[4];
              v1253[5] = v1259;
              uint64_t v1260 = v1254[7];
              v1253[6] = v1254[6];
              v1253[7] = v1260;
              uint64_t v1261 = v1254[9];
              v1253[8] = v1254[8];
              v1253[9] = v1261;
              uint64_t v1262 = v1254[11];
              v1253[10] = v1254[10];
              v1253[11] = v1262;
              uint64_t v1263 = v1254[13];
              v1253[12] = v1254[12];
              v1253[13] = v1263;
              uint64_t v1264 = v1254[15];
              v1253[14] = v1254[14];
              v1253[15] = v1264;
              *((unsigned char *)v1253 + 128) = *((unsigned char *)v1254 + 128);
              *(_WORD *)((char *)v1253 + 129) = *(_WORD *)((char *)v1254 + 129);
              uint64_t v1265 = v1254[18];
              v1253[17] = v1254[17];
              v1253[18] = v1265;
              uint64_t v1266 = v1254[20];
              v1253[19] = v1254[19];
              v1253[20] = v1266;
              uint64_t v1267 = v1254[22];
              v1253[21] = v1254[21];
              v1253[22] = v1267;
              uint64_t v1268 = v1254[24];
              v1253[23] = v1254[23];
              v1253[24] = v1268;
              uint64_t v1269 = v1254[26];
              v1253[25] = v1254[25];
              v1253[26] = v1269;
              v1253[27] = v1254[27];
              v2576 = v1255;
              uint64_t v1270 = v1255[22];
              v2550 = (char *)v1253 + v1270;
              v1271 = (char *)v1254 + v1270;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1271, 1, v2676))
              {
                uint64_t v1272 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2550, v1271, *(void *)(*(void *)(v1272 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2550, v1271, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v2550, 0, 1, v2676);
              }
              uint64_t v1297 = v1255[23];
              v1298 = (char *)v1253 + v1297;
              v1299 = (char *)v1254 + v1297;
              uint64_t v549 = v2606;
              uint64_t v865 = v2658;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1254 + v1297, 1, v2676))
              {
                uint64_t v1300 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1298, v1299, *(void *)(*(void *)(v1300 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v1298, v1299, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v1298, 0, 1, v2676);
              }
              uint64_t v1313 = v1255[24];
              v1314 = (char *)v1253 + v1313;
              v1315 = (char *)v1254 + v1313;
              *(void *)v1314 = *(void *)v1315;
              v1314[8] = v1315[8];
              uint64_t v1316 = v1255[25];
              v1317 = (char *)v1253 + v1316;
              v1318 = (char *)v1254 + v1316;
              uint64_t v1319 = type metadata accessor for URL();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1318, 1, v1319))
              {
                uint64_t v1320 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1317, v1318, *(void *)(*(void *)(v1320 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1319 - 8) + 16))(v1317, v1318, v1319);
                __swift_storeEnumTagSinglePayload((uint64_t)v1317, 0, 1, v1319);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1253, 0, 1, (uint64_t)v2576);
              long long v369 = v2632;
            }
            uint64_t v1344 = v865[11];
            v1345 = (void *)(v549 + v1344);
            v1346 = (void *)((char *)v369 + v1344);
            v1347 = (int *)type metadata accessor for FlightReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1346, 1, (uint64_t)v1347))
            {
              uint64_t v1348 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
              memcpy(v1345, v1346, *(void *)(*(void *)(v1348 - 8) + 64));
            }
            else
            {
              uint64_t v1349 = v1346[1];
              void *v1345 = *v1346;
              v1345[1] = v1349;
              uint64_t v1350 = v1346[3];
              v1345[2] = v1346[2];
              v1345[3] = v1350;
              uint64_t v1351 = v1346[5];
              v1345[4] = v1346[4];
              v1345[5] = v1351;
              uint64_t v1352 = v1346[7];
              v1345[6] = v1346[6];
              v1345[7] = v1352;
              uint64_t v1353 = v1346[9];
              v1345[8] = v1346[8];
              v1345[9] = v1353;
              uint64_t v1354 = v1346[11];
              v1345[10] = v1346[10];
              v1345[11] = v1354;
              *((unsigned char *)v1345 + 96) = *((unsigned char *)v1346 + 96);
              uint64_t v1355 = v1346[14];
              v1345[13] = v1346[13];
              v1345[14] = v1355;
              uint64_t v1356 = v1347[13];
              v2579 = (char *)v1345 + v1356;
              v1357 = (char *)v1346 + v1356;
              uint64_t v2512 = type metadata accessor for URL();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1357, 1, v2512))
              {
                uint64_t v1358 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2579, v1357, *(void *)(*(void *)(v1358 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2512 - 8) + 16))(v2579, v1357, v2512);
                __swift_storeEnumTagSinglePayload((uint64_t)v2579, 0, 1, v2512);
              }
              uint64_t v1378 = v1347[14];
              v1379 = (char *)v1345 + v1378;
              v1380 = (char *)v1346 + v1378;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1346 + v1378, 1, v2512))
              {
                uint64_t v1381 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1379, v1380, *(void *)(*(void *)(v1381 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2512 - 8) + 16))(v1379, v1380, v2512);
                __swift_storeEnumTagSinglePayload((uint64_t)v1379, 0, 1, v2512);
              }
              uint64_t v1454 = v1347[15];
              v1455 = (void *)((char *)v1345 + v1454);
              v1456 = (void *)((char *)v1346 + v1454);
              uint64_t v1457 = v1456[1];
              void *v1455 = *v1456;
              v1455[1] = v1457;
              uint64_t v1458 = v1347[16];
              v1459 = (void *)((char *)v1345 + v1458);
              v1460 = (void *)((char *)v1346 + v1458);
              v2582 = (void *)v1460[1];
              void *v1459 = *v1460;
              v1459[1] = v2582;
              uint64_t v1461 = v1347[17];
              v1462 = (void *)((char *)v1345 + v1461);
              v1463 = (void *)((char *)v1346 + v1461);
              uint64_t v1464 = v1463[1];
              void *v1462 = *v1463;
              v1462[1] = v1464;
              uint64_t v1465 = v1347[18];
              v2534 = (char *)v1346 + v1465;
              v2553 = (char *)v1345 + v1465;
              uint64_t v1466 = type metadata accessor for DateComponents();
              v1467 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1466 - 8) + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1467(v2553, v2534, v1466);
              v1467((char *)v1345 + v1347[19], (char *)v1346 + v1347[19], v1466);
              uint64_t v1468 = v1347[20];
              v1469 = (void *)((char *)v1345 + v1468);
              v1470 = (void *)((char *)v1346 + v1468);
              uint64_t v1471 = v1470[1];
              void *v1469 = *v1470;
              v1469[1] = v1471;
              uint64_t v1472 = v1347[21];
              v1473 = (void *)((char *)v1345 + v1472);
              v1474 = (void *)((char *)v1346 + v1472);
              uint64_t v2535 = v1474[1];
              void *v1473 = *v1474;
              v1473[1] = v2535;
              uint64_t v1475 = v1347[22];
              v1476 = (void *)((char *)v1345 + v1475);
              v1477 = (void *)((char *)v1346 + v1475);
              v2583 = (void *)v1477[1];
              void *v1476 = *v1477;
              v1476[1] = v2583;
              uint64_t v1478 = v1347[23];
              v1479 = (void *)((char *)v1345 + v1478);
              v1480 = (void *)((char *)v1346 + v1478);
              v2554 = (void *)v1480[1];
              void *v1479 = *v1480;
              v1479[1] = v2554;
              uint64_t v1481 = v1347[24];
              v1482 = (void *)((char *)v1345 + v1481);
              v1483 = (void *)((char *)v1346 + v1481);
              uint64_t v2526 = v1483[1];
              void *v1482 = *v1483;
              v1482[1] = v2526;
              uint64_t v1484 = v1347[25];
              v1485 = (void *)((char *)v1345 + v1484);
              v1486 = (void *)((char *)v1346 + v1484);
              v2520 = (void *)v1486[1];
              void *v1485 = *v1486;
              v1485[1] = v2520;
              uint64_t v1487 = v1347[26];
              v1488 = (void *)((char *)v1345 + v1487);
              v1489 = (void *)((char *)v1346 + v1487);
              uint64_t v2514 = v1489[1];
              void *v1488 = *v1489;
              v1488[1] = v2514;
              uint64_t v1490 = v1347[27];
              v1491 = (void *)((char *)v1345 + v1490);
              v1492 = (void *)((char *)v1346 + v1490);
              v2507 = (void *)v1492[1];
              void *v1491 = *v1492;
              v1491[1] = v2507;
              uint64_t v1493 = v1347[28];
              v1494 = (void *)((char *)v1345 + v1493);
              v1495 = (void *)((char *)v1346 + v1493);
              v2503 = (void *)v1495[1];
              void *v1494 = *v1495;
              v1494[1] = v2503;
              uint64_t v1496 = v1347[29];
              v1497 = (void *)((char *)v1345 + v1496);
              v1498 = (void *)((char *)v1346 + v1496);
              v2494 = (void *)v1498[1];
              void *v1497 = *v1498;
              v1497[1] = v2494;
              uint64_t v1499 = v1347[30];
              v1500 = (void *)((char *)v1345 + v1499);
              v1501 = (void *)((char *)v1346 + v1499);
              uint64_t v2489 = v1501[1];
              void *v1500 = *v1501;
              v1500[1] = v2489;
              uint64_t v1502 = v1347[31];
              v1503 = (void *)((char *)v1345 + v1502);
              v1504 = (void *)((char *)v1346 + v1502);
              uint64_t v2487 = v1504[1];
              void *v1503 = *v1504;
              v1503[1] = v2487;
              uint64_t v1505 = v1347[32];
              v1506 = (void *)((char *)v1345 + v1505);
              v1507 = (void *)((char *)v1346 + v1505);
              uint64_t v2482 = v1507[1];
              void *v1506 = *v1507;
              v1506[1] = v2482;
              *(void *)((char *)v1345 + v1347[33]) = *(void *)((char *)v1346 + v1347[33]);
              *(void *)((char *)v1345 + v1347[34]) = *(void *)((char *)v1346 + v1347[34]);
              uint64_t v1508 = v1347[35];
              v1509 = (void *)((char *)v1345 + v1508);
              v1510 = (void *)((char *)v1346 + v1508);
              uint64_t v1511 = v1510[1];
              void *v1509 = *v1510;
              v1509[1] = v1511;
              uint64_t v1512 = v1347[36];
              v1513 = (void *)((char *)v1345 + v1512);
              v1514 = (void *)((char *)v1346 + v1512);
              uint64_t v1515 = v1514[1];
              void *v1513 = *v1514;
              v1513[1] = v1515;
              uint64_t v1516 = v1347[37];
              v1517 = (void *)((char *)v1345 + v1516);
              v1518 = (void *)((char *)v1346 + v1516);
              uint64_t v1519 = v1518[1];
              void *v1517 = *v1518;
              v1517[1] = v1519;
              uint64_t v1520 = v1347[38];
              v2498 = (char *)v1345 + v1520;
              v1521 = (char *)v1346 + v1520;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1521, 1, v2676))
              {
                uint64_t v1522 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2498, v1521, *(void *)(*(void *)(v1522 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2498, v1521, v2676);
                __swift_storeEnumTagSinglePayload((uint64_t)v2498, 0, 1, v2676);
              }
              uint64_t v1638 = v1347[39];
              v1639 = (void *)((char *)v1345 + v1638);
              v1640 = (void *)((char *)v1346 + v1638);
              uint64_t v1641 = v1640[1];
              void *v1639 = *v1640;
              v1639[1] = v1641;
              uint64_t v1642 = v1347[40];
              v1643 = (void *)((char *)v1345 + v1642);
              v1644 = (void *)((char *)v1346 + v1642);
              uint64_t v1645 = v1644[1];
              void *v1643 = *v1644;
              v1643[1] = v1645;
              uint64_t v1646 = v1347[41];
              v1647 = (char *)v1345 + v1646;
              v1648 = (char *)v1346 + v1646;
              v1647[8] = v1648[8];
              *(void *)v1647 = *(void *)v1648;
              uint64_t v1649 = v1347[42];
              v1650 = (void *)((char *)v1345 + v1649);
              v1651 = (void *)((char *)v1346 + v1649);
              uint64_t v1652 = v1651[1];
              void *v1650 = *v1651;
              v1650[1] = v1652;
              uint64_t v1653 = v1347[43];
              v1654 = (char *)v1345 + v1653;
              v1655 = (char *)v1346 + v1653;
              *(_OWORD *)v1654 = *(_OWORD *)v1655;
              *(void *)(v1654 + 13) = *(void *)(v1655 + 13);
              uint64_t v1656 = v1347[44];
              v1657 = (void *)((char *)v1345 + v1656);
              v1658 = (void *)((char *)v1346 + v1656);
              uint64_t v1659 = v1658[1];
              void *v1657 = *v1658;
              v1657[1] = v1659;
              uint64_t v1660 = v1347[45];
              v1661 = (void *)((char *)v1345 + v1660);
              v1662 = (void *)((char *)v1346 + v1660);
              uint64_t v1663 = v1662[1];
              void *v1661 = *v1662;
              v1661[1] = v1663;
              uint64_t v1664 = v1347[46];
              v1665 = (void *)((char *)v1345 + v1664);
              v1666 = (void *)((char *)v1346 + v1664);
              uint64_t v1667 = v1666[1];
              void *v1665 = *v1666;
              v1665[1] = v1667;
              uint64_t v1668 = v1347[47];
              v1669 = (void *)((char *)v1345 + v1668);
              v1670 = (void *)((char *)v1346 + v1668);
              uint64_t v1671 = v1670[1];
              void *v1669 = *v1670;
              v1669[1] = v1671;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1345, 0, 1, (uint64_t)v1347);
              uint64_t v549 = v2606;
              long long v369 = v2632;
              uint64_t v865 = v2658;
            }
            uint64_t v1672 = v865[12];
            v1673 = (void *)(v549 + v1672);
            v1674 = (void *)((char *)v369 + v1672);
            v1675 = (int *)type metadata accessor for HotelReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1674, 1, (uint64_t)v1675))
            {
              uint64_t v1676 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
              memcpy(v1673, v1674, *(void *)(*(void *)(v1676 - 8) + 64));
            }
            else
            {
              uint64_t v1677 = v1674[1];
              void *v1673 = *v1674;
              v1673[1] = v1677;
              uint64_t v1678 = v1674[3];
              v1673[2] = v1674[2];
              v1673[3] = v1678;
              uint64_t v1679 = v1674[5];
              v1673[4] = v1674[4];
              v1673[5] = v1679;
              uint64_t v1680 = v1674[7];
              v1673[6] = v1674[6];
              v1673[7] = v1680;
              uint64_t v1681 = v1674[9];
              v1673[8] = v1674[8];
              v1673[9] = v1681;
              uint64_t v1682 = v1674[11];
              v1673[10] = v1674[10];
              v1673[11] = v1682;
              *((unsigned char *)v1673 + 96) = *((unsigned char *)v1674 + 96);
              uint64_t v1683 = v1674[14];
              v1673[13] = v1674[13];
              v1673[14] = v1683;
              uint64_t v1684 = v1674[16];
              v1673[15] = v1674[15];
              v1673[16] = v1684;
              uint64_t v1685 = v1675[14];
              v2588 = (char *)v1673 + v1685;
              v1686 = (char *)v1674 + v1685;
              v2509 = (void *)type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1686, 1, (uint64_t)v2509))
              {
                uint64_t v1687 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2588, v1686, *(void *)(*(void *)(v1687 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, void *))(*(v2509 - 1) + 16))(v2588, v1686, v2509);
                __swift_storeEnumTagSinglePayload((uint64_t)v2588, 0, 1, (uint64_t)v2509);
              }
              uint64_t v1741 = v1675[15];
              v1742 = (char *)v1673 + v1741;
              v1743 = (char *)v1674 + v1741;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1674 + v1741, 1, (uint64_t)v2509))
              {
                uint64_t v1744 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v1742, v1743, *(void *)(*(void *)(v1744 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, void *))(*(v2509 - 1) + 16))(v1742, v1743, v2509);
                __swift_storeEnumTagSinglePayload((uint64_t)v1742, 0, 1, (uint64_t)v2509);
              }
              uint64_t v1805 = v1675[16];
              v1806 = (void *)((char *)v1673 + v1805);
              v1807 = (void *)((char *)v1674 + v1805);
              uint64_t v1808 = v1807[1];
              void *v1806 = *v1807;
              v1806[1] = v1808;
              uint64_t v1809 = v1675[17];
              v1810 = (void *)((char *)v1673 + v1809);
              v1811 = (void *)((char *)v1674 + v1809);
              uint64_t v1812 = v1811[1];
              void *v1810 = *v1811;
              v1810[1] = v1812;
              uint64_t v1813 = v1675[18];
              v1814 = (void *)((char *)v1673 + v1813);
              v1815 = (void *)((char *)v1674 + v1813);
              v2591 = (void *)v1815[1];
              void *v1814 = *v1815;
              v1814[1] = v2591;
              uint64_t v1816 = v1675[19];
              v1817 = (void *)((char *)v1673 + v1816);
              v1818 = (void *)((char *)v1674 + v1816);
              v2560 = (void *)v1818[1];
              void *v1817 = *v1818;
              v1817[1] = v2560;
              uint64_t v1819 = v1675[20];
              v1820 = (void *)((char *)v1673 + v1819);
              v1821 = (void *)((char *)v1674 + v1819);
              v2522 = (void *)v1821[1];
              void *v1820 = *v1821;
              v1820[1] = v2522;
              *(void *)((char *)v1673 + v1675[21]) = *(void *)((char *)v1674 + v1675[21]);
              *(void *)((char *)v1673 + v1675[22]) = *(void *)((char *)v1674 + v1675[22]);
              uint64_t v1822 = v1675[23];
              v1823 = (char *)v1673 + v1822;
              v1824 = (char *)v1674 + v1822;
              *(void *)v1823 = *(void *)v1824;
              v1823[8] = v1824[8];
              uint64_t v1825 = v1675[24];
              v1826 = (char *)v1673 + v1825;
              v1827 = (char *)v1674 + v1825;
              *(void *)v1826 = *(void *)v1827;
              v1826[8] = v1827[8];
              uint64_t v1828 = v1675[25];
              v1829 = (void *)((char *)v1673 + v1828);
              v1830 = (void *)((char *)v1674 + v1828);
              uint64_t v1831 = v1830[1];
              void *v1829 = *v1830;
              v1829[1] = v1831;
              uint64_t v1832 = v1675[26];
              v1833 = (void *)((char *)v1673 + v1832);
              v1834 = (void *)((char *)v1674 + v1832);
              uint64_t v1835 = v1834[1];
              void *v1833 = *v1834;
              v1833[1] = v1835;
              uint64_t v1836 = v1675[27];
              v1837 = (void *)((char *)v1673 + v1836);
              v1838 = (void *)((char *)v1674 + v1836);
              uint64_t v1839 = v1838[1];
              void *v1837 = *v1838;
              v1837[1] = v1839;
              uint64_t v1840 = v1675[28];
              v1841 = (void *)((char *)v1673 + v1840);
              v1842 = (void *)((char *)v1674 + v1840);
              uint64_t v1843 = v1842[1];
              void *v1841 = *v1842;
              v1841[1] = v1843;
              uint64_t v1844 = v1675[29];
              v1845 = (char *)v1673 + v1844;
              v1846 = (char *)v1674 + v1844;
              *(void *)v1845 = *(void *)v1846;
              v1845[8] = v1846[8];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1673, 0, 1, (uint64_t)v1675);
              uint64_t v549 = v2606;
              long long v369 = v2632;
              uint64_t v865 = v2658;
            }
            uint64_t v1847 = v865[13];
            v1848 = (void *)(v549 + v1847);
            v1849 = (void *)((char *)v369 + v1847);
            v1850 = (int *)type metadata accessor for RestaurantReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1849, 1, (uint64_t)v1850))
            {
              uint64_t v1851 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
              memcpy(v1848, v1849, *(void *)(*(void *)(v1851 - 8) + 64));
            }
            else
            {
              uint64_t v1852 = v1849[1];
              void *v1848 = *v1849;
              v1848[1] = v1852;
              uint64_t v1853 = v1849[3];
              v1848[2] = v1849[2];
              v1848[3] = v1853;
              uint64_t v1854 = v1849[5];
              v1848[4] = v1849[4];
              v1848[5] = v1854;
              uint64_t v1855 = v1849[7];
              v1848[6] = v1849[6];
              v1848[7] = v1855;
              uint64_t v1856 = v1849[9];
              v1848[8] = v1849[8];
              v1848[9] = v1856;
              uint64_t v1857 = v1849[11];
              v1848[10] = v1849[10];
              v1848[11] = v1857;
              *((unsigned char *)v1848 + 96) = *((unsigned char *)v1849 + 96);
              uint64_t v1858 = v1849[14];
              v1848[13] = v1849[13];
              v1848[14] = v1858;
              uint64_t v1859 = v1849[16];
              v1848[15] = v1849[15];
              v1848[16] = v1859;
              uint64_t v1860 = v1850[14];
              v2635 = (char *)v1848 + v1860;
              v1861 = (char *)v1849 + v1860;
              uint64_t v1862 = type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1861, 1, v1862))
              {
                uint64_t v1863 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2635, v1861, *(void *)(*(void *)(v1863 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1862 - 8) + 16))(v2635, v1861, v1862);
                __swift_storeEnumTagSinglePayload((uint64_t)v2635, 0, 1, v1862);
              }
              uint64_t v2092 = v1850[15];
              v2093 = (void *)((char *)v1848 + v2092);
              v2094 = (void *)((char *)v1849 + v2092);
              uint64_t v2095 = v2094[1];
              void *v2093 = *v2094;
              v2093[1] = v2095;
              uint64_t v2096 = v1850[16];
              v2097 = (void *)((char *)v1848 + v2096);
              v2098 = (void *)((char *)v1849 + v2096);
              uint64_t v2099 = v2098[1];
              void *v2097 = *v2098;
              v2097[1] = v2099;
              uint64_t v2100 = v1850[17];
              v2101 = (void *)((char *)v1848 + v2100);
              v2102 = (void *)((char *)v1849 + v2100);
              uint64_t v2641 = v2102[1];
              void *v2101 = *v2102;
              v2101[1] = v2641;
              uint64_t v2103 = v1850[18];
              v2104 = (void *)((char *)v1848 + v2103);
              v2105 = (void *)((char *)v1849 + v2103);
              v2596 = (void *)v2105[1];
              void *v2104 = *v2105;
              v2104[1] = v2596;
              uint64_t v2106 = v1850[19];
              v2107 = (void *)((char *)v1848 + v2106);
              v2108 = (void *)((char *)v1849 + v2106);
              uint64_t v2109 = v2108[1];
              void *v2107 = *v2108;
              v2107[1] = v2109;
              *(void *)((char *)v1848 + v1850[20]) = *(void *)((char *)v1849 + v1850[20]);
              uint64_t v2110 = v1850[21];
              v2111 = (void *)((char *)v1848 + v2110);
              v2112 = (void *)((char *)v1849 + v2110);
              uint64_t v2113 = v2112[1];
              void *v2111 = *v2112;
              v2111[1] = v2113;
              uint64_t v2114 = v1850[22];
              v2115 = (void *)((char *)v1848 + v2114);
              v2116 = (void *)((char *)v1849 + v2114);
              uint64_t v2117 = v2116[1];
              void *v2115 = *v2116;
              v2115[1] = v2117;
              uint64_t v2118 = v1850[23];
              v2119 = (void *)((char *)v1848 + v2118);
              v2120 = (void *)((char *)v1849 + v2118);
              uint64_t v2121 = v2120[1];
              void *v2119 = *v2120;
              v2119[1] = v2121;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1848, 0, 1, (uint64_t)v1850);
              uint64_t v549 = v2606;
              uint64_t v865 = v2658;
            }
            __swift_storeEnumTagSinglePayload(v549, 0, 1, (uint64_t)v865);
            v360 = v2754;
          }
          uint64_t v2122 = v2690[18];
          v2123 = (void *)((char *)v360 + v2122);
          v2124 = (void *)((char *)v2724 + v2122);
          uint64_t v2125 = type metadata accessor for PreExtractedCard(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2124, 1, v2125))
          {
            uint64_t v2126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
            memcpy(v2123, v2124, *(void *)(*(void *)(v2126 - 8) + 64));
          }
          else
          {
            uint64_t v2127 = v2124[1];
            void *v2123 = *v2124;
            v2123[1] = v2127;
            uint64_t v2128 = v2124[3];
            v2123[2] = v2124[2];
            v2123[3] = v2128;
            uint64_t v2129 = v2124[5];
            v2123[4] = v2124[4];
            v2123[5] = v2129;
            uint64_t v2130 = v2124[7];
            v2123[6] = v2124[6];
            v2123[7] = v2130;
            uint64_t v2131 = v2124[9];
            v2123[8] = v2124[8];
            v2123[9] = v2131;
            v2132 = (int *)v2125;
            uint64_t v2133 = v2124[11];
            v2123[10] = v2124[10];
            v2123[11] = v2133;
            v2717 = v2132;
            uint64_t v2134 = v2132[10];
            v2667 = (char *)v2123 + v2134;
            v2135 = (char *)v2124 + v2134;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2135, 1, v2676))
            {
              uint64_t v2136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2667, v2135, *(void *)(*(void *)(v2136 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2667, v2135, v2676);
              __swift_storeEnumTagSinglePayload((uint64_t)v2667, 0, 1, v2676);
            }
            uint64_t v2137 = v2717[11];
            v2138 = (char *)v2123 + v2137;
            v2139 = (char *)v2124 + v2137;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2124 + v2137, 1, v2676))
            {
              uint64_t v2140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2138, v2139, *(void *)(*(void *)(v2140 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2138, v2139, v2676);
              __swift_storeEnumTagSinglePayload((uint64_t)v2138, 0, 1, v2676);
            }
            uint64_t v2141 = v2717[12];
            v2142 = (void *)((char *)v2123 + v2141);
            v2143 = (void *)((char *)v2124 + v2141);
            uint64_t v2144 = v2143[1];
            void *v2142 = *v2143;
            v2142[1] = v2144;
            uint64_t v2145 = v2717[13];
            v2146 = (void *)((char *)v2123 + v2145);
            v2147 = (void *)((char *)v2124 + v2145);
            uint64_t v2148 = v2147[1];
            void *v2146 = *v2147;
            v2146[1] = v2148;
            uint64_t v2149 = v2717[14];
            v2150 = (void *)((char *)v2123 + v2149);
            v2151 = (void *)((char *)v2124 + v2149);
            uint64_t v2152 = v2151[1];
            void *v2150 = *v2151;
            v2150[1] = v2152;
            uint64_t v2153 = v2717[15];
            v2154 = (char *)v2123 + v2153;
            v2155 = (char *)v2124 + v2153;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2155, 1, v2676))
            {
              uint64_t v2156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2154, v2155, *(void *)(*(void *)(v2156 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2154, v2155, v2676);
              __swift_storeEnumTagSinglePayload((uint64_t)v2154, 0, 1, v2676);
            }
            uint64_t v2157 = v2717[16];
            v2158 = (void *)((char *)v2123 + v2157);
            v2159 = (void *)((char *)v2124 + v2157);
            uint64_t v2160 = v2159[1];
            void *v2158 = *v2159;
            v2158[1] = v2160;
            uint64_t v2161 = v2717[17];
            v2162 = (void *)((char *)v2123 + v2161);
            v2163 = (void *)((char *)v2124 + v2161);
            uint64_t v2668 = v2163[1];
            void *v2162 = *v2163;
            v2162[1] = v2668;
            uint64_t v2164 = v2717[18];
            v2165 = (void *)((char *)v2123 + v2164);
            v2166 = (void *)((char *)v2124 + v2164);
            uint64_t v2167 = v2166[1];
            void *v2165 = *v2166;
            v2165[1] = v2167;
            uint64_t v2168 = v2717[19];
            v2169 = (void *)((char *)v2123 + v2168);
            v2170 = (void *)((char *)v2124 + v2168);
            uint64_t v2171 = v2170[1];
            void *v2169 = *v2170;
            v2169[1] = v2171;
            uint64_t v2172 = v2717[20];
            v2173 = (void *)((char *)v2123 + v2172);
            v2174 = (void *)((char *)v2124 + v2172);
            uint64_t v2175 = v2174[1];
            void *v2173 = *v2174;
            v2173[1] = v2175;
            uint64_t v2176 = v2717[21];
            v2177 = (void *)((char *)v2123 + v2176);
            v2178 = (void *)((char *)v2124 + v2176);
            uint64_t v2179 = v2178[1];
            void *v2177 = *v2178;
            v2177[1] = v2179;
            uint64_t v2180 = v2717[22];
            v2181 = (void *)((char *)v2123 + v2180);
            v2182 = (void *)((char *)v2124 + v2180);
            uint64_t v2183 = v2182[1];
            void *v2181 = *v2182;
            v2181[1] = v2183;
            uint64_t v2184 = v2717[23];
            v2185 = (void *)((char *)v2123 + v2184);
            v2186 = (void *)((char *)v2124 + v2184);
            uint64_t v2187 = v2186[1];
            void *v2185 = *v2186;
            v2185[1] = v2187;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2123, 0, 1, (uint64_t)v2717);
            v360 = v2754;
          }
          uint64_t v2188 = v2690[19];
          v2189 = (void *)((char *)v360 + v2188);
          v27 = v2724;
          v2190 = (void *)((char *)v2724 + v2188);
          v2191 = (int *)type metadata accessor for PreExtractedContact(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2190, 1, (uint64_t)v2191))
          {
            uint64_t v2192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
            memcpy(v2189, v2190, *(void *)(*(void *)(v2192 - 8) + 64));
          }
          else
          {
            uint64_t v2193 = v2190[1];
            void *v2189 = *v2190;
            v2189[1] = v2193;
            uint64_t v2194 = v2190[3];
            v2189[2] = v2190[2];
            v2189[3] = v2194;
            uint64_t v2195 = v2190[5];
            v2189[4] = v2190[4];
            v2189[5] = v2195;
            uint64_t v2196 = v2190[7];
            v2189[6] = v2190[6];
            v2189[7] = v2196;
            uint64_t v2669 = v2190[9];
            v2189[8] = v2190[8];
            v2189[9] = v2669;
            uint64_t v2642 = v2190[11];
            v2189[10] = v2190[10];
            v2189[11] = v2642;
            uint64_t v2197 = v2191[11];
            v2718 = (char *)v2189 + v2197;
            v2198 = (char *)v2190 + v2197;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2198, 1, v2676))
            {
              uint64_t v2199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2718, v2198, *(void *)(*(void *)(v2199 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2718, v2198, v2676);
              __swift_storeEnumTagSinglePayload((uint64_t)v2718, 0, 1, v2676);
            }
            uint64_t v2200 = v2191[12];
            v2201 = (void *)((char *)v2189 + v2200);
            v2202 = (void *)((char *)v2190 + v2200);
            uint64_t v2203 = v2202[1];
            void *v2201 = *v2202;
            v2201[1] = v2203;
            *(void *)((char *)v2189 + v2191[13]) = *(void *)((char *)v2190 + v2191[13]);
            uint64_t v2204 = v2191[14];
            v2205 = (char *)v2189 + v2204;
            v2206 = (char *)v2190 + v2204;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2206, 1, v2676))
            {
              uint64_t v2207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2205, v2206, *(void *)(*(void *)(v2207 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2205, v2206, v2676);
              __swift_storeEnumTagSinglePayload((uint64_t)v2205, 0, 1, v2676);
            }
            *(void *)((char *)v2189 + v2191[15]) = *(void *)((char *)v2190 + v2191[15]);
            *(void *)((char *)v2189 + v2191[16]) = *(void *)((char *)v2190 + v2191[16]);
            uint64_t v2208 = v2191[17];
            v2209 = (void *)((char *)v2189 + v2208);
            v2210 = (void *)((char *)v2190 + v2208);
            uint64_t v2211 = v2210[1];
            void *v2209 = *v2210;
            v2209[1] = v2211;
            *(void *)((char *)v2189 + v2191[18]) = *(void *)((char *)v2190 + v2191[18]);
            *(void *)((char *)v2189 + v2191[19]) = *(void *)((char *)v2190 + v2191[19]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2189, 0, 1, (uint64_t)v2191);
          }
          uint64_t v2212 = v2690[20];
          v2213 = (void *)((char *)v2754 + v2212);
          v2214 = (void *)((char *)v2724 + v2212);
          uint64_t v2215 = type metadata accessor for PreExtractedSharedLink(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2214, 1, v2215))
          {
            uint64_t v2216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
            memcpy(v2213, v2214, *(void *)(*(void *)(v2216 - 8) + 64));
          }
          else
          {
            uint64_t v2217 = v2214[1];
            void *v2213 = *v2214;
            v2213[1] = v2217;
            uint64_t v2643 = v2214[3];
            v2670 = (int *)v2215;
            v2213[2] = v2214[2];
            v2213[3] = v2643;
            uint64_t v2218 = v2214[5];
            v2213[4] = v2214[4];
            v2213[5] = v2218;
            uint64_t v2219 = v2214[7];
            v2213[6] = v2214[6];
            v2213[7] = v2219;
            uint64_t v2220 = *(int *)(v2215 + 32);
            v2719 = (char *)v2213 + v2220;
            v2221 = (char *)v2214 + v2220;
            uint64_t v2222 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2221, 1, v2222))
            {
              uint64_t v2223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2719, v2221, *(void *)(*(void *)(v2223 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2222 - 8) + 16))(v2719, v2221, v2222);
              __swift_storeEnumTagSinglePayload((uint64_t)v2719, 0, 1, v2222);
            }
            uint64_t v2224 = v2670[9];
            v2225 = (void *)((char *)v2213 + v2224);
            v2226 = (void *)((char *)v2214 + v2224);
            uint64_t v2227 = v2226[1];
            void *v2225 = *v2226;
            v2225[1] = v2227;
            uint64_t v2228 = v2670[10];
            v2229 = (void *)((char *)v2213 + v2228);
            v2230 = (void *)((char *)v2214 + v2228);
            uint64_t v2231 = v2230[1];
            void *v2229 = *v2230;
            v2229[1] = v2231;
            uint64_t v2232 = v2670[11];
            v2233 = (void *)((char *)v2213 + v2232);
            v2234 = (void *)((char *)v2214 + v2232);
            uint64_t v2235 = v2234[1];
            void *v2233 = *v2234;
            v2233[1] = v2235;
            uint64_t v2236 = v2670[12];
            v2237 = (char *)v2213 + v2236;
            v2238 = (char *)v2214 + v2236;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2238, 1, v2676))
            {
              uint64_t v2239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2237, v2238, *(void *)(*(void *)(v2239 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2237, v2238, v2676);
              __swift_storeEnumTagSinglePayload((uint64_t)v2237, 0, 1, v2676);
            }
            uint64_t v2240 = v2670[13];
            v2241 = (char *)v2213 + v2240;
            v2242 = (char *)v2214 + v2240;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2214 + v2240, 1, v2676))
            {
              uint64_t v2243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2241, v2242, *(void *)(*(void *)(v2243 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2676 - 8) + 16))(v2241, v2242, v2676);
              __swift_storeEnumTagSinglePayload((uint64_t)v2241, 0, 1, v2676);
            }
            uint64_t v2244 = v2670[14];
            v2245 = (char *)v2213 + v2244;
            v2246 = (char *)v2214 + v2244;
            *(void *)v2245 = *(void *)v2246;
            v2245[8] = v2246[8];
            uint64_t v2247 = v2670[15];
            v2248 = (void *)((char *)v2213 + v2247);
            v2249 = (void *)((char *)v2214 + v2247);
            uint64_t v2250 = v2249[1];
            void *v2248 = *v2249;
            v2248[1] = v2250;
            uint64_t v2251 = v2670[16];
            v2252 = (void *)((char *)v2213 + v2251);
            v2253 = (void *)((char *)v2214 + v2251);
            uint64_t v2254 = v2253[1];
            void *v2252 = *v2253;
            v2252[1] = v2254;
            uint64_t v2255 = v2670[17];
            v2256 = (void *)((char *)v2213 + v2255);
            v2257 = (void *)((char *)v2214 + v2255);
            uint64_t v2258 = v2257[1];
            void *v2256 = *v2257;
            v2256[1] = v2258;
            uint64_t v2259 = v2670[18];
            v2260 = (void *)((char *)v2213 + v2259);
            v2261 = (void *)((char *)v2214 + v2259);
            uint64_t v2262 = v2261[1];
            void *v2260 = *v2261;
            v2260[1] = v2262;
            uint64_t v2263 = v2670[19];
            v2264 = (void *)((char *)v2213 + v2263);
            v2265 = (void *)((char *)v2214 + v2263);
            uint64_t v2266 = v2265[1];
            void *v2264 = *v2265;
            v2264[1] = v2266;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2213, 0, 1, (uint64_t)v2670);
          }
          uint64_t v2267 = v2690[21];
          v26 = v2754;
          v2268 = (void *)((char *)v2754 + v2267);
          v2269 = (void *)((char *)v2724 + v2267);
          uint64_t v2270 = *(void *)((char *)v2724 + v2267 + 8);
          if (v2270)
          {
            void *v2268 = *v2269;
            v2268[1] = v2270;
            uint64_t v2271 = v2269[3];
            v2268[2] = v2269[2];
            v2268[3] = v2271;
            uint64_t v2272 = v2269[5];
            v2268[4] = v2269[4];
            v2268[5] = v2272;
            uint64_t v2273 = v2269[7];
            v2268[6] = v2269[6];
            v2268[7] = v2273;
            uint64_t v2274 = v2269[9];
            v2268[8] = v2269[8];
            v2268[9] = v2274;
            uint64_t v2275 = v2269[11];
            v2268[10] = v2269[10];
            v2268[11] = v2275;
            uint64_t v2644 = v2269[13];
            v2268[12] = v2269[12];
            v2268[13] = v2644;
            uint64_t v2687 = v2269[15];
            v2268[14] = v2269[14];
            v2268[15] = v2687;
            uint64_t v2720 = v2269[17];
            v2268[16] = v2269[16];
            v2268[17] = v2720;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v26 = v2754;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            memcpy(v2268, v2269, 0x90uLL);
          }
          uint64_t v12 = v2741;
          goto LABEL_511;
        case 4u:
          uint64_t v2742 = v12;
          uint64_t v81 = v27[1];
          void *v26 = *v27;
          v26[1] = v81;
          uint64_t v82 = v27[3];
          v26[2] = v27[2];
          v26[3] = v82;
          uint64_t v83 = v27[5];
          v26[4] = v27[4];
          v26[5] = v83;
          uint64_t v84 = v27[7];
          v26[6] = v27[6];
          v26[7] = v84;
          uint64_t v85 = type metadata accessor for NoteDocument(0);
          uint64_t v86 = *(int *)(v85 + 32);
          v2725 = (char *)v26 + v86;
          long long v87 = (char *)v27 + v86;
          uint64_t v88 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v87, 1, v88))
          {
            uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2725, v87, *(void *)(*(void *)(v89 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16))(v2725, v87, v88);
            __swift_storeEnumTagSinglePayload((uint64_t)v2725, 0, 1, v88);
          }
          uint64_t v28 = v2753;
          v26 = v2754;
          uint64_t v371 = *(int *)(v85 + 36);
          long long v372 = (char *)v2754 + v371;
          uint64_t v373 = (char *)v27 + v371;
          uint64_t v12 = v2742;
          if (!__swift_getEnumTagSinglePayload((uint64_t)v27 + v371, 1, v88)) {
            goto LABEL_74;
          }
          goto LABEL_152;
        case 5u:
          uint64_t v2743 = v12;
          uint64_t v90 = v27[1];
          void *v26 = *v27;
          v26[1] = v90;
          uint64_t v91 = v27[3];
          v26[2] = v27[2];
          v26[3] = v91;
          uint64_t v92 = v27[5];
          v26[4] = v27[4];
          v26[5] = v92;
          uint64_t v93 = (int *)type metadata accessor for Reminder(0);
          uint64_t v94 = v93[7];
          long long v95 = (char *)v26 + v94;
          v96 = (char *)v27 + v94;
          uint64_t v97 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v96, 1, v97))
          {
            uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v95, v96, *(void *)(*(void *)(v98 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v95, v96, v97);
            __swift_storeEnumTagSinglePayload((uint64_t)v95, 0, 1, v97);
          }
          uint64_t v376 = v93[8];
          long long v377 = (char *)v2754 + v376;
          long long v378 = (char *)v27 + v376;
          uint64_t v12 = v2743;
          if (__swift_getEnumTagSinglePayload((uint64_t)v27 + v376, 1, v97))
          {
            uint64_t v379 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v377, v378, *(void *)(*(void *)(v379 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v377, v378, v97);
            __swift_storeEnumTagSinglePayload((uint64_t)v377, 0, 1, v97);
          }
          v26 = v2754;
          *((unsigned char *)v2754 + v93[9]) = *((unsigned char *)v27 + v93[9]);
          uint64_t v551 = v93[10];
          long long v552 = (void *)((char *)v2754 + v551);
          long long v553 = (void *)((char *)v27 + v551);
          uint64_t v554 = v553[1];
          *long long v552 = *v553;
          v552[1] = v554;
          uint64_t v555 = v93[11];
          long long v556 = (void *)((char *)v2754 + v555);
          uint64_t v557 = (void *)((char *)v27 + v555);
          uint64_t v558 = v557[1];
          *long long v556 = *v557;
          v556[1] = v558;
          uint64_t v559 = v93[12];
          long long v389 = (char *)v2754 + v559;
          long long v390 = (char *)v27 + v559;
          uint64_t v230 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v390, 1, v230)) {
            goto LABEL_140;
          }
          goto LABEL_142;
        case 6u:
          v2709 = v3;
          uint64_t v2744 = v12;
          uint64_t v99 = v27[1];
          void *v26 = *v27;
          v26[1] = v99;
          uint64_t v100 = v27[3];
          v26[2] = v27[2];
          v26[3] = v100;
          uint64_t v101 = v27[5];
          v26[4] = v27[4];
          v26[5] = v101;
          uint64_t v102 = v27[6];
          v103 = v27;
          uint64_t v104 = v26;
          uint64_t v105 = v103[7];
          v104[6] = v102;
          v104[7] = v105;
          v106 = (int *)type metadata accessor for PhoneHistory(0);
          uint64_t v107 = v106[10];
          v2726 = (char *)v104 + v107;
          v27 = v103;
          uint64_t v108 = (char *)v103 + v107;
          uint64_t v109 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v108, 1, v109))
          {
            uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2726, v108, *(void *)(*(void *)(v110 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 16))(v2726, v108, v109);
            __swift_storeEnumTagSinglePayload((uint64_t)v2726, 0, 1, v109);
          }
          uint64_t v380 = v106[11];
          v26 = v2754;
          long long v381 = (void *)((char *)v2754 + v380);
          long long v382 = (void *)((char *)v27 + v380);
          uint64_t v383 = v382[1];
          *long long v381 = *v382;
          v381[1] = v383;
          uint64_t v384 = v106[12];
          v385 = (void *)((char *)v2754 + v384);
          v386 = (void *)((char *)v27 + v384);
          uint64_t v387 = v386[1];
          void *v385 = *v386;
          v385[1] = v387;
          uint64_t v388 = v106[13];
          long long v389 = (char *)v2754 + v388;
          long long v390 = (char *)v27 + v388;
          uint64_t v230 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v12 = v2744;
          uint64_t v3 = v2709;
          if (!__swift_getEnumTagSinglePayload((uint64_t)v390, 1, v230)) {
            goto LABEL_142;
          }
LABEL_140:
          uint64_t v486 = &demangling cache variable for type metadata for URL?;
          goto LABEL_141;
        case 7u:
          uint64_t v2745 = v12;
          uint64_t v111 = v27[1];
          void *v26 = *v27;
          v26[1] = v111;
          uint64_t v112 = v27[3];
          v26[2] = v27[2];
          v26[3] = v112;
          uint64_t v113 = v27[5];
          v26[4] = v27[4];
          v26[5] = v113;
          uint64_t v114 = type metadata accessor for VoicemailTranscript(0);
          uint64_t v115 = *(int *)(v114 + 28);
          long long v116 = (char *)v26 + v115;
          long long v117 = (char *)v27 + v115;
          uint64_t v118 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v117, 1, v118))
          {
            uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v116, v117, *(void *)(*(void *)(v119 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 16))(v116, v117, v118);
            __swift_storeEnumTagSinglePayload((uint64_t)v116, 0, 1, v118);
          }
          uint64_t v28 = v2753;
          v26 = v2754;
          uint64_t v391 = *(int *)(v114 + 32);
          long long v392 = (char *)v2754 + v391;
          uint64_t v393 = (uint64_t)v27 + v391;
          uint64_t v394 = type metadata accessor for URL();
          int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v393, 1, v394);
          uint64_t v12 = v2745;
          goto LABEL_86;
        case 8u:
          uint64_t v120 = v27[1];
          void *v26 = *v27;
          v26[1] = v120;
          uint64_t v121 = v27[3];
          v26[2] = v27[2];
          v26[3] = v121;
          v122 = v26;
          uint64_t v123 = v27[5];
          v122[4] = v27[4];
          v122[5] = v123;
          uint64_t v124 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
          uint64_t v125 = (char *)v122 + v124;
          long long v126 = (char *)v27 + v124;
          uint64_t v127 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v126, 1, v127))
          {
            uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v125, v126, *(void *)(*(void *)(v128 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 16))(v125, v126, v127);
            __swift_storeEnumTagSinglePayload((uint64_t)v125, 0, 1, v127);
          }
LABEL_167:
          uint64_t v6 = v2752;
          v26 = v2754;
          goto LABEL_512;
        case 9u:
          uint64_t v129 = v27[1];
          void *v26 = *v27;
          v26[1] = v129;
          uint64_t v130 = v27[3];
          v26[2] = v27[2];
          v26[3] = v130;
          v131 = (int *)type metadata accessor for VoiceMemo(0);
          uint64_t v132 = v131[6];
          uint64_t v133 = (char *)v26 + v132;
          uint64_t v134 = (char *)v27 + v132;
          uint64_t v135 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v134, 1, v135))
          {
            uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v133, v134, *(void *)(*(void *)(v136 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v135 - 8) + 16))(v133, v134, v135);
            __swift_storeEnumTagSinglePayload((uint64_t)v133, 0, 1, v135);
          }
          uint64_t v28 = v2753;
          v26 = v2754;
          uint64_t v396 = v131[7];
          v397 = (char *)v2754 + v396;
          uint64_t v398 = (char *)v27 + v396;
          *(void *)v397 = *(void *)v398;
          v397[8] = v398[8];
          uint64_t v399 = v131[8];
          long long v392 = (char *)v2754 + v399;
          uint64_t v393 = (uint64_t)v27 + v399;
          uint64_t v394 = type metadata accessor for URL();
          int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v393, 1, v394);
LABEL_86:
          if (EnumTagSinglePayload) {
            goto LABEL_87;
          }
          goto LABEL_159;
        case 0xAu:
          uint64_t v137 = v27[1];
          void *v26 = *v27;
          v26[1] = v137;
          uint64_t v138 = v27[3];
          v26[2] = v27[2];
          v26[3] = v138;
          uint64_t v139 = (int *)type metadata accessor for Safari(0);
          uint64_t v140 = v139[6];
          v141 = (char *)v26 + v140;
          uint64_t v142 = (char *)v27 + v140;
          uint64_t v143 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v142, 1, v143))
          {
            uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v141, v142, *(void *)(*(void *)(v144 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v143 - 8) + 16))(v141, v142, v143);
            __swift_storeEnumTagSinglePayload((uint64_t)v141, 0, 1, v143);
          }
          uint64_t v28 = v2753;
          v26 = v2754;
          uint64_t v403 = v139[7];
          v404 = (void *)((char *)v2754 + v403);
          v405 = (void *)((char *)v27 + v403);
          uint64_t v406 = v405[1];
          void *v404 = *v405;
          v404[1] = v406;
          uint64_t v407 = v139[8];
          uint64_t v408 = (void *)((char *)v2754 + v407);
          v409 = (void *)((char *)v27 + v407);
          uint64_t v410 = v409[1];
          *uint64_t v408 = *v409;
          v408[1] = v410;
          uint64_t v411 = v139[9];
          uint64_t v412 = (char *)v2754 + v411;
          v413 = (char *)v27 + v411;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v413, 1, v143))
          {
            uint64_t v414 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v412, v413, *(void *)(*(void *)(v414 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v143 - 8) + 16))(v412, v413, v143);
            __swift_storeEnumTagSinglePayload((uint64_t)v412, 0, 1, v143);
          }
          goto LABEL_559;
        case 0xBu:
          uint64_t v145 = v27[1];
          void *v26 = *v27;
          v26[1] = v145;
          long long v146 = (void *)v27[2];
          v26[2] = v146;
          swift_bridgeObjectRetain();
          id v147 = v146;
          goto LABEL_173;
        case 0xCu:
          uint64_t v2746 = v12;
          uint64_t v148 = v27[1];
          void *v26 = *v27;
          v26[1] = v148;
          uint64_t v149 = v27[3];
          v26[2] = v27[2];
          v26[3] = v149;
          uint64_t v150 = v27[5];
          v26[4] = v27[4];
          v26[5] = v150;
          long long v151 = (int *)type metadata accessor for WalletTransaction(0);
          uint64_t v152 = v151[7];
          uint64_t v153 = (char *)v26 + v152;
          v154 = (char *)v27 + v152;
          uint64_t v155 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v154, 1, v155))
          {
            uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v153, v154, *(void *)(*(void *)(v156 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v155 - 8) + 16))(v153, v154, v155);
            __swift_storeEnumTagSinglePayload((uint64_t)v153, 0, 1, v155);
          }
          uint64_t v12 = v2746;
          uint64_t v415 = v151[8];
          v26 = v2754;
          uint64_t v416 = (void *)((char *)v2754 + v415);
          long long v417 = (void *)((char *)v27 + v415);
          uint64_t v418 = v417[1];
          *uint64_t v416 = *v417;
          v416[1] = v418;
          uint64_t v419 = v151[9];
          long long v420 = (void *)((char *)v2754 + v419);
          long long v421 = (void *)((char *)v27 + v419);
          uint64_t v422 = v421[1];
          *long long v420 = *v421;
          v420[1] = v422;
          uint64_t v423 = v151[10];
          uint64_t v424 = (void *)((char *)v2754 + v423);
          v425 = (void *)((char *)v27 + v423);
          uint64_t v426 = v425[1];
          *uint64_t v424 = *v425;
          v424[1] = v426;
          uint64_t v427 = v151[11];
          v428 = (char *)v2754 + v427;
          v429 = (char *)v27 + v427;
          *(_OWORD *)v428 = *(_OWORD *)v429;
          *(void *)(v428 + 13) = *(void *)(v429 + 13);
          uint64_t v430 = v151[12];
          uint64_t v431 = (void *)((char *)v2754 + v430);
          long long v432 = (void *)((char *)v27 + v430);
          uint64_t v433 = v432[1];
          *uint64_t v431 = *v432;
          v431[1] = v433;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_511;
        case 0xDu:
          uint64_t v2747 = v12;
          uint64_t v157 = v27[1];
          void *v26 = *v27;
          v26[1] = v157;
          uint64_t v158 = v27[3];
          v26[2] = v27[2];
          v26[3] = v158;
          uint64_t v159 = v27[5];
          v26[4] = v27[4];
          v26[5] = v159;
          long long v160 = (int *)type metadata accessor for WalletPass(0);
          uint64_t v161 = v160[7];
          long long v162 = (char *)v26 + v161;
          long long v163 = (char *)v27 + v161;
          uint64_t v164 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v163, 1, v164))
          {
            uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v162, v163, *(void *)(*(void *)(v165 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v164 - 8) + 16))(v162, v163, v164);
            __swift_storeEnumTagSinglePayload((uint64_t)v162, 0, 1, v164);
          }
          uint64_t v12 = v2747;
          uint64_t v28 = v2753;
          v26 = v2754;
          uint64_t v434 = v160[8];
          long long v435 = (void *)((char *)v2754 + v434);
          long long v436 = (void *)((char *)v27 + v434);
          uint64_t v437 = v436[1];
          *long long v435 = *v436;
          v435[1] = v437;
          *(void *)((char *)v2754 + v160[9]) = *(void *)((char *)v27 + v160[9]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_161;
        case 0xEu:
          uint64_t v166 = v27[1];
          void *v26 = *v27;
          v26[1] = v166;
          uint64_t v167 = v27[3];
          v26[2] = v27[2];
          v26[3] = v167;
          uint64_t v168 = v27[5];
          v26[4] = v27[4];
          v26[5] = v168;
          uint64_t v169 = v27[7];
          v26[6] = v27[6];
          v26[7] = v169;
          uint64_t v170 = v27[9];
          v2754[8] = v27[8];
          v2754[9] = v170;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v6 = v2752;
          swift_bridgeObjectRetain();
          v26 = v2754;
          goto LABEL_125;
        case 0xFu:
          v2710 = v3;
          v2727 = v27;
          uint64_t v2748 = v12;
          uint64_t v171 = v27[1];
          void *v26 = *v27;
          v26[1] = v171;
          uint64_t v172 = v27[3];
          v26[2] = v27[2];
          v26[3] = v172;
          uint64_t v173 = v27[5];
          v26[4] = v27[4];
          v26[5] = v173;
          uint64_t v174 = v27[6];
          long long v175 = v26;
          uint64_t v176 = v2727[7];
          v175[6] = v174;
          v175[7] = v176;
          uint64_t v2691 = v2727[9];
          v175[8] = v2727[8];
          v175[9] = v2691;
          uint64_t v2677 = v2727[11];
          v175[10] = v2727[10];
          v175[11] = v2677;
          *((unsigned char *)v175 + 96) = *((unsigned char *)v2727 + 96);
          uint64_t v177 = v2727[14];
          v175[13] = v2727[13];
          v175[14] = v177;
          v178 = (int *)type metadata accessor for FlightReservation(0);
          uint64_t v179 = v178[13];
          v2649 = (char *)v175 + v179;
          v180 = (char *)v2727 + v179;
          uint64_t v181 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v180, 1, v181))
          {
            uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2649, v180, *(void *)(*(void *)(v182 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v181 - 8) + 16))(v2649, v180, v181);
            __swift_storeEnumTagSinglePayload((uint64_t)v2649, 0, 1, v181);
          }
          uint64_t v438 = v178[14];
          uint64_t v439 = (char *)v2754 + v438;
          v440 = (char *)v2727 + v438;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2727 + v438, 1, v181))
          {
            uint64_t v441 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v439, v440, *(void *)(*(void *)(v441 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v181 - 8) + 16))(v439, v440, v181);
            __swift_storeEnumTagSinglePayload((uint64_t)v439, 0, 1, v181);
          }
          uint64_t v561 = v178[15];
          v562 = (void *)((char *)v2754 + v561);
          uint64_t v563 = (void *)((char *)v2727 + v561);
          uint64_t v564 = v563[1];
          void *v562 = *v563;
          v562[1] = v564;
          uint64_t v565 = v178[16];
          long long v566 = (void *)((char *)v2754 + v565);
          long long v567 = (void *)((char *)v2727 + v565);
          uint64_t v568 = v567[1];
          *long long v566 = *v567;
          v566[1] = v568;
          uint64_t v569 = v178[17];
          long long v570 = (void *)((char *)v2754 + v569);
          long long v571 = (void *)((char *)v2727 + v569);
          uint64_t v572 = v571[1];
          *long long v570 = *v571;
          v570[1] = v572;
          uint64_t v573 = v178[18];
          v2684 = (char *)v2727 + v573;
          v2698 = (char *)v2754 + v573;
          uint64_t v574 = type metadata accessor for DateComponents();
          uint64_t v575 = *(void (**)(char *, char *, uint64_t))(*(void *)(v574 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v575(v2698, v2684, v574);
          v575((char *)v2754 + v178[19], (char *)v2727 + v178[19], v574);
          uint64_t v576 = v178[20];
          v577 = (void *)((char *)v2754 + v576);
          v578 = (void *)((char *)v2727 + v576);
          uint64_t v579 = v578[1];
          void *v577 = *v578;
          v577[1] = v579;
          uint64_t v580 = v178[21];
          long long v581 = (void *)((char *)v2754 + v580);
          long long v582 = (void *)((char *)v2727 + v580);
          uint64_t v583 = v582[1];
          *long long v581 = *v582;
          v581[1] = v583;
          uint64_t v584 = v178[22];
          long long v585 = (void *)((char *)v2754 + v584);
          long long v586 = (void *)((char *)v2727 + v584);
          uint64_t v2699 = v586[1];
          *long long v585 = *v586;
          v585[1] = v2699;
          uint64_t v587 = v178[23];
          long long v588 = (void *)((char *)v2754 + v587);
          uint64_t v589 = (void *)((char *)v2727 + v587);
          uint64_t v2685 = v589[1];
          *long long v588 = *v589;
          v588[1] = v2685;
          uint64_t v590 = v178[24];
          v591 = (void *)((char *)v2754 + v590);
          uint64_t v592 = (void *)((char *)v2727 + v590);
          uint64_t v2659 = v592[1];
          void *v591 = *v592;
          v591[1] = v2659;
          uint64_t v593 = v178[25];
          v594 = (void *)((char *)v2754 + v593);
          uint64_t v595 = (void *)((char *)v2727 + v593);
          uint64_t v2633 = v595[1];
          void *v594 = *v595;
          v594[1] = v2633;
          uint64_t v596 = v178[26];
          v597 = (void *)((char *)v2754 + v596);
          v598 = (void *)((char *)v2727 + v596);
          uint64_t v2604 = v598[1];
          void *v597 = *v598;
          v597[1] = v2604;
          uint64_t v599 = v178[27];
          uint64_t v600 = (void *)((char *)v2754 + v599);
          v601 = (void *)((char *)v2727 + v599);
          v2565 = (void *)v601[1];
          *uint64_t v600 = *v601;
          v600[1] = v2565;
          uint64_t v602 = v178[28];
          uint64_t v603 = (void *)((char *)v2754 + v602);
          uint64_t v604 = (void *)((char *)v2727 + v602);
          v2539 = (void *)v604[1];
          *uint64_t v603 = *v604;
          v603[1] = v2539;
          uint64_t v605 = v178[29];
          v606 = (void *)((char *)v2754 + v605);
          v607 = (void *)((char *)v2727 + v605);
          uint64_t v2529 = v607[1];
          void *v606 = *v607;
          v606[1] = v2529;
          uint64_t v608 = v178[30];
          long long v609 = (void *)((char *)v2754 + v608);
          long long v610 = (void *)((char *)v2727 + v608);
          uint64_t v2523 = v610[1];
          *long long v609 = *v610;
          v609[1] = v2523;
          uint64_t v611 = v178[31];
          long long v612 = (void *)((char *)v2754 + v611);
          long long v613 = (void *)((char *)v2727 + v611);
          v2518 = (void *)v613[1];
          *long long v612 = *v613;
          v612[1] = v2518;
          uint64_t v614 = v178[32];
          long long v615 = (void *)((char *)v2754 + v614);
          uint64_t v616 = (void *)((char *)v2727 + v614);
          uint64_t v617 = v616[1];
          *long long v615 = *v616;
          v615[1] = v617;
          *(void *)((char *)v2754 + v178[33]) = *(void *)((char *)v2727 + v178[33]);
          *(void *)((char *)v2754 + v178[34]) = *(void *)((char *)v2727 + v178[34]);
          uint64_t v618 = v178[35];
          uint64_t v619 = (void *)((char *)v2754 + v618);
          uint64_t v620 = (void *)((char *)v2727 + v618);
          uint64_t v621 = v620[1];
          *uint64_t v619 = *v620;
          v619[1] = v621;
          uint64_t v622 = v178[36];
          v623 = (void *)((char *)v2754 + v622);
          uint64_t v624 = (void *)((char *)v2727 + v622);
          uint64_t v625 = v624[1];
          void *v623 = *v624;
          v623[1] = v625;
          uint64_t v626 = v178[37];
          long long v627 = (void *)((char *)v2754 + v626);
          long long v628 = (void *)((char *)v2727 + v626);
          uint64_t v629 = v628[1];
          *long long v627 = *v628;
          v627[1] = v629;
          uint64_t v630 = v178[38];
          v2501 = (char *)v2754 + v630;
          long long v631 = (char *)v2727 + v630;
          uint64_t v632 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v631, 1, v632))
          {
            uint64_t v633 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2501, v631, *(void *)(*(void *)(v633 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v632 - 8) + 16))(v2501, v631, v632);
            __swift_storeEnumTagSinglePayload((uint64_t)v2501, 0, 1, v632);
          }
          uint64_t v12 = v2748;
          uint64_t v699 = v178[39];
          uint64_t v700 = (void *)((char *)v2754 + v699);
          v701 = (void *)((char *)v2727 + v699);
          uint64_t v702 = v701[1];
          *uint64_t v700 = *v701;
          v700[1] = v702;
          uint64_t v703 = v178[40];
          v704 = (void *)((char *)v2754 + v703);
          v705 = (void *)((char *)v2727 + v703);
          uint64_t v706 = v705[1];
          void *v704 = *v705;
          v704[1] = v706;
          uint64_t v707 = v178[41];
          long long v708 = (char *)v2754 + v707;
          long long v709 = (char *)v2727 + v707;
          v708[8] = v709[8];
          *(void *)long long v708 = *(void *)v709;
          uint64_t v710 = v178[42];
          long long v711 = (void *)((char *)v2754 + v710);
          long long v712 = (void *)((char *)v2727 + v710);
          uint64_t v713 = v712[1];
          *long long v711 = *v712;
          v711[1] = v713;
          uint64_t v714 = v178[43];
          v715 = (char *)v2754 + v714;
          v716 = (char *)v2727 + v714;
          *(_OWORD *)v715 = *(_OWORD *)v716;
          *(void *)(v715 + 13) = *(void *)(v716 + 13);
          uint64_t v717 = v178[44];
          uint64_t v718 = (void *)((char *)v2754 + v717);
          v719 = (void *)((char *)v2727 + v717);
          uint64_t v720 = v719[1];
          *uint64_t v718 = *v719;
          v718[1] = v720;
          uint64_t v721 = v178[45];
          v722 = (void *)((char *)v2754 + v721);
          uint64_t v723 = (void *)((char *)v2727 + v721);
          uint64_t v724 = v723[1];
          void *v722 = *v723;
          v722[1] = v724;
          uint64_t v725 = v178[46];
          v726 = (void *)((char *)v2754 + v725);
          uint64_t v727 = (void *)((char *)v2727 + v725);
          uint64_t v728 = v727[1];
          void *v726 = *v727;
          v726[1] = v728;
          uint64_t v729 = v178[47];
          v730 = (void *)((char *)v2754 + v729);
          uint64_t v731 = (void *)((char *)v2727 + v729);
          uint64_t v732 = v731[1];
          void *v730 = *v731;
          v730[1] = v732;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v26 = v2754;
          v27 = v2727;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v733 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
          *(void *)((char *)v2754 + *(int *)(v733 + 48)) = *(void *)((char *)v2727 + *(int *)(v733 + 48));
          swift_bridgeObjectRetain();
          goto LABEL_170;
        case 0x10u:
          v2710 = v3;
          uint64_t v2749 = v12;
          uint64_t v183 = v27[1];
          void *v26 = *v27;
          v26[1] = v183;
          uint64_t v2692 = v27[3];
          v26[2] = v27[2];
          v26[3] = v2692;
          uint64_t v2678 = v27[5];
          v26[4] = v27[4];
          v26[5] = v2678;
          uint64_t v184 = v27[6];
          long long v185 = v27;
          long long v186 = v26;
          uint64_t v187 = v185[7];
          v186[6] = v184;
          v186[7] = v187;
          uint64_t v2650 = v185[9];
          v186[8] = v185[8];
          v186[9] = v2650;
          uint64_t v2623 = v185[11];
          v186[10] = v185[10];
          v186[11] = v2623;
          *((unsigned char *)v186 + 96) = *((unsigned char *)v185 + 96);
          uint64_t v188 = v185[14];
          v186[13] = v185[13];
          v186[14] = v188;
          uint64_t v189 = v185[16];
          v186[15] = v185[15];
          v186[16] = v189;
          long long v190 = (int *)type metadata accessor for HotelReservation(0);
          uint64_t v191 = v190[14];
          v2598 = (char *)v186 + v191;
          long long v192 = (char *)v185 + v191;
          uint64_t v193 = type metadata accessor for DateComponents();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v192, 1, v193))
          {
            uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v2598, v192, *(void *)(*(void *)(v194 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 16))(v2598, v192, v193);
            __swift_storeEnumTagSinglePayload((uint64_t)v2598, 0, 1, v193);
          }
          uint64_t v442 = v190[15];
          v443 = (char *)v2754 + v442;
          v444 = (char *)v185 + v442;
          if (__swift_getEnumTagSinglePayload((uint64_t)v185 + v442, 1, v193))
          {
            uint64_t v445 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v443, v444, *(void *)(*(void *)(v445 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 16))(v443, v444, v193);
            __swift_storeEnumTagSinglePayload((uint64_t)v443, 0, 1, v193);
          }
          uint64_t v634 = v190[16];
          uint64_t v635 = (void *)((char *)v2754 + v634);
          v636 = v185;
          v637 = (void *)((char *)v185 + v634);
          uint64_t v638 = v637[1];
          *uint64_t v635 = *v637;
          v635[1] = v638;
          uint64_t v639 = v190[17];
          long long v640 = (void *)((char *)v2754 + v639);
          long long v641 = (void *)((char *)v185 + v639);
          uint64_t v2737 = v641[1];
          *long long v640 = *v641;
          v640[1] = v2737;
          uint64_t v642 = v190[18];
          long long v643 = (void *)((char *)v2754 + v642);
          long long v644 = (void *)((char *)v185 + v642);
          uint64_t v2700 = v644[1];
          *long long v643 = *v644;
          v643[1] = v2700;
          uint64_t v645 = v190[19];
          long long v646 = (void *)((char *)v2754 + v645);
          uint64_t v647 = (void *)((char *)v185 + v645);
          uint64_t v2686 = v647[1];
          *long long v646 = *v647;
          v646[1] = v2686;
          uint64_t v648 = v190[20];
          v649 = (void *)((char *)v2754 + v648);
          uint64_t v650 = (void *)((char *)v185 + v648);
          uint64_t v651 = v650[1];
          void *v649 = *v650;
          v649[1] = v651;
          *(void *)((char *)v2754 + v190[21]) = *(void *)((char *)v185 + v190[21]);
          *(void *)((char *)v2754 + v190[22]) = *(void *)((char *)v185 + v190[22]);
          uint64_t v652 = v190[23];
          v653 = (char *)v2754 + v652;
          uint64_t v654 = (char *)v185 + v652;
          *(void *)v653 = *(void *)v654;
          v653[8] = v654[8];
          uint64_t v655 = v190[24];
          v656 = (char *)v2754 + v655;
          uint64_t v657 = (char *)v185 + v655;
          *(void *)v656 = *(void *)v657;
          v656[8] = v657[8];
          uint64_t v658 = v190[25];
          v659 = (void *)((char *)v2754 + v658);
          v660 = (void *)((char *)v185 + v658);
          uint64_t v661 = v660[1];
          void *v659 = *v660;
          v659[1] = v661;
          uint64_t v662 = v190[26];
          v663 = (void *)((char *)v2754 + v662);
          uint64_t v664 = (void *)((char *)v185 + v662);
          uint64_t v665 = v664[1];
          void *v663 = *v664;
          v663[1] = v665;
          uint64_t v666 = v190[27];
          v667 = (void *)((char *)v2754 + v666);
          v668 = (void *)((char *)v185 + v666);
          uint64_t v669 = v668[1];
          void *v667 = *v668;
          v667[1] = v669;
          uint64_t v670 = v190[28];
          uint64_t v671 = (void *)((char *)v2754 + v670);
          v672 = (void *)((char *)v185 + v670);
          uint64_t v673 = v672[1];
          *uint64_t v671 = *v672;
          v671[1] = v673;
          uint64_t v674 = v190[29];
          uint64_t v675 = (char *)v2754 + v674;
          v676 = (char *)v636 + v674;
          *(void *)uint64_t v675 = *(void *)v676;
          v675[8] = v676[8];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v26 = v2754;
          v27 = v636;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_149;
        case 0x11u:
          uint64_t v2749 = v12;
          uint64_t v195 = v27[1];
          void *v26 = *v27;
          v26[1] = v195;
          uint64_t v2651 = v27[3];
          v26[2] = v27[2];
          v26[3] = v2651;
          v2710 = v3;
          uint64_t v2728 = v27[5];
          v26[4] = v27[4];
          v26[5] = v2728;
          uint64_t v2693 = v27[7];
          v26[6] = v27[6];
          v26[7] = v2693;
          uint64_t v196 = v27[8];
          uint64_t v197 = v27;
          uint64_t v198 = v26;
          uint64_t v199 = v197[9];
          v198[8] = v196;
          v198[9] = v199;
          uint64_t v2679 = v197[11];
          v198[10] = v197[10];
          v198[11] = v2679;
          *((unsigned char *)v198 + 96) = *((unsigned char *)v197 + 96);
          uint64_t v200 = v197[14];
          v198[13] = v197[13];
          v198[14] = v200;
          uint64_t v201 = v197[16];
          v198[15] = v197[15];
          v198[16] = v201;
          long long v202 = (int *)type metadata accessor for RestaurantReservation(0);
          uint64_t v203 = v202[14];
          v2624 = (char *)v198 + v203;
          long long v204 = (char *)v197 + v203;
          uint64_t v205 = type metadata accessor for DateComponents();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v204, 1, v205))
          {
            uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
            memcpy(v2624, v204, *(void *)(*(void *)(v206 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v205 - 8) + 16))(v2624, v204, v205);
            __swift_storeEnumTagSinglePayload((uint64_t)v2624, 0, 1, v205);
          }
          uint64_t v446 = v202[15];
          long long v447 = (void *)((char *)v2754 + v446);
          long long v448 = (void *)((char *)v197 + v446);
          uint64_t v449 = v448[1];
          *long long v447 = *v448;
          v447[1] = v449;
          uint64_t v450 = v202[16];
          long long v451 = (void *)((char *)v2754 + v450);
          long long v452 = (void *)((char *)v197 + v450);
          uint64_t v2736 = v452[1];
          *long long v451 = *v452;
          v451[1] = v2736;
          uint64_t v453 = v202[17];
          uint64_t v454 = (void *)((char *)v2754 + v453);
          v455 = (void *)((char *)v197 + v453);
          uint64_t v456 = v455[1];
          *uint64_t v454 = *v455;
          v454[1] = v456;
          uint64_t v457 = v202[18];
          uint64_t v458 = (void *)((char *)v2754 + v457);
          v459 = (void *)((char *)v197 + v457);
          uint64_t v460 = v459[1];
          *uint64_t v458 = *v459;
          v458[1] = v460;
          uint64_t v461 = v202[19];
          v462 = (void *)((char *)v2754 + v461);
          v463 = (void *)((char *)v197 + v461);
          uint64_t v464 = v463[1];
          void *v462 = *v463;
          v462[1] = v464;
          *(void *)((char *)v2754 + v202[20]) = *(void *)((char *)v197 + v202[20]);
          uint64_t v465 = v202[21];
          v466 = (void *)((char *)v2754 + v465);
          v467 = (void *)((char *)v197 + v465);
          uint64_t v468 = v467[1];
          void *v466 = *v467;
          v466[1] = v468;
          uint64_t v469 = v202[22];
          v470 = (void *)((char *)v2754 + v469);
          v471 = (void *)((char *)v197 + v469);
          uint64_t v472 = v471[1];
          void *v470 = *v471;
          v470[1] = v472;
          uint64_t v473 = v202[23];
          long long v474 = (void *)((char *)v2754 + v473);
          long long v475 = (void *)((char *)v197 + v473);
          uint64_t v476 = v475[1];
          *long long v474 = *v475;
          v474[1] = v476;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v26 = v2754;
          v27 = v197;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_149:
          swift_bridgeObjectRetain();
          uint64_t v12 = v2749;
LABEL_170:
          uint64_t v6 = v2752;
          uint64_t v3 = v2710;
          goto LABEL_512;
        case 0x12u:
          v2711 = v3;
          uint64_t v2750 = v12;
          uint64_t v207 = v27[1];
          void *v26 = *v27;
          v26[1] = v207;
          uint64_t v208 = v27[3];
          v26[2] = v27[2];
          v26[3] = v208;
          uint64_t v209 = v27[5];
          v26[4] = v27[4];
          v26[5] = v209;
          uint64_t v210 = v27[7];
          v26[6] = v27[6];
          v26[7] = v210;
          uint64_t v211 = v27[9];
          v26[8] = v27[8];
          v26[9] = v211;
          uint64_t v212 = v27[11];
          v26[10] = v27[10];
          v26[11] = v212;
          uint64_t v213 = v27[13];
          v26[12] = v27[12];
          v26[13] = v213;
          uint64_t v214 = v27[15];
          v26[14] = v27[14];
          v26[15] = v214;
          *((unsigned char *)v26 + 128) = *((unsigned char *)v27 + 128);
          *(_WORD *)((char *)v26 + 129) = *(_WORD *)((char *)v27 + 129);
          uint64_t v215 = v27[18];
          v26[17] = v27[17];
          v26[18] = v215;
          uint64_t v216 = v27[20];
          v26[19] = v27[19];
          v26[20] = v216;
          uint64_t v217 = v27[22];
          v26[21] = v27[21];
          v26[22] = v217;
          uint64_t v218 = v27[24];
          v26[23] = v27[23];
          v26[24] = v218;
          uint64_t v219 = v27[26];
          v26[25] = v27[25];
          v26[26] = v219;
          uint64_t v220 = v27[28];
          v26[27] = v27[27];
          v26[28] = v220;
          uint64_t v221 = v27[30];
          v26[29] = v27[29];
          v26[30] = v221;
          uint64_t v222 = v27[32];
          v26[31] = v27[31];
          v26[32] = v222;
          uint64_t v223 = v27[34];
          v26[33] = v27[33];
          v26[34] = v223;
          uint64_t v2694 = v27[36];
          v26[35] = v27[35];
          v26[36] = v2694;
          uint64_t v2680 = v27[38];
          v26[37] = v27[37];
          v26[38] = v2680;
          uint64_t v2652 = v27[40];
          v26[39] = v27[39];
          v26[40] = v2652;
          uint64_t v2625 = v27[42];
          v26[41] = v27[41];
          v26[42] = v2625;
          uint64_t v2599 = v27[44];
          v26[43] = v27[43];
          v26[44] = v2599;
          uint64_t v224 = v27[46];
          v26[45] = v27[45];
          v26[46] = v224;
          uint64_t v225 = v27[47];
          *((unsigned char *)v26 + 384) = *((unsigned char *)v27 + 384);
          v26[47] = v225;
          uint64_t v226 = v27[50];
          v26[49] = v27[49];
          v26[50] = v226;
          uint64_t v227 = v27[52];
          v26[51] = v27[51];
          v26[52] = v227;
          uint64_t v2729 = type metadata accessor for RentalCarReservation(0);
          uint64_t v228 = *(int *)(v2729 + 140);
          __dst = (char *)v26 + v228;
          v229 = (char *)v27 + v228;
          uint64_t v230 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v229, 1, v230))
          {
            uint64_t v231 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(__dst, v229, *(void *)(*(void *)(v231 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v230 - 8) + 16))(__dst, v229, v230);
            __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v230);
          }
          uint64_t v477 = *(int *)(v2729 + 144);
          goto LABEL_112;
        case 0x13u:
          v2711 = v3;
          uint64_t v2750 = v12;
          uint64_t v232 = v27[1];
          void *v26 = *v27;
          v26[1] = v232;
          uint64_t v233 = v27[3];
          v26[2] = v27[2];
          v26[3] = v233;
          uint64_t v234 = v27[5];
          v26[4] = v27[4];
          v26[5] = v234;
          uint64_t v235 = v27[7];
          v26[6] = v27[6];
          v26[7] = v235;
          uint64_t v236 = v27[9];
          v26[8] = v27[8];
          v26[9] = v236;
          uint64_t v237 = v27[11];
          v26[10] = v27[10];
          v26[11] = v237;
          uint64_t v238 = v27[13];
          v26[12] = v27[12];
          v26[13] = v238;
          uint64_t v239 = v27[15];
          v26[14] = v27[14];
          v26[15] = v239;
          *((unsigned char *)v26 + 128) = *((unsigned char *)v27 + 128);
          *(_WORD *)((char *)v26 + 129) = *(_WORD *)((char *)v27 + 129);
          uint64_t v240 = v27[18];
          v26[17] = v27[17];
          v26[18] = v240;
          uint64_t v241 = v27[20];
          v26[19] = v27[19];
          v26[20] = v241;
          uint64_t v242 = v27[22];
          v26[21] = v27[21];
          v26[22] = v242;
          uint64_t v243 = v27[24];
          v26[23] = v27[23];
          v26[24] = v243;
          uint64_t v244 = v27[26];
          v26[25] = v27[25];
          v26[26] = v244;
          uint64_t v2695 = v27[28];
          v26[27] = v27[27];
          v26[28] = v2695;
          uint64_t v2681 = v27[30];
          v26[29] = v27[29];
          v26[30] = v2681;
          uint64_t v2653 = v27[32];
          v26[31] = v27[31];
          v26[32] = v2653;
          uint64_t v2626 = v27[34];
          v26[33] = v27[33];
          v26[34] = v2626;
          uint64_t v246 = v27[35];
          uint64_t v245 = v27[36];
          *((unsigned char *)v26 + 296) = *((unsigned char *)v27 + 296);
          v26[35] = v246;
          v26[36] = v245;
          uint64_t v2730 = type metadata accessor for TicketedTransportation(0);
          uint64_t v247 = *(int *)(v2730 + 112);
          v2491 = (char *)v26 + v247;
          uint64_t v248 = (char *)v27 + v247;
          uint64_t v230 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v248, 1, v230))
          {
            uint64_t v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2491, v248, *(void *)(*(void *)(v249 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v230 - 8) + 16))(v2491, v248, v230);
            __swift_storeEnumTagSinglePayload((uint64_t)v2491, 0, 1, v230);
          }
          uint64_t v477 = *(int *)(v2730 + 116);
          goto LABEL_112;
        case 0x14u:
          uint64_t v250 = v27[1];
          void *v26 = *v27;
          v26[1] = v250;
          uint64_t v251 = v27[3];
          v26[2] = v27[2];
          v26[3] = v251;
          uint64_t v252 = v27[5];
          v26[4] = v27[4];
          v26[5] = v252;
          uint64_t v253 = v27[7];
          v26[6] = v27[6];
          v26[7] = v253;
          uint64_t v254 = v27[9];
          v26[8] = v27[8];
          v26[9] = v254;
          uint64_t v255 = v27[11];
          v26[10] = v27[10];
          v26[11] = v255;
          uint64_t v256 = v27[13];
          v26[12] = v27[12];
          v26[13] = v256;
          uint64_t v257 = v27[15];
          v26[14] = v27[14];
          v26[15] = v257;
          *((unsigned char *)v26 + 128) = *((unsigned char *)v27 + 128);
          *(_WORD *)((char *)v26 + 129) = *(_WORD *)((char *)v27 + 129);
          uint64_t v258 = v27[18];
          v26[17] = v27[17];
          v26[18] = v258;
          uint64_t v259 = v27[20];
          v26[19] = v27[19];
          v26[20] = v259;
          uint64_t v260 = v27[22];
          v26[21] = v27[21];
          v26[22] = v260;
          uint64_t v261 = v27[24];
          v26[23] = v27[23];
          v26[24] = v261;
          uint64_t v262 = v27[26];
          v26[25] = v27[25];
          v26[26] = v262;
          uint64_t v263 = v27[28];
          v26[27] = v27[27];
          v26[28] = v263;
          uint64_t v2712 = v27[30];
          v26[29] = v27[29];
          v26[30] = v2712;
          uint64_t v2696 = v27[32];
          v26[31] = v27[31];
          v26[32] = v2696;
          uint64_t v264 = v27[34];
          v26[33] = v27[33];
          v26[34] = v264;
          uint64_t v265 = v27[36];
          uint64_t v2654 = v27[35];
          *((unsigned char *)v26 + 296) = *((unsigned char *)v27 + 296);
          v26[35] = v2654;
          v26[36] = v265;
          uint64_t v2627 = v27[39];
          v26[38] = v27[38];
          v26[39] = v2627;
          v2731 = (int *)type metadata accessor for TicketedShow(0);
          uint64_t v266 = v2731[29];
          uint64_t v267 = (char *)v26 + v266;
          uint64_t v268 = (char *)v27 + v266;
          uint64_t v269 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v268, 1, v269))
          {
            uint64_t v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v267, v268, *(void *)(*(void *)(v270 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v269 - 8) + 16))(v267, v268, v269);
            __swift_storeEnumTagSinglePayload((uint64_t)v267, 0, 1, v269);
          }
          uint64_t v478 = v2731[30];
          long long v479 = (void *)((char *)v26 + v478);
          long long v480 = (void *)((char *)v27 + v478);
          uint64_t v481 = v480[1];
          *long long v479 = *v480;
          v479[1] = v481;
          uint64_t v482 = v2731[31];
          v483 = (char *)v26 + v482;
          v484 = (char *)v27 + v482;
          uint64_t v88 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v484, 1, v88))
          {
            uint64_t v485 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v483, v484, *(void *)(*(void *)(v485 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16))(v483, v484, v88);
            __swift_storeEnumTagSinglePayload((uint64_t)v483, 0, 1, v88);
          }
          uint64_t v28 = v2753;
          uint64_t v677 = v2731[32];
          long long v372 = (char *)v26 + v677;
          uint64_t v373 = (char *)v27 + v677;
          if (!__swift_getEnumTagSinglePayload((uint64_t)v27 + v677, 1, v88))
          {
LABEL_74:
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16))(v372, v373, v88);
            uint64_t v374 = (uint64_t)v372;
            uint64_t v375 = v88;
            goto LABEL_160;
          }
LABEL_152:
          size_t v400 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                       - 8)
                           + 64);
          v401 = v372;
          uint64_t v402 = v373;
          goto LABEL_153;
        case 0x15u:
          v2711 = v3;
          uint64_t v2750 = v12;
          uint64_t v271 = v27[1];
          void *v26 = *v27;
          v26[1] = v271;
          uint64_t v2628 = v27[3];
          v26[2] = v27[2];
          v26[3] = v2628;
          uint64_t v2600 = v27[5];
          v26[4] = v27[4];
          v26[5] = v2600;
          uint64_t v272 = v27[7];
          v26[6] = v27[6];
          v26[7] = v272;
          uint64_t v273 = v27[9];
          v26[8] = v27[8];
          v26[9] = v273;
          uint64_t v274 = v27[11];
          v26[10] = v27[10];
          v26[11] = v274;
          uint64_t v275 = v27[13];
          v26[12] = v27[12];
          v26[13] = v275;
          uint64_t v276 = v27[15];
          v26[14] = v27[14];
          v26[15] = v276;
          *((unsigned char *)v26 + 128) = *((unsigned char *)v27 + 128);
          *(_WORD *)((char *)v26 + 129) = *(_WORD *)((char *)v27 + 129);
          uint64_t v277 = v27[18];
          v26[17] = v27[17];
          v26[18] = v277;
          uint64_t v278 = v27[20];
          v26[19] = v27[19];
          v26[20] = v278;
          uint64_t v279 = v27[22];
          v26[21] = v27[21];
          v26[22] = v279;
          uint64_t v280 = v27[24];
          v26[23] = v27[23];
          v26[24] = v280;
          uint64_t v281 = v27[26];
          v26[25] = v27[25];
          v26[26] = v281;
          uint64_t v282 = v27[28];
          v26[27] = v27[27];
          v26[28] = v282;
          uint64_t v283 = v27[30];
          v26[29] = v27[29];
          v26[30] = v283;
          uint64_t v284 = v27[32];
          v26[31] = v27[31];
          v26[32] = v284;
          uint64_t v286 = v27[33];
          uint64_t v285 = v27[34];
          *((unsigned char *)v26 + 280) = *((unsigned char *)v27 + 280);
          v26[33] = v286;
          v26[34] = v285;
          uint64_t v287 = v27[37];
          v26[36] = v27[36];
          v26[37] = v287;
          uint64_t v2732 = type metadata accessor for Appointment(0);
          uint64_t v288 = *(int *)(v2732 + 108);
          v2496 = (char *)v26 + v288;
          uint64_t v289 = (char *)v27 + v288;
          uint64_t v230 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v289, 1, v230))
          {
            uint64_t v290 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2496, v289, *(void *)(*(void *)(v290 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v230 - 8) + 16))(v2496, v289, v230);
            __swift_storeEnumTagSinglePayload((uint64_t)v2496, 0, 1, v230);
          }
          uint64_t v477 = *(int *)(v2732 + 112);
LABEL_112:
          long long v389 = (char *)v26 + v477;
          long long v390 = (char *)v27 + v477;
          uint64_t v12 = v2750;
          uint64_t v3 = v2711;
          if (__swift_getEnumTagSinglePayload((uint64_t)v27 + v477, 1, v230))
          {
            uint64_t v486 = &demangling cache variable for type metadata for Date?;
LABEL_141:
            uint64_t v560 = __swift_instantiateConcreteTypeFromMangledName(v486);
            memcpy(v389, v390, *(void *)(*(void *)(v560 - 8) + 64));
          }
          else
          {
LABEL_142:
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v230 - 8) + 16))(v389, v390, v230);
            __swift_storeEnumTagSinglePayload((uint64_t)v389, 0, 1, v230);
          }
LABEL_511:
          uint64_t v6 = v2752;
LABEL_512:
          uint64_t v28 = v2753;
          goto LABEL_513;
        case 0x16u:
          uint64_t v2655 = v27[1];
          void *v26 = *v27;
          v26[1] = v2655;
          uint64_t v2629 = v27[3];
          v26[2] = v27[2];
          v26[3] = v2629;
          uint64_t v2601 = v27[5];
          v26[4] = v27[4];
          v26[5] = v2601;
          uint64_t v291 = v27[7];
          v26[6] = v27[6];
          v26[7] = v291;
          uint64_t v292 = v27[9];
          v26[8] = v27[8];
          v26[9] = v292;
          uint64_t v293 = v27[11];
          v26[10] = v27[10];
          v26[11] = v293;
          uint64_t v294 = v27[13];
          v26[12] = v27[12];
          v26[13] = v294;
          uint64_t v295 = v27[15];
          v26[14] = v27[14];
          v26[15] = v295;
          *((unsigned char *)v26 + 128) = *((unsigned char *)v27 + 128);
          *(_WORD *)((char *)v26 + 129) = *(_WORD *)((char *)v27 + 129);
          uint64_t v296 = v27[18];
          v26[17] = v27[17];
          v26[18] = v296;
          uint64_t v297 = v27[20];
          v26[19] = v27[19];
          v26[20] = v297;
          uint64_t v298 = v27[22];
          v26[21] = v27[21];
          v26[22] = v298;
          uint64_t v299 = v27[24];
          v26[23] = v27[23];
          v26[24] = v299;
          uint64_t v300 = v27[26];
          v26[25] = v27[25];
          v26[26] = v300;
          uint64_t v301 = v27[28];
          v26[27] = v27[27];
          v26[28] = v301;
          uint64_t v302 = v27[30];
          v26[29] = v27[29];
          v26[30] = v302;
          v26[31] = v27[31];
          v2733 = (int *)type metadata accessor for Party(0);
          uint64_t v303 = v2733[24];
          v2505 = (char *)v26 + v303;
          uint64_t v304 = (char *)v27 + v303;
          uint64_t v305 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v304, 1, v305))
          {
            uint64_t v306 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2505, v304, *(void *)(*(void *)(v306 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v305 - 8) + 16))(v2505, v304, v305);
            __swift_storeEnumTagSinglePayload((uint64_t)v2505, 0, 1, v305);
          }
          uint64_t v487 = v2733[25];
          v488 = (char *)v2754 + v487;
          v489 = (char *)v27 + v487;
          if (__swift_getEnumTagSinglePayload((uint64_t)v27 + v487, 1, v305))
          {
            uint64_t v490 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v488, v489, *(void *)(*(void *)(v490 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v305 - 8) + 16))(v488, v489, v305);
            __swift_storeEnumTagSinglePayload((uint64_t)v488, 0, 1, v305);
          }
          uint64_t v678 = v2733[26];
          v26 = v2754;
          uint64_t v679 = (char *)v2754 + v678;
          long long v680 = (char *)v27 + v678;
          uint64_t v681 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload((uint64_t)v680, 1, v681))
          {
            uint64_t v682 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v679, v680, *(void *)(*(void *)(v682 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v681 - 8) + 16))(v679, v680, v681);
            __swift_storeEnumTagSinglePayload((uint64_t)v679, 0, 1, v681);
          }
          uint64_t v6 = v2752;
          goto LABEL_173;
        case 0x17u:
          v2713 = v3;
          uint64_t v307 = v27[1];
          void *v26 = *v27;
          v26[1] = v307;
          uint64_t v2697 = v27[3];
          v26[2] = v27[2];
          v26[3] = v2697;
          uint64_t v2682 = v27[5];
          v26[4] = v27[4];
          v26[5] = v2682;
          uint64_t v2656 = v27[7];
          v26[6] = v27[6];
          v26[7] = v2656;
          uint64_t v2630 = v27[9];
          v26[8] = v27[8];
          v26[9] = v2630;
          uint64_t v2602 = v27[11];
          v26[10] = v27[10];
          v26[11] = v2602;
          uint64_t v308 = v27[13];
          v26[12] = v27[12];
          v26[13] = v308;
          uint64_t v309 = v27[15];
          v26[14] = v27[14];
          v26[15] = v309;
          *((unsigned char *)v26 + 128) = *((unsigned char *)v27 + 128);
          *(_WORD *)((char *)v26 + 129) = *(_WORD *)((char *)v27 + 129);
          uint64_t v310 = v27[18];
          v26[17] = v27[17];
          v26[18] = v310;
          uint64_t v311 = v27[20];
          v26[19] = v27[19];
          v26[20] = v311;
          uint64_t v312 = v27[22];
          v26[21] = v27[21];
          v26[22] = v312;
          uint64_t v313 = v27[24];
          v26[23] = v27[23];
          v26[24] = v313;
          uint64_t v314 = v27[26];
          v26[25] = v27[25];
          v26[26] = v314;
          v26[27] = v27[27];
          v2734 = (int *)type metadata accessor for Trip(0);
          uint64_t v315 = v2734[22];
          v2517 = (char *)v26 + v315;
          v316 = (char *)v27 + v315;
          uint64_t v317 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v316, 1, v317))
          {
            uint64_t v318 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2517, v316, *(void *)(*(void *)(v318 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v317 - 8) + 16))(v2517, v316, v317);
            __swift_storeEnumTagSinglePayload((uint64_t)v2517, 0, 1, v317);
          }
          uint64_t v491 = v2734[23];
          long long v492 = (char *)v26 + v491;
          long long v493 = (char *)v27 + v491;
          uint64_t v3 = v2713;
          if (__swift_getEnumTagSinglePayload((uint64_t)v27 + v491, 1, v317))
          {
            uint64_t v494 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v492, v493, *(void *)(*(void *)(v494 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v317 - 8) + 16))(v492, v493, v317);
            __swift_storeEnumTagSinglePayload((uint64_t)v492, 0, 1, v317);
          }
          uint64_t v683 = v2734[24];
          long long v684 = (char *)v26 + v683;
          long long v685 = (char *)v27 + v683;
          *(void *)long long v684 = *(void *)v685;
          v684[8] = v685[8];
          uint64_t v686 = v2734[25];
          long long v392 = (char *)v26 + v686;
          uint64_t v393 = (uint64_t)v27 + v686;
          uint64_t v394 = type metadata accessor for URL();
          if (__swift_getEnumTagSinglePayload(v393, 1, v394))
          {
LABEL_87:
            size_t v400 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                         - 8)
                             + 64);
            v401 = v392;
            uint64_t v402 = (const void *)v393;
LABEL_153:
            memcpy(v401, v402, v400);
          }
          else
          {
LABEL_159:
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v394 - 8) + 16))(v392, v393, v394);
            uint64_t v374 = (uint64_t)v392;
            uint64_t v375 = v394;
LABEL_160:
            __swift_storeEnumTagSinglePayload(v374, 0, 1, v375);
          }
LABEL_161:
          uint64_t v6 = v2752;
LABEL_513:
          swift_storeEnumTagMultiPayload();
          uint64_t v2276 = *(int *)(v28 + 20);
          v2277 = *(void **)((char *)v27 + v2276);
          *(void *)((char *)v26 + v2276) = v2277;
          uint64_t v2278 = *(int *)(v28 + 24);
          v2279 = (void *)((char *)v26 + v2278);
          v2280 = (void *)((char *)v27 + v2278);
          uint64_t v2281 = v2280[1];
          void *v2279 = *v2280;
          v2279[1] = v2281;
          id v2282 = v2277;
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
          break;
        case 0x18u:
          uint64_t v2751 = v12;
          uint64_t v319 = v27[1];
          void *v26 = *v27;
          v26[1] = v319;
          uint64_t v320 = v27[3];
          v26[2] = v27[2];
          v26[3] = v320;
          uint64_t v321 = v27[5];
          v26[4] = v27[4];
          v26[5] = v321;
          v322 = (int *)type metadata accessor for GlobalItem();
          uint64_t v323 = v322[7];
          uint64_t v324 = (char *)v26 + v323;
          uint64_t v325 = (char *)v27 + v323;
          uint64_t v326 = type metadata accessor for GlobalDialog();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v325, 1, v326))
          {
            uint64_t v327 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
            memcpy(v324, v325, *(void *)(*(void *)(v327 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v326 - 8) + 16))(v324, v325, v326);
            __swift_storeEnumTagSinglePayload((uint64_t)v324, 0, 1, v326);
          }
          uint64_t v495 = v322[8];
          v26 = v2754;
          long long v496 = (char *)v2754 + v495;
          long long v497 = (char *)v27 + v495;
          unint64_t v498 = *((void *)v497 + 1);
          uint64_t v12 = v2751;
          uint64_t v6 = v2752;
          if (v498 >> 60 == 15)
          {
            *(_OWORD *)long long v496 = *(_OWORD *)v497;
          }
          else
          {
            uint64_t v499 = *(void *)v497;
            outlined copy of Data._Representation(*(void *)v497, *((void *)v497 + 1));
            *(void *)long long v496 = v499;
            *((void *)v496 + 1) = v498;
          }
          *((unsigned char *)v2754 + v322[9]) = *((unsigned char *)v27 + v322[9]);
          uint64_t v500 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
          *(void *)((char *)v2754 + *(int *)(v500 + 48)) = *(void *)((char *)v27 + *(int *)(v500 + 48));
          goto LABEL_125;
        case 0x19u:
          uint64_t v328 = v27[1];
          void *v26 = *v27;
          v26[1] = v328;
          uint64_t v329 = v27[3];
          v26[2] = v27[2];
          v26[3] = v329;
          uint64_t v330 = v27[5];
          v26[4] = v27[4];
          v26[5] = v330;
          uint64_t v331 = v27[7];
          v26[6] = v27[6];
          v26[7] = v331;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_125:
          swift_bridgeObjectRetain();
LABEL_173:
          uint64_t v28 = v2753;
          goto LABEL_513;
        case 0x1Au:
          uint64_t v332 = v27[1];
          void *v26 = *v27;
          v26[1] = v332;
          uint64_t v333 = v27[3];
          v26[2] = v27[2];
          v26[3] = v333;
          uint64_t v334 = v27[5];
          v26[4] = v27[4];
          v26[5] = v334;
          v26[6] = v27[6];
          uint64_t v335 = type metadata accessor for Answer(0);
          uint64_t v336 = *(int *)(v335 + 36);
          v2714 = (char *)v26 + v336;
          uint64_t v2735 = v335;
          v337 = (char *)v27 + v336;
          uint64_t v338 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v337, 1, v338))
          {
            uint64_t v339 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2714, v337, *(void *)(*(void *)(v339 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v338 - 8) + 16))(v2714, v337, v338);
            __swift_storeEnumTagSinglePayload((uint64_t)v2714, 0, 1, v338);
          }
          uint64_t v28 = v2753;
          v26 = v2754;
          *((unsigned char *)v2754 + *(int *)(v2735 + 40)) = *((unsigned char *)v27 + *(int *)(v2735 + 40));
          uint64_t v501 = *(int *)(v2735 + 44);
          uint64_t v502 = (void *)((char *)v2754 + v501);
          uint64_t v503 = (void *)((char *)v27 + v501);
          uint64_t v504 = v503[1];
          *uint64_t v502 = *v503;
          v502[1] = v504;
          swift_bridgeObjectRetain();
          goto LABEL_513;
        default:
          uint64_t v2739 = v12;
          uint64_t v31 = v27[1];
          void *v26 = *v27;
          v26[1] = v31;
          uint64_t v32 = v27[3];
          v26[2] = v27[2];
          v26[3] = v32;
          uint64_t v33 = v27[5];
          v26[4] = v27[4];
          v26[5] = v33;
          uint64_t v34 = v26;
          uint64_t v35 = v27[7];
          v34[6] = v27[6];
          v34[7] = v35;
          uint64_t v36 = v27[9];
          v34[8] = v27[8];
          v34[9] = v36;
          uint64_t v2721 = v27[11];
          v34[10] = v27[10];
          v34[11] = v2721;
          long long v37 = (int *)type metadata accessor for EmailDocument(0);
          uint64_t v38 = v37[12];
          v2622 = (char *)v27 + v38;
          v2647 = (char *)v34 + v38;
          uint64_t v39 = type metadata accessor for Date();
          v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v2688 = v40;
          uint64_t v2707 = v39;
          v40(v2647, v2622, v39);
          *(void *)((char *)v34 + v37[13]) = *(void *)((char *)v27 + v37[13]);
          *(void *)((char *)v34 + v37[14]) = *(void *)((char *)v27 + v37[14]);
          *(void *)((char *)v34 + v37[15]) = *(void *)((char *)v27 + v37[15]);
          *((unsigned char *)v34 + v37[16]) = *((unsigned char *)v27 + v37[16]);
          *((unsigned char *)v34 + v37[17]) = *((unsigned char *)v27 + v37[17]);
          uint64_t v41 = v37[18];
          uint64_t v42 = (void *)((char *)v34 + v41);
          uint64_t v43 = (void *)((char *)v27 + v41);
          uint64_t v44 = v43[1];
          *uint64_t v42 = *v43;
          v42[1] = v44;
          v2722 = v37;
          uint64_t v45 = v37[19];
          v46 = (void *)((char *)v34 + v45);
          v47 = (char *)v27 + v45;
          uint64_t v48 = *(void *)((char *)v27 + v45);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v48)
          {
            uint64_t v49 = *((void *)v47 + 1);
            uint64_t v50 = *((void *)v47 + 2);
            void *v46 = v48;
            v46[1] = v49;
            uint64_t v51 = *((void *)v47 + 3);
            uint64_t v52 = *((void *)v47 + 4);
            v46[2] = v50;
            v46[3] = v51;
            v46[4] = v52;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v340 = *((_OWORD *)v47 + 1);
            *(_OWORD *)v46 = *(_OWORD *)v47;
            *((_OWORD *)v46 + 1) = v340;
            v46[4] = *((void *)v47 + 4);
          }
          uint64_t v28 = v2753;
          uint64_t v341 = v2754;
          uint64_t v342 = v2722[20];
          v343 = (void *)((char *)v2754 + v342);
          uint64_t v344 = (void *)((char *)v27 + v342);
          uint64_t v345 = v344[1];
          void *v343 = *v344;
          v343[1] = v345;
          uint64_t v346 = v2722[21];
          uint64_t v347 = (void *)((char *)v2754 + v346);
          v348 = (void *)((char *)v27 + v346);
          uint64_t v349 = type metadata accessor for PartialExtractedAttributes(0);
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v348, 1, v349))
          {
            uint64_t v350 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
            memcpy(v347, v348, *(void *)(*(void *)(v350 - 8) + 64));
          }
          else
          {
            uint64_t v505 = v349;
            uint64_t v506 = v348[1];
            *uint64_t v347 = *v348;
            v347[1] = v506;
            v2631 = (int *)v505;
            v2657 = v348;
            uint64_t v507 = *(int *)(v505 + 20);
            uint64_t v508 = (void *)((char *)v347 + v507);
            long long v509 = (void *)((char *)v348 + v507);
            uint64_t v510 = type metadata accessor for RentalCarReservation(0);
            swift_bridgeObjectRetain();
            v2603 = v347;
            if (__swift_getEnumTagSinglePayload((uint64_t)v509, 1, v510))
            {
              uint64_t v511 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
              memcpy(v508, v509, *(void *)(*(void *)(v511 - 8) + 64));
            }
            else
            {
              uint64_t v741 = v509[1];
              *uint64_t v508 = *v509;
              v508[1] = v741;
              uint64_t v742 = v509[3];
              v508[2] = v509[2];
              v508[3] = v742;
              uint64_t v743 = v509[5];
              v508[4] = v509[4];
              v508[5] = v743;
              uint64_t v744 = v509[7];
              v508[6] = v509[6];
              v508[7] = v744;
              uint64_t v745 = v509[9];
              v508[8] = v509[8];
              v508[9] = v745;
              uint64_t v746 = v509[11];
              v508[10] = v509[10];
              v508[11] = v746;
              uint64_t v747 = v509[13];
              v508[12] = v509[12];
              v508[13] = v747;
              uint64_t v748 = v509[15];
              v508[14] = v509[14];
              v508[15] = v748;
              *((unsigned char *)v508 + 128) = *((unsigned char *)v509 + 128);
              *(_WORD *)((char *)v508 + 129) = *(_WORD *)((char *)v509 + 129);
              uint64_t v749 = v509[18];
              v508[17] = v509[17];
              v508[18] = v749;
              uint64_t v750 = v509[20];
              v508[19] = v509[19];
              v508[20] = v750;
              uint64_t v751 = v509[22];
              v508[21] = v509[21];
              v508[22] = v751;
              uint64_t v2466 = v509[24];
              v508[23] = v509[23];
              v508[24] = v2466;
              uint64_t v752 = v509[26];
              v508[25] = v509[25];
              v508[26] = v752;
              uint64_t v753 = v509[28];
              v508[27] = v509[27];
              v508[28] = v753;
              uint64_t v754 = v509[30];
              v508[29] = v509[29];
              v508[30] = v754;
              v2540 = (void *)v509[32];
              v508[31] = v509[31];
              v508[32] = v2540;
              uint64_t v755 = v509[34];
              v508[33] = v509[33];
              v508[34] = v755;
              uint64_t v756 = v509[36];
              v508[35] = v509[35];
              v508[36] = v756;
              uint64_t v757 = v509[38];
              v508[37] = v509[37];
              v508[38] = v757;
              uint64_t v758 = v509[40];
              v508[39] = v509[39];
              v508[40] = v758;
              uint64_t v759 = v509[42];
              v508[41] = v509[41];
              v508[42] = v759;
              uint64_t v760 = v509[44];
              v508[43] = v509[43];
              v508[44] = v760;
              uint64_t v761 = v509[46];
              v508[45] = v509[45];
              v508[46] = v761;
              uint64_t v762 = v509[47];
              *((unsigned char *)v508 + 384) = *((unsigned char *)v509 + 384);
              v508[47] = v762;
              uint64_t v763 = v509[50];
              v508[49] = v509[49];
              v508[50] = v763;
              uint64_t v764 = v509[52];
              v508[51] = v509[51];
              v508[52] = v764;
              uint64_t v765 = *(int *)(v510 + 140);
              v2566 = (char *)v508 + v765;
              uint64_t v766 = (char *)v509 + v765;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v766, 1, v2707))
              {
                uint64_t v767 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2566, v766, *(void *)(*(void *)(v767 - 8) + 64));
              }
              else
              {
                v2688(v2566, v766, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v2566, 0, 1, v2707);
              }
              uint64_t v826 = *(int *)(v510 + 144);
              long long v827 = (char *)v508 + v826;
              long long v828 = (char *)v509 + v826;
              if (__swift_getEnumTagSinglePayload((uint64_t)v509 + v826, 1, v2707))
              {
                uint64_t v829 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v827, v828, *(void *)(*(void *)(v829 - 8) + 64));
              }
              else
              {
                v2688(v827, v828, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v827, 0, 1, v2707);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v508, 0, 1, v510);
              uint64_t v347 = v2603;
            }
            uint64_t v838 = v2631;
            v839 = v2657;
            uint64_t v840 = v2631[6];
            uint64_t v841 = (void *)((char *)v347 + v840);
            v842 = (void *)((char *)v2657 + v840);
            uint64_t v843 = type metadata accessor for TicketedTransportation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v842, 1, v843))
            {
              uint64_t v844 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
              memcpy(v841, v842, *(void *)(*(void *)(v844 - 8) + 64));
            }
            else
            {
              uint64_t v845 = v842[1];
              *uint64_t v841 = *v842;
              v841[1] = v845;
              uint64_t v846 = v842[3];
              v841[2] = v842[2];
              v841[3] = v846;
              uint64_t v847 = v842[5];
              v841[4] = v842[4];
              v841[5] = v847;
              uint64_t v848 = v842[7];
              v841[6] = v842[6];
              v841[7] = v848;
              uint64_t v849 = v842[9];
              v841[8] = v842[8];
              v841[9] = v849;
              uint64_t v850 = v842[11];
              v841[10] = v842[10];
              v841[11] = v850;
              uint64_t v851 = v842[13];
              v841[12] = v842[12];
              v841[13] = v851;
              uint64_t v852 = v842[15];
              v841[14] = v842[14];
              v841[15] = v852;
              *((unsigned char *)v841 + 128) = *((unsigned char *)v842 + 128);
              *(_WORD *)((char *)v841 + 129) = *(_WORD *)((char *)v842 + 129);
              uint64_t v853 = v842[18];
              v841[17] = v842[17];
              v841[18] = v853;
              uint64_t v854 = v842[20];
              v841[19] = v842[19];
              v841[20] = v854;
              uint64_t v855 = v842[22];
              v841[21] = v842[21];
              v841[22] = v855;
              __dsta = (void *)v842[24];
              v841[23] = v842[23];
              v841[24] = __dsta;
              uint64_t v2530 = v842[26];
              v841[25] = v842[25];
              v841[26] = v2530;
              uint64_t v856 = v842[28];
              v841[27] = v842[27];
              v841[28] = v856;
              uint64_t v857 = v842[30];
              v841[29] = v842[29];
              v841[30] = v857;
              uint64_t v858 = v842[32];
              v841[31] = v842[31];
              v841[32] = v858;
              uint64_t v859 = v842[34];
              v841[33] = v842[33];
              v841[34] = v859;
              uint64_t v860 = v842[36];
              uint64_t v861 = v842[35];
              *((unsigned char *)v841 + 296) = *((unsigned char *)v842 + 296);
              v841[35] = v861;
              v841[36] = v860;
              uint64_t v862 = *(int *)(v843 + 112);
              v2541 = (char *)v841 + v862;
              v2568 = (int *)v843;
              v863 = (char *)v842 + v862;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v863, 1, v2707))
              {
                uint64_t v864 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2541, v863, *(void *)(*(void *)(v864 - 8) + 64));
              }
              else
              {
                v2688(v2541, v863, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v2541, 0, 1, v2707);
              }
              uint64_t v919 = v2568[29];
              uint64_t v920 = (char *)v841 + v919;
              uint64_t v921 = (char *)v842 + v919;
              v839 = v2657;
              if (__swift_getEnumTagSinglePayload((uint64_t)v842 + v919, 1, v2707))
              {
                uint64_t v922 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v920, v921, *(void *)(*(void *)(v922 - 8) + 64));
              }
              else
              {
                v2688(v920, v921, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v920, 0, 1, v2707);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v841, 0, 1, (uint64_t)v2568);
              uint64_t v347 = v2603;
              uint64_t v838 = v2631;
            }
            uint64_t v931 = v838[7];
            v932 = (void *)((char *)v347 + v931);
            v933 = (void *)((char *)v839 + v931);
            v934 = (int *)type metadata accessor for TicketedShow(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v933, 1, (uint64_t)v934))
            {
              uint64_t v935 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
              memcpy(v932, v933, *(void *)(*(void *)(v935 - 8) + 64));
            }
            else
            {
              uint64_t v936 = v933[1];
              void *v932 = *v933;
              v932[1] = v936;
              uint64_t v937 = v933[3];
              v932[2] = v933[2];
              v932[3] = v937;
              uint64_t v938 = v933[5];
              v932[4] = v933[4];
              v932[5] = v938;
              uint64_t v939 = v933[7];
              v932[6] = v933[6];
              v932[7] = v939;
              uint64_t v940 = v933[9];
              v932[8] = v933[8];
              v932[9] = v940;
              uint64_t v941 = v933[11];
              v932[10] = v933[10];
              v932[11] = v941;
              uint64_t v942 = v933[13];
              v932[12] = v933[12];
              v932[13] = v942;
              uint64_t v943 = v933[15];
              v932[14] = v933[14];
              v932[15] = v943;
              *((unsigned char *)v932 + 128) = *((unsigned char *)v933 + 128);
              *(_WORD *)((char *)v932 + 129) = *(_WORD *)((char *)v933 + 129);
              uint64_t v944 = v933[18];
              v932[17] = v933[17];
              v932[18] = v944;
              uint64_t v945 = v933[20];
              v932[19] = v933[19];
              v932[20] = v945;
              uint64_t v946 = v933[22];
              v932[21] = v933[21];
              v932[22] = v946;
              __dstc = (void *)v933[24];
              v932[23] = v933[23];
              v932[24] = __dstc;
              uint64_t v947 = v933[26];
              v932[25] = v933[25];
              v932[26] = v947;
              uint64_t v948 = v933[28];
              v932[27] = v933[27];
              v932[28] = v948;
              v2543 = (void *)v933[30];
              v932[29] = v933[29];
              v932[30] = v2543;
              uint64_t v949 = v933[32];
              v932[31] = v933[31];
              v932[32] = v949;
              uint64_t v950 = v933[34];
              v932[33] = v933[33];
              v932[34] = v950;
              uint64_t v952 = v933[35];
              uint64_t v951 = v933[36];
              *((unsigned char *)v932 + 296) = *((unsigned char *)v933 + 296);
              v932[35] = v952;
              v932[36] = v951;
              uint64_t v953 = v933[39];
              v932[38] = v933[38];
              v932[39] = v953;
              uint64_t v954 = v934[29];
              v2570 = (char *)v932 + v954;
              v955 = (char *)v933 + v954;
              uint64_t v956 = type metadata accessor for URL();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v955, 1, v956))
              {
                uint64_t v957 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2570, v955, *(void *)(*(void *)(v957 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v956 - 8) + 16))(v2570, v955, v956);
                __swift_storeEnumTagSinglePayload((uint64_t)v2570, 0, 1, v956);
              }
              uint64_t v1012 = v934[30];
              v1013 = (void *)((char *)v932 + v1012);
              v1014 = (void *)((char *)v933 + v1012);
              uint64_t v1015 = v1014[1];
              void *v1013 = *v1014;
              v1013[1] = v1015;
              uint64_t v1016 = v934[31];
              long long v1017 = (char *)v932 + v1016;
              long long v1018 = (char *)v933 + v1016;
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1018, 1, v2707))
              {
                uint64_t v1019 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1017, v1018, *(void *)(*(void *)(v1019 - 8) + 64));
              }
              else
              {
                v2688(v1017, v1018, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v1017, 0, 1, v2707);
              }
              uint64_t v1036 = v934[32];
              v1037 = (char *)v932 + v1036;
              uint64_t v1038 = (char *)v933 + v1036;
              if (__swift_getEnumTagSinglePayload((uint64_t)v933 + v1036, 1, v2707))
              {
                uint64_t v1039 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1037, v1038, *(void *)(*(void *)(v1039 - 8) + 64));
              }
              else
              {
                v2688(v1037, v1038, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v1037, 0, 1, v2707);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v932, 0, 1, (uint64_t)v934);
              uint64_t v347 = v2603;
              uint64_t v838 = v2631;
            }
            uint64_t v1048 = v838[8];
            uint64_t v1049 = (void *)((char *)v347 + v1048);
            long long v1050 = v2657;
            long long v1051 = (void *)((char *)v2657 + v1048);
            uint64_t v1052 = type metadata accessor for Appointment(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1051, 1, v1052))
            {
              uint64_t v1053 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
              memcpy(v1049, v1051, *(void *)(*(void *)(v1053 - 8) + 64));
            }
            else
            {
              uint64_t v1054 = v1051[1];
              *uint64_t v1049 = *v1051;
              v1049[1] = v1054;
              uint64_t v1055 = v1051[3];
              v1049[2] = v1051[2];
              v1049[3] = v1055;
              uint64_t v1056 = v1051[5];
              v1049[4] = v1051[4];
              v1049[5] = v1056;
              uint64_t v1057 = v1051[7];
              v1049[6] = v1051[6];
              v1049[7] = v1057;
              uint64_t v1058 = v1051[9];
              v1049[8] = v1051[8];
              v1049[9] = v1058;
              uint64_t v1059 = v1051[11];
              v1049[10] = v1051[10];
              v1049[11] = v1059;
              uint64_t v1060 = v1051[13];
              v1049[12] = v1051[12];
              v1049[13] = v1060;
              uint64_t v1061 = v1051[15];
              v1049[14] = v1051[14];
              v1049[15] = v1061;
              *((unsigned char *)v1049 + 128) = *((unsigned char *)v1051 + 128);
              *(_WORD *)((char *)v1049 + 129) = *(_WORD *)((char *)v1051 + 129);
              uint64_t v1062 = v1051[18];
              v1049[17] = v1051[17];
              v1049[18] = v1062;
              uint64_t v1063 = v1051[20];
              v1049[19] = v1051[19];
              v1049[20] = v1063;
              uint64_t v1064 = v1051[22];
              v1049[21] = v1051[21];
              v1049[22] = v1064;
              uint64_t v2477 = v1051[24];
              v1049[23] = v1051[23];
              v1049[24] = v2477;
              uint64_t v1065 = v1051[26];
              v1049[25] = v1051[25];
              v1049[26] = v1065;
              uint64_t v1066 = v1051[28];
              v1049[27] = v1051[27];
              v1049[28] = v1066;
              uint64_t v1067 = v1051[30];
              v1049[29] = v1051[29];
              v1049[30] = v1067;
              uint64_t v1068 = v1051[32];
              v1049[31] = v1051[31];
              v1049[32] = v1068;
              uint64_t v1070 = v1051[33];
              uint64_t v1069 = v1051[34];
              *((unsigned char *)v1049 + 280) = *((unsigned char *)v1051 + 280);
              v1049[33] = v1070;
              v1049[34] = v1069;
              uint64_t v1071 = v1051[37];
              v1049[36] = v1051[36];
              v1049[37] = v1071;
              uint64_t v1072 = *(int *)(v1052 + 108);
              v2545 = (char *)v1049 + v1072;
              uint64_t v1073 = (char *)v1051 + v1072;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1073, 1, v2707))
              {
                uint64_t v1074 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2545, v1073, *(void *)(*(void *)(v1074 - 8) + 64));
              }
              else
              {
                v2688(v2545, v1073, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v2545, 0, 1, v2707);
              }
              uint64_t v1127 = *(int *)(v1052 + 112);
              v1128 = (char *)v1049 + v1127;
              v1129 = (char *)v1051 + v1127;
              long long v1050 = v2657;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1051 + v1127, 1, v2707))
              {
                uint64_t v1130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1128, v1129, *(void *)(*(void *)(v1130 - 8) + 64));
              }
              else
              {
                v2688(v1128, v1129, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v1128, 0, 1, v2707);
              }
              __swift_storeEnumTagSinglePayload((uint64_t)v1049, 0, 1, v1052);
              uint64_t v347 = v2603;
              uint64_t v838 = v2631;
            }
            uint64_t v1139 = v838[9];
            v1140 = (void *)((char *)v347 + v1139);
            v1141 = (void *)((char *)v1050 + v1139);
            uint64_t v1142 = type metadata accessor for Party(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1141, 1, v1142))
            {
              uint64_t v1143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
              memcpy(v1140, v1141, *(void *)(*(void *)(v1143 - 8) + 64));
            }
            else
            {
              uint64_t v1144 = v1141[1];
              void *v1140 = *v1141;
              v1140[1] = v1144;
              uint64_t v1145 = v1141[3];
              v1140[2] = v1141[2];
              v1140[3] = v1145;
              uint64_t v1146 = v1141[5];
              v1140[4] = v1141[4];
              v1140[5] = v1146;
              uint64_t v1147 = v1141[7];
              v1140[6] = v1141[6];
              v1140[7] = v1147;
              uint64_t v1148 = v1141[9];
              v1140[8] = v1141[8];
              v1140[9] = v1148;
              uint64_t v1149 = v1141[11];
              v1140[10] = v1141[10];
              v1140[11] = v1149;
              uint64_t v1150 = v1141[13];
              v1140[12] = v1141[12];
              v1140[13] = v1150;
              uint64_t v1151 = v1141[15];
              v1140[14] = v1141[14];
              v1140[15] = v1151;
              *((unsigned char *)v1140 + 128) = *((unsigned char *)v1141 + 128);
              *(_WORD *)((char *)v1140 + 129) = *(_WORD *)((char *)v1141 + 129);
              uint64_t v1152 = v1141[18];
              v1140[17] = v1141[17];
              v1140[18] = v1152;
              uint64_t v1153 = v1141[20];
              v1140[19] = v1141[19];
              v1140[20] = v1153;
              uint64_t v1154 = v1141[22];
              v1140[21] = v1141[21];
              v1140[22] = v1154;
              uint64_t v2479 = v1141[24];
              v1140[23] = v1141[23];
              v1140[24] = v2479;
              uint64_t v1155 = v1141[26];
              v1140[25] = v1141[25];
              v1140[26] = v1155;
              uint64_t v1156 = v1141[28];
              v1140[27] = v1141[27];
              v1140[28] = v1156;
              uint64_t v1157 = v1141[30];
              v1140[29] = v1141[29];
              v1140[30] = v1157;
              v1140[31] = v1141[31];
              uint64_t v1158 = *(int *)(v1142 + 96);
              v2547 = (char *)v1140 + v1158;
              v2573 = (int *)v1142;
              v1159 = (char *)v1141 + v1158;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1159, 1, v2707))
              {
                uint64_t v1160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2547, v1159, *(void *)(*(void *)(v1160 - 8) + 64));
              }
              else
              {
                v2688(v2547, v1159, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v2547, 0, 1, v2707);
              }
              uint64_t v1206 = v2573[25];
              v1207 = (char *)v1140 + v1206;
              v1208 = (char *)v1141 + v1206;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1141 + v1206, 1, v2707))
              {
                uint64_t v1209 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1207, v1208, *(void *)(*(void *)(v1209 - 8) + 64));
              }
              else
              {
                v2688(v1207, v1208, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v1207, 0, 1, v2707);
              }
              uint64_t v1218 = v2573[26];
              v1219 = (char *)v1140 + v1218;
              v1220 = (char *)v1141 + v1218;
              uint64_t v1221 = type metadata accessor for URL();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1220, 1, v1221))
              {
                uint64_t v1222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1219, v1220, *(void *)(*(void *)(v1222 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1221 - 8) + 16))(v1219, v1220, v1221);
                __swift_storeEnumTagSinglePayload((uint64_t)v1219, 0, 1, v1221);
              }
              long long v1050 = v2657;
              __swift_storeEnumTagSinglePayload((uint64_t)v1140, 0, 1, (uint64_t)v2573);
              uint64_t v347 = v2603;
              uint64_t v838 = v2631;
            }
            uint64_t v1232 = v838[10];
            v1233 = (void *)((char *)v347 + v1232);
            v1234 = (void *)((char *)v1050 + v1232);
            uint64_t v1235 = type metadata accessor for Trip(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1234, 1, v1235))
            {
              uint64_t v1236 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
              memcpy(v1233, v1234, *(void *)(*(void *)(v1236 - 8) + 64));
            }
            else
            {
              uint64_t v1237 = v1234[1];
              void *v1233 = *v1234;
              v1233[1] = v1237;
              uint64_t v1238 = v1234[3];
              v1233[2] = v1234[2];
              v1233[3] = v1238;
              uint64_t v1239 = v1234[5];
              v1233[4] = v1234[4];
              v1233[5] = v1239;
              uint64_t v1240 = v1234[7];
              v1233[6] = v1234[6];
              v1233[7] = v1240;
              uint64_t v1241 = v1234[9];
              v1233[8] = v1234[8];
              v1233[9] = v1241;
              uint64_t v1242 = v1234[11];
              v1233[10] = v1234[10];
              v1233[11] = v1242;
              uint64_t v1243 = v1234[13];
              v1233[12] = v1234[12];
              v1233[13] = v1243;
              uint64_t v1244 = v1234[15];
              v1233[14] = v1234[14];
              v1233[15] = v1244;
              *((unsigned char *)v1233 + 128) = *((unsigned char *)v1234 + 128);
              *(_WORD *)((char *)v1233 + 129) = *(_WORD *)((char *)v1234 + 129);
              uint64_t v1245 = v1234[18];
              v1233[17] = v1234[17];
              v1233[18] = v1245;
              uint64_t v1246 = v1234[20];
              v1233[19] = v1234[19];
              v1233[20] = v1246;
              uint64_t v1247 = v1234[22];
              v1233[21] = v1234[21];
              v1233[22] = v1247;
              uint64_t v2486 = v1234[24];
              v1233[23] = v1234[23];
              v1233[24] = v2486;
              uint64_t v1248 = v1234[26];
              v1233[25] = v1234[25];
              v1233[26] = v1248;
              v1233[27] = v1234[27];
              uint64_t v1249 = *(int *)(v1235 + 88);
              v2549 = (char *)v1233 + v1249;
              v2575 = (int *)v1235;
              v1250 = (char *)v1234 + v1249;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1250, 1, v2707))
              {
                uint64_t v1251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2549, v1250, *(void *)(*(void *)(v1251 - 8) + 64));
              }
              else
              {
                v2688(v2549, v1250, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v2549, 0, 1, v2707);
              }
              uint64_t v1293 = v2575[23];
              v1294 = (char *)v1233 + v1293;
              v1295 = (char *)v1234 + v1293;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1234 + v1293, 1, v2707))
              {
                uint64_t v1296 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v1294, v1295, *(void *)(*(void *)(v1296 - 8) + 64));
              }
              else
              {
                v2688(v1294, v1295, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v1294, 0, 1, v2707);
              }
              uint64_t v1305 = v2575[24];
              v1306 = (char *)v1233 + v1305;
              v1307 = (char *)v1234 + v1305;
              *(void *)v1306 = *(void *)v1307;
              v1306[8] = v1307[8];
              uint64_t v1308 = v2575[25];
              v1309 = (char *)v1233 + v1308;
              v1310 = (char *)v1234 + v1308;
              uint64_t v1311 = type metadata accessor for URL();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1310, 1, v1311))
              {
                uint64_t v1312 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1309, v1310, *(void *)(*(void *)(v1312 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1311 - 8) + 16))(v1309, v1310, v1311);
                __swift_storeEnumTagSinglePayload((uint64_t)v1309, 0, 1, v1311);
              }
              long long v1050 = v2657;
              __swift_storeEnumTagSinglePayload((uint64_t)v1233, 0, 1, (uint64_t)v2575);
              uint64_t v347 = v2603;
              uint64_t v838 = v2631;
            }
            uint64_t v1328 = v838[11];
            v1329 = (void *)((char *)v347 + v1328);
            v1330 = (void *)((char *)v1050 + v1328);
            v1331 = (int *)type metadata accessor for FlightReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1330, 1, (uint64_t)v1331))
            {
              uint64_t v1332 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
              memcpy(v1329, v1330, *(void *)(*(void *)(v1332 - 8) + 64));
            }
            else
            {
              uint64_t v1333 = v1330[1];
              void *v1329 = *v1330;
              v1329[1] = v1333;
              uint64_t v1334 = v1330[3];
              v1329[2] = v1330[2];
              v1329[3] = v1334;
              uint64_t v1335 = v1330[5];
              v1329[4] = v1330[4];
              v1329[5] = v1335;
              uint64_t v1336 = v1330[7];
              v1329[6] = v1330[6];
              v1329[7] = v1336;
              uint64_t v1337 = v1330[9];
              v1329[8] = v1330[8];
              v1329[9] = v1337;
              uint64_t v1338 = v1330[11];
              v1329[10] = v1330[10];
              v1329[11] = v1338;
              *((unsigned char *)v1329 + 96) = *((unsigned char *)v1330 + 96);
              uint64_t v1339 = v1330[14];
              v1329[13] = v1330[13];
              v1329[14] = v1339;
              uint64_t v1340 = v1331[13];
              v2578 = (char *)v1329 + v1340;
              v1341 = (char *)v1330 + v1340;
              uint64_t v1342 = type metadata accessor for URL();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1341, 1, v1342))
              {
                uint64_t v1343 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v2578, v1341, *(void *)(*(void *)(v1343 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1342 - 8) + 16))(v2578, v1341, v1342);
                __swift_storeEnumTagSinglePayload((uint64_t)v2578, 0, 1, v1342);
              }
              uint64_t v1374 = v1331[14];
              v1375 = (char *)v1329 + v1374;
              v1376 = (char *)v1330 + v1374;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1330 + v1374, 1, v1342))
              {
                uint64_t v1377 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
                memcpy(v1375, v1376, *(void *)(*(void *)(v1377 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1342 - 8) + 16))(v1375, v1376, v1342);
                __swift_storeEnumTagSinglePayload((uint64_t)v1375, 0, 1, v1342);
              }
              uint64_t v1386 = v1331[15];
              v1387 = (void *)((char *)v1329 + v1386);
              v1388 = (void *)((char *)v1330 + v1386);
              v2580 = (void *)v1388[1];
              void *v1387 = *v1388;
              v1387[1] = v2580;
              uint64_t v1389 = v1331[16];
              v1390 = (void *)((char *)v1329 + v1389);
              v1391 = (void *)((char *)v1330 + v1389);
              v2551 = (void *)v1391[1];
              void *v1390 = *v1391;
              v1390[1] = v2551;
              uint64_t v1392 = v1331[17];
              v1393 = (void *)((char *)v1329 + v1392);
              v1394 = (void *)((char *)v1330 + v1392);
              uint64_t v1395 = v1394[1];
              void *v1393 = *v1394;
              v1393[1] = v1395;
              uint64_t v1396 = v1331[18];
              v2524 = (char *)v1330 + v1396;
              v2532 = (char *)v1329 + v1396;
              uint64_t v1397 = type metadata accessor for DateComponents();
              v1398 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1397 - 8) + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1398(v2532, v2524, v1397);
              v1398((char *)v1329 + v1331[19], (char *)v1330 + v1331[19], v1397);
              uint64_t v1399 = v1331[20];
              v1400 = (void *)((char *)v1329 + v1399);
              v1401 = (void *)((char *)v1330 + v1399);
              uint64_t v1402 = v1401[1];
              void *v1400 = *v1401;
              v1400[1] = v1402;
              uint64_t v1403 = v1331[21];
              v1404 = (void *)((char *)v1329 + v1403);
              v1405 = (void *)((char *)v1330 + v1403);
              uint64_t v1406 = v1405[1];
              void *v1404 = *v1405;
              v1404[1] = v1406;
              uint64_t v1407 = v1331[22];
              v1408 = (void *)((char *)v1329 + v1407);
              v1409 = (void *)((char *)v1330 + v1407);
              v2519 = (void *)v1409[1];
              void *v1408 = *v1409;
              v1408[1] = v2519;
              uint64_t v1410 = v1331[23];
              v1411 = (void *)((char *)v1329 + v1410);
              v1412 = (void *)((char *)v1330 + v1410);
              v2581 = (void *)v1412[1];
              void *v1411 = *v1412;
              v1411[1] = v2581;
              uint64_t v1413 = v1331[24];
              v1414 = (void *)((char *)v1329 + v1413);
              v1415 = (void *)((char *)v1330 + v1413);
              uint64_t v2533 = v1415[1];
              void *v1414 = *v1415;
              v1414[1] = v2533;
              uint64_t v1416 = v1331[25];
              v1417 = (void *)((char *)v1329 + v1416);
              v1418 = (void *)((char *)v1330 + v1416);
              uint64_t v2525 = v1418[1];
              void *v1417 = *v1418;
              v1417[1] = v2525;
              uint64_t v1419 = v1331[26];
              v1420 = (void *)((char *)v1329 + v1419);
              v1421 = (void *)((char *)v1330 + v1419);
              uint64_t v2513 = v1421[1];
              void *v1420 = *v1421;
              v1420[1] = v2513;
              uint64_t v1422 = v1331[27];
              v1423 = (void *)((char *)v1329 + v1422);
              v1424 = (void *)((char *)v1330 + v1422);
              v2506 = (void *)v1424[1];
              void *v1423 = *v1424;
              v1423[1] = v2506;
              uint64_t v1425 = v1331[28];
              v1426 = (void *)((char *)v1329 + v1425);
              v1427 = (void *)((char *)v1330 + v1425);
              v2502 = (void *)v1427[1];
              void *v1426 = *v1427;
              v1426[1] = v2502;
              uint64_t v1428 = v1331[29];
              v1429 = (void *)((char *)v1329 + v1428);
              v1430 = (void *)((char *)v1330 + v1428);
              v2497 = (void *)v1430[1];
              void *v1429 = *v1430;
              v1429[1] = v2497;
              uint64_t v1431 = v1331[30];
              v1432 = (void *)((char *)v1329 + v1431);
              v1433 = (void *)((char *)v1330 + v1431);
              v2493 = (void *)v1433[1];
              void *v1432 = *v1433;
              v1432[1] = v2493;
              uint64_t v1434 = v1331[31];
              v1435 = (void *)((char *)v1329 + v1434);
              v1436 = (void *)((char *)v1330 + v1434);
              uint64_t v2488 = v1436[1];
              void *v1435 = *v1436;
              v1435[1] = v2488;
              uint64_t v1437 = v1331[32];
              v1438 = (void *)((char *)v1329 + v1437);
              v1439 = (void *)((char *)v1330 + v1437);
              uint64_t v2481 = v1439[1];
              void *v1438 = *v1439;
              v1438[1] = v2481;
              *(void *)((char *)v1329 + v1331[33]) = *(void *)((char *)v1330 + v1331[33]);
              *(void *)((char *)v1329 + v1331[34]) = *(void *)((char *)v1330 + v1331[34]);
              uint64_t v1440 = v1331[35];
              v1441 = (void *)((char *)v1329 + v1440);
              v1442 = (void *)((char *)v1330 + v1440);
              uint64_t v2476 = v1442[1];
              void *v1441 = *v1442;
              v1441[1] = v2476;
              uint64_t v1443 = v1331[36];
              v1444 = (void *)((char *)v1329 + v1443);
              v1445 = (void *)((char *)v1330 + v1443);
              uint64_t v1446 = v1445[1];
              void *v1444 = *v1445;
              v1444[1] = v1446;
              uint64_t v1447 = v1331[37];
              v1448 = (void *)((char *)v1329 + v1447);
              v1449 = (void *)((char *)v1330 + v1447);
              uint64_t v1450 = v1449[1];
              void *v1448 = *v1449;
              v1448[1] = v1450;
              uint64_t v1451 = v1331[38];
              v2552 = (char *)v1329 + v1451;
              v1452 = (char *)v1330 + v1451;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1452, 1, v2707))
              {
                uint64_t v1453 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
                memcpy(v2552, v1452, *(void *)(*(void *)(v1453 - 8) + 64));
              }
              else
              {
                v2688(v2552, v1452, v2707);
                __swift_storeEnumTagSinglePayload((uint64_t)v2552, 0, 1, v2707);
              }
              uint64_t v28 = v2753;
              uint64_t v1591 = v1331[39];
              v1592 = (void *)((char *)v1329 + v1591);
              v1593 = (void *)((char *)v1330 + v1591);
              uint64_t v1594 = v1593[1];
              void *v1592 = *v1593;
              v1592[1] = v1594;
              uint64_t v1595 = v1331[40];
              v1596 = (void *)((char *)v1329 + v1595);
              v1597 = (void *)((char *)v1330 + v1595);
              v2586 = (void *)v1597[1];
              void *v1596 = *v1597;
              v1596[1] = v2586;
              uint64_t v1598 = v1331[41];
              v1599 = (char *)v1329 + v1598;
              v1600 = (char *)v1330 + v1598;
              v1599[8] = v1600[8];
              *(void *)v1599 = *(void *)v1600;
              uint64_t v1601 = v1331[42];
              v1602 = (void *)((char *)v1329 + v1601);
              v1603 = (void *)((char *)v1330 + v1601);
              v2557 = (void *)v1603[1];
              void *v1602 = *v1603;
              v1602[1] = v2557;
              uint64_t v1604 = v1331[43];
              v1605 = (char *)v1329 + v1604;
              v1606 = (char *)v1330 + v1604;
              *(_OWORD *)v1605 = *(_OWORD *)v1606;
              *(void *)(v1605 + 13) = *(void *)(v1606 + 13);
              uint64_t v1607 = v1331[44];
              v1608 = (void *)((char *)v1329 + v1607);
              v1609 = (void *)((char *)v1330 + v1607);
              uint64_t v1610 = v1609[1];
              void *v1608 = *v1609;
              v1608[1] = v1610;
              uint64_t v1611 = v1331[45];
              v1612 = (void *)((char *)v1329 + v1611);
              v1613 = (void *)((char *)v1330 + v1611);
              uint64_t v1614 = v1613[1];
              void *v1612 = *v1613;
              v1612[1] = v1614;
              uint64_t v1615 = v1331[46];
              v1616 = (void *)((char *)v1329 + v1615);
              v1617 = (void *)((char *)v1330 + v1615);
              uint64_t v1618 = v1617[1];
              void *v1616 = *v1617;
              v1616[1] = v1618;
              uint64_t v1619 = v1331[47];
              v1620 = (void *)((char *)v1329 + v1619);
              v1621 = (void *)((char *)v1330 + v1619);
              uint64_t v1622 = v1621[1];
              void *v1620 = *v1621;
              v1620[1] = v1622;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1329, 0, 1, (uint64_t)v1331);
              uint64_t v347 = v2603;
              uint64_t v838 = v2631;
            }
            uint64_t v1623 = v838[12];
            v1624 = (void *)((char *)v347 + v1623);
            v1625 = (void *)((char *)v2657 + v1623);
            v1626 = (int *)type metadata accessor for HotelReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1625, 1, (uint64_t)v1626))
            {
              uint64_t v1627 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
              memcpy(v1624, v1625, *(void *)(*(void *)(v1627 - 8) + 64));
            }
            else
            {
              uint64_t v1628 = v1625[1];
              void *v1624 = *v1625;
              v1624[1] = v1628;
              v2558 = (void *)v1625[3];
              v1624[2] = v1625[2];
              v1624[3] = v2558;
              uint64_t v1629 = v1625[5];
              v1624[4] = v1625[4];
              v1624[5] = v1629;
              uint64_t v1630 = v1625[7];
              v1624[6] = v1625[6];
              v1624[7] = v1630;
              uint64_t v1631 = v1625[9];
              v1624[8] = v1625[8];
              v1624[9] = v1631;
              uint64_t v1632 = v1625[11];
              v1624[10] = v1625[10];
              v1624[11] = v1632;
              *((unsigned char *)v1624 + 96) = *((unsigned char *)v1625 + 96);
              uint64_t v1633 = v1625[14];
              v1624[13] = v1625[13];
              v1624[14] = v1633;
              uint64_t v1634 = v1625[16];
              v1624[15] = v1625[15];
              v1624[16] = v1634;
              uint64_t v1635 = v1626[14];
              v2587 = (char *)v1624 + v1635;
              v1636 = (char *)v1625 + v1635;
              v2500 = (void *)type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1636, 1, (uint64_t)v2500))
              {
                uint64_t v1637 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2587, v1636, *(void *)(*(void *)(v1637 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, void *))(*(v2500 - 1) + 16))(v2587, v1636, v2500);
                __swift_storeEnumTagSinglePayload((uint64_t)v2587, 0, 1, (uint64_t)v2500);
              }
              uint64_t v1737 = v1626[15];
              v1738 = (char *)v1624 + v1737;
              v1739 = (char *)v1625 + v1737;
              if (__swift_getEnumTagSinglePayload((uint64_t)v1625 + v1737, 1, (uint64_t)v2500))
              {
                uint64_t v1740 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v1738, v1739, *(void *)(*(void *)(v1740 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, void *))(*(v2500 - 1) + 16))(v1738, v1739, v2500);
                __swift_storeEnumTagSinglePayload((uint64_t)v1738, 0, 1, (uint64_t)v2500);
              }
              uint64_t v1749 = v1626[16];
              v1750 = (void *)((char *)v1624 + v1749);
              v1751 = (void *)((char *)v1625 + v1749);
              uint64_t v1752 = v1751[1];
              void *v1750 = *v1751;
              v1750[1] = v1752;
              uint64_t v1753 = v1626[17];
              v1754 = (void *)((char *)v1624 + v1753);
              v1755 = (void *)((char *)v1625 + v1753);
              v2589 = (void *)v1755[1];
              void *v1754 = *v1755;
              v1754[1] = v2589;
              uint64_t v1756 = v1626[18];
              v1757 = (void *)((char *)v1624 + v1756);
              v1758 = (void *)((char *)v1625 + v1756);
              v2559 = (void *)v1758[1];
              void *v1757 = *v1758;
              v1757[1] = v2559;
              uint64_t v1759 = v1626[19];
              v1760 = (void *)((char *)v1624 + v1759);
              v1761 = (void *)((char *)v1625 + v1759);
              uint64_t v2538 = v1761[1];
              void *v1760 = *v1761;
              v1760[1] = v2538;
              uint64_t v1762 = v1626[20];
              v1763 = (void *)((char *)v1624 + v1762);
              v1764 = (void *)((char *)v1625 + v1762);
              uint64_t v2516 = v1764[1];
              void *v1763 = *v1764;
              v1763[1] = v2516;
              *(void *)((char *)v1624 + v1626[21]) = *(void *)((char *)v1625 + v1626[21]);
              *(void *)((char *)v1624 + v1626[22]) = *(void *)((char *)v1625 + v1626[22]);
              uint64_t v1765 = v1626[23];
              v1766 = (char *)v1624 + v1765;
              v1767 = (char *)v1625 + v1765;
              *(void *)v1766 = *(void *)v1767;
              v1766[8] = v1767[8];
              uint64_t v1768 = v1626[24];
              v1769 = (char *)v1624 + v1768;
              v1770 = (char *)v1625 + v1768;
              *(void *)v1769 = *(void *)v1770;
              v1769[8] = v1770[8];
              uint64_t v1771 = v1626[25];
              v1772 = (void *)((char *)v1624 + v1771);
              v1773 = (void *)((char *)v1625 + v1771);
              v2511 = (void *)v1773[1];
              void *v1772 = *v1773;
              v1772[1] = v2511;
              uint64_t v1774 = v1626[26];
              v1775 = (void *)((char *)v1624 + v1774);
              v1776 = (void *)((char *)v1625 + v1774);
              uint64_t v1777 = v1776[1];
              void *v1775 = *v1776;
              v1775[1] = v1777;
              uint64_t v1778 = v1626[27];
              v1779 = (void *)((char *)v1624 + v1778);
              v1780 = (void *)((char *)v1625 + v1778);
              uint64_t v1781 = v1780[1];
              void *v1779 = *v1780;
              v1779[1] = v1781;
              uint64_t v1782 = v1626[28];
              v1783 = (void *)((char *)v1624 + v1782);
              v1784 = (void *)((char *)v1625 + v1782);
              uint64_t v1785 = v1784[1];
              void *v1783 = *v1784;
              v1783[1] = v1785;
              uint64_t v1786 = v1626[29];
              v1787 = (char *)v1624 + v1786;
              v1788 = (char *)v1625 + v1786;
              *(void *)v1787 = *(void *)v1788;
              v1787[8] = v1788[8];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1624, 0, 1, (uint64_t)v1626);
              uint64_t v347 = v2603;
              uint64_t v838 = v2631;
            }
            uint64_t v1789 = v838[13];
            v1790 = (void *)((char *)v347 + v1789);
            v1791 = (void *)((char *)v2657 + v1789);
            v1792 = (int *)type metadata accessor for RestaurantReservation(0);
            if (__swift_getEnumTagSinglePayload((uint64_t)v1791, 1, (uint64_t)v1792))
            {
              uint64_t v1793 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
              memcpy(v1790, v1791, *(void *)(*(void *)(v1793 - 8) + 64));
            }
            else
            {
              uint64_t v1794 = v1791[1];
              void *v1790 = *v1791;
              v1790[1] = v1794;
              v2590 = (void *)v1791[3];
              v1790[2] = v1791[2];
              v1790[3] = v2590;
              uint64_t v1795 = v1791[5];
              v1790[4] = v1791[4];
              v1790[5] = v1795;
              uint64_t v1796 = v1791[7];
              v1790[6] = v1791[6];
              v1790[7] = v1796;
              uint64_t v1797 = v1791[9];
              v1790[8] = v1791[8];
              v1790[9] = v1797;
              uint64_t v1798 = v1791[11];
              v1790[10] = v1791[10];
              v1790[11] = v1798;
              *((unsigned char *)v1790 + 96) = *((unsigned char *)v1791 + 96);
              uint64_t v1799 = v1791[14];
              v1790[13] = v1791[13];
              v1790[14] = v1799;
              uint64_t v1800 = v1791[16];
              v1790[15] = v1791[15];
              v1790[16] = v1800;
              uint64_t v1801 = v1792[14];
              v2661 = (char *)v1790 + v1801;
              v1802 = (char *)v1791 + v1801;
              uint64_t v1803 = type metadata accessor for DateComponents();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (__swift_getEnumTagSinglePayload((uint64_t)v1802, 1, v1803))
              {
                uint64_t v1804 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
                memcpy(v2661, v1802, *(void *)(*(void *)(v1804 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v1803 - 8) + 16))(v2661, v1802, v1803);
                __swift_storeEnumTagSinglePayload((uint64_t)v2661, 0, 1, v1803);
              }
              uint64_t v1921 = v1792[15];
              v1922 = (void *)((char *)v1790 + v1921);
              v1923 = (void *)((char *)v1791 + v1921);
              uint64_t v1924 = v1923[1];
              void *v1922 = *v1923;
              v1922[1] = v1924;
              uint64_t v1925 = v1792[16];
              v1926 = (void *)((char *)v1790 + v1925);
              v1927 = (void *)((char *)v1791 + v1925);
              uint64_t v2663 = v1927[1];
              void *v1926 = *v1927;
              v1926[1] = v2663;
              uint64_t v1928 = v1792[17];
              v1929 = (void *)((char *)v1790 + v1928);
              v1930 = (void *)((char *)v1791 + v1928);
              v2593 = (void *)v1930[1];
              void *v1929 = *v1930;
              v1929[1] = v2593;
              uint64_t v1931 = v1792[18];
              v1932 = (void *)((char *)v1790 + v1931);
              v1933 = (void *)((char *)v1791 + v1931);
              v2562 = (void *)v1933[1];
              void *v1932 = *v1933;
              v1932[1] = v2562;
              uint64_t v1934 = v1792[19];
              v1935 = (void *)((char *)v1790 + v1934);
              v1936 = (void *)((char *)v1791 + v1934);
              uint64_t v1937 = v1936[1];
              void *v1935 = *v1936;
              v1935[1] = v1937;
              *(void *)((char *)v1790 + v1792[20]) = *(void *)((char *)v1791 + v1792[20]);
              uint64_t v1938 = v1792[21];
              v1939 = (void *)((char *)v1790 + v1938);
              v1940 = (void *)((char *)v1791 + v1938);
              uint64_t v1941 = v1940[1];
              void *v1939 = *v1940;
              v1939[1] = v1941;
              uint64_t v1942 = v1792[22];
              v1943 = (void *)((char *)v1790 + v1942);
              v1944 = (void *)((char *)v1791 + v1942);
              uint64_t v1945 = v1944[1];
              void *v1943 = *v1944;
              v1943[1] = v1945;
              uint64_t v1946 = v1792[23];
              v1947 = (void *)((char *)v1790 + v1946);
              v1948 = (void *)((char *)v1791 + v1946);
              uint64_t v1949 = v1948[1];
              void *v1947 = *v1948;
              v1947[1] = v1949;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              __swift_storeEnumTagSinglePayload((uint64_t)v1790, 0, 1, (uint64_t)v1792);
              uint64_t v347 = v2603;
              uint64_t v838 = v2631;
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v347, 0, 1, (uint64_t)v838);
            uint64_t v341 = v2754;
          }
          uint64_t v1950 = v2722[22];
          v1951 = (void *)((char *)v341 + v1950);
          v1952 = (void *)((char *)v27 + v1950);
          uint64_t v1953 = type metadata accessor for PreExtractedCard(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1952, 1, v1953))
          {
            uint64_t v1954 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
            memcpy(v1951, v1952, *(void *)(*(void *)(v1954 - 8) + 64));
          }
          else
          {
            uint64_t v1955 = v1952[1];
            void *v1951 = *v1952;
            v1951[1] = v1955;
            uint64_t v1956 = v1952[3];
            v1951[2] = v1952[2];
            v1951[3] = v1956;
            uint64_t v1957 = v1952[5];
            v1951[4] = v1952[4];
            v1951[5] = v1957;
            uint64_t v1958 = v1952[7];
            v1951[6] = v1952[6];
            v1951[7] = v1958;
            v1959 = (int *)v1953;
            uint64_t v1960 = v1952[9];
            v1951[8] = v1952[8];
            v1951[9] = v1960;
            uint64_t v1961 = v1952[11];
            v1951[10] = v1952[10];
            v1951[11] = v1961;
            v2664 = v1959;
            uint64_t v1962 = v1959[10];
            v2636 = (char *)v1951 + v1962;
            v2594 = (char *)v1952 + v1962;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2594, 1, v2707))
            {
              uint64_t v1963 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2636, v2594, *(void *)(*(void *)(v1963 - 8) + 64));
            }
            else
            {
              v2688(v2636, v2594, v2707);
              __swift_storeEnumTagSinglePayload((uint64_t)v2636, 0, 1, v2707);
            }
            uint64_t v1964 = v2664[11];
            v1965 = (char *)v1951 + v1964;
            v1966 = (char *)v1952 + v1964;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1952 + v1964, 1, v2707))
            {
              uint64_t v1967 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1965, v1966, *(void *)(*(void *)(v1967 - 8) + 64));
            }
            else
            {
              v2688(v1965, v1966, v2707);
              __swift_storeEnumTagSinglePayload((uint64_t)v1965, 0, 1, v2707);
            }
            uint64_t v1968 = v2664[12];
            v1969 = (void *)((char *)v1951 + v1968);
            v1970 = (void *)((char *)v1952 + v1968);
            uint64_t v1971 = v1970[1];
            void *v1969 = *v1970;
            v1969[1] = v1971;
            uint64_t v1972 = v2664[13];
            v1973 = (void *)((char *)v1951 + v1972);
            v1974 = (void *)((char *)v1952 + v1972);
            uint64_t v1975 = v1974[1];
            void *v1973 = *v1974;
            v1973[1] = v1975;
            uint64_t v1976 = v2664[14];
            v1977 = (void *)((char *)v1951 + v1976);
            v1978 = (void *)((char *)v1952 + v1976);
            uint64_t v1979 = v1978[1];
            void *v1977 = *v1978;
            v1977[1] = v1979;
            uint64_t v1980 = v2664[15];
            v2637 = (char *)v1951 + v1980;
            v1981 = (char *)v1952 + v1980;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1981, 1, v2707))
            {
              uint64_t v1982 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2637, v1981, *(void *)(*(void *)(v1982 - 8) + 64));
            }
            else
            {
              v2688(v2637, v1981, v2707);
              __swift_storeEnumTagSinglePayload((uint64_t)v2637, 0, 1, v2707);
            }
            uint64_t v1983 = v2664[16];
            v1984 = (void *)((char *)v1951 + v1983);
            v1985 = (void *)((char *)v1952 + v1983);
            uint64_t v1986 = v1985[1];
            void *v1984 = *v1985;
            v1984[1] = v1986;
            uint64_t v1987 = v2664[17];
            v1988 = (void *)((char *)v1951 + v1987);
            v1989 = (void *)((char *)v1952 + v1987);
            uint64_t v2638 = v1989[1];
            void *v1988 = *v1989;
            v1988[1] = v2638;
            uint64_t v1990 = v2664[18];
            v1991 = (void *)((char *)v1951 + v1990);
            v1992 = (void *)((char *)v1952 + v1990);
            uint64_t v2619 = v1992[1];
            void *v1991 = *v1992;
            v1991[1] = v2619;
            uint64_t v1993 = v2664[19];
            v1994 = (void *)((char *)v1951 + v1993);
            v1995 = (void *)((char *)v1952 + v1993);
            v2595 = (void *)v1995[1];
            void *v1994 = *v1995;
            v1994[1] = v2595;
            uint64_t v1996 = v2664[20];
            v1997 = (void *)((char *)v1951 + v1996);
            v1998 = (void *)((char *)v1952 + v1996);
            uint64_t v1999 = v1998[1];
            void *v1997 = *v1998;
            v1997[1] = v1999;
            uint64_t v2000 = v2664[21];
            v2001 = (void *)((char *)v1951 + v2000);
            v2002 = (void *)((char *)v1952 + v2000);
            uint64_t v2003 = v2002[1];
            void *v2001 = *v2002;
            v2001[1] = v2003;
            uint64_t v2004 = v2664[22];
            v2005 = (void *)((char *)v1951 + v2004);
            v2006 = (void *)((char *)v1952 + v2004);
            uint64_t v2007 = v2006[1];
            void *v2005 = *v2006;
            v2005[1] = v2007;
            uint64_t v2008 = v2664[23];
            v2009 = (void *)((char *)v1951 + v2008);
            v2010 = (void *)((char *)v1952 + v2008);
            uint64_t v2011 = v2010[1];
            void *v2009 = *v2010;
            v2009[1] = v2011;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1951, 0, 1, (uint64_t)v2664);
            uint64_t v341 = v2754;
          }
          uint64_t v2012 = v2722[23];
          v2013 = (void *)((char *)v341 + v2012);
          v2014 = (void *)((char *)v27 + v2012);
          v2015 = (int *)type metadata accessor for PreExtractedContact(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2014, 1, (uint64_t)v2015))
          {
            uint64_t v2016 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
            memcpy(v2013, v2014, *(void *)(*(void *)(v2016 - 8) + 64));
          }
          else
          {
            uint64_t v2017 = v2014[1];
            void *v2013 = *v2014;
            v2013[1] = v2017;
            uint64_t v2018 = v2014[3];
            v2013[2] = v2014[2];
            v2013[3] = v2018;
            uint64_t v2019 = v2014[5];
            v2013[4] = v2014[4];
            v2013[5] = v2019;
            uint64_t v2020 = v2014[7];
            v2013[6] = v2014[6];
            v2013[7] = v2020;
            uint64_t v2639 = v2014[9];
            v2013[8] = v2014[8];
            v2013[9] = v2639;
            uint64_t v2620 = v2014[11];
            v2013[10] = v2014[10];
            v2013[11] = v2620;
            uint64_t v2021 = v2015[11];
            v2665 = (char *)v2013 + v2021;
            v2563 = (char *)v2014 + v2021;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2563, 1, v2707))
            {
              uint64_t v2022 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2665, v2563, *(void *)(*(void *)(v2022 - 8) + 64));
            }
            else
            {
              v2688(v2665, v2563, v2707);
              __swift_storeEnumTagSinglePayload((uint64_t)v2665, 0, 1, v2707);
            }
            uint64_t v2023 = v2015[12];
            v2024 = (void *)((char *)v2013 + v2023);
            v2025 = (void *)((char *)v2014 + v2023);
            uint64_t v2026 = v2025[1];
            void *v2024 = *v2025;
            v2024[1] = v2026;
            *(void *)((char *)v2013 + v2015[13]) = *(void *)((char *)v2014 + v2015[13]);
            uint64_t v2027 = v2015[14];
            v2028 = (char *)v2013 + v2027;
            v2029 = (char *)v2014 + v2027;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2029, 1, v2707))
            {
              uint64_t v2030 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2028, v2029, *(void *)(*(void *)(v2030 - 8) + 64));
            }
            else
            {
              v2688(v2028, v2029, v2707);
              __swift_storeEnumTagSinglePayload((uint64_t)v2028, 0, 1, v2707);
            }
            *(void *)((char *)v2013 + v2015[15]) = *(void *)((char *)v2014 + v2015[15]);
            *(void *)((char *)v2013 + v2015[16]) = *(void *)((char *)v2014 + v2015[16]);
            uint64_t v2031 = v2015[17];
            v2032 = (void *)((char *)v2013 + v2031);
            v2033 = (void *)((char *)v2014 + v2031);
            uint64_t v2034 = v2033[1];
            void *v2032 = *v2033;
            v2032[1] = v2034;
            *(void *)((char *)v2013 + v2015[18]) = *(void *)((char *)v2014 + v2015[18]);
            *(void *)((char *)v2013 + v2015[19]) = *(void *)((char *)v2014 + v2015[19]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2013, 0, 1, (uint64_t)v2015);
            uint64_t v28 = v2753;
          }
          uint64_t v2035 = v2722[24];
          v26 = v2754;
          v2036 = (void *)((char *)v2754 + v2035);
          v2037 = (void *)((char *)v27 + v2035);
          uint64_t v2038 = type metadata accessor for PreExtractedSharedLink(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v2037, 1, v2038))
          {
            uint64_t v2039 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
            memcpy(v2036, v2037, *(void *)(*(void *)(v2039 - 8) + 64));
          }
          else
          {
            uint64_t v2040 = v2037[1];
            void *v2036 = *v2037;
            v2036[1] = v2040;
            uint64_t v2041 = v2037[3];
            v2036[2] = v2037[2];
            v2036[3] = v2041;
            v2042 = (int *)v2038;
            uint64_t v2043 = v2037[5];
            v2036[4] = v2037[4];
            v2036[5] = v2043;
            uint64_t v2044 = v2037[7];
            v2036[6] = v2037[6];
            v2036[7] = v2044;
            v2666 = v2042;
            uint64_t v2045 = v2042[8];
            v2640 = (char *)v2036 + v2045;
            v2046 = (char *)v2037 + v2045;
            uint64_t v2047 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2046, 1, v2047))
            {
              uint64_t v2048 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2640, v2046, *(void *)(*(void *)(v2048 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2047 - 8) + 16))(v2640, v2046, v2047);
              __swift_storeEnumTagSinglePayload((uint64_t)v2640, 0, 1, v2047);
            }
            uint64_t v2049 = v2666[9];
            v2050 = (void *)((char *)v2036 + v2049);
            v2051 = (void *)((char *)v2037 + v2049);
            uint64_t v2052 = v2051[1];
            void *v2050 = *v2051;
            v2050[1] = v2052;
            uint64_t v2053 = v2666[10];
            v2054 = (void *)((char *)v2036 + v2053);
            v2055 = (void *)((char *)v2037 + v2053);
            uint64_t v2056 = v2055[1];
            void *v2054 = *v2055;
            v2054[1] = v2056;
            uint64_t v2057 = v2666[11];
            v2058 = (void *)((char *)v2036 + v2057);
            v2059 = (void *)((char *)v2037 + v2057);
            uint64_t v2060 = v2059[1];
            void *v2058 = *v2059;
            v2058[1] = v2060;
            uint64_t v2061 = v2666[12];
            v2062 = (char *)v2036 + v2061;
            v2063 = (char *)v2037 + v2061;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v28 = v2753;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2063, 1, v2707))
            {
              uint64_t v2064 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2062, v2063, *(void *)(*(void *)(v2064 - 8) + 64));
            }
            else
            {
              v2688(v2062, v2063, v2707);
              __swift_storeEnumTagSinglePayload((uint64_t)v2062, 0, 1, v2707);
            }
            uint64_t v2065 = v2666[13];
            v2066 = (char *)v2036 + v2065;
            v2067 = (char *)v2037 + v2065;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2037 + v2065, 1, v2707))
            {
              uint64_t v2068 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2066, v2067, *(void *)(*(void *)(v2068 - 8) + 64));
            }
            else
            {
              v2688(v2066, v2067, v2707);
              __swift_storeEnumTagSinglePayload((uint64_t)v2066, 0, 1, v2707);
            }
            uint64_t v2069 = v2666[14];
            v2070 = (char *)v2036 + v2069;
            v2071 = (char *)v2037 + v2069;
            *(void *)v2070 = *(void *)v2071;
            v2070[8] = v2071[8];
            uint64_t v2072 = v2666[15];
            v2073 = (void *)((char *)v2036 + v2072);
            v2074 = (void *)((char *)v2037 + v2072);
            uint64_t v2075 = v2074[1];
            void *v2073 = *v2074;
            v2073[1] = v2075;
            uint64_t v2076 = v2666[16];
            v2077 = (void *)((char *)v2036 + v2076);
            v2078 = (void *)((char *)v2037 + v2076);
            uint64_t v2716 = v2078[1];
            void *v2077 = *v2078;
            v2077[1] = v2716;
            uint64_t v2079 = v2666[17];
            v2080 = (void *)((char *)v2036 + v2079);
            v2081 = (void *)((char *)v2037 + v2079);
            uint64_t v2082 = v2081[1];
            void *v2080 = *v2081;
            v2080[1] = v2082;
            uint64_t v2083 = v2666[18];
            v2084 = (void *)((char *)v2036 + v2083);
            v2085 = (void *)((char *)v2037 + v2083);
            uint64_t v2086 = v2085[1];
            void *v2084 = *v2085;
            v2084[1] = v2086;
            uint64_t v2087 = v2666[19];
            v2088 = (void *)((char *)v2036 + v2087);
            v2089 = (void *)((char *)v2037 + v2087);
            uint64_t v2090 = v2089[1];
            void *v2088 = *v2089;
            v2088[1] = v2090;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v2036, 0, 1, (uint64_t)v2666);
            v26 = v2754;
          }
          uint64_t v2091 = v2722[25];
LABEL_555:
          v2457 = (void *)((char *)v26 + v2091);
          v2458 = (void *)((char *)v27 + v2091);
          uint64_t v2459 = *(void *)((char *)v27 + v2091 + 8);
          if (v2459)
          {
            void *v2457 = *v2458;
            v2457[1] = v2459;
            uint64_t v2460 = v2458[3];
            v2457[2] = v2458[2];
            v2457[3] = v2460;
            uint64_t v2461 = v2458[5];
            v2457[4] = v2458[4];
            v2457[5] = v2461;
            uint64_t v2462 = v2458[7];
            v2457[6] = v2458[6];
            v2457[7] = v2462;
            v2564 = (void *)v2458[9];
            v2457[8] = v2458[8];
            v2457[9] = v2564;
            uint64_t v2463 = v2458[11];
            v2457[10] = v2458[10];
            v2457[11] = v2463;
            uint64_t v2464 = v2458[13];
            v2457[12] = v2458[12];
            v2457[13] = v2464;
            uint64_t v2465 = v2458[15];
            v2457[14] = v2458[14];
            v2457[15] = v2465;
            uint64_t v2738 = v2458[17];
            v2457[16] = v2458[16];
            v2457[17] = v2738;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v26 = v2754;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            memcpy(v2457, v2458, 0x90uLL);
          }
          uint64_t v12 = v2739;
LABEL_559:
          uint64_t v6 = v2752;
          goto LABEL_513;
      }
    }
    uint64_t v2283 = v6[12];
    *(void *)((char *)v4 + v6[11]) = *(void *)((char *)v3 + v6[11]);
    v2284 = (char *)v4 + v2283;
    v2285 = (char *)v3 + v2283;
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v2285, 1, v12))
    {
      uint64_t v2286 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
      memcpy(v2284, v2285, *(void *)(*(void *)(v2286 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v2284, v2285, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v2284, 0, 1, v12);
    }
  }
  return v4;
}

uint64_t destroy for SearchSpotlightEntity.Builder(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for IntentFile();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v6 = a1 + a2[10];
  uint64_t v7 = type metadata accessor for SearchResult(0);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7))
  {
    type metadata accessor for SearchResultItem(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = (int *)type metadata accessor for EmailDocument(0);
        uint64_t v9 = v6 + v8[12];
        uint64_t v10 = type metadata accessor for Date();
        uint64_t v293 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
        v293(v9, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v6 + v8[19]))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v11 = v6 + v8[21];
        uint64_t v12 = type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v299 = v10;
        if (!__swift_getEnumTagSinglePayload(v11, 1, v12))
        {
          swift_bridgeObjectRelease();
          uint64_t v296 = (int *)v12;
          uint64_t v13 = v11 + *(int *)(v12 + 20);
          uint64_t v14 = type metadata accessor for RentalCarReservation(0);
          uint64_t v288 = v11;
          if (!__swift_getEnumTagSinglePayload(v13, 1, v14))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v15 = v13 + *(int *)(v14 + 140);
            if (!__swift_getEnumTagSinglePayload(v15, 1, v299)) {
              v293(v15, v299);
            }
            uint64_t v16 = v13 + *(int *)(v14 + 144);
            if (!__swift_getEnumTagSinglePayload(v16, 1, v299)) {
              v293(v16, v299);
            }
          }
          uint64_t v17 = v11 + v296[6];
          uint64_t v18 = type metadata accessor for TicketedTransportation(0);
          if (!__swift_getEnumTagSinglePayload(v17, 1, v18))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v19 = v17 + *(int *)(v18 + 112);
            if (!__swift_getEnumTagSinglePayload(v19, 1, v299)) {
              v293(v19, v299);
            }
            uint64_t v20 = v17 + *(int *)(v18 + 116);
            if (!__swift_getEnumTagSinglePayload(v20, 1, v299)) {
              v293(v20, v299);
            }
          }
          uint64_t v21 = v11 + v296[7];
          uint64_t v22 = (int *)type metadata accessor for TicketedShow(0);
          if (!__swift_getEnumTagSinglePayload(v21, 1, (uint64_t)v22))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v23 = v21 + v22[29];
            uint64_t v24 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v23, 1, v24)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
            }
            swift_bridgeObjectRelease();
            uint64_t v25 = v21 + v22[31];
            if (!__swift_getEnumTagSinglePayload(v25, 1, v299)) {
              v293(v25, v299);
            }
            uint64_t v26 = v21 + v22[32];
            uint64_t v11 = v288;
            if (!__swift_getEnumTagSinglePayload(v26, 1, v299)) {
              v293(v26, v299);
            }
          }
          uint64_t v27 = v11 + v296[8];
          uint64_t v28 = type metadata accessor for Appointment(0);
          if (!__swift_getEnumTagSinglePayload(v27, 1, v28))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v29 = v27 + *(int *)(v28 + 108);
            if (!__swift_getEnumTagSinglePayload(v29, 1, v299)) {
              v293(v29, v299);
            }
            uint64_t v30 = v27 + *(int *)(v28 + 112);
            uint64_t v11 = v288;
            if (!__swift_getEnumTagSinglePayload(v30, 1, v299)) {
              v293(v30, v299);
            }
          }
          uint64_t v31 = v11 + v296[9];
          uint64_t v32 = (int *)type metadata accessor for Party(0);
          if (!__swift_getEnumTagSinglePayload(v31, 1, (uint64_t)v32))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v31 + v32[24];
            if (!__swift_getEnumTagSinglePayload(v33, 1, v299)) {
              v293(v33, v299);
            }
            uint64_t v34 = v31 + v32[25];
            if (!__swift_getEnumTagSinglePayload(v34, 1, v299)) {
              v293(v34, v299);
            }
            uint64_t v35 = v31 + v32[26];
            uint64_t v36 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v35, 1, v36)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v35, v36);
            }
          }
          uint64_t v37 = v288 + v296[10];
          uint64_t v38 = (int *)type metadata accessor for Trip(0);
          if (!__swift_getEnumTagSinglePayload(v37, 1, (uint64_t)v38))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v39 = v37 + v38[22];
            if (!__swift_getEnumTagSinglePayload(v39, 1, v299)) {
              v293(v39, v299);
            }
            uint64_t v40 = v37 + v38[23];
            if (!__swift_getEnumTagSinglePayload(v40, 1, v299)) {
              v293(v40, v299);
            }
            uint64_t v41 = v37 + v38[25];
            uint64_t v42 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v41, 1, v42)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
            }
          }
          uint64_t v43 = v296;
          uint64_t v44 = v288;
          uint64_t v45 = v288 + v296[11];
          v46 = (int *)type metadata accessor for FlightReservation(0);
          if (!__swift_getEnumTagSinglePayload(v45, 1, (uint64_t)v46))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v47 = v45 + v46[13];
            uint64_t v48 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v47, 1, v48)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
            }
            uint64_t v286 = v8;
            uint64_t v49 = v45 + v46[14];
            if (!__swift_getEnumTagSinglePayload(v49, 1, v48)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v49, v48);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v285 = v45 + v46[18];
            uint64_t v50 = type metadata accessor for DateComponents();
            uint64_t v51 = *(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8);
            v51(v285, v50);
            v51(v45 + v46[19], v50);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v52 = v45 + v46[38];
            if (!__swift_getEnumTagSinglePayload(v52, 1, v299)) {
              v293(v52, v299);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v8 = v286;
            uint64_t v44 = v288;
            uint64_t v43 = v296;
          }
          uint64_t v53 = v44 + v43[12];
          uint64_t v54 = type metadata accessor for HotelReservation(0);
          if (!__swift_getEnumTagSinglePayload(v53, 1, v54))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v55 = v53 + *(int *)(v54 + 56);
            uint64_t v56 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v55, 1, v56)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v55, v56);
            }
            uint64_t v57 = v53 + *(int *)(v54 + 60);
            if (!__swift_getEnumTagSinglePayload(v57, 1, v56)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v57, v56);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v44 = v288;
            uint64_t v43 = v296;
          }
          uint64_t v58 = v44 + v43[13];
          uint64_t v59 = type metadata accessor for RestaurantReservation(0);
          uint64_t v10 = v299;
          if (!__swift_getEnumTagSinglePayload(v58, 1, v59))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v60 = v58 + *(int *)(v59 + 56);
            uint64_t v61 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v60, 1, v61)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v60, v61);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v10 = v299;
          }
        }
        uint64_t v62 = v6 + v8[22];
        uint64_t v63 = (int *)type metadata accessor for PreExtractedCard(0);
        if (!__swift_getEnumTagSinglePayload(v62, 1, (uint64_t)v63))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v64 = v62 + v63[10];
          if (!__swift_getEnumTagSinglePayload(v64, 1, v10)) {
            v293(v64, v10);
          }
          uint64_t v65 = v62 + v63[11];
          if (!__swift_getEnumTagSinglePayload(v65, 1, v10)) {
            v293(v65, v10);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v66 = v62 + v63[15];
          if (!__swift_getEnumTagSinglePayload(v66, 1, v10)) {
            v293(v66, v10);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v67 = v6 + v8[23];
        uint64_t v68 = type metadata accessor for PreExtractedContact(0);
        if (!__swift_getEnumTagSinglePayload(v67, 1, v68))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v69 = v67 + *(int *)(v68 + 44);
          if (!__swift_getEnumTagSinglePayload(v69, 1, v10)) {
            v293(v69, v10);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v70 = v67 + *(int *)(v68 + 56);
          if (!__swift_getEnumTagSinglePayload(v70, 1, v10)) {
            v293(v70, v10);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v71 = v6 + v8[24];
        uint64_t v72 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (!__swift_getEnumTagSinglePayload(v71, 1, (uint64_t)v72))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v73 = v71 + v72[8];
          uint64_t v74 = type metadata accessor for URL();
          if (!__swift_getEnumTagSinglePayload(v73, 1, v74)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8))(v73, v74);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v75 = v71 + v72[12];
          if (!__swift_getEnumTagSinglePayload(v75, 1, v299)) {
            v293(v75, v299);
          }
          uint64_t v76 = v71 + v72[13];
          if (!__swift_getEnumTagSinglePayload(v76, 1, v299)) {
            v293(v76, v299);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v77 = v8[25];
        goto LABEL_255;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v78 = (int *)type metadata accessor for MobileSMSDocument(0);
        uint64_t v79 = v6 + v78[10];
        uint64_t v80 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v79, 1, v80)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v79, v80);
        }
        uint64_t v81 = v6 + v78[11];
        uint64_t v82 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v81, 1, v82)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 8))(v81, v82);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v6 + v78[17]))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v291 = v82;
        swift_bridgeObjectRelease();
        uint64_t v83 = v6 + v78[19];
        uint64_t v84 = type metadata accessor for PartialExtractedAttributes(0);
        if (!__swift_getEnumTagSinglePayload(v83, 1, v84))
        {
          uint64_t v297 = v80;
          swift_bridgeObjectRelease();
          uint64_t v300 = (int *)v84;
          uint64_t v85 = v83 + *(int *)(v84 + 20);
          uint64_t v86 = type metadata accessor for RentalCarReservation(0);
          uint64_t v294 = v83;
          if (!__swift_getEnumTagSinglePayload(v85, 1, v86))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v87 = v85 + *(int *)(v86 + 140);
            if (!__swift_getEnumTagSinglePayload(v87, 1, v297)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v297 - 8) + 8))(v87, v297);
            }
            uint64_t v88 = v85 + *(int *)(v86 + 144);
            if (!__swift_getEnumTagSinglePayload(v88, 1, v297)) {
              (*(void (**)(uint64_t))(*(void *)(v297 - 8) + 8))(v88);
            }
          }
          uint64_t v89 = v83 + v300[6];
          uint64_t v90 = type metadata accessor for TicketedTransportation(0);
          if (!__swift_getEnumTagSinglePayload(v89, 1, v90))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v91 = v89 + *(int *)(v90 + 112);
            if (!__swift_getEnumTagSinglePayload(v91, 1, v297)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v297 - 8) + 8))(v91, v297);
            }
            uint64_t v92 = v89 + *(int *)(v90 + 116);
            if (!__swift_getEnumTagSinglePayload(v92, 1, v297)) {
              (*(void (**)(uint64_t))(*(void *)(v297 - 8) + 8))(v92);
            }
          }
          uint64_t v93 = v83 + v300[7];
          uint64_t v94 = (int *)type metadata accessor for TicketedShow(0);
          if (!__swift_getEnumTagSinglePayload(v93, 1, (uint64_t)v94))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v95 = v93 + v94[29];
            if (!__swift_getEnumTagSinglePayload(v95, 1, v291)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v291 - 8) + 8))(v95, v291);
            }
            swift_bridgeObjectRelease();
            uint64_t v96 = v93 + v94[31];
            if (!__swift_getEnumTagSinglePayload(v96, 1, v297)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v297 - 8) + 8))(v96, v297);
            }
            uint64_t v97 = v93 + v94[32];
            if (!__swift_getEnumTagSinglePayload(v97, 1, v297)) {
              (*(void (**)(uint64_t))(*(void *)(v297 - 8) + 8))(v97);
            }
          }
          uint64_t v98 = v83 + v300[8];
          uint64_t v99 = type metadata accessor for Appointment(0);
          if (!__swift_getEnumTagSinglePayload(v98, 1, v99))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v100 = v98 + *(int *)(v99 + 108);
            if (!__swift_getEnumTagSinglePayload(v100, 1, v297)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v297 - 8) + 8))(v100, v297);
            }
            uint64_t v101 = v98 + *(int *)(v99 + 112);
            if (!__swift_getEnumTagSinglePayload(v101, 1, v297)) {
              (*(void (**)(uint64_t))(*(void *)(v297 - 8) + 8))(v101);
            }
          }
          uint64_t v102 = v83 + v300[9];
          v103 = (int *)type metadata accessor for Party(0);
          if (!__swift_getEnumTagSinglePayload(v102, 1, (uint64_t)v103))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v104 = v102 + v103[24];
            if (!__swift_getEnumTagSinglePayload(v104, 1, v297)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v297 - 8) + 8))(v104, v297);
            }
            uint64_t v105 = v102 + v103[25];
            if (!__swift_getEnumTagSinglePayload(v105, 1, v297)) {
              (*(void (**)(uint64_t))(*(void *)(v297 - 8) + 8))(v105);
            }
            uint64_t v106 = v102 + v103[26];
            if (!__swift_getEnumTagSinglePayload(v106, 1, v291)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v291 - 8) + 8))(v106, v291);
            }
          }
          uint64_t v107 = v83 + v300[10];
          uint64_t v108 = (int *)type metadata accessor for Trip(0);
          if (!__swift_getEnumTagSinglePayload(v107, 1, (uint64_t)v108))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v109 = v107 + v108[22];
            if (!__swift_getEnumTagSinglePayload(v109, 1, v297)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v297 - 8) + 8))(v109, v297);
            }
            uint64_t v110 = v107 + v108[23];
            if (!__swift_getEnumTagSinglePayload(v110, 1, v297)) {
              (*(void (**)(uint64_t))(*(void *)(v297 - 8) + 8))(v110);
            }
            uint64_t v111 = v107 + v108[25];
            if (!__swift_getEnumTagSinglePayload(v111, 1, v291)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v291 - 8) + 8))(v111, v291);
            }
          }
          uint64_t v112 = v300;
          uint64_t v113 = v294;
          uint64_t v114 = v294 + v300[11];
          uint64_t v115 = (int *)type metadata accessor for FlightReservation(0);
          if (!__swift_getEnumTagSinglePayload(v114, 1, (uint64_t)v115))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v116 = v114 + v115[13];
            if (!__swift_getEnumTagSinglePayload(v116, 1, v291)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v291 - 8) + 8))(v116, v291);
            }
            uint64_t v289 = v78;
            uint64_t v117 = v114 + v115[14];
            if (!__swift_getEnumTagSinglePayload(v117, 1, v291)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v291 - 8) + 8))(v117, v291);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v287 = v114 + v115[18];
            uint64_t v118 = type metadata accessor for DateComponents();
            uint64_t v119 = *(void (**)(uint64_t, uint64_t))(*(void *)(v118 - 8) + 8);
            v119(v287, v118);
            v119(v114 + v115[19], v118);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v120 = v114 + v115[38];
            if (!__swift_getEnumTagSinglePayload(v120, 1, v297)) {
              (*(void (**)(uint64_t))(*(void *)(v297 - 8) + 8))(v120);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v78 = v289;
            uint64_t v113 = v294;
            uint64_t v112 = v300;
          }
          uint64_t v121 = v113 + v112[12];
          uint64_t v122 = type metadata accessor for HotelReservation(0);
          if (!__swift_getEnumTagSinglePayload(v121, 1, v122))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v123 = v121 + *(int *)(v122 + 56);
            uint64_t v124 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v123, 1, v124)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v124 - 8) + 8))(v123, v124);
            }
            uint64_t v125 = v121 + *(int *)(v122 + 60);
            if (!__swift_getEnumTagSinglePayload(v125, 1, v124)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v124 - 8) + 8))(v125, v124);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v113 = v294;
            uint64_t v112 = v300;
          }
          uint64_t v126 = v113 + v112[13];
          uint64_t v127 = type metadata accessor for RestaurantReservation(0);
          uint64_t v80 = v297;
          if (!__swift_getEnumTagSinglePayload(v126, 1, v127))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v128 = v126 + *(int *)(v127 + 56);
            uint64_t v129 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v128, 1, v129)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v129 - 8) + 8))(v128, v129);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v80 = v297;
          }
        }
        uint64_t v130 = v6 + v78[20];
        v131 = (int *)type metadata accessor for PreExtractedCard(0);
        if (!__swift_getEnumTagSinglePayload(v130, 1, (uint64_t)v131))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v132 = v130 + v131[10];
          if (!__swift_getEnumTagSinglePayload(v132, 1, v80)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v132, v80);
          }
          uint64_t v133 = v130 + v131[11];
          if (!__swift_getEnumTagSinglePayload(v133, 1, v80)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v133, v80);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v134 = v130 + v131[15];
          if (!__swift_getEnumTagSinglePayload(v134, 1, v80)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v134, v80);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v135 = v6 + v78[21];
        uint64_t v136 = type metadata accessor for PreExtractedContact(0);
        if (!__swift_getEnumTagSinglePayload(v135, 1, v136))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v137 = v135 + *(int *)(v136 + 44);
          if (!__swift_getEnumTagSinglePayload(v137, 1, v80)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v137, v80);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v138 = v135 + *(int *)(v136 + 56);
          if (!__swift_getEnumTagSinglePayload(v138, 1, v80)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v138, v80);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v139 = v6 + v78[22];
        uint64_t v140 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (!__swift_getEnumTagSinglePayload(v139, 1, (uint64_t)v140))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v141 = v139 + v140[8];
          if (!__swift_getEnumTagSinglePayload(v141, 1, v291)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v291 - 8) + 8))(v141, v291);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v142 = v139 + v140[12];
          if (!__swift_getEnumTagSinglePayload(v142, 1, v80)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v142, v80);
          }
          uint64_t v143 = v139 + v140[13];
          if (!__swift_getEnumTagSinglePayload(v143, 1, v80)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v143, v80);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v77 = v78[23];
        goto LABEL_255;
      case 2u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v144 = (int *)type metadata accessor for CalendarEvent(0);
        uint64_t v145 = v6 + v144[7];
        uint64_t v146 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v145, 1, v146)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v146 - 8) + 8))(v145, v146);
        }
        uint64_t v147 = v6 + v144[8];
        if (!__swift_getEnumTagSinglePayload(v147, 1, v146)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v146 - 8) + 8))(v147, v146);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!*(void *)(v6 + v144[13])) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_337;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v148 = (int *)type metadata accessor for Photo(0);
        uint64_t v149 = v6 + v148[11];
        uint64_t v150 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v149, 1, v150)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v150 - 8) + 8))(v149, v150);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v151 = v6 + v148[17];
        uint64_t v152 = type metadata accessor for PartialExtractedAttributes(0);
        uint64_t v301 = v150;
        if (!__swift_getEnumTagSinglePayload(v151, 1, v152))
        {
          swift_bridgeObjectRelease();
          uint64_t v298 = (int *)v152;
          uint64_t v153 = v151 + *(int *)(v152 + 20);
          uint64_t v154 = type metadata accessor for RentalCarReservation(0);
          uint64_t v295 = v151;
          if (!__swift_getEnumTagSinglePayload(v153, 1, v154))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v155 = v153 + *(int *)(v154 + 140);
            if (!__swift_getEnumTagSinglePayload(v155, 1, v301)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v301 - 8) + 8))(v155, v301);
            }
            uint64_t v156 = v153 + *(int *)(v154 + 144);
            if (!__swift_getEnumTagSinglePayload(v156, 1, v301)) {
              (*(void (**)(uint64_t))(*(void *)(v301 - 8) + 8))(v156);
            }
          }
          uint64_t v157 = v151 + v298[6];
          uint64_t v158 = type metadata accessor for TicketedTransportation(0);
          if (!__swift_getEnumTagSinglePayload(v157, 1, v158))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v159 = v157 + *(int *)(v158 + 112);
            if (!__swift_getEnumTagSinglePayload(v159, 1, v301)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v301 - 8) + 8))(v159, v301);
            }
            uint64_t v160 = v157 + *(int *)(v158 + 116);
            if (!__swift_getEnumTagSinglePayload(v160, 1, v301)) {
              (*(void (**)(uint64_t))(*(void *)(v301 - 8) + 8))(v160);
            }
          }
          uint64_t v161 = v151 + v298[7];
          long long v162 = (int *)type metadata accessor for TicketedShow(0);
          if (!__swift_getEnumTagSinglePayload(v161, 1, (uint64_t)v162))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v163 = v161 + v162[29];
            uint64_t v164 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v163, 1, v164)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v164 - 8) + 8))(v163, v164);
            }
            swift_bridgeObjectRelease();
            uint64_t v165 = v161 + v162[31];
            if (!__swift_getEnumTagSinglePayload(v165, 1, v301)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v301 - 8) + 8))(v165, v301);
            }
            uint64_t v166 = v161 + v162[32];
            uint64_t v151 = v295;
            if (!__swift_getEnumTagSinglePayload(v166, 1, v301)) {
              (*(void (**)(uint64_t))(*(void *)(v301 - 8) + 8))(v166);
            }
          }
          uint64_t v167 = v151 + v298[8];
          uint64_t v168 = type metadata accessor for Appointment(0);
          if (!__swift_getEnumTagSinglePayload(v167, 1, v168))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v169 = v167 + *(int *)(v168 + 108);
            if (!__swift_getEnumTagSinglePayload(v169, 1, v301)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v301 - 8) + 8))(v169, v301);
            }
            uint64_t v170 = v167 + *(int *)(v168 + 112);
            uint64_t v151 = v295;
            if (!__swift_getEnumTagSinglePayload(v170, 1, v301)) {
              (*(void (**)(uint64_t))(*(void *)(v301 - 8) + 8))(v170);
            }
          }
          uint64_t v171 = v151 + v298[9];
          uint64_t v172 = (int *)type metadata accessor for Party(0);
          if (!__swift_getEnumTagSinglePayload(v171, 1, (uint64_t)v172))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v173 = v171 + v172[24];
            if (!__swift_getEnumTagSinglePayload(v173, 1, v301)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v301 - 8) + 8))(v173, v301);
            }
            uint64_t v174 = v171 + v172[25];
            if (!__swift_getEnumTagSinglePayload(v174, 1, v301)) {
              (*(void (**)(uint64_t))(*(void *)(v301 - 8) + 8))(v174);
            }
            uint64_t v175 = v171 + v172[26];
            uint64_t v176 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v175, 1, v176)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v176 - 8) + 8))(v175, v176);
            }
          }
          uint64_t v177 = v295 + v298[10];
          v178 = (int *)type metadata accessor for Trip(0);
          if (!__swift_getEnumTagSinglePayload(v177, 1, (uint64_t)v178))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v179 = v177 + v178[22];
            if (!__swift_getEnumTagSinglePayload(v179, 1, v301)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v301 - 8) + 8))(v179, v301);
            }
            uint64_t v180 = v177 + v178[23];
            if (!__swift_getEnumTagSinglePayload(v180, 1, v301)) {
              (*(void (**)(uint64_t))(*(void *)(v301 - 8) + 8))(v180);
            }
            uint64_t v181 = v177 + v178[25];
            uint64_t v182 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v181, 1, v182)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v182 - 8) + 8))(v181, v182);
            }
          }
          uint64_t v183 = v295;
          uint64_t v184 = v298;
          uint64_t v185 = v295 + v298[11];
          long long v186 = (int *)type metadata accessor for FlightReservation(0);
          if (!__swift_getEnumTagSinglePayload(v185, 1, (uint64_t)v186))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v187 = v185 + v186[13];
            uint64_t v188 = type metadata accessor for URL();
            if (!__swift_getEnumTagSinglePayload(v187, 1, v188)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v188 - 8) + 8))(v187, v188);
            }
            uint64_t v292 = v148;
            uint64_t v189 = v185 + v186[14];
            if (!__swift_getEnumTagSinglePayload(v189, 1, v188)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v188 - 8) + 8))(v189, v188);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v290 = v185 + v186[18];
            uint64_t v190 = type metadata accessor for DateComponents();
            uint64_t v191 = *(void (**)(uint64_t, uint64_t))(*(void *)(v190 - 8) + 8);
            v191(v290, v190);
            v191(v185 + v186[19], v190);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v192 = v185 + v186[38];
            if (!__swift_getEnumTagSinglePayload(v192, 1, v301)) {
              (*(void (**)(uint64_t))(*(void *)(v301 - 8) + 8))(v192);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v148 = v292;
            uint64_t v183 = v295;
            uint64_t v184 = v298;
          }
          uint64_t v193 = v183 + v184[12];
          uint64_t v194 = type metadata accessor for HotelReservation(0);
          if (!__swift_getEnumTagSinglePayload(v193, 1, v194))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v195 = v193 + *(int *)(v194 + 56);
            uint64_t v196 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v195, 1, v196)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v196 - 8) + 8))(v195, v196);
            }
            uint64_t v197 = v193 + *(int *)(v194 + 60);
            if (!__swift_getEnumTagSinglePayload(v197, 1, v196)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v196 - 8) + 8))(v197, v196);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v183 = v295;
            uint64_t v184 = v298;
          }
          uint64_t v198 = v183 + v184[13];
          uint64_t v199 = type metadata accessor for RestaurantReservation(0);
          uint64_t v150 = v301;
          if (!__swift_getEnumTagSinglePayload(v198, 1, v199))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v200 = v198 + *(int *)(v199 + 56);
            uint64_t v201 = type metadata accessor for DateComponents();
            if (!__swift_getEnumTagSinglePayload(v200, 1, v201)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v201 - 8) + 8))(v200, v201);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v150 = v301;
          }
        }
        uint64_t v202 = v6 + v148[18];
        uint64_t v203 = (int *)type metadata accessor for PreExtractedCard(0);
        if (!__swift_getEnumTagSinglePayload(v202, 1, (uint64_t)v203))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v204 = v202 + v203[10];
          if (!__swift_getEnumTagSinglePayload(v204, 1, v150)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v150 - 8) + 8))(v204, v150);
          }
          uint64_t v205 = v202 + v203[11];
          if (!__swift_getEnumTagSinglePayload(v205, 1, v150)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v150 - 8) + 8))(v205, v150);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v206 = v202 + v203[15];
          if (!__swift_getEnumTagSinglePayload(v206, 1, v150)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v150 - 8) + 8))(v206, v150);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v207 = v6 + v148[19];
        uint64_t v208 = type metadata accessor for PreExtractedContact(0);
        if (!__swift_getEnumTagSinglePayload(v207, 1, v208))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v209 = v207 + *(int *)(v208 + 44);
          if (!__swift_getEnumTagSinglePayload(v209, 1, v150)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v150 - 8) + 8))(v209, v150);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v210 = v207 + *(int *)(v208 + 56);
          if (!__swift_getEnumTagSinglePayload(v210, 1, v150)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v150 - 8) + 8))(v210, v150);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v211 = v6 + v148[20];
        uint64_t v212 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (!__swift_getEnumTagSinglePayload(v211, 1, (uint64_t)v212))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v213 = v211 + v212[8];
          uint64_t v214 = type metadata accessor for URL();
          if (!__swift_getEnumTagSinglePayload(v213, 1, v214)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v214 - 8) + 8))(v213, v214);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v215 = v211 + v212[12];
          if (!__swift_getEnumTagSinglePayload(v215, 1, v301)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v301 - 8) + 8))(v215, v301);
          }
          uint64_t v216 = v211 + v212[13];
          if (!__swift_getEnumTagSinglePayload(v216, 1, v301)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v301 - 8) + 8))(v216, v301);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v77 = v148[21];
LABEL_255:
        if (!*(void *)(v6 + v77 + 8)) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_337;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v217 = (int *)type metadata accessor for NoteDocument(0);
        uint64_t v218 = v6 + v217[8];
        uint64_t v219 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v218, 1, v219)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v219 - 8) + 8))(v218, v219);
        }
        goto LABEL_276;
      case 5u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v220 = (int *)type metadata accessor for Reminder(0);
        uint64_t v221 = v6 + v220[7];
        uint64_t v222 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v221, 1, v222)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v222 - 8) + 8))(v221, v222);
        }
        uint64_t v223 = v6 + v220[8];
        if (!__swift_getEnumTagSinglePayload(v223, 1, v222)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v222 - 8) + 8))(v223, v222);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v224 = v220[12];
        goto LABEL_326;
      case 6u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v225 = type metadata accessor for PhoneHistory(0);
        uint64_t v226 = v6 + *(int *)(v225 + 40);
        uint64_t v227 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v226, 1, v227)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v227 - 8) + 8))(v226, v227);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v224 = *(int *)(v225 + 52);
        goto LABEL_326;
      case 7u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v228 = (int *)type metadata accessor for VoicemailTranscript(0);
        uint64_t v229 = v228[7];
        goto LABEL_270;
      case 8u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v224 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
        goto LABEL_326;
      case 9u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v228 = (int *)type metadata accessor for VoiceMemo(0);
        uint64_t v229 = v228[6];
LABEL_270:
        uint64_t v230 = v6 + v229;
        uint64_t v231 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v230, 1, v231)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v231 - 8) + 8))(v230, v231);
        }
        uint64_t v224 = v228[8];
        goto LABEL_326;
      case 0xAu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v217 = (int *)type metadata accessor for Safari(0);
        uint64_t v232 = v6 + v217[6];
        uint64_t v219 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v232, 1, v219)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v219 - 8) + 8))(v232, v219);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_276:
        uint64_t v233 = v217[9];
        goto LABEL_314;
      case 0xBu:
        swift_bridgeObjectRelease();

        break;
      case 0xCu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v234 = v6 + *(int *)(type metadata accessor for WalletTransaction(0) + 28);
        uint64_t v235 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v234, 1, v235)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v235 - 8) + 8))(v234, v235);
        }
        goto LABEL_280;
      case 0xDu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v236 = v6 + *(int *)(type metadata accessor for WalletPass(0) + 28);
        uint64_t v237 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v236, 1, v237)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v237 - 8) + 8))(v236, v237);
        }
        swift_bridgeObjectRelease();
        goto LABEL_337;
      case 0xEu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_337;
      case 0xFu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v238 = (int *)type metadata accessor for FlightReservation(0);
        uint64_t v239 = v6 + v238[13];
        uint64_t v240 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v239, 1, v240)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v240 - 8) + 8))(v239, v240);
        }
        uint64_t v241 = v6 + v238[14];
        if (!__swift_getEnumTagSinglePayload(v241, 1, v240)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v240 - 8) + 8))(v241, v240);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v242 = v6 + v238[18];
        uint64_t v243 = type metadata accessor for DateComponents();
        uint64_t v244 = *(void (**)(uint64_t, uint64_t))(*(void *)(v243 - 8) + 8);
        v244(v242, v243);
        v244(v6 + v238[19], v243);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v245 = v6 + v238[38];
        uint64_t v246 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v245, 1, v246)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v246 - 8) + 8))(v245, v246);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v247 = &demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]);
        goto LABEL_334;
      case 0x10u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v248 = type metadata accessor for HotelReservation(0);
        uint64_t v249 = v6 + *(int *)(v248 + 56);
        uint64_t v250 = type metadata accessor for DateComponents();
        if (!__swift_getEnumTagSinglePayload(v249, 1, v250)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v250 - 8) + 8))(v249, v250);
        }
        uint64_t v251 = v6 + *(int *)(v248 + 60);
        if (!__swift_getEnumTagSinglePayload(v251, 1, v250)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v250 - 8) + 8))(v251, v250);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_337;
      case 0x11u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v252 = v6 + *(int *)(type metadata accessor for RestaurantReservation(0) + 56);
        uint64_t v253 = type metadata accessor for DateComponents();
        if (!__swift_getEnumTagSinglePayload(v252, 1, v253)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v253 - 8) + 8))(v252, v253);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_337;
      case 0x12u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v254 = type metadata accessor for RentalCarReservation(0);
        uint64_t v255 = v6 + *(int *)(v254 + 140);
        uint64_t v219 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v255, 1, v219)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v219 - 8) + 8))(v255, v219);
        }
        uint64_t v233 = *(int *)(v254 + 144);
        goto LABEL_314;
      case 0x13u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v256 = type metadata accessor for TicketedTransportation(0);
        uint64_t v257 = v6 + *(int *)(v256 + 112);
        uint64_t v219 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v257, 1, v219)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v219 - 8) + 8))(v257, v219);
        }
        uint64_t v233 = *(int *)(v256 + 116);
        goto LABEL_314;
      case 0x14u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v258 = (int *)type metadata accessor for TicketedShow(0);
        uint64_t v259 = v6 + v258[29];
        uint64_t v260 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v259, 1, v260)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v260 - 8) + 8))(v259, v260);
        }
        swift_bridgeObjectRelease();
        uint64_t v261 = v6 + v258[31];
        uint64_t v262 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v261, 1, v262)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v262 - 8) + 8))(v261, v262);
        }
        uint64_t v263 = v6 + v258[32];
        goto LABEL_327;
      case 0x15u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v264 = type metadata accessor for Appointment(0);
        uint64_t v265 = v6 + *(int *)(v264 + 108);
        uint64_t v219 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v265, 1, v219)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v219 - 8) + 8))(v265, v219);
        }
        uint64_t v233 = *(int *)(v264 + 112);
LABEL_314:
        uint64_t v266 = v6 + v233;
        if (!__swift_getEnumTagSinglePayload(v6 + v233, 1, v219)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v219 - 8) + 8))(v266, v219);
        }
        break;
      case 0x16u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v267 = (int *)type metadata accessor for Party(0);
        uint64_t v268 = v6 + v267[24];
        uint64_t v269 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v268, 1, v269)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v269 - 8) + 8))(v268, v269);
        }
        uint64_t v270 = v6 + v267[25];
        if (!__swift_getEnumTagSinglePayload(v270, 1, v269)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v269 - 8) + 8))(v270, v269);
        }
        uint64_t v224 = v267[26];
        goto LABEL_326;
      case 0x17u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v271 = (int *)type metadata accessor for Trip(0);
        uint64_t v272 = v6 + v271[22];
        uint64_t v273 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload(v272, 1, v273)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v273 - 8) + 8))(v272, v273);
        }
        uint64_t v274 = v6 + v271[23];
        if (!__swift_getEnumTagSinglePayload(v274, 1, v273)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v273 - 8) + 8))(v274, v273);
        }
        uint64_t v224 = v271[25];
LABEL_326:
        uint64_t v263 = v6 + v224;
        uint64_t v262 = type metadata accessor for URL();
LABEL_327:
        if (!__swift_getEnumTagSinglePayload(v263, 1, v262)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v262 - 8) + 8))(v263, v262);
        }
        break;
      case 0x18u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v275 = type metadata accessor for GlobalItem();
        uint64_t v276 = v6 + *(int *)(v275 + 28);
        uint64_t v277 = type metadata accessor for GlobalDialog();
        if (!__swift_getEnumTagSinglePayload(v276, 1, v277)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v277 - 8) + 8))(v276, v277);
        }
        uint64_t v278 = (uint64_t *)(v6 + *(int *)(v275 + 32));
        unint64_t v279 = v278[1];
        if (v279 >> 60 != 15) {
          outlined consume of Data._Representation(*v278, v279);
        }
        uint64_t v247 = &demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]);
LABEL_334:
        __swift_instantiateConcreteTypeFromMangledName(v247);
        goto LABEL_337;
      case 0x19u:
LABEL_280:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_337;
      case 0x1Au:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v280 = v6 + *(int *)(type metadata accessor for Answer(0) + 36);
        uint64_t v281 = type metadata accessor for URL();
        if (!__swift_getEnumTagSinglePayload(v280, 1, v281)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v281 - 8) + 8))(v280, v281);
        }
LABEL_337:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v282 = a1 + a2[12];
  uint64_t result = __swift_getEnumTagSinglePayload(v282, 1, v5);
  if (!result)
  {
    uint64_t v284 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v284(v282, v5);
  }
  return result;
}

void *initializeWithCopy for SearchSpotlightEntity.Builder(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for IntentFile();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = v3[7];
  uint64_t v14 = v3[8];
  uint64_t v15 = (void *)((char *)a1 + v13);
  uint64_t v16 = (void *)((char *)v4 + v13);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (void *)((char *)a1 + v14);
  uint64_t v19 = (void *)((char *)v4 + v14);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = v3[9];
  uint64_t v22 = v3[10];
  uint64_t v23 = *(void **)((char *)v4 + v21);
  *(void *)((char *)a1 + v21) = v23;
  uint64_t v24 = (void *)((char *)a1 + v22);
  uint64_t v25 = (void *)((char *)v4 + v22);
  uint64_t v26 = type metadata accessor for SearchResult(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v27 = v23;
  if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v2751 = v24;
    uint64_t v2749 = v26;
    uint64_t v2750 = v3;
    type metadata accessor for SearchResultItem(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v2736 = v11;
        uint64_t v51 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v51;
        uint64_t v52 = v25[3];
        v24[2] = v25[2];
        v24[3] = v52;
        uint64_t v53 = v24;
        uint64_t v54 = v25[5];
        v53[4] = v25[4];
        v53[5] = v54;
        uint64_t v55 = v25[7];
        v53[6] = v25[6];
        v53[7] = v55;
        uint64_t v56 = v25[9];
        v53[8] = v25[8];
        v53[9] = v56;
        uint64_t v57 = type metadata accessor for MobileSMSDocument(0);
        uint64_t v58 = *(int *)(v57 + 40);
        uint64_t v2679 = (char *)v53 + v58;
        uint64_t v2694 = (char *)v25 + v58;
        v2711 = (int *)v57;
        uint64_t v59 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v2694, 1, v59))
        {
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2679, v2694, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v2679, v2694, v59);
          __swift_storeEnumTagSinglePayload((uint64_t)v2679, 0, 1, v59);
        }
        uint64_t v355 = v2711[11];
        uint64_t v356 = (char *)v2751 + v355;
        uint64_t v357 = (char *)v25 + v355;
        uint64_t v358 = type metadata accessor for URL();
        uint64_t v2688 = v358;
        uint64_t v2703 = v59;
        if (__swift_getEnumTagSinglePayload((uint64_t)v357, 1, v358))
        {
          uint64_t v359 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v356, v357, *(void *)(*(void *)(v359 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v358 - 8) + 16))(v356, v357, v358);
          __swift_storeEnumTagSinglePayload((uint64_t)v356, 0, 1, v358);
        }
        *(void *)((char *)v2751 + v2711[12]) = *(void *)((char *)v25 + v2711[12]);
        uint64_t v504 = v2711[13];
        uint64_t v505 = (void *)((char *)v2751 + v504);
        uint64_t v506 = (void *)((char *)v25 + v504);
        uint64_t v507 = v506[1];
        void *v505 = *v506;
        v505[1] = v507;
        uint64_t v508 = v2711[14];
        long long v509 = (void *)((char *)v2751 + v508);
        uint64_t v510 = (void *)((char *)v25 + v508);
        uint64_t v511 = v510[1];
        *long long v509 = *v510;
        v509[1] = v511;
        *(void *)((char *)v2751 + v2711[15]) = *(void *)((char *)v25 + v2711[15]);
        *(void *)((char *)v2751 + v2711[16]) = *(void *)((char *)v25 + v2711[16]);
        uint64_t v512 = v2711[17];
        long long v513 = (void *)((char *)v2751 + v512);
        long long v514 = (char *)v25 + v512;
        uint64_t v515 = *(void *)((char *)v25 + v512);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v515)
        {
          uint64_t v516 = *((void *)v514 + 1);
          uint64_t v517 = *((void *)v514 + 2);
          *long long v513 = v515;
          v513[1] = v516;
          uint64_t v518 = *((void *)v514 + 3);
          uint64_t v519 = *((void *)v514 + 4);
          v513[2] = v517;
          v513[3] = v518;
          v513[4] = v519;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v683 = *((_OWORD *)v514 + 1);
          *(_OWORD *)long long v513 = *(_OWORD *)v514;
          *((_OWORD *)v513 + 1) = v683;
          v513[4] = *((void *)v514 + 4);
        }
        long long v684 = v2751;
        uint64_t v685 = v2711[18];
        uint64_t v686 = (void *)((char *)v2751 + v685);
        long long v687 = (void *)((char *)v25 + v685);
        uint64_t v688 = v687[1];
        *uint64_t v686 = *v687;
        v686[1] = v688;
        uint64_t v689 = v2711[19];
        v690 = (void *)((char *)v2751 + v689);
        v691 = (void *)((char *)v25 + v689);
        uint64_t v692 = type metadata accessor for PartialExtractedAttributes(0);
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v691, 1, v692))
        {
          uint64_t v693 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v690, v691, *(void *)(*(void *)(v693 - 8) + 64));
        }
        else
        {
          uint64_t v730 = v691[1];
          void *v690 = *v691;
          v690[1] = v730;
          uint64_t v731 = *(int *)(v692 + 20);
          uint64_t v732 = (void *)((char *)v690 + v731);
          uint64_t v733 = (void *)((char *)v691 + v731);
          uint64_t v734 = type metadata accessor for RentalCarReservation(0);
          swift_bridgeObjectRetain();
          uint64_t v2643 = (int *)v692;
          v2670 = v690;
          uint64_t v2619 = v691;
          if (__swift_getEnumTagSinglePayload((uint64_t)v733, 1, v734))
          {
            uint64_t v735 = (int *)v692;
            uint64_t v736 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v732, v733, *(void *)(*(void *)(v736 - 8) + 64));
          }
          else
          {
            uint64_t v793 = v733[1];
            void *v732 = *v733;
            v732[1] = v793;
            uint64_t v794 = v733[3];
            v732[2] = v733[2];
            v732[3] = v794;
            uint64_t v795 = v733[5];
            v732[4] = v733[4];
            v732[5] = v795;
            uint64_t v796 = v733[7];
            v732[6] = v733[6];
            v732[7] = v796;
            uint64_t v797 = v733[9];
            v732[8] = v733[8];
            v732[9] = v797;
            uint64_t v798 = v733[11];
            v732[10] = v733[10];
            v732[11] = v798;
            uint64_t v799 = v733[13];
            v732[12] = v733[12];
            v732[13] = v799;
            uint64_t v800 = v733[15];
            v732[14] = v733[14];
            v732[15] = v800;
            *((unsigned char *)v732 + 128) = *((unsigned char *)v733 + 128);
            *(_WORD *)((char *)v732 + 129) = *(_WORD *)((char *)v733 + 129);
            uint64_t v801 = v733[18];
            v732[17] = v733[17];
            v732[18] = v801;
            uint64_t v802 = v733[20];
            v732[19] = v733[19];
            v732[20] = v802;
            uint64_t v803 = v733[22];
            v732[21] = v733[21];
            v732[22] = v803;
            uint64_t v2460 = v733[24];
            v732[23] = v733[23];
            v732[24] = v2460;
            uint64_t v804 = v733[26];
            v732[25] = v733[25];
            v732[26] = v804;
            uint64_t v805 = v733[28];
            v732[27] = v733[27];
            v732[28] = v805;
            uint64_t v806 = v733[30];
            v732[29] = v733[29];
            v732[30] = v806;
            uint64_t v807 = v733[32];
            v732[31] = v733[31];
            v732[32] = v807;
            uint64_t v808 = v733[34];
            v732[33] = v733[33];
            v732[34] = v808;
            uint64_t v809 = v733[36];
            v732[35] = v733[35];
            v732[36] = v809;
            uint64_t v810 = v733[38];
            v732[37] = v733[37];
            v732[38] = v810;
            uint64_t v811 = v733[40];
            v732[39] = v733[39];
            v732[40] = v811;
            uint64_t v812 = v733[42];
            v732[41] = v733[41];
            v732[42] = v812;
            uint64_t v813 = v733[44];
            v732[43] = v733[43];
            v732[44] = v813;
            uint64_t v814 = v733[46];
            v732[45] = v733[45];
            v732[46] = v814;
            uint64_t v815 = v733[47];
            *((unsigned char *)v732 + 384) = *((unsigned char *)v733 + 384);
            v732[47] = v815;
            uint64_t v816 = v733[50];
            v732[49] = v733[49];
            v732[50] = v816;
            uint64_t v817 = v733[52];
            v732[51] = v733[51];
            v732[52] = v817;
            uint64_t v818 = *(int *)(v734 + 140);
            v2581 = (char *)v732 + v818;
            uint64_t v819 = (char *)v733 + v818;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v819, 1, v2703))
            {
              uint64_t v820 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2581, v819, *(void *)(*(void *)(v820 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2581, v819, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v2581, 0, 1, v2703);
            }
            uint64_t v829 = v734;
            uint64_t v830 = *(int *)(v734 + 144);
            uint64_t v831 = (char *)v732 + v830;
            uint64_t v832 = (char *)v733 + v830;
            if (__swift_getEnumTagSinglePayload((uint64_t)v733 + v830, 1, v2703))
            {
              uint64_t v833 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v831, v832, *(void *)(*(void *)(v833 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v831, v832, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v831, 0, 1, v2703);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v732, 0, 1, v829);
            v691 = v2619;
            uint64_t v735 = v2643;
          }
          uint64_t v886 = v735[6];
          uint64_t v887 = (void *)((char *)v690 + v886);
          uint64_t v888 = (void *)((char *)v691 + v886);
          uint64_t v889 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v888, 1, v889))
          {
            uint64_t v890 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v887, v888, *(void *)(*(void *)(v890 - 8) + 64));
          }
          else
          {
            uint64_t v891 = v888[1];
            *uint64_t v887 = *v888;
            v887[1] = v891;
            uint64_t v892 = v888[3];
            v887[2] = v888[2];
            v887[3] = v892;
            uint64_t v893 = v888[5];
            v887[4] = v888[4];
            v887[5] = v893;
            uint64_t v894 = v888[7];
            v887[6] = v888[6];
            v887[7] = v894;
            uint64_t v895 = v888[9];
            v887[8] = v888[8];
            v887[9] = v895;
            uint64_t v896 = v888[11];
            v887[10] = v888[10];
            v887[11] = v896;
            uint64_t v897 = v888[13];
            v887[12] = v888[12];
            v887[13] = v897;
            uint64_t v898 = v888[15];
            v887[14] = v888[14];
            v887[15] = v898;
            *((unsigned char *)v887 + 128) = *((unsigned char *)v888 + 128);
            *(_WORD *)((char *)v887 + 129) = *(_WORD *)((char *)v888 + 129);
            uint64_t v899 = v888[18];
            v887[17] = v888[17];
            v887[18] = v899;
            uint64_t v900 = v888[20];
            v887[19] = v888[19];
            v887[20] = v900;
            uint64_t v901 = v888[22];
            v887[21] = v888[21];
            v887[22] = v901;
            uint64_t v2468 = v888[24];
            v887[23] = v888[23];
            v887[24] = v2468;
            v2553 = (void *)v888[26];
            v887[25] = v888[25];
            v887[26] = v2553;
            uint64_t v902 = v888[28];
            v887[27] = v888[27];
            v887[28] = v902;
            uint64_t v903 = v888[30];
            v887[29] = v888[29];
            v887[30] = v903;
            uint64_t v904 = v888[32];
            v887[31] = v888[31];
            v887[32] = v904;
            uint64_t v905 = v888[34];
            v887[33] = v888[33];
            v887[34] = v905;
            uint64_t v906 = v888[36];
            uint64_t v907 = v888[35];
            *((unsigned char *)v887 + 296) = *((unsigned char *)v888 + 296);
            v887[35] = v907;
            v887[36] = v906;
            uint64_t v908 = *(int *)(v889 + 112);
            v2582 = (char *)v887 + v908;
            uint64_t v909 = (char *)v888 + v908;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v909, 1, v2703))
            {
              uint64_t v910 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2582, v909, *(void *)(*(void *)(v910 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2582, v909, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v2582, 0, 1, v2703);
            }
            uint64_t v919 = v889;
            uint64_t v920 = *(int *)(v889 + 116);
            uint64_t v921 = (char *)v887 + v920;
            uint64_t v922 = (char *)v888 + v920;
            if (__swift_getEnumTagSinglePayload((uint64_t)v888 + v920, 1, v2703))
            {
              uint64_t v923 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v921, v922, *(void *)(*(void *)(v923 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v921, v922, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v921, 0, 1, v2703);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v887, 0, 1, v919);
            v691 = v2619;
            uint64_t v735 = v2643;
          }
          uint64_t v978 = v735[7];
          uint64_t v979 = (void *)((char *)v690 + v978);
          uint64_t v980 = (void *)((char *)v691 + v978);
          uint64_t v981 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v980, 1, (uint64_t)v981))
          {
            uint64_t v982 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v979, v980, *(void *)(*(void *)(v982 - 8) + 64));
          }
          else
          {
            uint64_t v983 = v980[1];
            *uint64_t v979 = *v980;
            v979[1] = v983;
            uint64_t v984 = v980[3];
            v979[2] = v980[2];
            v979[3] = v984;
            uint64_t v985 = v980[5];
            v979[4] = v980[4];
            v979[5] = v985;
            uint64_t v986 = v980[7];
            v979[6] = v980[6];
            v979[7] = v986;
            uint64_t v987 = v980[9];
            v979[8] = v980[8];
            v979[9] = v987;
            uint64_t v988 = v980[11];
            v979[10] = v980[10];
            v979[11] = v988;
            uint64_t v989 = v980[13];
            v979[12] = v980[12];
            v979[13] = v989;
            uint64_t v990 = v980[15];
            v979[14] = v980[14];
            v979[15] = v990;
            *((unsigned char *)v979 + 128) = *((unsigned char *)v980 + 128);
            *(_WORD *)((char *)v979 + 129) = *(_WORD *)((char *)v980 + 129);
            uint64_t v991 = v980[18];
            v979[17] = v980[17];
            v979[18] = v991;
            uint64_t v992 = v980[20];
            v979[19] = v980[19];
            v979[20] = v992;
            uint64_t v993 = v980[22];
            v979[21] = v980[21];
            v979[22] = v993;
            __dsta = (void *)v980[24];
            v979[23] = v980[23];
            v979[24] = __dsta;
            uint64_t v994 = v980[26];
            v979[25] = v980[25];
            v979[26] = v994;
            uint64_t v995 = v980[28];
            v979[27] = v980[27];
            v979[28] = v995;
            v2556 = (void *)v980[30];
            v979[29] = v980[29];
            v979[30] = v2556;
            uint64_t v996 = v980[32];
            v979[31] = v980[31];
            v979[32] = v996;
            uint64_t v997 = v980[34];
            v979[33] = v980[33];
            v979[34] = v997;
            uint64_t v998 = v980[36];
            uint64_t v999 = v980[35];
            *((unsigned char *)v979 + 296) = *((unsigned char *)v980 + 296);
            v979[35] = v999;
            v979[36] = v998;
            uint64_t v1000 = v980[39];
            v979[38] = v980[38];
            v979[39] = v1000;
            uint64_t v1001 = v981[29];
            v2584 = (char *)v979 + v1001;
            uint64_t v1002 = (uint64_t)v980 + v1001;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v1003 = (const void *)v1002;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1002, 1, v2688);
            uint64_t v1005 = (uint64_t)v981;
            if (EnumTagSinglePayload)
            {
              uint64_t v1006 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2584, v1003, *(void *)(*(void *)(v1006 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, const void *, uint64_t))(*(void *)(v2688 - 8) + 16))(v2584, v1003, v2688);
              __swift_storeEnumTagSinglePayload((uint64_t)v2584, 0, 1, v2688);
            }
            uint64_t v1023 = v981[30];
            uint64_t v1024 = (void *)((char *)v979 + v1023);
            uint64_t v1025 = (void *)((char *)v980 + v1023);
            uint64_t v1026 = v1025[1];
            *uint64_t v1024 = *v1025;
            v1024[1] = v1026;
            uint64_t v1027 = v981[31];
            uint64_t v1028 = (char *)v979 + v1027;
            uint64_t v1029 = (char *)v980 + v1027;
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1029, 1, v2703))
            {
              uint64_t v1030 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1028, v1029, *(void *)(*(void *)(v1030 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v1028, v1029, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v1028, 0, 1, v2703);
            }
            uint64_t v1039 = *(int *)(v1005 + 128);
            uint64_t v1040 = (char *)v979 + v1039;
            uint64_t v1041 = (char *)v980 + v1039;
            if (__swift_getEnumTagSinglePayload((uint64_t)v980 + v1039, 1, v2703))
            {
              uint64_t v1042 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1040, v1041, *(void *)(*(void *)(v1042 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v1040, v1041, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v1040, 0, 1, v2703);
            }
            v690 = v2670;
            __swift_storeEnumTagSinglePayload((uint64_t)v979, 0, 1, v1005);
            v691 = v2619;
            uint64_t v735 = v2643;
          }
          uint64_t v1095 = v735[8];
          uint64_t v1096 = (void *)((char *)v690 + v1095);
          uint64_t v1097 = (void *)((char *)v691 + v1095);
          uint64_t v1098 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1097, 1, v1098))
          {
            uint64_t v1099 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v1096, v1097, *(void *)(*(void *)(v1099 - 8) + 64));
          }
          else
          {
            uint64_t v1100 = v1097[1];
            *uint64_t v1096 = *v1097;
            v1096[1] = v1100;
            uint64_t v1101 = v1097[3];
            v1096[2] = v1097[2];
            v1096[3] = v1101;
            uint64_t v1102 = v1097[5];
            v1096[4] = v1097[4];
            v1096[5] = v1102;
            uint64_t v1103 = v1097[7];
            v1096[6] = v1097[6];
            v1096[7] = v1103;
            uint64_t v1104 = v1097[9];
            v1096[8] = v1097[8];
            v1096[9] = v1104;
            uint64_t v1105 = v1097[11];
            v1096[10] = v1097[10];
            v1096[11] = v1105;
            uint64_t v1106 = v1097[13];
            v1096[12] = v1097[12];
            v1096[13] = v1106;
            uint64_t v1107 = v1097[15];
            v1096[14] = v1097[14];
            v1096[15] = v1107;
            *((unsigned char *)v1096 + 128) = *((unsigned char *)v1097 + 128);
            *(_WORD *)((char *)v1096 + 129) = *(_WORD *)((char *)v1097 + 129);
            uint64_t v1108 = v1097[18];
            v1096[17] = v1097[17];
            v1096[18] = v1108;
            uint64_t v1109 = v1097[20];
            v1096[19] = v1097[19];
            v1096[20] = v1109;
            uint64_t v1110 = v1097[22];
            v1096[21] = v1097[21];
            v1096[22] = v1110;
            uint64_t v2478 = v1097[24];
            v1096[23] = v1097[23];
            v1096[24] = v2478;
            uint64_t v1111 = v1097[26];
            v1096[25] = v1097[25];
            v1096[26] = v1111;
            uint64_t v1112 = v1097[28];
            v1096[27] = v1097[27];
            v1096[28] = v1112;
            uint64_t v1113 = v1097[30];
            v1096[29] = v1097[29];
            v1096[30] = v1113;
            uint64_t v1114 = v1097[32];
            v1096[31] = v1097[31];
            v1096[32] = v1114;
            uint64_t v1116 = v1097[33];
            uint64_t v1115 = v1097[34];
            *((unsigned char *)v1096 + 280) = *((unsigned char *)v1097 + 280);
            v1096[33] = v1116;
            v1096[34] = v1115;
            uint64_t v1117 = v1097[37];
            v1096[36] = v1097[36];
            v1096[37] = v1117;
            uint64_t v1118 = *(int *)(v1098 + 108);
            v2585 = (char *)v1096 + v1118;
            uint64_t v1119 = (char *)v1097 + v1118;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1119, 1, v2703))
            {
              uint64_t v1120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2585, v1119, *(void *)(*(void *)(v1120 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2585, v1119, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v2585, 0, 1, v2703);
            }
            uint64_t v1129 = v1098;
            uint64_t v1130 = *(int *)(v1098 + 112);
            uint64_t v1131 = (char *)v1096 + v1130;
            v1132 = (char *)v1097 + v1130;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1097 + v1130, 1, v2703))
            {
              uint64_t v1133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1131, v1132, *(void *)(*(void *)(v1133 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v1131, v1132, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v1131, 0, 1, v2703);
            }
            v690 = v2670;
            __swift_storeEnumTagSinglePayload((uint64_t)v1096, 0, 1, v1129);
            v691 = v2619;
            uint64_t v735 = v2643;
          }
          uint64_t v1179 = v735[9];
          uint64_t v1180 = (void *)((char *)v690 + v1179);
          uint64_t v1181 = (void *)((char *)v691 + v1179);
          uint64_t v1182 = type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1181, 1, v1182))
          {
            uint64_t v1183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v1180, v1181, *(void *)(*(void *)(v1183 - 8) + 64));
          }
          else
          {
            uint64_t v1184 = v1181[1];
            void *v1180 = *v1181;
            v1180[1] = v1184;
            uint64_t v1185 = v1181[3];
            v1180[2] = v1181[2];
            v1180[3] = v1185;
            uint64_t v1186 = v1181[5];
            v1180[4] = v1181[4];
            v1180[5] = v1186;
            uint64_t v1187 = v1181[7];
            v1180[6] = v1181[6];
            v1180[7] = v1187;
            uint64_t v1188 = v1181[9];
            v1180[8] = v1181[8];
            v1180[9] = v1188;
            uint64_t v1189 = v1181[11];
            v1180[10] = v1181[10];
            v1180[11] = v1189;
            uint64_t v1190 = v1181[13];
            v1180[12] = v1181[12];
            v1180[13] = v1190;
            uint64_t v1191 = v1181[15];
            v1180[14] = v1181[14];
            v1180[15] = v1191;
            *((unsigned char *)v1180 + 128) = *((unsigned char *)v1181 + 128);
            *(_WORD *)((char *)v1180 + 129) = *(_WORD *)((char *)v1181 + 129);
            uint64_t v1192 = v1181[18];
            v1180[17] = v1181[17];
            v1180[18] = v1192;
            uint64_t v1193 = v1181[20];
            v1180[19] = v1181[19];
            v1180[20] = v1193;
            uint64_t v1194 = v1181[22];
            v1180[21] = v1181[21];
            v1180[22] = v1194;
            uint64_t v1195 = v1181[24];
            v1180[23] = v1181[23];
            v1180[24] = v1195;
            uint64_t v1196 = v1181[26];
            v1180[25] = v1181[25];
            v1180[26] = v1196;
            uint64_t v1197 = v1181[28];
            v1180[27] = v1181[27];
            v1180[28] = v1197;
            uint64_t v1198 = v1181[30];
            v1180[29] = v1181[29];
            v1180[30] = v1198;
            v1180[31] = v1181[31];
            uint64_t v1199 = *(int *)(v1182 + 96);
            v2586 = (char *)v1180 + v1199;
            uint64_t v2475 = (char *)v1181 + v1199;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v1200 = v1182;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2475, 1, v2703))
            {
              uint64_t v1201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2586, v2475, *(void *)(*(void *)(v1201 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2586, v2475, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v2586, 0, 1, v2703);
            }
            uint64_t v1210 = *(int *)(v1182 + 100);
            v1211 = (char *)v1180 + v1210;
            v1212 = (char *)v1181 + v1210;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1181 + v1210, 1, v2703))
            {
              uint64_t v1213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1211, v1212, *(void *)(*(void *)(v1213 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v1211, v1212, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v1211, 0, 1, v2703);
            }
            uint64_t v1224 = *(int *)(v1200 + 104);
            v1225 = (char *)v1180 + v1224;
            uint64_t v1226 = (char *)v1181 + v1224;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1181 + v1224, 1, v2688))
            {
              uint64_t v1227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1225, v1226, *(void *)(*(void *)(v1227 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2688 - 8) + 16))(v1225, v1226, v2688);
              __swift_storeEnumTagSinglePayload((uint64_t)v1225, 0, 1, v2688);
            }
            v690 = v2670;
            __swift_storeEnumTagSinglePayload((uint64_t)v1180, 0, 1, v1200);
            v691 = v2619;
            uint64_t v735 = v2643;
          }
          uint64_t v1269 = v735[10];
          uint64_t v1270 = (void *)((char *)v690 + v1269);
          v1271 = (void *)((char *)v691 + v1269);
          uint64_t v1272 = type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1271, 1, v1272))
          {
            uint64_t v1273 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v1270, v1271, *(void *)(*(void *)(v1273 - 8) + 64));
          }
          else
          {
            uint64_t v1274 = v1271[1];
            *uint64_t v1270 = *v1271;
            v1270[1] = v1274;
            uint64_t v1275 = v1271[3];
            v1270[2] = v1271[2];
            v1270[3] = v1275;
            uint64_t v1276 = v1271[5];
            v1270[4] = v1271[4];
            v1270[5] = v1276;
            uint64_t v1277 = v1271[7];
            v1270[6] = v1271[6];
            v1270[7] = v1277;
            uint64_t v1278 = v1271[9];
            v1270[8] = v1271[8];
            v1270[9] = v1278;
            uint64_t v1279 = v1271[11];
            v1270[10] = v1271[10];
            v1270[11] = v1279;
            uint64_t v1280 = v1271[13];
            v1270[12] = v1271[12];
            v1270[13] = v1280;
            uint64_t v1281 = v1271[15];
            v1270[14] = v1271[14];
            v1270[15] = v1281;
            *((unsigned char *)v1270 + 128) = *((unsigned char *)v1271 + 128);
            *(_WORD *)((char *)v1270 + 129) = *(_WORD *)((char *)v1271 + 129);
            uint64_t v1282 = v1271[18];
            v1270[17] = v1271[17];
            v1270[18] = v1282;
            uint64_t v1283 = v1271[20];
            v1270[19] = v1271[19];
            v1270[20] = v1283;
            uint64_t v1284 = v1271[22];
            v1270[21] = v1271[21];
            v1270[22] = v1284;
            uint64_t v1285 = v1271[24];
            v1270[23] = v1271[23];
            v1270[24] = v1285;
            uint64_t v1286 = v1271[26];
            v1270[25] = v1271[25];
            v1270[26] = v1286;
            v1270[27] = v1271[27];
            uint64_t v1287 = *(int *)(v1272 + 88);
            v2587 = (char *)v1270 + v1287;
            uint64_t v2479 = (char *)v1271 + v1287;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v1288 = v1272;
            if (__swift_getEnumTagSinglePayload((uint64_t)v2479, 1, v2703))
            {
              uint64_t v1289 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2587, v2479, *(void *)(*(void *)(v1289 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2587, v2479, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v2587, 0, 1, v2703);
            }
            uint64_t v1298 = *(int *)(v1272 + 92);
            v1299 = (char *)v1270 + v1298;
            uint64_t v1300 = (char *)v1271 + v1298;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1271 + v1298, 1, v2703))
            {
              uint64_t v1301 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1299, v1300, *(void *)(*(void *)(v1301 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v1299, v1300, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v1299, 0, 1, v2703);
            }
            uint64_t v1318 = *(int *)(v1288 + 96);
            uint64_t v1319 = (char *)v1270 + v1318;
            uint64_t v1320 = (char *)v1271 + v1318;
            *(void *)uint64_t v1319 = *(void *)v1320;
            v1319[8] = v1320[8];
            uint64_t v1321 = *(int *)(v1288 + 100);
            v1322 = (char *)v1270 + v1321;
            v1323 = (char *)v1271 + v1321;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1271 + v1321, 1, v2688))
            {
              uint64_t v1324 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1322, v1323, *(void *)(*(void *)(v1324 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2688 - 8) + 16))(v1322, v1323, v2688);
              __swift_storeEnumTagSinglePayload((uint64_t)v1322, 0, 1, v2688);
            }
            v690 = v2670;
            __swift_storeEnumTagSinglePayload((uint64_t)v1270, 0, 1, v1288);
            v691 = v2619;
            uint64_t v735 = v2643;
          }
          uint64_t v1355 = v735[11];
          uint64_t v1356 = (void *)((char *)v690 + v1355);
          v1357 = (void *)((char *)v691 + v1355);
          uint64_t v1358 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1357, 1, (uint64_t)v1358))
          {
            uint64_t v1359 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v1356, v1357, *(void *)(*(void *)(v1359 - 8) + 64));
          }
          else
          {
            uint64_t v1360 = v1357[1];
            *uint64_t v1356 = *v1357;
            v1356[1] = v1360;
            uint64_t v1361 = v1357[3];
            v1356[2] = v1357[2];
            v1356[3] = v1361;
            uint64_t v1362 = v1357[5];
            v1356[4] = v1357[4];
            v1356[5] = v1362;
            uint64_t v1363 = v1357[7];
            v1356[6] = v1357[6];
            v1356[7] = v1363;
            uint64_t v1364 = v1357[9];
            v1356[8] = v1357[8];
            v1356[9] = v1364;
            uint64_t v1365 = v1357[11];
            v1356[10] = v1357[10];
            v1356[11] = v1365;
            *((unsigned char *)v1356 + 96) = *((unsigned char *)v1357 + 96);
            uint64_t v1366 = v1357[14];
            v1356[13] = v1357[13];
            v1356[14] = v1366;
            uint64_t v1367 = v1358[13];
            v2589 = (char *)v1356 + v1367;
            uint64_t v1368 = (char *)v1357 + v1367;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1368, 1, v2688))
            {
              uint64_t v1369 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2589, v1368, *(void *)(*(void *)(v1369 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2688 - 8) + 16))(v2589, v1368, v2688);
              __swift_storeEnumTagSinglePayload((uint64_t)v2589, 0, 1, v2688);
            }
            uint64_t v1378 = v1358[14];
            v1379 = (char *)v1356 + v1378;
            v1380 = (char *)v1357 + v1378;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1357 + v1378, 1, v2688))
            {
              uint64_t v1381 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1379, v1380, *(void *)(*(void *)(v1381 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2688 - 8) + 16))(v1379, v1380, v2688);
              __swift_storeEnumTagSinglePayload((uint64_t)v1379, 0, 1, v2688);
            }
            uint64_t v1520 = v1358[15];
            v1521 = (void *)((char *)v1356 + v1520);
            uint64_t v1522 = (void *)((char *)v1357 + v1520);
            v2592 = (void *)v1522[1];
            void *v1521 = *v1522;
            v1521[1] = v2592;
            uint64_t v1523 = v1358[16];
            v1524 = (void *)((char *)v1356 + v1523);
            v1525 = (void *)((char *)v1357 + v1523);
            v2565 = (void *)v1525[1];
            void *v1524 = *v1525;
            v1524[1] = v2565;
            uint64_t v1526 = v1358[17];
            v1527 = (void *)((char *)v1356 + v1526);
            v1528 = (void *)((char *)v1357 + v1526);
            uint64_t v1529 = v1528[1];
            void *v1527 = *v1528;
            v1527[1] = v1529;
            uint64_t v1530 = v1358[18];
            uint64_t v2528 = (char *)v1357 + v1530;
            v2543 = (char *)v1356 + v1530;
            uint64_t v1531 = type metadata accessor for DateComponents();
            uint64_t v1532 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1531 - 8) + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1532(v2543, v2528, v1531);
            v1532((char *)v1356 + v1358[19], (char *)v1357 + v1358[19], v1531);
            uint64_t v1533 = v1358[20];
            uint64_t v1534 = (void *)((char *)v1356 + v1533);
            v1535 = (void *)((char *)v1357 + v1533);
            uint64_t v1536 = v1535[1];
            *uint64_t v1534 = *v1535;
            v1534[1] = v1536;
            uint64_t v1537 = v1358[21];
            v1538 = (void *)((char *)v1356 + v1537);
            uint64_t v1539 = (void *)((char *)v1357 + v1537);
            uint64_t v2529 = v1539[1];
            void *v1538 = *v1539;
            v1538[1] = v2529;
            uint64_t v1540 = v1358[22];
            v1541 = (void *)((char *)v1356 + v1540);
            v1542 = (void *)((char *)v1357 + v1540);
            v2593 = (void *)v1542[1];
            void *v1541 = *v1542;
            v1541[1] = v2593;
            uint64_t v1543 = v1358[23];
            v1544 = (void *)((char *)v1356 + v1543);
            v1545 = (void *)((char *)v1357 + v1543);
            v2566 = (void *)v1545[1];
            void *v1544 = *v1545;
            v1544[1] = v2566;
            uint64_t v1546 = v1358[24];
            v1547 = (void *)((char *)v1356 + v1546);
            v1548 = (void *)((char *)v1357 + v1546);
            v2544 = (void *)v1548[1];
            void *v1547 = *v1548;
            v1547[1] = v2544;
            uint64_t v1549 = v1358[25];
            v1550 = (void *)((char *)v1356 + v1549);
            v1551 = (void *)((char *)v1357 + v1549);
            v2520 = (void *)v1551[1];
            void *v1550 = *v1551;
            v1550[1] = v2520;
            uint64_t v1552 = v1358[26];
            v1553 = (void *)((char *)v1356 + v1552);
            v1554 = (void *)((char *)v1357 + v1552);
            uint64_t v2513 = v1554[1];
            void *v1553 = *v1554;
            v1553[1] = v2513;
            uint64_t v1555 = v1358[27];
            v1556 = (void *)((char *)v1356 + v1555);
            v1557 = (void *)((char *)v1357 + v1555);
            v2506 = (void *)v1557[1];
            void *v1556 = *v1557;
            v1556[1] = v2506;
            uint64_t v1558 = v1358[28];
            v1559 = (void *)((char *)v1356 + v1558);
            v1560 = (void *)((char *)v1357 + v1558);
            v2500 = (void *)v1560[1];
            void *v1559 = *v1560;
            v1559[1] = v2500;
            uint64_t v1561 = v1358[29];
            v1562 = (void *)((char *)v1356 + v1561);
            v1563 = (void *)((char *)v1357 + v1561);
            uint64_t v2488 = (void *)v1563[1];
            void *v1562 = *v1563;
            v1562[1] = v2488;
            uint64_t v1564 = v1358[30];
            v1565 = (void *)((char *)v1356 + v1564);
            v1566 = (void *)((char *)v1357 + v1564);
            uint64_t v2484 = v1566[1];
            void *v1565 = *v1566;
            v1565[1] = v2484;
            uint64_t v1567 = v1358[31];
            v1568 = (void *)((char *)v1356 + v1567);
            v1569 = (void *)((char *)v1357 + v1567);
            uint64_t v2481 = v1569[1];
            void *v1568 = *v1569;
            v1568[1] = v2481;
            uint64_t v1570 = v1358[32];
            v1571 = (void *)((char *)v1356 + v1570);
            v1572 = (void *)((char *)v1357 + v1570);
            uint64_t v2473 = v1572[1];
            void *v1571 = *v1572;
            v1571[1] = v2473;
            *(void *)((char *)v1356 + v1358[33]) = *(void *)((char *)v1357 + v1358[33]);
            *(void *)((char *)v1356 + v1358[34]) = *(void *)((char *)v1357 + v1358[34]);
            uint64_t v1573 = v1358[35];
            v1574 = (void *)((char *)v1356 + v1573);
            v1575 = (void *)((char *)v1357 + v1573);
            uint64_t v1576 = v1575[1];
            void *v1574 = *v1575;
            v1574[1] = v1576;
            uint64_t v1577 = v1358[36];
            v1578 = (void *)((char *)v1356 + v1577);
            uint64_t v1579 = (void *)((char *)v1357 + v1577);
            uint64_t v1580 = v1579[1];
            void *v1578 = *v1579;
            v1578[1] = v1580;
            uint64_t v1581 = v1358[37];
            v1582 = (void *)((char *)v1356 + v1581);
            uint64_t v1583 = (void *)((char *)v1357 + v1581);
            uint64_t v1584 = v1583[1];
            void *v1582 = *v1583;
            v1582[1] = v1584;
            uint64_t v1585 = v1358[38];
            v2494 = (char *)v1356 + v1585;
            v1586 = (char *)v1357 + v1585;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1586, 1, v2703))
            {
              uint64_t v1587 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2494, v1586, *(void *)(*(void *)(v1587 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2494, v1586, v2703);
              __swift_storeEnumTagSinglePayload((uint64_t)v2494, 0, 1, v2703);
            }
            uint64_t v1685 = v1358[39];
            v1686 = (void *)((char *)v1356 + v1685);
            uint64_t v1687 = (void *)((char *)v1357 + v1685);
            uint64_t v1688 = v1687[1];
            void *v1686 = *v1687;
            v1686[1] = v1688;
            uint64_t v1689 = v1358[40];
            v1690 = (void *)((char *)v1356 + v1689);
            uint64_t v1691 = (void *)((char *)v1357 + v1689);
            uint64_t v1692 = v1691[1];
            void *v1690 = *v1691;
            v1690[1] = v1692;
            uint64_t v1693 = v1358[41];
            v1694 = (char *)v1356 + v1693;
            uint64_t v1695 = (char *)v1357 + v1693;
            v1694[8] = v1695[8];
            *(void *)v1694 = *(void *)v1695;
            uint64_t v1696 = v1358[42];
            v1697 = (void *)((char *)v1356 + v1696);
            uint64_t v1698 = (void *)((char *)v1357 + v1696);
            v2595 = (void *)v1698[1];
            void *v1697 = *v1698;
            v1697[1] = v2595;
            uint64_t v1699 = v1358[43];
            v1700 = (char *)v1356 + v1699;
            uint64_t v1701 = (char *)v1357 + v1699;
            *(_OWORD *)v1700 = *(_OWORD *)v1701;
            *(void *)(v1700 + 13) = *(void *)(v1701 + 13);
            uint64_t v1702 = v1358[44];
            v1703 = (void *)((char *)v1356 + v1702);
            v1704 = (void *)((char *)v1357 + v1702);
            uint64_t v1705 = v1704[1];
            void *v1703 = *v1704;
            v1703[1] = v1705;
            uint64_t v1706 = v1358[45];
            v1707 = (void *)((char *)v1356 + v1706);
            uint64_t v1708 = (void *)((char *)v1357 + v1706);
            uint64_t v1709 = v1708[1];
            void *v1707 = *v1708;
            v1707[1] = v1709;
            uint64_t v1710 = v1358[46];
            v1711 = (void *)((char *)v1356 + v1710);
            uint64_t v1712 = (void *)((char *)v1357 + v1710);
            uint64_t v1713 = v1712[1];
            void *v1711 = *v1712;
            v1711[1] = v1713;
            uint64_t v1714 = v1358[47];
            v1715 = (void *)((char *)v1356 + v1714);
            uint64_t v1716 = (void *)((char *)v1357 + v1714);
            uint64_t v1717 = v1716[1];
            void *v1715 = *v1716;
            v1715[1] = v1717;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1356, 0, 1, (uint64_t)v1358);
            uint64_t v735 = v2643;
            v690 = v2670;
            v691 = v2619;
          }
          uint64_t v1718 = v735[12];
          v1719 = (void *)((char *)v690 + v1718);
          uint64_t v1720 = (void *)((char *)v691 + v1718);
          uint64_t v1721 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1720, 1, (uint64_t)v1721))
          {
            uint64_t v1722 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v1719, v1720, *(void *)(*(void *)(v1722 - 8) + 64));
          }
          else
          {
            uint64_t v1723 = v1720[1];
            void *v1719 = *v1720;
            v1719[1] = v1723;
            uint64_t v1724 = v1720[3];
            v1719[2] = v1720[2];
            v1719[3] = v1724;
            uint64_t v1725 = v1720[5];
            v1719[4] = v1720[4];
            v1719[5] = v1725;
            uint64_t v1726 = v1720[7];
            v1719[6] = v1720[6];
            v1719[7] = v1726;
            uint64_t v1727 = v1720[9];
            v1719[8] = v1720[8];
            v1719[9] = v1727;
            uint64_t v1728 = v1720[11];
            v1719[10] = v1720[10];
            v1719[11] = v1728;
            *((unsigned char *)v1719 + 96) = *((unsigned char *)v1720 + 96);
            uint64_t v1729 = v1720[14];
            v1719[13] = v1720[13];
            v1719[14] = v1729;
            uint64_t v1730 = v1720[16];
            v1719[15] = v1720[15];
            v1719[16] = v1730;
            uint64_t v1731 = v1721[14];
            v2596 = (char *)v1719 + v1731;
            uint64_t v1732 = (char *)v1720 + v1731;
            uint64_t v1733 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1732, 1, v1733))
            {
              uint64_t v1734 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2596, v1732, *(void *)(*(void *)(v1734 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1733 - 8) + 16))(v2596, v1732, v1733);
              __swift_storeEnumTagSinglePayload((uint64_t)v2596, 0, 1, v1733);
            }
            uint64_t v1743 = v1721[15];
            uint64_t v1744 = (char *)v1719 + v1743;
            uint64_t v1745 = (char *)v1720 + v1743;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1720 + v1743, 1, v1733))
            {
              uint64_t v1746 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1744, v1745, *(void *)(*(void *)(v1746 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1733 - 8) + 16))(v1744, v1745, v1733);
              __swift_storeEnumTagSinglePayload((uint64_t)v1744, 0, 1, v1733);
            }
            uint64_t v1860 = v1721[16];
            v1861 = (void *)((char *)v1719 + v1860);
            uint64_t v1862 = (void *)((char *)v1720 + v1860);
            uint64_t v1863 = v1862[1];
            void *v1861 = *v1862;
            v1861[1] = v1863;
            uint64_t v1864 = v1721[17];
            v1865 = (void *)((char *)v1719 + v1864);
            v1866 = (void *)((char *)v1720 + v1864);
            uint64_t v1867 = v1866[1];
            void *v1865 = *v1866;
            v1865[1] = v1867;
            uint64_t v1868 = v1721[18];
            v1869 = (void *)((char *)v1719 + v1868);
            v1870 = (void *)((char *)v1720 + v1868);
            uint64_t v2599 = (void *)v1870[1];
            void *v1869 = *v1870;
            v1869[1] = v2599;
            uint64_t v1871 = v1721[19];
            v1872 = (void *)((char *)v1719 + v1871);
            v1873 = (void *)((char *)v1720 + v1871);
            v2572 = (void *)v1873[1];
            void *v1872 = *v1873;
            v1872[1] = v2572;
            uint64_t v1874 = v1721[20];
            v1875 = (void *)((char *)v1719 + v1874);
            v1876 = (void *)((char *)v1720 + v1874);
            v2522 = (void *)v1876[1];
            void *v1875 = *v1876;
            v1875[1] = v2522;
            *(void *)((char *)v1719 + v1721[21]) = *(void *)((char *)v1720 + v1721[21]);
            *(void *)((char *)v1719 + v1721[22]) = *(void *)((char *)v1720 + v1721[22]);
            uint64_t v1877 = v1721[23];
            v1878 = (char *)v1719 + v1877;
            v1879 = (char *)v1720 + v1877;
            *(void *)v1878 = *(void *)v1879;
            v1878[8] = v1879[8];
            uint64_t v1880 = v1721[24];
            v1881 = (char *)v1719 + v1880;
            v1882 = (char *)v1720 + v1880;
            *(void *)v1881 = *(void *)v1882;
            v1881[8] = v1882[8];
            uint64_t v1883 = v1721[25];
            v1884 = (void *)((char *)v1719 + v1883);
            v1885 = (void *)((char *)v1720 + v1883);
            uint64_t v2515 = v1885[1];
            void *v1884 = *v1885;
            v1884[1] = v2515;
            uint64_t v1886 = v1721[26];
            v1887 = (void *)((char *)v1719 + v1886);
            v1888 = (void *)((char *)v1720 + v1886);
            uint64_t v1889 = v1888[1];
            void *v1887 = *v1888;
            v1887[1] = v1889;
            uint64_t v1890 = v1721[27];
            v1891 = (void *)((char *)v1719 + v1890);
            v1892 = (void *)((char *)v1720 + v1890);
            uint64_t v1893 = v1892[1];
            void *v1891 = *v1892;
            v1891[1] = v1893;
            uint64_t v1894 = v1721[28];
            v1895 = (void *)((char *)v1719 + v1894);
            v1896 = (void *)((char *)v1720 + v1894);
            uint64_t v1897 = v1896[1];
            void *v1895 = *v1896;
            v1895[1] = v1897;
            uint64_t v1898 = v1721[29];
            v1899 = (char *)v1719 + v1898;
            v1900 = (char *)v1720 + v1898;
            *(void *)v1899 = *(void *)v1900;
            v1899[8] = v1900[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1719, 0, 1, (uint64_t)v1721);
            uint64_t v735 = v2643;
            v690 = v2670;
            v691 = v2619;
          }
          uint64_t v1901 = v735[13];
          uint64_t v1902 = (void *)((char *)v690 + v1901);
          v1903 = (void *)((char *)v691 + v1901);
          v1904 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1903, 1, (uint64_t)v1904))
          {
            uint64_t v1905 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v1902, v1903, *(void *)(*(void *)(v1905 - 8) + 64));
          }
          else
          {
            uint64_t v1906 = v1903[1];
            *uint64_t v1902 = *v1903;
            v1902[1] = v1906;
            uint64_t v1907 = v1903[3];
            v1902[2] = v1903[2];
            v1902[3] = v1907;
            uint64_t v1908 = v1903[5];
            v1902[4] = v1903[4];
            v1902[5] = v1908;
            uint64_t v1909 = v1903[7];
            v1902[6] = v1903[6];
            v1902[7] = v1909;
            uint64_t v1910 = v1903[9];
            v1902[8] = v1903[8];
            v1902[9] = v1910;
            uint64_t v1911 = v1903[11];
            v1902[10] = v1903[10];
            v1902[11] = v1911;
            *((unsigned char *)v1902 + 96) = *((unsigned char *)v1903 + 96);
            uint64_t v1912 = v1903[14];
            v1902[13] = v1903[13];
            v1902[14] = v1912;
            uint64_t v1913 = v1903[16];
            v1902[15] = v1903[15];
            v1902[16] = v1913;
            uint64_t v1914 = v1904[14];
            uint64_t v2621 = (char *)v1902 + v1914;
            v2509 = (char *)v1903 + v1914;
            uint64_t v1915 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2509, 1, v1915))
            {
              uint64_t v1916 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2621, v2509, *(void *)(*(void *)(v1916 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1915 - 8) + 16))(v2621, v2509, v1915);
              __swift_storeEnumTagSinglePayload((uint64_t)v2621, 0, 1, v1915);
            }
            uint64_t v2272 = v1904[15];
            uint64_t v2273 = (void *)((char *)v1902 + v2272);
            uint64_t v2274 = (void *)((char *)v1903 + v2272);
            uint64_t v2275 = v2274[1];
            *uint64_t v2273 = *v2274;
            v2273[1] = v2275;
            uint64_t v2276 = v1904[16];
            v2277 = (void *)((char *)v1902 + v2276);
            uint64_t v2278 = (void *)((char *)v1903 + v2276);
            uint64_t v2629 = v2278[1];
            void *v2277 = *v2278;
            v2277[1] = v2629;
            uint64_t v2279 = v1904[17];
            v2280 = (void *)((char *)v1902 + v2279);
            uint64_t v2281 = (void *)((char *)v1903 + v2279);
            v2605 = (void *)v2281[1];
            void *v2280 = *v2281;
            v2280[1] = v2605;
            uint64_t v2282 = v1904[18];
            uint64_t v2283 = (void *)((char *)v1902 + v2282);
            v2284 = (void *)((char *)v1903 + v2282);
            v2577 = (void *)v2284[1];
            *uint64_t v2283 = *v2284;
            v2283[1] = v2577;
            uint64_t v2285 = v1904[19];
            uint64_t v2286 = (void *)((char *)v1902 + v2285);
            v2287 = (void *)((char *)v1903 + v2285);
            uint64_t v2288 = v2287[1];
            *uint64_t v2286 = *v2287;
            v2286[1] = v2288;
            *(void *)((char *)v1902 + v1904[20]) = *(void *)((char *)v1903 + v1904[20]);
            uint64_t v2289 = v1904[21];
            v2290 = (void *)((char *)v1902 + v2289);
            uint64_t v2291 = (void *)((char *)v1903 + v2289);
            uint64_t v2292 = v2291[1];
            void *v2290 = *v2291;
            v2290[1] = v2292;
            uint64_t v2293 = v1904[22];
            v2294 = (void *)((char *)v1902 + v2293);
            uint64_t v2295 = (void *)((char *)v1903 + v2293);
            uint64_t v2296 = v2295[1];
            void *v2294 = *v2295;
            v2294[1] = v2296;
            uint64_t v2297 = v1904[23];
            v2298 = (void *)((char *)v1902 + v2297);
            uint64_t v2299 = (void *)((char *)v1903 + v2297);
            uint64_t v2300 = v2299[1];
            void *v2298 = *v2299;
            v2298[1] = v2300;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1902, 0, 1, (uint64_t)v1904);
            uint64_t v735 = v2643;
            v690 = v2670;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v690, 0, 1, (uint64_t)v735);
          long long v684 = v2751;
        }
        uint64_t v2301 = v2711[20];
        uint64_t v2302 = (void *)((char *)v684 + v2301);
        v2303 = (void *)((char *)v25 + v2301);
        uint64_t v2304 = type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2303, 1, v2304))
        {
          uint64_t v2305 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v2302, v2303, *(void *)(*(void *)(v2305 - 8) + 64));
        }
        else
        {
          uint64_t v2306 = v2303[1];
          *uint64_t v2302 = *v2303;
          v2302[1] = v2306;
          uint64_t v2307 = v2303[3];
          v2302[2] = v2303[2];
          v2302[3] = v2307;
          uint64_t v2308 = v2303[5];
          v2302[4] = v2303[4];
          v2302[5] = v2308;
          uint64_t v2309 = v2303[7];
          v2302[6] = v2303[6];
          v2302[7] = v2309;
          uint64_t v2310 = (int *)v2304;
          uint64_t v2311 = v2303[9];
          v2302[8] = v2303[8];
          v2302[9] = v2311;
          uint64_t v2312 = v2303[11];
          v2302[10] = v2303[10];
          v2302[11] = v2312;
          uint64_t v2674 = v2310;
          uint64_t v2313 = v2310[10];
          uint64_t v2652 = (char *)v2302 + v2313;
          uint64_t v2606 = (char *)v2303 + v2313;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2606, 1, v2703))
          {
            uint64_t v2314 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2652, v2606, *(void *)(*(void *)(v2314 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2652, v2606, v2703);
            __swift_storeEnumTagSinglePayload((uint64_t)v2652, 0, 1, v2703);
          }
          uint64_t v2315 = v2674[11];
          v2316 = (char *)v2302 + v2315;
          uint64_t v2317 = (char *)v2303 + v2315;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2303 + v2315, 1, v2703))
          {
            uint64_t v2318 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2316, v2317, *(void *)(*(void *)(v2318 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2316, v2317, v2703);
            __swift_storeEnumTagSinglePayload((uint64_t)v2316, 0, 1, v2703);
          }
          uint64_t v2319 = v2674[12];
          v2320 = (void *)((char *)v2302 + v2319);
          uint64_t v2321 = (void *)((char *)v2303 + v2319);
          uint64_t v2322 = v2321[1];
          void *v2320 = *v2321;
          v2320[1] = v2322;
          uint64_t v2323 = v2674[13];
          uint64_t v2324 = (void *)((char *)v2302 + v2323);
          uint64_t v2325 = (void *)((char *)v2303 + v2323);
          uint64_t v2326 = v2325[1];
          *uint64_t v2324 = *v2325;
          v2324[1] = v2326;
          uint64_t v2327 = v2674[14];
          uint64_t v2328 = (void *)((char *)v2302 + v2327);
          uint64_t v2329 = (void *)((char *)v2303 + v2327);
          uint64_t v2330 = v2329[1];
          *uint64_t v2328 = *v2329;
          v2328[1] = v2330;
          uint64_t v2331 = v2674[15];
          uint64_t v2653 = (char *)v2302 + v2331;
          uint64_t v2332 = (char *)v2303 + v2331;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2332, 1, v2703))
          {
            uint64_t v2333 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2653, v2332, *(void *)(*(void *)(v2333 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2653, v2332, v2703);
            __swift_storeEnumTagSinglePayload((uint64_t)v2653, 0, 1, v2703);
          }
          uint64_t v2334 = v2674[16];
          uint64_t v2335 = (void *)((char *)v2302 + v2334);
          uint64_t v2336 = (void *)((char *)v2303 + v2334);
          uint64_t v2337 = v2336[1];
          *uint64_t v2335 = *v2336;
          v2335[1] = v2337;
          uint64_t v2338 = v2674[17];
          uint64_t v2339 = (void *)((char *)v2302 + v2338);
          uint64_t v2340 = (void *)((char *)v2303 + v2338);
          uint64_t v2654 = v2340[1];
          *uint64_t v2339 = *v2340;
          v2339[1] = v2654;
          uint64_t v2341 = v2674[18];
          v2342 = (void *)((char *)v2302 + v2341);
          uint64_t v2343 = (void *)((char *)v2303 + v2341);
          uint64_t v2630 = v2343[1];
          void *v2342 = *v2343;
          v2342[1] = v2630;
          uint64_t v2344 = v2674[19];
          v2345 = (void *)((char *)v2302 + v2344);
          v2346 = (void *)((char *)v2303 + v2344);
          uint64_t v2607 = (void *)v2346[1];
          void *v2345 = *v2346;
          v2345[1] = v2607;
          uint64_t v2347 = v2674[20];
          uint64_t v2348 = (void *)((char *)v2302 + v2347);
          v2349 = (void *)((char *)v2303 + v2347);
          uint64_t v2350 = v2349[1];
          *uint64_t v2348 = *v2349;
          v2348[1] = v2350;
          uint64_t v2351 = v2674[21];
          uint64_t v2352 = (void *)((char *)v2302 + v2351);
          v2353 = (void *)((char *)v2303 + v2351);
          uint64_t v2354 = v2353[1];
          *uint64_t v2352 = *v2353;
          v2352[1] = v2354;
          uint64_t v2355 = v2674[22];
          uint64_t v2356 = (void *)((char *)v2302 + v2355);
          v2357 = (void *)((char *)v2303 + v2355);
          uint64_t v2358 = v2357[1];
          *uint64_t v2356 = *v2357;
          v2356[1] = v2358;
          uint64_t v2359 = v2674[23];
          v2360 = (void *)((char *)v2302 + v2359);
          v2361 = (void *)((char *)v2303 + v2359);
          uint64_t v2362 = v2361[1];
          void *v2360 = *v2361;
          v2360[1] = v2362;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2302, 0, 1, (uint64_t)v2674);
          long long v684 = v2751;
        }
        uint64_t v2363 = v2711[21];
        v2364 = (void *)((char *)v684 + v2363);
        uint64_t v2365 = (void *)((char *)v25 + v2363);
        uint64_t v2366 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2365, 1, (uint64_t)v2366))
        {
          uint64_t v2367 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v2364, v2365, *(void *)(*(void *)(v2367 - 8) + 64));
        }
        else
        {
          uint64_t v2368 = v2365[1];
          void *v2364 = *v2365;
          v2364[1] = v2368;
          uint64_t v2369 = v2365[3];
          v2364[2] = v2365[2];
          v2364[3] = v2369;
          uint64_t v2370 = v2365[5];
          v2364[4] = v2365[4];
          v2364[5] = v2370;
          uint64_t v2371 = v2365[7];
          v2364[6] = v2365[6];
          v2364[7] = v2371;
          uint64_t v2655 = v2365[9];
          v2364[8] = v2365[8];
          v2364[9] = v2655;
          uint64_t v2631 = v2365[11];
          v2364[10] = v2365[10];
          v2364[11] = v2631;
          uint64_t v2372 = v2366[11];
          v2675 = (char *)v2364 + v2372;
          uint64_t v2373 = (char *)v2365 + v2372;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2373, 1, v2703))
          {
            uint64_t v2374 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2675, v2373, *(void *)(*(void *)(v2374 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2675, v2373, v2703);
            __swift_storeEnumTagSinglePayload((uint64_t)v2675, 0, 1, v2703);
          }
          uint64_t v2375 = v2366[12];
          v2376 = (void *)((char *)v2364 + v2375);
          uint64_t v2377 = (void *)((char *)v2365 + v2375);
          uint64_t v2378 = v2377[1];
          void *v2376 = *v2377;
          v2376[1] = v2378;
          *(void *)((char *)v2364 + v2366[13]) = *(void *)((char *)v2365 + v2366[13]);
          uint64_t v2379 = v2366[14];
          uint64_t v2676 = (char *)v2364 + v2379;
          v2380 = (char *)v2365 + v2379;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2380, 1, v2703))
          {
            uint64_t v2381 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2676, v2380, *(void *)(*(void *)(v2381 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2676, v2380, v2703);
            __swift_storeEnumTagSinglePayload((uint64_t)v2676, 0, 1, v2703);
          }
          *(void *)((char *)v2364 + v2366[15]) = *(void *)((char *)v2365 + v2366[15]);
          *(void *)((char *)v2364 + v2366[16]) = *(void *)((char *)v2365 + v2366[16]);
          uint64_t v2382 = v2366[17];
          v2383 = (void *)((char *)v2364 + v2382);
          v2384 = (void *)((char *)v2365 + v2382);
          uint64_t v2385 = v2384[1];
          void *v2383 = *v2384;
          v2383[1] = v2385;
          *(void *)((char *)v2364 + v2366[18]) = *(void *)((char *)v2365 + v2366[18]);
          *(void *)((char *)v2364 + v2366[19]) = *(void *)((char *)v2365 + v2366[19]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2364, 0, 1, (uint64_t)v2366);
        }
        uint64_t v2386 = v2711[22];
        uint64_t v2387 = (void *)((char *)v2751 + v2386);
        uint64_t v2388 = (void *)((char *)v25 + v2386);
        uint64_t v2389 = type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2388, 1, v2389))
        {
          uint64_t v2390 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v2387, v2388, *(void *)(*(void *)(v2390 - 8) + 64));
        }
        else
        {
          uint64_t v2391 = v2388[1];
          *uint64_t v2387 = *v2388;
          v2387[1] = v2391;
          uint64_t v2392 = v2388[3];
          v2387[2] = v2388[2];
          v2387[3] = v2392;
          uint64_t v2393 = v2388[5];
          v2387[4] = v2388[4];
          v2387[5] = v2393;
          uint64_t v2394 = v2388[7];
          v2387[6] = v2388[6];
          v2387[7] = v2394;
          uint64_t v2395 = *(int *)(v2389 + 32);
          uint64_t v2656 = (int *)v2389;
          uint64_t v2677 = (char *)v2387 + v2395;
          uint64_t v2396 = (char *)v2388 + v2395;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2396, 1, v2688))
          {
            uint64_t v2397 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2677, v2396, *(void *)(*(void *)(v2397 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2688 - 8) + 16))(v2677, v2396, v2688);
            __swift_storeEnumTagSinglePayload((uint64_t)v2677, 0, 1, v2688);
          }
          uint64_t v2398 = v2656[9];
          uint64_t v2399 = (void *)((char *)v2387 + v2398);
          uint64_t v2400 = (void *)((char *)v2388 + v2398);
          uint64_t v2401 = v2400[1];
          *uint64_t v2399 = *v2400;
          v2399[1] = v2401;
          uint64_t v2402 = v2656[10];
          uint64_t v2403 = (void *)((char *)v2387 + v2402);
          uint64_t v2404 = (void *)((char *)v2388 + v2402);
          uint64_t v2405 = v2404[1];
          *uint64_t v2403 = *v2404;
          v2403[1] = v2405;
          uint64_t v2406 = v2656[11];
          v2407 = (void *)((char *)v2387 + v2406);
          uint64_t v2408 = (void *)((char *)v2388 + v2406);
          uint64_t v2409 = v2408[1];
          void *v2407 = *v2408;
          v2407[1] = v2409;
          uint64_t v2410 = v2656[12];
          uint64_t v2691 = (char *)v2387 + v2410;
          uint64_t v2411 = (char *)v2388 + v2410;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2411, 1, v2703))
          {
            uint64_t v2412 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2691, v2411, *(void *)(*(void *)(v2412 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2691, v2411, v2703);
            __swift_storeEnumTagSinglePayload((uint64_t)v2691, 0, 1, v2703);
          }
          uint64_t v2413 = v2656[13];
          uint64_t v2414 = (char *)v2387 + v2413;
          uint64_t v2415 = (char *)v2388 + v2413;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2388 + v2413, 1, v2703))
          {
            uint64_t v2416 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2414, v2415, *(void *)(*(void *)(v2416 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2703 - 8) + 16))(v2414, v2415, v2703);
            __swift_storeEnumTagSinglePayload((uint64_t)v2414, 0, 1, v2703);
          }
          uint64_t v2417 = v2656[14];
          uint64_t v2418 = (char *)v2387 + v2417;
          uint64_t v2419 = (char *)v2388 + v2417;
          *(void *)uint64_t v2418 = *(void *)v2419;
          v2418[8] = v2419[8];
          uint64_t v2420 = v2656[15];
          v2421 = (void *)((char *)v2387 + v2420);
          uint64_t v2422 = (void *)((char *)v2388 + v2420);
          uint64_t v2423 = v2422[1];
          void *v2421 = *v2422;
          v2421[1] = v2423;
          uint64_t v2424 = v2656[16];
          v2425 = (void *)((char *)v2387 + v2424);
          uint64_t v2426 = (void *)((char *)v2388 + v2424);
          uint64_t v2427 = v2426[1];
          void *v2425 = *v2426;
          v2425[1] = v2427;
          uint64_t v2428 = v2656[17];
          uint64_t v2429 = (void *)((char *)v2387 + v2428);
          uint64_t v2430 = (void *)((char *)v2388 + v2428);
          uint64_t v2431 = v2430[1];
          *uint64_t v2429 = *v2430;
          v2429[1] = v2431;
          uint64_t v2432 = v2656[18];
          uint64_t v2433 = (void *)((char *)v2387 + v2432);
          uint64_t v2434 = (void *)((char *)v2388 + v2432);
          uint64_t v2435 = v2434[1];
          *uint64_t v2433 = *v2434;
          v2433[1] = v2435;
          uint64_t v2436 = v2656[19];
          uint64_t v2437 = (void *)((char *)v2387 + v2436);
          v2438 = (void *)((char *)v2388 + v2436);
          uint64_t v2439 = v2438[1];
          *uint64_t v2437 = *v2438;
          v2437[1] = v2439;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2387, 0, 1, (uint64_t)v2656);
        }
        uint64_t v24 = v2751;
        uint64_t v2086 = v2711[23];
        goto LABEL_546;
      case 2u:
        uint64_t v2737 = v11;
        uint64_t v61 = v24;
        uint64_t v62 = v25[1];
        void *v61 = *v25;
        v61[1] = v62;
        uint64_t v63 = v25[3];
        v61[2] = v25[2];
        v61[3] = v63;
        uint64_t v64 = v25[5];
        v61[4] = v25[4];
        v61[5] = v64;
        uint64_t v65 = (int *)type metadata accessor for CalendarEvent(0);
        uint64_t v66 = v65[7];
        uint64_t v67 = (char *)v61 + v66;
        uint64_t v68 = (char *)v25 + v66;
        uint64_t v69 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v68, 1, v69))
        {
          uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v67, v68, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 16))(v67, v68, v69);
          __swift_storeEnumTagSinglePayload((uint64_t)v67, 0, 1, v69);
        }
        uint64_t v360 = v65[8];
        uint64_t v361 = (char *)v2751 + v360;
        uint64_t v362 = (char *)v25 + v360;
        if (__swift_getEnumTagSinglePayload((uint64_t)v25 + v360, 1, v69))
        {
          uint64_t v363 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v361, v362, *(void *)(*(void *)(v363 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 16))(v361, v362, v69);
          __swift_storeEnumTagSinglePayload((uint64_t)v361, 0, 1, v69);
        }
        uint64_t v520 = v65[9];
        uint64_t v521 = (void *)((char *)v2751 + v520);
        v522 = (void *)((char *)v25 + v520);
        uint64_t v523 = v522[1];
        *uint64_t v521 = *v522;
        v521[1] = v523;
        *(void *)((char *)v2751 + v65[10]) = *(void *)((char *)v25 + v65[10]);
        *(void *)((char *)v2751 + v65[11]) = *(void *)((char *)v25 + v65[11]);
        uint64_t v524 = v65[12];
        uint64_t v525 = (void *)((char *)v2751 + v524);
        uint64_t v526 = (void *)((char *)v25 + v524);
        uint64_t v527 = v526[1];
        *uint64_t v525 = *v526;
        v525[1] = v527;
        uint64_t v528 = v65[13];
        v529 = (void *)((char *)v2751 + v528);
        v530 = (char *)v25 + v528;
        uint64_t v531 = *(void *)((char *)v25 + v528);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v531)
        {
          uint64_t v532 = *((void *)v530 + 1);
          uint64_t v533 = *((void *)v530 + 2);
          void *v529 = v531;
          v529[1] = v532;
          uint64_t v534 = *((void *)v530 + 3);
          uint64_t v535 = *((void *)v530 + 4);
          v529[2] = v533;
          v529[3] = v534;
          v529[4] = v535;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v694 = *((_OWORD *)v530 + 1);
          *(_OWORD *)v529 = *(_OWORD *)v530;
          *((_OWORD *)v529 + 1) = v694;
          v529[4] = *((void *)v530 + 4);
        }
        uint64_t v11 = v2737;
        goto LABEL_166;
      case 3u:
        uint64_t v2738 = v11;
        uint64_t v71 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v71;
        uint64_t v72 = v25[3];
        v24[2] = v25[2];
        v24[3] = v72;
        uint64_t v2712 = v25;
        uint64_t v73 = v25[5];
        v24[4] = v25[4];
        v24[5] = v73;
        uint64_t v74 = v25[7];
        v24[6] = v25[6];
        v24[7] = v74;
        uint64_t v75 = v25[9];
        v24[8] = v25[8];
        v24[9] = v75;
        v24[10] = v25[10];
        uint64_t v2695 = (int *)type metadata accessor for Photo(0);
        uint64_t v76 = v2695[11];
        uint64_t v2633 = (char *)v24 + v76;
        uint64_t v2659 = (char *)v25 + v76;
        uint64_t v77 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v2680 = v77;
        if (__swift_getEnumTagSinglePayload((uint64_t)v2659, 1, v77))
        {
          uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2633, v2659, *(void *)(*(void *)(v78 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 16))(v2633, v2659, v77);
          __swift_storeEnumTagSinglePayload((uint64_t)v2633, 0, 1, v77);
        }
        uint64_t v364 = v24;
        *(void *)((char *)v24 + v2695[12]) = *(void *)((char *)v2712 + v2695[12]);
        *(void *)((char *)v24 + v2695[13]) = *(void *)((char *)v2712 + v2695[13]);
        *(void *)((char *)v24 + v2695[14]) = *(void *)((char *)v2712 + v2695[14]);
        *(void *)((char *)v24 + v2695[15]) = *(void *)((char *)v2712 + v2695[15]);
        uint64_t v365 = v2695[16];
        long long v366 = (void *)((char *)v24 + v365);
        long long v367 = (void *)((char *)v2712 + v365);
        uint64_t v368 = v367[1];
        *long long v366 = *v367;
        v366[1] = v368;
        uint64_t v369 = v2695[17];
        uint64_t v2668 = (void *)((char *)v24 + v369);
        uint64_t v370 = (void *)((char *)v2712 + v369);
        uint64_t v371 = type metadata accessor for PartialExtractedAttributes(0);
        swift_bridgeObjectRetain();
        long long v372 = v370;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v370, 1, v371))
        {
          uint64_t v373 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v2668, v370, *(void *)(*(void *)(v373 - 8) + 64));
        }
        else
        {
          uint64_t v536 = v370[1];
          uint64_t v537 = (uint64_t)v2668;
          *uint64_t v2668 = *v370;
          v2668[1] = v536;
          uint64_t v2641 = (int *)v371;
          uint64_t v538 = *(int *)(v371 + 20);
          uint64_t v539 = (void *)((char *)v2668 + v538);
          uint64_t v540 = (void *)((char *)v370 + v538);
          uint64_t v541 = type metadata accessor for RentalCarReservation(0);
          swift_bridgeObjectRetain();
          uint64_t v2617 = v370;
          if (__swift_getEnumTagSinglePayload((uint64_t)v540, 1, v541))
          {
            uint64_t v542 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v539, v540, *(void *)(*(void *)(v542 - 8) + 64));
          }
          else
          {
            uint64_t v765 = v540[1];
            *uint64_t v539 = *v540;
            v539[1] = v765;
            uint64_t v766 = v540[3];
            v539[2] = v540[2];
            v539[3] = v766;
            uint64_t v767 = v540[5];
            v539[4] = v540[4];
            v539[5] = v767;
            uint64_t v768 = v540[7];
            v539[6] = v540[6];
            v539[7] = v768;
            uint64_t v769 = v540[9];
            v539[8] = v540[8];
            v539[9] = v769;
            uint64_t v770 = v540[11];
            v539[10] = v540[10];
            v539[11] = v770;
            uint64_t v771 = v540[13];
            v539[12] = v540[12];
            v539[13] = v771;
            uint64_t v772 = v540[15];
            v539[14] = v540[14];
            v539[15] = v772;
            *((unsigned char *)v539 + 128) = *((unsigned char *)v540 + 128);
            *(_WORD *)((char *)v539 + 129) = *(_WORD *)((char *)v540 + 129);
            uint64_t v773 = v540[18];
            v539[17] = v540[17];
            v539[18] = v773;
            uint64_t v774 = v540[20];
            v539[19] = v540[19];
            v539[20] = v774;
            uint64_t v775 = v540[22];
            v539[21] = v540[21];
            v539[22] = v775;
            uint64_t v2459 = v540[24];
            v539[23] = v540[23];
            v539[24] = v2459;
            uint64_t v776 = v540[26];
            v539[25] = v540[25];
            v539[26] = v776;
            uint64_t v777 = v540[28];
            v539[27] = v540[27];
            v539[28] = v777;
            uint64_t v778 = v540[30];
            v539[29] = v540[29];
            v539[30] = v778;
            uint64_t v779 = v540[32];
            v539[31] = v540[31];
            v539[32] = v779;
            uint64_t v780 = v540[34];
            v539[33] = v540[33];
            v539[34] = v780;
            uint64_t v781 = v540[36];
            v539[35] = v540[35];
            v539[36] = v781;
            uint64_t v782 = v540[38];
            v539[37] = v540[37];
            v539[38] = v782;
            uint64_t v783 = v540[40];
            v539[39] = v540[39];
            v539[40] = v783;
            uint64_t v784 = v540[42];
            v539[41] = v540[41];
            v539[42] = v784;
            uint64_t v785 = v540[44];
            v539[43] = v540[43];
            v539[44] = v785;
            uint64_t v786 = v540[46];
            v539[45] = v540[45];
            v539[46] = v786;
            uint64_t v787 = v540[47];
            *((unsigned char *)v539 + 384) = *((unsigned char *)v540 + 384);
            v539[47] = v787;
            uint64_t v788 = v540[50];
            v539[49] = v540[49];
            v539[50] = v788;
            uint64_t v789 = v540[52];
            v539[51] = v540[51];
            v539[52] = v789;
            uint64_t v790 = *(int *)(v541 + 140);
            v2580 = (char *)v539 + v790;
            uint64_t v791 = (char *)v540 + v790;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v791, 1, v2680))
            {
              uint64_t v792 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2580, v791, *(void *)(*(void *)(v792 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2580, v791, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v2580, 0, 1, v2680);
            }
            uint64_t v825 = *(int *)(v541 + 144);
            uint64_t v826 = (char *)v539 + v825;
            long long v827 = (char *)v540 + v825;
            if (__swift_getEnumTagSinglePayload((uint64_t)v540 + v825, 1, v2680))
            {
              uint64_t v828 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v826, v827, *(void *)(*(void *)(v828 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v826, v827, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v826, 0, 1, v2680);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v539, 0, 1, v541);
            long long v372 = v2617;
          }
          uint64_t v859 = v2641;
          uint64_t v860 = v2641[6];
          uint64_t v861 = (void *)((char *)v2668 + v860);
          uint64_t v862 = (void *)((char *)v372 + v860);
          uint64_t v863 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v862, 1, v863))
          {
            uint64_t v864 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v861, v862, *(void *)(*(void *)(v864 - 8) + 64));
          }
          else
          {
            uint64_t v865 = v862[1];
            *uint64_t v861 = *v862;
            v861[1] = v865;
            uint64_t v866 = v862[3];
            v861[2] = v862[2];
            v861[3] = v866;
            uint64_t v867 = v862[5];
            v861[4] = v862[4];
            v861[5] = v867;
            uint64_t v868 = v862[7];
            v861[6] = v862[6];
            v861[7] = v868;
            uint64_t v869 = v862[9];
            v861[8] = v862[8];
            v861[9] = v869;
            uint64_t v870 = v862[11];
            v861[10] = v862[10];
            v861[11] = v870;
            uint64_t v871 = v862[13];
            v861[12] = v862[12];
            v861[13] = v871;
            uint64_t v872 = v862[15];
            v861[14] = v862[14];
            v861[15] = v872;
            *((unsigned char *)v861 + 128) = *((unsigned char *)v862 + 128);
            *(_WORD *)((char *)v861 + 129) = *(_WORD *)((char *)v862 + 129);
            uint64_t v873 = v862[18];
            v861[17] = v862[17];
            v861[18] = v873;
            uint64_t v874 = v862[20];
            v861[19] = v862[19];
            v861[20] = v874;
            uint64_t v875 = v862[22];
            v861[21] = v862[21];
            v861[22] = v875;
            uint64_t v2467 = v862[24];
            v861[23] = v862[23];
            v861[24] = v2467;
            uint64_t v876 = v862[26];
            v861[25] = v862[25];
            v861[26] = v876;
            uint64_t v877 = v862[28];
            v861[27] = v862[27];
            v861[28] = v877;
            uint64_t v878 = v862[30];
            v861[29] = v862[29];
            v861[30] = v878;
            uint64_t v879 = v862[32];
            v861[31] = v862[31];
            v861[32] = v879;
            uint64_t v880 = v862[34];
            v861[33] = v862[33];
            v861[34] = v880;
            uint64_t v881 = v862[36];
            uint64_t v882 = v862[35];
            *((unsigned char *)v861 + 296) = *((unsigned char *)v862 + 296);
            v861[35] = v882;
            v861[36] = v881;
            uint64_t v883 = *(int *)(v863 + 112);
            v2552 = (char *)v861 + v883;
            uint64_t v884 = (char *)v862 + v883;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v884, 1, v2680))
            {
              uint64_t v885 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2552, v884, *(void *)(*(void *)(v885 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2552, v884, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v2552, 0, 1, v2680);
            }
            uint64_t v915 = *(int *)(v863 + 116);
            long long v916 = (char *)v861 + v915;
            long long v917 = (char *)v862 + v915;
            uint64_t v859 = v2641;
            if (__swift_getEnumTagSinglePayload((uint64_t)v862 + v915, 1, v2680))
            {
              uint64_t v918 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v916, v917, *(void *)(*(void *)(v918 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v916, v917, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v916, 0, 1, v2680);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v861, 0, 1, v863);
            long long v372 = v2617;
          }
          uint64_t v951 = v859[7];
          uint64_t v952 = (void *)((char *)v2668 + v951);
          uint64_t v953 = (void *)((char *)v372 + v951);
          uint64_t v954 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v953, 1, (uint64_t)v954))
          {
            uint64_t v955 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v952, v953, *(void *)(*(void *)(v955 - 8) + 64));
          }
          else
          {
            uint64_t v956 = v953[1];
            void *v952 = *v953;
            v952[1] = v956;
            uint64_t v957 = v953[3];
            v952[2] = v953[2];
            v952[3] = v957;
            uint64_t v958 = v953[5];
            v952[4] = v953[4];
            v952[5] = v958;
            uint64_t v959 = v953[7];
            v952[6] = v953[6];
            v952[7] = v959;
            uint64_t v960 = v953[9];
            v952[8] = v953[8];
            v952[9] = v960;
            uint64_t v961 = v953[11];
            v952[10] = v953[10];
            v952[11] = v961;
            uint64_t v962 = v953[13];
            v952[12] = v953[12];
            v952[13] = v962;
            uint64_t v963 = v953[15];
            v952[14] = v953[14];
            v952[15] = v963;
            *((unsigned char *)v952 + 128) = *((unsigned char *)v953 + 128);
            *(_WORD *)((char *)v952 + 129) = *(_WORD *)((char *)v953 + 129);
            uint64_t v964 = v953[18];
            v952[17] = v953[17];
            v952[18] = v964;
            uint64_t v965 = v953[20];
            v952[19] = v953[19];
            v952[20] = v965;
            uint64_t v966 = v953[22];
            v952[21] = v953[21];
            v952[22] = v966;
            uint64_t v2463 = v953[24];
            v952[23] = v953[23];
            v952[24] = v2463;
            uint64_t v967 = v953[26];
            v952[25] = v953[25];
            v952[26] = v967;
            uint64_t v968 = v953[28];
            v952[27] = v953[27];
            v952[28] = v968;
            v2555 = (void *)v953[30];
            v952[29] = v953[29];
            v952[30] = v2555;
            uint64_t v969 = v953[32];
            v952[31] = v953[31];
            v952[32] = v969;
            uint64_t v970 = v953[34];
            v952[33] = v953[33];
            v952[34] = v970;
            uint64_t v971 = v953[36];
            uint64_t v972 = v953[35];
            *((unsigned char *)v952 + 296) = *((unsigned char *)v953 + 296);
            v952[35] = v972;
            v952[36] = v971;
            uint64_t v973 = v953[39];
            v952[38] = v953[38];
            v952[39] = v973;
            uint64_t v974 = v954[29];
            v2583 = (char *)v952 + v974;
            uint64_t v975 = (char *)v953 + v974;
            uint64_t v976 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v975, 1, v976))
            {
              uint64_t v977 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2583, v975, *(void *)(*(void *)(v977 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v976 - 8) + 16))(v2583, v975, v976);
              __swift_storeEnumTagSinglePayload((uint64_t)v2583, 0, 1, v976);
            }
            uint64_t v1015 = v954[30];
            uint64_t v1016 = (void *)((char *)v952 + v1015);
            long long v1017 = (void *)((char *)v953 + v1015);
            uint64_t v1018 = v1017[1];
            *uint64_t v1016 = *v1017;
            v1016[1] = v1018;
            uint64_t v1019 = v954[31];
            uint64_t v1020 = (char *)v952 + v1019;
            uint64_t v1021 = (char *)v953 + v1019;
            swift_bridgeObjectRetain();
            uint64_t v537 = (uint64_t)v2668;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1021, 1, v2680))
            {
              uint64_t v1022 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1020, v1021, *(void *)(*(void *)(v1022 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v1020, v1021, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v1020, 0, 1, v2680);
            }
            uint64_t v1035 = v954[32];
            uint64_t v1036 = (char *)v952 + v1035;
            v1037 = (char *)v953 + v1035;
            if (__swift_getEnumTagSinglePayload((uint64_t)v953 + v1035, 1, v2680))
            {
              uint64_t v1038 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1036, v1037, *(void *)(*(void *)(v1038 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v1036, v1037, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v1036, 0, 1, v2680);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v952, 0, 1, (uint64_t)v954);
            long long v372 = v2617;
          }
          uint64_t v1069 = v859[8];
          uint64_t v1070 = (void *)(v537 + v1069);
          uint64_t v1071 = (void *)((char *)v372 + v1069);
          uint64_t v1072 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1071, 1, v1072))
          {
            uint64_t v1073 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v1070, v1071, *(void *)(*(void *)(v1073 - 8) + 64));
          }
          else
          {
            uint64_t v1074 = v1071[1];
            *uint64_t v1070 = *v1071;
            v1070[1] = v1074;
            uint64_t v1075 = v1071[3];
            v1070[2] = v1071[2];
            v1070[3] = v1075;
            uint64_t v1076 = v1071[5];
            v1070[4] = v1071[4];
            v1070[5] = v1076;
            uint64_t v1077 = v1071[7];
            v1070[6] = v1071[6];
            v1070[7] = v1077;
            uint64_t v1078 = v1071[9];
            v1070[8] = v1071[8];
            v1070[9] = v1078;
            uint64_t v1079 = v1071[11];
            v1070[10] = v1071[10];
            v1070[11] = v1079;
            uint64_t v1080 = v1071[13];
            v1070[12] = v1071[12];
            v1070[13] = v1080;
            uint64_t v1081 = v1071[15];
            v1070[14] = v1071[14];
            v1070[15] = v1081;
            *((unsigned char *)v1070 + 128) = *((unsigned char *)v1071 + 128);
            *(_WORD *)((char *)v1070 + 129) = *(_WORD *)((char *)v1071 + 129);
            uint64_t v1082 = v1071[18];
            v1070[17] = v1071[17];
            v1070[18] = v1082;
            uint64_t v1083 = v1071[20];
            v1070[19] = v1071[19];
            v1070[20] = v1083;
            uint64_t v1084 = v1071[22];
            v1070[21] = v1071[21];
            v1070[22] = v1084;
            uint64_t v2474 = v1071[24];
            v1070[23] = v1071[23];
            v1070[24] = v2474;
            uint64_t v1085 = v1071[26];
            v1070[25] = v1071[25];
            v1070[26] = v1085;
            uint64_t v1086 = v1071[28];
            v1070[27] = v1071[27];
            v1070[28] = v1086;
            uint64_t v1087 = v1071[30];
            v1070[29] = v1071[29];
            v1070[30] = v1087;
            uint64_t v1088 = v1071[32];
            v1070[31] = v1071[31];
            v1070[32] = v1088;
            uint64_t v1090 = v1071[33];
            uint64_t v1089 = v1071[34];
            *((unsigned char *)v1070 + 280) = *((unsigned char *)v1071 + 280);
            v1070[33] = v1090;
            v1070[34] = v1089;
            uint64_t v1091 = v1071[37];
            v1070[36] = v1071[36];
            v1070[37] = v1091;
            uint64_t v1092 = *(int *)(v1072 + 108);
            v2557 = (char *)v1070 + v1092;
            uint64_t v1093 = (char *)v1071 + v1092;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1093, 1, v2680))
            {
              uint64_t v1094 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2557, v1093, *(void *)(*(void *)(v1094 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2557, v1093, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v2557, 0, 1, v2680);
            }
            uint64_t v1125 = *(int *)(v1072 + 112);
            uint64_t v1126 = (char *)v1070 + v1125;
            uint64_t v1127 = (char *)v1071 + v1125;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1071 + v1125, 1, v2680))
            {
              uint64_t v1128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1126, v1127, *(void *)(*(void *)(v1128 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v1126, v1127, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v1126, 0, 1, v2680);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v1070, 0, 1, v1072);
            long long v372 = v2617;
          }
          uint64_t v1156 = v859[9];
          uint64_t v1157 = (void *)(v537 + v1156);
          uint64_t v1158 = (void *)((char *)v372 + v1156);
          v1159 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1158, 1, (uint64_t)v1159))
          {
            uint64_t v1160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v1157, v1158, *(void *)(*(void *)(v1160 - 8) + 64));
          }
          else
          {
            uint64_t v1161 = v1158[1];
            void *v1157 = *v1158;
            v1157[1] = v1161;
            uint64_t v1162 = v1158[3];
            v1157[2] = v1158[2];
            v1157[3] = v1162;
            uint64_t v1163 = v1158[5];
            v1157[4] = v1158[4];
            v1157[5] = v1163;
            uint64_t v1164 = v1158[7];
            v1157[6] = v1158[6];
            v1157[7] = v1164;
            uint64_t v1165 = v1158[9];
            v1157[8] = v1158[8];
            v1157[9] = v1165;
            uint64_t v1166 = v1158[11];
            v1157[10] = v1158[10];
            v1157[11] = v1166;
            uint64_t v1167 = v1158[13];
            v1157[12] = v1158[12];
            v1157[13] = v1167;
            uint64_t v1168 = v1158[15];
            v1157[14] = v1158[14];
            v1157[15] = v1168;
            *((unsigned char *)v1157 + 128) = *((unsigned char *)v1158 + 128);
            *(_WORD *)((char *)v1157 + 129) = *(_WORD *)((char *)v1158 + 129);
            uint64_t v1169 = v1158[18];
            v1157[17] = v1158[17];
            v1157[18] = v1169;
            uint64_t v1170 = v1158[20];
            v1157[19] = v1158[19];
            v1157[20] = v1170;
            uint64_t v1171 = v1158[22];
            v1157[21] = v1158[21];
            v1157[22] = v1171;
            uint64_t v1172 = v1158[24];
            v1157[23] = v1158[23];
            v1157[24] = v1172;
            uint64_t v1173 = v1158[26];
            v1157[25] = v1158[25];
            v1157[26] = v1173;
            uint64_t v1174 = v1158[28];
            v1157[27] = v1158[27];
            v1157[28] = v1174;
            uint64_t v1175 = v1158[30];
            v1157[29] = v1158[29];
            v1157[30] = v1175;
            v1157[31] = v1158[31];
            uint64_t v1176 = v1159[24];
            v2558 = (char *)v1157 + v1176;
            uint64_t v1177 = (char *)v1158 + v1176;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1177, 1, v2680))
            {
              uint64_t v1178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2558, v1177, *(void *)(*(void *)(v1178 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2558, v1177, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v2558, 0, 1, v2680);
            }
            uint64_t v1206 = v1159[25];
            v1207 = (char *)v1157 + v1206;
            v1208 = (char *)v1158 + v1206;
            uint64_t v859 = v2641;
            uint64_t v537 = (uint64_t)v2668;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1158 + v1206, 1, v2680))
            {
              uint64_t v1209 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1207, v1208, *(void *)(*(void *)(v1209 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v1207, v1208, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v1207, 0, 1, v2680);
            }
            uint64_t v1219 = v1159[26];
            v1220 = (char *)v1157 + v1219;
            uint64_t v1221 = (char *)v1158 + v1219;
            uint64_t v1222 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1221, 1, v1222))
            {
              uint64_t v1223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1220, v1221, *(void *)(*(void *)(v1223 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1222 - 8) + 16))(v1220, v1221, v1222);
              __swift_storeEnumTagSinglePayload((uint64_t)v1220, 0, 1, v1222);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v1157, 0, 1, (uint64_t)v1159);
            long long v372 = v2617;
          }
          uint64_t v1248 = v859[10];
          uint64_t v1249 = (void *)(v537 + v1248);
          v1250 = (void *)((char *)v372 + v1248);
          uint64_t v1251 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1250, 1, (uint64_t)v1251))
          {
            uint64_t v1252 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v1249, v1250, *(void *)(*(void *)(v1252 - 8) + 64));
          }
          else
          {
            uint64_t v1253 = v1250[1];
            *uint64_t v1249 = *v1250;
            v1249[1] = v1253;
            uint64_t v1254 = v1250[3];
            v1249[2] = v1250[2];
            v1249[3] = v1254;
            uint64_t v1255 = v1250[5];
            v1249[4] = v1250[4];
            v1249[5] = v1255;
            uint64_t v1256 = v1250[7];
            v1249[6] = v1250[6];
            v1249[7] = v1256;
            uint64_t v1257 = v1250[9];
            v1249[8] = v1250[8];
            v1249[9] = v1257;
            uint64_t v1258 = v1250[11];
            v1249[10] = v1250[10];
            v1249[11] = v1258;
            uint64_t v1259 = v1250[13];
            v1249[12] = v1250[12];
            v1249[13] = v1259;
            uint64_t v1260 = v1250[15];
            v1249[14] = v1250[14];
            v1249[15] = v1260;
            *((unsigned char *)v1249 + 128) = *((unsigned char *)v1250 + 128);
            *(_WORD *)((char *)v1249 + 129) = *(_WORD *)((char *)v1250 + 129);
            uint64_t v1261 = v1250[18];
            v1249[17] = v1250[17];
            v1249[18] = v1261;
            uint64_t v1262 = v1250[20];
            v1249[19] = v1250[19];
            v1249[20] = v1262;
            uint64_t v1263 = v1250[22];
            v1249[21] = v1250[21];
            v1249[22] = v1263;
            uint64_t v1264 = v1250[24];
            v1249[23] = v1250[23];
            v1249[24] = v1264;
            uint64_t v1265 = v1250[26];
            v1249[25] = v1250[25];
            v1249[26] = v1265;
            v1249[27] = v1250[27];
            uint64_t v1266 = v1251[22];
            v2559 = (char *)v1249 + v1266;
            uint64_t v1267 = (char *)v1250 + v1266;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1267, 1, v2680))
            {
              uint64_t v1268 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2559, v1267, *(void *)(*(void *)(v1268 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2559, v1267, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v2559, 0, 1, v2680);
            }
            uint64_t v1294 = v1251[23];
            v1295 = (char *)v1249 + v1294;
            uint64_t v1296 = (char *)v1250 + v1294;
            uint64_t v859 = v2641;
            uint64_t v537 = (uint64_t)v2668;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1250 + v1294, 1, v2680))
            {
              uint64_t v1297 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1295, v1296, *(void *)(*(void *)(v1297 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v1295, v1296, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v1295, 0, 1, v2680);
            }
            uint64_t v1310 = v1251[24];
            uint64_t v1311 = (char *)v1249 + v1310;
            uint64_t v1312 = (char *)v1250 + v1310;
            *(void *)uint64_t v1311 = *(void *)v1312;
            v1311[8] = v1312[8];
            uint64_t v1313 = v1251[25];
            v1314 = (char *)v1249 + v1313;
            v1315 = (char *)v1250 + v1313;
            uint64_t v1316 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1315, 1, v1316))
            {
              uint64_t v1317 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1314, v1315, *(void *)(*(void *)(v1317 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1316 - 8) + 16))(v1314, v1315, v1316);
              __swift_storeEnumTagSinglePayload((uint64_t)v1314, 0, 1, v1316);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v1249, 0, 1, (uint64_t)v1251);
            long long v372 = v2617;
          }
          uint64_t v1340 = v859[11];
          v1341 = (void *)(v537 + v1340);
          uint64_t v1342 = (void *)((char *)v372 + v1340);
          uint64_t v1343 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1342, 1, (uint64_t)v1343))
          {
            uint64_t v1344 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v1341, v1342, *(void *)(*(void *)(v1344 - 8) + 64));
          }
          else
          {
            uint64_t v1345 = v1342[1];
            void *v1341 = *v1342;
            v1341[1] = v1345;
            uint64_t v1346 = v1342[3];
            v1341[2] = v1342[2];
            v1341[3] = v1346;
            uint64_t v1347 = v1342[5];
            v1341[4] = v1342[4];
            v1341[5] = v1347;
            uint64_t v1348 = v1342[7];
            v1341[6] = v1342[6];
            v1341[7] = v1348;
            uint64_t v1349 = v1342[9];
            v1341[8] = v1342[8];
            v1341[9] = v1349;
            uint64_t v1350 = v1342[11];
            v1341[10] = v1342[10];
            v1341[11] = v1350;
            *((unsigned char *)v1341 + 96) = *((unsigned char *)v1342 + 96);
            uint64_t v1351 = v1342[14];
            v1341[13] = v1342[13];
            v1341[14] = v1351;
            uint64_t v1352 = v1343[13];
            v2588 = (char *)v1341 + v1352;
            uint64_t v1353 = (char *)v1342 + v1352;
            uint64_t v2510 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1353, 1, v2510))
            {
              uint64_t v1354 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2588, v1353, *(void *)(*(void *)(v1354 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2510 - 8) + 16))(v2588, v1353, v2510);
              __swift_storeEnumTagSinglePayload((uint64_t)v2588, 0, 1, v2510);
            }
            uint64_t v1374 = v1343[14];
            v1375 = (char *)v1341 + v1374;
            v1376 = (char *)v1342 + v1374;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1342 + v1374, 1, v2510))
            {
              uint64_t v1377 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1375, v1376, *(void *)(*(void *)(v1377 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2510 - 8) + 16))(v1375, v1376, v2510);
              __swift_storeEnumTagSinglePayload((uint64_t)v1375, 0, 1, v2510);
            }
            uint64_t v1450 = v1343[15];
            uint64_t v1451 = (void *)((char *)v1341 + v1450);
            v1452 = (void *)((char *)v1342 + v1450);
            uint64_t v1453 = v1452[1];
            *uint64_t v1451 = *v1452;
            v1451[1] = v1453;
            uint64_t v1454 = v1343[16];
            v1455 = (void *)((char *)v1341 + v1454);
            v1456 = (void *)((char *)v1342 + v1454);
            v2590 = (void *)v1456[1];
            void *v1455 = *v1456;
            v1455[1] = v2590;
            uint64_t v1457 = v1343[17];
            uint64_t v1458 = (void *)((char *)v1341 + v1457);
            v1459 = (void *)((char *)v1342 + v1457);
            uint64_t v1460 = v1459[1];
            *uint64_t v1458 = *v1459;
            v1458[1] = v1460;
            uint64_t v1461 = v1343[18];
            v2541 = (char *)v1342 + v1461;
            v2563 = (char *)v1341 + v1461;
            uint64_t v1462 = type metadata accessor for DateComponents();
            v1463 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1462 - 8) + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1463(v2563, v2541, v1462);
            v1463((char *)v1341 + v1343[19], (char *)v1342 + v1343[19], v1462);
            uint64_t v1464 = v1343[20];
            uint64_t v1465 = (void *)((char *)v1341 + v1464);
            uint64_t v1466 = (void *)((char *)v1342 + v1464);
            uint64_t v1467 = v1466[1];
            *uint64_t v1465 = *v1466;
            v1465[1] = v1467;
            uint64_t v1468 = v1343[21];
            v1469 = (void *)((char *)v1341 + v1468);
            v1470 = (void *)((char *)v1342 + v1468);
            v2542 = (void *)v1470[1];
            void *v1469 = *v1470;
            v1469[1] = v2542;
            uint64_t v1471 = v1343[22];
            uint64_t v1472 = (void *)((char *)v1341 + v1471);
            v1473 = (void *)((char *)v1342 + v1471);
            uint64_t v1474 = v1473[1];
            *uint64_t v1472 = *v1473;
            v1472[1] = v1474;
            uint64_t v1475 = v1343[23];
            v1476 = (void *)((char *)v1341 + v1475);
            v1477 = (void *)((char *)v1342 + v1475);
            v2591 = (void *)v1477[1];
            void *v1476 = *v1477;
            v1476[1] = v2591;
            uint64_t v1478 = v1343[24];
            v1479 = (void *)((char *)v1341 + v1478);
            v1480 = (void *)((char *)v1342 + v1478);
            v2564 = (void *)v1480[1];
            void *v1479 = *v1480;
            v1479[1] = v2564;
            uint64_t v1481 = v1343[25];
            v1482 = (void *)((char *)v1341 + v1481);
            v1483 = (void *)((char *)v1342 + v1481);
            uint64_t v2527 = v1483[1];
            void *v1482 = *v1483;
            v1482[1] = v2527;
            uint64_t v1484 = v1343[26];
            v1485 = (void *)((char *)v1341 + v1484);
            v1486 = (void *)((char *)v1342 + v1484);
            v2519 = (void *)v1486[1];
            void *v1485 = *v1486;
            v1485[1] = v2519;
            uint64_t v1487 = v1343[27];
            v1488 = (void *)((char *)v1341 + v1487);
            v1489 = (void *)((char *)v1342 + v1487);
            uint64_t v2512 = v1489[1];
            void *v1488 = *v1489;
            v1488[1] = v2512;
            uint64_t v1490 = v1343[28];
            v1491 = (void *)((char *)v1341 + v1490);
            v1492 = (void *)((char *)v1342 + v1490);
            v2505 = (void *)v1492[1];
            void *v1491 = *v1492;
            v1491[1] = v2505;
            uint64_t v1493 = v1343[29];
            v1494 = (void *)((char *)v1341 + v1493);
            v1495 = (void *)((char *)v1342 + v1493);
            v2493 = (void *)v1495[1];
            void *v1494 = *v1495;
            v1494[1] = v2493;
            uint64_t v1496 = v1343[30];
            v1497 = (void *)((char *)v1341 + v1496);
            v1498 = (void *)((char *)v1342 + v1496);
            uint64_t v2487 = (void *)v1498[1];
            void *v1497 = *v1498;
            v1497[1] = v2487;
            uint64_t v1499 = v1343[31];
            v1500 = (void *)((char *)v1341 + v1499);
            v1501 = (void *)((char *)v1342 + v1499);
            uint64_t v2483 = v1501[1];
            void *v1500 = *v1501;
            v1500[1] = v2483;
            uint64_t v1502 = v1343[32];
            v1503 = (void *)((char *)v1341 + v1502);
            v1504 = (void *)((char *)v1342 + v1502);
            uint64_t v2477 = v1504[1];
            void *v1503 = *v1504;
            v1503[1] = v2477;
            *(void *)((char *)v1341 + v1343[33]) = *(void *)((char *)v1342 + v1343[33]);
            *(void *)((char *)v1341 + v1343[34]) = *(void *)((char *)v1342 + v1343[34]);
            uint64_t v1505 = v1343[35];
            v1506 = (void *)((char *)v1341 + v1505);
            v1507 = (void *)((char *)v1342 + v1505);
            uint64_t v1508 = v1507[1];
            void *v1506 = *v1507;
            v1506[1] = v1508;
            uint64_t v1509 = v1343[36];
            v1510 = (void *)((char *)v1341 + v1509);
            uint64_t v1511 = (void *)((char *)v1342 + v1509);
            uint64_t v1512 = v1511[1];
            void *v1510 = *v1511;
            v1510[1] = v1512;
            uint64_t v1513 = v1343[37];
            v1514 = (void *)((char *)v1341 + v1513);
            uint64_t v1515 = (void *)((char *)v1342 + v1513);
            uint64_t v1516 = v1515[1];
            void *v1514 = *v1515;
            v1514[1] = v1516;
            uint64_t v1517 = v1343[38];
            v2499 = (char *)v1341 + v1517;
            v1518 = (char *)v1342 + v1517;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1518, 1, v2680))
            {
              uint64_t v1519 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2499, v1518, *(void *)(*(void *)(v1519 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2499, v1518, v2680);
              __swift_storeEnumTagSinglePayload((uint64_t)v2499, 0, 1, v2680);
            }
            uint64_t v1635 = v1343[39];
            v1636 = (void *)((char *)v1341 + v1635);
            uint64_t v1637 = (void *)((char *)v1342 + v1635);
            uint64_t v1638 = v1637[1];
            void *v1636 = *v1637;
            v1636[1] = v1638;
            uint64_t v1639 = v1343[40];
            v1640 = (void *)((char *)v1341 + v1639);
            uint64_t v1641 = (void *)((char *)v1342 + v1639);
            uint64_t v1642 = v1641[1];
            void *v1640 = *v1641;
            v1640[1] = v1642;
            uint64_t v1643 = v1343[41];
            v1644 = (char *)v1341 + v1643;
            uint64_t v1645 = (char *)v1342 + v1643;
            v1644[8] = v1645[8];
            *(void *)v1644 = *(void *)v1645;
            uint64_t v1646 = v1343[42];
            v1647 = (void *)((char *)v1341 + v1646);
            v1648 = (void *)((char *)v1342 + v1646);
            uint64_t v1649 = v1648[1];
            void *v1647 = *v1648;
            v1647[1] = v1649;
            uint64_t v1650 = v1343[43];
            v1651 = (char *)v1341 + v1650;
            uint64_t v1652 = (char *)v1342 + v1650;
            *(_OWORD *)v1651 = *(_OWORD *)v1652;
            *(void *)(v1651 + 13) = *(void *)(v1652 + 13);
            uint64_t v1653 = v1343[44];
            v1654 = (void *)((char *)v1341 + v1653);
            v1655 = (void *)((char *)v1342 + v1653);
            uint64_t v1656 = v1655[1];
            void *v1654 = *v1655;
            v1654[1] = v1656;
            uint64_t v1657 = v1343[45];
            v1658 = (void *)((char *)v1341 + v1657);
            uint64_t v1659 = (void *)((char *)v1342 + v1657);
            uint64_t v1660 = v1659[1];
            void *v1658 = *v1659;
            v1658[1] = v1660;
            uint64_t v1661 = v1343[46];
            v1662 = (void *)((char *)v1341 + v1661);
            uint64_t v1663 = (void *)((char *)v1342 + v1661);
            uint64_t v1664 = v1663[1];
            void *v1662 = *v1663;
            v1662[1] = v1664;
            uint64_t v1665 = v1343[47];
            v1666 = (void *)((char *)v1341 + v1665);
            uint64_t v1667 = (void *)((char *)v1342 + v1665);
            uint64_t v1668 = v1667[1];
            void *v1666 = *v1667;
            v1666[1] = v1668;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1341, 0, 1, (uint64_t)v1343);
            uint64_t v859 = v2641;
            uint64_t v537 = (uint64_t)v2668;
            long long v372 = v2617;
          }
          uint64_t v1669 = v859[12];
          v1670 = (void *)(v537 + v1669);
          uint64_t v1671 = (void *)((char *)v372 + v1669);
          uint64_t v1672 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1671, 1, (uint64_t)v1672))
          {
            uint64_t v1673 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v1670, v1671, *(void *)(*(void *)(v1673 - 8) + 64));
          }
          else
          {
            uint64_t v1674 = v1671[1];
            void *v1670 = *v1671;
            v1670[1] = v1674;
            uint64_t v1675 = v1671[3];
            v1670[2] = v1671[2];
            v1670[3] = v1675;
            uint64_t v1676 = v1671[5];
            v1670[4] = v1671[4];
            v1670[5] = v1676;
            uint64_t v1677 = v1671[7];
            v1670[6] = v1671[6];
            v1670[7] = v1677;
            uint64_t v1678 = v1671[9];
            v1670[8] = v1671[8];
            v1670[9] = v1678;
            uint64_t v1679 = v1671[11];
            v1670[10] = v1671[10];
            v1670[11] = v1679;
            *((unsigned char *)v1670 + 96) = *((unsigned char *)v1671 + 96);
            uint64_t v1680 = v1671[14];
            v1670[13] = v1671[13];
            v1670[14] = v1680;
            uint64_t v1681 = v1671[16];
            v1670[15] = v1671[15];
            v1670[16] = v1681;
            uint64_t v1682 = v1672[14];
            v2594 = (char *)v1670 + v1682;
            uint64_t v1683 = (char *)v1671 + v1682;
            v2507 = (void *)type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1683, 1, (uint64_t)v2507))
            {
              uint64_t v1684 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2594, v1683, *(void *)(*(void *)(v1684 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v2507 - 1) + 16))(v2594, v1683, v2507);
              __swift_storeEnumTagSinglePayload((uint64_t)v2594, 0, 1, (uint64_t)v2507);
            }
            uint64_t v1739 = v1672[15];
            uint64_t v1740 = (char *)v1670 + v1739;
            uint64_t v1741 = (char *)v1671 + v1739;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1671 + v1739, 1, (uint64_t)v2507))
            {
              uint64_t v1742 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1740, v1741, *(void *)(*(void *)(v1742 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v2507 - 1) + 16))(v1740, v1741, v2507);
              __swift_storeEnumTagSinglePayload((uint64_t)v1740, 0, 1, (uint64_t)v2507);
            }
            uint64_t v1802 = v1672[16];
            uint64_t v1803 = (void *)((char *)v1670 + v1802);
            uint64_t v1804 = (void *)((char *)v1671 + v1802);
            uint64_t v1805 = v1804[1];
            *uint64_t v1803 = *v1804;
            v1803[1] = v1805;
            uint64_t v1806 = v1672[17];
            v1807 = (void *)((char *)v1670 + v1806);
            uint64_t v1808 = (void *)((char *)v1671 + v1806);
            uint64_t v1809 = v1808[1];
            void *v1807 = *v1808;
            v1807[1] = v1809;
            uint64_t v1810 = v1672[18];
            v1811 = (void *)((char *)v1670 + v1810);
            uint64_t v1812 = (void *)((char *)v1671 + v1810);
            v2598 = (void *)v1812[1];
            void *v1811 = *v1812;
            v1811[1] = v2598;
            uint64_t v1813 = v1672[19];
            v1814 = (void *)((char *)v1670 + v1813);
            v1815 = (void *)((char *)v1671 + v1813);
            v2571 = (void *)v1815[1];
            void *v1814 = *v1815;
            v1814[1] = v2571;
            uint64_t v1816 = v1672[20];
            v1817 = (void *)((char *)v1670 + v1816);
            v1818 = (void *)((char *)v1671 + v1816);
            v2521 = (void *)v1818[1];
            void *v1817 = *v1818;
            v1817[1] = v2521;
            *(void *)((char *)v1670 + v1672[21]) = *(void *)((char *)v1671 + v1672[21]);
            *(void *)((char *)v1670 + v1672[22]) = *(void *)((char *)v1671 + v1672[22]);
            uint64_t v1819 = v1672[23];
            v1820 = (char *)v1670 + v1819;
            v1821 = (char *)v1671 + v1819;
            *(void *)v1820 = *(void *)v1821;
            v1820[8] = v1821[8];
            uint64_t v1822 = v1672[24];
            v1823 = (char *)v1670 + v1822;
            v1824 = (char *)v1671 + v1822;
            *(void *)v1823 = *(void *)v1824;
            v1823[8] = v1824[8];
            uint64_t v1825 = v1672[25];
            v1826 = (void *)((char *)v1670 + v1825);
            v1827 = (void *)((char *)v1671 + v1825);
            uint64_t v1828 = v1827[1];
            void *v1826 = *v1827;
            v1826[1] = v1828;
            uint64_t v1829 = v1672[26];
            v1830 = (void *)((char *)v1670 + v1829);
            uint64_t v1831 = (void *)((char *)v1671 + v1829);
            uint64_t v1832 = v1831[1];
            void *v1830 = *v1831;
            v1830[1] = v1832;
            uint64_t v1833 = v1672[27];
            v1834 = (void *)((char *)v1670 + v1833);
            uint64_t v1835 = (void *)((char *)v1671 + v1833);
            uint64_t v1836 = v1835[1];
            void *v1834 = *v1835;
            v1834[1] = v1836;
            uint64_t v1837 = v1672[28];
            v1838 = (void *)((char *)v1670 + v1837);
            uint64_t v1839 = (void *)((char *)v1671 + v1837);
            uint64_t v1840 = v1839[1];
            void *v1838 = *v1839;
            v1838[1] = v1840;
            uint64_t v1841 = v1672[29];
            v1842 = (char *)v1670 + v1841;
            uint64_t v1843 = (char *)v1671 + v1841;
            *(void *)v1842 = *(void *)v1843;
            v1842[8] = v1843[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1670, 0, 1, (uint64_t)v1672);
            uint64_t v859 = v2641;
            uint64_t v537 = (uint64_t)v2668;
            long long v372 = v2617;
          }
          uint64_t v1844 = v859[13];
          v1845 = (void *)(v537 + v1844);
          v1846 = (void *)((char *)v372 + v1844);
          uint64_t v1847 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1846, 1, (uint64_t)v1847))
          {
            uint64_t v1848 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v1845, v1846, *(void *)(*(void *)(v1848 - 8) + 64));
          }
          else
          {
            uint64_t v1849 = v1846[1];
            void *v1845 = *v1846;
            v1845[1] = v1849;
            uint64_t v1850 = v1846[3];
            v1845[2] = v1846[2];
            v1845[3] = v1850;
            uint64_t v1851 = v1846[5];
            v1845[4] = v1846[4];
            v1845[5] = v1851;
            uint64_t v1852 = v1846[7];
            v1845[6] = v1846[6];
            v1845[7] = v1852;
            uint64_t v1853 = v1846[9];
            v1845[8] = v1846[8];
            v1845[9] = v1853;
            uint64_t v1854 = v1846[11];
            v1845[10] = v1846[10];
            v1845[11] = v1854;
            *((unsigned char *)v1845 + 96) = *((unsigned char *)v1846 + 96);
            uint64_t v1855 = v1846[14];
            v1845[13] = v1846[13];
            v1845[14] = v1855;
            uint64_t v1856 = v1846[16];
            v1845[15] = v1846[15];
            v1845[16] = v1856;
            uint64_t v1857 = v1847[14];
            uint64_t v2620 = (char *)v1845 + v1857;
            uint64_t v1858 = (char *)v1846 + v1857;
            uint64_t v2514 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1858, 1, v2514))
            {
              uint64_t v1859 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2620, v1858, *(void *)(*(void *)(v1859 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v2514 - 8) + 16))(v2620, v1858, v2514);
              __swift_storeEnumTagSinglePayload((uint64_t)v2620, 0, 1, v2514);
            }
            uint64_t v2087 = v1847[15];
            v2088 = (void *)((char *)v1845 + v2087);
            v2089 = (void *)((char *)v1846 + v2087);
            uint64_t v2090 = v2089[1];
            void *v2088 = *v2089;
            v2088[1] = v2090;
            uint64_t v2091 = v1847[16];
            uint64_t v2092 = (void *)((char *)v1845 + v2091);
            v2093 = (void *)((char *)v1846 + v2091);
            uint64_t v2094 = v2093[1];
            *uint64_t v2092 = *v2093;
            v2092[1] = v2094;
            uint64_t v2095 = v1847[17];
            uint64_t v2096 = (void *)((char *)v1845 + v2095);
            v2097 = (void *)((char *)v1846 + v2095);
            uint64_t v2627 = v2097[1];
            *uint64_t v2096 = *v2097;
            v2096[1] = v2627;
            uint64_t v2098 = v1847[18];
            uint64_t v2099 = (void *)((char *)v1845 + v2098);
            uint64_t v2100 = (void *)((char *)v1846 + v2098);
            v2603 = (void *)v2100[1];
            *uint64_t v2099 = *v2100;
            v2099[1] = v2603;
            uint64_t v2101 = v1847[19];
            v2102 = (void *)((char *)v1845 + v2101);
            uint64_t v2103 = (void *)((char *)v1846 + v2101);
            uint64_t v2104 = v2103[1];
            void *v2102 = *v2103;
            v2102[1] = v2104;
            *(void *)((char *)v1845 + v1847[20]) = *(void *)((char *)v1846 + v1847[20]);
            uint64_t v2105 = v1847[21];
            uint64_t v2106 = (void *)((char *)v1845 + v2105);
            v2107 = (void *)((char *)v1846 + v2105);
            uint64_t v2108 = v2107[1];
            *uint64_t v2106 = *v2107;
            v2106[1] = v2108;
            uint64_t v2109 = v1847[22];
            uint64_t v2110 = (void *)((char *)v1845 + v2109);
            v2111 = (void *)((char *)v1846 + v2109);
            uint64_t v2112 = v2111[1];
            *uint64_t v2110 = *v2111;
            v2110[1] = v2112;
            uint64_t v2113 = v1847[23];
            uint64_t v2114 = (void *)((char *)v1845 + v2113);
            v2115 = (void *)((char *)v1846 + v2113);
            uint64_t v2116 = v2115[1];
            *uint64_t v2114 = *v2115;
            v2114[1] = v2116;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1845, 0, 1, (uint64_t)v1847);
            uint64_t v859 = v2641;
            uint64_t v537 = (uint64_t)v2668;
          }
          __swift_storeEnumTagSinglePayload(v537, 0, 1, (uint64_t)v859);
          uint64_t v364 = v2751;
        }
        uint64_t v2117 = v2695[18];
        uint64_t v2118 = (void *)((char *)v364 + v2117);
        v2119 = (void *)((char *)v2712 + v2117);
        uint64_t v2120 = type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2119, 1, v2120))
        {
          uint64_t v2121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v2118, v2119, *(void *)(*(void *)(v2121 - 8) + 64));
        }
        else
        {
          uint64_t v2122 = v2119[1];
          *uint64_t v2118 = *v2119;
          v2118[1] = v2122;
          uint64_t v2123 = v2119[3];
          v2118[2] = v2119[2];
          v2118[3] = v2123;
          uint64_t v2124 = v2119[5];
          v2118[4] = v2119[4];
          v2118[5] = v2124;
          uint64_t v2125 = v2119[7];
          v2118[6] = v2119[6];
          v2118[7] = v2125;
          uint64_t v2126 = v2119[9];
          v2118[8] = v2119[8];
          v2118[9] = v2126;
          uint64_t v2127 = (int *)v2120;
          uint64_t v2128 = v2119[11];
          v2118[10] = v2119[10];
          v2118[11] = v2128;
          uint64_t v2671 = v2127;
          uint64_t v2129 = v2127[10];
          v2648 = (char *)v2118 + v2129;
          uint64_t v2130 = (char *)v2119 + v2129;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2130, 1, v2680))
          {
            uint64_t v2131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2648, v2130, *(void *)(*(void *)(v2131 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2648, v2130, v2680);
            __swift_storeEnumTagSinglePayload((uint64_t)v2648, 0, 1, v2680);
          }
          uint64_t v2132 = v2671[11];
          uint64_t v2133 = (char *)v2118 + v2132;
          uint64_t v2134 = (char *)v2119 + v2132;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2119 + v2132, 1, v2680))
          {
            uint64_t v2135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2133, v2134, *(void *)(*(void *)(v2135 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2133, v2134, v2680);
            __swift_storeEnumTagSinglePayload((uint64_t)v2133, 0, 1, v2680);
          }
          uint64_t v2136 = v2671[12];
          uint64_t v2137 = (void *)((char *)v2118 + v2136);
          v2138 = (void *)((char *)v2119 + v2136);
          uint64_t v2139 = v2138[1];
          *uint64_t v2137 = *v2138;
          v2137[1] = v2139;
          uint64_t v2140 = v2671[13];
          uint64_t v2141 = (void *)((char *)v2118 + v2140);
          v2142 = (void *)((char *)v2119 + v2140);
          uint64_t v2143 = v2142[1];
          *uint64_t v2141 = *v2142;
          v2141[1] = v2143;
          uint64_t v2144 = v2671[14];
          uint64_t v2145 = (void *)((char *)v2118 + v2144);
          v2146 = (void *)((char *)v2119 + v2144);
          uint64_t v2147 = v2146[1];
          *uint64_t v2145 = *v2146;
          v2145[1] = v2147;
          uint64_t v2148 = v2671[15];
          uint64_t v2149 = (char *)v2118 + v2148;
          v2150 = (char *)v2119 + v2148;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2150, 1, v2680))
          {
            uint64_t v2151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2149, v2150, *(void *)(*(void *)(v2151 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2149, v2150, v2680);
            __swift_storeEnumTagSinglePayload((uint64_t)v2149, 0, 1, v2680);
          }
          uint64_t v2152 = v2671[16];
          uint64_t v2153 = (void *)((char *)v2118 + v2152);
          v2154 = (void *)((char *)v2119 + v2152);
          uint64_t v2155 = v2154[1];
          *uint64_t v2153 = *v2154;
          v2153[1] = v2155;
          uint64_t v2156 = v2671[17];
          uint64_t v2157 = (void *)((char *)v2118 + v2156);
          v2158 = (void *)((char *)v2119 + v2156);
          uint64_t v2649 = v2158[1];
          *uint64_t v2157 = *v2158;
          v2157[1] = v2649;
          uint64_t v2159 = v2671[18];
          uint64_t v2160 = (void *)((char *)v2118 + v2159);
          uint64_t v2161 = (void *)((char *)v2119 + v2159);
          uint64_t v2162 = v2161[1];
          *uint64_t v2160 = *v2161;
          v2160[1] = v2162;
          uint64_t v2163 = v2671[19];
          uint64_t v2164 = (void *)((char *)v2118 + v2163);
          v2165 = (void *)((char *)v2119 + v2163);
          uint64_t v2166 = v2165[1];
          *uint64_t v2164 = *v2165;
          v2164[1] = v2166;
          uint64_t v2167 = v2671[20];
          uint64_t v2168 = (void *)((char *)v2118 + v2167);
          v2169 = (void *)((char *)v2119 + v2167);
          uint64_t v2170 = v2169[1];
          *uint64_t v2168 = *v2169;
          v2168[1] = v2170;
          uint64_t v2171 = v2671[21];
          uint64_t v2172 = (void *)((char *)v2118 + v2171);
          v2173 = (void *)((char *)v2119 + v2171);
          uint64_t v2174 = v2173[1];
          *uint64_t v2172 = *v2173;
          v2172[1] = v2174;
          uint64_t v2175 = v2671[22];
          uint64_t v2176 = (void *)((char *)v2118 + v2175);
          v2177 = (void *)((char *)v2119 + v2175);
          uint64_t v2178 = v2177[1];
          *uint64_t v2176 = *v2177;
          v2176[1] = v2178;
          uint64_t v2179 = v2671[23];
          uint64_t v2180 = (void *)((char *)v2118 + v2179);
          v2181 = (void *)((char *)v2119 + v2179);
          uint64_t v2182 = v2181[1];
          *uint64_t v2180 = *v2181;
          v2180[1] = v2182;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2118, 0, 1, (uint64_t)v2671);
          uint64_t v364 = v2751;
        }
        uint64_t v2183 = v2695[19];
        uint64_t v2184 = (void *)((char *)v364 + v2183);
        uint64_t v25 = v2712;
        v2185 = (void *)((char *)v2712 + v2183);
        v2186 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2185, 1, (uint64_t)v2186))
        {
          uint64_t v2187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v2184, v2185, *(void *)(*(void *)(v2187 - 8) + 64));
        }
        else
        {
          uint64_t v2188 = v2185[1];
          *uint64_t v2184 = *v2185;
          v2184[1] = v2188;
          uint64_t v2189 = v2185[3];
          v2184[2] = v2185[2];
          v2184[3] = v2189;
          uint64_t v2190 = v2185[5];
          v2184[4] = v2185[4];
          v2184[5] = v2190;
          uint64_t v2191 = v2185[7];
          v2184[6] = v2185[6];
          v2184[7] = v2191;
          uint64_t v2650 = v2185[9];
          v2184[8] = v2185[8];
          v2184[9] = v2650;
          uint64_t v2628 = v2185[11];
          v2184[10] = v2185[10];
          v2184[11] = v2628;
          uint64_t v2192 = v2186[11];
          v2672 = (char *)v2184 + v2192;
          uint64_t v2604 = (char *)v2185 + v2192;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2604, 1, v2680))
          {
            uint64_t v2193 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2672, v2604, *(void *)(*(void *)(v2193 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2672, v2604, v2680);
            __swift_storeEnumTagSinglePayload((uint64_t)v2672, 0, 1, v2680);
          }
          uint64_t v2194 = v2186[12];
          uint64_t v2195 = (void *)((char *)v2184 + v2194);
          uint64_t v2196 = (void *)((char *)v2185 + v2194);
          uint64_t v2197 = v2196[1];
          *uint64_t v2195 = *v2196;
          v2195[1] = v2197;
          *(void *)((char *)v2184 + v2186[13]) = *(void *)((char *)v2185 + v2186[13]);
          uint64_t v2198 = v2186[14];
          uint64_t v2199 = (char *)v2184 + v2198;
          uint64_t v2200 = (char *)v2185 + v2198;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2200, 1, v2680))
          {
            uint64_t v2201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2199, v2200, *(void *)(*(void *)(v2201 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2199, v2200, v2680);
            __swift_storeEnumTagSinglePayload((uint64_t)v2199, 0, 1, v2680);
          }
          *(void *)((char *)v2184 + v2186[15]) = *(void *)((char *)v2185 + v2186[15]);
          *(void *)((char *)v2184 + v2186[16]) = *(void *)((char *)v2185 + v2186[16]);
          uint64_t v2202 = v2186[17];
          uint64_t v2203 = (void *)((char *)v2184 + v2202);
          uint64_t v2204 = (void *)((char *)v2185 + v2202);
          uint64_t v2205 = v2204[1];
          *uint64_t v2203 = *v2204;
          v2203[1] = v2205;
          *(void *)((char *)v2184 + v2186[18]) = *(void *)((char *)v2185 + v2186[18]);
          *(void *)((char *)v2184 + v2186[19]) = *(void *)((char *)v2185 + v2186[19]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2184, 0, 1, (uint64_t)v2186);
        }
        uint64_t v2206 = v2695[20];
        uint64_t v2207 = (void *)((char *)v2751 + v2206);
        uint64_t v2208 = (void *)((char *)v2712 + v2206);
        v2209 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2208, 1, (uint64_t)v2209))
        {
          uint64_t v2210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v2207, v2208, *(void *)(*(void *)(v2210 - 8) + 64));
        }
        else
        {
          uint64_t v2211 = v2208[1];
          *uint64_t v2207 = *v2208;
          v2207[1] = v2211;
          uint64_t v2212 = v2208[3];
          v2207[2] = v2208[2];
          v2207[3] = v2212;
          uint64_t v2213 = v2208[5];
          v2207[4] = v2208[4];
          v2207[5] = v2213;
          uint64_t v2214 = v2208[7];
          v2207[6] = v2208[6];
          v2207[7] = v2214;
          uint64_t v2215 = v2209[8];
          uint64_t v2651 = (char *)v2208 + v2215;
          uint64_t v2673 = (char *)v2207 + v2215;
          uint64_t v2216 = type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2651, 1, v2216))
          {
            uint64_t v2217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2673, v2651, *(void *)(*(void *)(v2217 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2216 - 8) + 16))(v2673, v2651, v2216);
            __swift_storeEnumTagSinglePayload((uint64_t)v2673, 0, 1, v2216);
          }
          uint64_t v2218 = v2209[9];
          uint64_t v2219 = (void *)((char *)v2207 + v2218);
          uint64_t v2220 = (void *)((char *)v2208 + v2218);
          uint64_t v2221 = v2220[1];
          *uint64_t v2219 = *v2220;
          v2219[1] = v2221;
          uint64_t v2222 = v2209[10];
          uint64_t v2223 = (void *)((char *)v2207 + v2222);
          uint64_t v2224 = (void *)((char *)v2208 + v2222);
          uint64_t v2225 = v2224[1];
          *uint64_t v2223 = *v2224;
          v2223[1] = v2225;
          uint64_t v2226 = v2209[11];
          uint64_t v2227 = (void *)((char *)v2207 + v2226);
          uint64_t v2228 = (void *)((char *)v2208 + v2226);
          uint64_t v2229 = v2228[1];
          *uint64_t v2227 = *v2228;
          v2227[1] = v2229;
          uint64_t v2230 = v2209[12];
          uint64_t v2231 = (char *)v2207 + v2230;
          uint64_t v2232 = (char *)v2208 + v2230;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2232, 1, v2680))
          {
            uint64_t v2233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2231, v2232, *(void *)(*(void *)(v2233 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2231, v2232, v2680);
            __swift_storeEnumTagSinglePayload((uint64_t)v2231, 0, 1, v2680);
          }
          uint64_t v2234 = v2209[13];
          uint64_t v2235 = (char *)v2207 + v2234;
          uint64_t v2236 = (char *)v2208 + v2234;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2208 + v2234, 1, v2680))
          {
            uint64_t v2237 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2235, v2236, *(void *)(*(void *)(v2237 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v2680 - 8) + 16))(v2235, v2236, v2680);
            __swift_storeEnumTagSinglePayload((uint64_t)v2235, 0, 1, v2680);
          }
          uint64_t v2238 = v2209[14];
          uint64_t v2239 = (char *)v2207 + v2238;
          uint64_t v2240 = (char *)v2208 + v2238;
          *(void *)uint64_t v2239 = *(void *)v2240;
          v2239[8] = v2240[8];
          uint64_t v2241 = v2209[15];
          v2242 = (void *)((char *)v2207 + v2241);
          uint64_t v2243 = (void *)((char *)v2208 + v2241);
          uint64_t v2244 = v2243[1];
          void *v2242 = *v2243;
          v2242[1] = v2244;
          uint64_t v2245 = v2209[16];
          v2246 = (void *)((char *)v2207 + v2245);
          uint64_t v2247 = (void *)((char *)v2208 + v2245);
          uint64_t v2248 = v2247[1];
          void *v2246 = *v2247;
          v2246[1] = v2248;
          uint64_t v2249 = v2209[17];
          uint64_t v2250 = (void *)((char *)v2207 + v2249);
          uint64_t v2251 = (void *)((char *)v2208 + v2249);
          uint64_t v2252 = v2251[1];
          *uint64_t v2250 = *v2251;
          v2250[1] = v2252;
          uint64_t v2253 = v2209[18];
          uint64_t v2254 = (void *)((char *)v2207 + v2253);
          uint64_t v2255 = (void *)((char *)v2208 + v2253);
          uint64_t v2256 = v2255[1];
          *uint64_t v2254 = *v2255;
          v2254[1] = v2256;
          uint64_t v2257 = v2209[19];
          uint64_t v2258 = (void *)((char *)v2207 + v2257);
          uint64_t v2259 = (void *)((char *)v2208 + v2257);
          uint64_t v2260 = v2259[1];
          *uint64_t v2258 = *v2259;
          v2258[1] = v2260;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2207, 0, 1, (uint64_t)v2209);
        }
        uint64_t v24 = v2751;
        uint64_t v2261 = v2695[21];
        uint64_t v2262 = (void *)((char *)v2751 + v2261);
        uint64_t v2263 = (void *)((char *)v2712 + v2261);
        uint64_t v2264 = *(void *)((char *)v2712 + v2261 + 8);
        if (v2264)
        {
          *uint64_t v2262 = *v2263;
          v2262[1] = v2264;
          uint64_t v2265 = v2263[3];
          v2262[2] = v2263[2];
          v2262[3] = v2265;
          uint64_t v2266 = v2263[5];
          v2262[4] = v2263[4];
          v2262[5] = v2266;
          uint64_t v2267 = v2263[7];
          v2262[6] = v2263[6];
          v2262[7] = v2267;
          uint64_t v2268 = v2263[9];
          v2262[8] = v2263[8];
          v2262[9] = v2268;
          uint64_t v2269 = v2263[11];
          v2262[10] = v2263[10];
          v2262[11] = v2269;
          uint64_t v2270 = v2263[13];
          v2262[12] = v2263[12];
          v2262[13] = v2270;
          uint64_t v2271 = v2263[15];
          v2262[14] = v2263[14];
          v2262[15] = v2271;
          uint64_t v2708 = v2263[17];
          v2262[16] = v2263[16];
          v2262[17] = v2708;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v24 = v2751;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_504:
          swift_bridgeObjectRetain();
        }
        else
        {
          memcpy(v2262, v2263, 0x90uLL);
        }
        uint64_t v11 = v2738;
LABEL_506:
        uint64_t v3 = v2750;
LABEL_507:
        uint64_t v26 = v2749;
        goto LABEL_551;
      case 4u:
        uint64_t v2739 = v11;
        uint64_t v79 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v79;
        uint64_t v80 = v24;
        uint64_t v81 = v25[3];
        v80[2] = v25[2];
        v80[3] = v81;
        uint64_t v82 = v25[5];
        v80[4] = v25[4];
        v80[5] = v82;
        uint64_t v83 = v25[7];
        v80[6] = v25[6];
        v80[7] = v83;
        uint64_t v84 = type metadata accessor for NoteDocument(0);
        uint64_t v85 = *(int *)(v84 + 32);
        v2713 = (char *)v80 + v85;
        uint64_t v86 = (char *)v25 + v85;
        uint64_t v87 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v86, 1, v87))
        {
          uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2713, v86, *(void *)(*(void *)(v88 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 16))(v2713, v86, v87);
          __swift_storeEnumTagSinglePayload((uint64_t)v2713, 0, 1, v87);
        }
        uint64_t v11 = v2739;
        uint64_t v26 = v2749;
        uint64_t v24 = v2751;
        uint64_t v374 = *(int *)(v84 + 36);
        goto LABEL_148;
      case 5u:
        uint64_t v2740 = v11;
        uint64_t v89 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v89;
        uint64_t v90 = v24;
        uint64_t v91 = v25[3];
        v90[2] = v25[2];
        v90[3] = v91;
        uint64_t v92 = v25[5];
        v90[4] = v25[4];
        v90[5] = v92;
        uint64_t v93 = (int *)type metadata accessor for Reminder(0);
        uint64_t v94 = v93[7];
        uint64_t v95 = (char *)v90 + v94;
        uint64_t v96 = (char *)v25 + v94;
        uint64_t v97 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v96, 1, v97))
        {
          uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v95, v96, *(void *)(*(void *)(v98 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v95, v96, v97);
          __swift_storeEnumTagSinglePayload((uint64_t)v95, 0, 1, v97);
        }
        uint64_t v11 = v2740;
        uint64_t v24 = v2751;
        uint64_t v375 = v93[8];
        uint64_t v376 = (char *)v2751 + v375;
        long long v377 = (char *)v25 + v375;
        if (__swift_getEnumTagSinglePayload((uint64_t)v25 + v375, 1, v97))
        {
          uint64_t v378 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v376, v377, *(void *)(*(void *)(v378 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v376, v377, v97);
          __swift_storeEnumTagSinglePayload((uint64_t)v376, 0, 1, v97);
        }
        *((unsigned char *)v2751 + v93[9]) = *((unsigned char *)v25 + v93[9]);
        uint64_t v543 = v93[10];
        uint64_t v544 = (void *)((char *)v2751 + v543);
        uint64_t v545 = (void *)((char *)v25 + v543);
        uint64_t v546 = v545[1];
        *uint64_t v544 = *v545;
        v544[1] = v546;
        uint64_t v547 = v93[11];
        uint64_t v548 = (void *)((char *)v2751 + v547);
        uint64_t v549 = (void *)((char *)v25 + v547);
        uint64_t v550 = v549[1];
        *uint64_t v548 = *v549;
        v548[1] = v550;
        uint64_t v387 = v93[12];
        goto LABEL_136;
      case 6u:
        uint64_t v2728 = v4;
        uint64_t v2741 = v11;
        uint64_t v99 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v99;
        uint64_t v100 = v25[3];
        v24[2] = v25[2];
        v24[3] = v100;
        uint64_t v101 = v25[5];
        v24[4] = v25[4];
        v24[5] = v101;
        uint64_t v102 = v25[7];
        v24[6] = v25[6];
        v24[7] = v102;
        uint64_t v103 = type metadata accessor for PhoneHistory(0);
        uint64_t v104 = *(int *)(v103 + 40);
        uint64_t v2696 = (int *)v103;
        v2714 = (char *)v24 + v104;
        uint64_t v105 = (char *)v25 + v104;
        uint64_t v106 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v105, 1, v106))
        {
          uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2714, v105, *(void *)(*(void *)(v107 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16))(v2714, v105, v106);
          __swift_storeEnumTagSinglePayload((uint64_t)v2714, 0, 1, v106);
        }
        uint64_t v4 = v2728;
        uint64_t v11 = v2741;
        uint64_t v379 = v2696[11];
        uint64_t v380 = (void *)((char *)v24 + v379);
        long long v381 = (void *)((char *)v25 + v379);
        uint64_t v382 = v381[1];
        *uint64_t v380 = *v381;
        v380[1] = v382;
        uint64_t v383 = v2696[12];
        uint64_t v384 = (void *)((char *)v24 + v383);
        v385 = (void *)((char *)v25 + v383);
        uint64_t v386 = v385[1];
        *uint64_t v384 = *v385;
        v384[1] = v386;
        uint64_t v387 = v2696[13];
LABEL_136:
        uint64_t v551 = (char *)v24 + v387;
        long long v552 = (char *)v25 + v387;
        uint64_t v553 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v552, 1, v553))
        {
          uint64_t v554 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v551, v552, *(void *)(*(void *)(v554 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v553 - 8) + 16))(v551, v552, v553);
          __swift_storeEnumTagSinglePayload((uint64_t)v551, 0, 1, v553);
        }
        goto LABEL_506;
      case 7u:
        uint64_t v2742 = v11;
        uint64_t v108 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v108;
        uint64_t v109 = v24;
        uint64_t v110 = v25[3];
        v109[2] = v25[2];
        v109[3] = v110;
        uint64_t v111 = v25[5];
        v109[4] = v25[4];
        v109[5] = v111;
        uint64_t v112 = (int *)type metadata accessor for VoicemailTranscript(0);
        uint64_t v113 = v112[7];
        uint64_t v114 = (char *)v109 + v113;
        uint64_t v115 = (char *)v25 + v113;
        uint64_t v116 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v115, 1, v116))
        {
          uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v114, v115, *(void *)(*(void *)(v117 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v116 - 8) + 16))(v114, v115, v116);
          __swift_storeEnumTagSinglePayload((uint64_t)v114, 0, 1, v116);
        }
        uint64_t v11 = v2742;
        uint64_t v26 = v2749;
        uint64_t v24 = v2751;
        goto LABEL_82;
      case 8u:
        uint64_t v118 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v118;
        uint64_t v119 = v25[3];
        v24[2] = v25[2];
        v24[3] = v119;
        uint64_t v120 = v24;
        uint64_t v121 = v25[5];
        v120[4] = v25[4];
        v120[5] = v121;
        uint64_t v122 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
        uint64_t v123 = (char *)v120 + v122;
        uint64_t v124 = (char *)v25 + v122;
        uint64_t v125 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v124, 1, v125))
        {
          uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v123, v124, *(void *)(*(void *)(v126 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v125 - 8) + 16))(v123, v124, v125);
          __swift_storeEnumTagSinglePayload((uint64_t)v123, 0, 1, v125);
        }
LABEL_166:
        uint64_t v3 = v2750;
        uint64_t v24 = v2751;
        goto LABEL_507;
      case 9u:
        uint64_t v127 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v127;
        uint64_t v128 = v24;
        uint64_t v129 = v25[3];
        v128[2] = v25[2];
        v128[3] = v129;
        uint64_t v112 = (int *)type metadata accessor for VoiceMemo(0);
        uint64_t v130 = v112[6];
        v131 = (char *)v128 + v130;
        uint64_t v132 = (char *)v25 + v130;
        uint64_t v133 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v132, 1, v133))
        {
          uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v131, v132, *(void *)(*(void *)(v134 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 16))(v131, v132, v133);
          __swift_storeEnumTagSinglePayload((uint64_t)v131, 0, 1, v133);
        }
        uint64_t v24 = v2751;
        uint64_t v26 = v2749;
        uint64_t v388 = v112[7];
        long long v389 = (char *)v2751 + v388;
        long long v390 = (char *)v25 + v388;
        *(void *)long long v389 = *(void *)v390;
        v389[8] = v390[8];
LABEL_82:
        uint64_t v391 = v112[8];
        goto LABEL_155;
      case 0xAu:
        uint64_t v135 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v135;
        uint64_t v136 = v24;
        uint64_t v137 = v25[3];
        v136[2] = v25[2];
        v136[3] = v137;
        uint64_t v138 = (int *)type metadata accessor for Safari(0);
        uint64_t v139 = v138[6];
        uint64_t v140 = (char *)v136 + v139;
        uint64_t v141 = (char *)v25 + v139;
        uint64_t v142 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v141, 1, v142))
        {
          uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v140, v141, *(void *)(*(void *)(v143 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v142 - 8) + 16))(v140, v141, v142);
          __swift_storeEnumTagSinglePayload((uint64_t)v140, 0, 1, v142);
        }
        uint64_t v24 = v2751;
        uint64_t v26 = v2749;
        uint64_t v392 = v138[7];
        uint64_t v393 = (void *)((char *)v2751 + v392);
        uint64_t v394 = (void *)((char *)v25 + v392);
        uint64_t v395 = v394[1];
        *uint64_t v393 = *v394;
        v393[1] = v395;
        uint64_t v396 = v138[8];
        v397 = (void *)((char *)v2751 + v396);
        uint64_t v398 = (void *)((char *)v25 + v396);
        uint64_t v399 = v398[1];
        void *v397 = *v398;
        v397[1] = v399;
        uint64_t v400 = v138[9];
        v401 = (char *)v2751 + v400;
        uint64_t v402 = (char *)v25 + v400;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v402, 1, v142))
        {
          uint64_t v403 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v401, v402, *(void *)(*(void *)(v403 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v142 - 8) + 16))(v401, v402, v142);
          __swift_storeEnumTagSinglePayload((uint64_t)v401, 0, 1, v142);
        }
        uint64_t v3 = v2750;
        goto LABEL_551;
      case 0xBu:
        uint64_t v144 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v144;
        uint64_t v145 = (void *)v25[2];
        v24[2] = v145;
        swift_bridgeObjectRetain();
        id v146 = v145;
        goto LABEL_551;
      case 0xCu:
        uint64_t v2743 = v11;
        uint64_t v147 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v147;
        uint64_t v148 = v24;
        uint64_t v149 = v25[3];
        v148[2] = v25[2];
        v148[3] = v149;
        uint64_t v150 = v25[5];
        v148[4] = v25[4];
        v148[5] = v150;
        uint64_t v151 = (int *)type metadata accessor for WalletTransaction(0);
        uint64_t v152 = v151[7];
        uint64_t v153 = (char *)v148 + v152;
        uint64_t v154 = (char *)v25 + v152;
        uint64_t v155 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v154, 1, v155))
        {
          uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v153, v154, *(void *)(*(void *)(v156 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v155 - 8) + 16))(v153, v154, v155);
          __swift_storeEnumTagSinglePayload((uint64_t)v153, 0, 1, v155);
        }
        uint64_t v11 = v2743;
        uint64_t v26 = v2749;
        uint64_t v3 = v2750;
        uint64_t v24 = v2751;
        uint64_t v404 = v151[8];
        v405 = (void *)((char *)v2751 + v404);
        uint64_t v406 = (void *)((char *)v25 + v404);
        uint64_t v407 = v406[1];
        void *v405 = *v406;
        v405[1] = v407;
        uint64_t v408 = v151[9];
        v409 = (void *)((char *)v2751 + v408);
        uint64_t v410 = (void *)((char *)v25 + v408);
        uint64_t v411 = v410[1];
        void *v409 = *v410;
        v409[1] = v411;
        uint64_t v412 = v151[10];
        v413 = (void *)((char *)v2751 + v412);
        uint64_t v414 = (void *)((char *)v25 + v412);
        uint64_t v415 = v414[1];
        void *v413 = *v414;
        v413[1] = v415;
        uint64_t v416 = v151[11];
        long long v417 = (char *)v2751 + v416;
        uint64_t v418 = (char *)v25 + v416;
        *(_OWORD *)long long v417 = *(_OWORD *)v418;
        *(void *)(v417 + 13) = *(void *)(v418 + 13);
        uint64_t v419 = v151[12];
        long long v420 = (void *)((char *)v2751 + v419);
        long long v421 = (void *)((char *)v25 + v419);
        uint64_t v422 = v421[1];
        *long long v420 = *v421;
        v420[1] = v422;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_551;
      case 0xDu:
        uint64_t v2744 = v11;
        uint64_t v157 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v157;
        uint64_t v158 = v24;
        uint64_t v159 = v25[3];
        v158[2] = v25[2];
        v158[3] = v159;
        uint64_t v160 = v25[5];
        v158[4] = v25[4];
        v158[5] = v160;
        uint64_t v161 = (int *)type metadata accessor for WalletPass(0);
        uint64_t v162 = v161[7];
        uint64_t v163 = (char *)v158 + v162;
        uint64_t v164 = (char *)v25 + v162;
        uint64_t v165 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v164, 1, v165))
        {
          uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v163, v164, *(void *)(*(void *)(v166 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 16))(v163, v164, v165);
          __swift_storeEnumTagSinglePayload((uint64_t)v163, 0, 1, v165);
        }
        uint64_t v11 = v2744;
        uint64_t v26 = v2749;
        uint64_t v3 = v2750;
        uint64_t v24 = v2751;
        uint64_t v423 = v161[8];
        uint64_t v424 = (void *)((char *)v2751 + v423);
        v425 = (void *)((char *)v25 + v423);
        uint64_t v426 = v425[1];
        *uint64_t v424 = *v425;
        v424[1] = v426;
        *(void *)((char *)v2751 + v161[9]) = *(void *)((char *)v25 + v161[9]);
        swift_bridgeObjectRetain();
        goto LABEL_123;
      case 0xEu:
        uint64_t v167 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v167;
        uint64_t v168 = v25[3];
        v24[2] = v25[2];
        v24[3] = v168;
        uint64_t v169 = v25[5];
        v24[4] = v25[4];
        v24[5] = v169;
        uint64_t v170 = v25[7];
        v24[6] = v25[6];
        v24[7] = v170;
        uint64_t v171 = v25[9];
        v2751[8] = v25[8];
        v2751[9] = v171;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v26 = v2749;
        swift_bridgeObjectRetain();
        uint64_t v24 = v2751;
        goto LABEL_123;
      case 0xFu:
        uint64_t v2745 = v11;
        uint64_t v172 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v172;
        uint64_t v173 = (char *)v25;
        uint64_t v174 = v25[3];
        v24[2] = v25[2];
        v24[3] = v174;
        uint64_t v175 = v25[5];
        v24[4] = v25[4];
        v24[5] = v175;
        uint64_t v2715 = v25[7];
        v24[6] = v25[6];
        v24[7] = v2715;
        uint64_t v2697 = v25[9];
        v24[8] = v25[8];
        v24[9] = v2697;
        uint64_t v2681 = v25[11];
        v24[10] = v25[10];
        v24[11] = v2681;
        *((unsigned char *)v24 + 96) = *((unsigned char *)v25 + 96);
        uint64_t v176 = v25[14];
        v24[13] = v25[13];
        v24[14] = v176;
        uint64_t v177 = (int *)type metadata accessor for FlightReservation(0);
        uint64_t v178 = v177[13];
        v2660 = (char *)v24 + v178;
        uint64_t v179 = (char *)v25 + v178;
        uint64_t v180 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v179, 1, v180))
        {
          uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v2660, v179, *(void *)(*(void *)(v181 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v180 - 8) + 16))(v2660, v179, v180);
          __swift_storeEnumTagSinglePayload((uint64_t)v2660, 0, 1, v180);
        }
        uint64_t v427 = v177[14];
        v428 = (char *)v24 + v427;
        v429 = &v173[v427];
        uint64_t v2735 = v4;
        if (__swift_getEnumTagSinglePayload((uint64_t)&v173[v427], 1, v180))
        {
          uint64_t v430 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v428, v429, *(void *)(*(void *)(v430 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v180 - 8) + 16))(v428, v429, v180);
          __swift_storeEnumTagSinglePayload((uint64_t)v428, 0, 1, v180);
        }
        uint64_t v555 = v177[15];
        long long v556 = (void *)((char *)v24 + v555);
        uint64_t v557 = &v173[v555];
        uint64_t v558 = *((void *)v557 + 1);
        *long long v556 = *(void *)v557;
        v556[1] = v558;
        uint64_t v559 = v177[16];
        uint64_t v560 = (void *)((char *)v24 + v559);
        uint64_t v561 = &v173[v559];
        uint64_t v562 = *((void *)v561 + 1);
        *uint64_t v560 = *(void *)v561;
        v560[1] = v562;
        uint64_t v563 = v177[17];
        uint64_t v564 = (void *)((char *)v24 + v563);
        uint64_t v565 = &v173[v563];
        uint64_t v566 = *((void *)v565 + 1);
        *uint64_t v564 = *(void *)v565;
        v564[1] = v566;
        uint64_t v567 = v177[18];
        v2704 = &v173[v567];
        v2724 = (char *)v24 + v567;
        uint64_t v568 = type metadata accessor for DateComponents();
        uint64_t v569 = *(void (**)(char *, char *, uint64_t))(*(void *)(v568 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v569(v2724, v2704, v568);
        v569((char *)v24 + v177[19], &v173[v177[19]], v568);
        uint64_t v570 = v177[20];
        long long v571 = (void *)((char *)v24 + v570);
        uint64_t v572 = &v173[v570];
        uint64_t v573 = *((void *)v572 + 1);
        *long long v571 = *(void *)v572;
        v571[1] = v573;
        uint64_t v574 = v177[21];
        uint64_t v575 = (void *)((char *)v24 + v574);
        uint64_t v576 = &v173[v574];
        uint64_t v577 = *((void *)v576 + 1);
        *uint64_t v575 = *(void *)v576;
        v575[1] = v577;
        uint64_t v578 = v177[22];
        uint64_t v579 = (void *)((char *)v24 + v578);
        uint64_t v580 = &v173[v578];
        uint64_t v2725 = *((void *)v580 + 1);
        *uint64_t v579 = *(void *)v580;
        v579[1] = v2725;
        uint64_t v581 = v177[23];
        long long v582 = (void *)((char *)v24 + v581);
        uint64_t v583 = &v173[v581];
        uint64_t v2705 = *((void *)v583 + 1);
        *long long v582 = *(void *)v583;
        v582[1] = v2705;
        uint64_t v584 = v177[24];
        long long v585 = (void *)((char *)v24 + v584);
        long long v586 = &v173[v584];
        uint64_t v2689 = *((void *)v586 + 1);
        *long long v585 = *(void *)v586;
        v585[1] = v2689;
        uint64_t v587 = v177[25];
        long long v588 = (void *)((char *)v24 + v587);
        uint64_t v589 = &v173[v587];
        uint64_t v2669 = *((void *)v589 + 1);
        *long long v588 = *(void *)v589;
        v588[1] = v2669;
        uint64_t v590 = v177[26];
        v591 = (void *)((char *)v24 + v590);
        uint64_t v592 = &v173[v590];
        uint64_t v2642 = *((void *)v592 + 1);
        void *v591 = *(void *)v592;
        v591[1] = v2642;
        uint64_t v593 = v177[27];
        v594 = (void *)((char *)v24 + v593);
        uint64_t v595 = &v173[v593];
        uint64_t v2618 = *((void *)v595 + 1);
        void *v594 = *(void *)v595;
        v594[1] = v2618;
        uint64_t v596 = v177[28];
        v597 = (void *)((char *)v24 + v596);
        v598 = &v173[v596];
        v2579 = (void *)*((void *)v598 + 1);
        void *v597 = *(void *)v598;
        v597[1] = v2579;
        uint64_t v599 = v177[29];
        uint64_t v600 = (void *)((char *)v24 + v599);
        v601 = &v173[v599];
        v2551 = (void *)*((void *)v601 + 1);
        *uint64_t v600 = *(void *)v601;
        v600[1] = v2551;
        uint64_t v602 = v177[30];
        uint64_t v603 = (void *)((char *)v24 + v602);
        uint64_t v604 = &v173[v602];
        uint64_t v2531 = (void *)*((void *)v604 + 1);
        *uint64_t v603 = *(void *)v604;
        v603[1] = v2531;
        uint64_t v605 = v177[31];
        v606 = (void *)((char *)v24 + v605);
        v607 = &v173[v605];
        uint64_t v2523 = *((void *)v607 + 1);
        void *v606 = *(void *)v607;
        v606[1] = v2523;
        uint64_t v608 = v177[32];
        long long v609 = (void *)((char *)v24 + v608);
        long long v610 = &v173[v608];
        uint64_t v611 = *((void *)v610 + 1);
        *long long v609 = *(void *)v610;
        v609[1] = v611;
        *(void *)((char *)v24 + v177[33]) = *(void *)&v173[v177[33]];
        *(void *)((char *)v24 + v177[34]) = *(void *)&v173[v177[34]];
        uint64_t v612 = v177[35];
        long long v613 = (void *)((char *)v24 + v612);
        uint64_t v614 = &v173[v612];
        uint64_t v615 = *((void *)v614 + 1);
        *long long v613 = *(void *)v614;
        v613[1] = v615;
        uint64_t v616 = v177[36];
        uint64_t v617 = (void *)((char *)v24 + v616);
        uint64_t v618 = &v173[v616];
        uint64_t v619 = *((void *)v618 + 1);
        void *v617 = *(void *)v618;
        v617[1] = v619;
        uint64_t v620 = v177[37];
        uint64_t v621 = (void *)((char *)v24 + v620);
        uint64_t v622 = &v173[v620];
        uint64_t v623 = *((void *)v622 + 1);
        void *v621 = *(void *)v622;
        v621[1] = v623;
        uint64_t v624 = v177[38];
        v2503 = (char *)v2751 + v624;
        uint64_t v25 = v173;
        uint64_t v625 = &v173[v624];
        uint64_t v626 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v625, 1, v626))
        {
          uint64_t v627 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2503, v625, *(void *)(*(void *)(v627 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v626 - 8) + 16))(v2503, v625, v626);
          __swift_storeEnumTagSinglePayload((uint64_t)v2503, 0, 1, v626);
        }
        uint64_t v4 = v2735;
        uint64_t v11 = v2745;
        uint64_t v695 = v177[39];
        uint64_t v696 = (void *)((char *)v2751 + v695);
        uint64_t v697 = (void *)((char *)v25 + v695);
        uint64_t v698 = v697[1];
        *uint64_t v696 = *v697;
        v696[1] = v698;
        uint64_t v699 = v177[40];
        uint64_t v700 = (void *)((char *)v2751 + v699);
        v701 = (void *)((char *)v25 + v699);
        uint64_t v702 = v701[1];
        *uint64_t v700 = *v701;
        v700[1] = v702;
        uint64_t v703 = v177[41];
        v704 = (char *)v2751 + v703;
        v705 = (char *)v25 + v703;
        v704[8] = v705[8];
        *(void *)v704 = *(void *)v705;
        uint64_t v706 = v177[42];
        uint64_t v707 = (void *)((char *)v2751 + v706);
        long long v708 = (void *)((char *)v25 + v706);
        uint64_t v709 = v708[1];
        *uint64_t v707 = *v708;
        v707[1] = v709;
        uint64_t v710 = v177[43];
        long long v711 = (char *)v2751 + v710;
        long long v712 = (char *)v25 + v710;
        *(_OWORD *)long long v711 = *(_OWORD *)v712;
        *(void *)(v711 + 13) = *(void *)(v712 + 13);
        uint64_t v713 = v177[44];
        uint64_t v714 = (void *)((char *)v2751 + v713);
        v715 = (void *)((char *)v25 + v713);
        uint64_t v716 = v715[1];
        *uint64_t v714 = *v715;
        v714[1] = v716;
        uint64_t v717 = v177[45];
        uint64_t v718 = (void *)((char *)v2751 + v717);
        v719 = (void *)((char *)v25 + v717);
        uint64_t v720 = v719[1];
        *uint64_t v718 = *v719;
        v718[1] = v720;
        uint64_t v721 = v177[46];
        v722 = (void *)((char *)v2751 + v721);
        uint64_t v723 = (void *)((char *)v25 + v721);
        uint64_t v724 = v723[1];
        void *v722 = *v723;
        v722[1] = v724;
        uint64_t v725 = v177[47];
        v726 = (void *)((char *)v2751 + v725);
        uint64_t v727 = (void *)((char *)v25 + v725);
        uint64_t v728 = v727[1];
        void *v726 = *v727;
        v726[1] = v728;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v24 = v2751;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v729 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
        *(void *)((char *)v2751 + *(int *)(v729 + 48)) = *(void *)((char *)v25 + *(int *)(v729 + 48));
        swift_bridgeObjectRetain();
        goto LABEL_506;
      case 0x10u:
        uint64_t v2738 = v11;
        uint64_t v182 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v182;
        uint64_t v2716 = v25[3];
        v24[2] = v25[2];
        v24[3] = v2716;
        uint64_t v2698 = v25[5];
        v24[4] = v25[4];
        v24[5] = v2698;
        uint64_t v183 = v25[6];
        uint64_t v184 = v25;
        uint64_t v185 = v24;
        uint64_t v186 = v184[7];
        v185[6] = v183;
        v185[7] = v186;
        uint64_t v2682 = v184[9];
        v185[8] = v184[8];
        v185[9] = v2682;
        uint64_t v2661 = v184[11];
        v185[10] = v184[10];
        v185[11] = v2661;
        *((unsigned char *)v185 + 96) = *((unsigned char *)v184 + 96);
        uint64_t v187 = v184[14];
        v185[13] = v184[13];
        v185[14] = v187;
        uint64_t v188 = v184[16];
        v185[15] = v184[15];
        v185[16] = v188;
        uint64_t v189 = (int *)type metadata accessor for HotelReservation(0);
        uint64_t v190 = v189[14];
        v2609 = (char *)v185 + v190;
        uint64_t v191 = (char *)v184 + v190;
        uint64_t v192 = type metadata accessor for DateComponents();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v191, 1, v192))
        {
          uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v2609, v191, *(void *)(*(void *)(v193 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v192 - 8) + 16))(v2609, v191, v192);
          __swift_storeEnumTagSinglePayload((uint64_t)v2609, 0, 1, v192);
        }
        uint64_t v431 = v189[15];
        long long v432 = (char *)v2751 + v431;
        uint64_t v433 = (char *)v184 + v431;
        if (__swift_getEnumTagSinglePayload((uint64_t)v184 + v431, 1, v192))
        {
          uint64_t v434 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v432, v433, *(void *)(*(void *)(v434 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v192 - 8) + 16))(v432, v433, v192);
          __swift_storeEnumTagSinglePayload((uint64_t)v432, 0, 1, v192);
        }
        uint64_t v628 = v189[16];
        uint64_t v629 = (void *)((char *)v2751 + v628);
        uint64_t v630 = (void *)((char *)v184 + v628);
        uint64_t v631 = v630[1];
        *uint64_t v629 = *v630;
        v629[1] = v631;
        uint64_t v632 = v189[17];
        uint64_t v633 = (void *)((char *)v2751 + v632);
        uint64_t v634 = (void *)((char *)v184 + v632);
        uint64_t v2726 = v634[1];
        void *v633 = *v634;
        v633[1] = v2726;
        uint64_t v635 = v189[18];
        v636 = (void *)((char *)v2751 + v635);
        v637 = (void *)((char *)v184 + v635);
        uint64_t v2706 = v637[1];
        void *v636 = *v637;
        v636[1] = v2706;
        uint64_t v638 = v189[19];
        uint64_t v639 = (void *)((char *)v2751 + v638);
        long long v640 = (void *)((char *)v184 + v638);
        uint64_t v2690 = v640[1];
        *uint64_t v639 = *v640;
        v639[1] = v2690;
        uint64_t v641 = v189[20];
        uint64_t v642 = (void *)((char *)v2751 + v641);
        long long v643 = (void *)((char *)v184 + v641);
        uint64_t v644 = v643[1];
        *uint64_t v642 = *v643;
        v642[1] = v644;
        *(void *)((char *)v2751 + v189[21]) = *(void *)((char *)v184 + v189[21]);
        *(void *)((char *)v2751 + v189[22]) = *(void *)((char *)v184 + v189[22]);
        uint64_t v645 = v189[23];
        long long v646 = (char *)v2751 + v645;
        uint64_t v647 = (char *)v184 + v645;
        *(void *)long long v646 = *(void *)v647;
        v646[8] = v647[8];
        uint64_t v648 = v189[24];
        v649 = (char *)v2751 + v648;
        uint64_t v650 = (char *)v184 + v648;
        *(void *)v649 = *(void *)v650;
        v649[8] = v650[8];
        uint64_t v651 = v189[25];
        uint64_t v652 = (void *)((char *)v2751 + v651);
        v653 = (void *)((char *)v184 + v651);
        uint64_t v654 = v653[1];
        void *v652 = *v653;
        v652[1] = v654;
        uint64_t v655 = v189[26];
        v656 = (void *)((char *)v2751 + v655);
        uint64_t v657 = (void *)((char *)v184 + v655);
        uint64_t v658 = v657[1];
        void *v656 = *v657;
        v656[1] = v658;
        uint64_t v659 = v189[27];
        v660 = (void *)((char *)v2751 + v659);
        uint64_t v25 = v184;
        uint64_t v661 = (void *)((char *)v184 + v659);
        uint64_t v662 = v661[1];
        void *v660 = *v661;
        v660[1] = v662;
        uint64_t v663 = v189[28];
        uint64_t v664 = (void *)((char *)v2751 + v663);
        uint64_t v665 = (void *)((char *)v184 + v663);
        uint64_t v666 = v665[1];
        *uint64_t v664 = *v665;
        v664[1] = v666;
        uint64_t v667 = v189[29];
        v668 = (char *)v2751 + v667;
        uint64_t v669 = (char *)v25 + v667;
        *(void *)v668 = *(void *)v669;
        v668[8] = v669[8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v24 = v2751;
        swift_bridgeObjectRetain();
        goto LABEL_504;
      case 0x11u:
        uint64_t v2729 = v4;
        uint64_t v2738 = v11;
        uint64_t v194 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v194;
        uint64_t v195 = v25[3];
        v24[2] = v25[2];
        v24[3] = v195;
        uint64_t v2717 = v25[5];
        v24[4] = v25[4];
        v24[5] = v2717;
        uint64_t v196 = v25[7];
        v24[6] = v25[6];
        v24[7] = v196;
        uint64_t v2699 = v25[9];
        v24[8] = v25[8];
        v24[9] = v2699;
        uint64_t v2683 = v25[11];
        v24[10] = v25[10];
        v24[11] = v2683;
        *((unsigned char *)v24 + 96) = *((unsigned char *)v25 + 96);
        uint64_t v197 = v25[14];
        v24[13] = v25[13];
        v24[14] = v197;
        uint64_t v198 = v25[16];
        v24[15] = v25[15];
        v24[16] = v198;
        uint64_t v199 = (int *)type metadata accessor for RestaurantReservation(0);
        uint64_t v200 = v199[14];
        v2634 = (char *)v24 + v200;
        v2662 = (char *)v25 + v200;
        uint64_t v201 = type metadata accessor for DateComponents();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v2662, 1, v201))
        {
          uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v2634, v2662, *(void *)(*(void *)(v202 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v201 - 8) + 16))(v2634, v2662, v201);
          __swift_storeEnumTagSinglePayload((uint64_t)v2634, 0, 1, v201);
        }
        uint64_t v4 = v2729;
        uint64_t v435 = v199[15];
        long long v436 = (void *)((char *)v24 + v435);
        uint64_t v437 = (void *)((char *)v25 + v435);
        uint64_t v438 = v437[1];
        *long long v436 = *v437;
        v436[1] = v438;
        uint64_t v439 = v199[16];
        v440 = (void *)((char *)v24 + v439);
        uint64_t v441 = (void *)((char *)v25 + v439);
        uint64_t v2723 = v441[1];
        void *v440 = *v441;
        v440[1] = v2723;
        uint64_t v442 = v199[17];
        v443 = (void *)((char *)v24 + v442);
        v444 = (void *)((char *)v25 + v442);
        uint64_t v445 = v444[1];
        void *v443 = *v444;
        v443[1] = v445;
        uint64_t v446 = v199[18];
        long long v447 = (void *)((char *)v24 + v446);
        long long v448 = (void *)((char *)v25 + v446);
        uint64_t v449 = v448[1];
        *long long v447 = *v448;
        v447[1] = v449;
        uint64_t v450 = v199[19];
        long long v451 = (void *)((char *)v24 + v450);
        long long v452 = (void *)((char *)v25 + v450);
        uint64_t v453 = v452[1];
        *long long v451 = *v452;
        v451[1] = v453;
        *(void *)((char *)v24 + v199[20]) = *(void *)((char *)v25 + v199[20]);
        uint64_t v454 = v199[21];
        v455 = (void *)((char *)v24 + v454);
        uint64_t v456 = (void *)((char *)v25 + v454);
        uint64_t v457 = v456[1];
        void *v455 = *v456;
        v455[1] = v457;
        uint64_t v458 = v199[22];
        v459 = (void *)((char *)v24 + v458);
        uint64_t v460 = (void *)((char *)v25 + v458);
        uint64_t v461 = v460[1];
        void *v459 = *v460;
        v459[1] = v461;
        uint64_t v462 = v199[23];
        v463 = (void *)((char *)v24 + v462);
        uint64_t v464 = (void *)((char *)v25 + v462);
        uint64_t v465 = v464[1];
        void *v463 = *v464;
        v463[1] = v465;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_504;
      case 0x12u:
        uint64_t v2730 = v4;
        uint64_t v203 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v203;
        uint64_t v204 = v25[3];
        v24[2] = v25[2];
        v24[3] = v204;
        uint64_t v205 = v25[5];
        v24[4] = v25[4];
        v24[5] = v205;
        uint64_t v206 = v25[7];
        v24[6] = v25[6];
        v24[7] = v206;
        uint64_t v207 = v25[9];
        v24[8] = v25[8];
        v24[9] = v207;
        uint64_t v208 = v25[11];
        v24[10] = v25[10];
        v24[11] = v208;
        uint64_t v209 = v25[13];
        v24[12] = v25[12];
        v24[13] = v209;
        uint64_t v210 = v25[15];
        v24[14] = v25[14];
        v24[15] = v210;
        *((unsigned char *)v24 + 128) = *((unsigned char *)v25 + 128);
        *(_WORD *)((char *)v24 + 129) = *(_WORD *)((char *)v25 + 129);
        uint64_t v211 = v25[18];
        v24[17] = v25[17];
        v24[18] = v211;
        uint64_t v212 = v25[20];
        v24[19] = v25[19];
        v24[20] = v212;
        uint64_t v213 = v25[22];
        v24[21] = v25[21];
        v24[22] = v213;
        uint64_t v214 = v25[24];
        v24[23] = v25[23];
        v24[24] = v214;
        uint64_t v215 = v25[26];
        v24[25] = v25[25];
        v24[26] = v215;
        uint64_t v216 = v25[28];
        v24[27] = v25[27];
        v24[28] = v216;
        uint64_t v217 = v25[30];
        v24[29] = v25[29];
        v24[30] = v217;
        uint64_t v218 = v25[32];
        v24[31] = v25[31];
        v24[32] = v218;
        uint64_t v219 = v25[34];
        v24[33] = v25[33];
        v24[34] = v219;
        uint64_t v2718 = v25[36];
        v24[35] = v25[35];
        v24[36] = v2718;
        uint64_t v2700 = v25[38];
        v24[37] = v25[37];
        v24[38] = v2700;
        uint64_t v2684 = v25[40];
        v24[39] = v25[39];
        v24[40] = v2684;
        uint64_t v2663 = v25[42];
        v24[41] = v25[41];
        v24[42] = v2663;
        uint64_t v2635 = v25[44];
        v24[43] = v25[43];
        v24[44] = v2635;
        uint64_t v2610 = v25[46];
        v24[45] = v25[45];
        v24[46] = v2610;
        uint64_t v220 = v25[47];
        *((unsigned char *)v24 + 384) = *((unsigned char *)v25 + 384);
        v24[47] = v220;
        uint64_t v221 = v25[50];
        v24[49] = v25[49];
        v24[50] = v221;
        uint64_t v222 = v25[52];
        v24[51] = v25[51];
        v24[52] = v222;
        uint64_t v223 = type metadata accessor for RentalCarReservation(0);
        uint64_t v224 = *(int *)(v223 + 140);
        __dst = (char *)v24 + v224;
        uint64_t v2466 = v223;
        uint64_t v225 = (char *)v25 + v224;
        uint64_t v226 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v225, 1, v226))
        {
          uint64_t v227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(__dst, v225, *(void *)(*(void *)(v227 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 16))(__dst, v225, v226);
          __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v226);
        }
        uint64_t v4 = v2730;
        uint64_t v466 = *(int *)(v2466 + 144);
        goto LABEL_107;
      case 0x13u:
        v2731 = v4;
        uint64_t v228 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v228;
        uint64_t v2611 = v25[3];
        v24[2] = v25[2];
        v24[3] = v2611;
        uint64_t v229 = v25[5];
        v24[4] = v25[4];
        v24[5] = v229;
        uint64_t v230 = v25[7];
        v24[6] = v25[6];
        v24[7] = v230;
        uint64_t v231 = v25[9];
        v24[8] = v25[8];
        v24[9] = v231;
        uint64_t v232 = v25[11];
        v24[10] = v25[10];
        v24[11] = v232;
        uint64_t v233 = v25[13];
        v24[12] = v25[12];
        v24[13] = v233;
        uint64_t v234 = v25[15];
        v24[14] = v25[14];
        v24[15] = v234;
        *((unsigned char *)v24 + 128) = *((unsigned char *)v25 + 128);
        *(_WORD *)((char *)v24 + 129) = *(_WORD *)((char *)v25 + 129);
        uint64_t v235 = v25[18];
        v24[17] = v25[17];
        v24[18] = v235;
        uint64_t v236 = v25[20];
        v24[19] = v25[19];
        v24[20] = v236;
        uint64_t v237 = v25[22];
        v24[21] = v25[21];
        v24[22] = v237;
        uint64_t v238 = v25[24];
        v24[23] = v25[23];
        v24[24] = v238;
        uint64_t v239 = v25[26];
        v24[25] = v25[25];
        v24[26] = v239;
        uint64_t v2719 = v25[28];
        v24[27] = v25[27];
        v24[28] = v2719;
        uint64_t v2701 = v25[30];
        v24[29] = v25[29];
        v24[30] = v2701;
        uint64_t v2685 = v25[32];
        v24[31] = v25[31];
        v24[32] = v2685;
        uint64_t v2664 = v25[34];
        v24[33] = v25[33];
        v24[34] = v2664;
        uint64_t v241 = v25[35];
        uint64_t v240 = v25[36];
        *((unsigned char *)v24 + 296) = *((unsigned char *)v25 + 296);
        v24[35] = v241;
        v24[36] = v240;
        uint64_t v242 = type metadata accessor for TicketedTransportation(0);
        uint64_t v243 = *(int *)(v242 + 112);
        uint64_t v2485 = (char *)v24 + v243;
        uint64_t v2490 = (int *)v242;
        uint64_t v244 = (char *)v25 + v243;
        uint64_t v226 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v244, 1, v226))
        {
          uint64_t v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2485, v244, *(void *)(*(void *)(v245 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 16))(v2485, v244, v226);
          __swift_storeEnumTagSinglePayload((uint64_t)v2485, 0, 1, v226);
        }
        uint64_t v4 = v2731;
        uint64_t v466 = v2490[29];
        goto LABEL_107;
      case 0x14u:
        uint64_t v246 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v246;
        uint64_t v247 = v25[3];
        v24[2] = v25[2];
        v24[3] = v247;
        uint64_t v248 = v25[5];
        v24[4] = v25[4];
        v24[5] = v248;
        uint64_t v249 = v25[7];
        v24[6] = v25[6];
        v24[7] = v249;
        uint64_t v250 = v25[9];
        v24[8] = v25[8];
        v24[9] = v250;
        uint64_t v251 = v25[11];
        v24[10] = v25[10];
        v24[11] = v251;
        uint64_t v252 = v25[13];
        v24[12] = v25[12];
        v24[13] = v252;
        uint64_t v253 = v25[15];
        v24[14] = v25[14];
        v24[15] = v253;
        *((unsigned char *)v24 + 128) = *((unsigned char *)v25 + 128);
        *(_WORD *)((char *)v24 + 129) = *(_WORD *)((char *)v25 + 129);
        uint64_t v254 = v25[18];
        v24[17] = v25[17];
        v24[18] = v254;
        uint64_t v255 = v25[20];
        v24[19] = v25[19];
        v24[20] = v255;
        uint64_t v256 = v25[22];
        v24[21] = v25[21];
        v24[22] = v256;
        uint64_t v257 = v25[24];
        v24[23] = v25[23];
        v24[24] = v257;
        uint64_t v258 = v25[26];
        v24[25] = v25[25];
        v24[26] = v258;
        uint64_t v259 = v25[28];
        v24[27] = v25[27];
        v24[28] = v259;
        uint64_t v2702 = v25[30];
        v24[29] = v25[29];
        v24[30] = v2702;
        uint64_t v2686 = v25[32];
        v24[31] = v25[31];
        v24[32] = v2686;
        uint64_t v260 = v25[34];
        v24[33] = v25[33];
        v24[34] = v260;
        uint64_t v261 = v25[36];
        uint64_t v2636 = v25[35];
        *((unsigned char *)v24 + 296) = *((unsigned char *)v25 + 296);
        v24[35] = v2636;
        v24[36] = v261;
        uint64_t v2612 = v25[39];
        v24[38] = v25[38];
        v24[39] = v2612;
        uint64_t v2720 = (int *)type metadata accessor for TicketedShow(0);
        uint64_t v262 = v2720[29];
        uint64_t v263 = (char *)v24 + v262;
        uint64_t v264 = (char *)v25 + v262;
        uint64_t v265 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v264, 1, v265))
        {
          uint64_t v266 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v263, v264, *(void *)(*(void *)(v266 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v265 - 8) + 16))(v263, v264, v265);
          __swift_storeEnumTagSinglePayload((uint64_t)v263, 0, 1, v265);
        }
        uint64_t v467 = v2720[30];
        uint64_t v468 = (void *)((char *)v24 + v467);
        uint64_t v469 = (void *)((char *)v25 + v467);
        uint64_t v470 = v469[1];
        *uint64_t v468 = *v469;
        v468[1] = v470;
        uint64_t v471 = v2720[31];
        uint64_t v472 = (char *)v24 + v471;
        uint64_t v473 = (char *)v25 + v471;
        uint64_t v87 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v473, 1, v87))
        {
          uint64_t v474 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v472, v473, *(void *)(*(void *)(v474 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 16))(v472, v473, v87);
          __swift_storeEnumTagSinglePayload((uint64_t)v472, 0, 1, v87);
        }
        uint64_t v374 = v2720[32];
LABEL_148:
        uint64_t v670 = (char *)v24 + v374;
        uint64_t v671 = (char *)v25 + v374;
        if (__swift_getEnumTagSinglePayload((uint64_t)v25 + v374, 1, v87))
        {
          size_t v672 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                       - 8)
                           + 64);
          uint64_t v673 = v670;
          uint64_t v674 = v671;
          goto LABEL_157;
        }
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 16))(v670, v671, v87);
        uint64_t v675 = (uint64_t)v670;
        uint64_t v676 = v87;
        goto LABEL_159;
      case 0x15u:
        uint64_t v2732 = v4;
        uint64_t v267 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v267;
        uint64_t v2665 = v25[3];
        v24[2] = v25[2];
        v24[3] = v2665;
        uint64_t v2637 = v25[5];
        v24[4] = v25[4];
        v24[5] = v2637;
        uint64_t v2613 = v25[7];
        v24[6] = v25[6];
        v24[7] = v2613;
        uint64_t v268 = v25[9];
        v24[8] = v25[8];
        v24[9] = v268;
        uint64_t v269 = v25[11];
        v24[10] = v25[10];
        v24[11] = v269;
        uint64_t v270 = v25[13];
        v24[12] = v25[12];
        v24[13] = v270;
        uint64_t v271 = v25[15];
        v24[14] = v25[14];
        v24[15] = v271;
        *((unsigned char *)v24 + 128) = *((unsigned char *)v25 + 128);
        *(_WORD *)((char *)v24 + 129) = *(_WORD *)((char *)v25 + 129);
        uint64_t v272 = v25[18];
        v24[17] = v25[17];
        v24[18] = v272;
        uint64_t v273 = v25[20];
        v24[19] = v25[19];
        v24[20] = v273;
        uint64_t v274 = v25[22];
        v24[21] = v25[21];
        v24[22] = v274;
        uint64_t v275 = v25[24];
        v24[23] = v25[23];
        v24[24] = v275;
        uint64_t v276 = v25[26];
        v24[25] = v25[25];
        v24[26] = v276;
        uint64_t v277 = v25[28];
        v24[27] = v25[27];
        v24[28] = v277;
        uint64_t v278 = v25[30];
        v24[29] = v25[29];
        v24[30] = v278;
        uint64_t v279 = v25[32];
        v24[31] = v25[31];
        v24[32] = v279;
        uint64_t v281 = v25[33];
        uint64_t v280 = v25[34];
        *((unsigned char *)v24 + 280) = *((unsigned char *)v25 + 280);
        v24[33] = v281;
        v24[34] = v280;
        uint64_t v282 = v25[37];
        v24[36] = v25[36];
        v24[37] = v282;
        uint64_t v283 = type metadata accessor for Appointment(0);
        uint64_t v284 = *(int *)(v283 + 108);
        v2491 = (char *)v24 + v284;
        v2496 = (int *)v283;
        uint64_t v285 = (char *)v25 + v284;
        uint64_t v226 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v285, 1, v226))
        {
          uint64_t v286 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2491, v285, *(void *)(*(void *)(v286 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 16))(v2491, v285, v226);
          __swift_storeEnumTagSinglePayload((uint64_t)v2491, 0, 1, v226);
        }
        uint64_t v4 = v2732;
        uint64_t v466 = v2496[28];
LABEL_107:
        long long v475 = (char *)v24 + v466;
        uint64_t v476 = (char *)v25 + v466;
        if (__swift_getEnumTagSinglePayload((uint64_t)v25 + v466, 1, v226))
        {
          uint64_t v477 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v475, v476, *(void *)(*(void *)(v477 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 16))(v475, v476, v226);
          __swift_storeEnumTagSinglePayload((uint64_t)v475, 0, 1, v226);
        }
        goto LABEL_550;
      case 0x16u:
        uint64_t v287 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v287;
        uint64_t v2666 = v25[3];
        v24[2] = v25[2];
        v24[3] = v2666;
        uint64_t v2638 = v25[5];
        v24[4] = v25[4];
        v24[5] = v2638;
        uint64_t v2614 = v25[7];
        v24[6] = v25[6];
        v24[7] = v2614;
        uint64_t v288 = v25[9];
        v24[8] = v25[8];
        v24[9] = v288;
        uint64_t v289 = v25[11];
        v24[10] = v25[10];
        v24[11] = v289;
        uint64_t v290 = v25[13];
        v24[12] = v25[12];
        v24[13] = v290;
        uint64_t v291 = v25[15];
        v24[14] = v25[14];
        v24[15] = v291;
        *((unsigned char *)v24 + 128) = *((unsigned char *)v25 + 128);
        *(_WORD *)((char *)v24 + 129) = *(_WORD *)((char *)v25 + 129);
        uint64_t v292 = v25[18];
        v24[17] = v25[17];
        v24[18] = v292;
        uint64_t v293 = v25[20];
        v24[19] = v25[19];
        v24[20] = v293;
        uint64_t v294 = v25[22];
        v24[21] = v25[21];
        v24[22] = v294;
        uint64_t v295 = v25[24];
        v24[23] = v25[23];
        v24[24] = v295;
        uint64_t v296 = v25[26];
        v24[25] = v25[25];
        v24[26] = v296;
        uint64_t v297 = v25[28];
        v24[27] = v25[27];
        v24[28] = v297;
        uint64_t v298 = v25[30];
        v24[29] = v25[29];
        v24[30] = v298;
        v24[31] = v25[31];
        uint64_t v299 = type metadata accessor for Party(0);
        uint64_t v300 = *(int *)(v299 + 96);
        v2497 = (char *)v24 + v300;
        v2502 = (int *)v299;
        uint64_t v301 = (char *)v25 + v300;
        uint64_t v302 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v301, 1, v302))
        {
          uint64_t v303 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2497, v301, *(void *)(*(void *)(v303 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 16))(v2497, v301, v302);
          __swift_storeEnumTagSinglePayload((uint64_t)v2497, 0, 1, v302);
        }
        uint64_t v478 = v2502[25];
        long long v479 = (char *)v2751 + v478;
        long long v480 = (char *)v25 + v478;
        if (__swift_getEnumTagSinglePayload((uint64_t)v25 + v478, 1, v302))
        {
          uint64_t v481 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v479, v480, *(void *)(*(void *)(v481 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 16))(v479, v480, v302);
          __swift_storeEnumTagSinglePayload((uint64_t)v479, 0, 1, v302);
        }
        uint64_t v24 = v2751;
        uint64_t v391 = v2502[26];
        goto LABEL_155;
      case 0x17u:
        v2733 = v4;
        uint64_t v2746 = v11;
        uint64_t v304 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v304;
        uint64_t v2687 = v25[3];
        v24[2] = v25[2];
        v24[3] = v2687;
        uint64_t v2667 = v25[5];
        v24[4] = v25[4];
        v24[5] = v2667;
        uint64_t v305 = v25[7];
        v24[6] = v25[6];
        v24[7] = v305;
        uint64_t v2639 = v25[9];
        v24[8] = v25[8];
        v24[9] = v2639;
        uint64_t v2615 = v25[11];
        v24[10] = v25[10];
        v24[11] = v2615;
        uint64_t v306 = v25[13];
        v24[12] = v25[12];
        v24[13] = v306;
        uint64_t v307 = v25[15];
        v24[14] = v25[14];
        v24[15] = v307;
        *((unsigned char *)v24 + 128) = *((unsigned char *)v25 + 128);
        *(_WORD *)((char *)v24 + 129) = *(_WORD *)((char *)v25 + 129);
        uint64_t v308 = v25[18];
        v24[17] = v25[17];
        v24[18] = v308;
        uint64_t v309 = v25[20];
        v24[19] = v25[19];
        v24[20] = v309;
        uint64_t v310 = v25[22];
        v24[21] = v25[21];
        v24[22] = v310;
        uint64_t v311 = v25[24];
        v24[23] = v25[23];
        v24[24] = v311;
        uint64_t v312 = v25[26];
        v24[25] = v25[25];
        v24[26] = v312;
        v24[27] = v25[27];
        uint64_t v2721 = (int *)type metadata accessor for Trip(0);
        uint64_t v313 = v2721[22];
        uint64_t v2516 = (char *)v24 + v313;
        uint64_t v314 = (char *)v25 + v313;
        uint64_t v315 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v314, 1, v315))
        {
          uint64_t v316 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v2516, v314, *(void *)(*(void *)(v316 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v315 - 8) + 16))(v2516, v314, v315);
          __swift_storeEnumTagSinglePayload((uint64_t)v2516, 0, 1, v315);
        }
        uint64_t v4 = v2733;
        uint64_t v11 = v2746;
        uint64_t v482 = v2721[23];
        v483 = (char *)v24 + v482;
        v484 = (char *)v25 + v482;
        if (__swift_getEnumTagSinglePayload((uint64_t)v25 + v482, 1, v315))
        {
          uint64_t v485 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v483, v484, *(void *)(*(void *)(v485 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v315 - 8) + 16))(v483, v484, v315);
          __swift_storeEnumTagSinglePayload((uint64_t)v483, 0, 1, v315);
        }
        uint64_t v677 = v2721[24];
        uint64_t v678 = (char *)v24 + v677;
        uint64_t v679 = (char *)v25 + v677;
        *(void *)uint64_t v678 = *(void *)v679;
        v678[8] = v679[8];
        uint64_t v391 = v2721[25];
LABEL_155:
        long long v680 = (char *)v24 + v391;
        uint64_t v681 = (uint64_t)v25 + v391;
        uint64_t v682 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload(v681, 1, v682))
        {
          size_t v672 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                       - 8)
                           + 64);
          uint64_t v673 = v680;
          uint64_t v674 = (const void *)v681;
LABEL_157:
          memcpy(v673, v674, v672);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v682 - 8) + 16))(v680, v681, v682);
          uint64_t v675 = (uint64_t)v680;
          uint64_t v676 = v682;
LABEL_159:
          __swift_storeEnumTagSinglePayload(v675, 0, 1, v676);
        }
        uint64_t v3 = v2750;
LABEL_551:
        swift_storeEnumTagMultiPayload();
        uint64_t v2446 = *(int *)(v26 + 20);
        v2447 = *(void **)((char *)v25 + v2446);
        *(void *)((char *)v24 + v2446) = v2447;
        uint64_t v2448 = *(int *)(v26 + 24);
        uint64_t v2449 = (void *)((char *)v24 + v2448);
        v2450 = (void *)((char *)v25 + v2448);
        uint64_t v2451 = v2450[1];
        *uint64_t v2449 = *v2450;
        v2449[1] = v2451;
        id v2452 = v2447;
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v26);
        break;
      case 0x18u:
        uint64_t v2747 = v11;
        uint64_t v317 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v317;
        uint64_t v318 = v24;
        uint64_t v319 = v25[3];
        v318[2] = v25[2];
        v318[3] = v319;
        uint64_t v320 = v25[5];
        v318[4] = v25[4];
        v318[5] = v320;
        uint64_t v321 = (int *)type metadata accessor for GlobalItem();
        uint64_t v322 = v321[7];
        uint64_t v323 = (char *)v318 + v322;
        uint64_t v324 = (char *)v25 + v322;
        uint64_t v325 = type metadata accessor for GlobalDialog();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v324, 1, v325))
        {
          uint64_t v326 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
          memcpy(v323, v324, *(void *)(*(void *)(v326 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16))(v323, v324, v325);
          __swift_storeEnumTagSinglePayload((uint64_t)v323, 0, 1, v325);
        }
        uint64_t v11 = v2747;
        uint64_t v26 = v2749;
        uint64_t v24 = v2751;
        uint64_t v486 = v321[8];
        uint64_t v487 = (char *)v2751 + v486;
        v488 = (char *)v25 + v486;
        unint64_t v489 = *((void *)v488 + 1);
        if (v489 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v487 = *(_OWORD *)v488;
        }
        else
        {
          uint64_t v490 = *(void *)v488;
          outlined copy of Data._Representation(*(void *)v488, *((void *)v488 + 1));
          *(void *)uint64_t v487 = v490;
          *((void *)v487 + 1) = v489;
        }
        uint64_t v3 = v2750;
        *((unsigned char *)v2751 + v321[9]) = *((unsigned char *)v25 + v321[9]);
        uint64_t v491 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
        *(void *)((char *)v2751 + *(int *)(v491 + 48)) = *(void *)((char *)v25 + *(int *)(v491 + 48));
        goto LABEL_123;
      case 0x19u:
        uint64_t v327 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v327;
        uint64_t v328 = v25[3];
        v24[2] = v25[2];
        v24[3] = v328;
        uint64_t v329 = v25[5];
        v24[4] = v25[4];
        v24[5] = v329;
        uint64_t v330 = v25[7];
        v24[6] = v25[6];
        v24[7] = v330;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_123;
      case 0x1Au:
        v2734 = v4;
        uint64_t v2748 = v11;
        uint64_t v331 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v331;
        uint64_t v332 = v25[2];
        uint64_t v333 = v25;
        uint64_t v334 = v24;
        uint64_t v335 = v333[3];
        uint64_t v336 = v333[4];
        v334[2] = v332;
        v334[3] = v335;
        uint64_t v337 = v333[5];
        uint64_t v338 = v333[6];
        v334[4] = v336;
        v334[5] = v337;
        v334[6] = v338;
        uint64_t v339 = (int *)type metadata accessor for Answer(0);
        uint64_t v340 = v339[9];
        v2722 = (char *)v334 + v340;
        uint64_t v25 = v333;
        uint64_t v341 = (char *)v333 + v340;
        uint64_t v342 = type metadata accessor for URL();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v341, 1, v342))
        {
          uint64_t v343 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v2722, v341, *(void *)(*(void *)(v343 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v342 - 8) + 16))(v2722, v341, v342);
          __swift_storeEnumTagSinglePayload((uint64_t)v2722, 0, 1, v342);
        }
        uint64_t v4 = v2734;
        uint64_t v11 = v2748;
        uint64_t v26 = v2749;
        uint64_t v3 = v2750;
        uint64_t v24 = v2751;
        *((unsigned char *)v2751 + v339[10]) = *((unsigned char *)v25 + v339[10]);
        uint64_t v492 = v339[11];
        long long v493 = (void *)((char *)v2751 + v492);
        uint64_t v494 = (void *)((char *)v25 + v492);
        uint64_t v495 = v494[1];
        *long long v493 = *v494;
        v493[1] = v495;
LABEL_123:
        swift_bridgeObjectRetain();
        goto LABEL_551;
      default:
        uint64_t v2736 = v11;
        uint64_t v29 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v29;
        uint64_t v30 = v25[3];
        v24[2] = v25[2];
        v24[3] = v30;
        uint64_t v31 = v25[5];
        v24[4] = v25[4];
        v24[5] = v31;
        uint64_t v32 = v25[7];
        v24[6] = v25[6];
        v24[7] = v32;
        uint64_t v33 = v24;
        uint64_t v34 = v25[9];
        v24[8] = v25[8];
        v24[9] = v34;
        uint64_t v2709 = v25[11];
        v24[10] = v25[10];
        v24[11] = v2709;
        uint64_t v35 = (int *)type metadata accessor for EmailDocument(0);
        uint64_t v36 = v35[12];
        v2632 = (char *)v25 + v36;
        v2658 = (char *)v24 + v36;
        uint64_t v37 = type metadata accessor for Date();
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v2678 = v38;
        uint64_t v2693 = v37;
        v38(v2658, v2632, v37);
        *(void *)((char *)v33 + v35[13]) = *(void *)((char *)v25 + v35[13]);
        *(void *)((char *)v33 + v35[14]) = *(void *)((char *)v25 + v35[14]);
        *(void *)((char *)v33 + v35[15]) = *(void *)((char *)v25 + v35[15]);
        *((unsigned char *)v33 + v35[16]) = *((unsigned char *)v25 + v35[16]);
        *((unsigned char *)v33 + v35[17]) = *((unsigned char *)v25 + v35[17]);
        uint64_t v39 = v35[18];
        uint64_t v40 = (void *)((char *)v33 + v39);
        uint64_t v41 = (void *)((char *)v25 + v39);
        uint64_t v42 = v41[1];
        void *v40 = *v41;
        v40[1] = v42;
        v2710 = v35;
        uint64_t v43 = v35[19];
        uint64_t v44 = (void *)((char *)v33 + v43);
        uint64_t v45 = (char *)v25 + v43;
        uint64_t v46 = *(void *)((char *)v25 + v43);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v46)
        {
          uint64_t v47 = *((void *)v45 + 1);
          uint64_t v48 = *((void *)v45 + 2);
          *uint64_t v44 = v46;
          v44[1] = v47;
          uint64_t v49 = *((void *)v45 + 3);
          uint64_t v50 = *((void *)v45 + 4);
          v44[2] = v48;
          v44[3] = v49;
          v44[4] = v50;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v344 = *((_OWORD *)v45 + 1);
          *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
          *((_OWORD *)v44 + 1) = v344;
          v44[4] = *((void *)v45 + 4);
        }
        uint64_t v345 = v2751;
        uint64_t v346 = v2710[20];
        uint64_t v347 = (void *)((char *)v2751 + v346);
        v348 = (void *)((char *)v25 + v346);
        uint64_t v349 = v348[1];
        *uint64_t v347 = *v348;
        v347[1] = v349;
        uint64_t v350 = v2710[21];
        uint64_t v351 = (void *)((char *)v2751 + v350);
        uint64_t v352 = (void *)((char *)v25 + v350);
        uint64_t v353 = type metadata accessor for PartialExtractedAttributes(0);
        swift_bridgeObjectRetain();
        if (__swift_getEnumTagSinglePayload((uint64_t)v352, 1, v353))
        {
          uint64_t v354 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v351, v352, *(void *)(*(void *)(v354 - 8) + 64));
        }
        else
        {
          uint64_t v496 = v352[1];
          *uint64_t v351 = *v352;
          v351[1] = v496;
          uint64_t v497 = *(int *)(v353 + 20);
          unint64_t v498 = (void *)((char *)v351 + v497);
          uint64_t v499 = (void *)((char *)v352 + v497);
          uint64_t v500 = type metadata accessor for RentalCarReservation(0);
          swift_bridgeObjectRetain();
          v2550 = (int *)v500;
          v2616 = (int *)v353;
          v2640 = v351;
          v2578 = v352;
          if (__swift_getEnumTagSinglePayload((uint64_t)v499, 1, v500))
          {
            uint64_t v501 = (int *)v353;
            uint64_t v502 = (uint64_t)v351;
            uint64_t v503 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v498, v499, *(void *)(*(void *)(v503 - 8) + 64));
          }
          else
          {
            uint64_t v737 = v499[1];
            *unint64_t v498 = *v499;
            v498[1] = v737;
            uint64_t v738 = v499[3];
            v498[2] = v499[2];
            v498[3] = v738;
            uint64_t v739 = v499[5];
            v498[4] = v499[4];
            v498[5] = v739;
            uint64_t v740 = v499[7];
            v498[6] = v499[6];
            v498[7] = v740;
            uint64_t v741 = v499[9];
            v498[8] = v499[8];
            v498[9] = v741;
            uint64_t v742 = v499[11];
            v498[10] = v499[10];
            v498[11] = v742;
            uint64_t v743 = v499[13];
            v498[12] = v499[12];
            v498[13] = v743;
            uint64_t v744 = v499[15];
            v498[14] = v499[14];
            v498[15] = v744;
            *((unsigned char *)v498 + 128) = *((unsigned char *)v499 + 128);
            *(_WORD *)((char *)v498 + 129) = *(_WORD *)((char *)v499 + 129);
            uint64_t v745 = v499[18];
            v498[17] = v499[17];
            v498[18] = v745;
            uint64_t v746 = v499[20];
            v498[19] = v499[19];
            v498[20] = v746;
            uint64_t v747 = v499[22];
            v498[21] = v499[21];
            v498[22] = v747;
            uint64_t v2458 = v499[24];
            v498[23] = v499[23];
            v498[24] = v2458;
            uint64_t v748 = v499[26];
            v498[25] = v499[25];
            v498[26] = v748;
            uint64_t v749 = v499[28];
            v498[27] = v499[27];
            v498[28] = v749;
            uint64_t v750 = v499[30];
            v498[29] = v499[29];
            v498[30] = v750;
            uint64_t v751 = v499[32];
            v498[31] = v499[31];
            v498[32] = v751;
            uint64_t v752 = v499[34];
            v498[33] = v499[33];
            v498[34] = v752;
            uint64_t v753 = v499[36];
            v498[35] = v499[35];
            v498[36] = v753;
            uint64_t v754 = v499[38];
            v498[37] = v499[37];
            v498[38] = v754;
            uint64_t v755 = v499[40];
            v498[39] = v499[39];
            v498[40] = v755;
            uint64_t v756 = v499[42];
            v498[41] = v499[41];
            v498[42] = v756;
            uint64_t v757 = v499[44];
            v498[43] = v499[43];
            v498[44] = v757;
            uint64_t v758 = v499[46];
            v498[45] = v499[45];
            v498[46] = v758;
            uint64_t v759 = v499[47];
            *((unsigned char *)v498 + 384) = *((unsigned char *)v499 + 384);
            v498[47] = v759;
            uint64_t v760 = v499[50];
            v498[49] = v499[49];
            v498[50] = v760;
            uint64_t v761 = v499[52];
            v498[51] = v499[51];
            v498[52] = v761;
            uint64_t v762 = v2550[35];
            v2532 = (char *)v498 + v762;
            uint64_t v763 = (char *)v499 + v762;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v763, 1, v2693))
            {
              uint64_t v764 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2532, v763, *(void *)(*(void *)(v764 - 8) + 64));
            }
            else
            {
              v2678(v2532, v763, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2532, 0, 1, v2693);
            }
            uint64_t v821 = v2550[36];
            v822 = (char *)v498 + v821;
            v823 = (char *)v499 + v821;
            if (__swift_getEnumTagSinglePayload((uint64_t)v499 + v821, 1, v2693))
            {
              uint64_t v824 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v822, v823, *(void *)(*(void *)(v824 - 8) + 64));
            }
            else
            {
              v2678(v822, v823, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v822, 0, 1, v2693);
            }
            uint64_t v502 = (uint64_t)v2640;
            __swift_storeEnumTagSinglePayload((uint64_t)v498, 0, 1, (uint64_t)v2550);
            uint64_t v501 = (int *)v353;
          }
          uint64_t v834 = v501[6];
          uint64_t v835 = (void *)(v502 + v834);
          v836 = (void *)((char *)v352 + v834);
          uint64_t v837 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v836, 1, v837))
          {
            uint64_t v838 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v835, v836, *(void *)(*(void *)(v838 - 8) + 64));
          }
          else
          {
            uint64_t v839 = v836[1];
            *uint64_t v835 = *v836;
            v835[1] = v839;
            uint64_t v840 = v836[3];
            v835[2] = v836[2];
            v835[3] = v840;
            uint64_t v841 = v836[5];
            v835[4] = v836[4];
            v835[5] = v841;
            uint64_t v842 = v836[7];
            v835[6] = v836[6];
            v835[7] = v842;
            uint64_t v843 = v836[9];
            v835[8] = v836[8];
            v835[9] = v843;
            uint64_t v844 = v836[11];
            v835[10] = v836[10];
            v835[11] = v844;
            uint64_t v845 = v836[13];
            v835[12] = v836[12];
            v835[13] = v845;
            uint64_t v846 = v836[15];
            v835[14] = v836[14];
            v835[15] = v846;
            *((unsigned char *)v835 + 128) = *((unsigned char *)v836 + 128);
            *(_WORD *)((char *)v835 + 129) = *(_WORD *)((char *)v836 + 129);
            uint64_t v847 = v836[18];
            v835[17] = v836[17];
            v835[18] = v847;
            uint64_t v848 = v836[20];
            v835[19] = v836[19];
            v835[20] = v848;
            uint64_t v849 = v836[22];
            v835[21] = v836[21];
            v835[22] = v849;
            uint64_t v2462 = v836[24];
            v835[23] = v836[23];
            v835[24] = v2462;
            uint64_t v2524 = v836[26];
            v835[25] = v836[25];
            v835[26] = v2524;
            uint64_t v850 = v836[28];
            v835[27] = v836[27];
            v835[28] = v850;
            uint64_t v851 = v836[30];
            v835[29] = v836[29];
            v835[30] = v851;
            uint64_t v852 = v836[32];
            v835[31] = v836[31];
            v835[32] = v852;
            uint64_t v853 = v836[34];
            v835[33] = v836[33];
            v835[34] = v853;
            uint64_t v854 = v836[36];
            uint64_t v855 = v836[35];
            *((unsigned char *)v835 + 296) = *((unsigned char *)v836 + 296);
            v835[35] = v855;
            v835[36] = v854;
            uint64_t v856 = *(int *)(v837 + 112);
            uint64_t v2533 = (char *)v835 + v856;
            uint64_t v857 = (char *)v836 + v856;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v857, 1, v2693))
            {
              uint64_t v858 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2533, v857, *(void *)(*(void *)(v858 - 8) + 64));
            }
            else
            {
              v2678(v2533, v857, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2533, 0, 1, v2693);
            }
            uint64_t v911 = *(int *)(v837 + 116);
            uint64_t v912 = (char *)v835 + v911;
            uint64_t v913 = (char *)v836 + v911;
            if (__swift_getEnumTagSinglePayload((uint64_t)v836 + v911, 1, v2693))
            {
              uint64_t v914 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v912, v913, *(void *)(*(void *)(v914 - 8) + 64));
            }
            else
            {
              v2678(v912, v913, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v912, 0, 1, v2693);
            }
            uint64_t v502 = (uint64_t)v2640;
            __swift_storeEnumTagSinglePayload((uint64_t)v835, 0, 1, v837);
            uint64_t v501 = v2616;
          }
          uint64_t v924 = v501[7];
          uint64_t v925 = (void *)(v502 + v924);
          uint64_t v926 = (void *)((char *)v352 + v924);
          uint64_t v927 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v926, 1, (uint64_t)v927))
          {
            uint64_t v928 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v925, v926, *(void *)(*(void *)(v928 - 8) + 64));
          }
          else
          {
            uint64_t v929 = v926[1];
            *uint64_t v925 = *v926;
            v925[1] = v929;
            uint64_t v930 = v926[3];
            v925[2] = v926[2];
            v925[3] = v930;
            uint64_t v931 = v926[5];
            v925[4] = v926[4];
            v925[5] = v931;
            uint64_t v932 = v926[7];
            v925[6] = v926[6];
            v925[7] = v932;
            uint64_t v933 = v926[9];
            v925[8] = v926[8];
            v925[9] = v933;
            uint64_t v934 = v926[11];
            v925[10] = v926[10];
            v925[11] = v934;
            uint64_t v935 = v926[13];
            v925[12] = v926[12];
            v925[13] = v935;
            uint64_t v936 = v926[15];
            v925[14] = v926[14];
            v925[15] = v936;
            *((unsigned char *)v925 + 128) = *((unsigned char *)v926 + 128);
            *(_WORD *)((char *)v925 + 129) = *(_WORD *)((char *)v926 + 129);
            uint64_t v937 = v926[18];
            v925[17] = v926[17];
            v925[18] = v937;
            uint64_t v938 = v926[20];
            v925[19] = v926[19];
            v925[20] = v938;
            uint64_t v939 = v926[22];
            v925[21] = v926[21];
            v925[22] = v939;
            uint64_t v2461 = v926[24];
            v925[23] = v926[23];
            v925[24] = v2461;
            uint64_t v940 = v926[26];
            v925[25] = v926[25];
            v925[26] = v940;
            uint64_t v941 = v926[28];
            v925[27] = v926[27];
            v925[28] = v941;
            v2534 = (void *)v926[30];
            v925[29] = v926[29];
            v925[30] = v2534;
            uint64_t v942 = v926[32];
            v925[31] = v926[31];
            v925[32] = v942;
            uint64_t v943 = v926[34];
            v925[33] = v926[33];
            v925[34] = v943;
            uint64_t v944 = v926[36];
            uint64_t v945 = v926[35];
            *((unsigned char *)v925 + 296) = *((unsigned char *)v926 + 296);
            v925[35] = v945;
            v925[36] = v944;
            uint64_t v946 = v926[39];
            v925[38] = v926[38];
            v925[39] = v946;
            uint64_t v947 = v927[29];
            v2554 = (char *)v925 + v947;
            uint64_t v948 = (char *)v926 + v947;
            uint64_t v949 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v948, 1, v949))
            {
              uint64_t v950 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2554, v948, *(void *)(*(void *)(v950 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v949 - 8) + 16))(v2554, v948, v949);
              __swift_storeEnumTagSinglePayload((uint64_t)v2554, 0, 1, v949);
            }
            uint64_t v1007 = v927[30];
            uint64_t v1008 = (void *)((char *)v925 + v1007);
            v1009 = (void *)((char *)v926 + v1007);
            uint64_t v1010 = v1009[1];
            *uint64_t v1008 = *v1009;
            v1008[1] = v1010;
            uint64_t v1011 = v927[31];
            uint64_t v1012 = (char *)v925 + v1011;
            v1013 = (char *)v926 + v1011;
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1013, 1, v2693))
            {
              uint64_t v1014 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1012, v1013, *(void *)(*(void *)(v1014 - 8) + 64));
            }
            else
            {
              v2678(v1012, v1013, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v1012, 0, 1, v2693);
            }
            uint64_t v1031 = v927[32];
            uint64_t v1032 = (char *)v925 + v1031;
            v1033 = (char *)v926 + v1031;
            if (__swift_getEnumTagSinglePayload((uint64_t)v926 + v1031, 1, v2693))
            {
              uint64_t v1034 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1032, v1033, *(void *)(*(void *)(v1034 - 8) + 64));
            }
            else
            {
              v2678(v1032, v1033, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v1032, 0, 1, v2693);
            }
            uint64_t v502 = (uint64_t)v2640;
            __swift_storeEnumTagSinglePayload((uint64_t)v925, 0, 1, (uint64_t)v927);
            uint64_t v501 = v2616;
            uint64_t v352 = v2578;
          }
          uint64_t v1043 = v501[8];
          uint64_t v1044 = (void *)(v502 + v1043);
          uint64_t v1045 = (void *)((char *)v352 + v1043);
          uint64_t v1046 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1045, 1, v1046))
          {
            uint64_t v1047 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v1044, v1045, *(void *)(*(void *)(v1047 - 8) + 64));
          }
          else
          {
            uint64_t v1048 = v1045[1];
            void *v1044 = *v1045;
            v1044[1] = v1048;
            uint64_t v1049 = v1045[3];
            v1044[2] = v1045[2];
            v1044[3] = v1049;
            uint64_t v1050 = v1045[5];
            v1044[4] = v1045[4];
            v1044[5] = v1050;
            uint64_t v1051 = v1045[7];
            v1044[6] = v1045[6];
            v1044[7] = v1051;
            uint64_t v1052 = v1045[9];
            v1044[8] = v1045[8];
            v1044[9] = v1052;
            uint64_t v1053 = v1045[11];
            v1044[10] = v1045[10];
            v1044[11] = v1053;
            uint64_t v1054 = v1045[13];
            v1044[12] = v1045[12];
            v1044[13] = v1054;
            uint64_t v1055 = v1045[15];
            v1044[14] = v1045[14];
            v1044[15] = v1055;
            *((unsigned char *)v1044 + 128) = *((unsigned char *)v1045 + 128);
            *(_WORD *)((char *)v1044 + 129) = *(_WORD *)((char *)v1045 + 129);
            uint64_t v1056 = v1045[18];
            v1044[17] = v1045[17];
            v1044[18] = v1056;
            uint64_t v1057 = v1045[20];
            v1044[19] = v1045[19];
            v1044[20] = v1057;
            uint64_t v1058 = v1045[22];
            v1044[21] = v1045[21];
            v1044[22] = v1058;
            uint64_t v2471 = v1045[24];
            v1044[23] = v1045[23];
            v1044[24] = v2471;
            uint64_t v1059 = v1045[26];
            v1044[25] = v1045[25];
            v1044[26] = v1059;
            uint64_t v1060 = v1045[28];
            v1044[27] = v1045[27];
            v1044[28] = v1060;
            uint64_t v1061 = v1045[30];
            v1044[29] = v1045[29];
            v1044[30] = v1061;
            uint64_t v1062 = v1045[32];
            v1044[31] = v1045[31];
            v1044[32] = v1062;
            uint64_t v1064 = v1045[33];
            uint64_t v1063 = v1045[34];
            *((unsigned char *)v1044 + 280) = *((unsigned char *)v1045 + 280);
            v1044[33] = v1064;
            v1044[34] = v1063;
            uint64_t v1065 = v1045[37];
            v1044[36] = v1045[36];
            v1044[37] = v1065;
            uint64_t v1066 = *(int *)(v1046 + 108);
            uint64_t v2535 = (char *)v1044 + v1066;
            uint64_t v1067 = (char *)v1045 + v1066;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1067, 1, v2693))
            {
              uint64_t v1068 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2535, v1067, *(void *)(*(void *)(v1068 - 8) + 64));
            }
            else
            {
              v2678(v2535, v1067, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2535, 0, 1, v2693);
            }
            uint64_t v1121 = *(int *)(v1046 + 112);
            uint64_t v1122 = (char *)v1044 + v1121;
            uint64_t v1123 = (char *)v1045 + v1121;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1045 + v1121, 1, v2693))
            {
              uint64_t v1124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1122, v1123, *(void *)(*(void *)(v1124 - 8) + 64));
            }
            else
            {
              v2678(v1122, v1123, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v1122, 0, 1, v2693);
            }
            uint64_t v502 = (uint64_t)v2640;
            __swift_storeEnumTagSinglePayload((uint64_t)v1044, 0, 1, v1046);
            uint64_t v501 = v2616;
            uint64_t v352 = v2578;
          }
          uint64_t v1134 = v501[9];
          uint64_t v1135 = (void *)(v502 + v1134);
          v1136 = (void *)((char *)v352 + v1134);
          v1137 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1136, 1, (uint64_t)v1137))
          {
            uint64_t v1138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v1135, v1136, *(void *)(*(void *)(v1138 - 8) + 64));
          }
          else
          {
            uint64_t v1139 = v1136[1];
            void *v1135 = *v1136;
            v1135[1] = v1139;
            uint64_t v1140 = v1136[3];
            v1135[2] = v1136[2];
            v1135[3] = v1140;
            uint64_t v1141 = v1136[5];
            v1135[4] = v1136[4];
            v1135[5] = v1141;
            uint64_t v1142 = v1136[7];
            v1135[6] = v1136[6];
            v1135[7] = v1142;
            uint64_t v1143 = v1136[9];
            v1135[8] = v1136[8];
            v1135[9] = v1143;
            uint64_t v1144 = v1136[11];
            v1135[10] = v1136[10];
            v1135[11] = v1144;
            uint64_t v1145 = v1136[13];
            v1135[12] = v1136[12];
            v1135[13] = v1145;
            uint64_t v1146 = v1136[15];
            v1135[14] = v1136[14];
            v1135[15] = v1146;
            *((unsigned char *)v1135 + 128) = *((unsigned char *)v1136 + 128);
            *(_WORD *)((char *)v1135 + 129) = *(_WORD *)((char *)v1136 + 129);
            uint64_t v1147 = v1136[18];
            v1135[17] = v1136[17];
            v1135[18] = v1147;
            uint64_t v1148 = v1136[20];
            v1135[19] = v1136[19];
            v1135[20] = v1148;
            uint64_t v1149 = v1136[22];
            v1135[21] = v1136[21];
            v1135[22] = v1149;
            uint64_t v1150 = v1136[24];
            v1135[23] = v1136[23];
            v1135[24] = v1150;
            uint64_t v1151 = v1136[26];
            v1135[25] = v1136[25];
            v1135[26] = v1151;
            uint64_t v1152 = v1136[28];
            v1135[27] = v1136[27];
            v1135[28] = v1152;
            uint64_t v1153 = v1136[30];
            v1135[29] = v1136[29];
            v1135[30] = v1153;
            v1135[31] = v1136[31];
            uint64_t v1154 = v1137[24];
            v2536 = (char *)v1135 + v1154;
            uint64_t v2469 = (char *)v1136 + v1154;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2469, 1, v2693))
            {
              uint64_t v1155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2536, v2469, *(void *)(*(void *)(v1155 - 8) + 64));
            }
            else
            {
              v2678(v2536, v2469, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2536, 0, 1, v2693);
            }
            uint64_t v1202 = v1137[25];
            v1203 = (char *)v1135 + v1202;
            v1204 = (char *)v1136 + v1202;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1136 + v1202, 1, v2693))
            {
              uint64_t v1205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1203, v1204, *(void *)(*(void *)(v1205 - 8) + 64));
            }
            else
            {
              v2678(v1203, v1204, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v1203, 0, 1, v2693);
            }
            uint64_t v1214 = v1137[26];
            v1215 = (char *)v1135 + v1214;
            v1216 = (char *)v1136 + v1214;
            uint64_t v1217 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1216, 1, v1217))
            {
              uint64_t v1218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1215, v1216, *(void *)(*(void *)(v1218 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1217 - 8) + 16))(v1215, v1216, v1217);
              __swift_storeEnumTagSinglePayload((uint64_t)v1215, 0, 1, v1217);
            }
            uint64_t v502 = (uint64_t)v2640;
            __swift_storeEnumTagSinglePayload((uint64_t)v1135, 0, 1, (uint64_t)v1137);
            uint64_t v501 = v2616;
            uint64_t v352 = v2578;
          }
          uint64_t v1228 = v501[10];
          v1229 = (void *)(v502 + v1228);
          v1230 = (void *)((char *)v352 + v1228);
          uint64_t v1231 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1230, 1, (uint64_t)v1231))
          {
            uint64_t v1232 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v1229, v1230, *(void *)(*(void *)(v1232 - 8) + 64));
          }
          else
          {
            uint64_t v1233 = v1230[1];
            void *v1229 = *v1230;
            v1229[1] = v1233;
            uint64_t v1234 = v1230[3];
            v1229[2] = v1230[2];
            v1229[3] = v1234;
            uint64_t v1235 = v1230[5];
            v1229[4] = v1230[4];
            v1229[5] = v1235;
            uint64_t v1236 = v1230[7];
            v1229[6] = v1230[6];
            v1229[7] = v1236;
            uint64_t v1237 = v1230[9];
            v1229[8] = v1230[8];
            v1229[9] = v1237;
            uint64_t v1238 = v1230[11];
            v1229[10] = v1230[10];
            v1229[11] = v1238;
            uint64_t v1239 = v1230[13];
            v1229[12] = v1230[12];
            v1229[13] = v1239;
            uint64_t v1240 = v1230[15];
            v1229[14] = v1230[14];
            v1229[15] = v1240;
            *((unsigned char *)v1229 + 128) = *((unsigned char *)v1230 + 128);
            *(_WORD *)((char *)v1229 + 129) = *(_WORD *)((char *)v1230 + 129);
            uint64_t v1241 = v1230[18];
            v1229[17] = v1230[17];
            v1229[18] = v1241;
            uint64_t v1242 = v1230[20];
            v1229[19] = v1230[19];
            v1229[20] = v1242;
            uint64_t v1243 = v1230[22];
            v1229[21] = v1230[21];
            v1229[22] = v1243;
            uint64_t v1244 = v1230[24];
            v1229[23] = v1230[23];
            v1229[24] = v1244;
            uint64_t v1245 = v1230[26];
            v1229[25] = v1230[25];
            v1229[26] = v1245;
            v1229[27] = v1230[27];
            uint64_t v1246 = v1231[22];
            uint64_t v2537 = (char *)v1229 + v1246;
            uint64_t v2476 = (char *)v1230 + v1246;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2476, 1, v2693))
            {
              uint64_t v1247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2537, v2476, *(void *)(*(void *)(v1247 - 8) + 64));
            }
            else
            {
              v2678(v2537, v2476, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2537, 0, 1, v2693);
            }
            uint64_t v1290 = v1231[23];
            v1291 = (char *)v1229 + v1290;
            uint64_t v1292 = (char *)v1230 + v1290;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1230 + v1290, 1, v2693))
            {
              uint64_t v1293 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1291, v1292, *(void *)(*(void *)(v1293 - 8) + 64));
            }
            else
            {
              v2678(v1291, v1292, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v1291, 0, 1, v2693);
            }
            uint64_t v1302 = v1231[24];
            v1303 = (char *)v1229 + v1302;
            uint64_t v1304 = (char *)v1230 + v1302;
            *(void *)v1303 = *(void *)v1304;
            v1303[8] = v1304[8];
            uint64_t v1305 = v1231[25];
            v1306 = (char *)v1229 + v1305;
            v1307 = (char *)v1230 + v1305;
            uint64_t v1308 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1307, 1, v1308))
            {
              uint64_t v1309 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1306, v1307, *(void *)(*(void *)(v1309 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1308 - 8) + 16))(v1306, v1307, v1308);
              __swift_storeEnumTagSinglePayload((uint64_t)v1306, 0, 1, v1308);
            }
            uint64_t v502 = (uint64_t)v2640;
            __swift_storeEnumTagSinglePayload((uint64_t)v1229, 0, 1, (uint64_t)v1231);
            uint64_t v501 = v2616;
            uint64_t v352 = v2578;
          }
          uint64_t v1325 = v501[11];
          v1326 = (void *)(v502 + v1325);
          uint64_t v1327 = (void *)((char *)v352 + v1325);
          uint64_t v1328 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1327, 1, (uint64_t)v1328))
          {
            uint64_t v1329 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v1326, v1327, *(void *)(*(void *)(v1329 - 8) + 64));
          }
          else
          {
            uint64_t v1330 = v1327[1];
            void *v1326 = *v1327;
            v1326[1] = v1330;
            uint64_t v2538 = (void *)v1327[3];
            v1326[2] = v1327[2];
            v1326[3] = v2538;
            uint64_t v1331 = v1327[5];
            v1326[4] = v1327[4];
            v1326[5] = v1331;
            uint64_t v1332 = v1327[7];
            v1326[6] = v1327[6];
            v1326[7] = v1332;
            uint64_t v1333 = v1327[9];
            v1326[8] = v1327[8];
            v1326[9] = v1333;
            uint64_t v1334 = v1327[11];
            v1326[10] = v1327[10];
            v1326[11] = v1334;
            *((unsigned char *)v1326 + 96) = *((unsigned char *)v1327 + 96);
            uint64_t v1335 = v1327[14];
            v1326[13] = v1327[13];
            v1326[14] = v1335;
            uint64_t v1336 = v1328[13];
            v2560 = (char *)v1326 + v1336;
            uint64_t v1337 = (char *)v1327 + v1336;
            uint64_t v1338 = type metadata accessor for URL();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1337, 1, v1338))
            {
              uint64_t v1339 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v2560, v1337, *(void *)(*(void *)(v1339 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1338 - 8) + 16))(v2560, v1337, v1338);
              __swift_storeEnumTagSinglePayload((uint64_t)v2560, 0, 1, v1338);
            }
            uint64_t v1370 = v1328[14];
            uint64_t v1371 = (char *)v1326 + v1370;
            v1372 = (char *)v1327 + v1370;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1327 + v1370, 1, v1338))
            {
              uint64_t v1373 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1371, v1372, *(void *)(*(void *)(v1373 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1338 - 8) + 16))(v1371, v1372, v1338);
              __swift_storeEnumTagSinglePayload((uint64_t)v1371, 0, 1, v1338);
            }
            uint64_t v1382 = v1328[15];
            v1383 = (void *)((char *)v1326 + v1382);
            v1384 = (void *)((char *)v1327 + v1382);
            v2561 = (void *)v1384[1];
            void *v1383 = *v1384;
            v1383[1] = v2561;
            uint64_t v1385 = v1328[16];
            uint64_t v1386 = (void *)((char *)v1326 + v1385);
            v1387 = (void *)((char *)v1327 + v1385);
            v2539 = (void *)v1387[1];
            *uint64_t v1386 = *v1387;
            v1386[1] = v2539;
            uint64_t v1388 = v1328[17];
            uint64_t v1389 = (void *)((char *)v1326 + v1388);
            v1390 = (void *)((char *)v1327 + v1388);
            uint64_t v1391 = v1390[1];
            *uint64_t v1389 = *v1390;
            v1389[1] = v1391;
            uint64_t v1392 = v1328[18];
            v2517 = (char *)v1327 + v1392;
            uint64_t v2525 = (char *)v1326 + v1392;
            uint64_t v1393 = type metadata accessor for DateComponents();
            v1394 = *(void (**)(char *, char *, uint64_t))(*(void *)(v1393 - 8) + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1394(v2525, v2517, v1393);
            v1394((char *)v1326 + v1328[19], (char *)v1327 + v1328[19], v1393);
            uint64_t v1395 = v1328[20];
            uint64_t v1396 = (void *)((char *)v1326 + v1395);
            uint64_t v1397 = (void *)((char *)v1327 + v1395);
            uint64_t v1398 = v1397[1];
            *uint64_t v1396 = *v1397;
            v1396[1] = v1398;
            uint64_t v1399 = v1328[21];
            v1400 = (void *)((char *)v1326 + v1399);
            v1401 = (void *)((char *)v1327 + v1399);
            uint64_t v1402 = v1401[1];
            void *v1400 = *v1401;
            v1400[1] = v1402;
            uint64_t v1403 = v1328[22];
            v1404 = (void *)((char *)v1326 + v1403);
            v1405 = (void *)((char *)v1327 + v1403);
            uint64_t v2511 = v1405[1];
            void *v1404 = *v1405;
            v1404[1] = v2511;
            uint64_t v1406 = v1328[23];
            uint64_t v1407 = (void *)((char *)v1326 + v1406);
            v1408 = (void *)((char *)v1327 + v1406);
            v2562 = (void *)v1408[1];
            *uint64_t v1407 = *v1408;
            v1407[1] = v2562;
            uint64_t v1409 = v1328[24];
            uint64_t v1410 = (void *)((char *)v1326 + v1409);
            v1411 = (void *)((char *)v1327 + v1409);
            uint64_t v2526 = v1411[1];
            *uint64_t v1410 = *v1411;
            v1410[1] = v2526;
            uint64_t v1412 = v1328[25];
            uint64_t v1413 = (void *)((char *)v1326 + v1412);
            v1414 = (void *)((char *)v1327 + v1412);
            v2518 = (void *)v1414[1];
            *uint64_t v1413 = *v1414;
            v1413[1] = v2518;
            uint64_t v1415 = v1328[26];
            uint64_t v1416 = (void *)((char *)v1326 + v1415);
            v1417 = (void *)((char *)v1327 + v1415);
            v2504 = (void *)v1417[1];
            *uint64_t v1416 = *v1417;
            v1416[1] = v2504;
            uint64_t v1418 = v1328[27];
            uint64_t v1419 = (void *)((char *)v1326 + v1418);
            v1420 = (void *)((char *)v1327 + v1418);
            v2498 = (void *)v1420[1];
            *uint64_t v1419 = *v1420;
            v1419[1] = v2498;
            uint64_t v1421 = v1328[28];
            uint64_t v1422 = (void *)((char *)v1326 + v1421);
            v1423 = (void *)((char *)v1327 + v1421);
            v2492 = (void *)v1423[1];
            *uint64_t v1422 = *v1423;
            v1422[1] = v2492;
            uint64_t v1424 = v1328[29];
            uint64_t v1425 = (void *)((char *)v1326 + v1424);
            v1426 = (void *)((char *)v1327 + v1424);
            uint64_t v2486 = (void *)v1426[1];
            *uint64_t v1425 = *v1426;
            v1425[1] = v2486;
            uint64_t v1427 = v1328[30];
            uint64_t v1428 = (void *)((char *)v1326 + v1427);
            v1429 = (void *)((char *)v1327 + v1427);
            uint64_t v2482 = v1429[1];
            *uint64_t v1428 = *v1429;
            v1428[1] = v2482;
            uint64_t v1430 = v1328[31];
            uint64_t v1431 = (void *)((char *)v1326 + v1430);
            v1432 = (void *)((char *)v1327 + v1430);
            uint64_t v2480 = v1432[1];
            *uint64_t v1431 = *v1432;
            v1431[1] = v2480;
            uint64_t v1433 = v1328[32];
            uint64_t v1434 = (void *)((char *)v1326 + v1433);
            v1435 = (void *)((char *)v1327 + v1433);
            uint64_t v2472 = v1435[1];
            *uint64_t v1434 = *v1435;
            v1434[1] = v2472;
            *(void *)((char *)v1326 + v1328[33]) = *(void *)((char *)v1327 + v1328[33]);
            *(void *)((char *)v1326 + v1328[34]) = *(void *)((char *)v1327 + v1328[34]);
            uint64_t v1436 = v1328[35];
            uint64_t v1437 = (void *)((char *)v1326 + v1436);
            v1438 = (void *)((char *)v1327 + v1436);
            uint64_t v2470 = v1438[1];
            *uint64_t v1437 = *v1438;
            v1437[1] = v2470;
            uint64_t v1439 = v1328[36];
            uint64_t v1440 = (void *)((char *)v1326 + v1439);
            v1441 = (void *)((char *)v1327 + v1439);
            uint64_t v1442 = v1441[1];
            *uint64_t v1440 = *v1441;
            v1440[1] = v1442;
            uint64_t v1443 = v1328[37];
            v1444 = (void *)((char *)v1326 + v1443);
            v1445 = (void *)((char *)v1327 + v1443);
            uint64_t v1446 = v1445[1];
            void *v1444 = *v1445;
            v1444[1] = v1446;
            uint64_t v1447 = v1328[38];
            v2540 = (char *)v1326 + v1447;
            v1448 = (char *)v1327 + v1447;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1448, 1, v2693))
            {
              uint64_t v1449 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v2540, v1448, *(void *)(*(void *)(v1449 - 8) + 64));
            }
            else
            {
              v2678(v2540, v1448, v2693);
              __swift_storeEnumTagSinglePayload((uint64_t)v2540, 0, 1, v2693);
            }
            uint64_t v1588 = v1328[39];
            v1589 = (void *)((char *)v1326 + v1588);
            uint64_t v1590 = (void *)((char *)v1327 + v1588);
            uint64_t v1591 = v1590[1];
            void *v1589 = *v1590;
            v1589[1] = v1591;
            uint64_t v1592 = v1328[40];
            v1593 = (void *)((char *)v1326 + v1592);
            uint64_t v1594 = (void *)((char *)v1327 + v1592);
            v2567 = (void *)v1594[1];
            void *v1593 = *v1594;
            v1593[1] = v2567;
            uint64_t v1595 = v1328[41];
            v1596 = (char *)v1326 + v1595;
            v1597 = (char *)v1327 + v1595;
            v1596[8] = v1597[8];
            *(void *)v1596 = *(void *)v1597;
            uint64_t v1598 = v1328[42];
            v1599 = (void *)((char *)v1326 + v1598);
            v1600 = (void *)((char *)v1327 + v1598);
            v2545 = (void *)v1600[1];
            void *v1599 = *v1600;
            v1599[1] = v2545;
            uint64_t v1601 = v1328[43];
            v1602 = (char *)v1326 + v1601;
            v1603 = (char *)v1327 + v1601;
            *(_OWORD *)v1602 = *(_OWORD *)v1603;
            *(void *)(v1602 + 13) = *(void *)(v1603 + 13);
            uint64_t v1604 = v1328[44];
            v1605 = (void *)((char *)v1326 + v1604);
            v1606 = (void *)((char *)v1327 + v1604);
            uint64_t v1607 = v1606[1];
            void *v1605 = *v1606;
            v1605[1] = v1607;
            uint64_t v1608 = v1328[45];
            v1609 = (void *)((char *)v1326 + v1608);
            uint64_t v1610 = (void *)((char *)v1327 + v1608);
            uint64_t v1611 = v1610[1];
            void *v1609 = *v1610;
            v1609[1] = v1611;
            uint64_t v1612 = v1328[46];
            v1613 = (void *)((char *)v1326 + v1612);
            uint64_t v1614 = (void *)((char *)v1327 + v1612);
            uint64_t v1615 = v1614[1];
            void *v1613 = *v1614;
            v1613[1] = v1615;
            uint64_t v1616 = v1328[47];
            v1617 = (void *)((char *)v1326 + v1616);
            uint64_t v1618 = (void *)((char *)v1327 + v1616);
            uint64_t v1619 = v1618[1];
            void *v1617 = *v1618;
            v1617[1] = v1619;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1326, 0, 1, (uint64_t)v1328);
            uint64_t v501 = v2616;
            uint64_t v502 = (uint64_t)v2640;
            uint64_t v352 = v2578;
          }
          uint64_t v1620 = v501[12];
          v1621 = (void *)(v502 + v1620);
          uint64_t v1622 = (void *)((char *)v352 + v1620);
          uint64_t v1623 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1622, 1, (uint64_t)v1623))
          {
            uint64_t v1624 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v1621, v1622, *(void *)(*(void *)(v1624 - 8) + 64));
          }
          else
          {
            uint64_t v1625 = v1622[1];
            void *v1621 = *v1622;
            v1621[1] = v1625;
            v2546 = (void *)v1622[3];
            v1621[2] = v1622[2];
            v1621[3] = v2546;
            uint64_t v1626 = v1622[5];
            v1621[4] = v1622[4];
            v1621[5] = v1626;
            uint64_t v1627 = v1622[7];
            v1621[6] = v1622[6];
            v1621[7] = v1627;
            uint64_t v1628 = v1622[9];
            v1621[8] = v1622[8];
            v1621[9] = v1628;
            uint64_t v1629 = v1622[11];
            v1621[10] = v1622[10];
            v1621[11] = v1629;
            *((unsigned char *)v1621 + 96) = *((unsigned char *)v1622 + 96);
            uint64_t v1630 = v1622[14];
            v1621[13] = v1622[13];
            v1621[14] = v1630;
            uint64_t v1631 = v1622[16];
            v1621[15] = v1622[15];
            v1621[16] = v1631;
            uint64_t v1632 = v1623[14];
            v2568 = (char *)v1621 + v1632;
            uint64_t v1633 = (char *)v1622 + v1632;
            uint64_t v2489 = (void *)type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v1633, 1, (uint64_t)v2489))
            {
              uint64_t v1634 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2568, v1633, *(void *)(*(void *)(v1634 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v2489 - 1) + 16))(v2568, v1633, v2489);
              __swift_storeEnumTagSinglePayload((uint64_t)v2568, 0, 1, (uint64_t)v2489);
            }
            uint64_t v1735 = v1623[15];
            uint64_t v1736 = (char *)v1621 + v1735;
            uint64_t v1737 = (char *)v1622 + v1735;
            if (__swift_getEnumTagSinglePayload((uint64_t)v1622 + v1735, 1, (uint64_t)v2489))
            {
              uint64_t v1738 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1736, v1737, *(void *)(*(void *)(v1738 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v2489 - 1) + 16))(v1736, v1737, v2489);
              __swift_storeEnumTagSinglePayload((uint64_t)v1736, 0, 1, (uint64_t)v2489);
            }
            uint64_t v1747 = v1623[16];
            uint64_t v1748 = (void *)((char *)v1621 + v1747);
            uint64_t v1749 = (void *)((char *)v1622 + v1747);
            uint64_t v1750 = v1749[1];
            *uint64_t v1748 = *v1749;
            v1748[1] = v1750;
            uint64_t v1751 = v1623[17];
            uint64_t v1752 = (void *)((char *)v1621 + v1751);
            uint64_t v1753 = (void *)((char *)v1622 + v1751);
            v2569 = (void *)v1753[1];
            *uint64_t v1752 = *v1753;
            v1752[1] = v2569;
            uint64_t v1754 = v1623[18];
            v1755 = (void *)((char *)v1621 + v1754);
            uint64_t v1756 = (void *)((char *)v1622 + v1754);
            v2547 = (void *)v1756[1];
            void *v1755 = *v1756;
            v1755[1] = v2547;
            uint64_t v1757 = v1623[19];
            v1758 = (void *)((char *)v1621 + v1757);
            uint64_t v1759 = (void *)((char *)v1622 + v1757);
            uint64_t v2530 = v1759[1];
            void *v1758 = *v1759;
            v1758[1] = v2530;
            uint64_t v1760 = v1623[20];
            v1761 = (void *)((char *)v1621 + v1760);
            uint64_t v1762 = (void *)((char *)v1622 + v1760);
            v2508 = (void *)v1762[1];
            void *v1761 = *v1762;
            v1761[1] = v2508;
            *(void *)((char *)v1621 + v1623[21]) = *(void *)((char *)v1622 + v1623[21]);
            *(void *)((char *)v1621 + v1623[22]) = *(void *)((char *)v1622 + v1623[22]);
            uint64_t v1763 = v1623[23];
            v1764 = (char *)v1621 + v1763;
            uint64_t v1765 = (char *)v1622 + v1763;
            *(void *)v1764 = *(void *)v1765;
            v1764[8] = v1765[8];
            uint64_t v1766 = v1623[24];
            v1767 = (char *)v1621 + v1766;
            uint64_t v1768 = (char *)v1622 + v1766;
            *(void *)v1767 = *(void *)v1768;
            v1767[8] = v1768[8];
            uint64_t v1769 = v1623[25];
            v1770 = (void *)((char *)v1621 + v1769);
            uint64_t v1771 = (void *)((char *)v1622 + v1769);
            v2501 = (void *)v1771[1];
            void *v1770 = *v1771;
            v1770[1] = v2501;
            uint64_t v1772 = v1623[26];
            v1773 = (void *)((char *)v1621 + v1772);
            uint64_t v1774 = (void *)((char *)v1622 + v1772);
            uint64_t v1775 = v1774[1];
            void *v1773 = *v1774;
            v1773[1] = v1775;
            uint64_t v1776 = v1623[27];
            uint64_t v1777 = (void *)((char *)v1621 + v1776);
            uint64_t v1778 = (void *)((char *)v1622 + v1776);
            uint64_t v1779 = v1778[1];
            *uint64_t v1777 = *v1778;
            v1777[1] = v1779;
            uint64_t v1780 = v1623[28];
            uint64_t v1781 = (void *)((char *)v1621 + v1780);
            uint64_t v1782 = (void *)((char *)v1622 + v1780);
            uint64_t v1783 = v1782[1];
            *uint64_t v1781 = *v1782;
            v1781[1] = v1783;
            uint64_t v1784 = v1623[29];
            uint64_t v1785 = (char *)v1621 + v1784;
            uint64_t v1786 = (char *)v1622 + v1784;
            *(void *)uint64_t v1785 = *(void *)v1786;
            v1785[8] = v1786[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1621, 0, 1, (uint64_t)v1623);
            uint64_t v501 = v2616;
            uint64_t v502 = (uint64_t)v2640;
            uint64_t v352 = v2578;
          }
          uint64_t v1787 = v501[13];
          v1788 = (void *)(v502 + v1787);
          uint64_t v1789 = (void *)((char *)v352 + v1787);
          v1790 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v1789, 1, (uint64_t)v1790))
          {
            uint64_t v1791 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v1788, v1789, *(void *)(*(void *)(v1791 - 8) + 64));
          }
          else
          {
            uint64_t v1792 = v1789[1];
            void *v1788 = *v1789;
            v1788[1] = v1792;
            v2570 = (void *)v1789[3];
            v1788[2] = v1789[2];
            v1788[3] = v2570;
            uint64_t v1793 = v1789[5];
            v1788[4] = v1789[4];
            v1788[5] = v1793;
            uint64_t v1794 = v1789[7];
            v1788[6] = v1789[6];
            v1788[7] = v1794;
            uint64_t v1795 = v1789[9];
            v1788[8] = v1789[8];
            v1788[9] = v1795;
            uint64_t v1796 = v1789[11];
            v1788[10] = v1789[10];
            v1788[11] = v1796;
            *((unsigned char *)v1788 + 96) = *((unsigned char *)v1789 + 96);
            uint64_t v1797 = v1789[14];
            v1788[13] = v1789[13];
            v1788[14] = v1797;
            uint64_t v1798 = v1789[16];
            v1788[15] = v1789[15];
            v1788[16] = v1798;
            uint64_t v1799 = v1790[14];
            v2597 = (char *)v1788 + v1799;
            v2495 = (char *)v1789 + v1799;
            uint64_t v1800 = type metadata accessor for DateComponents();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__swift_getEnumTagSinglePayload((uint64_t)v2495, 1, v1800))
            {
              uint64_t v1801 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v2597, v2495, *(void *)(*(void *)(v1801 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1800 - 8) + 16))(v2597, v2495, v1800);
              __swift_storeEnumTagSinglePayload((uint64_t)v2597, 0, 1, v1800);
            }
            uint64_t v1917 = v1790[15];
            v1918 = (void *)((char *)v1788 + v1917);
            uint64_t v1919 = (void *)((char *)v1789 + v1917);
            uint64_t v1920 = v1919[1];
            void *v1918 = *v1919;
            v1918[1] = v1920;
            uint64_t v1921 = v1790[16];
            v1922 = (void *)((char *)v1788 + v1921);
            v1923 = (void *)((char *)v1789 + v1921);
            uint64_t v2600 = (void *)v1923[1];
            void *v1922 = *v1923;
            v1922[1] = v2600;
            uint64_t v1924 = v1790[17];
            uint64_t v1925 = (void *)((char *)v1788 + v1924);
            v1926 = (void *)((char *)v1789 + v1924);
            v2573 = (void *)v1926[1];
            *uint64_t v1925 = *v1926;
            v1925[1] = v2573;
            uint64_t v1927 = v1790[18];
            uint64_t v1928 = (void *)((char *)v1788 + v1927);
            v1929 = (void *)((char *)v1789 + v1927);
            v2548 = (void *)v1929[1];
            *uint64_t v1928 = *v1929;
            v1928[1] = v2548;
            uint64_t v1930 = v1790[19];
            uint64_t v1931 = (void *)((char *)v1788 + v1930);
            v1932 = (void *)((char *)v1789 + v1930);
            uint64_t v1933 = v1932[1];
            *uint64_t v1931 = *v1932;
            v1931[1] = v1933;
            *(void *)((char *)v1788 + v1790[20]) = *(void *)((char *)v1789 + v1790[20]);
            uint64_t v1934 = v1790[21];
            v1935 = (void *)((char *)v1788 + v1934);
            v1936 = (void *)((char *)v1789 + v1934);
            uint64_t v1937 = v1936[1];
            void *v1935 = *v1936;
            v1935[1] = v1937;
            uint64_t v1938 = v1790[22];
            v1939 = (void *)((char *)v1788 + v1938);
            v1940 = (void *)((char *)v1789 + v1938);
            uint64_t v1941 = v1940[1];
            void *v1939 = *v1940;
            v1939[1] = v1941;
            uint64_t v1942 = v1790[23];
            v1943 = (void *)((char *)v1788 + v1942);
            v1944 = (void *)((char *)v1789 + v1942);
            uint64_t v1945 = v1944[1];
            void *v1943 = *v1944;
            v1943[1] = v1945;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_storeEnumTagSinglePayload((uint64_t)v1788, 0, 1, (uint64_t)v1790);
            uint64_t v501 = v2616;
            uint64_t v502 = (uint64_t)v2640;
          }
          __swift_storeEnumTagSinglePayload(v502, 0, 1, (uint64_t)v501);
          uint64_t v345 = v2751;
        }
        uint64_t v1946 = v2710[22];
        v1947 = (void *)((char *)v345 + v1946);
        v1948 = (void *)((char *)v25 + v1946);
        uint64_t v1949 = type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1948, 1, v1949))
        {
          uint64_t v1950 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v1947, v1948, *(void *)(*(void *)(v1950 - 8) + 64));
        }
        else
        {
          uint64_t v1951 = v1948[1];
          void *v1947 = *v1948;
          v1947[1] = v1951;
          uint64_t v1952 = v1948[3];
          v1947[2] = v1948[2];
          v1947[3] = v1952;
          uint64_t v1953 = v1948[5];
          v1947[4] = v1948[4];
          v1947[5] = v1953;
          uint64_t v1954 = v1948[7];
          v1947[6] = v1948[6];
          v1947[7] = v1954;
          uint64_t v1955 = (int *)v1949;
          uint64_t v1956 = v1948[9];
          v1947[8] = v1948[8];
          v1947[9] = v1956;
          uint64_t v1957 = v1948[11];
          v1947[10] = v1948[10];
          v1947[11] = v1957;
          uint64_t v2644 = v1955;
          uint64_t v1958 = v1955[10];
          v2622 = (char *)v1947 + v1958;
          v2574 = (char *)v1948 + v1958;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2574, 1, v2693))
          {
            uint64_t v1959 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2622, v2574, *(void *)(*(void *)(v1959 - 8) + 64));
          }
          else
          {
            v2678(v2622, v2574, v2693);
            __swift_storeEnumTagSinglePayload((uint64_t)v2622, 0, 1, v2693);
          }
          uint64_t v1960 = v2644[11];
          uint64_t v1961 = (char *)v1947 + v1960;
          uint64_t v1962 = (char *)v1948 + v1960;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1948 + v1960, 1, v2693))
          {
            uint64_t v1963 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1961, v1962, *(void *)(*(void *)(v1963 - 8) + 64));
          }
          else
          {
            v2678(v1961, v1962, v2693);
            __swift_storeEnumTagSinglePayload((uint64_t)v1961, 0, 1, v2693);
          }
          uint64_t v1964 = v2644[12];
          v1965 = (void *)((char *)v1947 + v1964);
          v1966 = (void *)((char *)v1948 + v1964);
          uint64_t v1967 = v1966[1];
          void *v1965 = *v1966;
          v1965[1] = v1967;
          uint64_t v1968 = v2644[13];
          v1969 = (void *)((char *)v1947 + v1968);
          v1970 = (void *)((char *)v1948 + v1968);
          uint64_t v1971 = v1970[1];
          void *v1969 = *v1970;
          v1969[1] = v1971;
          uint64_t v1972 = v2644[14];
          v1973 = (void *)((char *)v1947 + v1972);
          v1974 = (void *)((char *)v1948 + v1972);
          uint64_t v1975 = v1974[1];
          void *v1973 = *v1974;
          v1973[1] = v1975;
          uint64_t v1976 = v2644[15];
          uint64_t v2623 = (char *)v1947 + v1976;
          v1977 = (char *)v1948 + v1976;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v1977, 1, v2693))
          {
            uint64_t v1978 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2623, v1977, *(void *)(*(void *)(v1978 - 8) + 64));
          }
          else
          {
            v2678(v2623, v1977, v2693);
            __swift_storeEnumTagSinglePayload((uint64_t)v2623, 0, 1, v2693);
          }
          uint64_t v1979 = v2644[16];
          uint64_t v1980 = (void *)((char *)v1947 + v1979);
          v1981 = (void *)((char *)v1948 + v1979);
          uint64_t v1982 = v1981[1];
          *uint64_t v1980 = *v1981;
          v1980[1] = v1982;
          uint64_t v1983 = v2644[17];
          v1984 = (void *)((char *)v1947 + v1983);
          v1985 = (void *)((char *)v1948 + v1983);
          uint64_t v2624 = v1985[1];
          void *v1984 = *v1985;
          v1984[1] = v2624;
          uint64_t v1986 = v2644[18];
          uint64_t v1987 = (void *)((char *)v1947 + v1986);
          v1988 = (void *)((char *)v1948 + v1986);
          uint64_t v2601 = (void *)v1988[1];
          *uint64_t v1987 = *v1988;
          v1987[1] = v2601;
          uint64_t v1989 = v2644[19];
          uint64_t v1990 = (void *)((char *)v1947 + v1989);
          v1991 = (void *)((char *)v1948 + v1989);
          v2575 = (void *)v1991[1];
          *uint64_t v1990 = *v1991;
          v1990[1] = v2575;
          uint64_t v1992 = v2644[20];
          uint64_t v1993 = (void *)((char *)v1947 + v1992);
          v1994 = (void *)((char *)v1948 + v1992);
          uint64_t v1995 = v1994[1];
          *uint64_t v1993 = *v1994;
          v1993[1] = v1995;
          uint64_t v1996 = v2644[21];
          v1997 = (void *)((char *)v1947 + v1996);
          v1998 = (void *)((char *)v1948 + v1996);
          uint64_t v1999 = v1998[1];
          void *v1997 = *v1998;
          v1997[1] = v1999;
          uint64_t v2000 = v2644[22];
          v2001 = (void *)((char *)v1947 + v2000);
          v2002 = (void *)((char *)v1948 + v2000);
          uint64_t v2003 = v2002[1];
          void *v2001 = *v2002;
          v2001[1] = v2003;
          uint64_t v2004 = v2644[23];
          v2005 = (void *)((char *)v1947 + v2004);
          v2006 = (void *)((char *)v1948 + v2004);
          uint64_t v2007 = v2006[1];
          void *v2005 = *v2006;
          v2005[1] = v2007;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v1947, 0, 1, (uint64_t)v2644);
          uint64_t v345 = v2751;
        }
        uint64_t v2008 = v2710[23];
        v2009 = (void *)((char *)v345 + v2008);
        v2010 = (void *)((char *)v25 + v2008);
        uint64_t v2011 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2010, 1, (uint64_t)v2011))
        {
          uint64_t v2012 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v2009, v2010, *(void *)(*(void *)(v2012 - 8) + 64));
        }
        else
        {
          uint64_t v2013 = v2010[1];
          void *v2009 = *v2010;
          v2009[1] = v2013;
          uint64_t v2014 = v2010[3];
          v2009[2] = v2010[2];
          v2009[3] = v2014;
          uint64_t v2015 = v2010[5];
          v2009[4] = v2010[4];
          v2009[5] = v2015;
          uint64_t v2016 = v2010[7];
          v2009[6] = v2010[6];
          v2009[7] = v2016;
          uint64_t v2625 = v2010[9];
          v2009[8] = v2010[8];
          v2009[9] = v2625;
          uint64_t v2017 = v2010[11];
          v2009[10] = v2010[10];
          v2009[11] = v2017;
          uint64_t v2018 = v2011[11];
          uint64_t v2645 = (char *)v2009 + v2018;
          uint64_t v2019 = (char *)v2010 + v2018;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2019, 1, v2693))
          {
            uint64_t v2020 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2645, v2019, *(void *)(*(void *)(v2020 - 8) + 64));
          }
          else
          {
            v2678(v2645, v2019, v2693);
            __swift_storeEnumTagSinglePayload((uint64_t)v2645, 0, 1, v2693);
          }
          uint64_t v2021 = v2011[12];
          uint64_t v2022 = (void *)((char *)v2009 + v2021);
          uint64_t v2023 = (void *)((char *)v2010 + v2021);
          uint64_t v2024 = v2023[1];
          *uint64_t v2022 = *v2023;
          v2022[1] = v2024;
          *(void *)((char *)v2009 + v2011[13]) = *(void *)((char *)v2010 + v2011[13]);
          uint64_t v2025 = v2011[14];
          uint64_t v2646 = (char *)v2009 + v2025;
          uint64_t v2026 = (char *)v2010 + v2025;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2026, 1, v2693))
          {
            uint64_t v2027 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2646, v2026, *(void *)(*(void *)(v2027 - 8) + 64));
          }
          else
          {
            v2678(v2646, v2026, v2693);
            __swift_storeEnumTagSinglePayload((uint64_t)v2646, 0, 1, v2693);
          }
          *(void *)((char *)v2009 + v2011[15]) = *(void *)((char *)v2010 + v2011[15]);
          *(void *)((char *)v2009 + v2011[16]) = *(void *)((char *)v2010 + v2011[16]);
          uint64_t v2028 = v2011[17];
          v2029 = (void *)((char *)v2009 + v2028);
          uint64_t v2030 = (void *)((char *)v2010 + v2028);
          uint64_t v2031 = v2030[1];
          void *v2029 = *v2030;
          v2029[1] = v2031;
          *(void *)((char *)v2009 + v2011[18]) = *(void *)((char *)v2010 + v2011[18]);
          *(void *)((char *)v2009 + v2011[19]) = *(void *)((char *)v2010 + v2011[19]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2009, 0, 1, (uint64_t)v2011);
        }
        uint64_t v24 = v2751;
        uint64_t v2032 = v2710[24];
        v2033 = (void *)((char *)v2751 + v2032);
        uint64_t v2034 = (void *)((char *)v25 + v2032);
        uint64_t v2035 = type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v2034, 1, v2035))
        {
          uint64_t v2036 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v2033, v2034, *(void *)(*(void *)(v2036 - 8) + 64));
        }
        else
        {
          v2037 = (int *)v2035;
          uint64_t v2038 = v2034[1];
          void *v2033 = *v2034;
          v2033[1] = v2038;
          uint64_t v2039 = v2034[3];
          v2033[2] = v2034[2];
          v2033[3] = v2039;
          uint64_t v2040 = v2034[5];
          v2033[4] = v2034[4];
          v2033[5] = v2040;
          uint64_t v2041 = v2034[7];
          v2033[6] = v2034[6];
          v2033[7] = v2041;
          v2647 = v2037;
          uint64_t v2042 = v2037[8];
          uint64_t v2626 = (char *)v2033 + v2042;
          uint64_t v2602 = (char *)v2034 + v2042;
          v2576 = (void *)type metadata accessor for URL();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2602, 1, (uint64_t)v2576))
          {
            uint64_t v2043 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v2626, v2602, *(void *)(*(void *)(v2043 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v2576 - 1) + 16))(v2626, v2602, v2576);
            __swift_storeEnumTagSinglePayload((uint64_t)v2626, 0, 1, (uint64_t)v2576);
          }
          uint64_t v2044 = v2647[9];
          uint64_t v2045 = (void *)((char *)v2033 + v2044);
          v2046 = (void *)((char *)v2034 + v2044);
          uint64_t v2047 = v2046[1];
          *uint64_t v2045 = *v2046;
          v2045[1] = v2047;
          uint64_t v2048 = v2647[10];
          uint64_t v2049 = (void *)((char *)v2033 + v2048);
          v2050 = (void *)((char *)v2034 + v2048);
          uint64_t v2051 = v2050[1];
          *uint64_t v2049 = *v2050;
          v2049[1] = v2051;
          uint64_t v2052 = v2647[11];
          uint64_t v2053 = (void *)((char *)v2033 + v2052);
          v2054 = (void *)((char *)v2034 + v2052);
          uint64_t v2055 = v2054[1];
          *uint64_t v2053 = *v2054;
          v2053[1] = v2055;
          uint64_t v2056 = v2647[12];
          uint64_t v2057 = (char *)v2033 + v2056;
          v2058 = (char *)v2034 + v2056;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__swift_getEnumTagSinglePayload((uint64_t)v2058, 1, v2693))
          {
            uint64_t v2059 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2057, v2058, *(void *)(*(void *)(v2059 - 8) + 64));
          }
          else
          {
            v2678(v2057, v2058, v2693);
            __swift_storeEnumTagSinglePayload((uint64_t)v2057, 0, 1, v2693);
          }
          uint64_t v2060 = v2647[13];
          uint64_t v2061 = (char *)v2033 + v2060;
          v2062 = (char *)v2034 + v2060;
          if (__swift_getEnumTagSinglePayload((uint64_t)v2034 + v2060, 1, v2693))
          {
            uint64_t v2063 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v2061, v2062, *(void *)(*(void *)(v2063 - 8) + 64));
          }
          else
          {
            v2678(v2061, v2062, v2693);
            __swift_storeEnumTagSinglePayload((uint64_t)v2061, 0, 1, v2693);
          }
          uint64_t v2064 = v2647[14];
          uint64_t v2065 = (char *)v2033 + v2064;
          v2066 = (char *)v2034 + v2064;
          *(void *)uint64_t v2065 = *(void *)v2066;
          v2065[8] = v2066[8];
          uint64_t v2067 = v2647[15];
          uint64_t v2068 = (void *)((char *)v2033 + v2067);
          uint64_t v2069 = (void *)((char *)v2034 + v2067);
          uint64_t v2070 = v2069[1];
          *uint64_t v2068 = *v2069;
          v2068[1] = v2070;
          uint64_t v2071 = v2647[16];
          uint64_t v2072 = (void *)((char *)v2033 + v2071);
          v2073 = (void *)((char *)v2034 + v2071);
          uint64_t v2707 = v2073[1];
          *uint64_t v2072 = *v2073;
          v2072[1] = v2707;
          uint64_t v2074 = v2647[17];
          uint64_t v2075 = (void *)((char *)v2033 + v2074);
          uint64_t v2076 = (void *)((char *)v2034 + v2074);
          uint64_t v2077 = v2076[1];
          *uint64_t v2075 = *v2076;
          v2075[1] = v2077;
          uint64_t v2078 = v2647[18];
          uint64_t v2079 = (void *)((char *)v2033 + v2078);
          v2080 = (void *)((char *)v2034 + v2078);
          uint64_t v2081 = v2080[1];
          *uint64_t v2079 = *v2080;
          v2079[1] = v2081;
          uint64_t v2082 = v2647[19];
          uint64_t v2083 = (void *)((char *)v2033 + v2082);
          v2084 = (void *)((char *)v2034 + v2082);
          uint64_t v2085 = v2084[1];
          *uint64_t v2083 = *v2084;
          v2083[1] = v2085;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v2033, 0, 1, (uint64_t)v2647);
          uint64_t v24 = v2751;
        }
        uint64_t v2086 = v2710[25];
LABEL_546:
        uint64_t v2440 = (void *)((char *)v24 + v2086);
        uint64_t v2441 = (void *)((char *)v25 + v2086);
        uint64_t v2442 = *(void *)((char *)v25 + v2086 + 8);
        if (v2442)
        {
          *uint64_t v2440 = *v2441;
          v2440[1] = v2442;
          uint64_t v2443 = v2441[3];
          v2440[2] = v2441[2];
          v2440[3] = v2443;
          uint64_t v2444 = v2441[5];
          v2440[4] = v2441[4];
          v2440[5] = v2444;
          uint64_t v2445 = v2441[7];
          v2440[6] = v2441[6];
          v2440[7] = v2445;
          v2549 = (void *)v2441[9];
          v2440[8] = v2441[8];
          v2440[9] = v2549;
          v2608 = (void *)v2441[11];
          v2440[10] = v2441[10];
          v2440[11] = v2608;
          uint64_t v2657 = v2441[13];
          v2440[12] = v2441[12];
          v2440[13] = v2657;
          uint64_t v2692 = v2441[15];
          v2440[14] = v2441[14];
          v2440[15] = v2692;
          uint64_t v2727 = v2441[17];
          v2440[16] = v2441[16];
          v2440[17] = v2727;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v24 = v2751;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          memcpy(v2440, v2441, 0x90uLL);
        }
        uint64_t v11 = v2736;
        uint64_t v3 = v2750;
LABEL_550:
        uint64_t v26 = v2749;
        goto LABEL_551;
    }
  }
  uint64_t v2453 = v3[12];
  *(void *)((char *)a1 + v3[11]) = *(void *)((char *)v4 + v3[11]);
  v2454 = (char *)a1 + v2453;
  v2455 = (char *)v4 + v2453;
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v2455, 1, v11))
  {
    uint64_t v2456 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    memcpy(v2454, v2455, *(void *)(*(void *)(v2456 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v2454, v2455, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v2454, 0, 1, v11);
  }
  return a1;
}

#error "258336E40: too big function (funcsize=0)"

_OWORD *initializeWithTake for SearchSpotlightEntity.Builder(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for IntentFile();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  uint64_t v13 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  uint64_t v14 = (_OWORD *)((char *)a1 + v13);
  uint64_t v15 = (_OWORD *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for SearchResult(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = type metadata accessor for SearchResultItem(0);
    uint64_t v1243 = v16;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v1239 = v10;
        long long v19 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v19;
        long long v20 = v15[3];
        v14[2] = v15[2];
        v14[3] = v20;
        long long v21 = v15[5];
        v14[4] = v15[4];
        v14[5] = v21;
        uint64_t v22 = (int *)type metadata accessor for EmailDocument(0);
        uint64_t v23 = v22[12];
        uint64_t v24 = (char *)v14 + v23;
        uint64_t v25 = (char *)v15 + v23;
        uint64_t v1236 = type metadata accessor for Date();
        __dst = *(void (**)(char *, char *))(*(void *)(v1236 - 8) + 32);
        __dst(v24, v25);
        *(void *)((char *)v14 + v22[13]) = *(void *)((char *)v15 + v22[13]);
        *(void *)((char *)v14 + v22[14]) = *(void *)((char *)v15 + v22[14]);
        *(void *)((char *)v14 + v22[15]) = *(void *)((char *)v15 + v22[15]);
        *((unsigned char *)v14 + v22[16]) = *((unsigned char *)v15 + v22[16]);
        *((unsigned char *)v14 + v22[17]) = *((unsigned char *)v15 + v22[17]);
        *(_OWORD *)((char *)v14 + v22[18]) = *(_OWORD *)((char *)v15 + v22[18]);
        uint64_t v26 = v22[19];
        id v27 = (char *)v14 + v26;
        uint64_t v28 = (char *)v15 + v26;
        long long v29 = *((_OWORD *)v28 + 1);
        *(_OWORD *)id v27 = *(_OWORD *)v28;
        *((_OWORD *)v27 + 1) = v29;
        *((void *)v27 + 4) = *((void *)v28 + 4);
        *(_OWORD *)((char *)v14 + v22[20]) = *(_OWORD *)((char *)v15 + v22[20]);
        uint64_t v1233 = v22;
        uint64_t v30 = v22[21];
        uint64_t v31 = (_OWORD *)((char *)v14 + v30);
        uint64_t v32 = (_OWORD *)((char *)v15 + v30);
        uint64_t v33 = type metadata accessor for PartialExtractedAttributes(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v32, 1, v33))
        {
          uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
          uint64_t v10 = v1239;
        }
        else
        {
          *uint64_t v31 = *v32;
          uint64_t v234 = *(int *)(v33 + 20);
          uint64_t v235 = (char *)v32;
          uint64_t v236 = (_OWORD *)((char *)v31 + v234);
          uint64_t v1199 = v235;
          uint64_t v1206 = (int *)v33;
          uint64_t v237 = &v235[v234];
          uint64_t v238 = type metadata accessor for RentalCarReservation(0);
          uint64_t v1158 = v31;
          if (__swift_getEnumTagSinglePayload((uint64_t)v237, 1, v238))
          {
            uint64_t v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v236, v237, *(void *)(*(void *)(v239 - 8) + 64));
            uint64_t v10 = v1239;
          }
          else
          {
            long long v358 = *((_OWORD *)v237 + 1);
            _OWORD *v236 = *(_OWORD *)v237;
            v236[1] = v358;
            long long v359 = *((_OWORD *)v237 + 3);
            v236[2] = *((_OWORD *)v237 + 2);
            v236[3] = v359;
            long long v360 = *((_OWORD *)v237 + 5);
            v236[4] = *((_OWORD *)v237 + 4);
            v236[5] = v360;
            long long v361 = *((_OWORD *)v237 + 7);
            v236[6] = *((_OWORD *)v237 + 6);
            v236[7] = v361;
            *((unsigned char *)v236 + 128) = v237[128];
            *(_WORD *)((char *)v236 + 129) = *(_WORD *)(v237 + 129);
            *((void *)v236 + 17) = *((void *)v237 + 17);
            long long v362 = *((_OWORD *)v237 + 10);
            v236[9] = *((_OWORD *)v237 + 9);
            v236[10] = v362;
            long long v363 = *((_OWORD *)v237 + 12);
            v236[11] = *((_OWORD *)v237 + 11);
            v236[12] = v363;
            long long v364 = *((_OWORD *)v237 + 14);
            v236[13] = *((_OWORD *)v237 + 13);
            v236[14] = v364;
            v236[15] = *((_OWORD *)v237 + 15);
            *((void *)v236 + 32) = *((void *)v237 + 32);
            *(_OWORD *)((char *)v236 + 264) = *(_OWORD *)(v237 + 264);
            *(_OWORD *)((char *)v236 + 280) = *(_OWORD *)(v237 + 280);
            *(_OWORD *)((char *)v236 + 296) = *(_OWORD *)(v237 + 296);
            *(_OWORD *)((char *)v236 + 312) = *(_OWORD *)(v237 + 312);
            *(_OWORD *)((char *)v236 + 328) = *(_OWORD *)(v237 + 328);
            *(_OWORD *)((char *)v236 + 344) = *(_OWORD *)(v237 + 344);
            *(_OWORD *)((char *)v236 + 360) = *(_OWORD *)(v237 + 360);
            *((unsigned char *)v236 + 384) = v237[384];
            *((void *)v236 + 47) = *((void *)v237 + 47);
            *(_OWORD *)((char *)v236 + 392) = *(_OWORD *)(v237 + 392);
            *(_OWORD *)((char *)v236 + 408) = *(_OWORD *)(v237 + 408);
            uint64_t v365 = *(int *)(v238 + 140);
            uint64_t v1113 = (char *)v236 + v365;
            __src = (int *)v238;
            long long v366 = &v237[v365];
            uint64_t v10 = v1239;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v237[v365], 1, v1236))
            {
              uint64_t v367 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1113, v366, *(void *)(*(void *)(v367 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v1113, v366, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v1113, 0, 1, v1236);
            }
            uint64_t v388 = __src[36];
            uint64_t v1114 = (char *)v236 + v388;
            long long v389 = &v237[v388];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v237[v388], 1, v1236))
            {
              uint64_t v390 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1114, v389, *(void *)(*(void *)(v390 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v1114, v389, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v1114, 0, 1, v1236);
            }
            __swift_storeEnumTagSinglePayload((uint64_t)v236, 0, 1, (uint64_t)__src);
          }
          uint64_t v399 = v1206;
          uint64_t v400 = v1206[6];
          v401 = (_OWORD *)((char *)v31 + v400);
          uint64_t v402 = &v1199[v400];
          __srcb = (int *)type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v402, 1, (uint64_t)__srcb))
          {
            uint64_t v403 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v401, v402, *(void *)(*(void *)(v403 - 8) + 64));
          }
          else
          {
            long long v404 = *((_OWORD *)v402 + 1);
            _OWORD *v401 = *(_OWORD *)v402;
            v401[1] = v404;
            long long v405 = *((_OWORD *)v402 + 3);
            v401[2] = *((_OWORD *)v402 + 2);
            v401[3] = v405;
            long long v406 = *((_OWORD *)v402 + 5);
            v401[4] = *((_OWORD *)v402 + 4);
            v401[5] = v406;
            long long v407 = *((_OWORD *)v402 + 7);
            v401[6] = *((_OWORD *)v402 + 6);
            v401[7] = v407;
            *((unsigned char *)v401 + 128) = v402[128];
            *(_WORD *)((char *)v401 + 129) = *(_WORD *)(v402 + 129);
            *((void *)v401 + 17) = *((void *)v402 + 17);
            long long v408 = *((_OWORD *)v402 + 10);
            v401[9] = *((_OWORD *)v402 + 9);
            v401[10] = v408;
            long long v409 = *((_OWORD *)v402 + 12);
            v401[11] = *((_OWORD *)v402 + 11);
            v401[12] = v409;
            *((void *)v401 + 26) = *((void *)v402 + 26);
            *(_OWORD *)((char *)v401 + 216) = *(_OWORD *)(v402 + 216);
            *(_OWORD *)((char *)v401 + 232) = *(_OWORD *)(v402 + 232);
            *(_OWORD *)((char *)v401 + 248) = *(_OWORD *)(v402 + 248);
            *(_OWORD *)((char *)v401 + 264) = *(_OWORD *)(v402 + 264);
            *((unsigned char *)v401 + 296) = v402[296];
            uint64_t v410 = *((void *)v402 + 36);
            *((void *)v401 + 35) = *((void *)v402 + 35);
            *((void *)v401 + 36) = v410;
            uint64_t v411 = __srcb[28];
            uint64_t v1115 = (char *)v401 + v411;
            uint64_t v412 = &v402[v411];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v402[v411], 1, v1236))
            {
              uint64_t v413 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1115, v412, *(void *)(*(void *)(v413 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v1115, v412, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v1115, 0, 1, v1236);
            }
            uint64_t v449 = __srcb[29];
            uint64_t v450 = (char *)v401 + v449;
            long long v451 = &v402[v449];
            if (__swift_getEnumTagSinglePayload((uint64_t)v451, 1, v1236))
            {
              uint64_t v452 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v450, v451, *(void *)(*(void *)(v452 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v450, v451, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v450, 0, 1, v1236);
            }
            uint64_t v399 = v1206;
            __swift_storeEnumTagSinglePayload((uint64_t)v401, 0, 1, (uint64_t)__srcb);
            uint64_t v31 = v1158;
          }
          uint64_t v460 = v399[7];
          uint64_t v461 = (_OWORD *)((char *)v31 + v460);
          uint64_t v462 = &v1199[v460];
          uint64_t v463 = type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v462, 1, v463))
          {
            uint64_t v464 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v461, v462, *(void *)(*(void *)(v464 - 8) + 64));
          }
          else
          {
            long long v465 = *((_OWORD *)v462 + 1);
            *uint64_t v461 = *(_OWORD *)v462;
            v461[1] = v465;
            long long v466 = *((_OWORD *)v462 + 3);
            v461[2] = *((_OWORD *)v462 + 2);
            v461[3] = v466;
            long long v467 = *((_OWORD *)v462 + 5);
            v461[4] = *((_OWORD *)v462 + 4);
            v461[5] = v467;
            long long v468 = *((_OWORD *)v462 + 7);
            v461[6] = *((_OWORD *)v462 + 6);
            v461[7] = v468;
            *((unsigned char *)v461 + 128) = v462[128];
            *(_WORD *)((char *)v461 + 129) = *(_WORD *)(v462 + 129);
            *((void *)v461 + 17) = *((void *)v462 + 17);
            long long v469 = *((_OWORD *)v462 + 10);
            v461[9] = *((_OWORD *)v462 + 9);
            v461[10] = v469;
            long long v470 = *((_OWORD *)v462 + 12);
            v461[11] = *((_OWORD *)v462 + 11);
            v461[12] = v470;
            long long v471 = *((_OWORD *)v462 + 14);
            v461[13] = *((_OWORD *)v462 + 13);
            v461[14] = v471;
            *((void *)v461 + 30) = *((void *)v462 + 30);
            *(_OWORD *)((char *)v461 + 248) = *(_OWORD *)(v462 + 248);
            *(_OWORD *)((char *)v461 + 264) = *(_OWORD *)(v462 + 264);
            *((unsigned char *)v461 + 296) = v462[296];
            uint64_t v472 = *((void *)v462 + 36);
            *((void *)v461 + 35) = *((void *)v462 + 35);
            *((void *)v461 + 36) = v472;
            v461[19] = *((_OWORD *)v462 + 19);
            uint64_t v473 = *(int *)(v463 + 116);
            uint64_t v1116 = (char *)v461 + v473;
            __srce = (int *)v463;
            uint64_t v474 = &v462[v473];
            uint64_t v475 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v474, 1, v475))
            {
              uint64_t v476 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1116, v474, *(void *)(*(void *)(v476 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v475 - 8) + 32))(v1116, v474, v475);
              __swift_storeEnumTagSinglePayload((uint64_t)v1116, 0, 1, v475);
            }
            *(_OWORD *)((char *)v461 + __srce[30]) = *(_OWORD *)&v462[__srce[30]];
            uint64_t v517 = __srce[31];
            uint64_t v1117 = (char *)v461 + v517;
            uint64_t v518 = &v462[v517];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v462[v517], 1, v1236))
            {
              uint64_t v519 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1117, v518, *(void *)(*(void *)(v519 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v1117, v518, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v1117, 0, 1, v1236);
            }
            uint64_t v527 = __srce[32];
            uint64_t v1118 = (char *)v461 + v527;
            uint64_t v528 = &v462[v527];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v462[v527], 1, v1236))
            {
              uint64_t v529 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1118, v528, *(void *)(*(void *)(v529 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v1118, v528, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v1118, 0, 1, v1236);
            }
            uint64_t v31 = v1158;
            __swift_storeEnumTagSinglePayload((uint64_t)v461, 0, 1, (uint64_t)__srce);
          }
          uint64_t v537 = v1206[8];
          uint64_t v538 = (_OWORD *)((char *)v31 + v537);
          uint64_t v539 = &v1199[v537];
          uint64_t v540 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v539, 1, v540))
          {
            uint64_t v541 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v538, v539, *(void *)(*(void *)(v541 - 8) + 64));
            uint64_t v542 = v1206;
          }
          else
          {
            long long v543 = *((_OWORD *)v539 + 1);
            _OWORD *v538 = *(_OWORD *)v539;
            v538[1] = v543;
            long long v544 = *((_OWORD *)v539 + 3);
            v538[2] = *((_OWORD *)v539 + 2);
            v538[3] = v544;
            long long v545 = *((_OWORD *)v539 + 5);
            v538[4] = *((_OWORD *)v539 + 4);
            v538[5] = v545;
            long long v546 = *((_OWORD *)v539 + 7);
            v538[6] = *((_OWORD *)v539 + 6);
            v538[7] = v546;
            *((unsigned char *)v538 + 128) = v539[128];
            *(_WORD *)((char *)v538 + 129) = *(_WORD *)(v539 + 129);
            *((void *)v538 + 17) = *((void *)v539 + 17);
            long long v547 = *((_OWORD *)v539 + 10);
            v538[9] = *((_OWORD *)v539 + 9);
            v538[10] = v547;
            long long v548 = *((_OWORD *)v539 + 12);
            v538[11] = *((_OWORD *)v539 + 11);
            v538[12] = v548;
            long long v549 = *((_OWORD *)v539 + 14);
            v538[13] = *((_OWORD *)v539 + 13);
            v538[14] = v549;
            long long v550 = *((_OWORD *)v539 + 16);
            v538[15] = *((_OWORD *)v539 + 15);
            v538[16] = v550;
            *((unsigned char *)v538 + 280) = v539[280];
            *((void *)v538 + 34) = *((void *)v539 + 34);
            v538[18] = *((_OWORD *)v539 + 18);
            uint64_t v551 = *(int *)(v540 + 108);
            uint64_t v1119 = (char *)v538 + v551;
            __srch = (void *)v540;
            long long v552 = &v539[v551];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v539[v551], 1, v1236))
            {
              uint64_t v553 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1119, v552, *(void *)(*(void *)(v553 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v1119, v552, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v1119, 0, 1, v1236);
            }
            uint64_t v591 = *(int *)(v540 + 112);
            uint64_t v592 = (char *)v538 + v591;
            uint64_t v593 = &v539[v591];
            if (__swift_getEnumTagSinglePayload((uint64_t)v593, 1, v1236))
            {
              uint64_t v594 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v592, v593, *(void *)(*(void *)(v594 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v592, v593, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v592, 0, 1, v1236);
            }
            uint64_t v542 = v1206;
            __swift_storeEnumTagSinglePayload((uint64_t)v538, 0, 1, (uint64_t)__srch);
            uint64_t v31 = v1158;
          }
          uint64_t v602 = v542[9];
          uint64_t v603 = (_OWORD *)((char *)v31 + v602);
          uint64_t v604 = &v1199[v602];
          uint64_t v605 = type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v604, 1, v605))
          {
            uint64_t v606 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v603, v604, *(void *)(*(void *)(v606 - 8) + 64));
            v607 = v1206;
          }
          else
          {
            long long v608 = *((_OWORD *)v604 + 1);
            *uint64_t v603 = *(_OWORD *)v604;
            v603[1] = v608;
            long long v609 = *((_OWORD *)v604 + 3);
            v603[2] = *((_OWORD *)v604 + 2);
            v603[3] = v609;
            long long v610 = *((_OWORD *)v604 + 5);
            v603[4] = *((_OWORD *)v604 + 4);
            v603[5] = v610;
            long long v611 = *((_OWORD *)v604 + 7);
            v603[6] = *((_OWORD *)v604 + 6);
            v603[7] = v611;
            *((unsigned char *)v603 + 128) = v604[128];
            *(_WORD *)((char *)v603 + 129) = *(_WORD *)(v604 + 129);
            *((void *)v603 + 17) = *((void *)v604 + 17);
            long long v612 = *((_OWORD *)v604 + 10);
            v603[9] = *((_OWORD *)v604 + 9);
            v603[10] = v612;
            long long v613 = *((_OWORD *)v604 + 12);
            v603[11] = *((_OWORD *)v604 + 11);
            v603[12] = v613;
            long long v614 = *((_OWORD *)v604 + 14);
            v603[13] = *((_OWORD *)v604 + 13);
            v603[14] = v614;
            v603[15] = *((_OWORD *)v604 + 15);
            uint64_t v615 = *(int *)(v605 + 96);
            uint64_t v1120 = (char *)v603 + v615;
            __srck = (int *)v605;
            uint64_t v616 = &v604[v615];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v604[v615], 1, v1236))
            {
              uint64_t v617 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1120, v616, *(void *)(*(void *)(v617 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v1120, v616, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v1120, 0, 1, v1236);
            }
            uint64_t v653 = __srck[25];
            uint64_t v1121 = (char *)v603 + v653;
            uint64_t v654 = &v604[v653];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v604[v653], 1, v1236))
            {
              uint64_t v655 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1121, v654, *(void *)(*(void *)(v655 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v1121, v654, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v1121, 0, 1, v1236);
            }
            uint64_t v663 = __srck[26];
            uint64_t v1122 = (char *)v603 + v663;
            uint64_t v664 = &v604[v663];
            uint64_t v665 = type metadata accessor for URL();
            v607 = v1206;
            if (__swift_getEnumTagSinglePayload((uint64_t)v664, 1, v665))
            {
              uint64_t v666 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1122, v664, *(void *)(*(void *)(v666 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v665 - 8) + 32))(v1122, v664, v665);
              __swift_storeEnumTagSinglePayload((uint64_t)v1122, 0, 1, v665);
            }
            uint64_t v31 = v1158;
            __swift_storeEnumTagSinglePayload((uint64_t)v603, 0, 1, (uint64_t)__srck);
          }
          uint64_t v675 = v607[10];
          uint64_t v676 = (_OWORD *)((char *)v31 + v675);
          uint64_t v677 = &v1199[v675];
          uint64_t v678 = type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v677, 1, v678))
          {
            uint64_t v679 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v676, v677, *(void *)(*(void *)(v679 - 8) + 64));
            long long v680 = v1206;
          }
          else
          {
            long long v681 = *((_OWORD *)v677 + 1);
            _OWORD *v676 = *(_OWORD *)v677;
            v676[1] = v681;
            long long v682 = *((_OWORD *)v677 + 3);
            v676[2] = *((_OWORD *)v677 + 2);
            v676[3] = v682;
            long long v683 = *((_OWORD *)v677 + 5);
            v676[4] = *((_OWORD *)v677 + 4);
            v676[5] = v683;
            long long v684 = *((_OWORD *)v677 + 7);
            v676[6] = *((_OWORD *)v677 + 6);
            v676[7] = v684;
            *((unsigned char *)v676 + 128) = v677[128];
            *(_WORD *)((char *)v676 + 129) = *(_WORD *)(v677 + 129);
            *((void *)v676 + 17) = *((void *)v677 + 17);
            long long v685 = *((_OWORD *)v677 + 10);
            v676[9] = *((_OWORD *)v677 + 9);
            v676[10] = v685;
            long long v686 = *((_OWORD *)v677 + 12);
            v676[11] = *((_OWORD *)v677 + 11);
            v676[12] = v686;
            v676[13] = *((_OWORD *)v677 + 13);
            uint64_t v687 = *(int *)(v678 + 88);
            uint64_t v1123 = (char *)v676 + v687;
            __srcm = (int *)v678;
            uint64_t v688 = &v677[v687];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v677[v687], 1, v1236))
            {
              uint64_t v689 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1123, v688, *(void *)(*(void *)(v689 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v1123, v688, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v1123, 0, 1, v1236);
            }
            uint64_t v724 = *(int *)(v678 + 92);
            uint64_t v1124 = (char *)v676 + v724;
            uint64_t v725 = &v677[v724];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v677[v724], 1, v1236))
            {
              uint64_t v726 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1124, v725, *(void *)(*(void *)(v726 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(v1124, v725, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)v1124, 0, 1, v1236);
            }
            long long v680 = v1206;
            uint64_t v734 = __srcm[24];
            uint64_t v735 = (char *)v676 + v734;
            uint64_t v736 = &v677[v734];
            *(void *)uint64_t v735 = *(void *)v736;
            v735[8] = v736[8];
            uint64_t v737 = __srcm[25];
            uint64_t v1125 = (char *)v676 + v737;
            uint64_t v738 = &v677[v737];
            uint64_t v739 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v738, 1, v739))
            {
              uint64_t v740 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1125, v738, *(void *)(*(void *)(v740 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v739 - 8) + 32))(v1125, v738, v739);
              __swift_storeEnumTagSinglePayload((uint64_t)v1125, 0, 1, v739);
            }
            uint64_t v31 = v1158;
            __swift_storeEnumTagSinglePayload((uint64_t)v676, 0, 1, (uint64_t)__srcm);
          }
          uint64_t v755 = v680[11];
          uint64_t v756 = (_OWORD *)((char *)v31 + v755);
          uint64_t v757 = &v1199[v755];
          uint64_t v758 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v757, 1, (uint64_t)v758))
          {
            uint64_t v759 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v756, v757, *(void *)(*(void *)(v759 - 8) + 64));
          }
          else
          {
            long long v760 = *((_OWORD *)v757 + 1);
            *uint64_t v756 = *(_OWORD *)v757;
            v756[1] = v760;
            long long v761 = *((_OWORD *)v757 + 3);
            v756[2] = *((_OWORD *)v757 + 2);
            v756[3] = v761;
            long long v762 = *((_OWORD *)v757 + 5);
            v756[4] = *((_OWORD *)v757 + 4);
            v756[5] = v762;
            *((unsigned char *)v756 + 96) = v757[96];
            *(_OWORD *)((char *)v756 + 104) = *(_OWORD *)(v757 + 104);
            uint64_t v763 = v758[13];
            __srco = (char *)v756 + v763;
            uint64_t v764 = &v757[v763];
            uint64_t v765 = type metadata accessor for URL();
            uint64_t v1126 = v764;
            uint64_t v766 = (uint64_t)v764;
            uint64_t v767 = v765;
            if (__swift_getEnumTagSinglePayload(v766, 1, v765))
            {
              uint64_t v768 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__srco, v1126, *(void *)(*(void *)(v768 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(*(void *)(v767 - 8) + 32))(__srco, v1126, v767);
              __swift_storeEnumTagSinglePayload((uint64_t)__srco, 0, 1, v767);
            }
            uint64_t v794 = v758[14];
            uint64_t v1127 = &v757[v794];
            __srcp = (char *)v756 + v794;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v757[v794], 1, v767))
            {
              uint64_t v795 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__srcp, v1127, *(void *)(*(void *)(v795 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v767 - 8) + 32))(__srcp, v1127, v767);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcp, 0, 1, v767);
            }
            *(_OWORD *)((char *)v756 + v758[15]) = *(_OWORD *)&v757[v758[15]];
            *(_OWORD *)((char *)v756 + v758[16]) = *(_OWORD *)&v757[v758[16]];
            *(_OWORD *)((char *)v756 + v758[17]) = *(_OWORD *)&v757[v758[17]];
            uint64_t v802 = v758[18];
            uint64_t v1111 = &v757[v802];
            uint64_t v1112 = (char *)v756 + v802;
            uint64_t v803 = type metadata accessor for DateComponents();
            __srcw = *(void (**)(char *, char *, uint64_t))(*(void *)(v803 - 8) + 32);
            __srcw(v1112, v1111, v803);
            __srcw((char *)v756 + v758[19], &v757[v758[19]], v803);
            *(_OWORD *)((char *)v756 + v758[20]) = *(_OWORD *)&v757[v758[20]];
            *(_OWORD *)((char *)v756 + v758[21]) = *(_OWORD *)&v757[v758[21]];
            *(_OWORD *)((char *)v756 + v758[22]) = *(_OWORD *)&v757[v758[22]];
            *(_OWORD *)((char *)v756 + v758[23]) = *(_OWORD *)&v757[v758[23]];
            *(_OWORD *)((char *)v756 + v758[24]) = *(_OWORD *)&v757[v758[24]];
            *(_OWORD *)((char *)v756 + v758[25]) = *(_OWORD *)&v757[v758[25]];
            *(_OWORD *)((char *)v756 + v758[26]) = *(_OWORD *)&v757[v758[26]];
            *(_OWORD *)((char *)v756 + v758[27]) = *(_OWORD *)&v757[v758[27]];
            *(_OWORD *)((char *)v756 + v758[28]) = *(_OWORD *)&v757[v758[28]];
            *(_OWORD *)((char *)v756 + v758[29]) = *(_OWORD *)&v757[v758[29]];
            *(_OWORD *)((char *)v756 + v758[30]) = *(_OWORD *)&v757[v758[30]];
            *(_OWORD *)((char *)v756 + v758[31]) = *(_OWORD *)&v757[v758[31]];
            *(_OWORD *)((char *)v756 + v758[32]) = *(_OWORD *)&v757[v758[32]];
            *(void *)((char *)v756 + v758[33]) = *(void *)&v757[v758[33]];
            *(void *)((char *)v756 + v758[34]) = *(void *)&v757[v758[34]];
            *(_OWORD *)((char *)v756 + v758[35]) = *(_OWORD *)&v757[v758[35]];
            *(_OWORD *)((char *)v756 + v758[36]) = *(_OWORD *)&v757[v758[36]];
            *(_OWORD *)((char *)v756 + v758[37]) = *(_OWORD *)&v757[v758[37]];
            uint64_t v804 = v758[38];
            uint64_t v1128 = &v757[v804];
            __srcq = (char *)v756 + v804;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v757[v804], 1, v1236))
            {
              uint64_t v805 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcq, v1128, *(void *)(*(void *)(v805 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))__dst)(__srcq, v1128, v1236);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcq, 0, 1, v1236);
            }
            uint64_t v31 = v1158;
            *(_OWORD *)((char *)v756 + v758[39]) = *(_OWORD *)&v757[v758[39]];
            *(_OWORD *)((char *)v756 + v758[40]) = *(_OWORD *)&v757[v758[40]];
            uint64_t v816 = v758[41];
            uint64_t v817 = (char *)v756 + v816;
            uint64_t v818 = &v757[v816];
            *(void *)uint64_t v817 = *(void *)v818;
            v817[8] = v818[8];
            *(_OWORD *)((char *)v756 + v758[42]) = *(_OWORD *)&v757[v758[42]];
            uint64_t v819 = v758[43];
            uint64_t v820 = (char *)v756 + v819;
            uint64_t v821 = &v757[v819];
            *(_OWORD *)uint64_t v820 = *(_OWORD *)v821;
            *(void *)(v820 + 13) = *(void *)(v821 + 13);
            *(_OWORD *)((char *)v756 + v758[44]) = *(_OWORD *)&v757[v758[44]];
            *(_OWORD *)((char *)v756 + v758[45]) = *(_OWORD *)&v757[v758[45]];
            *(_OWORD *)((char *)v756 + v758[46]) = *(_OWORD *)&v757[v758[46]];
            *(_OWORD *)((char *)v756 + v758[47]) = *(_OWORD *)&v757[v758[47]];
            __swift_storeEnumTagSinglePayload((uint64_t)v756, 0, 1, (uint64_t)v758);
          }
          uint64_t v822 = v1206[12];
          v823 = (_OWORD *)((char *)v31 + v822);
          uint64_t v824 = &v1199[v822];
          uint64_t v825 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v824, 1, (uint64_t)v825))
          {
            uint64_t v826 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v823, v824, *(void *)(*(void *)(v826 - 8) + 64));
          }
          else
          {
            long long v827 = *((_OWORD *)v824 + 1);
            _OWORD *v823 = *(_OWORD *)v824;
            v823[1] = v827;
            long long v828 = *((_OWORD *)v824 + 3);
            v823[2] = *((_OWORD *)v824 + 2);
            v823[3] = v828;
            long long v829 = *((_OWORD *)v824 + 5);
            v823[4] = *((_OWORD *)v824 + 4);
            v823[5] = v829;
            *((unsigned char *)v823 + 96) = v824[96];
            *(_OWORD *)((char *)v823 + 104) = *(_OWORD *)(v824 + 104);
            *(_OWORD *)((char *)v823 + 120) = *(_OWORD *)(v824 + 120);
            uint64_t v830 = v825[14];
            __srcr = (char *)v823 + v830;
            uint64_t v831 = &v824[v830];
            uint64_t v832 = type metadata accessor for DateComponents();
            uint64_t v1130 = v831;
            uint64_t v833 = (uint64_t)v831;
            uint64_t v834 = v832;
            if (__swift_getEnumTagSinglePayload(v833, 1, v832))
            {
              uint64_t v835 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__srcr, v1130, *(void *)(*(void *)(v835 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(*(void *)(v834 - 8) + 32))(__srcr, v1130, v834);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcr, 0, 1, v834);
            }
            uint64_t v873 = v825[15];
            uint64_t v1131 = &v824[v873];
            __srct = (char *)v823 + v873;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v824[v873], 1, v834))
            {
              uint64_t v874 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__srct, v1131, *(void *)(*(void *)(v874 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v834 - 8) + 32))(__srct, v1131, v834);
              __swift_storeEnumTagSinglePayload((uint64_t)__srct, 0, 1, v834);
            }
            *(_OWORD *)((char *)v823 + v825[16]) = *(_OWORD *)&v824[v825[16]];
            *(_OWORD *)((char *)v823 + v825[17]) = *(_OWORD *)&v824[v825[17]];
            *(_OWORD *)((char *)v823 + v825[18]) = *(_OWORD *)&v824[v825[18]];
            *(_OWORD *)((char *)v823 + v825[19]) = *(_OWORD *)&v824[v825[19]];
            *(_OWORD *)((char *)v823 + v825[20]) = *(_OWORD *)&v824[v825[20]];
            *(void *)((char *)v823 + v825[21]) = *(void *)&v824[v825[21]];
            *(void *)((char *)v823 + v825[22]) = *(void *)&v824[v825[22]];
            uint64_t v881 = v825[23];
            uint64_t v882 = (char *)v823 + v881;
            uint64_t v883 = &v824[v881];
            v882[8] = v883[8];
            *(void *)uint64_t v882 = *(void *)v883;
            uint64_t v884 = v825[24];
            uint64_t v885 = (char *)v823 + v884;
            uint64_t v886 = &v824[v884];
            v885[8] = v886[8];
            *(void *)uint64_t v885 = *(void *)v886;
            *(_OWORD *)((char *)v823 + v825[25]) = *(_OWORD *)&v824[v825[25]];
            *(_OWORD *)((char *)v823 + v825[26]) = *(_OWORD *)&v824[v825[26]];
            *(_OWORD *)((char *)v823 + v825[27]) = *(_OWORD *)&v824[v825[27]];
            *(_OWORD *)((char *)v823 + v825[28]) = *(_OWORD *)&v824[v825[28]];
            uint64_t v887 = v825[29];
            uint64_t v888 = (char *)v823 + v887;
            uint64_t v889 = &v824[v887];
            *(void *)uint64_t v888 = *(void *)v889;
            v888[8] = v889[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v823, 0, 1, (uint64_t)v825);
            uint64_t v31 = v1158;
          }
          uint64_t v890 = v1206[13];
          uint64_t v891 = (_OWORD *)((char *)v31 + v890);
          uint64_t v892 = &v1199[v890];
          uint64_t v893 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v892, 1, (uint64_t)v893))
          {
            uint64_t v894 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v891, v892, *(void *)(*(void *)(v894 - 8) + 64));
          }
          else
          {
            long long v895 = *((_OWORD *)v892 + 1);
            *uint64_t v891 = *(_OWORD *)v892;
            v891[1] = v895;
            long long v896 = *((_OWORD *)v892 + 3);
            v891[2] = *((_OWORD *)v892 + 2);
            v891[3] = v896;
            long long v897 = *((_OWORD *)v892 + 5);
            v891[4] = *((_OWORD *)v892 + 4);
            v891[5] = v897;
            *((unsigned char *)v891 + 96) = v892[96];
            *(_OWORD *)((char *)v891 + 104) = *(_OWORD *)(v892 + 104);
            *(_OWORD *)((char *)v891 + 120) = *(_OWORD *)(v892 + 120);
            uint64_t v898 = v893[14];
            uint64_t v1202 = (char *)v891 + v898;
            uint64_t v899 = &v892[v898];
            uint64_t v900 = type metadata accessor for DateComponents();
            __srcv = v899;
            uint64_t v901 = (uint64_t)v899;
            uint64_t v902 = v900;
            if (__swift_getEnumTagSinglePayload(v901, 1, v900))
            {
              uint64_t v903 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1202, __srcv, *(void *)(*(void *)(v903 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(*(void *)(v902 - 8) + 32))(v1202, __srcv, v902);
              __swift_storeEnumTagSinglePayload((uint64_t)v1202, 0, 1, v902);
            }
            *(_OWORD *)((char *)v891 + v893[15]) = *(_OWORD *)&v892[v893[15]];
            *(_OWORD *)((char *)v891 + v893[16]) = *(_OWORD *)&v892[v893[16]];
            *(_OWORD *)((char *)v891 + v893[17]) = *(_OWORD *)&v892[v893[17]];
            *(_OWORD *)((char *)v891 + v893[18]) = *(_OWORD *)&v892[v893[18]];
            *(_OWORD *)((char *)v891 + v893[19]) = *(_OWORD *)&v892[v893[19]];
            *(void *)((char *)v891 + v893[20]) = *(void *)&v892[v893[20]];
            *(_OWORD *)((char *)v891 + v893[21]) = *(_OWORD *)&v892[v893[21]];
            *(_OWORD *)((char *)v891 + v893[22]) = *(_OWORD *)&v892[v893[22]];
            *(_OWORD *)((char *)v891 + v893[23]) = *(_OWORD *)&v892[v893[23]];
            __swift_storeEnumTagSinglePayload((uint64_t)v891, 0, 1, (uint64_t)v893);
            uint64_t v31 = v1158;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, (uint64_t)v1206);
        }
        uint64_t v950 = v1233[22];
        uint64_t v951 = (_OWORD *)((char *)v14 + v950);
        uint64_t v952 = (_OWORD *)((char *)v15 + v950);
        uint64_t v953 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v952, 1, (uint64_t)v953))
        {
          uint64_t v954 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v951, v952, *(void *)(*(void *)(v954 - 8) + 64));
        }
        else
        {
          long long v955 = v952[1];
          *uint64_t v951 = *v952;
          v951[1] = v955;
          long long v956 = v952[3];
          v951[2] = v952[2];
          v951[3] = v956;
          long long v957 = v952[5];
          v951[4] = v952[4];
          v951[5] = v957;
          uint64_t v958 = v953[10];
          uint64_t v1209 = (char *)v951 + v958;
          uint64_t v959 = (char *)v952 + v958;
          if (__swift_getEnumTagSinglePayload((uint64_t)v952 + v958, 1, v1236))
          {
            uint64_t v960 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1209, v959, *(void *)(*(void *)(v960 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))__dst)(v1209, v959, v1236);
            __swift_storeEnumTagSinglePayload((uint64_t)v1209, 0, 1, v1236);
          }
          uint64_t v961 = v953[11];
          uint64_t v1210 = (char *)v951 + v961;
          uint64_t v962 = (char *)v952 + v961;
          if (__swift_getEnumTagSinglePayload((uint64_t)v952 + v961, 1, v1236))
          {
            uint64_t v963 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1210, v962, *(void *)(*(void *)(v963 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))__dst)(v1210, v962, v1236);
            __swift_storeEnumTagSinglePayload((uint64_t)v1210, 0, 1, v1236);
          }
          *(_OWORD *)((char *)v951 + v953[12]) = *(_OWORD *)((char *)v952 + v953[12]);
          *(_OWORD *)((char *)v951 + v953[13]) = *(_OWORD *)((char *)v952 + v953[13]);
          *(_OWORD *)((char *)v951 + v953[14]) = *(_OWORD *)((char *)v952 + v953[14]);
          uint64_t v964 = v953[15];
          v1211 = (char *)v951 + v964;
          uint64_t v965 = (char *)v952 + v964;
          if (__swift_getEnumTagSinglePayload((uint64_t)v952 + v964, 1, v1236))
          {
            uint64_t v966 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1211, v965, *(void *)(*(void *)(v966 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))__dst)(v1211, v965, v1236);
            __swift_storeEnumTagSinglePayload((uint64_t)v1211, 0, 1, v1236);
          }
          *(_OWORD *)((char *)v951 + v953[16]) = *(_OWORD *)((char *)v952 + v953[16]);
          *(_OWORD *)((char *)v951 + v953[17]) = *(_OWORD *)((char *)v952 + v953[17]);
          *(_OWORD *)((char *)v951 + v953[18]) = *(_OWORD *)((char *)v952 + v953[18]);
          *(_OWORD *)((char *)v951 + v953[19]) = *(_OWORD *)((char *)v952 + v953[19]);
          *(_OWORD *)((char *)v951 + v953[20]) = *(_OWORD *)((char *)v952 + v953[20]);
          *(_OWORD *)((char *)v951 + v953[21]) = *(_OWORD *)((char *)v952 + v953[21]);
          *(_OWORD *)((char *)v951 + v953[22]) = *(_OWORD *)((char *)v952 + v953[22]);
          *(_OWORD *)((char *)v951 + v953[23]) = *(_OWORD *)((char *)v952 + v953[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v951, 0, 1, (uint64_t)v953);
        }
        uint64_t v967 = v1233[23];
        uint64_t v968 = (_OWORD *)((char *)v14 + v967);
        uint64_t v969 = (_OWORD *)((char *)v15 + v967);
        uint64_t v970 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v969, 1, (uint64_t)v970))
        {
          uint64_t v971 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v968, v969, *(void *)(*(void *)(v971 - 8) + 64));
        }
        else
        {
          long long v972 = v969[1];
          *uint64_t v968 = *v969;
          v968[1] = v972;
          long long v973 = v969[3];
          v968[2] = v969[2];
          v968[3] = v973;
          long long v974 = v969[5];
          v968[4] = v969[4];
          v968[5] = v974;
          uint64_t v975 = v970[11];
          v1212 = (char *)v968 + v975;
          uint64_t v976 = (char *)v969 + v975;
          if (__swift_getEnumTagSinglePayload((uint64_t)v969 + v975, 1, v1236))
          {
            uint64_t v977 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1212, v976, *(void *)(*(void *)(v977 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))__dst)(v1212, v976, v1236);
            __swift_storeEnumTagSinglePayload((uint64_t)v1212, 0, 1, v1236);
          }
          *(_OWORD *)((char *)v968 + v970[12]) = *(_OWORD *)((char *)v969 + v970[12]);
          *(void *)((char *)v968 + v970[13]) = *(void *)((char *)v969 + v970[13]);
          uint64_t v978 = v970[14];
          uint64_t v1213 = (char *)v968 + v978;
          uint64_t v979 = (char *)v969 + v978;
          if (__swift_getEnumTagSinglePayload((uint64_t)v969 + v978, 1, v1236))
          {
            uint64_t v980 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1213, v979, *(void *)(*(void *)(v980 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))__dst)(v1213, v979, v1236);
            __swift_storeEnumTagSinglePayload((uint64_t)v1213, 0, 1, v1236);
          }
          *(void *)((char *)v968 + v970[15]) = *(void *)((char *)v969 + v970[15]);
          *(void *)((char *)v968 + v970[16]) = *(void *)((char *)v969 + v970[16]);
          *(_OWORD *)((char *)v968 + v970[17]) = *(_OWORD *)((char *)v969 + v970[17]);
          *(void *)((char *)v968 + v970[18]) = *(void *)((char *)v969 + v970[18]);
          *(void *)((char *)v968 + v970[19]) = *(void *)((char *)v969 + v970[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v968, 0, 1, (uint64_t)v970);
        }
        uint64_t v981 = v1233[24];
        uint64_t v982 = (_OWORD *)((char *)v14 + v981);
        uint64_t v983 = (_OWORD *)((char *)v15 + v981);
        uint64_t v984 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v983, 1, (uint64_t)v984))
        {
          uint64_t v985 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v982, v983, *(void *)(*(void *)(v985 - 8) + 64));
        }
        else
        {
          long long v986 = v983[1];
          _OWORD *v982 = *v983;
          v982[1] = v986;
          long long v987 = v983[3];
          v982[2] = v983[2];
          v982[3] = v987;
          uint64_t v988 = v984[8];
          uint64_t v1214 = (char *)v982 + v988;
          uint64_t v989 = (char *)v983 + v988;
          uint64_t v990 = type metadata accessor for URL();
          v1204 = v989;
          uint64_t v991 = (uint64_t)v989;
          uint64_t v992 = v990;
          if (__swift_getEnumTagSinglePayload(v991, 1, v990))
          {
            uint64_t v993 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1214, v1204, *(void *)(*(void *)(v993 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, void *, uint64_t))(*(void *)(v992 - 8) + 32))(v1214, v1204, v992);
            __swift_storeEnumTagSinglePayload((uint64_t)v1214, 0, 1, v992);
          }
          *(_OWORD *)((char *)v982 + v984[9]) = *(_OWORD *)((char *)v983 + v984[9]);
          *(_OWORD *)((char *)v982 + v984[10]) = *(_OWORD *)((char *)v983 + v984[10]);
          *(_OWORD *)((char *)v982 + v984[11]) = *(_OWORD *)((char *)v983 + v984[11]);
          uint64_t v994 = v984[12];
          v1215 = (char *)v982 + v994;
          uint64_t v995 = (char *)v983 + v994;
          if (__swift_getEnumTagSinglePayload((uint64_t)v983 + v994, 1, v1236))
          {
            uint64_t v996 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1215, v995, *(void *)(*(void *)(v996 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))__dst)(v1215, v995, v1236);
            __swift_storeEnumTagSinglePayload((uint64_t)v1215, 0, 1, v1236);
          }
          uint64_t v997 = v984[13];
          v1216 = (char *)v982 + v997;
          uint64_t v998 = (char *)v983 + v997;
          if (__swift_getEnumTagSinglePayload((uint64_t)v983 + v997, 1, v1236))
          {
            uint64_t v999 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1216, v998, *(void *)(*(void *)(v999 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))__dst)(v1216, v998, v1236);
            __swift_storeEnumTagSinglePayload((uint64_t)v1216, 0, 1, v1236);
          }
          uint64_t v1000 = v984[14];
          uint64_t v1001 = (char *)v982 + v1000;
          uint64_t v1002 = (char *)v983 + v1000;
          *(void *)uint64_t v1001 = *(void *)v1002;
          v1001[8] = v1002[8];
          *(_OWORD *)((char *)v982 + v984[15]) = *(_OWORD *)((char *)v983 + v984[15]);
          *(_OWORD *)((char *)v982 + v984[16]) = *(_OWORD *)((char *)v983 + v984[16]);
          *(_OWORD *)((char *)v982 + v984[17]) = *(_OWORD *)((char *)v983 + v984[17]);
          *(_OWORD *)((char *)v982 + v984[18]) = *(_OWORD *)((char *)v983 + v984[18]);
          *(_OWORD *)((char *)v982 + v984[19]) = *(_OWORD *)((char *)v983 + v984[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v982, 0, 1, (uint64_t)v984);
        }
        uint64_t v16 = v1243;
        memcpy((char *)v14 + v1233[25], (char *)v15 + v1233[25], 0x90uLL);
        goto LABEL_527;
      case 1u:
        uint64_t v1240 = v10;
        long long v35 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v35;
        long long v36 = v15[3];
        v14[2] = v15[2];
        v14[3] = v36;
        v14[4] = v15[4];
        uint64_t v1237 = (int *)type metadata accessor for MobileSMSDocument(0);
        uint64_t v37 = v1237[10];
        uint64_t v38 = (char *)v14 + v37;
        uint64_t v39 = (char *)v15 + v37;
        uint64_t v40 = type metadata accessor for Date();
        uint64_t v1234 = v40;
        if (__swift_getEnumTagSinglePayload((uint64_t)v39, 1, v40))
        {
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
          __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, v40);
        }
        uint64_t v240 = v1237[11];
        uint64_t v241 = (char *)v14 + v240;
        uint64_t v242 = (char *)v15 + v240;
        uint64_t v243 = type metadata accessor for URL();
        uint64_t v1179 = (void *)v243;
        if (__swift_getEnumTagSinglePayload((uint64_t)v242, 1, v243))
        {
          uint64_t v244 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v241, v242, *(void *)(*(void *)(v244 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v243 - 8) + 32))(v241, v242, v243);
          __swift_storeEnumTagSinglePayload((uint64_t)v241, 0, 1, v243);
        }
        uint64_t v10 = v1240;
        *(void *)((char *)v14 + v1237[12]) = *(void *)((char *)v15 + v1237[12]);
        *(_OWORD *)((char *)v14 + v1237[13]) = *(_OWORD *)((char *)v15 + v1237[13]);
        *(_OWORD *)((char *)v14 + v1237[14]) = *(_OWORD *)((char *)v15 + v1237[14]);
        *(void *)((char *)v14 + v1237[15]) = *(void *)((char *)v15 + v1237[15]);
        *(void *)((char *)v14 + v1237[16]) = *(void *)((char *)v15 + v1237[16]);
        uint64_t v297 = v1237[17];
        uint64_t v298 = (char *)v14 + v297;
        uint64_t v299 = (char *)v15 + v297;
        long long v300 = *((_OWORD *)v299 + 1);
        *(_OWORD *)uint64_t v298 = *(_OWORD *)v299;
        *((_OWORD *)v298 + 1) = v300;
        *((void *)v298 + 4) = *((void *)v299 + 4);
        *(_OWORD *)((char *)v14 + v1237[18]) = *(_OWORD *)((char *)v15 + v1237[18]);
        uint64_t v301 = v1237[19];
        __dsta = (_OWORD *)((char *)v14 + v301);
        uint64_t v302 = (_OWORD *)((char *)v15 + v301);
        uint64_t v303 = type metadata accessor for PartialExtractedAttributes(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v302, 1, v303))
        {
          uint64_t v304 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(__dsta, v302, *(void *)(*(void *)(v304 - 8) + 64));
        }
        else
        {
          long long v344 = __dsta;
          _OWORD *__dsta = *v302;
          uint64_t v1201 = (char *)v302;
          v1208 = (int *)v303;
          uint64_t v345 = *(int *)(v303 + 20);
          uint64_t v346 = (_OWORD *)((char *)__dsta + v345);
          uint64_t v347 = (_OWORD *)((char *)v302 + v345);
          v1159 = (int *)type metadata accessor for RentalCarReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v347, 1, (uint64_t)v1159))
          {
            uint64_t v348 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v346, v347, *(void *)(*(void *)(v348 - 8) + 64));
            uint64_t v349 = v1201;
            uint64_t v350 = v1208;
          }
          else
          {
            long long v378 = v347[1];
            *uint64_t v346 = *v347;
            v346[1] = v378;
            long long v379 = v347[3];
            v346[2] = v347[2];
            v346[3] = v379;
            long long v380 = v347[5];
            v346[4] = v347[4];
            v346[5] = v380;
            long long v381 = v347[7];
            v346[6] = v347[6];
            v346[7] = v381;
            *((unsigned char *)v346 + 128) = *((unsigned char *)v347 + 128);
            *(_WORD *)((char *)v346 + 129) = *(_WORD *)((char *)v347 + 129);
            *((void *)v346 + 17) = *((void *)v347 + 17);
            long long v382 = v347[10];
            v346[9] = v347[9];
            v346[10] = v382;
            long long v383 = v347[12];
            v346[11] = v347[11];
            v346[12] = v383;
            long long v384 = v347[14];
            v346[13] = v347[13];
            v346[14] = v384;
            v346[15] = v347[15];
            *((void *)v346 + 32) = *((void *)v347 + 32);
            *(_OWORD *)((char *)v346 + 264) = *(_OWORD *)((char *)v347 + 264);
            *(_OWORD *)((char *)v346 + 280) = *(_OWORD *)((char *)v347 + 280);
            *(_OWORD *)((char *)v346 + 296) = *(_OWORD *)((char *)v347 + 296);
            *(_OWORD *)((char *)v346 + 312) = *(_OWORD *)((char *)v347 + 312);
            *(_OWORD *)((char *)v346 + 328) = *(_OWORD *)((char *)v347 + 328);
            *(_OWORD *)((char *)v346 + 344) = *(_OWORD *)((char *)v347 + 344);
            *(_OWORD *)((char *)v346 + 360) = *(_OWORD *)((char *)v347 + 360);
            *((unsigned char *)v346 + 384) = *((unsigned char *)v347 + 384);
            *((void *)v346 + 47) = *((void *)v347 + 47);
            *(_OWORD *)((char *)v346 + 392) = *(_OWORD *)((char *)v347 + 392);
            *(_OWORD *)((char *)v346 + 408) = *(_OWORD *)((char *)v347 + 408);
            uint64_t v385 = v1159[35];
            __srca = (char *)v346 + v385;
            uint64_t v386 = (char *)v347 + v385;
            if (__swift_getEnumTagSinglePayload((uint64_t)v347 + v385, 1, v1234))
            {
              uint64_t v387 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srca, v386, *(void *)(*(void *)(v387 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(__srca, v386, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)__srca, 0, 1, v1234);
            }
            uint64_t v395 = v1159[36];
            uint64_t v396 = (char *)v346 + v395;
            v397 = (char *)v347 + v395;
            if (__swift_getEnumTagSinglePayload((uint64_t)v397, 1, v1234))
            {
              uint64_t v398 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v396, v397, *(void *)(*(void *)(v398 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(v396, v397, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)v396, 0, 1, v1234);
            }
            uint64_t v349 = v1201;
            uint64_t v350 = v1208;
            __swift_storeEnumTagSinglePayload((uint64_t)v346, 0, 1, (uint64_t)v1159);
            long long v344 = __dsta;
          }
          uint64_t v430 = v350[6];
          uint64_t v431 = v344;
          long long v432 = (_OWORD *)((char *)v344 + v430);
          uint64_t v433 = &v349[v430];
          uint64_t v434 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v433, 1, v434))
          {
            uint64_t v435 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v432, v433, *(void *)(*(void *)(v435 - 8) + 64));
            long long v436 = v431;
            uint64_t v437 = v1201;
            uint64_t v438 = v1208;
          }
          else
          {
            long long v439 = *((_OWORD *)v433 + 1);
            *long long v432 = *(_OWORD *)v433;
            v432[1] = v439;
            long long v440 = *((_OWORD *)v433 + 3);
            v432[2] = *((_OWORD *)v433 + 2);
            v432[3] = v440;
            long long v441 = *((_OWORD *)v433 + 5);
            v432[4] = *((_OWORD *)v433 + 4);
            v432[5] = v441;
            long long v442 = *((_OWORD *)v433 + 7);
            v432[6] = *((_OWORD *)v433 + 6);
            v432[7] = v442;
            *((unsigned char *)v432 + 128) = v433[128];
            *(_WORD *)((char *)v432 + 129) = *(_WORD *)(v433 + 129);
            *((void *)v432 + 17) = *((void *)v433 + 17);
            long long v443 = *((_OWORD *)v433 + 10);
            v432[9] = *((_OWORD *)v433 + 9);
            v432[10] = v443;
            long long v444 = *((_OWORD *)v433 + 12);
            v432[11] = *((_OWORD *)v433 + 11);
            v432[12] = v444;
            *((void *)v432 + 26) = *((void *)v433 + 26);
            *(_OWORD *)((char *)v432 + 216) = *(_OWORD *)(v433 + 216);
            *(_OWORD *)((char *)v432 + 232) = *(_OWORD *)(v433 + 232);
            *(_OWORD *)((char *)v432 + 248) = *(_OWORD *)(v433 + 248);
            *(_OWORD *)((char *)v432 + 264) = *(_OWORD *)(v433 + 264);
            *((unsigned char *)v432 + 296) = v433[296];
            uint64_t v445 = *((void *)v433 + 36);
            *((void *)v432 + 35) = *((void *)v433 + 35);
            *((void *)v432 + 36) = v445;
            uint64_t v446 = *(int *)(v434 + 112);
            __srcc = (char *)v432 + v446;
            uint64_t v1161 = (int *)v434;
            long long v447 = &v433[v446];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v433[v446], 1, v1234))
            {
              uint64_t v448 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcc, v447, *(void *)(*(void *)(v448 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(__srcc, v447, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcc, 0, 1, v1234);
            }
            uint64_t v457 = v1161[29];
            __srcd = (char *)v432 + v457;
            uint64_t v458 = &v433[v457];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v433[v457], 1, v1234))
            {
              uint64_t v459 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcd, v458, *(void *)(*(void *)(v459 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(__srcd, v458, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcd, 0, 1, v1234);
            }
            uint64_t v437 = v1201;
            uint64_t v438 = v1208;
            __swift_storeEnumTagSinglePayload((uint64_t)v432, 0, 1, (uint64_t)v1161);
            long long v436 = __dsta;
          }
          uint64_t v496 = v438[7];
          uint64_t v497 = v436;
          unint64_t v498 = (_OWORD *)((char *)v436 + v496);
          uint64_t v499 = &v437[v496];
          uint64_t v500 = type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v499, 1, v500))
          {
            uint64_t v501 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v498, v499, *(void *)(*(void *)(v501 - 8) + 64));
            uint64_t v502 = v497;
            uint64_t v503 = v1201;
            uint64_t v504 = v1208;
          }
          else
          {
            long long v505 = *((_OWORD *)v499 + 1);
            *unint64_t v498 = *(_OWORD *)v499;
            v498[1] = v505;
            long long v506 = *((_OWORD *)v499 + 3);
            v498[2] = *((_OWORD *)v499 + 2);
            v498[3] = v506;
            long long v507 = *((_OWORD *)v499 + 5);
            v498[4] = *((_OWORD *)v499 + 4);
            v498[5] = v507;
            long long v508 = *((_OWORD *)v499 + 7);
            v498[6] = *((_OWORD *)v499 + 6);
            v498[7] = v508;
            *((unsigned char *)v498 + 128) = v499[128];
            *(_WORD *)((char *)v498 + 129) = *(_WORD *)(v499 + 129);
            *((void *)v498 + 17) = *((void *)v499 + 17);
            long long v509 = *((_OWORD *)v499 + 10);
            v498[9] = *((_OWORD *)v499 + 9);
            v498[10] = v509;
            long long v510 = *((_OWORD *)v499 + 12);
            v498[11] = *((_OWORD *)v499 + 11);
            v498[12] = v510;
            long long v511 = *((_OWORD *)v499 + 14);
            v498[13] = *((_OWORD *)v499 + 13);
            v498[14] = v511;
            *((void *)v498 + 30) = *((void *)v499 + 30);
            *(_OWORD *)((char *)v498 + 248) = *(_OWORD *)(v499 + 248);
            *(_OWORD *)((char *)v498 + 264) = *(_OWORD *)(v499 + 264);
            *((unsigned char *)v498 + 296) = v499[296];
            uint64_t v512 = *((void *)v499 + 36);
            *((void *)v498 + 35) = *((void *)v499 + 35);
            *((void *)v498 + 36) = v512;
            v498[19] = *((_OWORD *)v499 + 19);
            uint64_t v1163 = (int *)v500;
            uint64_t v513 = *(int *)(v500 + 116);
            long long v514 = (char *)v498 + v513;
            uint64_t v515 = &v499[v513];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v499[v513], 1, (uint64_t)v1179))
            {
              uint64_t v516 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v514, v515, *(void *)(*(void *)(v516 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1179 - 1) + 32))(v514, v515, v1179);
              __swift_storeEnumTagSinglePayload((uint64_t)v514, 0, 1, (uint64_t)v1179);
            }
            *(_OWORD *)((char *)v498 + v1163[30]) = *(_OWORD *)&v499[v1163[30]];
            uint64_t v524 = v1163[31];
            __srcf = (char *)v498 + v524;
            uint64_t v525 = &v499[v524];
            uint64_t v10 = v1240;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v499[v524], 1, v1234))
            {
              uint64_t v526 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcf, v525, *(void *)(*(void *)(v526 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(__srcf, v525, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcf, 0, 1, v1234);
            }
            uint64_t v534 = v1163[32];
            __srcg = (char *)v498 + v534;
            uint64_t v535 = &v499[v534];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v499[v534], 1, v1234))
            {
              uint64_t v536 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcg, v535, *(void *)(*(void *)(v536 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(__srcg, v535, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcg, 0, 1, v1234);
            }
            uint64_t v503 = v1201;
            uint64_t v504 = v1208;
            __swift_storeEnumTagSinglePayload((uint64_t)v498, 0, 1, (uint64_t)v1163);
            uint64_t v502 = __dsta;
          }
          uint64_t v571 = v504[8];
          uint64_t v572 = v502;
          uint64_t v573 = (_OWORD *)((char *)v502 + v571);
          uint64_t v574 = &v503[v571];
          uint64_t v575 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v574, 1, v575))
          {
            uint64_t v576 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v573, v574, *(void *)(*(void *)(v576 - 8) + 64));
            uint64_t v577 = v572;
            uint64_t v578 = v1201;
            uint64_t v579 = v1208;
          }
          else
          {
            long long v580 = *((_OWORD *)v574 + 1);
            *uint64_t v573 = *(_OWORD *)v574;
            v573[1] = v580;
            long long v581 = *((_OWORD *)v574 + 3);
            v573[2] = *((_OWORD *)v574 + 2);
            v573[3] = v581;
            long long v582 = *((_OWORD *)v574 + 5);
            v573[4] = *((_OWORD *)v574 + 4);
            v573[5] = v582;
            long long v583 = *((_OWORD *)v574 + 7);
            v573[6] = *((_OWORD *)v574 + 6);
            v573[7] = v583;
            *((unsigned char *)v573 + 128) = v574[128];
            *(_WORD *)((char *)v573 + 129) = *(_WORD *)(v574 + 129);
            *((void *)v573 + 17) = *((void *)v574 + 17);
            long long v584 = *((_OWORD *)v574 + 10);
            v573[9] = *((_OWORD *)v574 + 9);
            v573[10] = v584;
            long long v585 = *((_OWORD *)v574 + 12);
            v573[11] = *((_OWORD *)v574 + 11);
            v573[12] = v585;
            long long v586 = *((_OWORD *)v574 + 14);
            v573[13] = *((_OWORD *)v574 + 13);
            v573[14] = v586;
            long long v587 = *((_OWORD *)v574 + 16);
            v573[15] = *((_OWORD *)v574 + 15);
            v573[16] = v587;
            *((unsigned char *)v573 + 280) = v574[280];
            *((void *)v573 + 34) = *((void *)v574 + 34);
            v573[18] = *((_OWORD *)v574 + 18);
            uint64_t v588 = *(int *)(v575 + 108);
            __srci = (char *)v573 + v588;
            uint64_t v1165 = (int *)v575;
            uint64_t v589 = &v574[v588];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v574[v588], 1, v1234))
            {
              uint64_t v590 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srci, v589, *(void *)(*(void *)(v590 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(__srci, v589, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)__srci, 0, 1, v1234);
            }
            uint64_t v599 = v1165[28];
            __srcj = (char *)v573 + v599;
            uint64_t v600 = &v574[v599];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v574[v599], 1, v1234))
            {
              uint64_t v601 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(__srcj, v600, *(void *)(*(void *)(v601 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(__srcj, v600, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcj, 0, 1, v1234);
            }
            uint64_t v578 = v1201;
            uint64_t v579 = v1208;
            __swift_storeEnumTagSinglePayload((uint64_t)v573, 0, 1, (uint64_t)v1165);
            uint64_t v577 = __dsta;
          }
          uint64_t v634 = v579[9];
          uint64_t v635 = v577;
          v636 = (_OWORD *)((char *)v577 + v634);
          v637 = &v578[v634];
          uint64_t v638 = type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v637, 1, v638))
          {
            uint64_t v639 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v636, v637, *(void *)(*(void *)(v639 - 8) + 64));
            long long v640 = v635;
            uint64_t v641 = v1201;
            uint64_t v642 = v1208;
          }
          else
          {
            long long v643 = *((_OWORD *)v637 + 1);
            _OWORD *v636 = *(_OWORD *)v637;
            v636[1] = v643;
            long long v644 = *((_OWORD *)v637 + 3);
            v636[2] = *((_OWORD *)v637 + 2);
            v636[3] = v644;
            long long v645 = *((_OWORD *)v637 + 5);
            v636[4] = *((_OWORD *)v637 + 4);
            v636[5] = v645;
            long long v646 = *((_OWORD *)v637 + 7);
            v636[6] = *((_OWORD *)v637 + 6);
            v636[7] = v646;
            *((unsigned char *)v636 + 128) = v637[128];
            *(_WORD *)((char *)v636 + 129) = *(_WORD *)(v637 + 129);
            *((void *)v636 + 17) = *((void *)v637 + 17);
            long long v647 = *((_OWORD *)v637 + 10);
            v636[9] = *((_OWORD *)v637 + 9);
            v636[10] = v647;
            long long v648 = *((_OWORD *)v637 + 12);
            v636[11] = *((_OWORD *)v637 + 11);
            v636[12] = v648;
            long long v649 = *((_OWORD *)v637 + 14);
            v636[13] = *((_OWORD *)v637 + 13);
            v636[14] = v649;
            v636[15] = *((_OWORD *)v637 + 15);
            uint64_t v650 = *(int *)(v638 + 96);
            uint64_t v1167 = (char *)v636 + v650;
            uint64_t v651 = &v637[v650];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v637[v650], 1, v1234))
            {
              uint64_t v652 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1167, v651, *(void *)(*(void *)(v652 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(v1167, v651, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)v1167, 0, 1, v1234);
            }
            uint64_t v1169 = (int *)v638;
            uint64_t v659 = *(int *)(v638 + 100);
            v660 = (char *)v636 + v659;
            uint64_t v661 = &v637[v659];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v637[v659], 1, v1234))
            {
              uint64_t v662 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v660, v661, *(void *)(*(void *)(v662 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(v660, v661, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)v660, 0, 1, v1234);
            }
            uint64_t v642 = v1208;
            uint64_t v672 = v1169[26];
            __srcl = (char *)v636 + v672;
            uint64_t v673 = &v637[v672];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v637[v672], 1, (uint64_t)v1179))
            {
              uint64_t v674 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__srcl, v673, *(void *)(*(void *)(v674 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1179 - 1) + 32))(__srcl, v673, v1179);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcl, 0, 1, (uint64_t)v1179);
            }
            uint64_t v10 = v1240;
            uint64_t v641 = v1201;
            __swift_storeEnumTagSinglePayload((uint64_t)v636, 0, 1, (uint64_t)v1169);
            long long v640 = __dsta;
          }
          uint64_t v707 = v642[10];
          uint64_t v708 = (uint64_t)v640;
          uint64_t v709 = (_OWORD *)((char *)v640 + v707);
          uint64_t v710 = &v641[v707];
          uint64_t v711 = type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v710, 1, v711))
          {
            uint64_t v712 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v709, v710, *(void *)(*(void *)(v712 - 8) + 64));
            uint64_t v713 = v708;
            uint64_t v714 = v1208;
          }
          else
          {
            long long v715 = *((_OWORD *)v710 + 1);
            *uint64_t v709 = *(_OWORD *)v710;
            v709[1] = v715;
            long long v716 = *((_OWORD *)v710 + 3);
            v709[2] = *((_OWORD *)v710 + 2);
            v709[3] = v716;
            long long v717 = *((_OWORD *)v710 + 5);
            v709[4] = *((_OWORD *)v710 + 4);
            v709[5] = v717;
            long long v718 = *((_OWORD *)v710 + 7);
            v709[6] = *((_OWORD *)v710 + 6);
            v709[7] = v718;
            *((unsigned char *)v709 + 128) = v710[128];
            *(_WORD *)((char *)v709 + 129) = *(_WORD *)(v710 + 129);
            *((void *)v709 + 17) = *((void *)v710 + 17);
            long long v719 = *((_OWORD *)v710 + 10);
            v709[9] = *((_OWORD *)v710 + 9);
            v709[10] = v719;
            long long v720 = *((_OWORD *)v710 + 12);
            v709[11] = *((_OWORD *)v710 + 11);
            v709[12] = v720;
            v709[13] = *((_OWORD *)v710 + 13);
            uint64_t v721 = *(int *)(v711 + 88);
            uint64_t v1170 = (char *)v709 + v721;
            v722 = &v710[v721];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v710[v721], 1, v1234))
            {
              uint64_t v723 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1170, v722, *(void *)(*(void *)(v723 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(v1170, v722, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)v1170, 0, 1, v1234);
            }
            uint64_t v1171 = (int *)v711;
            uint64_t v730 = *(int *)(v711 + 92);
            uint64_t v731 = (char *)v709 + v730;
            uint64_t v732 = &v710[v730];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v710[v730], 1, v1234))
            {
              uint64_t v733 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v731, v732, *(void *)(*(void *)(v733 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(v731, v732, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)v731, 0, 1, v1234);
            }
            uint64_t v714 = v1208;
            uint64_t v749 = v1171[24];
            uint64_t v750 = (char *)v709 + v749;
            uint64_t v751 = &v710[v749];
            *(void *)uint64_t v750 = *(void *)v751;
            v750[8] = v751[8];
            uint64_t v752 = v1171[25];
            __srcn = (char *)v709 + v752;
            uint64_t v753 = &v710[v752];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v710[v752], 1, (uint64_t)v1179))
            {
              uint64_t v754 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(__srcn, v753, *(void *)(*(void *)(v754 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1179 - 1) + 32))(__srcn, v753, v1179);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcn, 0, 1, (uint64_t)v1179);
            }
            uint64_t v10 = v1240;
            __swift_storeEnumTagSinglePayload((uint64_t)v709, 0, 1, (uint64_t)v1171);
            uint64_t v713 = (uint64_t)__dsta;
          }
          uint64_t v783 = v714[11];
          uint64_t v784 = (_OWORD *)(v713 + v783);
          uint64_t v785 = &v1201[v783];
          uint64_t v786 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v785, 1, (uint64_t)v786))
          {
            uint64_t v787 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v784, v785, *(void *)(*(void *)(v787 - 8) + 64));
          }
          else
          {
            long long v788 = *((_OWORD *)v785 + 1);
            _OWORD *v784 = *(_OWORD *)v785;
            v784[1] = v788;
            long long v789 = *((_OWORD *)v785 + 3);
            v784[2] = *((_OWORD *)v785 + 2);
            v784[3] = v789;
            long long v790 = *((_OWORD *)v785 + 5);
            v784[4] = *((_OWORD *)v785 + 4);
            v784[5] = v790;
            *((unsigned char *)v784 + 96) = v785[96];
            *(_OWORD *)((char *)v784 + 104) = *(_OWORD *)(v785 + 104);
            uint64_t v791 = v786[13];
            uint64_t v1172 = (char *)v784 + v791;
            uint64_t v792 = &v785[v791];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v785[v791], 1, (uint64_t)v1179))
            {
              uint64_t v793 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1172, v792, *(void *)(*(void *)(v793 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1179 - 1) + 32))(v1172, v792, v1179);
              __swift_storeEnumTagSinglePayload((uint64_t)v1172, 0, 1, (uint64_t)v1179);
            }
            uint64_t v799 = v786[14];
            uint64_t v1173 = (char *)v784 + v799;
            uint64_t v800 = &v785[v799];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v785[v799], 1, (uint64_t)v1179))
            {
              uint64_t v801 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1173, v800, *(void *)(*(void *)(v801 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(*(v1179 - 1) + 32))(v1173, v800, v1179);
              __swift_storeEnumTagSinglePayload((uint64_t)v1173, 0, 1, (uint64_t)v1179);
            }
            *(_OWORD *)((char *)v784 + v786[15]) = *(_OWORD *)&v785[v786[15]];
            *(_OWORD *)((char *)v784 + v786[16]) = *(_OWORD *)&v785[v786[16]];
            *(_OWORD *)((char *)v784 + v786[17]) = *(_OWORD *)&v785[v786[17]];
            uint64_t v811 = v786[18];
            uint64_t v1129 = &v785[v811];
            __srcy = (char *)v784 + v811;
            uint64_t v812 = type metadata accessor for DateComponents();
            uint64_t v1175 = *(void (**)(char *, char *, uint64_t))(*(void *)(v812 - 8) + 32);
            v1175(__srcy, v1129, v812);
            v1175((char *)v784 + v786[19], &v785[v786[19]], v812);
            *(_OWORD *)((char *)v784 + v786[20]) = *(_OWORD *)&v785[v786[20]];
            *(_OWORD *)((char *)v784 + v786[21]) = *(_OWORD *)&v785[v786[21]];
            *(_OWORD *)((char *)v784 + v786[22]) = *(_OWORD *)&v785[v786[22]];
            *(_OWORD *)((char *)v784 + v786[23]) = *(_OWORD *)&v785[v786[23]];
            *(_OWORD *)((char *)v784 + v786[24]) = *(_OWORD *)&v785[v786[24]];
            *(_OWORD *)((char *)v784 + v786[25]) = *(_OWORD *)&v785[v786[25]];
            *(_OWORD *)((char *)v784 + v786[26]) = *(_OWORD *)&v785[v786[26]];
            *(_OWORD *)((char *)v784 + v786[27]) = *(_OWORD *)&v785[v786[27]];
            *(_OWORD *)((char *)v784 + v786[28]) = *(_OWORD *)&v785[v786[28]];
            *(_OWORD *)((char *)v784 + v786[29]) = *(_OWORD *)&v785[v786[29]];
            *(_OWORD *)((char *)v784 + v786[30]) = *(_OWORD *)&v785[v786[30]];
            *(_OWORD *)((char *)v784 + v786[31]) = *(_OWORD *)&v785[v786[31]];
            *(_OWORD *)((char *)v784 + v786[32]) = *(_OWORD *)&v785[v786[32]];
            *(void *)((char *)v784 + v786[33]) = *(void *)&v785[v786[33]];
            *(void *)((char *)v784 + v786[34]) = *(void *)&v785[v786[34]];
            *(_OWORD *)((char *)v784 + v786[35]) = *(_OWORD *)&v785[v786[35]];
            *(_OWORD *)((char *)v784 + v786[36]) = *(_OWORD *)&v785[v786[36]];
            *(_OWORD *)((char *)v784 + v786[37]) = *(_OWORD *)&v785[v786[37]];
            uint64_t v813 = v786[38];
            uint64_t v1176 = (char *)v784 + v813;
            uint64_t v814 = &v785[v813];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v785[v813], 1, v1234))
            {
              uint64_t v815 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1176, v814, *(void *)(*(void *)(v815 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1234 - 8) + 32))(v1176, v814, v1234);
              __swift_storeEnumTagSinglePayload((uint64_t)v1176, 0, 1, v1234);
            }
            uint64_t v10 = v1240;
            *(_OWORD *)((char *)v784 + v786[39]) = *(_OWORD *)&v785[v786[39]];
            *(_OWORD *)((char *)v784 + v786[40]) = *(_OWORD *)&v785[v786[40]];
            uint64_t v856 = v786[41];
            uint64_t v857 = (char *)v784 + v856;
            uint64_t v858 = &v785[v856];
            *(void *)uint64_t v857 = *(void *)v858;
            v857[8] = v858[8];
            *(_OWORD *)((char *)v784 + v786[42]) = *(_OWORD *)&v785[v786[42]];
            uint64_t v859 = v786[43];
            uint64_t v860 = (char *)v784 + v859;
            uint64_t v861 = &v785[v859];
            *(_OWORD *)uint64_t v860 = *(_OWORD *)v861;
            *(void *)(v860 + 13) = *(void *)(v861 + 13);
            *(_OWORD *)((char *)v784 + v786[44]) = *(_OWORD *)&v785[v786[44]];
            *(_OWORD *)((char *)v784 + v786[45]) = *(_OWORD *)&v785[v786[45]];
            *(_OWORD *)((char *)v784 + v786[46]) = *(_OWORD *)&v785[v786[46]];
            *(_OWORD *)((char *)v784 + v786[47]) = *(_OWORD *)&v785[v786[47]];
            __swift_storeEnumTagSinglePayload((uint64_t)v784, 0, 1, (uint64_t)v786);
            uint64_t v713 = (uint64_t)__dsta;
          }
          uint64_t v862 = v1208[12];
          uint64_t v863 = (_OWORD *)(v713 + v862);
          uint64_t v864 = &v1201[v862];
          uint64_t v865 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v864, 1, (uint64_t)v865))
          {
            uint64_t v866 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v863, v864, *(void *)(*(void *)(v866 - 8) + 64));
          }
          else
          {
            long long v867 = *((_OWORD *)v864 + 1);
            _OWORD *v863 = *(_OWORD *)v864;
            v863[1] = v867;
            long long v868 = *((_OWORD *)v864 + 3);
            v863[2] = *((_OWORD *)v864 + 2);
            v863[3] = v868;
            long long v869 = *((_OWORD *)v864 + 5);
            v863[4] = *((_OWORD *)v864 + 4);
            v863[5] = v869;
            *((unsigned char *)v863 + 96) = v864[96];
            *(_OWORD *)((char *)v863 + 104) = *(_OWORD *)(v864 + 104);
            *(_OWORD *)((char *)v863 + 120) = *(_OWORD *)(v864 + 120);
            uint64_t v870 = v865[14];
            __srcs = (char *)v863 + v870;
            uint64_t v871 = &v864[v870];
            uint64_t v1177 = (void *)type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v871, 1, (uint64_t)v1177))
            {
              uint64_t v872 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__srcs, v871, *(void *)(*(void *)(v872 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *))(*(v1177 - 1) + 32))(__srcs, v871);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcs, 0, 1, (uint64_t)v1177);
            }
            uint64_t v878 = v865[15];
            __srcu = (char *)v863 + v878;
            uint64_t v879 = &v864[v878];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v864[v878], 1, (uint64_t)v1177))
            {
              uint64_t v880 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(__srcu, v879, *(void *)(*(void *)(v880 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *))(*(v1177 - 1) + 32))(__srcu, v879);
              __swift_storeEnumTagSinglePayload((uint64_t)__srcu, 0, 1, (uint64_t)v1177);
            }
            *(_OWORD *)((char *)v863 + v865[16]) = *(_OWORD *)&v864[v865[16]];
            *(_OWORD *)((char *)v863 + v865[17]) = *(_OWORD *)&v864[v865[17]];
            *(_OWORD *)((char *)v863 + v865[18]) = *(_OWORD *)&v864[v865[18]];
            *(_OWORD *)((char *)v863 + v865[19]) = *(_OWORD *)&v864[v865[19]];
            *(_OWORD *)((char *)v863 + v865[20]) = *(_OWORD *)&v864[v865[20]];
            *(void *)((char *)v863 + v865[21]) = *(void *)&v864[v865[21]];
            *(void *)((char *)v863 + v865[22]) = *(void *)&v864[v865[22]];
            uint64_t v927 = v865[23];
            uint64_t v928 = (char *)v863 + v927;
            uint64_t v929 = &v864[v927];
            v928[8] = v929[8];
            *(void *)uint64_t v928 = *(void *)v929;
            uint64_t v930 = v865[24];
            uint64_t v931 = (char *)v863 + v930;
            uint64_t v932 = &v864[v930];
            v931[8] = v932[8];
            *(void *)uint64_t v931 = *(void *)v932;
            *(_OWORD *)((char *)v863 + v865[25]) = *(_OWORD *)&v864[v865[25]];
            *(_OWORD *)((char *)v863 + v865[26]) = *(_OWORD *)&v864[v865[26]];
            *(_OWORD *)((char *)v863 + v865[27]) = *(_OWORD *)&v864[v865[27]];
            *(_OWORD *)((char *)v863 + v865[28]) = *(_OWORD *)&v864[v865[28]];
            uint64_t v933 = v865[29];
            uint64_t v934 = (char *)v863 + v933;
            uint64_t v935 = &v864[v933];
            *(void *)uint64_t v934 = *(void *)v935;
            v934[8] = v935[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v863, 0, 1, (uint64_t)v865);
            uint64_t v713 = (uint64_t)__dsta;
          }
          uint64_t v936 = v1208[13];
          uint64_t v937 = (_OWORD *)(v713 + v936);
          uint64_t v938 = &v1201[v936];
          uint64_t v939 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v938, 1, (uint64_t)v939))
          {
            uint64_t v940 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v937, v938, *(void *)(*(void *)(v940 - 8) + 64));
          }
          else
          {
            long long v941 = *((_OWORD *)v938 + 1);
            *uint64_t v937 = *(_OWORD *)v938;
            v937[1] = v941;
            long long v942 = *((_OWORD *)v938 + 3);
            v937[2] = *((_OWORD *)v938 + 2);
            v937[3] = v942;
            long long v943 = *((_OWORD *)v938 + 5);
            v937[4] = *((_OWORD *)v938 + 4);
            v937[5] = v943;
            *((unsigned char *)v937 + 96) = v938[96];
            *(_OWORD *)((char *)v937 + 104) = *(_OWORD *)(v938 + 104);
            *(_OWORD *)((char *)v937 + 120) = *(_OWORD *)(v938 + 120);
            uint64_t v944 = v939[14];
            v1203 = (char *)v937 + v944;
            uint64_t v945 = &v938[v944];
            uint64_t v946 = type metadata accessor for DateComponents();
            uint64_t v1178 = v945;
            uint64_t v947 = (uint64_t)v945;
            uint64_t v948 = v946;
            if (__swift_getEnumTagSinglePayload(v947, 1, v946))
            {
              uint64_t v949 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1203, v1178, *(void *)(*(void *)(v949 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(*(void *)(v948 - 8) + 32))(v1203, v1178, v948);
              __swift_storeEnumTagSinglePayload((uint64_t)v1203, 0, 1, v948);
            }
            *(_OWORD *)((char *)v937 + v939[15]) = *(_OWORD *)&v938[v939[15]];
            *(_OWORD *)((char *)v937 + v939[16]) = *(_OWORD *)&v938[v939[16]];
            *(_OWORD *)((char *)v937 + v939[17]) = *(_OWORD *)&v938[v939[17]];
            *(_OWORD *)((char *)v937 + v939[18]) = *(_OWORD *)&v938[v939[18]];
            *(_OWORD *)((char *)v937 + v939[19]) = *(_OWORD *)&v938[v939[19]];
            *(void *)((char *)v937 + v939[20]) = *(void *)&v938[v939[20]];
            *(_OWORD *)((char *)v937 + v939[21]) = *(_OWORD *)&v938[v939[21]];
            *(_OWORD *)((char *)v937 + v939[22]) = *(_OWORD *)&v938[v939[22]];
            *(_OWORD *)((char *)v937 + v939[23]) = *(_OWORD *)&v938[v939[23]];
            __swift_storeEnumTagSinglePayload((uint64_t)v937, 0, 1, (uint64_t)v939);
            uint64_t v713 = (uint64_t)__dsta;
          }
          __swift_storeEnumTagSinglePayload(v713, 0, 1, (uint64_t)v1208);
        }
        uint64_t v1056 = v1237[20];
        uint64_t v1057 = (_OWORD *)((char *)v14 + v1056);
        uint64_t v1058 = (_OWORD *)((char *)v15 + v1056);
        uint64_t v1059 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1058, 1, (uint64_t)v1059))
        {
          uint64_t v1060 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v1057, v1058, *(void *)(*(void *)(v1060 - 8) + 64));
        }
        else
        {
          long long v1061 = v1058[1];
          _OWORD *v1057 = *v1058;
          v1057[1] = v1061;
          long long v1062 = v1058[3];
          v1057[2] = v1058[2];
          v1057[3] = v1062;
          long long v1063 = v1058[5];
          v1057[4] = v1058[4];
          v1057[5] = v1063;
          uint64_t v1064 = v1059[10];
          v1225 = (char *)v1057 + v1064;
          uint64_t v1065 = (char *)v1058 + v1064;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1058 + v1064, 1, v1234))
          {
            uint64_t v1066 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1225, v1065, *(void *)(*(void *)(v1066 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1234 - 8) + 32))(v1225, v1065);
            __swift_storeEnumTagSinglePayload((uint64_t)v1225, 0, 1, v1234);
          }
          uint64_t v1067 = v1059[11];
          uint64_t v1226 = (char *)v1057 + v1067;
          uint64_t v1068 = (char *)v1058 + v1067;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1058 + v1067, 1, v1234))
          {
            uint64_t v1069 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1226, v1068, *(void *)(*(void *)(v1069 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1234 - 8) + 32))(v1226, v1068);
            __swift_storeEnumTagSinglePayload((uint64_t)v1226, 0, 1, v1234);
          }
          *(_OWORD *)((char *)v1057 + v1059[12]) = *(_OWORD *)((char *)v1058 + v1059[12]);
          *(_OWORD *)((char *)v1057 + v1059[13]) = *(_OWORD *)((char *)v1058 + v1059[13]);
          *(_OWORD *)((char *)v1057 + v1059[14]) = *(_OWORD *)((char *)v1058 + v1059[14]);
          uint64_t v1070 = v1059[15];
          uint64_t v1227 = (char *)v1057 + v1070;
          uint64_t v1071 = (char *)v1058 + v1070;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1058 + v1070, 1, v1234))
          {
            uint64_t v1072 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1227, v1071, *(void *)(*(void *)(v1072 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1234 - 8) + 32))(v1227, v1071);
            __swift_storeEnumTagSinglePayload((uint64_t)v1227, 0, 1, v1234);
          }
          *(_OWORD *)((char *)v1057 + v1059[16]) = *(_OWORD *)((char *)v1058 + v1059[16]);
          *(_OWORD *)((char *)v1057 + v1059[17]) = *(_OWORD *)((char *)v1058 + v1059[17]);
          *(_OWORD *)((char *)v1057 + v1059[18]) = *(_OWORD *)((char *)v1058 + v1059[18]);
          *(_OWORD *)((char *)v1057 + v1059[19]) = *(_OWORD *)((char *)v1058 + v1059[19]);
          *(_OWORD *)((char *)v1057 + v1059[20]) = *(_OWORD *)((char *)v1058 + v1059[20]);
          *(_OWORD *)((char *)v1057 + v1059[21]) = *(_OWORD *)((char *)v1058 + v1059[21]);
          *(_OWORD *)((char *)v1057 + v1059[22]) = *(_OWORD *)((char *)v1058 + v1059[22]);
          *(_OWORD *)((char *)v1057 + v1059[23]) = *(_OWORD *)((char *)v1058 + v1059[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1057, 0, 1, (uint64_t)v1059);
        }
        uint64_t v1073 = v1237[21];
        uint64_t v1074 = (_OWORD *)((char *)v14 + v1073);
        uint64_t v1075 = (_OWORD *)((char *)v15 + v1073);
        uint64_t v1076 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1075, 1, (uint64_t)v1076))
        {
          uint64_t v1077 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v1074, v1075, *(void *)(*(void *)(v1077 - 8) + 64));
        }
        else
        {
          long long v1078 = v1075[1];
          _OWORD *v1074 = *v1075;
          v1074[1] = v1078;
          long long v1079 = v1075[3];
          v1074[2] = v1075[2];
          v1074[3] = v1079;
          long long v1080 = v1075[5];
          v1074[4] = v1075[4];
          v1074[5] = v1080;
          uint64_t v1081 = v1076[11];
          uint64_t v1228 = (char *)v1074 + v1081;
          uint64_t v1082 = (char *)v1075 + v1081;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1075 + v1081, 1, v1234))
          {
            uint64_t v1083 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1228, v1082, *(void *)(*(void *)(v1083 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1234 - 8) + 32))(v1228, v1082);
            __swift_storeEnumTagSinglePayload((uint64_t)v1228, 0, 1, v1234);
          }
          *(_OWORD *)((char *)v1074 + v1076[12]) = *(_OWORD *)((char *)v1075 + v1076[12]);
          *(void *)((char *)v1074 + v1076[13]) = *(void *)((char *)v1075 + v1076[13]);
          uint64_t v1084 = v1076[14];
          v1229 = (char *)v1074 + v1084;
          uint64_t v1085 = (char *)v1075 + v1084;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1075 + v1084, 1, v1234))
          {
            uint64_t v1086 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1229, v1085, *(void *)(*(void *)(v1086 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1234 - 8) + 32))(v1229, v1085);
            __swift_storeEnumTagSinglePayload((uint64_t)v1229, 0, 1, v1234);
          }
          *(void *)((char *)v1074 + v1076[15]) = *(void *)((char *)v1075 + v1076[15]);
          *(void *)((char *)v1074 + v1076[16]) = *(void *)((char *)v1075 + v1076[16]);
          *(_OWORD *)((char *)v1074 + v1076[17]) = *(_OWORD *)((char *)v1075 + v1076[17]);
          *(void *)((char *)v1074 + v1076[18]) = *(void *)((char *)v1075 + v1076[18]);
          *(void *)((char *)v1074 + v1076[19]) = *(void *)((char *)v1075 + v1076[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1074, 0, 1, (uint64_t)v1076);
        }
        uint64_t v1087 = v1237[22];
        uint64_t v1088 = (_OWORD *)((char *)v14 + v1087);
        uint64_t v1089 = (_OWORD *)((char *)v15 + v1087);
        uint64_t v1090 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1089, 1, (uint64_t)v1090))
        {
          uint64_t v1091 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v1088, v1089, *(void *)(*(void *)(v1091 - 8) + 64));
        }
        else
        {
          long long v1092 = v1089[1];
          *uint64_t v1088 = *v1089;
          v1088[1] = v1092;
          long long v1093 = v1089[3];
          v1088[2] = v1089[2];
          v1088[3] = v1093;
          uint64_t v1094 = v1090[8];
          v1230 = (char *)v1088 + v1094;
          uint64_t v1095 = (char *)v1089 + v1094;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1089 + v1094, 1, (uint64_t)v1179))
          {
            uint64_t v1096 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1230, v1095, *(void *)(*(void *)(v1096 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, void *))(*(v1179 - 1) + 32))(v1230, v1095, v1179);
            __swift_storeEnumTagSinglePayload((uint64_t)v1230, 0, 1, (uint64_t)v1179);
          }
          *(_OWORD *)((char *)v1088 + v1090[9]) = *(_OWORD *)((char *)v1089 + v1090[9]);
          *(_OWORD *)((char *)v1088 + v1090[10]) = *(_OWORD *)((char *)v1089 + v1090[10]);
          *(_OWORD *)((char *)v1088 + v1090[11]) = *(_OWORD *)((char *)v1089 + v1090[11]);
          uint64_t v1097 = v1090[12];
          uint64_t v1231 = (char *)v1088 + v1097;
          uint64_t v1098 = (char *)v1089 + v1097;
          uint64_t v10 = v1240;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1089 + v1097, 1, v1234))
          {
            uint64_t v1099 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1231, v1098, *(void *)(*(void *)(v1099 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1234 - 8) + 32))(v1231, v1098);
            __swift_storeEnumTagSinglePayload((uint64_t)v1231, 0, 1, v1234);
          }
          uint64_t v1100 = v1090[13];
          uint64_t v1232 = (char *)v1088 + v1100;
          uint64_t v1101 = (char *)v1089 + v1100;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1089 + v1100, 1, v1234))
          {
            uint64_t v1102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1232, v1101, *(void *)(*(void *)(v1102 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1234 - 8) + 32))(v1232, v1101);
            __swift_storeEnumTagSinglePayload((uint64_t)v1232, 0, 1, v1234);
          }
          uint64_t v1103 = v1090[14];
          uint64_t v1104 = (char *)v1088 + v1103;
          uint64_t v1105 = (char *)v1089 + v1103;
          *(void *)uint64_t v1104 = *(void *)v1105;
          v1104[8] = v1105[8];
          *(_OWORD *)((char *)v1088 + v1090[15]) = *(_OWORD *)((char *)v1089 + v1090[15]);
          *(_OWORD *)((char *)v1088 + v1090[16]) = *(_OWORD *)((char *)v1089 + v1090[16]);
          *(_OWORD *)((char *)v1088 + v1090[17]) = *(_OWORD *)((char *)v1089 + v1090[17]);
          *(_OWORD *)((char *)v1088 + v1090[18]) = *(_OWORD *)((char *)v1089 + v1090[18]);
          *(_OWORD *)((char *)v1088 + v1090[19]) = *(_OWORD *)((char *)v1089 + v1090[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1088, 0, 1, (uint64_t)v1090);
        }
        uint64_t v16 = v1243;
        memcpy((char *)v14 + v1237[23], (char *)v15 + v1237[23], 0x90uLL);
        goto LABEL_527;
      case 2u:
        long long v42 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v42;
        v14[2] = v15[2];
        uint64_t v43 = (int *)type metadata accessor for CalendarEvent(0);
        uint64_t v44 = v43[7];
        uint64_t v45 = (char *)v14 + v44;
        uint64_t v46 = (char *)v15 + v44;
        uint64_t v47 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v46, 1, v47))
        {
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
          __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v47);
        }
        uint64_t v245 = v43[8];
        uint64_t v246 = (char *)v14 + v245;
        uint64_t v247 = (char *)v15 + v245;
        if (__swift_getEnumTagSinglePayload((uint64_t)v15 + v245, 1, v47))
        {
          uint64_t v248 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v246, v247, *(void *)(*(void *)(v248 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v246, v247, v47);
          __swift_storeEnumTagSinglePayload((uint64_t)v246, 0, 1, v47);
        }
        uint64_t v16 = v1243;
        *(_OWORD *)((char *)v14 + v43[9]) = *(_OWORD *)((char *)v15 + v43[9]);
        *(void *)((char *)v14 + v43[10]) = *(void *)((char *)v15 + v43[10]);
        *(void *)((char *)v14 + v43[11]) = *(void *)((char *)v15 + v43[11]);
        *(_OWORD *)((char *)v14 + v43[12]) = *(_OWORD *)((char *)v15 + v43[12]);
        uint64_t v305 = v43[13];
        uint64_t v306 = (char *)v14 + v305;
        uint64_t v307 = (char *)v15 + v305;
        long long v308 = *((_OWORD *)v307 + 1);
        *(_OWORD *)uint64_t v306 = *(_OWORD *)v307;
        *((_OWORD *)v306 + 1) = v308;
        *((void *)v306 + 4) = *((void *)v307 + 4);
        goto LABEL_527;
      case 3u:
        uint64_t v1241 = v10;
        long long v49 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v49;
        v14[2] = v15[2];
        *((void *)v14 + 6) = *((void *)v15 + 6);
        *(_OWORD *)((char *)v14 + 56) = *(_OWORD *)((char *)v15 + 56);
        *(_OWORD *)((char *)v14 + 72) = *(_OWORD *)((char *)v15 + 72);
        uint64_t v1238 = (int *)type metadata accessor for Photo(0);
        uint64_t v50 = v1238[11];
        uint64_t v51 = (char *)v14 + v50;
        uint64_t v52 = (char *)v15 + v50;
        uint64_t v53 = type metadata accessor for Date();
        uint64_t v1235 = v53;
        if (__swift_getEnumTagSinglePayload((uint64_t)v52, 1, v53))
        {
          uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 32))(v51, v52, v53);
          __swift_storeEnumTagSinglePayload((uint64_t)v51, 0, 1, v53);
        }
        *(void *)((char *)v14 + v1238[12]) = *(void *)((char *)v15 + v1238[12]);
        *(void *)((char *)v14 + v1238[13]) = *(void *)((char *)v15 + v1238[13]);
        *(void *)((char *)v14 + v1238[14]) = *(void *)((char *)v15 + v1238[14]);
        *(void *)((char *)v14 + v1238[15]) = *(void *)((char *)v15 + v1238[15]);
        *(_OWORD *)((char *)v14 + v1238[16]) = *(_OWORD *)((char *)v15 + v1238[16]);
        uint64_t v249 = v1238[17];
        uint64_t v250 = (_OWORD *)((char *)v14 + v249);
        uint64_t v251 = (_OWORD *)((char *)v15 + v249);
        uint64_t v252 = type metadata accessor for PartialExtractedAttributes(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v251, 1, v252))
        {
          uint64_t v253 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
          memcpy(v250, v251, *(void *)(*(void *)(v253 - 8) + 64));
          uint64_t v10 = v1241;
        }
        else
        {
          *uint64_t v250 = *v251;
          uint64_t v1200 = (int *)v252;
          v1207 = (char *)v251;
          uint64_t v309 = *(int *)(v252 + 20);
          uint64_t v310 = (_OWORD *)((char *)v250 + v309);
          uint64_t v311 = (_OWORD *)((char *)v251 + v309);
          uint64_t v312 = type metadata accessor for RentalCarReservation(0);
          __dstb = (char *)v250;
          if (__swift_getEnumTagSinglePayload((uint64_t)v311, 1, v312))
          {
            uint64_t v313 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RentalCarReservation?);
            memcpy(v310, v311, *(void *)(*(void *)(v313 - 8) + 64));
            uint64_t v315 = v1200;
            uint64_t v314 = v1207;
          }
          else
          {
            long long v368 = v311[1];
            _OWORD *v310 = *v311;
            v310[1] = v368;
            long long v369 = v311[3];
            v310[2] = v311[2];
            v310[3] = v369;
            long long v370 = v311[5];
            v310[4] = v311[4];
            v310[5] = v370;
            long long v371 = v311[7];
            v310[6] = v311[6];
            v310[7] = v371;
            *((unsigned char *)v310 + 128) = *((unsigned char *)v311 + 128);
            *(_WORD *)((char *)v310 + 129) = *(_WORD *)((char *)v311 + 129);
            *((void *)v310 + 17) = *((void *)v311 + 17);
            long long v372 = v311[10];
            v310[9] = v311[9];
            v310[10] = v372;
            long long v373 = v311[12];
            v310[11] = v311[11];
            v310[12] = v373;
            long long v374 = v311[14];
            v310[13] = v311[13];
            v310[14] = v374;
            v310[15] = v311[15];
            *((void *)v310 + 32) = *((void *)v311 + 32);
            *(_OWORD *)((char *)v310 + 264) = *(_OWORD *)((char *)v311 + 264);
            *(_OWORD *)((char *)v310 + 280) = *(_OWORD *)((char *)v311 + 280);
            *(_OWORD *)((char *)v310 + 296) = *(_OWORD *)((char *)v311 + 296);
            *(_OWORD *)((char *)v310 + 312) = *(_OWORD *)((char *)v311 + 312);
            *(_OWORD *)((char *)v310 + 328) = *(_OWORD *)((char *)v311 + 328);
            *(_OWORD *)((char *)v310 + 344) = *(_OWORD *)((char *)v311 + 344);
            *(_OWORD *)((char *)v310 + 360) = *(_OWORD *)((char *)v311 + 360);
            *((unsigned char *)v310 + 384) = *((unsigned char *)v311 + 384);
            *((void *)v310 + 47) = *((void *)v311 + 47);
            *(_OWORD *)((char *)v310 + 392) = *(_OWORD *)((char *)v311 + 392);
            *(_OWORD *)((char *)v310 + 408) = *(_OWORD *)((char *)v311 + 408);
            uint64_t v375 = *(int *)(v312 + 140);
            uint64_t v1180 = (char *)v310 + v375;
            uint64_t v376 = (char *)v311 + v375;
            if (__swift_getEnumTagSinglePayload((uint64_t)v311 + v375, 1, v1235))
            {
              uint64_t v377 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1180, v376, *(void *)(*(void *)(v377 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v1180, v376, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v1180, 0, 1, v1235);
            }
            uint64_t v1181 = (void *)v312;
            uint64_t v391 = *(int *)(v312 + 144);
            uint64_t v392 = (char *)v310 + v391;
            uint64_t v393 = (char *)v311 + v391;
            if (__swift_getEnumTagSinglePayload((uint64_t)v311 + v391, 1, v1235))
            {
              uint64_t v394 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v392, v393, *(void *)(*(void *)(v394 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v392, v393, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v392, 0, 1, v1235);
            }
            uint64_t v315 = v1200;
            uint64_t v314 = v1207;
            __swift_storeEnumTagSinglePayload((uint64_t)v310, 0, 1, (uint64_t)v1181);
          }
          uint64_t v414 = v315[6];
          uint64_t v415 = &__dstb[v414];
          uint64_t v416 = &v314[v414];
          uint64_t v417 = type metadata accessor for TicketedTransportation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v416, 1, v417))
          {
            uint64_t v418 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TicketedTransportation?);
            memcpy(v415, v416, *(void *)(*(void *)(v418 - 8) + 64));
            uint64_t v419 = v1207;
          }
          else
          {
            long long v420 = *((_OWORD *)v416 + 1);
            *(_OWORD *)uint64_t v415 = *(_OWORD *)v416;
            *((_OWORD *)v415 + 1) = v420;
            long long v421 = *((_OWORD *)v416 + 3);
            *((_OWORD *)v415 + 2) = *((_OWORD *)v416 + 2);
            *((_OWORD *)v415 + 3) = v421;
            long long v422 = *((_OWORD *)v416 + 5);
            *((_OWORD *)v415 + 4) = *((_OWORD *)v416 + 4);
            *((_OWORD *)v415 + 5) = v422;
            long long v423 = *((_OWORD *)v416 + 7);
            *((_OWORD *)v415 + 6) = *((_OWORD *)v416 + 6);
            *((_OWORD *)v415 + 7) = v423;
            v415[128] = v416[128];
            *(_WORD *)(v415 + 129) = *(_WORD *)(v416 + 129);
            *((void *)v415 + 17) = *((void *)v416 + 17);
            long long v424 = *((_OWORD *)v416 + 10);
            *((_OWORD *)v415 + 9) = *((_OWORD *)v416 + 9);
            *((_OWORD *)v415 + 10) = v424;
            long long v425 = *((_OWORD *)v416 + 12);
            *((_OWORD *)v415 + 11) = *((_OWORD *)v416 + 11);
            *((_OWORD *)v415 + 12) = v425;
            *((void *)v415 + 26) = *((void *)v416 + 26);
            *(_OWORD *)(v415 + 216) = *(_OWORD *)(v416 + 216);
            *(_OWORD *)(v415 + 232) = *(_OWORD *)(v416 + 232);
            *(_OWORD *)(v415 + 248) = *(_OWORD *)(v416 + 248);
            *(_OWORD *)(v415 + 264) = *(_OWORD *)(v416 + 264);
            v415[296] = v416[296];
            uint64_t v426 = *((void *)v416 + 36);
            *((void *)v415 + 35) = *((void *)v416 + 35);
            *((void *)v415 + 36) = v426;
            uint64_t v427 = *(int *)(v417 + 112);
            uint64_t v1160 = &v415[v427];
            v428 = &v416[v427];
            uint64_t v1182 = (void *)v417;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v416[v427], 1, v1235))
            {
              uint64_t v429 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1160, v428, *(void *)(*(void *)(v429 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v1160, v428, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v1160, 0, 1, v1235);
            }
            uint64_t v453 = *(int *)(v417 + 116);
            uint64_t v454 = &v415[v453];
            v455 = &v416[v453];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v416[v453], 1, v1235))
            {
              uint64_t v456 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v454, v455, *(void *)(*(void *)(v456 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v454, v455, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v454, 0, 1, v1235);
            }
            uint64_t v315 = v1200;
            uint64_t v419 = v1207;
            __swift_storeEnumTagSinglePayload((uint64_t)v415, 0, 1, (uint64_t)v1182);
          }
          uint64_t v477 = v315[7];
          uint64_t v478 = &__dstb[v477];
          long long v479 = &v419[v477];
          long long v480 = (int *)type metadata accessor for TicketedShow(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v479, 1, (uint64_t)v480))
          {
            uint64_t v481 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TicketedShow?);
            memcpy(v478, v479, *(void *)(*(void *)(v481 - 8) + 64));
            uint64_t v482 = v1207;
            v483 = __dstb;
          }
          else
          {
            long long v484 = *((_OWORD *)v479 + 1);
            *(_OWORD *)uint64_t v478 = *(_OWORD *)v479;
            *((_OWORD *)v478 + 1) = v484;
            long long v485 = *((_OWORD *)v479 + 3);
            *((_OWORD *)v478 + 2) = *((_OWORD *)v479 + 2);
            *((_OWORD *)v478 + 3) = v485;
            long long v486 = *((_OWORD *)v479 + 5);
            *((_OWORD *)v478 + 4) = *((_OWORD *)v479 + 4);
            *((_OWORD *)v478 + 5) = v486;
            long long v487 = *((_OWORD *)v479 + 7);
            *((_OWORD *)v478 + 6) = *((_OWORD *)v479 + 6);
            *((_OWORD *)v478 + 7) = v487;
            v478[128] = v479[128];
            *(_WORD *)(v478 + 129) = *(_WORD *)(v479 + 129);
            *((void *)v478 + 17) = *((void *)v479 + 17);
            long long v488 = *((_OWORD *)v479 + 10);
            *((_OWORD *)v478 + 9) = *((_OWORD *)v479 + 9);
            *((_OWORD *)v478 + 10) = v488;
            long long v489 = *((_OWORD *)v479 + 12);
            *((_OWORD *)v478 + 11) = *((_OWORD *)v479 + 11);
            *((_OWORD *)v478 + 12) = v489;
            long long v490 = *((_OWORD *)v479 + 14);
            *((_OWORD *)v478 + 13) = *((_OWORD *)v479 + 13);
            *((_OWORD *)v478 + 14) = v490;
            *((void *)v478 + 30) = *((void *)v479 + 30);
            *(_OWORD *)(v478 + 248) = *(_OWORD *)(v479 + 248);
            *(_OWORD *)(v478 + 264) = *(_OWORD *)(v479 + 264);
            v478[296] = v479[296];
            uint64_t v491 = *((void *)v479 + 36);
            *((void *)v478 + 35) = *((void *)v479 + 35);
            *((void *)v478 + 36) = v491;
            *((_OWORD *)v478 + 19) = *((_OWORD *)v479 + 19);
            uint64_t v492 = v480[29];
            uint64_t v1162 = &v478[v492];
            long long v493 = &v479[v492];
            uint64_t v494 = type metadata accessor for URL();
            uint64_t v1183 = v480;
            if (__swift_getEnumTagSinglePayload((uint64_t)v493, 1, v494))
            {
              uint64_t v495 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1162, v493, *(void *)(*(void *)(v495 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v494 - 8) + 32))(v1162, v493, v494);
              __swift_storeEnumTagSinglePayload((uint64_t)v1162, 0, 1, v494);
            }
            *(_OWORD *)&v478[v480[30]] = *(_OWORD *)&v479[v480[30]];
            uint64_t v520 = v480[31];
            uint64_t v521 = &v478[v520];
            v522 = &v479[v520];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v479[v520], 1, v1235))
            {
              uint64_t v523 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v521, v522, *(void *)(*(void *)(v523 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v521, v522, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v521, 0, 1, v1235);
            }
            uint64_t v530 = v1183[32];
            uint64_t v531 = &v478[v530];
            uint64_t v532 = &v479[v530];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v479[v530], 1, v1235))
            {
              uint64_t v533 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v531, v532, *(void *)(*(void *)(v533 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v531, v532, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v531, 0, 1, v1235);
            }
            uint64_t v315 = v1200;
            uint64_t v482 = v1207;
            __swift_storeEnumTagSinglePayload((uint64_t)v478, 0, 1, (uint64_t)v1183);
            v483 = __dstb;
          }
          uint64_t v554 = v315[8];
          uint64_t v555 = &v483[v554];
          long long v556 = &v482[v554];
          uint64_t v557 = type metadata accessor for Appointment(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v556, 1, v557))
          {
            uint64_t v558 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Appointment?);
            memcpy(v555, v556, *(void *)(*(void *)(v558 - 8) + 64));
            uint64_t v559 = v1207;
          }
          else
          {
            long long v560 = *((_OWORD *)v556 + 1);
            *(_OWORD *)uint64_t v555 = *(_OWORD *)v556;
            *((_OWORD *)v555 + 1) = v560;
            long long v561 = *((_OWORD *)v556 + 3);
            *((_OWORD *)v555 + 2) = *((_OWORD *)v556 + 2);
            *((_OWORD *)v555 + 3) = v561;
            long long v562 = *((_OWORD *)v556 + 5);
            *((_OWORD *)v555 + 4) = *((_OWORD *)v556 + 4);
            *((_OWORD *)v555 + 5) = v562;
            long long v563 = *((_OWORD *)v556 + 7);
            *((_OWORD *)v555 + 6) = *((_OWORD *)v556 + 6);
            *((_OWORD *)v555 + 7) = v563;
            v555[128] = v556[128];
            *(_WORD *)(v555 + 129) = *(_WORD *)(v556 + 129);
            *((void *)v555 + 17) = *((void *)v556 + 17);
            long long v564 = *((_OWORD *)v556 + 10);
            *((_OWORD *)v555 + 9) = *((_OWORD *)v556 + 9);
            *((_OWORD *)v555 + 10) = v564;
            long long v565 = *((_OWORD *)v556 + 12);
            *((_OWORD *)v555 + 11) = *((_OWORD *)v556 + 11);
            *((_OWORD *)v555 + 12) = v565;
            long long v566 = *((_OWORD *)v556 + 14);
            *((_OWORD *)v555 + 13) = *((_OWORD *)v556 + 13);
            *((_OWORD *)v555 + 14) = v566;
            long long v567 = *((_OWORD *)v556 + 16);
            *((_OWORD *)v555 + 15) = *((_OWORD *)v556 + 15);
            *((_OWORD *)v555 + 16) = v567;
            v555[280] = v556[280];
            *((void *)v555 + 34) = *((void *)v556 + 34);
            *((_OWORD *)v555 + 18) = *((_OWORD *)v556 + 18);
            uint64_t v568 = *(int *)(v557 + 108);
            uint64_t v1164 = &v555[v568];
            uint64_t v569 = &v556[v568];
            uint64_t v1184 = (void *)v557;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v556[v568], 1, v1235))
            {
              uint64_t v570 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1164, v569, *(void *)(*(void *)(v570 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v1164, v569, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v1164, 0, 1, v1235);
            }
            uint64_t v595 = *(int *)(v557 + 112);
            uint64_t v596 = &v555[v595];
            v597 = &v556[v595];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v556[v595], 1, v1235))
            {
              uint64_t v598 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v596, v597, *(void *)(*(void *)(v598 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v596, v597, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v596, 0, 1, v1235);
            }
            uint64_t v315 = v1200;
            uint64_t v559 = v1207;
            __swift_storeEnumTagSinglePayload((uint64_t)v555, 0, 1, (uint64_t)v1184);
          }
          uint64_t v618 = v315[9];
          uint64_t v619 = &__dstb[v618];
          uint64_t v620 = &v559[v618];
          uint64_t v621 = (int *)type metadata accessor for Party(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v620, 1, (uint64_t)v621))
          {
            uint64_t v622 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
            memcpy(v619, v620, *(void *)(*(void *)(v622 - 8) + 64));
            uint64_t v623 = v1207;
          }
          else
          {
            long long v624 = *((_OWORD *)v620 + 1);
            *(_OWORD *)uint64_t v619 = *(_OWORD *)v620;
            *((_OWORD *)v619 + 1) = v624;
            long long v625 = *((_OWORD *)v620 + 3);
            *((_OWORD *)v619 + 2) = *((_OWORD *)v620 + 2);
            *((_OWORD *)v619 + 3) = v625;
            long long v626 = *((_OWORD *)v620 + 5);
            *((_OWORD *)v619 + 4) = *((_OWORD *)v620 + 4);
            *((_OWORD *)v619 + 5) = v626;
            long long v627 = *((_OWORD *)v620 + 7);
            *((_OWORD *)v619 + 6) = *((_OWORD *)v620 + 6);
            *((_OWORD *)v619 + 7) = v627;
            v619[128] = v620[128];
            *(_WORD *)(v619 + 129) = *(_WORD *)(v620 + 129);
            *((void *)v619 + 17) = *((void *)v620 + 17);
            long long v628 = *((_OWORD *)v620 + 10);
            *((_OWORD *)v619 + 9) = *((_OWORD *)v620 + 9);
            *((_OWORD *)v619 + 10) = v628;
            long long v629 = *((_OWORD *)v620 + 12);
            *((_OWORD *)v619 + 11) = *((_OWORD *)v620 + 11);
            *((_OWORD *)v619 + 12) = v629;
            long long v630 = *((_OWORD *)v620 + 14);
            *((_OWORD *)v619 + 13) = *((_OWORD *)v620 + 13);
            *((_OWORD *)v619 + 14) = v630;
            *((_OWORD *)v619 + 15) = *((_OWORD *)v620 + 15);
            uint64_t v631 = v621[24];
            uint64_t v1166 = &v619[v631];
            uint64_t v632 = &v620[v631];
            uint64_t v1185 = v621;
            if (__swift_getEnumTagSinglePayload((uint64_t)&v620[v631], 1, v1235))
            {
              uint64_t v633 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1166, v632, *(void *)(*(void *)(v633 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v1166, v632, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v1166, 0, 1, v1235);
            }
            uint64_t v656 = v621[25];
            uint64_t v1168 = &v619[v656];
            uint64_t v657 = &v620[v656];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v620[v656], 1, v1235))
            {
              uint64_t v658 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1168, v657, *(void *)(*(void *)(v658 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v1168, v657, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v1168, 0, 1, v1235);
            }
            uint64_t v315 = v1200;
            uint64_t v667 = v621[26];
            v668 = &v619[v667];
            uint64_t v669 = &v620[v667];
            uint64_t v670 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v669, 1, v670))
            {
              uint64_t v671 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v668, v669, *(void *)(*(void *)(v671 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v670 - 8) + 32))(v668, v669, v670);
              __swift_storeEnumTagSinglePayload((uint64_t)v668, 0, 1, v670);
            }
            uint64_t v623 = v1207;
            __swift_storeEnumTagSinglePayload((uint64_t)v619, 0, 1, (uint64_t)v1185);
          }
          uint64_t v690 = v315[10];
          v691 = &__dstb[v690];
          uint64_t v692 = &v623[v690];
          uint64_t v693 = (int *)type metadata accessor for Trip(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v692, 1, (uint64_t)v693))
          {
            uint64_t v694 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Trip?);
            memcpy(v691, v692, *(void *)(*(void *)(v694 - 8) + 64));
            uint64_t v695 = __dstb;
            uint64_t v697 = v1200;
            uint64_t v696 = v1207;
          }
          else
          {
            long long v698 = *((_OWORD *)v692 + 1);
            *(_OWORD *)v691 = *(_OWORD *)v692;
            *((_OWORD *)v691 + 1) = v698;
            long long v699 = *((_OWORD *)v692 + 3);
            *((_OWORD *)v691 + 2) = *((_OWORD *)v692 + 2);
            *((_OWORD *)v691 + 3) = v699;
            long long v700 = *((_OWORD *)v692 + 5);
            *((_OWORD *)v691 + 4) = *((_OWORD *)v692 + 4);
            *((_OWORD *)v691 + 5) = v700;
            long long v701 = *((_OWORD *)v692 + 7);
            *((_OWORD *)v691 + 6) = *((_OWORD *)v692 + 6);
            *((_OWORD *)v691 + 7) = v701;
            v691[128] = v692[128];
            *(_WORD *)(v691 + 129) = *(_WORD *)(v692 + 129);
            *((void *)v691 + 17) = *((void *)v692 + 17);
            long long v702 = *((_OWORD *)v692 + 10);
            *((_OWORD *)v691 + 9) = *((_OWORD *)v692 + 9);
            *((_OWORD *)v691 + 10) = v702;
            long long v703 = *((_OWORD *)v692 + 12);
            *((_OWORD *)v691 + 11) = *((_OWORD *)v692 + 11);
            *((_OWORD *)v691 + 12) = v703;
            *((_OWORD *)v691 + 13) = *((_OWORD *)v692 + 13);
            uint64_t v704 = v693[22];
            uint64_t v1186 = &v691[v704];
            v705 = &v692[v704];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v692[v704], 1, v1235))
            {
              uint64_t v706 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1186, v705, *(void *)(*(void *)(v706 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v1186, v705, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v1186, 0, 1, v1235);
            }
            uint64_t v727 = v693[23];
            uint64_t v1187 = &v691[v727];
            uint64_t v728 = &v692[v727];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v692[v727], 1, v1235))
            {
              uint64_t v729 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1187, v728, *(void *)(*(void *)(v729 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v1187, v728, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v1187, 0, 1, v1235);
            }
            uint64_t v697 = v1200;
            uint64_t v741 = v693[24];
            uint64_t v742 = &v691[v741];
            uint64_t v743 = &v692[v741];
            *(void *)uint64_t v742 = *(void *)v743;
            v742[8] = v743[8];
            uint64_t v1188 = v693;
            uint64_t v744 = v693[25];
            uint64_t v745 = &v691[v744];
            uint64_t v746 = &v692[v744];
            uint64_t v747 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v746, 1, v747))
            {
              uint64_t v748 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v745, v746, *(void *)(*(void *)(v748 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v747 - 8) + 32))(v745, v746, v747);
              __swift_storeEnumTagSinglePayload((uint64_t)v745, 0, 1, v747);
            }
            uint64_t v696 = v1207;
            __swift_storeEnumTagSinglePayload((uint64_t)v691, 0, 1, (uint64_t)v1188);
            uint64_t v695 = __dstb;
          }
          uint64_t v769 = v697[11];
          uint64_t v770 = v695;
          uint64_t v771 = &v695[v769];
          uint64_t v772 = &v696[v769];
          uint64_t v773 = (int *)type metadata accessor for FlightReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v772, 1, (uint64_t)v773))
          {
            uint64_t v774 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
            memcpy(v771, v772, *(void *)(*(void *)(v774 - 8) + 64));
            uint64_t v775 = v770;
          }
          else
          {
            long long v776 = *((_OWORD *)v772 + 1);
            *(_OWORD *)uint64_t v771 = *(_OWORD *)v772;
            *((_OWORD *)v771 + 1) = v776;
            long long v777 = *((_OWORD *)v772 + 3);
            *((_OWORD *)v771 + 2) = *((_OWORD *)v772 + 2);
            *((_OWORD *)v771 + 3) = v777;
            long long v778 = *((_OWORD *)v772 + 5);
            *((_OWORD *)v771 + 4) = *((_OWORD *)v772 + 4);
            *((_OWORD *)v771 + 5) = v778;
            v771[96] = v772[96];
            *(_OWORD *)(v771 + 104) = *(_OWORD *)(v772 + 104);
            uint64_t v779 = v773[13];
            uint64_t v1189 = &v771[v779];
            uint64_t v780 = &v772[v779];
            uint64_t v781 = type metadata accessor for URL();
            if (__swift_getEnumTagSinglePayload((uint64_t)v780, 1, v781))
            {
              uint64_t v782 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1189, v780, *(void *)(*(void *)(v782 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v781 - 8) + 32))(v1189, v780, v781);
              __swift_storeEnumTagSinglePayload((uint64_t)v1189, 0, 1, v781);
            }
            uint64_t v796 = v773[14];
            uint64_t v1190 = &v771[v796];
            uint64_t v797 = &v772[v796];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v772[v796], 1, v781))
            {
              uint64_t v798 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
              memcpy(v1190, v797, *(void *)(*(void *)(v798 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v781 - 8) + 32))(v1190, v797, v781);
              __swift_storeEnumTagSinglePayload((uint64_t)v1190, 0, 1, v781);
            }
            *(_OWORD *)&v771[v773[15]] = *(_OWORD *)&v772[v773[15]];
            *(_OWORD *)&v771[v773[16]] = *(_OWORD *)&v772[v773[16]];
            *(_OWORD *)&v771[v773[17]] = *(_OWORD *)&v772[v773[17]];
            uint64_t v806 = v773[18];
            __srcx = &v772[v806];
            uint64_t v1174 = &v771[v806];
            uint64_t v807 = type metadata accessor for DateComponents();
            uint64_t v1191 = *(void (**)(char *, char *, uint64_t))(*(void *)(v807 - 8) + 32);
            v1191(v1174, __srcx, v807);
            v1191(&v771[v773[19]], &v772[v773[19]], v807);
            *(_OWORD *)&v771[v773[20]] = *(_OWORD *)&v772[v773[20]];
            *(_OWORD *)&v771[v773[21]] = *(_OWORD *)&v772[v773[21]];
            *(_OWORD *)&v771[v773[22]] = *(_OWORD *)&v772[v773[22]];
            *(_OWORD *)&v771[v773[23]] = *(_OWORD *)&v772[v773[23]];
            *(_OWORD *)&v771[v773[24]] = *(_OWORD *)&v772[v773[24]];
            *(_OWORD *)&v771[v773[25]] = *(_OWORD *)&v772[v773[25]];
            *(_OWORD *)&v771[v773[26]] = *(_OWORD *)&v772[v773[26]];
            *(_OWORD *)&v771[v773[27]] = *(_OWORD *)&v772[v773[27]];
            *(_OWORD *)&v771[v773[28]] = *(_OWORD *)&v772[v773[28]];
            *(_OWORD *)&v771[v773[29]] = *(_OWORD *)&v772[v773[29]];
            *(_OWORD *)&v771[v773[30]] = *(_OWORD *)&v772[v773[30]];
            *(_OWORD *)&v771[v773[31]] = *(_OWORD *)&v772[v773[31]];
            *(_OWORD *)&v771[v773[32]] = *(_OWORD *)&v772[v773[32]];
            *(void *)&v771[v773[33]] = *(void *)&v772[v773[33]];
            *(void *)&v771[v773[34]] = *(void *)&v772[v773[34]];
            *(_OWORD *)&v771[v773[35]] = *(_OWORD *)&v772[v773[35]];
            *(_OWORD *)&v771[v773[36]] = *(_OWORD *)&v772[v773[36]];
            *(_OWORD *)&v771[v773[37]] = *(_OWORD *)&v772[v773[37]];
            uint64_t v808 = v773[38];
            uint64_t v1192 = &v771[v808];
            uint64_t v809 = &v772[v808];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v772[v808], 1, v1235))
            {
              uint64_t v810 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
              memcpy(v1192, v809, *(void *)(*(void *)(v810 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v1235 - 8) + 32))(v1192, v809, v1235);
              __swift_storeEnumTagSinglePayload((uint64_t)v1192, 0, 1, v1235);
            }
            *(_OWORD *)&v771[v773[39]] = *(_OWORD *)&v772[v773[39]];
            *(_OWORD *)&v771[v773[40]] = *(_OWORD *)&v772[v773[40]];
            uint64_t v836 = v773[41];
            uint64_t v837 = &v771[v836];
            uint64_t v838 = &v772[v836];
            *(void *)uint64_t v837 = *(void *)v838;
            v837[8] = v838[8];
            *(_OWORD *)&v771[v773[42]] = *(_OWORD *)&v772[v773[42]];
            uint64_t v839 = v773[43];
            uint64_t v840 = &v771[v839];
            uint64_t v841 = &v772[v839];
            *(_OWORD *)uint64_t v840 = *(_OWORD *)v841;
            *(void *)(v840 + 13) = *(void *)(v841 + 13);
            *(_OWORD *)&v771[v773[44]] = *(_OWORD *)&v772[v773[44]];
            *(_OWORD *)&v771[v773[45]] = *(_OWORD *)&v772[v773[45]];
            *(_OWORD *)&v771[v773[46]] = *(_OWORD *)&v772[v773[46]];
            *(_OWORD *)&v771[v773[47]] = *(_OWORD *)&v772[v773[47]];
            __swift_storeEnumTagSinglePayload((uint64_t)v771, 0, 1, (uint64_t)v773);
            uint64_t v775 = __dstb;
          }
          uint64_t v842 = v1200[12];
          uint64_t v843 = v775;
          uint64_t v844 = &v775[v842];
          uint64_t v845 = &v1207[v842];
          uint64_t v846 = (int *)type metadata accessor for HotelReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v845, 1, (uint64_t)v846))
          {
            uint64_t v847 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
            memcpy(v844, v845, *(void *)(*(void *)(v847 - 8) + 64));
            uint64_t v848 = v843;
          }
          else
          {
            long long v849 = *((_OWORD *)v845 + 1);
            *(_OWORD *)uint64_t v844 = *(_OWORD *)v845;
            *((_OWORD *)v844 + 1) = v849;
            long long v850 = *((_OWORD *)v845 + 3);
            *((_OWORD *)v844 + 2) = *((_OWORD *)v845 + 2);
            *((_OWORD *)v844 + 3) = v850;
            long long v851 = *((_OWORD *)v845 + 5);
            *((_OWORD *)v844 + 4) = *((_OWORD *)v845 + 4);
            *((_OWORD *)v844 + 5) = v851;
            v844[96] = v845[96];
            *(_OWORD *)(v844 + 104) = *(_OWORD *)(v845 + 104);
            *(_OWORD *)(v844 + 120) = *(_OWORD *)(v845 + 120);
            uint64_t v852 = v846[14];
            uint64_t v1193 = &v844[v852];
            uint64_t v853 = &v845[v852];
            uint64_t v854 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v853, 1, v854))
            {
              uint64_t v855 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1193, v853, *(void *)(*(void *)(v855 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v854 - 8) + 32))(v1193, v853, v854);
              __swift_storeEnumTagSinglePayload((uint64_t)v1193, 0, 1, v854);
            }
            uint64_t v875 = v846[15];
            uint64_t v1194 = &v844[v875];
            uint64_t v876 = &v845[v875];
            if (__swift_getEnumTagSinglePayload((uint64_t)&v845[v875], 1, v854))
            {
              uint64_t v877 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1194, v876, *(void *)(*(void *)(v877 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v854 - 8) + 32))(v1194, v876, v854);
              __swift_storeEnumTagSinglePayload((uint64_t)v1194, 0, 1, v854);
            }
            *(_OWORD *)&v844[v846[16]] = *(_OWORD *)&v845[v846[16]];
            *(_OWORD *)&v844[v846[17]] = *(_OWORD *)&v845[v846[17]];
            *(_OWORD *)&v844[v846[18]] = *(_OWORD *)&v845[v846[18]];
            *(_OWORD *)&v844[v846[19]] = *(_OWORD *)&v845[v846[19]];
            *(_OWORD *)&v844[v846[20]] = *(_OWORD *)&v845[v846[20]];
            *(void *)&v844[v846[21]] = *(void *)&v845[v846[21]];
            *(void *)&v844[v846[22]] = *(void *)&v845[v846[22]];
            uint64_t v904 = v846[23];
            uint64_t v905 = &v844[v904];
            uint64_t v906 = &v845[v904];
            v905[8] = v906[8];
            *(void *)uint64_t v905 = *(void *)v906;
            uint64_t v907 = v846[24];
            uint64_t v908 = &v844[v907];
            uint64_t v909 = &v845[v907];
            v908[8] = v909[8];
            *(void *)uint64_t v908 = *(void *)v909;
            *(_OWORD *)&v844[v846[25]] = *(_OWORD *)&v845[v846[25]];
            *(_OWORD *)&v844[v846[26]] = *(_OWORD *)&v845[v846[26]];
            *(_OWORD *)&v844[v846[27]] = *(_OWORD *)&v845[v846[27]];
            *(_OWORD *)&v844[v846[28]] = *(_OWORD *)&v845[v846[28]];
            uint64_t v910 = v846[29];
            uint64_t v911 = &v844[v910];
            uint64_t v912 = &v845[v910];
            *(void *)uint64_t v911 = *(void *)v912;
            v911[8] = v912[8];
            __swift_storeEnumTagSinglePayload((uint64_t)v844, 0, 1, (uint64_t)v846);
            uint64_t v848 = __dstb;
          }
          uint64_t v913 = v1200[13];
          uint64_t v914 = (uint64_t)v848;
          uint64_t v915 = &v848[v913];
          long long v916 = &v1207[v913];
          long long v917 = (int *)type metadata accessor for RestaurantReservation(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v916, 1, (uint64_t)v917))
          {
            uint64_t v918 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
            memcpy(v915, v916, *(void *)(*(void *)(v918 - 8) + 64));
            uint64_t v919 = v914;
            uint64_t v10 = v1241;
          }
          else
          {
            long long v920 = *((_OWORD *)v916 + 1);
            *(_OWORD *)uint64_t v915 = *(_OWORD *)v916;
            *((_OWORD *)v915 + 1) = v920;
            long long v921 = *((_OWORD *)v916 + 3);
            *((_OWORD *)v915 + 2) = *((_OWORD *)v916 + 2);
            *((_OWORD *)v915 + 3) = v921;
            long long v922 = *((_OWORD *)v916 + 5);
            *((_OWORD *)v915 + 4) = *((_OWORD *)v916 + 4);
            *((_OWORD *)v915 + 5) = v922;
            v915[96] = v916[96];
            *(_OWORD *)(v915 + 104) = *(_OWORD *)(v916 + 104);
            *(_OWORD *)(v915 + 120) = *(_OWORD *)(v916 + 120);
            uint64_t v923 = v917[14];
            uint64_t v1195 = &v915[v923];
            uint64_t v924 = &v916[v923];
            uint64_t v925 = type metadata accessor for DateComponents();
            if (__swift_getEnumTagSinglePayload((uint64_t)v924, 1, v925))
            {
              uint64_t v926 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
              memcpy(v1195, v924, *(void *)(*(void *)(v926 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v925 - 8) + 32))(v1195, v924, v925);
              __swift_storeEnumTagSinglePayload((uint64_t)v1195, 0, 1, v925);
            }
            uint64_t v10 = v1241;
            *(_OWORD *)&v915[v917[15]] = *(_OWORD *)&v916[v917[15]];
            *(_OWORD *)&v915[v917[16]] = *(_OWORD *)&v916[v917[16]];
            *(_OWORD *)&v915[v917[17]] = *(_OWORD *)&v916[v917[17]];
            *(_OWORD *)&v915[v917[18]] = *(_OWORD *)&v916[v917[18]];
            *(_OWORD *)&v915[v917[19]] = *(_OWORD *)&v916[v917[19]];
            *(void *)&v915[v917[20]] = *(void *)&v916[v917[20]];
            *(_OWORD *)&v915[v917[21]] = *(_OWORD *)&v916[v917[21]];
            *(_OWORD *)&v915[v917[22]] = *(_OWORD *)&v916[v917[22]];
            *(_OWORD *)&v915[v917[23]] = *(_OWORD *)&v916[v917[23]];
            __swift_storeEnumTagSinglePayload((uint64_t)v915, 0, 1, (uint64_t)v917);
            uint64_t v919 = (uint64_t)__dstb;
          }
          __swift_storeEnumTagSinglePayload(v919, 0, 1, (uint64_t)v1200);
        }
        uint64_t v1003 = v1238[18];
        uint64_t v1004 = (_OWORD *)((char *)v14 + v1003);
        uint64_t v1005 = (_OWORD *)((char *)v15 + v1003);
        uint64_t v1006 = (int *)type metadata accessor for PreExtractedCard(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1005, 1, (uint64_t)v1006))
        {
          uint64_t v1007 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
          memcpy(v1004, v1005, *(void *)(*(void *)(v1007 - 8) + 64));
        }
        else
        {
          long long v1008 = v1005[1];
          *uint64_t v1004 = *v1005;
          v1004[1] = v1008;
          long long v1009 = v1005[3];
          v1004[2] = v1005[2];
          v1004[3] = v1009;
          long long v1010 = v1005[5];
          v1004[4] = v1005[4];
          v1004[5] = v1010;
          uint64_t v1011 = v1006[10];
          uint64_t v1217 = (char *)v1004 + v1011;
          uint64_t v1012 = (char *)v1005 + v1011;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1005 + v1011, 1, v1235))
          {
            uint64_t v1013 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1217, v1012, *(void *)(*(void *)(v1013 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1235 - 8) + 32))(v1217, v1012);
            __swift_storeEnumTagSinglePayload((uint64_t)v1217, 0, 1, v1235);
          }
          uint64_t v1014 = v1006[11];
          uint64_t v1218 = (char *)v1004 + v1014;
          uint64_t v1015 = (char *)v1005 + v1014;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1005 + v1014, 1, v1235))
          {
            uint64_t v1016 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1218, v1015, *(void *)(*(void *)(v1016 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1235 - 8) + 32))(v1218, v1015);
            __swift_storeEnumTagSinglePayload((uint64_t)v1218, 0, 1, v1235);
          }
          *(_OWORD *)((char *)v1004 + v1006[12]) = *(_OWORD *)((char *)v1005 + v1006[12]);
          *(_OWORD *)((char *)v1004 + v1006[13]) = *(_OWORD *)((char *)v1005 + v1006[13]);
          *(_OWORD *)((char *)v1004 + v1006[14]) = *(_OWORD *)((char *)v1005 + v1006[14]);
          uint64_t v1017 = v1006[15];
          uint64_t v1219 = (char *)v1004 + v1017;
          uint64_t v1018 = (char *)v1005 + v1017;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1005 + v1017, 1, v1235))
          {
            uint64_t v1019 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1219, v1018, *(void *)(*(void *)(v1019 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1235 - 8) + 32))(v1219, v1018);
            __swift_storeEnumTagSinglePayload((uint64_t)v1219, 0, 1, v1235);
          }
          *(_OWORD *)((char *)v1004 + v1006[16]) = *(_OWORD *)((char *)v1005 + v1006[16]);
          *(_OWORD *)((char *)v1004 + v1006[17]) = *(_OWORD *)((char *)v1005 + v1006[17]);
          *(_OWORD *)((char *)v1004 + v1006[18]) = *(_OWORD *)((char *)v1005 + v1006[18]);
          *(_OWORD *)((char *)v1004 + v1006[19]) = *(_OWORD *)((char *)v1005 + v1006[19]);
          *(_OWORD *)((char *)v1004 + v1006[20]) = *(_OWORD *)((char *)v1005 + v1006[20]);
          *(_OWORD *)((char *)v1004 + v1006[21]) = *(_OWORD *)((char *)v1005 + v1006[21]);
          *(_OWORD *)((char *)v1004 + v1006[22]) = *(_OWORD *)((char *)v1005 + v1006[22]);
          *(_OWORD *)((char *)v1004 + v1006[23]) = *(_OWORD *)((char *)v1005 + v1006[23]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1004, 0, 1, (uint64_t)v1006);
        }
        uint64_t v1020 = v1238[19];
        uint64_t v1021 = (_OWORD *)((char *)v14 + v1020);
        uint64_t v1022 = (_OWORD *)((char *)v15 + v1020);
        uint64_t v1023 = (int *)type metadata accessor for PreExtractedContact(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1022, 1, (uint64_t)v1023))
        {
          uint64_t v1024 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
          memcpy(v1021, v1022, *(void *)(*(void *)(v1024 - 8) + 64));
        }
        else
        {
          long long v1025 = v1022[1];
          *uint64_t v1021 = *v1022;
          v1021[1] = v1025;
          long long v1026 = v1022[3];
          v1021[2] = v1022[2];
          v1021[3] = v1026;
          long long v1027 = v1022[5];
          v1021[4] = v1022[4];
          v1021[5] = v1027;
          uint64_t v1028 = v1023[11];
          v1220 = (char *)v1021 + v1028;
          uint64_t v1029 = (char *)v1022 + v1028;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1022 + v1028, 1, v1235))
          {
            uint64_t v1030 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1220, v1029, *(void *)(*(void *)(v1030 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1235 - 8) + 32))(v1220, v1029);
            __swift_storeEnumTagSinglePayload((uint64_t)v1220, 0, 1, v1235);
          }
          *(_OWORD *)((char *)v1021 + v1023[12]) = *(_OWORD *)((char *)v1022 + v1023[12]);
          *(void *)((char *)v1021 + v1023[13]) = *(void *)((char *)v1022 + v1023[13]);
          uint64_t v1031 = v1023[14];
          uint64_t v1221 = (char *)v1021 + v1031;
          uint64_t v1032 = (char *)v1022 + v1031;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1022 + v1031, 1, v1235))
          {
            uint64_t v1033 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1221, v1032, *(void *)(*(void *)(v1033 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1235 - 8) + 32))(v1221, v1032);
            __swift_storeEnumTagSinglePayload((uint64_t)v1221, 0, 1, v1235);
          }
          *(void *)((char *)v1021 + v1023[15]) = *(void *)((char *)v1022 + v1023[15]);
          *(void *)((char *)v1021 + v1023[16]) = *(void *)((char *)v1022 + v1023[16]);
          *(_OWORD *)((char *)v1021 + v1023[17]) = *(_OWORD *)((char *)v1022 + v1023[17]);
          *(void *)((char *)v1021 + v1023[18]) = *(void *)((char *)v1022 + v1023[18]);
          *(void *)((char *)v1021 + v1023[19]) = *(void *)((char *)v1022 + v1023[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1021, 0, 1, (uint64_t)v1023);
        }
        uint64_t v1034 = v1238[20];
        uint64_t v1035 = (_OWORD *)((char *)v14 + v1034);
        uint64_t v1036 = (_OWORD *)((char *)v15 + v1034);
        v1037 = (int *)type metadata accessor for PreExtractedSharedLink(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v1036, 1, (uint64_t)v1037))
        {
          uint64_t v1038 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
          memcpy(v1035, v1036, *(void *)(*(void *)(v1038 - 8) + 64));
        }
        else
        {
          long long v1039 = v1036[1];
          *uint64_t v1035 = *v1036;
          v1035[1] = v1039;
          long long v1040 = v1036[3];
          v1035[2] = v1036[2];
          v1035[3] = v1040;
          uint64_t v1041 = v1037[8];
          uint64_t v1222 = (char *)v1035 + v1041;
          uint64_t v1042 = (char *)v1036 + v1041;
          uint64_t v1043 = type metadata accessor for URL();
          uint64_t v1205 = v1042;
          uint64_t v1044 = (uint64_t)v1042;
          uint64_t v1045 = v1043;
          if (__swift_getEnumTagSinglePayload(v1044, 1, v1043))
          {
            uint64_t v1046 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            memcpy(v1222, v1205, *(void *)(*(void *)(v1046 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, void *, uint64_t))(*(void *)(v1045 - 8) + 32))(v1222, v1205, v1045);
            __swift_storeEnumTagSinglePayload((uint64_t)v1222, 0, 1, v1045);
          }
          *(_OWORD *)((char *)v1035 + v1037[9]) = *(_OWORD *)((char *)v1036 + v1037[9]);
          *(_OWORD *)((char *)v1035 + v1037[10]) = *(_OWORD *)((char *)v1036 + v1037[10]);
          *(_OWORD *)((char *)v1035 + v1037[11]) = *(_OWORD *)((char *)v1036 + v1037[11]);
          uint64_t v1047 = v1037[12];
          uint64_t v1223 = (char *)v1035 + v1047;
          uint64_t v1048 = (char *)v1036 + v1047;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1036 + v1047, 1, v1235))
          {
            uint64_t v1049 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1223, v1048, *(void *)(*(void *)(v1049 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1235 - 8) + 32))(v1223, v1048);
            __swift_storeEnumTagSinglePayload((uint64_t)v1223, 0, 1, v1235);
          }
          uint64_t v1050 = v1037[13];
          uint64_t v1224 = (char *)v1035 + v1050;
          uint64_t v1051 = (char *)v1036 + v1050;
          if (__swift_getEnumTagSinglePayload((uint64_t)v1036 + v1050, 1, v1235))
          {
            uint64_t v1052 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
            memcpy(v1224, v1051, *(void *)(*(void *)(v1052 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *))(*(void *)(v1235 - 8) + 32))(v1224, v1051);
            __swift_storeEnumTagSinglePayload((uint64_t)v1224, 0, 1, v1235);
          }
          uint64_t v1053 = v1037[14];
          uint64_t v1054 = (char *)v1035 + v1053;
          uint64_t v1055 = (char *)v1036 + v1053;
          *(void *)uint64_t v1054 = *(void *)v1055;
          v1054[8] = v1055[8];
          *(_OWORD *)((char *)v1035 + v1037[15]) = *(_OWORD *)((char *)v1036 + v1037[15]);
          *(_OWORD *)((char *)v1035 + v1037[16]) = *(_OWORD *)((char *)v1036 + v1037[16]);
          *(_OWORD *)((char *)v1035 + v1037[17]) = *(_OWORD *)((char *)v1036 + v1037[17]);
          *(_OWORD *)((char *)v1035 + v1037[18]) = *(_OWORD *)((char *)v1036 + v1037[18]);
          *(_OWORD *)((char *)v1035 + v1037[19]) = *(_OWORD *)((char *)v1036 + v1037[19]);
          __swift_storeEnumTagSinglePayload((uint64_t)v1035, 0, 1, (uint64_t)v1037);
        }
        uint64_t v16 = v1243;
        memcpy((char *)v14 + v1238[21], (char *)v15 + v1238[21], 0x90uLL);
        goto LABEL_527;
      case 4u:
        long long v55 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v55;
        long long v56 = v15[3];
        v14[2] = v15[2];
        v14[3] = v56;
        uint64_t v57 = type metadata accessor for NoteDocument(0);
        uint64_t v58 = *(int *)(v57 + 32);
        uint64_t v59 = (char *)v14 + v58;
        uint64_t v60 = (char *)v15 + v58;
        uint64_t v61 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v60, 1, v61))
        {
          uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v59, v60, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v59, v60, v61);
          __swift_storeEnumTagSinglePayload((uint64_t)v59, 0, 1, v61);
        }
        uint64_t v16 = v1243;
        uint64_t v254 = *(int *)(v57 + 36);
        uint64_t v255 = (char *)v14 + v254;
        uint64_t v256 = (char *)v15 + v254;
        if (__swift_getEnumTagSinglePayload((uint64_t)v15 + v254, 1, v61)) {
          goto LABEL_109;
        }
        goto LABEL_139;
      case 5u:
        long long v63 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v63;
        v14[2] = v15[2];
        uint64_t v64 = (int *)type metadata accessor for Reminder(0);
        uint64_t v65 = v64[7];
        uint64_t v66 = (char *)v14 + v65;
        uint64_t v67 = (char *)v15 + v65;
        uint64_t v68 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v67, 1, v68))
        {
          uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v66, v67, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v66, v67, v68);
          __swift_storeEnumTagSinglePayload((uint64_t)v66, 0, 1, v68);
        }
        uint64_t v257 = v64[8];
        uint64_t v258 = (char *)v14 + v257;
        uint64_t v259 = (char *)v15 + v257;
        if (__swift_getEnumTagSinglePayload((uint64_t)v15 + v257, 1, v68))
        {
          uint64_t v260 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v258, v259, *(void *)(*(void *)(v260 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v258, v259, v68);
          __swift_storeEnumTagSinglePayload((uint64_t)v258, 0, 1, v68);
        }
        uint64_t v16 = v1243;
        *((unsigned char *)v14 + v64[9]) = *((unsigned char *)v15 + v64[9]);
        *(_OWORD *)((char *)v14 + v64[10]) = *(_OWORD *)((char *)v15 + v64[10]);
        *(_OWORD *)((char *)v14 + v64[11]) = *(_OWORD *)((char *)v15 + v64[11]);
        uint64_t v316 = v64[12];
        uint64_t v87 = (char *)v14 + v316;
        uint64_t v88 = (char *)v15 + v316;
        uint64_t v89 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v88, 1, v89)) {
          goto LABEL_149;
        }
        goto LABEL_131;
      case 6u:
        long long v70 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v70;
        long long v71 = v15[3];
        v14[2] = v15[2];
        v14[3] = v71;
        uint64_t v72 = (int *)type metadata accessor for PhoneHistory(0);
        uint64_t v73 = v72[10];
        uint64_t v74 = (char *)v14 + v73;
        uint64_t v75 = (char *)v15 + v73;
        uint64_t v76 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v75, 1, v76))
        {
          uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v74, v75, *(void *)(*(void *)(v77 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32))(v74, v75, v76);
          __swift_storeEnumTagSinglePayload((uint64_t)v74, 0, 1, v76);
        }
        uint64_t v16 = v1243;
        *(_OWORD *)((char *)v14 + v72[11]) = *(_OWORD *)((char *)v15 + v72[11]);
        *(_OWORD *)((char *)v14 + v72[12]) = *(_OWORD *)((char *)v15 + v72[12]);
        uint64_t v261 = v72[13];
        uint64_t v87 = (char *)v14 + v261;
        uint64_t v88 = (char *)v15 + v261;
        uint64_t v89 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v88, 1, v89)) {
          goto LABEL_149;
        }
        goto LABEL_131;
      case 7u:
        long long v78 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v78;
        v14[2] = v15[2];
        uint64_t v79 = type metadata accessor for VoicemailTranscript(0);
        uint64_t v80 = *(int *)(v79 + 28);
        uint64_t v81 = (char *)v14 + v80;
        uint64_t v82 = (char *)v15 + v80;
        uint64_t v83 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v82, 1, v83))
        {
          uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 32))(v81, v82, v83);
          __swift_storeEnumTagSinglePayload((uint64_t)v81, 0, 1, v83);
        }
        uint64_t v16 = v1243;
        uint64_t v262 = *(int *)(v79 + 32);
        uint64_t v87 = (char *)v14 + v262;
        uint64_t v88 = (char *)v15 + v262;
        uint64_t v89 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v88, 1, v89)) {
          goto LABEL_149;
        }
        goto LABEL_131;
      case 8u:
        long long v85 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v85;
        v14[2] = v15[2];
        uint64_t v86 = *(int *)(type metadata accessor for JournalEntry(0) + 28);
        uint64_t v87 = (char *)v14 + v86;
        uint64_t v88 = (char *)v15 + v86;
        uint64_t v89 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v88, 1, v89)) {
          goto LABEL_149;
        }
        goto LABEL_131;
      case 9u:
        long long v90 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v90;
        uint64_t v91 = (int *)type metadata accessor for VoiceMemo(0);
        uint64_t v92 = v91[6];
        uint64_t v93 = (char *)v14 + v92;
        uint64_t v94 = (char *)v15 + v92;
        uint64_t v95 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v94, 1, v95))
        {
          uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v93, v94, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 32))(v93, v94, v95);
          __swift_storeEnumTagSinglePayload((uint64_t)v93, 0, 1, v95);
        }
        uint64_t v16 = v1243;
        uint64_t v263 = v91[7];
        uint64_t v264 = (char *)v14 + v263;
        uint64_t v265 = (char *)v15 + v263;
        *(void *)uint64_t v264 = *(void *)v265;
        v264[8] = v265[8];
        uint64_t v266 = v91[8];
        uint64_t v87 = (char *)v14 + v266;
        uint64_t v88 = (char *)v15 + v266;
        uint64_t v89 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v88, 1, v89)) {
          goto LABEL_149;
        }
        goto LABEL_131;
      case 0xAu:
        long long v97 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v97;
        uint64_t v98 = (int *)type metadata accessor for Safari(0);
        uint64_t v99 = v98[6];
        uint64_t v100 = (char *)v14 + v99;
        uint64_t v101 = (char *)v15 + v99;
        uint64_t v61 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v101, 1, v61))
        {
          uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v100, v101, *(void *)(*(void *)(v102 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v100, v101, v61);
          __swift_storeEnumTagSinglePayload((uint64_t)v100, 0, 1, v61);
        }
        uint64_t v16 = v1243;
        *(_OWORD *)((char *)v14 + v98[7]) = *(_OWORD *)((char *)v15 + v98[7]);
        *(_OWORD *)((char *)v14 + v98[8]) = *(_OWORD *)((char *)v15 + v98[8]);
        uint64_t v267 = v98[9];
        uint64_t v255 = (char *)v14 + v267;
        uint64_t v256 = (char *)v15 + v267;
        if (!__swift_getEnumTagSinglePayload((uint64_t)v15 + v267, 1, v61)) {
          goto LABEL_139;
        }
        uint64_t v268 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v255, v256, *(void *)(*(void *)(v268 - 8) + 64));
        goto LABEL_527;
      case 0xCu:
        long long v103 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v103;
        v14[2] = v15[2];
        uint64_t v104 = (int *)type metadata accessor for WalletTransaction(0);
        uint64_t v105 = v104[7];
        uint64_t v106 = (char *)v14 + v105;
        uint64_t v107 = (char *)v15 + v105;
        uint64_t v108 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v107, 1, v108))
        {
          uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v106, v107, *(void *)(*(void *)(v109 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v108 - 8) + 32))(v106, v107, v108);
          __swift_storeEnumTagSinglePayload((uint64_t)v106, 0, 1, v108);
        }
        uint64_t v16 = v1243;
        *(_OWORD *)((char *)v14 + v104[8]) = *(_OWORD *)((char *)v15 + v104[8]);
        *(_OWORD *)((char *)v14 + v104[9]) = *(_OWORD *)((char *)v15 + v104[9]);
        *(_OWORD *)((char *)v14 + v104[10]) = *(_OWORD *)((char *)v15 + v104[10]);
        uint64_t v269 = v104[11];
        uint64_t v270 = (char *)v14 + v269;
        uint64_t v271 = (char *)v15 + v269;
        *(void *)(v270 + 13) = *(void *)(v271 + 13);
        *(_OWORD *)uint64_t v270 = *(_OWORD *)v271;
        *(_OWORD *)((char *)v14 + v104[12]) = *(_OWORD *)((char *)v15 + v104[12]);
        goto LABEL_527;
      case 0xDu:
        long long v110 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v110;
        v14[2] = v15[2];
        uint64_t v111 = (int *)type metadata accessor for WalletPass(0);
        uint64_t v112 = v111[7];
        uint64_t v113 = (char *)v14 + v112;
        uint64_t v114 = (char *)v15 + v112;
        uint64_t v115 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v114, 1, v115))
        {
          uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v113, v114, *(void *)(*(void *)(v116 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32))(v113, v114, v115);
          __swift_storeEnumTagSinglePayload((uint64_t)v113, 0, 1, v115);
        }
        uint64_t v16 = v1243;
        *(_OWORD *)((char *)v14 + v111[8]) = *(_OWORD *)((char *)v15 + v111[8]);
        *(void *)((char *)v14 + v111[9]) = *(void *)((char *)v15 + v111[9]);
        goto LABEL_527;
      case 0xFu:
        long long v117 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v117;
        long long v118 = v15[3];
        v14[2] = v15[2];
        v14[3] = v118;
        long long v119 = v15[5];
        v14[4] = v15[4];
        v14[5] = v119;
        *((unsigned char *)v14 + 96) = *((unsigned char *)v15 + 96);
        *(_OWORD *)((char *)v14 + 104) = *(_OWORD *)((char *)v15 + 104);
        uint64_t v120 = (int *)type metadata accessor for FlightReservation(0);
        uint64_t v121 = v120[13];
        uint64_t v122 = (char *)v14 + v121;
        uint64_t v123 = (char *)v15 + v121;
        uint64_t v124 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v123, 1, v124))
        {
          uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v122, v123, *(void *)(*(void *)(v125 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 32))(v122, v123, v124);
          __swift_storeEnumTagSinglePayload((uint64_t)v122, 0, 1, v124);
        }
        uint64_t v272 = v120[14];
        uint64_t v273 = (char *)v14 + v272;
        uint64_t v274 = (char *)v15 + v272;
        uint64_t v1242 = v10;
        if (__swift_getEnumTagSinglePayload((uint64_t)v15 + v272, 1, v124))
        {
          uint64_t v275 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v273, v274, *(void *)(*(void *)(v275 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 32))(v273, v274, v124);
          __swift_storeEnumTagSinglePayload((uint64_t)v273, 0, 1, v124);
        }
        *(_OWORD *)((char *)v14 + v120[15]) = *(_OWORD *)((char *)v15 + v120[15]);
        *(_OWORD *)((char *)v14 + v120[16]) = *(_OWORD *)((char *)v15 + v120[16]);
        *(_OWORD *)((char *)v14 + v120[17]) = *(_OWORD *)((char *)v15 + v120[17]);
        uint64_t v317 = v120[18];
        uint64_t v318 = (char *)v14 + v317;
        uint64_t v319 = (char *)v15 + v317;
        uint64_t v320 = type metadata accessor for DateComponents();
        uint64_t v321 = *(void (**)(char *, char *, uint64_t))(*(void *)(v320 - 8) + 32);
        v321(v318, v319, v320);
        v321((char *)v14 + v120[19], (char *)v15 + v120[19], v320);
        *(_OWORD *)((char *)v14 + v120[20]) = *(_OWORD *)((char *)v15 + v120[20]);
        *(_OWORD *)((char *)v14 + v120[21]) = *(_OWORD *)((char *)v15 + v120[21]);
        *(_OWORD *)((char *)v14 + v120[22]) = *(_OWORD *)((char *)v15 + v120[22]);
        *(_OWORD *)((char *)v14 + v120[23]) = *(_OWORD *)((char *)v15 + v120[23]);
        *(_OWORD *)((char *)v14 + v120[24]) = *(_OWORD *)((char *)v15 + v120[24]);
        *(_OWORD *)((char *)v14 + v120[25]) = *(_OWORD *)((char *)v15 + v120[25]);
        *(_OWORD *)((char *)v14 + v120[26]) = *(_OWORD *)((char *)v15 + v120[26]);
        *(_OWORD *)((char *)v14 + v120[27]) = *(_OWORD *)((char *)v15 + v120[27]);
        *(_OWORD *)((char *)v14 + v120[28]) = *(_OWORD *)((char *)v15 + v120[28]);
        *(_OWORD *)((char *)v14 + v120[29]) = *(_OWORD *)((char *)v15 + v120[29]);
        *(_OWORD *)((char *)v14 + v120[30]) = *(_OWORD *)((char *)v15 + v120[30]);
        *(_OWORD *)((char *)v14 + v120[31]) = *(_OWORD *)((char *)v15 + v120[31]);
        *(_OWORD *)((char *)v14 + v120[32]) = *(_OWORD *)((char *)v15 + v120[32]);
        *(void *)((char *)v14 + v120[33]) = *(void *)((char *)v15 + v120[33]);
        *(void *)((char *)v14 + v120[34]) = *(void *)((char *)v15 + v120[34]);
        *(_OWORD *)((char *)v14 + v120[35]) = *(_OWORD *)((char *)v15 + v120[35]);
        *(_OWORD *)((char *)v14 + v120[36]) = *(_OWORD *)((char *)v15 + v120[36]);
        *(_OWORD *)((char *)v14 + v120[37]) = *(_OWORD *)((char *)v15 + v120[37]);
        uint64_t v322 = v120[38];
        uint64_t v323 = (char *)v14 + v322;
        uint64_t v324 = (char *)v15 + v322;
        uint64_t v325 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v324, 1, v325))
        {
          uint64_t v326 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v323, v324, *(void *)(*(void *)(v326 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 32))(v323, v324, v325);
          __swift_storeEnumTagSinglePayload((uint64_t)v323, 0, 1, v325);
        }
        uint64_t v10 = v1242;
        uint64_t v16 = v1243;
        *(_OWORD *)((char *)v14 + v120[39]) = *(_OWORD *)((char *)v15 + v120[39]);
        *(_OWORD *)((char *)v14 + v120[40]) = *(_OWORD *)((char *)v15 + v120[40]);
        uint64_t v351 = v120[41];
        uint64_t v352 = (char *)v14 + v351;
        uint64_t v353 = (char *)v15 + v351;
        *(void *)uint64_t v352 = *(void *)v353;
        v352[8] = v353[8];
        *(_OWORD *)((char *)v14 + v120[42]) = *(_OWORD *)((char *)v15 + v120[42]);
        uint64_t v354 = v120[43];
        uint64_t v355 = (char *)v14 + v354;
        uint64_t v356 = (char *)v15 + v354;
        *(_OWORD *)uint64_t v355 = *(_OWORD *)v356;
        *(void *)(v355 + 13) = *(void *)(v356 + 13);
        *(_OWORD *)((char *)v14 + v120[44]) = *(_OWORD *)((char *)v15 + v120[44]);
        *(_OWORD *)((char *)v14 + v120[45]) = *(_OWORD *)((char *)v15 + v120[45]);
        *(_OWORD *)((char *)v14 + v120[46]) = *(_OWORD *)((char *)v15 + v120[46]);
        *(_OWORD *)((char *)v14 + v120[47]) = *(_OWORD *)((char *)v15 + v120[47]);
        uint64_t v357 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
        *(void *)((char *)v14 + *(int *)(v357 + 48)) = *(void *)((char *)v15 + *(int *)(v357 + 48));
        goto LABEL_527;
      case 0x10u:
        long long v126 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v126;
        long long v127 = v15[3];
        v14[2] = v15[2];
        v14[3] = v127;
        long long v128 = v15[5];
        v14[4] = v15[4];
        v14[5] = v128;
        *((unsigned char *)v14 + 96) = *((unsigned char *)v15 + 96);
        *(_OWORD *)((char *)v14 + 104) = *(_OWORD *)((char *)v15 + 104);
        *(_OWORD *)((char *)v14 + 120) = *(_OWORD *)((char *)v15 + 120);
        uint64_t v129 = (int *)type metadata accessor for HotelReservation(0);
        uint64_t v130 = v129[14];
        v131 = (char *)v14 + v130;
        uint64_t v132 = (char *)v15 + v130;
        uint64_t v133 = type metadata accessor for DateComponents();
        if (__swift_getEnumTagSinglePayload((uint64_t)v132, 1, v133))
        {
          uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v131, v132, *(void *)(*(void *)(v134 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32))(v131, v132, v133);
          __swift_storeEnumTagSinglePayload((uint64_t)v131, 0, 1, v133);
        }
        uint64_t v276 = v129[15];
        uint64_t v277 = (char *)v14 + v276;
        uint64_t v278 = (char *)v15 + v276;
        if (__swift_getEnumTagSinglePayload((uint64_t)v15 + v276, 1, v133))
        {
          uint64_t v279 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v277, v278, *(void *)(*(void *)(v279 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32))(v277, v278, v133);
          __swift_storeEnumTagSinglePayload((uint64_t)v277, 0, 1, v133);
        }
        uint64_t v16 = v1243;
        *(_OWORD *)((char *)v14 + v129[16]) = *(_OWORD *)((char *)v15 + v129[16]);
        *(_OWORD *)((char *)v14 + v129[17]) = *(_OWORD *)((char *)v15 + v129[17]);
        *(_OWORD *)((char *)v14 + v129[18]) = *(_OWORD *)((char *)v15 + v129[18]);
        *(_OWORD *)((char *)v14 + v129[19]) = *(_OWORD *)((char *)v15 + v129[19]);
        *(_OWORD *)((char *)v14 + v129[20]) = *(_OWORD *)((char *)v15 + v129[20]);
        *(void *)((char *)v14 + v129[21]) = *(void *)((char *)v15 + v129[21]);
        *(void *)((char *)v14 + v129[22]) = *(void *)((char *)v15 + v129[22]);
        uint64_t v327 = v129[23];
        uint64_t v328 = (char *)v14 + v327;
        uint64_t v329 = (char *)v15 + v327;
        v328[8] = v329[8];
        *(void *)uint64_t v328 = *(void *)v329;
        uint64_t v330 = v129[24];
        uint64_t v331 = (char *)v14 + v330;
        uint64_t v332 = (char *)v15 + v330;
        v331[8] = v332[8];
        *(void *)uint64_t v331 = *(void *)v332;
        *(_OWORD *)((char *)v14 + v129[25]) = *(_OWORD *)((char *)v15 + v129[25]);
        *(_OWORD *)((char *)v14 + v129[26]) = *(_OWORD *)((char *)v15 + v129[26]);
        *(_OWORD *)((char *)v14 + v129[27]) = *(_OWORD *)((char *)v15 + v129[27]);
        *(_OWORD *)((char *)v14 + v129[28]) = *(_OWORD *)((char *)v15 + v129[28]);
        uint64_t v333 = v129[29];
        uint64_t v334 = (char *)v14 + v333;
        uint64_t v335 = (char *)v15 + v333;
        *(void *)uint64_t v334 = *(void *)v335;
        v334[8] = v335[8];
        goto LABEL_527;
      case 0x11u:
        long long v135 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v135;
        long long v136 = v15[3];
        v14[2] = v15[2];
        v14[3] = v136;
        long long v137 = v15[5];
        v14[4] = v15[4];
        v14[5] = v137;
        *((unsigned char *)v14 + 96) = *((unsigned char *)v15 + 96);
        *(_OWORD *)((char *)v14 + 104) = *(_OWORD *)((char *)v15 + 104);
        *(_OWORD *)((char *)v14 + 120) = *(_OWORD *)((char *)v15 + 120);
        uint64_t v138 = (int *)type metadata accessor for RestaurantReservation(0);
        uint64_t v139 = v138[14];
        uint64_t v140 = (char *)v14 + v139;
        uint64_t v141 = (char *)v15 + v139;
        uint64_t v142 = type metadata accessor for DateComponents();
        if (__swift_getEnumTagSinglePayload((uint64_t)v141, 1, v142))
        {
          uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
          memcpy(v140, v141, *(void *)(*(void *)(v143 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v142 - 8) + 32))(v140, v141, v142);
          __swift_storeEnumTagSinglePayload((uint64_t)v140, 0, 1, v142);
        }
        uint64_t v16 = v1243;
        *(_OWORD *)((char *)v14 + v138[15]) = *(_OWORD *)((char *)v15 + v138[15]);
        *(_OWORD *)((char *)v14 + v138[16]) = *(_OWORD *)((char *)v15 + v138[16]);
        *(_OWORD *)((char *)v14 + v138[17]) = *(_OWORD *)((char *)v15 + v138[17]);
        *(_OWORD *)((char *)v14 + v138[18]) = *(_OWORD *)((char *)v15 + v138[18]);
        *(_OWORD *)((char *)v14 + v138[19]) = *(_OWORD *)((char *)v15 + v138[19]);
        *(void *)((char *)v14 + v138[20]) = *(void *)((char *)v15 + v138[20]);
        *(_OWORD *)((char *)v14 + v138[21]) = *(_OWORD *)((char *)v15 + v138[21]);
        *(_OWORD *)((char *)v14 + v138[22]) = *(_OWORD *)((char *)v15 + v138[22]);
        *(_OWORD *)((char *)v14 + v138[23]) = *(_OWORD *)((char *)v15 + v138[23]);
        goto LABEL_527;
      case 0x12u:
        long long v144 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v144;
        long long v145 = v15[3];
        v14[2] = v15[2];
        v14[3] = v145;
        long long v146 = v15[5];
        v14[4] = v15[4];
        v14[5] = v146;
        long long v147 = v15[7];
        v14[6] = v15[6];
        v14[7] = v147;
        *((unsigned char *)v14 + 128) = *((unsigned char *)v15 + 128);
        *(_WORD *)((char *)v14 + 129) = *(_WORD *)((char *)v15 + 129);
        *((void *)v14 + 17) = *((void *)v15 + 17);
        long long v148 = v15[10];
        v14[9] = v15[9];
        v14[10] = v148;
        long long v149 = v15[12];
        v14[11] = v15[11];
        v14[12] = v149;
        long long v150 = v15[14];
        v14[13] = v15[13];
        v14[14] = v150;
        v14[15] = v15[15];
        *((void *)v14 + 32) = *((void *)v15 + 32);
        *(_OWORD *)((char *)v14 + 264) = *(_OWORD *)((char *)v15 + 264);
        *(_OWORD *)((char *)v14 + 280) = *(_OWORD *)((char *)v15 + 280);
        *(_OWORD *)((char *)v14 + 296) = *(_OWORD *)((char *)v15 + 296);
        *(_OWORD *)((char *)v14 + 312) = *(_OWORD *)((char *)v15 + 312);
        *(_OWORD *)((char *)v14 + 328) = *(_OWORD *)((char *)v15 + 328);
        *(_OWORD *)((char *)v14 + 344) = *(_OWORD *)((char *)v15 + 344);
        *(_OWORD *)((char *)v14 + 360) = *(_OWORD *)((char *)v15 + 360);
        *((unsigned char *)v14 + 384) = *((unsigned char *)v15 + 384);
        *((void *)v14 + 47) = *((void *)v15 + 47);
        *(_OWORD *)((char *)v14 + 392) = *(_OWORD *)((char *)v15 + 392);
        *(_OWORD *)((char *)v14 + 408) = *(_OWORD *)((char *)v15 + 408);
        uint64_t v151 = type metadata accessor for RentalCarReservation(0);
        uint64_t v152 = *(int *)(v151 + 140);
        uint64_t v153 = (char *)v14 + v152;
        uint64_t v154 = (char *)v15 + v152;
        uint64_t v61 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v154, 1, v61))
        {
          uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v153, v154, *(void *)(*(void *)(v155 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v153, v154, v61);
          __swift_storeEnumTagSinglePayload((uint64_t)v153, 0, 1, v61);
        }
        uint64_t v16 = v1243;
        uint64_t v280 = *(int *)(v151 + 144);
        uint64_t v255 = (char *)v14 + v280;
        uint64_t v256 = (char *)v15 + v280;
        if (__swift_getEnumTagSinglePayload((uint64_t)v15 + v280, 1, v61)) {
          goto LABEL_109;
        }
        goto LABEL_139;
      case 0x13u:
        long long v156 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v156;
        long long v157 = v15[3];
        v14[2] = v15[2];
        v14[3] = v157;
        long long v158 = v15[5];
        v14[4] = v15[4];
        v14[5] = v158;
        long long v159 = v15[7];
        v14[6] = v15[6];
        v14[7] = v159;
        *((unsigned char *)v14 + 128) = *((unsigned char *)v15 + 128);
        *(_WORD *)((char *)v14 + 129) = *(_WORD *)((char *)v15 + 129);
        *((void *)v14 + 17) = *((void *)v15 + 17);
        long long v160 = v15[10];
        v14[9] = v15[9];
        v14[10] = v160;
        long long v161 = v15[12];
        v14[11] = v15[11];
        v14[12] = v161;
        *((void *)v14 + 26) = *((void *)v15 + 26);
        *(_OWORD *)((char *)v14 + 216) = *(_OWORD *)((char *)v15 + 216);
        *(_OWORD *)((char *)v14 + 232) = *(_OWORD *)((char *)v15 + 232);
        *(_OWORD *)((char *)v14 + 248) = *(_OWORD *)((char *)v15 + 248);
        *(_OWORD *)((char *)v14 + 264) = *(_OWORD *)((char *)v15 + 264);
        *((unsigned char *)v14 + 296) = *((unsigned char *)v15 + 296);
        uint64_t v162 = *((void *)v15 + 36);
        *((void *)v14 + 35) = *((void *)v15 + 35);
        *((void *)v14 + 36) = v162;
        uint64_t v163 = type metadata accessor for TicketedTransportation(0);
        uint64_t v164 = *(int *)(v163 + 112);
        uint64_t v165 = (char *)v14 + v164;
        uint64_t v166 = (char *)v15 + v164;
        uint64_t v61 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v166, 1, v61))
        {
          uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v165, v166, *(void *)(*(void *)(v167 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v165, v166, v61);
          __swift_storeEnumTagSinglePayload((uint64_t)v165, 0, 1, v61);
        }
        uint64_t v16 = v1243;
        uint64_t v281 = *(int *)(v163 + 116);
        uint64_t v255 = (char *)v14 + v281;
        uint64_t v256 = (char *)v15 + v281;
        if (__swift_getEnumTagSinglePayload((uint64_t)v15 + v281, 1, v61)) {
          goto LABEL_109;
        }
        goto LABEL_139;
      case 0x14u:
        long long v168 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v168;
        long long v169 = v15[3];
        v14[2] = v15[2];
        v14[3] = v169;
        long long v170 = v15[5];
        v14[4] = v15[4];
        v14[5] = v170;
        long long v171 = v15[7];
        v14[6] = v15[6];
        v14[7] = v171;
        *((unsigned char *)v14 + 128) = *((unsigned char *)v15 + 128);
        *(_WORD *)((char *)v14 + 129) = *(_WORD *)((char *)v15 + 129);
        *((void *)v14 + 17) = *((void *)v15 + 17);
        long long v172 = v15[10];
        v14[9] = v15[9];
        v14[10] = v172;
        long long v173 = v15[12];
        v14[11] = v15[11];
        v14[12] = v173;
        long long v174 = v15[14];
        v14[13] = v15[13];
        v14[14] = v174;
        *((void *)v14 + 30) = *((void *)v15 + 30);
        *(_OWORD *)((char *)v14 + 248) = *(_OWORD *)((char *)v15 + 248);
        *(_OWORD *)((char *)v14 + 264) = *(_OWORD *)((char *)v15 + 264);
        *((unsigned char *)v14 + 296) = *((unsigned char *)v15 + 296);
        uint64_t v175 = *((void *)v15 + 36);
        *((void *)v14 + 35) = *((void *)v15 + 35);
        *((void *)v14 + 36) = v175;
        v14[19] = v15[19];
        uint64_t v176 = (int *)type metadata accessor for TicketedShow(0);
        uint64_t v177 = v176[29];
        uint64_t v178 = (char *)v14 + v177;
        uint64_t v179 = (char *)v15 + v177;
        uint64_t v180 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v179, 1, v180))
        {
          uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v178, v179, *(void *)(*(void *)(v181 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v180 - 8) + 32))(v178, v179, v180);
          __swift_storeEnumTagSinglePayload((uint64_t)v178, 0, 1, v180);
        }
        *(_OWORD *)((char *)v14 + v176[30]) = *(_OWORD *)((char *)v15 + v176[30]);
        uint64_t v282 = v176[31];
        uint64_t v283 = (char *)v14 + v282;
        uint64_t v284 = (char *)v15 + v282;
        uint64_t v89 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v284, 1, v89))
        {
          uint64_t v285 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v283, v284, *(void *)(*(void *)(v285 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 32))(v283, v284, v89);
          __swift_storeEnumTagSinglePayload((uint64_t)v283, 0, 1, v89);
        }
        uint64_t v16 = v1243;
        uint64_t v336 = v176[32];
        uint64_t v87 = (char *)v14 + v336;
        uint64_t v88 = (char *)v15 + v336;
        if (!__swift_getEnumTagSinglePayload((uint64_t)v15 + v336, 1, v89)) {
          goto LABEL_131;
        }
        uint64_t v337 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v87, v88, *(void *)(*(void *)(v337 - 8) + 64));
        goto LABEL_527;
      case 0x15u:
        long long v182 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v182;
        long long v183 = v15[3];
        v14[2] = v15[2];
        v14[3] = v183;
        long long v184 = v15[5];
        v14[4] = v15[4];
        v14[5] = v184;
        long long v185 = v15[7];
        v14[6] = v15[6];
        v14[7] = v185;
        *((unsigned char *)v14 + 128) = *((unsigned char *)v15 + 128);
        *(_WORD *)((char *)v14 + 129) = *(_WORD *)((char *)v15 + 129);
        *((void *)v14 + 17) = *((void *)v15 + 17);
        long long v186 = v15[10];
        v14[9] = v15[9];
        v14[10] = v186;
        long long v187 = v15[12];
        v14[11] = v15[11];
        v14[12] = v187;
        long long v188 = v15[14];
        v14[13] = v15[13];
        v14[14] = v188;
        long long v189 = v15[16];
        v14[15] = v15[15];
        v14[16] = v189;
        *((unsigned char *)v14 + 280) = *((unsigned char *)v15 + 280);
        *((void *)v14 + 34) = *((void *)v15 + 34);
        v14[18] = v15[18];
        uint64_t v190 = type metadata accessor for Appointment(0);
        uint64_t v191 = *(int *)(v190 + 108);
        uint64_t v192 = (char *)v14 + v191;
        uint64_t v193 = (char *)v15 + v191;
        uint64_t v61 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v193, 1, v61))
        {
          uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v192, v193, *(void *)(*(void *)(v194 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v192, v193, v61);
          __swift_storeEnumTagSinglePayload((uint64_t)v192, 0, 1, v61);
        }
        uint64_t v16 = v1243;
        uint64_t v286 = *(int *)(v190 + 112);
        uint64_t v255 = (char *)v14 + v286;
        uint64_t v256 = (char *)v15 + v286;
        if (__swift_getEnumTagSinglePayload((uint64_t)v15 + v286, 1, v61))
        {
LABEL_109:
          uint64_t v287 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v255, v256, *(void *)(*(void *)(v287 - 8) + 64));
        }
        else
        {
LABEL_139:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v255, v256, v61);
          __swift_storeEnumTagSinglePayload((uint64_t)v255, 0, 1, v61);
        }
        goto LABEL_527;
      case 0x16u:
        long long v195 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v195;
        long long v196 = v15[3];
        v14[2] = v15[2];
        v14[3] = v196;
        long long v197 = v15[5];
        v14[4] = v15[4];
        v14[5] = v197;
        long long v198 = v15[7];
        v14[6] = v15[6];
        v14[7] = v198;
        *((unsigned char *)v14 + 128) = *((unsigned char *)v15 + 128);
        *(_WORD *)((char *)v14 + 129) = *(_WORD *)((char *)v15 + 129);
        *((void *)v14 + 17) = *((void *)v15 + 17);
        long long v199 = v15[10];
        v14[9] = v15[9];
        v14[10] = v199;
        long long v200 = v15[12];
        v14[11] = v15[11];
        v14[12] = v200;
        long long v201 = v15[14];
        v14[13] = v15[13];
        v14[14] = v201;
        v14[15] = v15[15];
        uint64_t v202 = (int *)type metadata accessor for Party(0);
        uint64_t v203 = v202[24];
        uint64_t v204 = (char *)v14 + v203;
        uint64_t v205 = (char *)v15 + v203;
        uint64_t v206 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v205, 1, v206))
        {
          uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v204, v205, *(void *)(*(void *)(v207 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v206 - 8) + 32))(v204, v205, v206);
          __swift_storeEnumTagSinglePayload((uint64_t)v204, 0, 1, v206);
        }
        uint64_t v288 = v202[25];
        uint64_t v289 = (char *)v14 + v288;
        uint64_t v290 = (char *)v15 + v288;
        if (__swift_getEnumTagSinglePayload((uint64_t)v15 + v288, 1, v206))
        {
          uint64_t v291 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v289, v290, *(void *)(*(void *)(v291 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v206 - 8) + 32))(v289, v290, v206);
          __swift_storeEnumTagSinglePayload((uint64_t)v289, 0, 1, v206);
        }
        uint64_t v16 = v1243;
        uint64_t v338 = v202[26];
        uint64_t v87 = (char *)v14 + v338;
        uint64_t v88 = (char *)v15 + v338;
        uint64_t v89 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v88, 1, v89)) {
          goto LABEL_149;
        }
        goto LABEL_131;
      case 0x17u:
        long long v208 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v208;
        long long v209 = v15[3];
        v14[2] = v15[2];
        v14[3] = v209;
        long long v210 = v15[5];
        v14[4] = v15[4];
        v14[5] = v210;
        long long v211 = v15[7];
        v14[6] = v15[6];
        v14[7] = v211;
        *((unsigned char *)v14 + 128) = *((unsigned char *)v15 + 128);
        *(_WORD *)((char *)v14 + 129) = *(_WORD *)((char *)v15 + 129);
        *((void *)v14 + 17) = *((void *)v15 + 17);
        long long v212 = v15[10];
        v14[9] = v15[9];
        v14[10] = v212;
        long long v213 = v15[12];
        v14[11] = v15[11];
        v14[12] = v213;
        v14[13] = v15[13];
        uint64_t v214 = (int *)type metadata accessor for Trip(0);
        uint64_t v215 = v214[22];
        uint64_t v216 = (char *)v14 + v215;
        uint64_t v217 = (char *)v15 + v215;
        uint64_t v218 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload((uint64_t)v217, 1, v218))
        {
          uint64_t v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v216, v217, *(void *)(*(void *)(v219 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v218 - 8) + 32))(v216, v217, v218);
          __swift_storeEnumTagSinglePayload((uint64_t)v216, 0, 1, v218);
        }
        uint64_t v292 = v214[23];
        uint64_t v293 = (char *)v14 + v292;
        uint64_t v294 = (char *)v15 + v292;
        if (__swift_getEnumTagSinglePayload((uint64_t)v15 + v292, 1, v218))
        {
          uint64_t v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
          memcpy(v293, v294, *(void *)(*(void *)(v295 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v218 - 8) + 32))(v293, v294, v218);
          __swift_storeEnumTagSinglePayload((uint64_t)v293, 0, 1, v218);
        }
        uint64_t v16 = v1243;
        uint64_t v339 = v214[24];
        uint64_t v340 = (char *)v14 + v339;
        uint64_t v341 = (char *)v15 + v339;
        *(void *)uint64_t v340 = *(void *)v341;
        v340[8] = v341[8];
        uint64_t v342 = v214[25];
        uint64_t v87 = (char *)v14 + v342;
        uint64_t v88 = (char *)v15 + v342;
        uint64_t v89 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v88, 1, v89))
        {
LABEL_149:
          uint64_t v343 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v87, v88, *(void *)(*(void *)(v343 - 8) + 64));
        }
        else
        {
LABEL_131:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 32))(v87, v88, v89);
          __swift_storeEnumTagSinglePayload((uint64_t)v87, 0, 1, v89);
        }
        goto LABEL_527;
      case 0x18u:
        long long v220 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v220;
        v14[2] = v15[2];
        uint64_t v221 = (int *)type metadata accessor for GlobalItem();
        uint64_t v222 = v221[7];
        uint64_t v223 = (char *)v14 + v222;
        uint64_t v224 = (char *)v15 + v222;
        uint64_t v225 = type metadata accessor for GlobalDialog();
        if (__swift_getEnumTagSinglePayload((uint64_t)v224, 1, v225))
        {
          uint64_t v226 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
          memcpy(v223, v224, *(void *)(*(void *)(v226 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 32))(v223, v224, v225);
          __swift_storeEnumTagSinglePayload((uint64_t)v223, 0, 1, v225);
        }
        uint64_t v16 = v1243;
        *(_OWORD *)((char *)v14 + v221[8]) = *(_OWORD *)((char *)v15 + v221[8]);
        *((unsigned char *)v14 + v221[9]) = *((unsigned char *)v15 + v221[9]);
        uint64_t v296 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GlobalItem, experiences: [DialogExperience]));
        *(void *)((char *)v14 + *(int *)(v296 + 48)) = *(void *)((char *)v15 + *(int *)(v296 + 48));
        goto LABEL_527;
      case 0x1Au:
        long long v227 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v227;
        v14[2] = v15[2];
        *((void *)v14 + 6) = *((void *)v15 + 6);
        uint64_t v228 = (int *)type metadata accessor for Answer(0);
        uint64_t v229 = v228[9];
        uint64_t v230 = (char *)v14 + v229;
        uint64_t v231 = (char *)v15 + v229;
        uint64_t v232 = type metadata accessor for URL();
        if (__swift_getEnumTagSinglePayload((uint64_t)v231, 1, v232))
        {
          uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
          memcpy(v230, v231, *(void *)(*(void *)(v233 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v232 - 8) + 32))(v230, v231, v232);
          __swift_storeEnumTagSinglePayload((uint64_t)v230, 0, 1, v232);
        }
        uint64_t v16 = v1243;
        *((unsigned char *)v14 + v228[10]) = *((unsigned char *)v15 + v228[10]);
        *(_OWORD *)((char *)v14 + v228[11]) = *(_OWORD *)((char *)v15 + v228[11]);
LABEL_527:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
        break;
    }
    *(void *)((char *)v14 + *(int *)(v16 + 20)) = *(void *)((char *)v15 + *(int *)(v16 + 20));
    *(_OWORD *)((char *)v14 + *(int *)(v16 + 24)) = *(_OWORD *)((char *)v15 + *(int *)(v16 + 24));
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  uint64_t v1106 = a3[12];
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  uint64_t v1107 = (char *)a1 + v1106;
  uint64_t v1108 = (char *)a2 + v1106;
  if (__swift_getEnumTagSinglePayload((uint64_t)v1108, 1, v10))
  {
    uint64_t v1109 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    memcpy(v1107, v1108, *(void *)(*(void *)(v1109 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v1107, v1108, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v1107, 0, 1, v10);
  }
  return a1;
}

#error "25835CAAC: too big function (funcsize=0)"

uint64_t getEnumTagSinglePayload for SearchSpotlightEntity.Builder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25836E824);
}

uint64_t sub_25836E824(uint64_t a1, uint64_t a2, int *a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[6];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
    OUTLINED_FUNCTION_30_2();
    if (*(_DWORD *)(v11 + 84) != a2) {
      return OUTLINED_FUNCTION_65_1(*(void *)(a1 + a3[11]));
    }
    uint64_t v8 = v10;
    uint64_t v9 = a3[10];
  }
  return __swift_getEnumTagSinglePayload(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SearchSpotlightEntity.Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25836E8F0);
}

void sub_25836E8F0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[6];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
    OUTLINED_FUNCTION_30_2();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + a4[11]) = (a2 - 1);
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a4[10];
  }
  __swift_storeEnumTagSinglePayload(a1 + v11, a2, a2, v10);
}

void type metadata completion function for SearchSpotlightEntity.Builder()
{
  _s10OmniSearch0B6ResultVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for IntentFile?, MEMORY[0x263EFB730]);
  if (v0 <= 0x3F)
  {
    _s10OmniSearch0B6ResultVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for SearchResult?, (void (*)(uint64_t))type metadata accessor for SearchResult);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void _s10OmniSearch0B6ResultVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for SearchSpotlightEntity.Query()
{
  return &type metadata for SearchSpotlightEntity.Query;
}

unsigned char *storeEnumTagSinglePayload for SearchSpotlightEntity.SearchSpotlightEntityError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25836EC10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchSpotlightEntity.SearchSpotlightEntityError()
{
  return &type metadata for SearchSpotlightEntity.SearchSpotlightEntityError;
}

unint64_t sub_25836EC48()
{
  return _sSaySSGSayxGSKsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type TupleTransferRepresentation<SearchSpotlightEntity, (DataRepresentation<SearchSpotlightEntity>, DataRepresentation<SearchSpotlightEntity>, DataRepresentation<SearchSpotlightEntity>, DataRepresentation<SearchSpotlightEntity>, DataRepresentation<SearchSpotlightEntity>)> and conformance TupleTransferRepresentation<A, B>);
}

uint64_t getEnumTagSinglePayload for SearchSpotlightEntity.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SearchSpotlightEntity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25836EDD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SearchSpotlightEntity.CodingKeys()
{
  return &unk_2706AB4E0;
}

uint64_t OUTLINED_FUNCTION_1_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_17()
{
  return type metadata accessor for IntentFile();
}

uint64_t OUTLINED_FUNCTION_9_12()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

void OUTLINED_FUNCTION_11_14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_12_17(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_13_19()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t OUTLINED_FUNCTION_14_17(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_16_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_17()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_21_13()
{
  JUMPOUT(0x25A2C94B0);
}

BOOL OUTLINED_FUNCTION_24_13(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_25_12()
{
  return outlined consume of Data._Representation(v1, v0);
}

BOOL OUTLINED_FUNCTION_26_15(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_27_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_12(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_33_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_37_10(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270EE9F40](v2, a2, 0, v3, v4);
}

_WORD *OUTLINED_FUNCTION_41_10(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_44_10()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_50_10()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_51_8()
{
  return static SearchSpotlightEntity.performTransfer(to:entity:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_55_7()
{
  uint64_t v4 = *(void *)(v2 - 128);
  return _s10OmniSearch0B6ResultVWOcTm_1(v1, v4, v0);
}

uint64_t OUTLINED_FUNCTION_57_5()
{
  return type metadata accessor for SearchSpotlightEntity.Builder(0);
}

uint64_t OUTLINED_FUNCTION_58_6()
{
  return type metadata accessor for SearchSpotlightEntity(0);
}

uint64_t OUTLINED_FUNCTION_61_5()
{
  return _s10OmniSearch0B10ResultItemOWOhTm_3(v1, v0);
}

void OUTLINED_FUNCTION_65_5(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 248) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_66_4()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_77_4()
{
  return _s10OmniSearch0B6ResultVWOcTm_1(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_79_3()
{
  return outlined init with copy of SearchResultItem?(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_80_4()
{
  return _s10OmniSearch0B6ResultVWOcTm_1(v2, v1, v0);
}

void OUTLINED_FUNCTION_81_4(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
}

uint64_t OUTLINED_FUNCTION_88_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_90_2()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_91_4()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_92_4()
{
  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_94_5()
{
  return _s10OmniSearch0B10ResultItemOWOhTm_3(v1, v0);
}

uint64_t OUTLINED_FUNCTION_98_4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_99_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_100_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_106_4()
{
  return _s10OmniSearch0B10ResultItemOWOhTm_3(v1, v0);
}

uint64_t OUTLINED_FUNCTION_107_4()
{
  uint64_t v4 = *(void *)(v2 - 120);
  return _s10OmniSearch0B6ResultVWOcTm_1(v1, v4, v0);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AnswerMetadata.validateParameters()()
{
  memcpy(__dst, v0, sizeof(__dst));
  outlined retain of AnswerMetadata((uint64_t)__dst);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)__dst);
  swift_bridgeObjectRelease();
  uint64_t v1 = HIBYTE(v11[1]) & 0xFLL;
  if ((v11[1] & 0x2000000000000000) == 0) {
    uint64_t v1 = v11[0] & 0xFFFFFFFFFFFFLL;
  }
  if (!v1
    || (outlined retain of AnswerMetadata((uint64_t)__dst),
        EntityProperty.wrappedValue.getter(),
        outlined release of AnswerMetadata((uint64_t)__dst),
        uint64_t v2 = *(void *)(v11[0] + 16),
        swift_bridgeObjectRelease(),
        !v2)
    && (__dst[12] & 1) == 0)
  {
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logging.search);
    outlined retain of AnswerMetadata((uint64_t)__dst);
    outlined retain of AnswerMetadata((uint64_t)__dst);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unsigned int v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v13 = v7;
      *(_DWORD *)unsigned int v6 = 136315138;
      memcpy(v11, __dst, sizeof(v11));
      outlined retain of AnswerMetadata((uint64_t)__dst);
      uint64_t v8 = String.init<A>(describing:)();
      v11[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of AnswerMetadata((uint64_t)__dst);
      outlined release of AnswerMetadata((uint64_t)__dst);
      _os_log_impl(&dword_257DC6000, v4, v5, "AnswerMetadata missing required fields: %s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2C94B0](v7, -1, -1);
      MEMORY[0x25A2C94B0](v6, -1, -1);
    }
    else
    {
      outlined release of AnswerMetadata((uint64_t)__dst);
      outlined release of AnswerMetadata((uint64_t)__dst);
    }

    lazy protocol witness table accessor for type SearchToolError and conformance SearchToolError();
    swift_allocError();
    *uint64_t v10 = xmmword_258668A50;
    swift_willThrow();
  }
}

void AnswerMetadata.init(_:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for AnswerMetadata.Builder();
  unsigned int v6 = (int *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_18();
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = &v17[-v8];
  v9[2] = 0u;
  v9[3] = 0u;
  *unint64_t v9 = 0u;
  v9[1] = 0u;
  uint64_t v10 = &v17[v6[11] - v8];
  uint64_t v11 = type metadata accessor for IntentFile();
  OUTLINED_FUNCTION_32((uint64_t)v10, v12, v13, v11);
  *(void *)((char *)v9 + v6[12]) = MEMORY[0x263F8EE78];
  *(void *)((char *)v9 + v6[13]) = 0;
  uint64_t v14 = (void *)((char *)v9 + v6[14]);
  *uint64_t v14 = 0;
  v14[1] = 0;
  uint64_t v15 = (void *)((char *)v9 + v6[15]);
  void *v15 = 0;
  v15[1] = 0;
  *((unsigned char *)v9 + v6[16]) = 0;
  uint64_t v16 = (void *)((char *)v9 + v6[17]);
  *uint64_t v16 = 0;
  v16[1] = 0;
  v2(v9);
  outlined init with copy of AnswerMetadata.Builder((uint64_t)v9, v0, (void (*)(void))type metadata accessor for AnswerMetadata.Builder);
  AnswerMetadata.init(builder:)();
  outlined destroy of AnswerMetadata.Builder((uint64_t)v9, (void (*)(void))type metadata accessor for AnswerMetadata.Builder);
  outlined init with take of PQAVerificationModelProtocol?((uint64_t)v17, (uint64_t)v18, &demangling cache variable for type metadata for AnswerMetadata?);
  outlined init with take of PQAVerificationModelProtocol?((uint64_t)v18, v4, &demangling cache variable for type metadata for AnswerMetadata?);
  OUTLINED_FUNCTION_119_0();
}

uint64_t AnswerMetadata.experienceFile.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t AnswerMetadata.validTypeIdentifiers.getter()
{
  uint64_t v2 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_59_0();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_20_12();
  outlined retain of AnswerMetadata((uint64_t)v27);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)v27);
  uint64_t v8 = type metadata accessor for IntentFile();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v8);
  outlined destroy of PQAVerificationModelProtocol?(v1, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (EnumTagSinglePayload != 1)
  {
    if (one-time initialization token for searchToolExportedExperiences != -1) {
      swift_once();
    }
    uint64_t v12 = __swift_project_value_buffer(v2, (uint64_t)static UTType.searchToolExportedExperiences);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v0, v12, v2);
    uint64_t v10 = UTType.identifier.getter();
    uint64_t v11 = v13;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  }
  static UTType.plainText.getter();
  uint64_t v14 = UTType.identifier.getter();
  uint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  if (v11)
  {
    swift_bridgeObjectRetain();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v18 = v17;
    unint64_t v19 = *(void *)(v17 + 16);
    if (v19 >= *(void *)(v17 + 24) >> 1)
    {
      OUTLINED_FUNCTION_36_10();
      uint64_t v18 = v26;
    }
    *(void *)(v18 + 16) = v19 + 1;
    uint64_t v20 = v18 + 16 * v19;
    *(void *)(v20 + 32) = v10;
    *(void *)(v20 + 40) = v11;
  }
  else
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v18 = v24;
  }
  unint64_t v21 = *(void *)(v18 + 16);
  if (v21 >= *(void *)(v18 + 24) >> 1)
  {
    OUTLINED_FUNCTION_36_10();
    uint64_t v18 = v25;
  }
  *(void *)(v18 + 16) = v21 + 1;
  uint64_t v22 = v18 + 16 * v21;
  *(void *)(v22 + 32) = v14;
  *(void *)(v22 + 40) = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t AnswerMetadata.answer.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for AnswerMetadata.answer : AnswerMetadata()
{
  return AnswerMetadata.answer.setter();
}

uint64_t AnswerMetadata.answer.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*AnswerMetadata.answer.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t AnswerMetadata.$answer.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t AnswerMetadata.documentSource.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for AnswerMetadata.documentSource : AnswerMetadata()
{
  return AnswerMetadata.documentSource.setter();
}

uint64_t AnswerMetadata.documentSource.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*AnswerMetadata.documentSource.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t AnswerMetadata.$documentSource.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t AnswerMetadata.title.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t AnswerMetadata.title.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*AnswerMetadata.title.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t AnswerMetadata.$title.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t AnswerMetadata.dialog.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t AnswerMetadata.dialog.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*AnswerMetadata.dialog.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t AnswerMetadata.$dialog.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t AnswerMetadata.sourceDocuments.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for AnswerMetadata.sourceDocuments : AnswerMetadata()
{
  return AnswerMetadata.sourceDocuments.setter();
}

uint64_t AnswerMetadata.sourceDocuments.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*AnswerMetadata.sourceDocuments.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t AnswerMetadata.$sourceDocuments.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t AnswerMetadata.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AnswerMetadata.experienceFile : AnswerMetadata(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of FlightSnippet.Flight?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  return AnswerMetadata.experienceFile.setter((uint64_t)v4);
}

uint64_t AnswerMetadata.experienceFile.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_49_8(a1);
  EntityProperty.wrappedValue.setter();
  return outlined destroy of PQAVerificationModelProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
}

uint64_t (*AnswerMetadata.experienceFile.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t AnswerMetadata.$experienceFile.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t AnswerMetadata.experienceSourceType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F5B7B0];
  type metadata accessor for SearchResultType();
  OUTLINED_FUNCTION_7_2();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  return v5(a1, v2, v3);
}

uint64_t AnswerMetadata.globalSearchSummary.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t AnswerMetadata.globalSearchSummary.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*AnswerMetadata.globalSearchSummary.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t AnswerMetadata.$globalSearchSummary.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t AnswerMetadata.description.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for AnswerMetadata.title : AnswerMetadata(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t AnswerMetadata.description.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t (*AnswerMetadata.description.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t AnswerMetadata.$description.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t AnswerMetadata.summary.getter()
{
  memcpy(__dst, v0, sizeof(__dst));
  outlined retain of AnswerMetadata((uint64_t)__dst);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)__dst);
  return v2;
}

uint64_t AnswerMetadata.sourceResults.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnswerMetadata.sourceResults.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 72) = a1;
  return result;
}

uint64_t (*AnswerMetadata.sourceResults.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.sourceResult.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = type metadata accessor for SearchResult(0);
  if (v4)
  {
    OUTLINED_FUNCTION_30_2();
    outlined init with copy of AnswerMetadata.Builder(v3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a1, (void (*)(void))type metadata accessor for SearchResult);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a1, v7, 1, v5);
}

id AnswerMetadata.card.getter()
{
  type metadata accessor for SFCard();
  uint64_t v0 = OUTLINED_FUNCTION_79_0();
  outlined copy of Data?(v0, v1);
  uint64_t v2 = OUTLINED_FUNCTION_79_0();
  return SFCard.init(data:)(v2, v3);
}

uint64_t key path setter for AnswerMetadata.card : AnswerMetadata(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  return AnswerMetadata.card.setter(v1);
}

uint64_t AnswerMetadata.card.setter(void *a1)
{
  uint64_t v2 = v1;
  if (a1)
  {
    uint64_t v4 = SFCard.data.getter();
    unint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v6 = 0xF000000000000000;
  }
  uint64_t result = outlined consume of Data?(*(void *)(v2 + 80), *(void *)(v2 + 88));
  *(void *)(v2 + 80) = v4;
  *(void *)(v2 + 88) = v6;
  return result;
}

void (*AnswerMetadata.card.modify(id *a1))(uint64_t a1)
{
  a1[1] = (id)v1;
  uint64_t v4 = *(void *)(v1 + 80);
  unint64_t v3 = *(void *)(v1 + 88);
  type metadata accessor for SFCard();
  outlined copy of Data?(v4, v3);
  *a1 = SFCard.init(data:)(v4, v3);
  return AnswerMetadata.card.modify;
}

void AnswerMetadata.card.modify(uint64_t a1)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_160_1(a1);
  if (v3)
  {
    id v13 = v2;
    if (v2)
    {
      id v4 = v2;
      uint64_t v5 = SFCard.data.getter();
      unint64_t v7 = v6;
    }
    else
    {
      uint64_t v5 = 0;
      unint64_t v7 = 0xF000000000000000;
    }
    uint64_t v11 = *(void *)(v1 + 8);
    outlined consume of Data?(*(void *)(v11 + 80), *(void *)(v11 + 88));
    *(void *)(v11 + 80) = v5;
    *(void *)(v11 + 88) = v7;
  }
  else
  {
    if (v2)
    {
      id v14 = v2;
      uint64_t v8 = SFCard.data.getter();
      unint64_t v10 = v9;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v10 = 0xF000000000000000;
    }
    uint64_t v12 = *(void *)(v1 + 8);
    outlined consume of Data?(*(void *)(v12 + 80), *(void *)(v12 + 88));
    *(void *)(v12 + 80) = v8;
    *(void *)(v12 + 88) = v10;
  }
}

void AnswerMetadata.init()()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = v1;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_18_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String>);
  OUTLINED_FUNCTION_25_13();
  uint64_t v21 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_15_15();
  uint64_t v17 = MEMORY[0x25A2C4900](v0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  swift_retain();
  OUTLINED_FUNCTION_31_12();
  uint64_t v6 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_30_14();
  uint64_t v7 = MEMORY[0x25A2C4900](v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[SourceDocument]>);
  swift_retain();
  OUTLINED_FUNCTION_19_10();
  unint64_t v8 = lazy protocol witness table accessor for type SourceDocument and conformance SourceDocument();
  uint64_t v16 = MEMORY[0x25A2C4890](v0, v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  swift_retain();
  OUTLINED_FUNCTION_5_12();
  uint64_t v18 = MEMORY[0x25A2C48A0](v0);
  swift_retain();
  OUTLINED_FUNCTION_19_10();
  uint64_t v19 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_5_12();
  uint64_t v20 = MEMORY[0x25A2C4900](v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]>);
  swift_retain();
  OUTLINED_FUNCTION_19_10();
  uint64_t v14 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  OUTLINED_FUNCTION_16_1();
  v11();
  swift_bridgeObjectRetain();
  uint64_t v12 = MEMORY[0x263F8EE78];
  v22[0] = v21;
  v22[1] = v17;
  v22[2] = v6;
  v22[3] = v7;
  v22[4] = v16;
  uint64_t v23 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v24 = v18;
  uint64_t v25 = v19;
  uint64_t v26 = v20;
  uint64_t v27 = v12;
  long long v28 = xmmword_258665BD0;
  char v29 = 0;
  uint64_t v30 = v15;
  uint64_t v31 = v10;
  uint64_t v32 = v14;
  uint64_t v13 = v23;
  swift_bridgeObjectRetain();
  outlined retain of AnswerMetadata((uint64_t)v22);
  EntityProperty.wrappedValue.setter();
  outlined release of AnswerMetadata((uint64_t)v22);
  outlined retain of AnswerMetadata((uint64_t)v22);
  EntityProperty.wrappedValue.setter();
  outlined release of AnswerMetadata((uint64_t)v22);
  outlined retain of AnswerMetadata((uint64_t)v22);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  EntityProperty.wrappedValue.setter();
  outlined release of AnswerMetadata((uint64_t)v22);
  *(void *)uint64_t v2 = v21;
  *(void *)(v2 + 8) = v17;
  *(void *)(v2 + 16) = v6;
  *(void *)(v2 + 24) = v7;
  *(void *)(v2 + 32) = v16;
  *(void *)(v2 + 40) = v13;
  *(void *)(v2 + 48) = v18;
  *(void *)(v2 + 56) = v19;
  *(void *)(v2 + 64) = v20;
  *(void *)(v2 + 72) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v2 + 80) = xmmword_258665BD0;
  *(unsigned char *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 97) = 0;
  *(_DWORD *)(v2 + 100) = 0;
  *(void *)(v2 + 104) = v15;
  *(void *)(v2 + 112) = v10;
  *(void *)(v2 + 120) = v14;
  OUTLINED_FUNCTION_119_0();
}

uint64_t AnswerMetadata.Builder.init()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for AnswerMetadata.Builder();
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  uint64_t v3 = (uint64_t)a1 + v2[9];
  uint64_t v4 = type metadata accessor for IntentFile();
  uint64_t result = OUTLINED_FUNCTION_32(v3, v5, v6, v4);
  *(void *)((char *)a1 + v2[10]) = MEMORY[0x263F8EE78];
  *(void *)((char *)a1 + v2[11]) = 0;
  unint64_t v8 = (void *)((char *)a1 + v2[12]);
  void *v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (void *)((char *)a1 + v2[13]);
  *uint64_t v9 = 0;
  v9[1] = 0;
  *((unsigned char *)a1 + v2[14]) = 0;
  uint64_t v10 = (void *)((char *)a1 + v2[15]);
  *uint64_t v10 = 0;
  v10[1] = 0;
  return result;
}

void AnswerMetadata.init(builder:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v109 = v1;
  uint64_t v103 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_184_0();
  uint64_t v101 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_185_0();
  uint64_t v100 = v8;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v9);
  uint64_t v99 = (uint64_t)&v93 - v10;
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_18_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String>);
  OUTLINED_FUNCTION_25_13();
  *(void *)&long long v111 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_15_15();
  uint64_t v13 = MEMORY[0x25A2C4900](v0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  *((void *)&v111 + 1) = v13;
  swift_retain();
  OUTLINED_FUNCTION_31_12();
  uint64_t v14 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_30_14();
  uint64_t v15 = MEMORY[0x25A2C4900](v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[SourceDocument]>);
  swift_retain();
  OUTLINED_FUNCTION_19_10();
  unint64_t v16 = lazy protocol witness table accessor for type SourceDocument and conformance SourceDocument();
  uint64_t v17 = MEMORY[0x25A2C4890](v0, v16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
  swift_retain();
  OUTLINED_FUNCTION_5_12();
  uint64_t v18 = MEMORY[0x25A2C48A0](v0);
  swift_retain();
  OUTLINED_FUNCTION_19_10();
  uint64_t v19 = MEMORY[0x25A2C4900](v0);
  swift_retain();
  OUTLINED_FUNCTION_5_12();
  uint64_t v20 = MEMORY[0x25A2C4900](v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]>);
  swift_retain();
  OUTLINED_FUNCTION_19_10();
  uint64_t v21 = MEMORY[0x25A2C4900](v0);
  uint64_t v107 = v109[1];
  uint64_t v108 = v17;
  uint64_t v105 = v15;
  uint64_t v106 = v21;
  uint64_t v104 = v19;
  uint64_t v110 = v20;
  if (!v107)
  {
    uint64_t v32 = v109;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logging.search);
    uint64_t v34 = (void *)Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    uint64_t v24 = v32;
    if (!OUTLINED_FUNCTION_29_13(v35)) {
      goto LABEL_21;
    }
    long long v36 = (_WORD *)swift_slowAlloc();
    *long long v36 = 0;
    OUTLINED_FUNCTION_51_9(&dword_257DC6000, v37, v38, "Attempting to create AnswerMetadata without id");
LABEL_20:
    MEMORY[0x25A2C94B0](v36, -1, -1);
LABEL_21:
    uint64_t v42 = v103;
    goto LABEL_22;
  }
  uint64_t v22 = v18;
  uint64_t v102 = v14;
  uint64_t v23 = v109[3];
  uint64_t v24 = v109;
  if (!v23)
  {
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logging.search);
    uint64_t v34 = (void *)Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.fault.getter();
    BOOL v41 = OUTLINED_FUNCTION_29_13(v40);
    uint64_t v42 = v103;
    if (!v41) {
      goto LABEL_22;
    }
    long long v36 = (_WORD *)swift_slowAlloc();
    *long long v36 = 0;
    uint64_t v45 = "Attempting to create AnswerMetadata without answer";
    goto LABEL_19;
  }
  uint64_t v98 = *v109;
  unint64_t v25 = v109[2];
  uint64_t v26 = type metadata accessor for AnswerMetadata.Builder();
  uint64_t v27 = *(void *)((char *)v24 + *(int *)(v26 + 40));
  if (*(void *)(v27 + 16))
  {
    uint64_t v95 = *(int *)(v26 + 40);
    uint64_t v96 = v26;
    uint64_t v28 = v24[7];
    unint64_t v94 = v25;
    uint64_t v29 = v107;
    swift_bridgeObjectRetain_n();
    uint64_t v30 = v106;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28) {
      uint64_t v31 = v28;
    }
    else {
      uint64_t v31 = Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v51 = MEMORY[0x263F8EE78];
    if (v24[6]) {
      uint64_t v51 = v24[6];
    }
    long long v128 = v111;
    uint64_t v129 = v102;
    uint64_t v130 = v105;
    uint64_t v131 = v108;
    uint64_t v132 = v31;
    uint64_t v133 = v22;
    uint64_t v134 = v104;
    uint64_t v135 = v110;
    uint64_t v136 = v27;
    uint64_t v97 = v27;
    long long v137 = xmmword_258665BD0;
    char v138 = 0;
    uint64_t v139 = v98;
    uint64_t v140 = v29;
    uint64_t v141 = v30;
    *(void *)&unsigned long long v112 = v51;
    uint64_t v52 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of AnswerMetadata((uint64_t)&v128);
    swift_bridgeObjectRetain();
    EntityProperty.wrappedValue.setter();
    outlined release of AnswerMetadata((uint64_t)&v128);
    uint64_t v53 = (int *)v96;
    uint64_t v54 = v99;
    outlined init with copy of FlightSnippet.Flight?((uint64_t)v109 + *(int *)(v96 + 36), v99, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    outlined init with copy of FlightSnippet.Flight?(v54, v100, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    outlined retain of AnswerMetadata((uint64_t)&v128);
    EntityProperty.wrappedValue.setter();
    outlined destroy of PQAVerificationModelProtocol?(v54, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    outlined release of AnswerMetadata((uint64_t)&v128);
    outlined retain of AnswerMetadata((uint64_t)&v128);
    swift_release();
    long long v55 = v53;
    swift_release();
    swift_release();
    swift_release();
    long long v56 = v109;
    uint64_t v57 = v104;
    swift_release();
    uint64_t v99 = v52;
    swift_bridgeObjectRelease();
    uint64_t v100 = v22;
    swift_release();
    uint64_t v58 = v57;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)&unsigned long long v112 = v94;
    *((void *)&v112 + 1) = v23;
    EntityProperty.wrappedValue.setter();
    outlined release of AnswerMetadata((uint64_t)&v128);
    uint64_t v59 = *(void **)((char *)v56 + v55[11]);
    if (v59)
    {
      id v60 = v59;
      uint64_t v61 = SFCard.data.getter();
      unint64_t v94 = v62;
    }
    else
    {
      uint64_t v61 = 0;
      unint64_t v94 = 0xF000000000000000;
    }
    uint64_t v63 = v101;
    outlined consume of Data?(0, 0xF000000000000000);
    specialized Collection.first.getter(*(void *)((char *)v56 + v95), v63);
    uint64_t v64 = type metadata accessor for SearchResult(0);
    OUTLINED_FUNCTION_53_2(v63, 1, v64);
    uint64_t v101 = v61;
    if (v65)
    {
      outlined destroy of PQAVerificationModelProtocol?(v63, &demangling cache variable for type metadata for SearchResult?);
    }
    else
    {
      id v66 = *(id *)(v63 + *(int *)(v64 + 20));
      outlined destroy of AnswerMetadata.Builder(v63, (void (*)(void))type metadata accessor for SearchResult);
      uint64_t v67 = outlined bridged method (ob) of @objc CSSearchableItem.bundleID.getter(v66);
      if (v68)
      {
        uint64_t v69 = v67;
        uint64_t v70 = v68;
        type metadata accessor for LocalIndexClient();
        uint64_t v71 = static LocalIndexClient.displayName(for:)(v69, v70);
        uint64_t v73 = v72;
        swift_bridgeObjectRelease();
        if (v73)
        {
          *(void *)&unsigned long long v112 = v71;
          *((void *)&v112 + 1) = v73;
LABEL_38:
          uint64_t v74 = *((void *)&v111 + 1);
          EntityProperty.wrappedValue.setter();
          uint64_t v75 = v56[5];
          *(void *)&unsigned long long v112 = v56[4];
          *((void *)&v112 + 1) = v75;
          swift_bridgeObjectRetain();
          uint64_t v76 = v102;
          EntityProperty.wrappedValue.setter();
          uint64_t v77 = (void *)((char *)v56 + v55[12]);
          uint64_t v78 = v77[1];
          *(void *)&unsigned long long v112 = *v77;
          *((void *)&v112 + 1) = v78;
          swift_bridgeObjectRetain();
          EntityProperty.wrappedValue.setter();
          uint64_t v79 = (void *)((char *)v56 + v55[13]);
          uint64_t v80 = v79[1];
          *(void *)&unsigned long long v112 = *v79;
          *((void *)&v112 + 1) = v80;
          swift_bridgeObjectRetain();
          uint64_t v81 = v110;
          EntityProperty.wrappedValue.setter();
          uint64_t v82 = v55[15];
          unsigned __int8 v83 = *((unsigned char *)v56 + v55[14]);
          LODWORD(v96) = v83;
          uint64_t v84 = *(void *)((char *)v56 + v82 + 8);
          *(void *)&unsigned long long v112 = *(void *)((char *)v56 + v82);
          *((void *)&v112 + 1) = v84;
          swift_bridgeObjectRetain();
          uint64_t v85 = v105;
          EntityProperty.wrappedValue.setter();
          unint64_t v86 = v111;
          *(void *)&unsigned long long v112 = v111;
          *((void *)&v112 + 1) = v74;
          uint64_t v113 = v76;
          uint64_t v114 = v85;
          uint64_t v87 = v107;
          uint64_t v88 = v99;
          uint64_t v115 = v108;
          uint64_t v116 = v99;
          uint64_t v117 = v100;
          uint64_t v118 = v58;
          uint64_t v89 = v97;
          uint64_t v119 = v81;
          uint64_t v120 = v97;
          unint64_t v90 = v94;
          uint64_t v121 = v101;
          unint64_t v122 = v94;
          char v123 = v83;
          uint64_t v91 = v98;
          uint64_t v125 = v98;
          uint64_t v126 = v107;
          uint64_t v92 = v106;
          uint64_t v127 = v106;
          *(void *)&unsigned long long v112 = AnswerMetadata.validTypeIdentifiers.getter();
          EntityProperty.wrappedValue.setter();
          outlined destroy of AnswerMetadata.Builder((uint64_t)v109, (void (*)(void))type metadata accessor for AnswerMetadata.Builder);
          *(_DWORD *)uint64_t v124 = v142[0];
          *(_DWORD *)&v124[3] = *(_DWORD *)((char *)v142 + 3);
          unsigned long long v112 = __PAIR128__(*((unint64_t *)&v111 + 1), v86);
          uint64_t v113 = v102;
          uint64_t v114 = v85;
          uint64_t v115 = v108;
          uint64_t v116 = v88;
          uint64_t v117 = v100;
          uint64_t v118 = v104;
          uint64_t v119 = v110;
          uint64_t v120 = v89;
          uint64_t v121 = v101;
          unint64_t v122 = v90;
          char v123 = v96;
          uint64_t v125 = v91;
          uint64_t v126 = v87;
          uint64_t v127 = v92;
          destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType(&v112);
          long long v49 = &v112;
          uint64_t v50 = v103;
          goto LABEL_39;
        }
      }
    }
    *(void *)&unsigned long long v112 = 0;
    *((void *)&v112 + 1) = 0xE000000000000000;
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logging.search);
  uint64_t v34 = (void *)Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.fault.getter();
  BOOL v48 = OUTLINED_FUNCTION_29_13(v47);
  uint64_t v42 = v103;
  if (v48)
  {
    long long v36 = (_WORD *)swift_slowAlloc();
    *long long v36 = 0;
    uint64_t v45 = "Attempting to create AnswerMetadata without SourceResult";
LABEL_19:
    OUTLINED_FUNCTION_51_9(&dword_257DC6000, v43, v44, v45);
    goto LABEL_20;
  }
LABEL_22:

  outlined destroy of AnswerMetadata.Builder((uint64_t)v24, (void (*)(void))type metadata accessor for AnswerMetadata.Builder);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(0, 0xF000000000000000);
  if (v107) {
    swift_bridgeObjectRelease();
  }
  swift_release();
  _s10OmniSearch18GenericEventEntityVSgWOi0_(&v128);
  long long v49 = (unsigned long long *)&v128;
  uint64_t v50 = v42;
LABEL_39:
  outlined init with take of PQAVerificationModelProtocol?((uint64_t)v49, v50, &demangling cache variable for type metadata for AnswerMetadata?);
  OUTLINED_FUNCTION_119_0();
}

uint64_t AnswerMetadata.supportedTypeIdentifiersForExport.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t AnswerMetadata.Builder.id.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t AnswerMetadata.Builder.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AnswerMetadata.Builder.id.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.Builder.answer.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t AnswerMetadata.Builder.answer.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AnswerMetadata.Builder.answer.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.Builder.title.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t AnswerMetadata.Builder.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*AnswerMetadata.Builder.title.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.Builder.sourceDocuments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnswerMetadata.Builder.sourceDocuments.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*AnswerMetadata.Builder.sourceDocuments.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.Builder.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnswerMetadata.Builder.metadata.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*AnswerMetadata.Builder.metadata.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.Builder.experienceFile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AnswerMetadata.Builder();
  return outlined init with copy of FlightSnippet.Flight?(v1 + *(int *)(v3 + 36), a1, (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
}

uint64_t AnswerMetadata.Builder.experienceFile.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_11_15() + 36);
  return outlined assign with take of IntentFile?(v0, v2);
}

uint64_t (*AnswerMetadata.Builder.experienceFile.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.Builder.sourceResults.getter()
{
  type metadata accessor for AnswerMetadata.Builder();
  return swift_bridgeObjectRetain();
}

uint64_t AnswerMetadata.Builder.sourceResults.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_11_15() + 40);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*AnswerMetadata.Builder.sourceResults.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

void *AnswerMetadata.Builder.card.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for AnswerMetadata.Builder() + 44));
  id v2 = v1;
  return v1;
}

void AnswerMetadata.Builder.card.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_11_15() + 44);

  *(void *)(v1 + v2) = v0;
}

uint64_t (*AnswerMetadata.Builder.card.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.Builder.globalSearchSummary.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t AnswerMetadata.Builder.globalSearchSummary.setter()
{
  uint64_t v3 = (void *)(v1 + *(int *)(OUTLINED_FUNCTION_37_11() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = v2;
  v3[1] = v0;
  return result;
}

uint64_t (*AnswerMetadata.Builder.globalSearchSummary.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.Builder.description.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t AnswerMetadata.Builder.description.setter()
{
  uint64_t v3 = (void *)(v1 + *(int *)(OUTLINED_FUNCTION_37_11() + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = v2;
  v3[1] = v0;
  return result;
}

uint64_t (*AnswerMetadata.Builder.description.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.Builder.lowConfidenceKnowledge.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AnswerMetadata.Builder() + 56));
}

uint64_t AnswerMetadata.Builder.lowConfidenceKnowledge.setter(char a1)
{
  uint64_t result = type metadata accessor for AnswerMetadata.Builder();
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*AnswerMetadata.Builder.lowConfidenceKnowledge.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.Builder.dialog.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t AnswerMetadata.Builder.dialog.setter()
{
  uint64_t v3 = (void *)(v1 + *(int *)(OUTLINED_FUNCTION_37_11() + 60));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = v2;
  v3[1] = v0;
  return result;
}

uint64_t (*AnswerMetadata.Builder.dialog.modify())(void)
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t default argument 6 of AnswerMetadata.Builder.init(id:answer:title:sourceDocuments:metadata:experienceFile:sourceResults:card:globalSearchSummary:description:lowConfidenceKnowledge:dialog:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 10 of AnswerMetadata.Builder.init(id:answer:title:sourceDocuments:metadata:experienceFile:sourceResults:card:globalSearchSummary:description:lowConfidenceKnowledge:dialog:)()
{
  return 0;
}

uint64_t AnswerMetadata.Builder.init(id:answer:title:sourceDocuments:metadata:experienceFile:sourceResults:card:globalSearchSummary:description:lowConfidenceKnowledge:dialog:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  uint64_t v20 = (int *)type metadata accessor for AnswerMetadata.Builder();
  uint64_t result = outlined init with take of PQAVerificationModelProtocol?(a10, (uint64_t)a9 + v20[9], (uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  *(void *)((char *)a9 + v20[10]) = a11;
  *(void *)((char *)a9 + v20[11]) = a12;
  uint64_t v22 = (void *)((char *)a9 + v20[12]);
  void *v22 = a13;
  v22[1] = a14;
  uint64_t v23 = (void *)((char *)a9 + v20[13]);
  *uint64_t v23 = a15;
  v23[1] = a16;
  *((unsigned char *)a9 + v20[14]) = a17;
  uint64_t v24 = (void *)((char *)a9 + v20[15]);
  *uint64_t v24 = a18;
  v24[1] = a19;
  return result;
}

uint64_t static AnswerMetadata.typeDisplayRepresentation.getter()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static AnswerMetadata.typeDisplayRepresentation);
  swift_beginAccess();
  OUTLINED_FUNCTION_51_2();
  return v1();
}

uint64_t static AnswerMetadata.typeDisplayRepresentation.setter(uint64_t a1)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static AnswerMetadata.typeDisplayRepresentation);
  swift_beginAccess();
  OUTLINED_FUNCTION_30_2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  uint64_t v5 = OUTLINED_FUNCTION_79_0();
  return v6(v5);
}

uint64_t (*static AnswerMetadata.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static AnswerMetadata.typeDisplayRepresentation);
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t AnswerMetadata.displayRepresentation.getter()
{
  uint64_t v1 = type metadata accessor for LocalizedStringResource();
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15();
  uint64_t v3 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_59_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RGPluginModel?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_20_12();
  type metadata accessor for SFCard();
  outlined copy of Data?(v19, v20);
  id v7 = SFCard.init(data:)(v19, v20);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = v7;
  SFCard.snippetPluginModel.getter(v0);

  uint64_t v9 = type metadata accessor for RGPluginModel();
  OUTLINED_FUNCTION_53_2((uint64_t)v0, 1, v9);
  if (v10)
  {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v0, &demangling cache variable for type metadata for RGPluginModel?);
LABEL_6:
    outlined retain of AnswerMetadata((uint64_t)v18);
    EntityProperty.wrappedValue.getter();
    outlined release of AnswerMetadata((uint64_t)v18);
    return DisplayRepresentation.init(stringLiteral:)();
  }
  _s16IntelligenceFlow13RGPluginModelOAC10SnippetKit0e6PluginD0AAWlTm_1((uint64_t)&lazy protocol witness table cache variable for type RGPluginModel and conformance RGPluginModel);
  SnippetPluginModel.data.getter();
  unint64_t v12 = v11;
  OUTLINED_FUNCTION_16_1();
  v13();
  if (v12 >> 60 == 15) {
    goto LABEL_6;
  }
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
  outlined retain of AnswerMetadata((uint64_t)v18);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)v18);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v17);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  LocalizedStringResource.init(stringInterpolation:)();
  static RGPluginModel.bundleName.getter();
  return DisplayRepresentation.init(title:snippetPluginModelData:bundleIdentifier:)();
}

uint64_t AnswerMetadata.id.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t AnswerMetadata.Query.entities(for:)()
{
  return SearchAppEntity.Query.entities(for:)(*(uint64_t (**)(uint64_t))(v0 + 8), v0, MEMORY[0x263F8EE78]);
}

uint64_t protocol witness for EntityQuery.entities(for:) in conformance AnswerMetadata.Query()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for EntityQuery.entities(for:) in conformance SearchAppEntity.Query;
  return AnswerMetadata.Query.entities(for:)();
}

uint64_t protocol witness for DynamicOptionsProvider.results() in conformance AnswerMetadata.Query(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = lazy protocol witness table accessor for type AnswerMetadata.Query and conformance AnswerMetadata.Query();
  void *v5 = v2;
  v5[1] = protocol witness for DynamicOptionsProvider.results() in conformance SearchAppEntity.Query;
  return MEMORY[0x270EE0E40](a1, a2, v6);
}

uint64_t (*static AnswerMetadata.defaultQuery.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t AnswerMetadata.supportedTypeIdentifiersForExport.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for AnswerMetadata.supportedTypeIdentifiersForExport : AnswerMetadata()
{
  return AnswerMetadata.supportedTypeIdentifiersForExport.setter();
}

uint64_t (*AnswerMetadata.supportedTypeIdentifiersForExport.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t AnswerMetadata.$supportedTypeIdentifiersForExport.getter()
{
  return EntityProperty.projectedValue.getter();
}

void static AnswerMetadata.transferRepresentation.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataRepresentation<AnswerMetadata>, ProxyRepresentation<AnswerMetadata, String>));
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_18_8();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProxyRepresentation<AnswerMetadata, String>);
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataRepresentation<AnswerMetadata>);
  OUTLINED_FUNCTION_1();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_14_10();
  lazy protocol witness table accessor for type AnswerMetadata and conformance AnswerMetadata();
  lazy protocol witness table accessor for type AnswerMetadata and conformance AnswerMetadata();
  static ExperienceProviding<>.experienceTransferableRepresentation()();
  lazy protocol witness table accessor for type String and conformance String();
  ProxyRepresentation.init(exporting:)();
  uint64_t v14 = v0 + *(int *)(v2 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v0, v1, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v14, v9, v15);
  TupleTransferRepresentation.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v10);
  OUTLINED_FUNCTION_119_0();
}

uint64_t specialized implicit closure #1 in static AnswerMetadata.transferRepresentation.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = EntityProperty.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t AnswerMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726577736E61 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x746E656D75636F64 && a2 == 0xEE00656372756F53;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x676F6C616964 && a2 == 0xE600000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x6F44656372756F73 && a2 == 0xEF73746E656D7563;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x617461646174656DLL && a2 == 0xE800000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x6E65697265707865 && a2 == 0xEE00656C69466563;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0xD000000000000013 && a2 == 0x8000000258680250 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                BOOL v12 = a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  BOOL v13 = a1 == 0x6552656372756F73 && a2 == 0xED000073746C7573;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x6174614464726163 && a2 == 0xE800000000000000;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else if (a1 == 0xD000000000000016 && a2 == 0x8000000258680270 {
                           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    }
                    {
                      swift_bridgeObjectRelease();
                      return 11;
                    }
                    else
                    {
                      BOOL v15 = a1 == 25705 && a2 == 0xE200000000000000;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 12;
                      }
                      else if (a1 == 0xD000000000000021 && a2 == 0x80000002586801A0)
                      {
                        swift_bridgeObjectRelease();
                        return 13;
                      }
                      else
                      {
                        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        if (v16) {
                          return 13;
                        }
                        else {
                          return 14;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t AnswerMetadata.CodingKeys.init(intValue:)()
{
  return 14;
}

uint64_t AnswerMetadata.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x726577736E61;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x746E656D75636F64;
      break;
    case 2:
      uint64_t result = 0x656C746974;
      break;
    case 3:
      uint64_t result = 0x676F6C616964;
      break;
    case 4:
      uint64_t result = 0x6F44656372756F73;
      break;
    case 5:
      uint64_t v3 = 0x61646174656DLL;
      goto LABEL_12;
    case 6:
      uint64_t result = 0x6E65697265707865;
      break;
    case 7:
      uint64_t result = 0xD000000000000013;
      break;
    case 8:
      uint64_t result = 0x7470697263736564;
      break;
    case 9:
      uint64_t result = 0x6552656372756F73;
      break;
    case 10:
      uint64_t v3 = 0x614464726163;
LABEL_12:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6174000000000000;
      break;
    case 11:
      uint64_t result = 0xD000000000000016;
      break;
    case 12:
      uint64_t result = 25705;
      break;
    case 13:
      uint64_t result = 0xD000000000000021;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnswerMetadata.CodingKeys()
{
  return AnswerMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnswerMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = AnswerMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AnswerMetadata.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AnswerMetadata.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnswerMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnswerMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AnswerMetadata.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnswerMetadata.CodingKeys>);
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_59_0();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String>);
  _s10AppIntents14EntityPropertyCySSGACyxGSEAASeRzSERzrlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type EntityProperty<String> and conformance <> EntityProperty<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    OUTLINED_FUNCTION_6_17();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
    lazy protocol witness table accessor for type EntityProperty<String?> and conformance <> EntityProperty<A>();
    OUTLINED_FUNCTION_6_17();
    OUTLINED_FUNCTION_6_17();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[SourceDocument]>);
    lazy protocol witness table accessor for type EntityProperty<[SourceDocument]> and conformance <> EntityProperty<A>();
    OUTLINED_FUNCTION_39_8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    _s10AppIntents14EntityPropertyCySSGACyxGSEAASeRzSERzrlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_34_11();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<IntentFile?>);
    lazy protocol witness table accessor for type EntityProperty<IntentFile?> and conformance <> EntityProperty<A>();
    OUTLINED_FUNCTION_34_11();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_24_14(7);
    OUTLINED_FUNCTION_24_14(8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchResult]);
    lazy protocol witness table accessor for type [SearchResult] and conformance <A> [A]();
    OUTLINED_FUNCTION_39_8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    lazy protocol witness table accessor for type Data and conformance Data();
    OUTLINED_FUNCTION_39_8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]>);
    lazy protocol witness table accessor for type EntityProperty<[String]> and conformance <> EntityProperty<A>();
    OUTLINED_FUNCTION_34_11();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnswerMetadata(void *a1)
{
  return AnswerMetadata.encode(to:)(a1);
}

uint64_t static AnswerMetadata.== infix(_:_:)(void *__src, const void *a2)
{
  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v18, a2, sizeof(v18));
  BOOL v3 = __dst[13] == v18[13] && __dst[14] == v18[14];
  if (v3 || (v4 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v5 = 0, (v4 & 1) != 0))
  {
    outlined retain of AnswerMetadata((uint64_t)__dst);
    EntityProperty.wrappedValue.getter();
    outlined release of AnswerMetadata((uint64_t)__dst);
    outlined retain of AnswerMetadata((uint64_t)v18);
    EntityProperty.wrappedValue.getter();
    outlined release of AnswerMetadata((uint64_t)v18);
    swift_bridgeObjectRelease_n();
    outlined retain of AnswerMetadata((uint64_t)__dst);
    EntityProperty.wrappedValue.getter();
    outlined release of AnswerMetadata((uint64_t)__dst);
    outlined retain of AnswerMetadata((uint64_t)v18);
    EntityProperty.wrappedValue.getter();
    outlined release of AnswerMetadata((uint64_t)v18);
    swift_bridgeObjectRelease_n();
    outlined retain of AnswerMetadata((uint64_t)__dst);
    EntityProperty.wrappedValue.getter();
    outlined release of AnswerMetadata((uint64_t)__dst);
    outlined retain of AnswerMetadata((uint64_t)v18);
    EntityProperty.wrappedValue.getter();
    outlined release of AnswerMetadata((uint64_t)v18);
    uint64_t v6 = OUTLINED_FUNCTION_79_0();
    specialized static Array<A>.== infix(_:_:)(v6, v7);
    OUTLINED_FUNCTION_44_11();
    swift_bridgeObjectRelease();
    if (v15 & 1) != 0 && (specialized static Dictionary<>.== infix(_:_:)(__dst[5], v18[5]))
    {
      outlined retain of AnswerMetadata((uint64_t)__dst);
      EntityProperty.wrappedValue.getter();
      outlined release of AnswerMetadata((uint64_t)__dst);
      outlined retain of AnswerMetadata((uint64_t)v18);
      EntityProperty.wrappedValue.getter();
      outlined release of AnswerMetadata((uint64_t)v18);
      if (v16)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      specialized static Array<A>.== infix(_:_:)(__dst[9], v18[9], v8, v9, v10, v11, v12, v13, v15, v16, __dst[0], __dst[1], __dst[2], __dst[3], __dst[4], __dst[5], __dst[6], __dst[7], __dst[8],
        __dst[9]);
    }
    else
    {
      char v5 = 0;
    }
  }
  return v5 & 1;
}

void protocol witness for ValidatableEntity.validateParameters() in conformance AnswerMetadata()
{
}

uint64_t protocol witness for ExperienceProviding.experienceSourceType.getter in conformance AnswerMetadata@<X0>(uint64_t a1@<X8>)
{
  return AnswerMetadata.experienceSourceType.getter(a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance AnswerMetadata@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnswerMetadata.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance AnswerMetadata(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnswerMetadata and conformance AnswerMetadata();
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance AnswerMetadata(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnswerMetadata and conformance AnswerMetadata();
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v26 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v26) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v26) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v26) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v26) {
            return 1;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_24:
    BOOL v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    Swift::String v17 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v10);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v23 = (void *)(*(void *)(a2 + 56) + 16 * v20);
    if (*v23 == v19 && v23[1] == v18)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v25 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v26) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v26) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

void AnswerMetadata.asNLGEntity.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = v2;
  uint64_t v86 = type metadata accessor for RestaurantReservation(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_184_0();
  uint64_t v6 = OUTLINED_FUNCTION_22_13(v5);
  uint64_t v89 = type metadata accessor for HotelReservation(v6);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_184_0();
  uint64_t v88 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_185_0();
  uint64_t v94 = v11;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v12);
  BOOL v14 = (char *)&v85 - v13;
  uint64_t v15 = type metadata accessor for SearchResultItem(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_185_0();
  uint64_t v90 = v17;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v18);
  uint64_t v91 = (uint64_t)&v85 - v19;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = OUTLINED_FUNCTION_22_13((uint64_t)&v85 - v21);
  uint64_t v92 = type metadata accessor for FlightReservation(v22);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_184_0();
  uint64_t v25 = OUTLINED_FUNCTION_22_13(v24);
  uint64_t v26 = type metadata accessor for SearchResult(v25);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_14_10();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v29 = OUTLINED_FUNCTION_81(v28);
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_185_0();
  uint64_t v97 = v30;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v85 - v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
  uint64_t v35 = OUTLINED_FUNCTION_81(v34);
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_185_0();
  uint64_t v98 = v36;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = (char *)&v85 - v38;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v85 - v41;
  memcpy(v101, v0, 0x80uLL);
  SearchNLGEntity.init()(v3);
  outlined retain of AnswerMetadata((uint64_t)v101);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)v101);
  EntityProperty.wrappedValue.setter();
  outlined retain of AnswerMetadata((uint64_t)v101);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)v101);
  EntityProperty.wrappedValue.setter();
  outlined retain of AnswerMetadata((uint64_t)v101);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)v101);
  EntityProperty.wrappedValue.setter();
  outlined retain of AnswerMetadata((uint64_t)v101);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)v101);
  EntityProperty.wrappedValue.setter();
  uint64_t v43 = v101[9];
  specialized Collection.first.getter(v101[9], (uint64_t)v42);
  OUTLINED_FUNCTION_53_2((uint64_t)v42, 1, v26);
  uint64_t v96 = v15;
  if (v44)
  {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v42, &demangling cache variable for type metadata for SearchResult?);
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v45 = v1;
    id v46 = *(id *)&v42[*(int *)(v26 + 20)];
    outlined destroy of AnswerMetadata.Builder((uint64_t)v42, (void (*)(void))type metadata accessor for SearchResult);
    uint64_t v47 = CSSearchableItem.senderNames.getter();

    uint64_t v1 = v45;
  }
  uint64_t v99 = v47;
  EntityProperty.wrappedValue.setter();
  specialized Collection.first.getter(v43, (uint64_t)v39);
  OUTLINED_FUNCTION_53_2((uint64_t)v39, 1, v26);
  if (v44)
  {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v39, &demangling cache variable for type metadata for SearchResult?);
    uint64_t v48 = type metadata accessor for Date();
    OUTLINED_FUNCTION_32((uint64_t)v33, v49, v50, v48);
  }
  else
  {
    id v51 = *(id *)&v39[*(int *)(v26 + 20)];
    outlined destroy of AnswerMetadata.Builder((uint64_t)v39, (void (*)(void))type metadata accessor for SearchResult);
    CSSearchableItem.contentCreationDate.getter((uint64_t)v33);
  }
  outlined init with copy of FlightSnippet.Flight?((uint64_t)v33, v97, &demangling cache variable for type metadata for Date?);
  EntityProperty.wrappedValue.setter();
  outlined destroy of PQAVerificationModelProtocol?((uint64_t)v33, &demangling cache variable for type metadata for Date?);
  uint64_t v52 = v98;
  specialized Collection.first.getter(v43, v98);
  OUTLINED_FUNCTION_53_2(v52, 1, v26);
  if (!v44)
  {
    _s10OmniSearch0B6ResultVWObTm_3(v52, v1, (void (*)(void))type metadata accessor for SearchResult);
    uint64_t v53 = v95;
    outlined init with copy of AnswerMetadata.Builder(v1, v95, (void (*)(void))type metadata accessor for SearchResultItem);
    uint64_t v54 = v96;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 15)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: FlightReservation, experiences: [DialogExperience]));
      swift_bridgeObjectRelease();
      uint64_t v56 = v93;
      _s10OmniSearch0B6ResultVWObTm_3(v53, v93, (void (*)(void))type metadata accessor for FlightReservation);
      uint64_t v57 = *(void *)(v56 + 112);
      uint64_t v99 = *(void *)(v56 + 104);
      uint64_t v100 = v57;
      swift_bridgeObjectRetain();
      EntityProperty.wrappedValue.setter();
      uint64_t v58 = v92;
      uint64_t v59 = OUTLINED_FUNCTION_35_10(*(int *)(v92 + 60));
      uint64_t v99 = v60;
      uint64_t v100 = v59;
      swift_bridgeObjectRetain();
      EntityProperty.wrappedValue.setter();
      uint64_t v61 = type metadata accessor for DateComponents();
      OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_51_2();
      v62();
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v61);
      OUTLINED_FUNCTION_28_10();
      EntityProperty.wrappedValue.setter();
      OUTLINED_FUNCTION_43_11();
      uint64_t v63 = OUTLINED_FUNCTION_35_10(*(int *)(v58 + 88));
      uint64_t v99 = v64;
      uint64_t v100 = v63;
      swift_bridgeObjectRetain();
      EntityProperty.wrappedValue.setter();
      uint64_t v65 = OUTLINED_FUNCTION_35_10(*(int *)(v58 + 92));
      uint64_t v99 = v66;
      uint64_t v100 = v65;
      swift_bridgeObjectRetain();
      EntityProperty.wrappedValue.setter();
      uint64_t v67 = type metadata accessor for FlightReservation;
    }
    else
    {
      outlined destroy of AnswerMetadata.Builder(v53, (void (*)(void))type metadata accessor for SearchResultItem);
      uint64_t v68 = v91;
      outlined init with copy of AnswerMetadata.Builder(v1, v91, (void (*)(void))type metadata accessor for SearchResultItem);
      if (swift_getEnumCaseMultiPayload() != 16)
      {
        outlined destroy of AnswerMetadata.Builder(v68, (void (*)(void))type metadata accessor for SearchResultItem);
        uint64_t v78 = v90;
        outlined init with copy of AnswerMetadata.Builder(v1, v90, (void (*)(void))type metadata accessor for SearchResultItem);
        if (swift_getEnumCaseMultiPayload() != 17)
        {
          outlined destroy of AnswerMetadata.Builder(v1, (void (*)(void))type metadata accessor for SearchResult);
          uint64_t v76 = type metadata accessor for SearchResultItem;
          uint64_t v77 = v78;
          goto LABEL_16;
        }
        uint64_t v79 = v87;
        _s10OmniSearch0B6ResultVWObTm_3(v78, v87, (void (*)(void))type metadata accessor for RestaurantReservation);
        uint64_t v80 = v86;
        uint64_t v81 = (uint64_t *)(v79 + *(int *)(v86 + 64));
        uint64_t v82 = v81[1];
        uint64_t v99 = *v81;
        uint64_t v100 = v82;
        swift_bridgeObjectRetain();
        EntityProperty.wrappedValue.setter();
        unsigned __int8 v83 = (uint64_t *)(v79 + *(int *)(v80 + 72));
        uint64_t v84 = v83[1];
        uint64_t v99 = *v83;
        uint64_t v100 = v84;
        swift_bridgeObjectRetain();
        EntityProperty.wrappedValue.setter();
        OUTLINED_FUNCTION_49_8(v79 + *(int *)(v80 + 56));
        outlined init with copy of FlightSnippet.Flight?((uint64_t)v14, v94, &demangling cache variable for type metadata for DateComponents?);
        EntityProperty.wrappedValue.setter();
        OUTLINED_FUNCTION_43_11();
        uint64_t v74 = type metadata accessor for RestaurantReservation;
        uint64_t v75 = v79;
LABEL_15:
        outlined destroy of AnswerMetadata.Builder(v75, (void (*)(void))v74);
        uint64_t v76 = type metadata accessor for SearchResult;
        uint64_t v77 = v1;
LABEL_16:
        outlined destroy of AnswerMetadata.Builder(v77, (void (*)(void))v76);
        goto LABEL_17;
      }
      uint64_t v56 = v88;
      _s10OmniSearch0B6ResultVWObTm_3(v68, v88, (void (*)(void))type metadata accessor for HotelReservation);
      uint64_t v69 = (int *)v89;
      uint64_t v70 = OUTLINED_FUNCTION_35_10(*(int *)(v89 + 64));
      uint64_t v99 = v71;
      uint64_t v100 = v70;
      swift_bridgeObjectRetain();
      EntityProperty.wrappedValue.setter();
      uint64_t v72 = OUTLINED_FUNCTION_35_10(v69[19]);
      uint64_t v99 = v73;
      uint64_t v100 = v72;
      swift_bridgeObjectRetain();
      EntityProperty.wrappedValue.setter();
      OUTLINED_FUNCTION_49_8(v56 + v69[14]);
      OUTLINED_FUNCTION_28_10();
      EntityProperty.wrappedValue.setter();
      OUTLINED_FUNCTION_43_11();
      OUTLINED_FUNCTION_49_8(v56 + v69[15]);
      outlined init with copy of FlightSnippet.Flight?((uint64_t)v14, v54, &demangling cache variable for type metadata for DateComponents?);
      EntityProperty.wrappedValue.setter();
      OUTLINED_FUNCTION_43_11();
      uint64_t v67 = type metadata accessor for HotelReservation;
    }
    uint64_t v74 = v67;
    uint64_t v75 = v56;
    goto LABEL_15;
  }
  outlined destroy of PQAVerificationModelProtocol?(v52, &demangling cache variable for type metadata for SearchResult?);
LABEL_17:
  OUTLINED_FUNCTION_119_0();
}

void AnswerMetadata.asCATEntity.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_3_18();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - v14;
  memcpy(v29, v0, sizeof(v29));
  SearchCATEntity.init()(v3);
  outlined retain of AnswerMetadata((uint64_t)v29);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)v29);
  uint64_t v16 = v27;
  uint64_t v17 = v28;
  type metadata accessor for SearchCATEntity();
  uint64_t v27 = v16;
  uint64_t v28 = v17;
  EntityProperty.wrappedValue.setter();
  outlined retain of AnswerMetadata((uint64_t)v29);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)v29);
  EntityProperty.wrappedValue.setter();
  outlined retain of AnswerMetadata((uint64_t)v29);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata((uint64_t)v29);
  EntityProperty.wrappedValue.setter();
  uint64_t v18 = v29[9];
  specialized Collection.first.getter(v29[9], (uint64_t)v15);
  uint64_t v19 = type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_53_2((uint64_t)v15, 1, v19);
  if (v20)
  {
    outlined destroy of PQAVerificationModelProtocol?((uint64_t)v15, &demangling cache variable for type metadata for SearchResult?);
    uint64_t v22 = 0;
  }
  else
  {
    id v21 = *(id *)&v15[*(int *)(v19 + 20)];
    outlined destroy of AnswerMetadata.Builder((uint64_t)v15, (void (*)(void))type metadata accessor for SearchResult);
    uint64_t v22 = CSSearchableItem.senderNames.getter();
  }
  uint64_t v27 = v22;
  EntityProperty.wrappedValue.setter();
  specialized Collection.first.getter(v18, v1);
  OUTLINED_FUNCTION_53_2(v1, 1, v19);
  if (v20)
  {
    outlined destroy of PQAVerificationModelProtocol?(v1, &demangling cache variable for type metadata for SearchResult?);
    uint64_t v23 = type metadata accessor for Date();
    OUTLINED_FUNCTION_32((uint64_t)v10, v24, v25, v23);
  }
  else
  {
    id v26 = *(id *)(v1 + *(int *)(v19 + 20));
    outlined destroy of AnswerMetadata.Builder(v1, (void (*)(void))type metadata accessor for SearchResult);
    CSSearchableItem.contentCreationDate.getter((uint64_t)v10);
  }
  outlined init with copy of FlightSnippet.Flight?((uint64_t)v10, (uint64_t)v8, &demangling cache variable for type metadata for Date?);
  EntityProperty.wrappedValue.setter();
  outlined destroy of PQAVerificationModelProtocol?((uint64_t)v10, &demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_119_0();
}

uint64_t type metadata accessor for AnswerMetadata.Builder()
{
  uint64_t result = type metadata singleton initialization cache for AnswerMetadata.Builder;
  if (!type metadata singleton initialization cache for AnswerMetadata.Builder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined assign with take of IntentFile?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerMetadata.CodingKeys and conformance AnswerMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EntityProperty<[SourceDocument]> and conformance <> EntityProperty<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EntityProperty<[SourceDocument]> and conformance <> EntityProperty<A>;
  if (!lazy protocol witness table cache variable for type EntityProperty<[SourceDocument]> and conformance <> EntityProperty<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for EntityProperty<[SourceDocument]>);
    lazy protocol witness table accessor for type [SourceDocument] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [SourceDocument] and conformance <A> [A]);
    lazy protocol witness table accessor for type [SourceDocument] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [SourceDocument] and conformance <A> [A]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityProperty<[SourceDocument]> and conformance <> EntityProperty<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SourceDocument] and conformance <A> [A](uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_160_1(a1);
  if (!result)
  {
    OUTLINED_FUNCTION_38_8(0, v4);
    v2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t _s10AppIntents14EntityPropertyCySSGACyxGSEAASeRzSERzrlWlTm_0(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_160_1(a1);
  if (!result)
  {
    OUTLINED_FUNCTION_38_8(0, v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SearchResult] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchResult]);
    _s16IntelligenceFlow13RGPluginModelOAC10SnippetKit0e6PluginD0AAWlTm_1((uint64_t)&lazy protocol witness table cache variable for type SearchResult and conformance SearchResult);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchResult]);
    lazy protocol witness table accessor for type Date and conformance Date((uint64_t)&lazy protocol witness table cache variable for type SearchResult and conformance SearchResult);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SearchResult] and conformance <A> [A]);
  }
  return result;
}

unint64_t _s16IntelligenceFlow13RGPluginModelOAC10SnippetKit0e6PluginD0AAWlTm_1(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_160_1(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t outlined init with copy of AnswerMetadata.Builder(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_51_2();
  v4();
  return a2;
}

uint64_t _s10OmniSearch0B6ResultVWObTm_3(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_7_2();
  uint64_t v4 = OUTLINED_FUNCTION_211();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of AnswerMetadata.Builder(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_16_1();
  v3();
  return a1;
}

unint64_t lazy protocol witness table accessor for type AnswerMetadata.Query and conformance AnswerMetadata.Query()
{
  unint64_t result = lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query;
  if (!lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query;
  if (!lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query;
  if (!lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query;
  if (!lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerMetadata.Query and conformance AnswerMetadata.Query);
  }
  return result;
}

unint64_t associated type witness table accessor for DynamicOptionsProvider.Result : ResultsCollection in AnswerMetadata.Query()
{
  return lazy protocol witness table accessor for type [SourceDocument] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [AnswerMetadata] and conformance <A> [A]);
}

uint64_t associated type witness table accessor for Transferable.Representation : TransferRepresentation in AnswerMetadata()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in AnswerMetadata()
{
  return _sSaySSGSayxGSKsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type EmptyResolverSpecification<AnswerMetadata> and conformance EmptyResolverSpecification<A>);
}

uint64_t sub_258375414()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = AnswerMetadata.answer.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_258375440()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = AnswerMetadata.documentSource.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_25837546C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = AnswerMetadata.title.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_258375494(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AnswerMetadata.title : AnswerMetadata(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))AnswerMetadata.title.setter);
}

uint64_t sub_2583754C0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = AnswerMetadata.dialog.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583754E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AnswerMetadata.title : AnswerMetadata(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))AnswerMetadata.dialog.setter);
}

uint64_t sub_258375514()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = AnswerMetadata.sourceDocuments.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_258375540()
{
  return AnswerMetadata.experienceFile.getter();
}

uint64_t sub_258375568()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = AnswerMetadata.globalSearchSummary.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_258375590(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AnswerMetadata.title : AnswerMetadata(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))AnswerMetadata.globalSearchSummary.setter);
}

uint64_t sub_2583755BC()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = AnswerMetadata.description.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583755E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AnswerMetadata.title : AnswerMetadata(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))AnswerMetadata.description.setter);
}

id sub_258375610()
{
  OUTLINED_FUNCTION_13_7();
  id result = AnswerMetadata.card.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_25837563C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = AnswerMetadata.supportedTypeIdentifiersForExport.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t destroy for AnswerMetadata(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 88);
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(a1 + 80), v2);
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for AnswerMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v12 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v12;
  uint64_t v13 = (uint64_t *)(a2 + 80);
  unint64_t v8 = *(void *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v13;
  }
  else
  {
    uint64_t v9 = *v13;
    outlined copy of Data._Representation(*v13, v8);
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v8;
  }
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnswerMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 80);
  unint64_t v5 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, *(void *)(a2 + 88));
      uint64_t v8 = *(void *)(a1 + 80);
      unint64_t v9 = *(void *)(a1 + 88);
      *(void *)(a1 + 80) = v7;
      *(void *)(a1 + 88) = v5;
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_8;
    }
    outlined destroy of Data(a1 + 80);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, *(void *)(a2 + 88));
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v5;
LABEL_8:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnswerMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)(a2 + 80);
  unint64_t v5 = *(void *)(a1 + 88);
  if (v5 >> 60 != 15)
  {
    unint64_t v6 = *(void *)(a2 + 88);
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = *v4;
      *(void *)(a1 + 88) = v6;
      outlined consume of Data._Representation(v7, v5);
      goto LABEL_6;
    }
    outlined destroy of Data(a1 + 80);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v4;
LABEL_6:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AnswerMetadata()
{
  return &type metadata for AnswerMetadata;
}

void *initializeBufferWithCopyOfBuffer for AnswerMetadata.Builder(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    uint64_t v11 = a3[9];
    __dst = (char *)a1 + v11;
    uint64_t v12 = (char *)a2 + v11;
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v13 = type metadata accessor for IntentFile();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
      memcpy(__dst, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(__dst, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v13);
    }
    uint64_t v16 = a3[11];
    *(void *)((char *)v4 + a3[10]) = *(void *)((char *)a2 + a3[10]);
    uint64_t v17 = *(void **)((char *)a2 + v16);
    *(void *)((char *)v4 + v16) = v17;
    uint64_t v18 = a3[12];
    uint64_t v19 = a3[13];
    char v20 = (void *)((char *)v4 + v18);
    id v21 = (void *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *char v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (void *)((char *)v4 + v19);
    uint64_t v24 = (void *)((char *)a2 + v19);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = a3[15];
    *((unsigned char *)v4 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    uint64_t v27 = (void *)((char *)v4 + v26);
    uint64_t v28 = (void *)((char *)a2 + v26);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain();
    id v30 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AnswerMetadata.Builder(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for IntentFile();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AnswerMetadata.Builder(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  uint64_t v10 = a3[9];
  __dst = (char *)a1 + v10;
  uint64_t v11 = (char *)a2 + v10;
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v12 = type metadata accessor for IntentFile();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    memcpy(__dst, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(__dst, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v12);
  }
  uint64_t v14 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  uint64_t v15 = *(void **)((char *)a2 + v14);
  *(void *)((char *)a1 + v14) = v15;
  uint64_t v16 = a3[12];
  uint64_t v17 = a3[13];
  uint64_t v18 = (void *)((char *)a1 + v16);
  uint64_t v19 = (void *)((char *)a2 + v16);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  id v21 = (void *)((char *)a1 + v17);
  uint64_t v22 = (void *)((char *)a2 + v17);
  uint64_t v23 = v22[1];
  void *v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  uint64_t v27 = v26[1];
  void *v25 = *v26;
  v25[1] = v27;
  swift_bridgeObjectRetain();
  id v28 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AnswerMetadata.Builder(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[9];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IntentFile();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[11];
  uint64_t v15 = *(void **)((char *)a1 + v14);
  uint64_t v16 = *(void **)((char *)a2 + v14);
  *(void *)((char *)a1 + v14) = v16;
  id v17 = v16;

  uint64_t v18 = a3[12];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[13];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  void *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v24 = a3[15];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  void *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for AnswerMetadata.Builder(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[9];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for IntentFile();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  uint64_t v14 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  uint64_t v15 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

void *assignWithTake for AnswerMetadata.Builder(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[9];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for IntentFile();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
LABEL_7:
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[11];
  uint64_t v18 = *(void **)((char *)a1 + v17);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);

  uint64_t v19 = a3[12];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[13];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  void *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  id v30 = (void *)((char *)a1 + v29);
  uint64_t v31 = (void *)((char *)a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *id v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnswerMetadata.Builder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_258376674);
}

uint64_t sub_258376674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 36);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 40));
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AnswerMetadata.Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_258376720);
}

void sub_258376720(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentFile?);
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 36);
    __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  }
}

void type metadata completion function for AnswerMetadata.Builder()
{
  type metadata accessor for IntentFile?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for IntentFile?()
{
  if (!lazy cache variable for type metadata for IntentFile?)
  {
    type metadata accessor for IntentFile();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IntentFile?);
    }
  }
}

ValueMetadata *type metadata accessor for AnswerMetadata.Query()
{
  return &type metadata for AnswerMetadata.Query;
}

unint64_t sub_2583768EC()
{
  return _sSaySSGSayxGSKsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type TupleTransferRepresentation<AnswerMetadata, (DataRepresentation<AnswerMetadata>, ProxyRepresentation<AnswerMetadata, String>)> and conformance TupleTransferRepresentation<A, B>);
}

uint64_t getEnumTagSinglePayload for AnswerMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 13) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v5 = v6 - 14;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AnswerMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x258376A7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AnswerMetadata.CodingKeys()
{
  return &unk_2706AB688;
}

uint64_t OUTLINED_FUNCTION_5_12()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_6_17()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_11_15()
{
  return type metadata accessor for AnswerMetadata.Builder();
}

uint64_t OUTLINED_FUNCTION_15_15()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void *OUTLINED_FUNCTION_20_12()
{
  return memcpy((void *)(v1 - 192), v0, 0x80uLL);
}

uint64_t OUTLINED_FUNCTION_24_14@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_25_13()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_28_10()
{
  uint64_t v4 = *(void *)(v2 - 280);
  return outlined init with copy of FlightSnippet.Flight?(v1, v4, v0);
}

BOOL OUTLINED_FUNCTION_29_13(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_30_14()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_31_12()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_34_11()
{
  return v0 - 96;
}

uint64_t OUTLINED_FUNCTION_35_10@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1 + 8);
}

void OUTLINED_FUNCTION_36_10()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_37_11()
{
  return type metadata accessor for AnswerMetadata.Builder();
}

uint64_t OUTLINED_FUNCTION_38_8(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
}

uint64_t OUTLINED_FUNCTION_39_8()
{
  return v0 - 96;
}

uint64_t OUTLINED_FUNCTION_43_11()
{
  return outlined destroy of PQAVerificationModelProtocol?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_44_11()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_49_8(uint64_t a1)
{
  return outlined init with copy of FlightSnippet.Flight?(a1, v2, v1);
}

void OUTLINED_FUNCTION_51_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 2u);
}

double SearchNLGEntity.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_14_18();
  *(void *)a1 = v6;
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + 8) = MEMORY[0x25A2C4900](v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]?>);
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + 16) = MEMORY[0x25A2C4900](v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Date?>);
  OUTLINED_FUNCTION_11_16();
  *(void *)(a1 + 24) = MEMORY[0x25A2C48F0](v5);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_14_18();
  *(void *)(a1 + 32) = v7;
  OUTLINED_FUNCTION_15_16();
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + 40) = MEMORY[0x25A2C4900](v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<DateComponents?>);
  OUTLINED_FUNCTION_11_16();
  *(void *)(a1 + 48) = MEMORY[0x25A2C48D0](v5);
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_14_18();
  *(void *)(a1 + 56) = v8;
  OUTLINED_FUNCTION_50_6();
  *(void *)(a1 + 64) = MEMORY[0x25A2C4900](v5);
  OUTLINED_FUNCTION_15_16();
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + 72) = MEMORY[0x25A2C4900](v5);
  OUTLINED_FUNCTION_50_6();
  *(void *)(a1 + 80) = MEMORY[0x25A2C4900](v5);
  OUTLINED_FUNCTION_18_18();
  *(void *)(a1 + 88) = MEMORY[0x25A2C4900](v5);
  OUTLINED_FUNCTION_18_18();
  *(void *)(a1 + 96) = MEMORY[0x25A2C48D0](v5);
  OUTLINED_FUNCTION_11_16();
  *(void *)(a1 + 104) = MEMORY[0x25A2C48D0](v5);
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_14_18();
  *(void *)(a1 + 112) = v9;
  double result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  return result;
}

uint64_t protocol witness for SearchNLGEntityConvertible.sourceResult.getter in conformance EventEntity()
{
  OUTLINED_FUNCTION_7_18();
  memcpy(v0, v1, 0x50uLL);
  OUTLINED_FUNCTION_13_20();
  return specialized SearchNLGEntityConvertible.sourceResult.getter(v2);
}

uint64_t specialized SearchNLGEntityConvertible.sourceResult.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SearchResult(0);
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v2);
}

uint64_t SearchNLGEntityConvertible.sourceResult.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SearchResult(0);
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v2);
}

uint64_t SearchNLGEntity.flightNumber.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t SearchNLGEntity.flightCarrier.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t SearchNLGEntity.flightDepartureDate.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t SearchNLGEntity.flightArrivalAirportCode.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t SearchNLGEntity.flightDepartureAirportCode.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t protocol witness for SearchNLGEntityConvertible.sourceResult.getter in conformance FlightReservationEntity()
{
  OUTLINED_FUNCTION_7_18();
  memcpy(v0, v1, 0xD0uLL);
  OUTLINED_FUNCTION_13_20();
  return specialized SearchNLGEntityConvertible.sourceResult.getter(v2);
}

uint64_t SearchNLGEntity.name.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t SearchNLGEntity.startDate.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t SearchNLGEntity.endDate.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t SearchNLGEntity.address.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t protocol witness for SearchNLGEntityConvertible.sourceResult.getter in conformance HotelReservationEntity@<X0>(uint64_t a1@<X8>)
{
  memcpy(__dst, v1, sizeof(__dst));
  return specialized SearchNLGEntityConvertible.sourceResult.getter(a1);
}

uint64_t protocol witness for SearchNLGEntityConvertible.sourceResult.getter in conformance RestaurantReservationEntity()
{
  OUTLINED_FUNCTION_7_18();
  memcpy(v0, v1, 0x60uLL);
  OUTLINED_FUNCTION_13_20();
  return specialized SearchNLGEntityConvertible.sourceResult.getter(v2);
}

uint64_t protocol witness for SearchNLGEntityConvertible.sourceResult.getter in conformance VehicleReservationEntity()
{
  OUTLINED_FUNCTION_7_18();
  memcpy(v0, v1, 0x90uLL);
  OUTLINED_FUNCTION_13_20();
  return specialized SearchNLGEntityConvertible.sourceResult.getter(v2);
}

uint64_t protocol witness for SearchNLGEntityConvertible.sourceResult.getter in conformance TicketedTransportationEntity@<X0>(uint64_t a1@<X8>)
{
  memcpy(__dst, v1, sizeof(__dst));
  return specialized SearchNLGEntityConvertible.sourceResult.getter(a1);
}

uint64_t protocol witness for SearchNLGEntityConvertible.sourceResult.getter in conformance TicketedShowEntity()
{
  OUTLINED_FUNCTION_7_18();
  memcpy(v0, v1, 0x80uLL);
  OUTLINED_FUNCTION_13_20();
  return specialized SearchNLGEntityConvertible.sourceResult.getter(v2);
}

uint64_t SearchNLGEntity.documentSource.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t SearchNLGEntity.title.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t SearchNLGEntity.sentFrom.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t SearchNLGEntity.contentCreationDate.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_14_14();
  EntityProperty.wrappedValue.setter();
  return OUTLINED_FUNCTION_33_5();
}

uint64_t SearchNLGEntity.documentSource.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t SearchNLGEntityConvertible.documentSource.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  uint64_t v3 = OUTLINED_FUNCTION_3_19();
  v4(v3);
  uint64_t v5 = type metadata accessor for SearchResult(0);
  if (__swift_getEnumTagSinglePayload(v0, 1, v5) == 1)
  {
    outlined destroy of SearchResult?(v0, &demangling cache variable for type metadata for SearchResult?);
  }
  else
  {
    id v6 = *(id *)(v0 + *(int *)(v5 + 20));
    outlined destroy of SearchResult(v0);
    id v7 = objc_msgSend(v6, sel_bundleID);

    if (v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      goto LABEL_6;
    }
  }
  uint64_t v8 = 0;
  unint64_t v10 = 0xE000000000000000;
LABEL_6:
  type metadata accessor for LocalIndexClient();
  swift_bridgeObjectRetain();
  uint64_t v11 = static LocalIndexClient.displayName(for:)(v8, v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logging.search);
    swift_bridgeObjectRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  return v11;
}

uint64_t SearchNLGEntity.sentFrom.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t SearchNLGEntityConvertible.senderNames.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  uint64_t v3 = OUTLINED_FUNCTION_3_19();
  v4(v3);
  uint64_t v5 = type metadata accessor for SearchResult(0);
  if (__swift_getEnumTagSinglePayload(v0, 1, v5) == 1)
  {
    outlined destroy of SearchResult?(v0, &demangling cache variable for type metadata for SearchResult?);
    return 0;
  }
  else
  {
    id v7 = *(id *)(v0 + *(int *)(v5 + 20));
    outlined destroy of SearchResult(v0);
    uint64_t v6 = CSSearchableItem.senderNames.getter();
  }
  return v6;
}

uint64_t SearchNLGEntity.answer.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t SearchNLGEntity.globalSearchSummary.setter()
{
  return OUTLINED_FUNCTION_6_14();
}

uint64_t static SearchNLGEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchNLGEntity.typeDisplayRepresentation);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static SearchNLGEntity.typeDisplayRepresentation.setter(uint64_t a1)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchNLGEntity.typeDisplayRepresentation);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static SearchNLGEntity.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static SearchNLGEntity.typeDisplayRepresentation);
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t SearchNLGEntity.displayRepresentation.getter()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_59_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_18_8();
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v8);
  outlined init with copy of SearchResult?((uint64_t)(v0 + 15), (uint64_t)&v17, &demangling cache variable for type metadata for AppEntity?);
  if (v18)
  {
    outlined init with take of SageSearchClient(&v17, (uint64_t)v20);
    __swift_project_boxed_opaque_existential_1(v20, v20[3]);
    dispatch thunk of InstanceDisplayRepresentable.displayRepresentation.getter();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  }
  else
  {
    outlined destroy of SearchResult?((uint64_t)&v17, &demangling cache variable for type metadata for AppEntity?);
    if (one-time initialization token for search != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logging.search);
    outlined init with copy of SearchNLGEntity(v0, v20);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      outlined init with copy of SearchNLGEntity(v20, &v17);
      uint64_t v14 = String.init<A>(describing:)();
      *(void *)&long long v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of SearchNLGEntity((uint64_t)v20);
      _os_log_impl(&dword_257DC6000, v11, v12, "Unexpected nil representedEntity for %s", v13, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {
      outlined destroy of SearchNLGEntity((uint64_t)v20);
    }

    LocalizedStringResource.init(stringLiteral:)();
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v7);
    uint64_t v16 = type metadata accessor for DisplayRepresentation.Image();
    __swift_storeEnumTagSinglePayload(v1, 1, 1, v16);
    return DisplayRepresentation.init(title:subtitle:image:)();
  }
}

uint64_t (*SearchNLGEntity.documentSource.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$documentSource.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.title.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchNLGEntity.title.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$title.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t key path setter for SearchNLGEntity.sentFrom : SearchNLGEntity()
{
  return SearchNLGEntity.sentFrom.setter();
}

uint64_t (*SearchNLGEntity.sentFrom.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$sentFrom.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.contentCreationDate.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t (*SearchNLGEntity.contentCreationDate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$contentCreationDate.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.answer.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchNLGEntity.answer.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$answer.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.flightNumber.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchNLGEntity.flightNumber.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$flightNumber.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.flightDepartureDate.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path setter for SearchNLGEntity.contentCreationDate : SearchNLGEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_18_8();
  outlined init with copy of SearchResult?(a1, v6, a5);
  return a6(v6);
}

uint64_t (*SearchNLGEntity.flightDepartureDate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$flightDepartureDate.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.flightDepartureAirportCode.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchNLGEntity.flightDepartureAirportCode.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$flightDepartureAirportCode.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.flightArrivalAirportCode.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchNLGEntity.flightArrivalAirportCode.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$flightArrivalAirportCode.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.flightCarrier.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchNLGEntity.flightCarrier.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$flightCarrier.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.name.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchNLGEntity.name.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$name.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.address.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t (*SearchNLGEntity.address.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$address.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.startDate.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t (*SearchNLGEntity.startDate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$startDate.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.endDate.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t (*SearchNLGEntity.endDate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$endDate.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.globalSearchSummary.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t (*SearchNLGEntity.globalSearchSummary.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchNLGEntity.$globalSearchSummary.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchNLGEntity.representedEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SearchResult?(v1 + 120, a1, &demangling cache variable for type metadata for AppEntity?);
}

uint64_t SearchNLGEntity.representedEntity.setter(uint64_t a1)
{
  return outlined assign with take of AppEntity?(a1, v1 + 120);
}

uint64_t (*SearchNLGEntity.representedEntity.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance SearchNLGEntity(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchNLGEntity and conformance SearchNLGEntity();
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance SearchNLGEntity()
{
  lazy protocol witness table accessor for type SearchNLGEntity and conformance SearchNLGEntity();
  return UUID.init()();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance SearchNLGEntity(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchNLGEntity and conformance SearchNLGEntity();
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SearchNLGEntity(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchNLGEntity and conformance SearchNLGEntity();
  return MEMORY[0x270EE1D98](a1, v2);
}

void *outlined init with copy of SearchNLGEntity(void *a1, void *a2)
{
  return a2;
}

uint64_t outlined destroy of SearchNLGEntity(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of AppEntity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppEntity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type SearchNLGEntity and conformance SearchNLGEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity;
  if (!lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity;
  if (!lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity;
  if (!lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity;
  if (!lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity;
  if (!lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity;
  if (!lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity;
  if (!lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity;
  if (!lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity;
  if (!lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity;
  if (!lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchNLGEntity and conformance SearchNLGEntity);
  }
  return result;
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in SearchNLGEntity()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<SearchNLGEntity> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<SearchNLGEntity>);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in SearchNLGEntity()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<SearchNLGEntity> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<SearchNLGEntity>);
}

uint64_t sub_25837918C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.documentSource.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583791B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchNLGEntity.documentSource.setter);
}

uint64_t sub_2583791E0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.title.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_258379208(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchNLGEntity.title.setter);
}

uint64_t sub_258379234()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.sentFrom.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_258379260()
{
  return SearchNLGEntity.contentCreationDate.getter();
}

uint64_t sub_258379284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.contentCreationDate : SearchNLGEntity(a1, a2, a3, a4, &demangling cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))SearchNLGEntity.contentCreationDate.setter);
}

uint64_t sub_2583792B8()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.answer.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583792E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchNLGEntity.answer.setter);
}

uint64_t sub_25837930C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.flightNumber.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_258379334(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchNLGEntity.flightNumber.setter);
}

uint64_t sub_258379360()
{
  return SearchNLGEntity.flightDepartureDate.getter();
}

uint64_t sub_258379384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.contentCreationDate : SearchNLGEntity(a1, a2, a3, a4, &demangling cache variable for type metadata for DateComponents?, (uint64_t (*)(uint64_t))SearchNLGEntity.flightDepartureDate.setter);
}

uint64_t sub_2583793B8()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.flightDepartureAirportCode.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583793E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchNLGEntity.flightDepartureAirportCode.setter);
}

uint64_t sub_25837940C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.flightArrivalAirportCode.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_258379434(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchNLGEntity.flightArrivalAirportCode.setter);
}

uint64_t sub_258379460()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.flightCarrier.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_258379488(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchNLGEntity.flightCarrier.setter);
}

uint64_t sub_2583794B4()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.name.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583794DC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchNLGEntity.name.setter);
}

uint64_t sub_258379508()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.address.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_258379530(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchNLGEntity.address.setter);
}

uint64_t sub_25837955C()
{
  return SearchNLGEntity.startDate.getter();
}

uint64_t sub_258379580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.contentCreationDate : SearchNLGEntity(a1, a2, a3, a4, &demangling cache variable for type metadata for DateComponents?, (uint64_t (*)(uint64_t))SearchNLGEntity.startDate.setter);
}

uint64_t sub_2583795B4()
{
  return SearchNLGEntity.endDate.getter();
}

uint64_t sub_2583795D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.contentCreationDate : SearchNLGEntity(a1, a2, a3, a4, &demangling cache variable for type metadata for DateComponents?, (uint64_t (*)(uint64_t))SearchNLGEntity.endDate.setter);
}

uint64_t sub_25837960C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchNLGEntity.globalSearchSummary.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_258379634(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchNLGEntity.documentSource : SearchNLGEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchNLGEntity.globalSearchSummary.setter);
}

uint64_t dispatch thunk of SearchNLGEntityConvertible.asNLGEntity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SearchNLGEntityConvertible.sourceResult.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t destroy for SearchNLGEntity(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 144))
  {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 120);
  }
  return result;
}

void *initializeWithCopy for SearchNLGEntity(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  uint64_t v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  a1[14] = a2[14];
  unint64_t v15 = a2 + 15;
  uint64_t v16 = a1 + 15;
  uint64_t v14 = a2[18];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v14)
  {
    uint64_t v11 = a2[19];
    a1[18] = v14;
    a1[19] = v11;
    (**(void (***)(void *, void *))(v14 - 8))(v16, v15);
  }
  else
  {
    long long v12 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v15;
    *((_OWORD *)v16 + 1) = v12;
    v16[4] = v15[4];
  }
  return a1;
}

uint64_t assignWithCopy for SearchNLGEntity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 144);
  if (!*(void *)(a1 + 144))
  {
    if (v4)
    {
      *(void *)(a1 + 144) = v4;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 120, a2 + 120);
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 120);
    long long v6 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 120) = v5;
    *(_OWORD *)(a1 + 136) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 120);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

void *__swift_memcpy160_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA0uLL);
}

uint64_t assignWithTake for SearchNLGEntity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  if (*(void *)(a1 + 144)) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 120);
  }
  long long v4 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v4;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchNLGEntity(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 160))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchNLGEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchNLGEntity()
{
  return &type metadata for SearchNLGEntity;
}

uint64_t OUTLINED_FUNCTION_3_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_16()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void OUTLINED_FUNCTION_14_18()
{
  JUMPOUT(0x25A2C4900);
}

uint64_t OUTLINED_FUNCTION_15_16()
{
  return 0x746867696C46;
}

uint64_t OUTLINED_FUNCTION_18_18()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t static SearchPropertyRequest.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static SearchPropertyRequest.typeDisplayRepresentation, a1);
}

uint64_t SearchPropertyRequest.name.getter()
{
  return SearchPropertyRequest.name.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v3;

  uint64_t v0 = OUTLINED_FUNCTION_18_19();
  v1(v0);
  EntityProperty.wrappedValue.getter();
  return v3;
}

uint64_t type metadata accessor for SearchPropertyRequest(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for SearchPropertyRequest);
}

uint64_t key path setter for SearchPropertyRequest.name : SearchPropertyRequest()
{
  return SearchPropertyRequest.name.setter();
}

uint64_t SearchPropertyRequest.name.setter()
{
  return SearchPropertyRequest.name.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_18_19();
  v1(v0);
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchPropertyRequest.name.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  type metadata accessor for SearchPropertyRequest(0);
  v1[4] = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchPropertyRequest.$name.getter()
{
  return SearchPropertyRequest.$name.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_18_19();
  v1(v0);
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchPropertyRequest.type.getter()
{
  return SearchPropertyRequest.type.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_18_19();
  v1(v0);
  return OUTLINED_FUNCTION_24_15();
}

uint64_t key path getter for SearchPropertyRequest.type : SearchPropertyRequest@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SearchPropertyRequest.type.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for SearchPropertyRequest.type : SearchPropertyRequest()
{
  return SearchPropertyRequest.type.setter();
}

uint64_t SearchPropertyRequest.type.setter()
{
  return SearchPropertyRequest.type.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_18_19();
  v1(v0);
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchPropertyRequest.type.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  type metadata accessor for SearchPropertyRequest(0);
  v1[4] = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchPropertyRequest.$type.getter()
{
  return SearchPropertyRequest.$type.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_18_19();
  v1(v0);
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchPropertyRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_12_7();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_19_12();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_16();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v8 = OUTLINED_FUNCTION_27_14();
  OUTLINED_FUNCTION_16_16(v8);
  uint64_t v9 = type metadata accessor for SearchPropertyRequest(0);
  uint64_t v10 = *(int *)(v9 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String>);
  OUTLINED_FUNCTION_21_14();
  *(void *)(a1 + v10) = MEMORY[0x25A2C4900](v1);
  uint64_t v11 = *(int *)(v9 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<SearchPropertyType>);
  OUTLINED_FUNCTION_22_16();
  unint64_t v12 = lazy protocol witness table accessor for type SearchPropertyType and conformance SearchPropertyType();
  *(void *)(a1 + v11) = MEMORY[0x25A2C4880](v1, v12);
  EntityProperty.wrappedValue.setter();
  return EntityProperty.wrappedValue.setter();
}

unint64_t lazy protocol witness table accessor for type SearchPropertyType and conformance SearchPropertyType()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType;
  if (!lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPropertyType and conformance SearchPropertyType);
  }
  return result;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance SearchPropertyRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance SearchPropertyRequest()
{
  lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
  return UUID.init()();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance SearchPropertyRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SearchPropertyRequest(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t static SearchPropertyResponse.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static SearchPropertyResponse.typeDisplayRepresentation, a1);
}

uint64_t SearchPropertyRequest.displayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_7_2();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t SearchPropertyResponse.name.getter()
{
  return SearchPropertyRequest.name.getter();
}

uint64_t type metadata accessor for SearchPropertyResponse(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for SearchPropertyResponse);
}

uint64_t key path setter for SearchPropertyResponse.name : SearchPropertyResponse()
{
  return SearchPropertyResponse.name.setter();
}

uint64_t SearchPropertyResponse.name.setter()
{
  return SearchPropertyRequest.name.setter();
}

uint64_t (*SearchPropertyResponse.name.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_1_15((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchPropertyResponse.$name.getter()
{
  return SearchPropertyRequest.$name.getter();
}

uint64_t SearchPropertyResponse.type.getter()
{
  return SearchPropertyRequest.type.getter();
}

uint64_t key path getter for SearchPropertyResponse.type : SearchPropertyResponse@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SearchPropertyResponse.type.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for SearchPropertyResponse.type : SearchPropertyResponse()
{
  return SearchPropertyResponse.type.setter();
}

uint64_t SearchPropertyResponse.type.setter()
{
  return SearchPropertyRequest.type.setter();
}

uint64_t (*SearchPropertyResponse.type.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_1_15((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchPropertyResponse.$type.getter()
{
  return SearchPropertyRequest.$type.getter();
}

uint64_t SearchPropertyResponse.stringValue.getter()
{
  OUTLINED_FUNCTION_13_21();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for SearchPropertyResponse.stringValue : SearchPropertyResponse()
{
  return SearchPropertyResponse.stringValue.setter();
}

uint64_t SearchPropertyResponse.stringValue.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchPropertyResponse.stringValue.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_1_15((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchPropertyResponse.$stringValue.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchPropertyResponse.dateValue.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

uint64_t SearchPropertyResponse.dateValue.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_4_18();
  OUTLINED_FUNCTION_11_17();
  EntityProperty.wrappedValue.setter();
  return outlined destroy of SearchResult?(a1, &demangling cache variable for type metadata for DateComponents?);
}

uint64_t (*SearchPropertyResponse.dateValue.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_1_15((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchPropertyResponse.$dateValue.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchPropertyResponse.durationValue.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

uint64_t key path setter for SearchPropertyResponse.dateValue : SearchPropertyResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_15();
  uint64_t v13 = v12 - v11;
  outlined init with copy of SearchResult?(a1, v12 - v11, a5);
  return a6(v13);
}

uint64_t SearchPropertyResponse.durationValue.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_4_18();
  OUTLINED_FUNCTION_11_17();
  EntityProperty.wrappedValue.setter();
  return outlined destroy of SearchResult?(a1, &demangling cache variable for type metadata for DateComponents?);
}

uint64_t (*SearchPropertyResponse.durationValue.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_1_15((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchPropertyResponse.$durationValue.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchPropertyResponse.locationValue.getter()
{
  OUTLINED_FUNCTION_14_19();
  EntityProperty.wrappedValue.getter();
  return v1;
}

void key path setter for SearchPropertyResponse.locationValue : SearchPropertyResponse(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  SearchPropertyResponse.locationValue.setter(v1);
}

void SearchPropertyResponse.locationValue.setter(void *a1)
{
  OUTLINED_FUNCTION_14_19();
  id v2 = a1;
  EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchPropertyResponse.locationValue.modify())()
{
  id v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_1_15((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchPropertyResponse.$locationValue.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchPropertyResponse.personValue.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

uint64_t SearchPropertyResponse.personValue.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPerson?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_4_18();
  OUTLINED_FUNCTION_11_17();
  EntityProperty.wrappedValue.setter();
  return outlined destroy of SearchResult?(a1, &demangling cache variable for type metadata for IntentPerson?);
}

uint64_t (*SearchPropertyResponse.personValue.modify())()
{
  id v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_1_15((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchPropertyResponse.$personValue.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchPropertyResponse.numberValue.getter()
{
  OUTLINED_FUNCTION_15_17();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchPropertyResponse.numberValue : SearchPropertyResponse@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = SearchPropertyResponse.numberValue.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for SearchPropertyResponse.numberValue : SearchPropertyResponse()
{
  return SearchPropertyResponse.numberValue.setter();
}

uint64_t SearchPropertyResponse.numberValue.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*SearchPropertyResponse.numberValue.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_1_15((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchPropertyResponse.$numberValue.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchPropertyResponse.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_12_7();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_19_12();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_16();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v8 = OUTLINED_FUNCTION_27_14();
  OUTLINED_FUNCTION_16_16(v8);
  uint64_t v9 = (int *)type metadata accessor for SearchPropertyResponse(0);
  uint64_t v10 = v9[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String>);
  OUTLINED_FUNCTION_21_14();
  *(void *)(a1 + v10) = MEMORY[0x25A2C4900](v1);
  uint64_t v11 = v9[6];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<SearchPropertyType>);
  OUTLINED_FUNCTION_22_16();
  unint64_t v12 = lazy protocol witness table accessor for type SearchPropertyType and conformance SearchPropertyType();
  *(void *)(a1 + v11) = MEMORY[0x25A2C4880](v1, v12);
  uint64_t v13 = v9[7];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  OUTLINED_FUNCTION_20_13();
  OUTLINED_FUNCTION_12_18();
  *(void *)(a1 + v13) = MEMORY[0x25A2C4900](v1);
  uint64_t v14 = v9[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<DateComponents?>);
  OUTLINED_FUNCTION_20_13();
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v14) = MEMORY[0x25A2C48D0](v1);
  uint64_t v15 = v9[9];
  OUTLINED_FUNCTION_17_13();
  *(void *)(a1 + v15) = MEMORY[0x25A2C48D0](v1);
  uint64_t v16 = v9[10];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<CLPlacemark?>);
  OUTLINED_FUNCTION_20_13();
  OUTLINED_FUNCTION_17_13();
  *(void *)(a1 + v16) = MEMORY[0x25A2C4940](v1);
  uint64_t v17 = v9[11];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<IntentPerson?>);
  OUTLINED_FUNCTION_20_13();
  OUTLINED_FUNCTION_12_18();
  *(void *)(a1 + v17) = MEMORY[0x25A2C48B0](v1);
  uint64_t v18 = v9[12];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Double?>);
  OUTLINED_FUNCTION_20_13();
  OUTLINED_FUNCTION_12_18();
  *(void *)(a1 + v18) = MEMORY[0x25A2C4920](v1);
  EntityProperty.wrappedValue.setter();
  return EntityProperty.wrappedValue.setter();
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance SearchPropertyResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance SearchPropertyResponse()
{
  lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
  return UUID.init()();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance SearchPropertyResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SearchPropertyResponse(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t static SearchPropertyType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static SearchPropertyType.typeDisplayRepresentation, a1);
}

uint64_t static SearchPropertyRequest.typeDisplayRepresentation.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t static SearchPropertyType.caseDisplayRepresentations.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v2 = OUTLINED_FUNCTION_81(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_12_7();
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(SearchPropertyType, DisplayRepresentation)>);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SearchPropertyType, DisplayRepresentation))
                  - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_258662FD0;
  unint64_t v13 = v20 + v12;
  *(unsigned char *)(v20 + v12) = 0;
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v8);
  uint64_t v14 = type metadata accessor for DisplayRepresentation.Image();
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v14);
  DisplayRepresentation.init(title:subtitle:image:)();
  OUTLINED_FUNCTION_163_1();
  unsigned char *v15 = 1;
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_163_1();
  OUTLINED_FUNCTION_116_4(v16);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_163_1();
  OUTLINED_FUNCTION_116_4(v17);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_163_1();
  OUTLINED_FUNCTION_116_4(v18);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v13 + 5 * v11));
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v8);
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v14);
  DisplayRepresentation.init(title:subtitle:image:)();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type SearchPropertyType and conformance SearchPropertyType();
  return Dictionary.init(dictionaryLiteral:)();
}

OmniSearch::SearchPropertyType_optional __swiftcall SearchPropertyType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SearchPropertyType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 6;
  if (v5 < 6) {
    char v7 = v5;
  }
  char *v4 = v7;
  return result;
}

void *static SearchPropertyType.allCases.getter()
{
  return &outlined read-only object #0 of static SearchPropertyType.allCases.getter;
}

uint64_t SearchPropertyType.rawValue.getter()
{
  uint64_t result = 0x676E69727473;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1702125924;
      break;
    case 2:
      unsigned int v2 = 1634891108;
      goto LABEL_5;
    case 3:
      unsigned int v2 = 1633906540;
LABEL_5:
      uint64_t result = v2 | 0x6E6F697400000000;
      break;
    case 4:
      uint64_t result = 0x6E6F73726570;
      break;
    case 5:
      uint64_t result = 0x7265626D756ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for AppEntity in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
}

uint64_t base witness table accessor for AppValue in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
}

uint64_t lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for DisplayRepresentable in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
}

uint64_t base witness table accessor for Identifiable in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<SearchPropertyRequest> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<SearchPropertyRequest>);
}

uint64_t base witness table accessor for PersistentlyIdentifiable in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
}

uint64_t base witness table accessor for TypeDisplayRepresentable in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
}

uint64_t base witness table accessor for _IntentValue in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
}

uint64_t base witness table accessor for InstanceDisplayRepresentable in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<SearchPropertyRequest> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<SearchPropertyRequest>);
}

uint64_t base witness table accessor for CustomLocalizedStringResourceConvertible in SearchPropertyRequest()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
}

uint64_t base witness table accessor for AppEntity in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
}

uint64_t base witness table accessor for AppValue in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
}

uint64_t base witness table accessor for DisplayRepresentable in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
}

uint64_t base witness table accessor for Identifiable in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<SearchPropertyResponse> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<SearchPropertyResponse>);
}

uint64_t base witness table accessor for PersistentlyIdentifiable in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
}

uint64_t base witness table accessor for TypeDisplayRepresentable in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
}

uint64_t base witness table accessor for _IntentValue in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
}

uint64_t base witness table accessor for InstanceDisplayRepresentable in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<SearchPropertyResponse> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<SearchPropertyResponse>);
}

uint64_t base witness table accessor for CustomLocalizedStringResourceConvertible in SearchPropertyResponse()
{
  return lazy protocol witness table accessor for type SearchPropertyRequest and conformance SearchPropertyRequest(&lazy protocol witness table cache variable for type SearchPropertyResponse and conformance SearchPropertyResponse, (void (*)(uint64_t))type metadata accessor for SearchPropertyResponse);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SearchPropertyType(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SearchPropertyType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchPropertyType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SearchPropertyType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::SearchPropertyType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchPropertyType(Swift::String *a1)
{
  return SearchPropertyType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SearchPropertyType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchPropertyType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SearchPropertyType()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [SearchPropertyType] and conformance [A], &demangling cache variable for type metadata for [SearchPropertyType]);
}

void protocol witness for static CaseIterable.allCases.getter in conformance SearchPropertyType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SearchPropertyType.allCases.getter;
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in SearchPropertyType()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance SearchPropertyType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchPropertyType and conformance SearchPropertyType();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SearchPropertyType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchPropertyType and conformance SearchPropertyType();
  return MEMORY[0x270EE1C28](a1, v2);
}

uint64_t sub_25837C86C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchPropertyRequest.name.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_25837C8A0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchPropertyResponse.name.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_25837C8D4()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchPropertyResponse.stringValue.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_25837C900()
{
  return SearchPropertyResponse.dateValue.getter();
}

uint64_t sub_25837C924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchPropertyResponse.dateValue : SearchPropertyResponse(a1, a2, a3, a4, &demangling cache variable for type metadata for DateComponents?, SearchPropertyResponse.dateValue.setter);
}

uint64_t sub_25837C958()
{
  return SearchPropertyResponse.durationValue.getter();
}

uint64_t sub_25837C97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchPropertyResponse.dateValue : SearchPropertyResponse(a1, a2, a3, a4, &demangling cache variable for type metadata for DateComponents?, SearchPropertyResponse.durationValue.setter);
}

uint64_t sub_25837C9B0()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchPropertyResponse.locationValue.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_25837C9DC()
{
  return SearchPropertyResponse.personValue.getter();
}

uint64_t sub_25837CA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchPropertyResponse.dateValue : SearchPropertyResponse(a1, a2, a3, a4, &demangling cache variable for type metadata for IntentPerson?, SearchPropertyResponse.personValue.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchPropertyRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for DisplayRepresentation();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SearchPropertyRequest(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SearchPropertyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SearchPropertyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SearchPropertyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for SearchPropertyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchPropertyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for SearchPropertyRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t type metadata completion function for SearchPropertyRequest()
{
  uint64_t result = type metadata accessor for DisplayRepresentation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchPropertyResponse(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for DisplayRepresentation();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v10 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)v4 + v10) = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[12];
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(uint64_t *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SearchPropertyResponse(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SearchPropertyResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SearchPropertyResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SearchPropertyResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  return a1;
}

uint64_t assignWithTake for SearchPropertyResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_release();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchPropertyResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25837D518);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_29_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SearchPropertyResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25837D5BC);
}

void __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_29_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for SearchPropertyResponse()
{
  uint64_t result = type metadata accessor for DisplayRepresentation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SearchPropertyType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SearchPropertyType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25837D844);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchPropertyType()
{
  return &type metadata for SearchPropertyType;
}

uint64_t OUTLINED_FUNCTION_1_15(uint64_t a1)
{
  *unint64_t v1 = a1;
  return type metadata accessor for SearchPropertyResponse(0);
}

uint64_t OUTLINED_FUNCTION_4_18()
{
  return type metadata accessor for SearchPropertyResponse(0);
}

uint64_t OUTLINED_FUNCTION_11_17()
{
  return outlined init with copy of SearchResult?(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_12_18()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_13_21()
{
  return type metadata accessor for SearchPropertyResponse(0);
}

uint64_t OUTLINED_FUNCTION_14_19()
{
  return type metadata accessor for SearchPropertyResponse(0);
}

uint64_t OUTLINED_FUNCTION_15_17()
{
  return type metadata accessor for SearchPropertyResponse(0);
}

uint64_t OUTLINED_FUNCTION_16_16(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t OUTLINED_FUNCTION_17_13()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_18_19()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_21_14()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_22_16()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_24_15()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t OUTLINED_FUNCTION_27_14()
{
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
  return type metadata accessor for DisplayRepresentation.Image();
}

uint64_t static SearchTool.openAppWhenRun.getter()
{
  return 0;
}

uint64_t one-time initialization function for authenticationPolicy()
{
  uint64_t v0 = type metadata accessor for IntentAuthenticationPolicy();
  __swift_allocate_value_buffer(v0, static SearchTool.authenticationPolicy);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static SearchTool.authenticationPolicy);
  uint64_t v2 = *MEMORY[0x263EFBE78];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);
  return v3(v1, v2, v0);
}

uint64_t static SearchTool.authenticationPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchTool.authenticationPolicy.getter(&one-time initialization token for authenticationPolicy, MEMORY[0x263EFBE80], (uint64_t)static SearchTool.authenticationPolicy, a1);
}

char *SearchTool.assistantOnly.unsafeMutableAddressor()
{
  return &static SearchTool.assistantOnly;
}

uint64_t static SearchTool.assistantOnly.getter()
{
  return static SearchTool.assistantOnly;
}

uint64_t static SearchTool.assistantOnly.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static SearchTool.assistantOnly = a1;
  return result;
}

uint64_t (*static SearchTool.assistantOnly.modify())()
{
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t static SearchTool.title.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchTool.authenticationPolicy.getter(&one-time initialization token for title, MEMORY[0x263F06D40], (uint64_t)static SearchTool.title, a1);
}

uint64_t static SearchTool.authenticationPolicy.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  __swift_project_value_buffer(v7, a3);
  OUTLINED_FUNCTION_1_0();
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v8 + 16);
  return v9(a4);
}

uint64_t static SearchTool.parameterSummary.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterSummaryString<SearchTool>);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15();
  lazy protocol witness table accessor for type SearchTool and conformance SearchTool();
  ParameterSummaryString.init(stringLiteral:)();
  OUTLINED_FUNCTION_26();
  return IntentParameterSummary.init(_:table:)();
}

unint64_t lazy protocol witness table accessor for type SearchTool and conformance SearchTool()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchTool and conformance SearchTool;
  if (!lazy protocol witness table cache variable for type SearchTool and conformance SearchTool)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchTool and conformance SearchTool);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchTool and conformance SearchTool;
  if (!lazy protocol witness table cache variable for type SearchTool and conformance SearchTool)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchTool and conformance SearchTool);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchTool and conformance SearchTool;
  if (!lazy protocol witness table cache variable for type SearchTool and conformance SearchTool)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchTool and conformance SearchTool);
  }
  return result;
}

uint64_t static SearchTool.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for IntentDescription();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchTool.description);
  swift_beginAccess();
  OUTLINED_FUNCTION_1_0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v2);
}

uint64_t static SearchTool.description.setter(uint64_t a1)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for IntentDescription();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchTool.description);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static SearchTool.description.modify())()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for IntentDescription();
  __swift_project_value_buffer(v0, (uint64_t)static SearchTool.description);
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t SearchTool.rawQuery.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchTool.rawQuery : SearchTool@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchTool.rawQuery.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for SearchTool.rawQuery : SearchTool()
{
  return SearchTool.rawQuery.setter();
}

uint64_t SearchTool.rawQuery.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchTool.rawQuery.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchTool.$rawQuery.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchTool.rewrittenQuery.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchTool.rewrittenQuery : SearchTool@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchTool.rewrittenQuery.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for SearchTool.rewrittenQuery : SearchTool()
{
  return SearchTool.rewrittenQuery.setter();
}

uint64_t SearchTool.rewrittenQuery.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchTool.rewrittenQuery.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchTool.$rewrittenQuery.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchTool.structuredQuery.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t SearchTool.structuredQuery.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_59_0();
  outlined init with copy of EagerResolutionService?(a1, v1, &demangling cache variable for type metadata for StructuredQueryEntity?);
  IntentParameter.wrappedValue.setter();
  return outlined destroy of StructuredQueryEntity?(a1, &demangling cache variable for type metadata for StructuredQueryEntity?);
}

uint64_t (*SearchTool.structuredQuery.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchTool.$structuredQuery.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchTool.typeIdentifiers.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t SearchTool.typeIdentifiers.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchTool.typeIdentifiers.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchTool.$typeIdentifiers.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchTool.context.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t key path getter for SearchTool.context : SearchTool@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  long long v4 = a1[3];
  v7[2] = a1[2];
  v7[3] = v4;
  v7[4] = a1[4];
  SearchTool.context.getter();
  outlined init with take of SearchContext?((uint64_t)&v6, (uint64_t)v7, &demangling cache variable for type metadata for SearchContext?);
  return outlined init with take of SearchContext?((uint64_t)v7, a2, &demangling cache variable for type metadata for SearchContext?);
}

uint64_t key path setter for SearchTool.context : SearchTool(uint64_t a1, _OWORD *a2)
{
  outlined init with take of SearchContext?(a1, (uint64_t)v7, &demangling cache variable for type metadata for SearchContext?);
  long long v3 = a2[1];
  v6[9] = *a2;
  v6[10] = v3;
  long long v4 = a2[3];
  v6[11] = a2[2];
  v6[12] = v4;
  v6[13] = a2[4];
  outlined init with take of SearchContext?((uint64_t)v7, (uint64_t)v6, &demangling cache variable for type metadata for SearchContext?);
  outlined release of SearchContext?(v7, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of SearchContext?);
  return SearchTool.context.setter((uint64_t)v6);
}

uint64_t SearchTool.context.setter(uint64_t a1)
{
  outlined init with take of SearchContext?(a1, (uint64_t)v3, &demangling cache variable for type metadata for SearchContext?);
  outlined init with take of SearchContext?((uint64_t)v3, (uint64_t)&v2, &demangling cache variable for type metadata for SearchContext?);
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchTool.context.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchTool.$context.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchTool.matchedEntities.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t SearchTool.matchedEntities.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchTool.matchedEntities.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchTool.$matchedEntities.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchTool.isFirstToolInvocation.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchTool.isFirstToolInvocation : SearchTool@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SearchTool.isFirstToolInvocation.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for SearchTool.isFirstToolInvocation : SearchTool()
{
  return SearchTool.isFirstToolInvocation.setter();
}

uint64_t SearchTool.isFirstToolInvocation.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchTool.isFirstToolInvocation.modify())()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchTool.$isFirstToolInvocation.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchTool.disambiguatedEntity.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t key path getter for SearchTool.structuredQuery : SearchTool(__n128 *a1)
{
  __n128 v1 = OUTLINED_FUNCTION_20_14(a1);
  return v2(v1);
}

uint64_t key path setter for SearchTool.structuredQuery : SearchTool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_18_8();
  outlined init with copy of EagerResolutionService?(a1, v6, a5);
  return a6(v6);
}

uint64_t SearchTool.disambiguatedEntity.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchEntity?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_59_0();
  outlined init with copy of EagerResolutionService?(a1, v1, &demangling cache variable for type metadata for SearchEntity?);
  IntentParameter.wrappedValue.setter();
  return outlined destroy of StructuredQueryEntity?(a1, &demangling cache variable for type metadata for SearchEntity?);
}

uint64_t (*SearchTool.disambiguatedEntity.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchTool.$disambiguatedEntity.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchTool.invocationClient.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t key path getter for SearchTool.invocationClient : SearchTool@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SearchTool.invocationClient.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for SearchTool.invocationClient : SearchTool()
{
  return SearchTool.invocationClient.setter();
}

uint64_t SearchTool.invocationClient.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchTool.invocationClient.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchTool.$invocationClient.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchTool.requestedProperties.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchTool.typeIdentifiers : SearchTool@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  __n128 v3 = OUTLINED_FUNCTION_20_14(a1);
  uint64_t result = v4(v3);
  *a2 = result;
  return result;
}

uint64_t key path setter for SearchTool.typeIdentifiers : SearchTool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t SearchTool.requestedProperties.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchTool.requestedProperties.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_4_7((uint64_t)v1);
  *(void *)(v0 + 32) = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchTool.$requestedProperties.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchTool.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v119 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchEntity?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_184_0();
  uint64_t v118 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool.IntentDisplayName?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_184_0();
  uint64_t v116 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_184_0();
  uint64_t v114 = v10;
  uint64_t v11 = type metadata accessor for InputConnectionBehavior();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_184_0();
  uint64_t v14 = v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v120 = (uint64_t)v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v109 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.IntentInputOptions?);
  uint64_t v22 = OUTLINED_FUNCTION_81(v21);
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_18_8();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v24 = OUTLINED_FUNCTION_81(v23);
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_15();
  uint64_t v25 = type metadata accessor for LocalizedStringResource();
  uint64_t v122 = v25;
  OUTLINED_FUNCTION_1_0();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_15();
  uint64_t v29 = v28 - v27;
  uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<String>);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_49_9();
  OUTLINED_FUNCTION_70_5();
  uint64_t v30 = OUTLINED_FUNCTION_5_13();
  __swift_storeEnumTagSinglePayload(v30, v31, v32, v25);
  uint64_t v115 = type metadata accessor for String.IntentInputOptions();
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  OUTLINED_FUNCTION_32(v1, v33, v34, v115);
  uint64_t v125 = type metadata accessor for IntentDialog();
  uint64_t v35 = OUTLINED_FUNCTION_19_14();
  __swift_storeEnumTagSinglePayload(v35, v36, v37, v38);
  uint64_t v39 = *MEMORY[0x263EFBDC8];
  uint64_t v40 = *(void (**)(void))(v12 + 104);
  uint64_t v127 = v12 + 104;
  uint64_t v124 = v40;
  uint64_t v121 = v14;
  unsigned int v126 = v39;
  ((void (*)(uint64_t, uint64_t, uint64_t))v40)(v14, v39, v11);
  OUTLINED_FUNCTION_47_8();
  uint64_t v117 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<String?>);
  uint64_t v41 = v29;
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_49_9();
  OUTLINED_FUNCTION_70_5();
  OUTLINED_FUNCTION_36_11();
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v115);
  uint64_t v42 = OUTLINED_FUNCTION_19_14();
  uint64_t v43 = v125;
  __swift_storeEnumTagSinglePayload(v42, v44, v45, v125);
  uint64_t v123 = v11;
  ((void (*)(uint64_t, uint64_t, uint64_t))v124)(v121, v39, v11);
  v109[1] = v41;
  uint64_t v115 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<StructuredQueryEntity?>);
  uint64_t v111 = 0xD000000000000015;
  OUTLINED_FUNCTION_177_0();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_70_5();
  OUTLINED_FUNCTION_48_8();
  uint64_t Entity = type metadata accessor for StructuredQueryEntity(0);
  OUTLINED_FUNCTION_32(v114, v47, v48, Entity);
  uint64_t v49 = v20;
  uint64_t v50 = OUTLINED_FUNCTION_19_14();
  __swift_storeEnumTagSinglePayload(v50, v51, v52, v43);
  __swift_storeEnumTagSinglePayload(v120, 1, 1, v43);
  uint64_t v53 = v121;
  uint64_t v55 = v123;
  uint64_t v54 = v124;
  ((void (*)(uint64_t, void, uint64_t))v124)(v121, v126, v123);
  lazy protocol witness table accessor for type StructuredQueryEntity and conformance StructuredQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
  uint64_t v56 = (uint64_t)v49;
  uint64_t v57 = v53;
  uint64_t v114 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<[SearchEntityTypeIdentifier]?>);
  LocalizedStringResource.init(stringLiteral:)();
  v109[2] = 0xD000000000000037;
  OUTLINED_FUNCTION_70_5();
  uint64_t v58 = OUTLINED_FUNCTION_5_13();
  uint64_t v59 = v122;
  __swift_storeEnumTagSinglePayload(v58, v60, v61, v122);
  uint64_t v129 = MEMORY[0x263F8EE78];
  __swift_storeEnumTagSinglePayload(v56, 1, 1, v125);
  OUTLINED_FUNCTION_43_12();
  uint64_t v62 = v126;
  OUTLINED_FUNCTION_21_15();
  v54();
  lazy protocol witness table accessor for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier();
  uint64_t v113 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<SearchContext?>);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_49_9();
  OUTLINED_FUNCTION_70_5();
  uint64_t v63 = OUTLINED_FUNCTION_5_13();
  __swift_storeEnumTagSinglePayload(v63, v64, v65, v59);
  _s10OmniSearch0B7ContextVSgWOi0_(&v129);
  outlined init with take of SearchContext?((uint64_t)&v129, (uint64_t)v128, &demangling cache variable for type metadata for SearchContext?);
  OUTLINED_FUNCTION_35_11();
  OUTLINED_FUNCTION_42_8();
  uint64_t v66 = v57;
  uint64_t v67 = v62;
  uint64_t v68 = v62;
  uint64_t v69 = v124;
  ((void (*)(uint64_t, uint64_t, uint64_t))v124)(v66, v68, v55);
  lazy protocol witness table accessor for type SearchContext and conformance SearchContext();
  OUTLINED_FUNCTION_24_16();
  uint64_t v112 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<[EntityMatch]?>);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v70 = OUTLINED_FUNCTION_5_13();
  __swift_storeEnumTagSinglePayload(v70, v71, v72, v122);
  v128[0] = MEMORY[0x263F8EE78];
  OUTLINED_FUNCTION_35_11();
  OUTLINED_FUNCTION_42_8();
  uint64_t v73 = v121;
  uint64_t v74 = v123;
  ((void (*)(uint64_t, uint64_t, uint64_t))v69)(v121, v67, v123);
  lazy protocol witness table accessor for type EntityMatch and conformance EntityMatch();
  OUTLINED_FUNCTION_24_16();
  uint64_t v110 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  v109[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<Bool?>);
  OUTLINED_FUNCTION_177_0();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v75 = OUTLINED_FUNCTION_5_13();
  uint64_t v76 = v122;
  __swift_storeEnumTagSinglePayload(v75, v77, v78, v122);
  LOBYTE(v128[0]) = 0;
  uint64_t v79 = type metadata accessor for Bool.IntentDisplayName();
  OUTLINED_FUNCTION_32(v116, v80, v81, v79);
  uint64_t v82 = OUTLINED_FUNCTION_19_14();
  uint64_t v83 = v125;
  __swift_storeEnumTagSinglePayload(v82, v84, v85, v125);
  ((void (*)(uint64_t, void, uint64_t))v124)(v73, v126, v74);
  OUTLINED_FUNCTION_47_8();
  uint64_t v116 = IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<SearchEntity?>);
  OUTLINED_FUNCTION_177_0();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_37_12();
  uint64_t v86 = OUTLINED_FUNCTION_5_13();
  __swift_storeEnumTagSinglePayload(v86, v87, v88, v76);
  uint64_t v89 = type metadata accessor for SearchEntity(0);
  OUTLINED_FUNCTION_32(v118, v90, v91, v89);
  uint64_t v92 = OUTLINED_FUNCTION_33_10();
  __swift_storeEnumTagSinglePayload(v92, v93, v94, v83);
  OUTLINED_FUNCTION_43_12();
  uint64_t v95 = v124;
  OUTLINED_FUNCTION_21_15();
  v95();
  lazy protocol witness table accessor for type StructuredQueryEntity and conformance StructuredQueryEntity(&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity, (void (*)(uint64_t))type metadata accessor for SearchEntity);
  uint64_t v118 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<SearchToolClientType?>);
  OUTLINED_FUNCTION_49_9();
  OUTLINED_FUNCTION_177_0();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_37_12();
  OUTLINED_FUNCTION_36_11();
  LOBYTE(v128[0]) = 1;
  uint64_t v96 = OUTLINED_FUNCTION_33_10();
  uint64_t v97 = v125;
  __swift_storeEnumTagSinglePayload(v96, v98, v99, v125);
  OUTLINED_FUNCTION_44_12();
  OUTLINED_FUNCTION_21_15();
  v95();
  lazy protocol witness table accessor for type SearchToolClientType and conformance SearchToolClientType();
  OUTLINED_FUNCTION_23_10();
  uint64_t v111 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<[SearchPropertyRequest]?>);
  OUTLINED_FUNCTION_177_0();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_37_12();
  OUTLINED_FUNCTION_48_8();
  v128[0] = 0;
  uint64_t v100 = OUTLINED_FUNCTION_33_10();
  __swift_storeEnumTagSinglePayload(v100, v101, v102, v97);
  OUTLINED_FUNCTION_44_12();
  OUTLINED_FUNCTION_21_15();
  v95();
  lazy protocol witness table accessor for type StructuredQueryEntity and conformance StructuredQueryEntity(&lazy protocol witness table cache variable for type SearchPropertyRequest and conformance SearchPropertyRequest, (void (*)(uint64_t))type metadata accessor for SearchPropertyRequest);
  OUTLINED_FUNCTION_23_10();
  uint64_t result = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  uint64_t v104 = v119;
  uint64_t v105 = v115;
  uint64_t *v119 = v117;
  v104[1] = v105;
  uint64_t v106 = v113;
  v104[2] = v114;
  v104[3] = v106;
  uint64_t v107 = v110;
  v104[4] = v112;
  v104[5] = v107;
  uint64_t v108 = v118;
  v104[6] = v116;
  v104[7] = v108;
  v104[8] = v111;
  v104[9] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier;
  if (!lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEntityTypeIdentifier and conformance SearchEntityTypeIdentifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchContext and conformance SearchContext()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchContext and conformance SearchContext;
  if (!lazy protocol witness table cache variable for type SearchContext and conformance SearchContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchContext and conformance SearchContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EntityMatch and conformance EntityMatch()
{
  unint64_t result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch;
  if (!lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityMatch and conformance EntityMatch);
  }
  return result;
}

uint64_t SearchTool.perform()(uint64_t a1)
{
  *(void *)(v2 + 1168) = a1;
  uint64_t v3 = type metadata accessor for IntentViewOptions();
  OUTLINED_FUNCTION_81(v3);
  *(void *)(v2 + 1176) = OUTLINED_FUNCTION_49_1();
  uint64_t v4 = type metadata accessor for DialogData(0);
  *(void *)(v2 + 1184) = v4;
  OUTLINED_FUNCTION_81(v4);
  *(void *)(v2 + 1192) = OUTLINED_FUNCTION_9_13();
  *(void *)(v2 + 1200) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for IntentDialog();
  *(void *)(v2 + 1208) = v5;
  OUTLINED_FUNCTION_12_0(v5);
  *(void *)(v2 + 1216) = v6;
  *(void *)(v2 + 1224) = OUTLINED_FUNCTION_9_13();
  *(void *)(v2 + 1232) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SnippetPluginContainer();
  *(void *)(v2 + 1240) = v7;
  OUTLINED_FUNCTION_12_0(v7);
  *(void *)(v2 + 1248) = v8;
  *(void *)(v2 + 1256) = OUTLINED_FUNCTION_9_13();
  *(void *)(v2 + 1264) = swift_task_alloc();
  *(void *)(v2 + 1272) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SearchToolIntentResponse(0);
  *(void *)(v2 + 1280) = v9;
  OUTLINED_FUNCTION_81(v9);
  *(void *)(v2 + 1288) = OUTLINED_FUNCTION_49_1();
  uint64_t v10 = type metadata accessor for SearchToolIntentRequest(0);
  *(void *)(v2 + 1296) = v10;
  OUTLINED_FUNCTION_81(v10);
  *(void *)(v2 + 1304) = OUTLINED_FUNCTION_49_1();
  uint64_t v11 = type metadata accessor for IntentSystemContext();
  *(void *)(v2 + 1312) = v11;
  OUTLINED_FUNCTION_12_0(v11);
  *(void *)(v2 + 1320) = v12;
  *(void *)(v2 + 1328) = OUTLINED_FUNCTION_9_13();
  *(void *)(v2 + 1336) = swift_task_alloc();
  *(void *)(v2 + 1344) = swift_task_alloc();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext?);
  OUTLINED_FUNCTION_81(v13);
  *(void *)(v2 + 1352) = OUTLINED_FUNCTION_9_13();
  *(void *)(v2 + 1360) = swift_task_alloc();
  *(void *)(v2 + 1368) = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
  OUTLINED_FUNCTION_81(v14);
  *(void *)(v2 + 1376) = OUTLINED_FUNCTION_49_1();
  uint64_t v15 = type metadata accessor for AssistantSystemContext(0);
  *(void *)(v2 + 1384) = v15;
  OUTLINED_FUNCTION_81(v15);
  *(void *)(v2 + 1392) = OUTLINED_FUNCTION_49_1();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
  *(void *)(v2 + 1400) = v16;
  OUTLINED_FUNCTION_81(v16);
  *(void *)(v2 + 1408) = OUTLINED_FUNCTION_49_1();
  long long v17 = v1[1];
  *(_OWORD *)(v2 + 1416) = *v1;
  *(_OWORD *)(v2 + 1432) = v17;
  long long v18 = v1[3];
  *(_OWORD *)(v2 + 1448) = v1[2];
  *(_OWORD *)(v2 + 1464) = v18;
  *(_OWORD *)(v2 + 1480) = v1[4];
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v19, v20, v21);
}

uint64_t SearchTool.perform()()
{
  uint64_t v86 = v0;
  if (one-time initialization token for stextension != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logging.stextension);
  *(void *)(v0 + 1496) = v2;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_24_2(v4))
  {
    uint64_t v70 = (void *)(v0 + 304);
    log = v3;
    uint64_t v67 = *(void *)(v0 + 1408);
    os_log_type_t type = v2;
    uint64_t v5 = swift_slowAlloc();
    v85[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136316674;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    *(void *)(v0 + 1088) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(void *)(v0 + 1000), *(void *)(v0 + 1008), v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_34_12();
    OUTLINED_FUNCTION_9_8();
    swift_release_n();
    OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_8_7();
    swift_release_n();
    OUTLINED_FUNCTION_12_19();
    OUTLINED_FUNCTION_10_12();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v6 = *(void *)(v0 + 1056);
    if (v6) {
      uint64_t v7 = *(void *)(v0 + 1048);
    }
    else {
      uint64_t v7 = 0;
    }
    if (v6) {
      unint64_t v8 = *(void *)(v0 + 1056);
    }
    else {
      unint64_t v8 = 0xE000000000000000;
    }
    *(void *)(v0 + 1104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_12_19();
    swift_release_n();
    OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_14_12();
    OUTLINED_FUNCTION_10_12();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_12_19();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_34_12();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v9 = Optional.debugDescription.getter();
    unint64_t v11 = v10;
    outlined destroy of StructuredQueryEntity?(v67, &demangling cache variable for type metadata for StructuredQueryEntity?);
    *(void *)(v0 + 1112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_10_12();
    OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_12_19();
    OUTLINED_FUNCTION_14_12();
    OUTLINED_FUNCTION_34_12();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 32) = 2080;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (*(void *)(v0 + 1152)) {
      uint64_t v12 = *(void *)(v0 + 1152);
    }
    else {
      uint64_t v12 = MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x25A2C7E60](v12, &type metadata for SearchEntityTypeIdentifier);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 1136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_7_12();
    swift_release_n();
    swift_release_n();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_12_19();
    OUTLINED_FUNCTION_12_19();
    OUTLINED_FUNCTION_10_12();
    OUTLINED_FUNCTION_13_14();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 42) = 2080;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined init with take of SearchContext?(v0 + 592, (uint64_t)v70, &demangling cache variable for type metadata for SearchContext?);
    outlined init with take of SearchContext?((uint64_t)v70, v0 + 16, &demangling cache variable for type metadata for SearchContext?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchContext?);
    uint64_t v16 = Optional.debugDescription.getter();
    unint64_t v18 = v17;
    outlined release of SearchContext?(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of SearchContext?);
    *(void *)(v0 + 1160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_12_19();
    OUTLINED_FUNCTION_12_19();
    OUTLINED_FUNCTION_10_12();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_14_12();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 52) = 2080;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (*(void *)(v0 + 1120)) {
      uint64_t v19 = *(void *)(v0 + 1120);
    }
    else {
      uint64_t v19 = MEMORY[0x263F8EE78];
    }
    uint64_t v20 = MEMORY[0x25A2C7E60](v19, &type metadata for EntityMatch);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 1080) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_34_12();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_10_12();
    OUTLINED_FUNCTION_14_12();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v5 + 62) = 0;
    *(unsigned char *)(v5 + 63) = 4;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    OUTLINED_FUNCTION_14_12();
    OUTLINED_FUNCTION_13_14();
    swift_release_n();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_9_8();
    OUTLINED_FUNCTION_34_12();
    OUTLINED_FUNCTION_12_19();
    OUTLINED_FUNCTION_13_14();
    swift_release_n();
    OUTLINED_FUNCTION_10_12();
    *(_DWORD *)(v0 + 1528) = *(unsigned char *)(v0 + 1533) & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    _os_log_impl(&dword_257DC6000, log, type, "SearchTool Intent perform() called with\n    rawQuery: %s,\n    rewrittenQuery: %s,\n    structuredQuery: %s,\n    typeIdentifiers: %s,\n    context: %s,\n    matchedEntities: %s,\n    isFirstToolInvocation: %{BOOL}d", (uint8_t *)v5, 0x44u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_25_14();
    MEMORY[0x25A2C94B0](v5, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v23 = (_OWORD *)(v0 + 1416);
  uint64_t v24 = one-time initialization token for shared;
  uint64_t v25 = static OmniSearchService.shared;
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v26 = static HallucinationMitigator.shared;
  uint64_t v27 = one-time initialization token for shared;
  swift_retain();
  if (v27 != -1) {
    swift_once();
  }
  uint64_t v28 = *(void *)(v0 + 1368);
  uint64_t v29 = *(void *)(v0 + 1320);
  uint64_t v30 = static MetricsLogger.shared;
  type metadata accessor for SearchToolIntentController();
  uint64_t v31 = (void *)swift_allocObject();
  *(void *)(v0 + 1504) = v31;
  v31[5] = type metadata accessor for OmniSearchService();
  v31[6] = &protocol witness table for OmniSearchService;
  v31[2] = v25;
  v31[10] = type metadata accessor for HallucinationMitigator();
  v31[11] = &protocol witness table for HallucinationMitigator;
  v31[7] = v26;
  v31[15] = type metadata accessor for MetricsLogger();
  v31[16] = &protocol witness table for MetricsLogger;
  v31[12] = v30;
  long long v32 = *(_OWORD *)(v0 + 1432);
  *(_OWORD *)(v0 + 736) = *v23;
  *(_OWORD *)(v0 + 752) = v32;
  long long v33 = *(_OWORD *)(v0 + 1464);
  *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 1448);
  *(_OWORD *)(v0 + 784) = v33;
  *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 1480);
  lazy protocol witness table accessor for type SearchTool and conformance SearchTool();
  swift_retain();
  AppIntent.systemContext.getter();
  IntentSystemContext.assistantContext.getter();
  uint64_t v34 = *(void (**)(void))(v29 + 8);
  OUTLINED_FUNCTION_45_8();
  v34();
  uint64_t v35 = type metadata accessor for IntentSystemContext.AssistantContext();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v28, 1, v35);
  uint64_t v37 = *(void *)(v0 + 1376);
  uint64_t v38 = *(void *)(v0 + 1368);
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of StructuredQueryEntity?(*(void *)(v0 + 1368), &demangling cache variable for type metadata for IntentSystemContext.AssistantContext?);
    uint64_t v39 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
    OUTLINED_FUNCTION_32(v37, v40, v41, v39);
  }
  else
  {
    IntentSystemContext.AssistantContext.interactionMode.getter();
    OUTLINED_FUNCTION_1_0();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v35);
  }
  uint64_t v43 = *(void *)(v0 + 1360);
  long long v44 = *(_OWORD *)(v0 + 1432);
  *(_OWORD *)(v0 + 896) = *v23;
  *(_OWORD *)(v0 + 912) = v44;
  long long v45 = *(_OWORD *)(v0 + 1464);
  *(_OWORD *)(v0 + 928) = *(_OWORD *)(v0 + 1448);
  *(_OWORD *)(v0 + 944) = v45;
  *(_OWORD *)(v0 + 960) = *(_OWORD *)(v0 + 1480);
  AppIntent.systemContext.getter();
  IntentSystemContext.assistantContext.getter();
  OUTLINED_FUNCTION_45_8();
  v34();
  int v46 = __swift_getEnumTagSinglePayload(v43, 1, v35);
  uint64_t v47 = *(void *)(v0 + 1360);
  if (v46 == 1)
  {
    outlined destroy of StructuredQueryEntity?(*(void *)(v0 + 1360), &demangling cache variable for type metadata for IntentSystemContext.AssistantContext?);
    uint64_t v80 = 0;
    uint64_t v82 = 0;
  }
  else
  {
    uint64_t v48 = IntentSystemContext.AssistantContext.locale.getter();
    uint64_t v80 = v49;
    uint64_t v82 = v48;
    OUTLINED_FUNCTION_1_0();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v47, v35);
  }
  uint64_t v51 = *(void *)(v0 + 1352);
  long long v52 = *(_OWORD *)(v0 + 1432);
  *(_OWORD *)(v0 + 816) = *v23;
  *(_OWORD *)(v0 + 832) = v52;
  long long v53 = *(_OWORD *)(v0 + 1464);
  *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 1448);
  *(_OWORD *)(v0 + 864) = v53;
  *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 1480);
  AppIntent.systemContext.getter();
  IntentSystemContext.assistantContext.getter();
  OUTLINED_FUNCTION_45_8();
  v34();
  int v54 = __swift_getEnumTagSinglePayload(v51, 1, v35);
  uint64_t v55 = *(void *)(v0 + 1352);
  if (v54 == 1)
  {
    outlined destroy of StructuredQueryEntity?(*(void *)(v0 + 1352), &demangling cache variable for type metadata for IntentSystemContext.AssistantContext?);
    uint64_t v68 = 0;
    uint64_t v69 = 0;
  }
  else
  {
    uint64_t v56 = IntentSystemContext.AssistantContext.requestIdentifier.getter();
    uint64_t v68 = v57;
    uint64_t v69 = v56;
    OUTLINED_FUNCTION_1_0();
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v55, v35);
  }
  uint64_t v59 = *(void *)(v0 + 1392);
  uint64_t v60 = *(void *)(v0 + 1384);
  uint64_t v84 = *(void *)(v0 + 1304);
  uint64_t v72 = *(int **)(v0 + 1296);
  outlined init with take of SearchContext?(*(void *)(v0 + 1376), v59, &demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
  uint64_t v61 = (uint64_t *)(v59 + *(int *)(v60 + 20));
  uint64_t *v61 = v82;
  v61[1] = v80;
  uint64_t v62 = (uint64_t *)(v59 + *(int *)(v60 + 24));
  *uint64_t v62 = v69;
  v62[1] = v68;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  IntentParameter.wrappedValue.getter();
  long long v83 = *(_OWORD *)(v0 + 1016);
  IntentParameter.wrappedValue.getter();
  uint64_t v79 = *(void *)(v0 + 1040);
  uint64_t v81 = *(void *)(v0 + 1032);
  IntentParameter.wrappedValue.getter();
  IntentParameter.wrappedValue.getter();
  os_log_t loga = *(os_log_t *)(v0 + 1128);
  IntentParameter.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined init with take of SearchContext?(v0 + 160, v0 + 448, &demangling cache variable for type metadata for SearchContext?);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  IntentParameter.wrappedValue.getter();
  uint64_t v74 = *(void *)(v0 + 1072);
  IntentParameter.wrappedValue.getter();
  char v73 = *(unsigned char *)(v0 + 1532);
  IntentParameter.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  char v71 = *(unsigned char *)(v0 + 1534);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  IntentParameter.wrappedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(void *)typea = *(void *)(v0 + 1144);
  outlined init with copy of AssistantSystemContext(v59, v84 + v72[13], (void (*)(void))type metadata accessor for AssistantSystemContext);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v63 = IntentParameter.projectedValue.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v64 = (uint64_t *)(v84 + v72[14]);
  v64[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<SearchEntity?>);
  v64[4] = (uint64_t)&protocol witness table for <> IntentParameter<A>;
  uint64_t *v64 = v63;
  *(_OWORD *)uint64_t v84 = v83;
  *(void *)(v84 + 16) = v81;
  *(void *)(v84 + 24) = v79;
  *(void *)(v84 + v72[7]) = loga;
  outlined init with take of SearchContext?(v0 + 448, v84 + v72[8], &demangling cache variable for type metadata for SearchContext?);
  *(void *)(v84 + v72[9]) = v74;
  *(unsigned char *)(v84 + v72[10]) = v73;
  *(unsigned char *)(v84 + v72[11]) = v71;
  *(void *)(v84 + v72[12]) = *(void *)typea;
  uint64_t v65 = (void *)swift_task_alloc();
  *(void *)(v0 + 1512) = v65;
  *uint64_t v65 = v0;
  v65[1] = SearchTool.perform();
  return SearchToolIntentController.perform(request:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v3 = v2;
  *(void *)(v4 + 1520) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  void *v0;
  void *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  void *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(void);
  uint64_t (*v37)(void);
  void (*v38)(void);
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  void (*v42)(void);
  uint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  uint64_t v1 = (void *)Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_24_2(v2))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_50_11(&dword_257DC6000, v3, v4, "SearchTool Intent receiver response from IntentController");
    OUTLINED_FUNCTION_25_14();
  }
  uint64_t v5 = v0[161];
  uint64_t v6 = v0[160];
  uint64_t v7 = v0[148];

  unint64_t v8 = v5 + *(int *)(v6 + 24);
  uint64_t v9 = (uint64_t *)(v8 + *(int *)(v7 + 36));
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    unint64_t v11 = (void *)Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_2(v12))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_50_11(&dword_257DC6000, v13, v14, "SearchTool Intent creating dialog with no attribution");
      OUTLINED_FUNCTION_25_14();
    }
    unint64_t v15 = v0[190];
    uint64_t v16 = (void *)v0[161];
    unint64_t v17 = v0[153];
    unint64_t v18 = v0[149];

    v0[137] = *v16;
    uint64_t v19 = v16[1];
    uint64_t v20 = v16[2];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v19, v20);
    SnippetPluginContainer.init(data:bundleIdentifer:)();
    outlined init with copy of AssistantSystemContext(v8, v18, (void (*)(void))type metadata accessor for DialogData);
    IntentDialog.init(dialogData:)(v18, v17);
    unint64_t v21 = v0[174];
    unint64_t v22 = v0[163];
    uint64_t v23 = v0[161];
    if (v15)
    {
      swift_release();
      uint64_t v24 = OUTLINED_FUNCTION_41_11();
      v25(v24);
LABEL_12:
      swift_bridgeObjectRelease();
      outlined destroy of SearchToolIntentRequest(v23, (void (*)(void))type metadata accessor for SearchToolIntentResponse);
      outlined destroy of SearchToolIntentRequest(v22, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
      outlined destroy of SearchToolIntentRequest(v21, (void (*)(void))type metadata accessor for AssistantSystemContext);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_13();
      goto LABEL_16;
    }
    uint64_t v47 = v0[174];
    uint64_t v48 = v0[161];
    int v46 = v0[163];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchEntity]);
    lazy protocol witness table accessor for type [SearchEntity] and conformance <A> [A]();
    static IntentResult.result<A>(value:pluginContainer:dialog:)();
    swift_release();
    OUTLINED_FUNCTION_29_14();
    v38();
    uint64_t v39 = OUTLINED_FUNCTION_41_11();
    v40(v39);
  }
  else
  {
    uint64_t v26 = *v9;
    outlined copy of Data._Representation(*v9, v10);
    uint64_t v27 = Logger.logObject.getter();
    uint64_t v28 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_24_2(v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_257DC6000, v27, (os_log_type_t)v5, "SearchTool Intent creating dialog with attribution", v29, 2u);
      MEMORY[0x25A2C94B0](v29, -1, -1);
    }
    uint64_t v30 = v0[190];
    uint64_t v31 = (void *)v0[161];
    long long v32 = v0[154];
    long long v33 = v0[150];

    v0[133] = *v31;
    uint64_t v34 = v31[1];
    uint64_t v35 = v31[2];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v34, v35);
    SnippetPluginContainer.init(data:bundleIdentifer:)();
    outlined init with copy of AssistantSystemContext(v8, v33, (void (*)(void))type metadata accessor for DialogData);
    IntentDialog.init(dialogData:)(v33, v32);
    unint64_t v21 = v0[174];
    unint64_t v22 = v0[163];
    uint64_t v48 = v0[161];
    if (v30)
    {
      swift_release();
      outlined consume of Data?(v26, v10);
      OUTLINED_FUNCTION_45_8();
      v36();
      uint64_t v23 = v48;
      goto LABEL_12;
    }
    int v46 = v0[163];
    uint64_t v47 = v0[174];
    uint64_t v41 = v0[156];
    swift_beginAccess();
    outlined copy of Data?(v26, v10);
    swift_bridgeObjectRetain();
    IntentViewOptions.init(canReplacePrintableText:)();
    SnippetPluginContainer.init(data:bundleIdentifier:intentViewOptions:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchEntity]);
    lazy protocol witness table accessor for type [SearchEntity] and conformance <A> [A]();
    static IntentResult.result<A>(value:pluginContainer:dialog:attribution:)();
    swift_release();
    outlined consume of Data?(v26, v10);
    uint64_t v42 = *(void (**)(void))(v41 + 8);
    OUTLINED_FUNCTION_29_14();
    v42();
    uint64_t v43 = OUTLINED_FUNCTION_9_5();
    v44(v43);
    OUTLINED_FUNCTION_29_14();
    v42();
  }
  swift_bridgeObjectRelease();
  outlined destroy of SearchToolIntentRequest(v48, (void (*)(void))type metadata accessor for SearchToolIntentResponse);
  outlined destroy of SearchToolIntentRequest(v46, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
  outlined destroy of SearchToolIntentRequest(v47, (void (*)(void))type metadata accessor for AssistantSystemContext);
  OUTLINED_FUNCTION_3_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = (uint64_t (*)(void))v0[1];
LABEL_16:
  return v37();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 1392);
  uint64_t v2 = *(void *)(v0 + 1304);
  swift_release();
  outlined destroy of SearchToolIntentRequest(v2, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
  outlined destroy of SearchToolIntentRequest(v1, (void (*)(void))type metadata accessor for AssistantSystemContext);
  OUTLINED_FUNCTION_3_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13();
  return v3();
}

uint64_t IntentDialog.init(dialogData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for URL();
  uint64_t v46 = *(void *)(v48 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v48);
  long long v45 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v47 = (char *)&v44 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for _SpeakableString();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v18 = (char *)&v44 - v17;
  uint64_t v19 = (int *)type metadata accessor for DialogData(0);
  outlined init with copy of EagerResolutionService?(a1 + v19[8], (uint64_t)v11, &demangling cache variable for type metadata for _SpeakableString?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
    outlined destroy of StructuredQueryEntity?((uint64_t)v11, &demangling cache variable for type metadata for _SpeakableString?);
    if (*(void *)(a1 + v19[7] + 8))
    {
      uint64_t v20 = one-time initialization token for stextension;
      swift_bridgeObjectRetain();
      if (v20 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logging.stextension);
      unint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl(&dword_257DC6000, v22, v23, "Creating IntentDialog with stringLiteral", v24, 2u);
        MEMORY[0x25A2C94B0](v24, -1, -1);
      }

      IntentDialog.init(stringLiteral:)();
      return outlined destroy of SearchToolIntentRequest(a1, (void (*)(void))type metadata accessor for DialogData);
    }
    if (!*(void *)(a1 + 8)) {
      goto LABEL_23;
    }
    outlined init with copy of EagerResolutionService?(a1 + v19[5], (uint64_t)v5, &demangling cache variable for type metadata for URL?);
    uint64_t v30 = v48;
    if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v48) == 1)
    {
      outlined destroy of StructuredQueryEntity?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
LABEL_23:
      if (one-time initialization token for stextension != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logging.stextension);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl(&dword_257DC6000, v40, v41, "Error Creating IntentDialog. Insufficient or invalid data provided", v42, 2u);
        MEMORY[0x25A2C94B0](v42, -1, -1);
      }

      lazy protocol witness table accessor for type SearchToolError and conformance SearchToolError();
      swift_allocError();
      *uint64_t v43 = 0xD000000000000049;
      v43[1] = 0x80000002586805D0;
      swift_willThrow();
      return outlined destroy of SearchToolIntentRequest(a1, (void (*)(void))type metadata accessor for DialogData);
    }
    uint64_t v32 = v46;
    uint64_t v31 = v47;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v47, v5, v30);
    if (!*(void *)(a1 + v19[6]))
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v30);
      goto LABEL_23;
    }
    uint64_t v33 = one-time initialization token for stextension;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logging.stextension);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_257DC6000, v35, v36, "Creating IntentDialog with CAT identifier", v37, 2u);
      MEMORY[0x25A2C94B0](v37, -1, -1);
    }

    uint64_t v38 = v47;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v45, v47, v30);
    IntentDialog.init(identifier:templateDirectoryURL:parameters:)();
    outlined destroy of SearchToolIntentRequest(a1, (void (*)(void))type metadata accessor for DialogData);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v38, v30);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    if (one-time initialization token for stextension != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logging.stextension);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_257DC6000, v27, v28, "Creating IntentDialog with speakableString", v29, 2u);
      MEMORY[0x25A2C94B0](v29, -1, -1);
    }

    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    IntentDialog.init(full:systemImageName:)();
    outlined destroy of SearchToolIntentRequest(a1, (void (*)(void))type metadata accessor for DialogData);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
}

uint64_t protocol witness for AppIntent.perform() in conformance SearchTool(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = AnswerSynthesisModelServer.synthesizeWithTemplate_runnable(_:bindings:);
  return SearchTool.perform()(a1);
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance SearchTool(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchTool and conformance SearchTool();
  return MEMORY[0x270EE0D28](a1, v2);
}

uint64_t IntentParameter<>.requestDisambiguation(among:dialogData:)()
{
  OUTLINED_FUNCTION_27();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = type metadata accessor for DialogData(0);
  OUTLINED_FUNCTION_81(v5);
  v1[6] = OUTLINED_FUNCTION_49_1();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  OUTLINED_FUNCTION_81(v6);
  v1[7] = OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  outlined init with copy of AssistantSystemContext(v0[4], v1, (void (*)(void))type metadata accessor for DialogData);
  IntentDialog.init(dialogData:)(v1, v2);
  uint64_t v3 = v0[7];
  uint64_t v4 = type metadata accessor for IntentDialog();
  __swift_storeEnumTagSinglePayload(v3, 0, 1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  char *v5 = v0;
  v5[1] = IntentParameter<>.requestDisambiguation(among:dialogData:);
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[2];
  uint64_t v8 = v0[3];
  return MEMORY[0x270EE1220](v7, v8, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  char *v7 = v6;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  outlined destroy of StructuredQueryEntity?(v5, (uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  if (v0)
  {
    OUTLINED_FUNCTION_26();
    return MEMORY[0x270FA2498](v8, v9, v10);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v6 + 8);
    return v11();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_27();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13();
  return v0();
}

uint64_t protocol witness for DisambiguationRequestable.requestDisambiguation(among:dialogData:) in conformance <> IntentParameter<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = AnswerSynthesisModelServer.synthesizeWithOverride_runnable(_:bindings:);
  return IntentParameter<>.requestDisambiguation(among:dialogData:)();
}

unint64_t lazy protocol witness table accessor for type SearchToolClientType and conformance SearchToolClientType()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType;
  if (!lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolClientType and conformance SearchToolClientType);
  }
  return result;
}

uint64_t outlined init with take of SearchContext?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of AssistantSystemContext(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_0();
  uint64_t v4 = OUTLINED_FUNCTION_210();
  v5(v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type StructuredQueryEntity and conformance StructuredQueryEntity(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of SearchContext?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in SearchTool()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in SearchTool()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2583830B4(__n128 *a1)
{
  return key path getter for SearchTool.structuredQuery : SearchTool(a1);
}

uint64_t sub_2583830E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchTool.structuredQuery : SearchTool(a1, a2, a3, a4, &demangling cache variable for type metadata for StructuredQueryEntity?, SearchTool.structuredQuery.setter);
}

uint64_t sub_258383114@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SearchTool.typeIdentifiers : SearchTool(a1, a2);
}

uint64_t sub_258383140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchTool.typeIdentifiers : SearchTool(a1, a2, a3, a4, (uint64_t (*)(uint64_t))SearchTool.typeIdentifiers.setter);
}

uint64_t sub_258383174@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SearchTool.typeIdentifiers : SearchTool(a1, a2);
}

uint64_t sub_2583831A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchTool.typeIdentifiers : SearchTool(a1, a2, a3, a4, (uint64_t (*)(uint64_t))SearchTool.matchedEntities.setter);
}

uint64_t sub_2583831D4(__n128 *a1)
{
  return key path getter for SearchTool.structuredQuery : SearchTool(a1);
}

uint64_t sub_258383200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchTool.structuredQuery : SearchTool(a1, a2, a3, a4, &demangling cache variable for type metadata for SearchEntity?, SearchTool.disambiguatedEntity.setter);
}

uint64_t sub_25838323C@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SearchTool.typeIdentifiers : SearchTool(a1, a2);
}

uint64_t sub_258383268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchTool.typeIdentifiers : SearchTool(a1, a2, a3, a4, (uint64_t (*)(uint64_t))SearchTool.requestedProperties.setter);
}

uint64_t destroy for SearchTool()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for SearchTool(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SearchTool(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for SearchTool(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  swift_release();
  a1[2] = a2[2];
  swift_release();
  swift_release();
  a1[3] = a2[3];
  swift_release();
  swift_release();
  a1[4] = a2[4];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SearchTool()
{
  return &type metadata for SearchTool;
}

uint64_t sub_258383598()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntentParameterSummary<SearchTool> and conformance IntentParameterSummary<A>, &demangling cache variable for type metadata for IntentParameterSummary<SearchTool>);
}

uint64_t sub_2583835D4()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog> and conformance <> IntentResultContainer<A, B, C, D>, &demangling cache variable for type metadata for IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog>);
}

uint64_t sub_258383610()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog> and conformance <> IntentResultContainer<A, B, C, D>, &demangling cache variable for type metadata for IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog>);
}

uint64_t sub_25838364C()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog> and conformance IntentResultContainer<A, B, C, D>, &demangling cache variable for type metadata for IntentResultContainer<[SearchEntity], Never, _SnippetViewContainer, IntentDialog>);
}

void *outlined release of SearchContext?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined copy of SearchContext?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined destroy of SearchToolIntentRequest(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = OUTLINED_FUNCTION_9_5();
  v4(v3);
  return a1;
}

uint64_t outlined destroy of StructuredQueryEntity?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = OUTLINED_FUNCTION_9_5();
  v4(v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_20()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_5_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_13()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_12_19()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_19_14()
{
  return v0;
}

__n128 OUTLINED_FUNCTION_20_14(__n128 *a1)
{
  return a1[4];
}

uint64_t OUTLINED_FUNCTION_23_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_16()
{
  return v0;
}

void OUTLINED_FUNCTION_25_14()
{
  JUMPOUT(0x25A2C94B0);
}

uint64_t OUTLINED_FUNCTION_33_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_12()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_35_11()
{
  uint64_t v3 = *(void *)(v0 + 144);
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v3);
}

uint64_t OUTLINED_FUNCTION_36_11()
{
  uint64_t v3 = *(void *)(v0 + 120);
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v3);
}

uint64_t OUTLINED_FUNCTION_37_12()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_41_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_42_8()
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_43_12()
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_44_12()
{
  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_48_8()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

void OUTLINED_FUNCTION_50_11(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t static SearchToolControl.openAppWhenRun.getter()
{
  return 0;
}

char *SearchToolControl.assistantOnly.unsafeMutableAddressor()
{
  return &static SearchToolControl.assistantOnly;
}

uint64_t static SearchToolControl.assistantOnly.getter()
{
  return static SearchToolControl.assistantOnly;
}

uint64_t static SearchToolControl.assistantOnly.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_2_4();
  static SearchToolControl.assistantOnly = a1;
  return result;
}

uint64_t (*static SearchToolControl.assistantOnly.modify())()
{
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t static SearchToolControl.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolControl.title);
  os_log_type_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t static SearchToolControl.description.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for IntentDescription();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolControl.description);
  OUTLINED_FUNCTION_0_1();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static SearchToolControl.description.setter(uint64_t a1)
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for IntentDescription();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolControl.description);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static SearchToolControl.description.modify())()
{
  if (one-time initialization token for description != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for IntentDescription();
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolControl.description);
  OUTLINED_FUNCTION_21_8();
  return AnswerSynthesisModelOnDevice.modelVersion.modify;
}

uint64_t SearchToolControl.command.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchToolControl.command : SearchToolControl@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchToolControl.command.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for SearchToolControl.command : SearchToolControl()
{
  return SearchToolControl.command.setter();
}

uint64_t SearchToolControl.command.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchToolControl.command.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolControl.$command.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t SearchToolControl.originatorPID.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for SearchToolControl.originatorPID : SearchToolControl@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = SearchToolControl.originatorPID.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for SearchToolControl.originatorPID : SearchToolControl()
{
  return SearchToolControl.originatorPID.setter();
}

uint64_t SearchToolControl.originatorPID.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*SearchToolControl.originatorPID.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchToolControl.$originatorPID.getter()
{
  return IntentParameter.projectedValue.getter();
}

int *SearchToolControl.prewarmPID.unsafeMutableAddressor()
{
  return &static SearchToolControl.prewarmPID;
}

unint64_t static SearchToolControl.prewarmPID.getter()
{
  return static SearchToolControl.prewarmPID | ((unint64_t)byte_26B2E1464 << 32);
}

uint64_t static SearchToolControl.prewarmPID.setter(uint64_t a1)
{
  uint64_t result = OUTLINED_FUNCTION_2_4();
  static SearchToolControl.prewarmPID = a1;
  byte_26B2E1464 = BYTE4(a1) & 1;
  return result;
}

uint64_t (*static SearchToolControl.prewarmPID.modify())()
{
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t SearchToolControl.init()@<X0>(uint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<Int?>.IntControlStyle);
  OUTLINED_FUNCTION_1();
  uint64_t v29 = v2;
  uint64_t v30 = v1;
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15();
  uint64_t v28 = v4 - v3;
  uint64_t v5 = type metadata accessor for InputConnectionBehavior();
  OUTLINED_FUNCTION_1();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_15();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntentDialog?);
  MEMORY[0x270FA5388](v12 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.IntentInputOptions?);
  MEMORY[0x270FA5388](v13 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v17 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v20 = v19 - v18;
  uint64_t v27 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<String>);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v20, 0, 1, v27);
  uint64_t v21 = type metadata accessor for String.IntentInputOptions();
  __swift_storeEnumTagSinglePayload(v16, 1, 1, v21);
  type metadata accessor for IntentDialog();
  OUTLINED_FUNCTION_6_18();
  uint64_t v22 = *MEMORY[0x263EFBDC8];
  os_log_type_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104);
  v23(v11, v22, v5);
  uint64_t v24 = v11;
  uint64_t v25 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<Int?>);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v20, 0, 1, v27);
  OUTLINED_FUNCTION_6_18();
  (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v28, *MEMORY[0x263EFB958], v30);
  v23(v24, v22, v5);
  uint64_t result = IntentParameter<>.init(title:description:default:controlStyle:inclusiveRange:requestValueDialog:inputConnectionBehavior:)();
  *a1 = v25;
  a1[1] = result;
  return result;
}

uint64_t SearchToolControl.perform()(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(_OWORD *)(v2 + 72) = *v1;
  return MEMORY[0x270FA2498](SearchToolControl.perform(), 0, 0);
}

uint64_t SearchToolControl.perform()()
{
  uint64_t v26 = v0;
  swift_retain();
  swift_retain();
  IntentParameter.wrappedValue.getter();
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 16);
  BOOL v3 = v2 == 0x70756D726177 && v1 == 0xE600000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for stextension != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logging.stextension);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      OUTLINED_FUNCTION_0_1();
      char v8 = byte_26B2E1464;
      *(_DWORD *)(v0 + 40) = static SearchToolControl.prewarmPID;
      *(unsigned char *)(v0 + 44) = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
      uint64_t v9 = String.init<A>(describing:)();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257DC6000, v5, v6, "Warming up SearchToolExtension for search, running on pid: %s", v7, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }

    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static OmniSearchService.shared) + 0xB0))();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    LocalSearchManager.activate()();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)static AnswerSynthesisController.shared + 192))();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)static LLMQueryParser.shared + 128))();
    id v11 = objc_msgSend(self, sel_processInfo);
    unsigned int v12 = objc_msgSend(v11, sel_processIdentifier);

    swift_beginAccess();
    static SearchToolControl.prewarmPID = v12;
    byte_26B2E1464 = 0;
    *(unsigned char *)(v0 + 88) = 1;
    lazy protocol witness table accessor for type Bool and conformance Bool();
    goto LABEL_39;
  }
  if (v2 == 0xD000000000000017 && v1 == 0x80000002586806A0)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    if (*(unsigned char *)(v0 + 24))
    {
      if (one-time initialization token for stextension != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logging.stextension);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl(&dword_257DC6000, v15, v16, "No originatorPID was set for perwarming MemoryCreationQU", v17, 2u);
        OUTLINED_FUNCTION_34();
      }

      *(unsigned char *)(v0 + 16) = 0;
    }
    else
    {
      uint64_t v18 = *(void *)(v0 + 16);
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      (*(void (**)(uint64_t))(*(void *)static MemoryCreationQUController.shared + 184))(v18);
      *(unsigned char *)(v0 + 16) = 1;
    }
    lazy protocol witness table accessor for type Bool and conformance Bool();
    goto LABEL_39;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v13) {
    goto LABEL_23;
  }
  if (one-time initialization token for stextension != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logging.stextension);
  swift_retain_n();
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_retain();
    swift_retain();
    IntentParameter.wrappedValue.getter();
    swift_release();
    swift_release();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(void *)(v0 + 16), *(void *)(v0 + 24), &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();
    _os_log_impl(&dword_257DC6000, v20, v21, "Unknown command sent to command intent: %s", v22, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
    swift_release_n();
    swift_release_n();
  }

  *(unsigned char *)(v0 + 16) = 0;
  lazy protocol witness table accessor for type Bool and conformance Bool();
LABEL_39:
  static IntentResult.result<A>(value:)();
  os_log_type_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t protocol witness for AppIntent.perform() in conformance SearchToolControl(uint64_t a1)
{
  BOOL v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *BOOL v3 = v1;
  v3[1] = protocol witness for AppIntent.perform() in conformance SearchToolControl;
  return SearchToolControl.perform()(a1);
}

uint64_t protocol witness for AppIntent.perform() in conformance SearchToolControl()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance SearchToolControl(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchToolControl and conformance SearchToolControl();
  return MEMORY[0x270EE0D28](a1, v2);
}

unint64_t lazy protocol witness table accessor for type Bool and conformance Bool()
{
  unint64_t result = lazy protocol witness table cache variable for type Bool and conformance Bool;
  if (!lazy protocol witness table cache variable for type Bool and conformance Bool)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Bool and conformance Bool);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchToolControl and conformance SearchToolControl()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchToolControl and conformance SearchToolControl;
  if (!lazy protocol witness table cache variable for type SearchToolControl and conformance SearchToolControl)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolControl and conformance SearchToolControl);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolControl and conformance SearchToolControl;
  if (!lazy protocol witness table cache variable for type SearchToolControl and conformance SearchToolControl)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolControl and conformance SearchToolControl);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolControl and conformance SearchToolControl;
  if (!lazy protocol witness table cache variable for type SearchToolControl and conformance SearchToolControl)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolControl and conformance SearchToolControl);
  }
  return result;
}

uint64_t associated type witness table accessor for AppIntent.PerformResult : IntentResult in SearchToolControl()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in SearchToolControl()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SearchToolControl()
{
  return &type metadata for SearchToolControl;
}

unint64_t lazy protocol witness table accessor for type IntentResultContainer<Bool, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>()
{
  unint64_t result = lazy protocol witness table cache variable for type IntentResultContainer<Bool, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>;
  if (!lazy protocol witness table cache variable for type IntentResultContainer<Bool, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for IntentResultContainer<Bool, Never, Never, Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentResultContainer<Bool, Never, Never, Never> and conformance IntentResultContainer<A, B, C, D>);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_6_18()
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

uint64_t SearchToolError.localizedStringResource.getter(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x270FA5388](v4 - 8);
  if ((unint64_t)a2 > 1)
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v6._object = (void *)0x8000000258680740;
    v6._countAndFlagsBits = 0xD000000000000012;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v6);
    v7._countAndFlagsBits = a1;
    v7._object = a2;
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v7);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v8);
    return LocalizedStringResource.init(stringInterpolation:)();
  }
  else
  {
    return LocalizedStringResource.init(stringLiteral:)();
  }
}

uint64_t static SearchToolError.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2) {
    return !a4;
  }
  if (a2 == 1) {
    return a4 == 1;
  }
  if (a4 < 2) {
    return 0;
  }
  if (a1 != a3 || a2 != a4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SearchToolError(uint64_t *a1, uint64_t a2)
{
  return static SearchToolError.== infix(_:_:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SearchToolError()
{
  return SearchToolError.localizedStringResource.getter(*(void *)v0, *(void **)(v0 + 8));
}

unint64_t destroy for SearchToolError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchToolError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for SearchToolError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SearchToolError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchToolError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SearchToolError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for SearchToolError(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for SearchToolError(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchToolError()
{
  return &type metadata for SearchToolError;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10OmniSearch0E6EntityVG_AF0E9CATEntityVs5NeverOTg504_s10d209Search0B20ToolIntentControllerC15buildDialogData33_12E9D6AD9B7C26936623555213C26B09LL4from12renderOption5query15isQuestionQuery11forceUseCAT13systemContext10Foundation0H0V07snippetH0_AA0gH0V06dialogH0tSayAA0B6f66VG_AA0ab14ResponseRenderR0OSSS2bAA22AssistantSystemContextVtFAA0B9G57VATcfu4_33_449143660f8ab50c5df8c7dc2c7d5ba9ATA_Tf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SearchCATEntity();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  Swift::String v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    v14[1] = v1;
    uint64_t v15 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v8 = v15;
    uint64_t v9 = *(void *)(type metadata accessor for SearchEntity(0) - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    do
    {
      SearchEntity.asCATEntity.getter();
      uint64_t v15 = v8;
      unint64_t v12 = *(void *)(v8 + 16);
      if (v12 >= *(void *)(v8 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v15;
      }
      *(void *)(v8 + 16) = v12 + 1;
      outlined init with take of AssistantSystemContext((uint64_t)v6, v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, (void (*)(void))type metadata accessor for SearchCATEntity);
      v10 += v11;
      --v7;
    }
    while (v7);
  }
  return v8;
}

void SearchToolIntentController.__allocating_init(omniSearchService:hallucinationMitigator:metricsLogger:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v32 = (uint64_t *)v7;
  uint64_t v33 = *(void *)(v6 + 32);
  uint64_t v9 = OUTLINED_FUNCTION_117_2();
  __swift_mutable_project_boxed_opaque_existential_1(v9, v10);
  OUTLINED_FUNCTION_0_10();
  MEMORY[0x270FA5388](v11);
  char v13 = OUTLINED_FUNCTION_36_12(v12, v27);
  v14(v13);
  OUTLINED_FUNCTION_113_5();
  OUTLINED_FUNCTION_0_10();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = OUTLINED_FUNCTION_37_13(v16, v28);
  v18(v17);
  uint64_t v19 = *(void *)(v2 + 24);
  __swift_mutable_project_boxed_opaque_existential_1(v2, v19);
  OUTLINED_FUNCTION_0_10();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = OUTLINED_FUNCTION_35_12(v21, v29);
  v23(v22);
  uint64_t v24 = OUTLINED_FUNCTION_76_4();
  specialized SearchToolIntentController.init(omniSearchService:hallucinationMitigator:metricsLogger:)(v24, v25, v26, v32, v8, v19, v0, v33, v30, v31);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v6);
  OUTLINED_FUNCTION_119_0();
}

uint64_t AssistantSystemContext.init(interactionMode:locale:requestIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  outlined init with take of EagerResolutionService?(a1, a6, &demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
  uint64_t result = type metadata accessor for AssistantSystemContext(0);
  uint64_t v12 = (void *)(a6 + *(int *)(result + 20));
  *uint64_t v12 = a2;
  v12[1] = a3;
  char v13 = (void *)(a6 + *(int *)(result + 24));
  *char v13 = a4;
  v13[1] = a5;
  return result;
}

uint64_t SearchToolIntentRequest.init(rawQuery:rewrittenQuery:structuredQuery:typeIdentifiers:context:matchEntities:isFirstToolInvocation:invocationClient:requestedProperties:systemContext:disambiguatedEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, char a10, char *a11, uint64_t a12, uint64_t a13, long long *a14)
{
  outlined init with take of EagerResolutionService?(a7, (uint64_t)v25, &demangling cache variable for type metadata for SearchContext?);
  char v21 = *a11;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  uint64_t v22 = (int *)type metadata accessor for SearchToolIntentRequest(0);
  outlined init with take of EagerResolutionService?(a5, (uint64_t)a9 + v22[6], &demangling cache variable for type metadata for StructuredQueryEntity?);
  *(void *)((char *)a9 + v22[7]) = a6;
  outlined init with take of EagerResolutionService?((uint64_t)v25, (uint64_t)a9 + v22[8], &demangling cache variable for type metadata for SearchContext?);
  *(void *)((char *)a9 + v22[9]) = a8;
  *((unsigned char *)a9 + v22[10]) = a10;
  *((unsigned char *)a9 + v22[11]) = v21;
  *(void *)((char *)a9 + v22[12]) = a12;
  outlined init with take of AssistantSystemContext(a13, (uint64_t)a9 + v22[13], (void (*)(void))type metadata accessor for AssistantSystemContext);
  return outlined init with take of SageSearchClient(a14, (uint64_t)a9 + v22[14]);
}

uint64_t SearchToolIntentRequest.rawQuery.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t SearchToolIntentRequest.rewrittenQuery.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t SearchToolIntentRequest.structuredQuery.getter@<X0>(uint64_t a1@<X8>)
{
  return SearchToolIntentRequest.structuredQuery.getter(type metadata accessor for SearchToolIntentRequest, (uint64_t)&demangling cache variable for type metadata for StructuredQueryEntity?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined init with copy of StructuredQueryEntity?, a1);
}

uint64_t SearchToolIntentRequest.typeIdentifiers.getter()
{
  type metadata accessor for SearchToolIntentRequest(0);
  return swift_bridgeObjectRetain();
}

uint64_t *SearchToolIntentRequest.context.getter()
{
  uint64_t v1 = OUTLINED_FUNCTION_92_5();
  outlined init with take of EagerResolutionService?(v0 + *(int *)(v1 + 32), (uint64_t)v3, &demangling cache variable for type metadata for SearchContext?);
  OUTLINED_FUNCTION_89_1((uint64_t)v3);
  return outlined retain of SearchContext?(v3);
}

uint64_t SearchToolIntentRequest.matchEntities.getter()
{
  type metadata accessor for SearchToolIntentRequest(0);
  return swift_bridgeObjectRetain();
}

uint64_t SearchToolIntentRequest.isFirstToolInvocation.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SearchToolIntentRequest(0) + 40));
}

uint64_t SearchToolIntentRequest.invocationClient.getter()
{
  uint64_t result = OUTLINED_FUNCTION_92_5();
  *uint64_t v0 = *(unsigned char *)(v1 + *(int *)(result + 44));
  return result;
}

uint64_t SearchToolIntentRequest.requestedProperties.getter()
{
  type metadata accessor for SearchToolIntentRequest(0);
  return swift_bridgeObjectRetain();
}

uint64_t SearchToolIntentRequest.systemContext.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_92_5();
  return _s10OmniSearch22AssistantSystemContextVWOcTm_0(v1 + *(int *)(v2 + 52), v0, (void (*)(void))type metadata accessor for AssistantSystemContext);
}

uint64_t SearchToolIntentRequest.disambiguatedEntity.getter()
{
  uint64_t v2 = OUTLINED_FUNCTION_92_5();
  return outlined init with copy of ExtractionRule(v1 + *(int *)(v2 + 56), v0);
}

uint64_t AssistantSystemContext.interactionMode.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of StructuredQueryEntity?(v1, a1, &demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
}

uint64_t AssistantSystemContext.locale.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t AssistantSystemContext.requestIdentifier.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t DialogData.identifier.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t DialogData.templateDirectoryURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DialogData(0);
  return outlined init with copy of StructuredQueryEntity?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t DialogData.parameters.getter()
{
  type metadata accessor for DialogData(0);
  return swift_bridgeObjectRetain();
}

uint64_t DialogData.stringLiteral.getter()
{
  return OUTLINED_FUNCTION_79_0();
}

uint64_t DialogData.speakableString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DialogData(0);
  return outlined init with copy of StructuredQueryEntity?(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for _SpeakableString?);
}

uint64_t DialogData.attributionData.getter()
{
  type metadata accessor for DialogData(0);
  uint64_t v0 = OUTLINED_FUNCTION_79_0();
  outlined copy of Data?(v0, v1);
  return OUTLINED_FUNCTION_79_0();
}

uint64_t DialogData.init(identifier:templateDirectoryURL:parameters:stringLiteral:speakableString:attributionData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v17 = (int *)type metadata accessor for DialogData(0);
  uint64_t v18 = (void *)((char *)a9 + v17[9]);
  *a9 = a1;
  a9[1] = a2;
  outlined init with take of EagerResolutionService?(a3, (uint64_t)a9 + v17[5], &demangling cache variable for type metadata for URL?);
  *(void *)((char *)a9 + v17[6]) = a4;
  uint64_t v19 = (void *)((char *)a9 + v17[7]);
  *uint64_t v19 = a5;
  v19[1] = a6;
  uint64_t result = outlined init with take of EagerResolutionService?(a7, (uint64_t)a9 + v17[8], &demangling cache variable for type metadata for _SpeakableString?);
  void *v18 = a8;
  v18[1] = a10;
  return result;
}

uint64_t SearchToolIntentResponse.results.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SearchToolIntentResponse.snippetData.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_79_0();
  outlined copy of Data._Representation(v0, v1);
  return OUTLINED_FUNCTION_79_0();
}

uint64_t SearchToolIntentResponse.dialogData.getter@<X0>(uint64_t a1@<X8>)
{
  return SearchToolIntentRequest.structuredQuery.getter(type metadata accessor for SearchToolIntentResponse, (uint64_t)type metadata accessor for DialogData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s10OmniSearch22AssistantSystemContextVWOcTm_0, a1);
}

uint64_t SearchToolIntentRequest.structuredQuery.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0);
  return a3(v4 + *(int *)(v8 + 24), a4, a2);
}

uint64_t SearchToolIntentResponse.init(results:snippetData:dialogData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  OUTLINED_FUNCTION_105_5();
  return outlined init with take of AssistantSystemContext(a4, (uint64_t)a5 + v7, (void (*)(void))type metadata accessor for DialogData);
}

uint64_t one-time initialization function for catTemplateDirectoryURL()
{
  uint64_t v0 = type metadata accessor for URL();
  __swift_allocate_value_buffer(v0, static SearchToolIntentController.catTemplateDirectoryURL);
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolIntentController.catTemplateDirectoryURL);
  return closure #1 in variable initialization expression of static SearchToolIntentController.catTemplateDirectoryURL();
}

uint64_t closure #1 in variable initialization expression of static SearchToolIntentController.catTemplateDirectoryURL()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  type metadata accessor for DialogExperience();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v11 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v12 = objc_msgSend(v11, sel_resourceURL);
  if (!v12)
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
    goto LABEL_5;
  }
  char v13 = v12;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v14(v2, v7, v3);
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 0, 1, v3);
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) == 1)
  {
LABEL_5:
    id v15 = objc_msgSend(v11, sel_bundleURL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    outlined destroy of EagerResolutionService?((uint64_t)v2, &demangling cache variable for type metadata for URL?);
    goto LABEL_6;
  }
  v14(v9, v2, v3);
LABEL_6:
  URL.appendingPathComponent(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

void SearchToolIntentController.init(omniSearchService:hallucinationMitigator:metricsLogger:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v31 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v30 = *(void *)(v6 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v6, v8);
  OUTLINED_FUNCTION_0_10();
  MEMORY[0x270FA5388](v9);
  id v11 = OUTLINED_FUNCTION_36_12(v10, v25);
  v12(v11);
  OUTLINED_FUNCTION_113_5();
  OUTLINED_FUNCTION_0_10();
  MEMORY[0x270FA5388](v13);
  id v15 = OUTLINED_FUNCTION_37_13(v14, v26);
  v16(v15);
  uint64_t v17 = *(void *)(v3 + 24);
  __swift_mutable_project_boxed_opaque_existential_1(v3, v17);
  OUTLINED_FUNCTION_0_10();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = OUTLINED_FUNCTION_35_12(v19, v27);
  v21(v20);
  uint64_t v22 = OUTLINED_FUNCTION_76_4();
  specialized SearchToolIntentController.init(omniSearchService:hallucinationMitigator:metricsLogger:)(v22, v23, v24, v31, v8, v17, v1, v30, v28, v29);
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  __swift_destroy_boxed_opaque_existential_1Tm(v5);
  __swift_destroy_boxed_opaque_existential_1Tm(v7);
  OUTLINED_FUNCTION_119_0();
}

uint64_t SearchToolIntentController.perform(request:)()
{
  OUTLINED_FUNCTION_27();
  v1[193] = v0;
  v1[192] = v2;
  v1[191] = v3;
  uint64_t v4 = type metadata accessor for SearchAppEntity(0);
  v1[194] = v4;
  OUTLINED_FUNCTION_81(v4);
  v1[195] = OUTLINED_FUNCTION_49_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchAppEntity?);
  OUTLINED_FUNCTION_81(v5);
  v1[196] = OUTLINED_FUNCTION_49_1();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchEntity?);
  OUTLINED_FUNCTION_81(v6);
  v1[197] = OUTLINED_FUNCTION_50_0();
  v1[198] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DialogData(0);
  v1[199] = v7;
  OUTLINED_FUNCTION_81(v7);
  v1[200] = OUTLINED_FUNCTION_50_0();
  v1[201] = swift_task_alloc();
  v1[202] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_12_0(v8);
  v1[203] = v9;
  v1[204] = OUTLINED_FUNCTION_50_0();
  v1[205] = swift_task_alloc();
  v1[206] = swift_task_alloc();
  v1[207] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetData: Data, dialogData: DialogData));
  v1[208] = v10;
  OUTLINED_FUNCTION_81(v10);
  v1[209] = OUTLINED_FUNCTION_49_1();
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  v1[210] = v11;
  OUTLINED_FUNCTION_81(v11);
  v1[211] = OUTLINED_FUNCTION_49_1();
  uint64_t v12 = type metadata accessor for DisplayRepresentation();
  v1[212] = v12;
  OUTLINED_FUNCTION_12_0(v12);
  v1[213] = v13;
  v1[214] = OUTLINED_FUNCTION_49_1();
  uint64_t v14 = type metadata accessor for SearchResultType();
  v1[215] = v14;
  OUTLINED_FUNCTION_12_0(v14);
  v1[216] = v15;
  v1[217] = OUTLINED_FUNCTION_49_1();
  uint64_t v16 = type metadata accessor for SearchEntity(0);
  v1[218] = v16;
  OUTLINED_FUNCTION_12_0(v16);
  v1[219] = v17;
  v1[220] = OUTLINED_FUNCTION_50_0();
  v1[221] = swift_task_alloc();
  v1[222] = swift_task_alloc();
  v1[223] = swift_task_alloc();
  v1[224] = swift_task_alloc();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchEntity));
  v1[225] = v18;
  OUTLINED_FUNCTION_81(v18);
  v1[226] = OUTLINED_FUNCTION_49_1();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SearchEntity)?);
  OUTLINED_FUNCTION_81(v19);
  v1[227] = OUTLINED_FUNCTION_50_0();
  v1[228] = swift_task_alloc();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
  OUTLINED_FUNCTION_81(v20);
  v1[229] = OUTLINED_FUNCTION_49_1();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
  OUTLINED_FUNCTION_81(v21);
  v1[230] = OUTLINED_FUNCTION_49_1();
  uint64_t v22 = type metadata accessor for OmniSearchOptions();
  v1[231] = v22;
  OUTLINED_FUNCTION_81(v22);
  v1[232] = OUTLINED_FUNCTION_50_0();
  v1[233] = swift_task_alloc();
  uint64_t v23 = type metadata accessor for OSSignpostError();
  v1[234] = v23;
  OUTLINED_FUNCTION_12_0(v23);
  v1[235] = v24;
  v1[236] = OUTLINED_FUNCTION_50_0();
  v1[237] = swift_task_alloc();
  v1[238] = swift_task_alloc();
  v1[239] = swift_task_alloc();
  uint64_t v25 = type metadata accessor for SearchToolIntentRequest(0);
  v1[240] = v25;
  OUTLINED_FUNCTION_81(v25);
  v1[241] = OUTLINED_FUNCTION_50_0();
  v1[242] = swift_task_alloc();
  v1[243] = swift_task_alloc();
  v1[244] = swift_task_alloc();
  v1[245] = swift_task_alloc();
  v1[246] = swift_task_alloc();
  uint64_t v26 = type metadata accessor for OSSignpostID();
  v1[247] = v26;
  OUTLINED_FUNCTION_12_0(v26);
  v1[248] = v27;
  v1[249] = OUTLINED_FUNCTION_50_0();
  v1[250] = swift_task_alloc();
  v1[251] = swift_task_alloc();
  v1[252] = swift_task_alloc();
  v1[253] = swift_task_alloc();
  v1[254] = swift_task_alloc();
  v1[255] = swift_task_alloc();
  uint64_t v28 = type metadata accessor for UUID();
  v1[256] = v28;
  OUTLINED_FUNCTION_12_0(v28);
  v1[257] = v29;
  v1[258] = OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v30, v31, v32);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  uint8_t *v19;
  os_signpost_id_t v20;
  uint64_t v21;
  void (*v22)(void);
  void (*v23)(void);
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _WORD *v27;
  const char *v28;
  int v29;
  id v30;
  uint64_t v31;
  os_log_type_t v32;
  _WORD *v33;
  uint64_t v34;
  os_log_type_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  os_log_type_t v45;
  _WORD *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void (*v76)(void);
  os_signpost_type_t v77;
  os_signpost_id_t v78;
  int *v79;
  uint64_t v80;
  void (*v81)(void);
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(void);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;

  uint64_t v1 = *(void *)(v0 + 1536);
  uint64_t v2 = *(int *)(*(void *)(v0 + 1920) + 52);
  *(_DWORD *)(v0 + 2280) = v2;
  uint64_t v3 = v1 + v2;
  uint64_t v99 = type metadata accessor for AssistantSystemContext(0);
  uint64_t v101 = v3;
  uint64_t v4 = (uint64_t *)(v3 + *(int *)(v99 + 24));
  if (v4[1])
  {
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0xE000000000000000;
  }
  *(void *)(v0 + 2080) = v6;
  *(void *)(v0 + 2072) = v5;
  uint64_t v7 = *(void **)(v0 + 1544);
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  *(void *)(v0 + 2088) = v8;
  *(void *)(v0 + 2096) = v9;
  uint64_t v11 = OUTLINED_FUNCTION_19_0();
  v12(v11);
  uint64_t v13 = v7 + 12;
  uint64_t v14 = v7[15];
  uint64_t v15 = v7[16];
  __swift_project_boxed_opaque_existential_1(v13, v14);
  uint64_t v103 = v6;
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))(v5, v6, v8, v10, v14, v15);
  if (one-time initialization token for searchComponentSignposter != -1) {
    swift_once();
  }
  uint64_t v102 = v5;
  uint64_t v16 = type metadata accessor for OSSignposter();
  *(void *)(v0 + 2104) = __swift_project_value_buffer(v16, (uint64_t)static Logging.searchComponentSignposter);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v17 = OSSignposter.logHandle.getter();
  uint64_t v18 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_55();
    *(_WORD *)uint64_t v19 = 0;
    uint64_t v20 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_257DC6000, v17, v18, v20, "SearchTool.E2ESearch", "", v19, 2u);
    OUTLINED_FUNCTION_34();
  }
  uint64_t v21 = *(void *)(v0 + 1984);

  *(void *)(v0 + 2112) = *(void *)(v21 + 16);
  *(void *)(v0 + 2120) = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_64_0();
  v22();
  *(void *)(v0 + 2128) = type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(void *)(v0 + 2136) = OSSignpostIntervalState.init(id:isOpen:)();
  *(void *)(v0 + 2144) = *(void *)(v21 + 8);
  *(void *)(v0 + 2152) = (v21 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  OUTLINED_FUNCTION_82_0();
  v23();
  OUTLINED_FUNCTION_0_1();
  if (byte_26B2E1464)
  {
    if (one-time initialization token for stextension != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    uint64_t v25 = OUTLINED_FUNCTION_43_1(v24, (uint64_t)static Logging.stextension);
    uint64_t v26 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_26_15(v26))
    {
      uint64_t v27 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_119_3(v27);
      uint64_t v28 = "SearchTool Intent perform() called while not prewarmed!";
LABEL_22:
      _os_log_impl(&dword_257DC6000, v25, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)v17, 2u);
      OUTLINED_FUNCTION_34();
    }
  }
  else
  {
    uint64_t v29 = static SearchToolControl.prewarmPID;
    uint64_t v30 = objc_msgSend(self, sel_processInfo);
    uint64_t v17 = objc_msgSend(v30, sel_processIdentifier);

    if (v29 == v17)
    {
      if (one-time initialization token for stextension != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      uint64_t v25 = OUTLINED_FUNCTION_43_1(v31, (uint64_t)static Logging.stextension);
      uint64_t v32 = static os_log_type_t.info.getter();
      if (OUTLINED_FUNCTION_26_15(v32))
      {
        uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_55();
        OUTLINED_FUNCTION_119_3(v33);
        uint64_t v28 = "SearchTool extension was successfully prewarmed";
        goto LABEL_22;
      }
    }
    else
    {
      if (one-time initialization token for stextension != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      uint64_t v25 = OUTLINED_FUNCTION_43_1(v34, (uint64_t)static Logging.stextension);
      uint64_t v35 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_26_15(v35))
      {
        os_log_type_t v36 = (_WORD *)OUTLINED_FUNCTION_55();
        OUTLINED_FUNCTION_119_3(v36);
        uint64_t v28 = "SearchTool Intent perform() called with a different PID than when prewarming!";
        goto LABEL_22;
      }
    }
  }
  uint64_t v37 = *(void *)(v0 + 1968);
  uint64_t v38 = *(void *)(v0 + 1536);

  uint64_t v39 = *(void *)(v38 + 24);
  _s10OmniSearch22AssistantSystemContextVWOcTm_0(v38, v37, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
  uint64_t v40 = *(void *)(v0 + 1968);
  if (!v39) {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v40, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
  os_log_type_t v41 = OUTLINED_FUNCTION_208();
  uint64_t v42 = SearchToolIntentController.checkForOverrides(rewrittenQuery:)(v41);
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_35:
    if (one-time initialization token for allExceptWebIndex != -1) {
      swift_once();
    }
    long long v52 = *(void *)(v0 + 1920);
    long long v53 = *(void *)(v0 + 1536);
    uint64_t v98 = static SearchSources.allExceptWebIndex;
    uint64_t v97 = *(unsigned char *)(v53 + *(int *)(v52 + 40)) & 1;
    outlined init with take of EagerResolutionService?(v53 + *(int *)(v52 + 32), v0 + 16, &demangling cache variable for type metadata for SearchContext?);
    int v54 = OUTLINED_FUNCTION_79_0();
    outlined init with copy of StructuredQueryEntity?(v54, v55, v56);
    uint64_t v57 = (uint64_t *)(v101 + *(int *)(v99 + 20));
    uint64_t v58 = v57[1];
    if (v58)
    {
      uint64_t v100 = *v57;
      outlined retain of SearchContext?((uint64_t *)(v0 + 16));
      uint64_t v96 = v58;
    }
    else
    {
      type metadata accessor for NSUserDefaults();
      outlined retain of SearchContext?((uint64_t *)(v0 + 16));
      uint64_t v100 = static NSUserDefaults.fallbackLocale.getter();
      uint64_t v96 = v59;
    }
    uint64_t v60 = *(void *)(v0 + 1864);
    uint64_t v61 = *(int **)(v0 + 1848);
    uint64_t v62 = *(void *)(v0 + 1840);
    uint64_t v94 = *(void *)(v0 + 1536);
    uint64_t v95 = *(void *)(v0 + 1920);
    uint64_t v63 = (void *)(v60 + v61[7]);
    uint64_t v64 = (void *)(v60 + v61[8]);
    uint64_t v65 = v61[9];
    uint64_t v66 = v61[10];
    uint64_t v67 = v61[11];
    *(unsigned char *)(v60 + v67) = 0;
    *(unsigned char *)(v60 + v65) = v97;
    outlined init with take of EagerResolutionService?(v0 + 16, v60, &demangling cache variable for type metadata for SearchContext?);
    outlined init with take of EagerResolutionService?(v62, v60 + v61[5], &demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
    uint64_t v68 = (uint64_t *)(v60 + v61[6]);
    *uint64_t v68 = v100;
    v68[1] = v96;
    int *v63 = v102;
    v63[1] = v103;
    uint64_t *v64 = 0;
    v64[1] = 0xE000000000000000;
    *(unsigned char *)(v60 + v66) = 0;
    *(unsigned char *)(v60 + v67) = 0;
    if ((*(unsigned char *)(v94 + *(int *)(v95 + 44)) & 1) == 0)
    {
      *(unsigned char *)(v60 + v67) = 1;
      *(unsigned char *)(v60 + v66) = 1;
    }
    uint64_t v69 = *(int **)(v0 + 1920);
    uint64_t v70 = *(void *)(v0 + 1864);
    char v71 = *(void *)(v0 + 1856);
    uint64_t v72 = *(void *)(v0 + 1832);
    char v73 = *(void *)(v0 + 1536);
    outlined init with copy of ExtractionRule(*(void *)(v0 + 1544) + 16, v0 + 1304);
    uint64_t v74 = *(void *)(v0 + 1336);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 1304), *(void *)(v0 + 1328));
    outlined init with copy of StructuredQueryEntity?(v73 + v69[6], v72, &demangling cache variable for type metadata for StructuredQueryEntity?);
    *(void *)(v0 + 2160) = *(void *)(v73 + v69[7]);
    *(void *)(v0 + 2168) = *(void *)(v73 + v69[9]);
    *(void *)(v0 + 1504) = v98;
    _s10OmniSearch22AssistantSystemContextVWOcTm_0(v70, v71, (void (*)(void))type metadata accessor for OmniSearchOptions);
    *(void *)(v0 + 2176) = *(void *)(v73 + v69[12]);
    uint64_t v93 = *(void *)(v74 + 8) + **(int **)(v74 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v75 = (void *)swift_task_alloc();
    *(void *)(v0 + 2184) = v75;
    *uint64_t v75 = v0;
    v75[1] = SearchToolIntentController.perform(request:);
    __asm { BRAA            X9, X16 }
  }
  if (!*(void *)(v42 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for stextension != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v44 = (void *)OUTLINED_FUNCTION_43_1(v43, (uint64_t)static Logging.stextension);
  long long v45 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_24_2(v45))
  {
    uint64_t v46 = (_WORD *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_130_0(v46);
    OUTLINED_FUNCTION_50_11(&dword_257DC6000, v47, v48, "Override found! Returning canned SearchTool entities.");
    OUTLINED_FUNCTION_34();
  }

  uint64_t v49 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  static os_signpost_type_t.end.getter();
  if (OUTLINED_FUNCTION_60_0())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v50 = OUTLINED_FUNCTION_208();
    if (v51(v50) != *MEMORY[0x263F90238])
    {
      OUTLINED_FUNCTION_39_9();
      v76();
    }
    *(_WORD *)OUTLINED_FUNCTION_55() = 0;
    OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_129(&dword_257DC6000, v49, v77, v78, "SearchTool.E2ESearch");
    OUTLINED_FUNCTION_34();
  }
  uint64_t v79 = *(int **)(v0 + 1592);
  uint64_t v80 = *(void *)(v0 + 1528);

  OUTLINED_FUNCTION_148();
  OUTLINED_FUNCTION_82_0();
  v81();
  OUTLINED_FUNCTION_105_5();
  long long v83 = (void *)(v80 + v82);
  uint64_t v84 = v80 + v82 + v79[5];
  uint64_t v85 = type metadata accessor for URL();
  OUTLINED_FUNCTION_32(v84, v86, v87, v85);
  swift_release();
  uint64_t v88 = (uint64_t)v83 + v79[8];
  uint64_t v89 = type metadata accessor for _SpeakableString();
  __swift_storeEnumTagSinglePayload(v88, 1, 1, v89);
  uint64_t v90 = v79[9];
  *long long v83 = 0;
  v83[1] = 0;
  *(void *)((char *)v83 + v79[6]) = 0;
  *(_OWORD *)((char *)v83 + v79[7]) = xmmword_25866B0E0;
  *(_OWORD *)((char *)v83 + v90) = xmmword_258665BD0;
  *(void *)uint64_t v80 = v42;
  *(_OWORD *)(v80 + 8) = xmmword_25866B0F0;
  OUTLINED_FUNCTION_31_13();
  OUTLINED_FUNCTION_87_5();
  OUTLINED_FUNCTION_84_4();
  OUTLINED_FUNCTION_127_2();
  OUTLINED_FUNCTION_125_3();
  OUTLINED_FUNCTION_124_3();
  OUTLINED_FUNCTION_123_3();
  OUTLINED_FUNCTION_121_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_86();
  return v91();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_2();
  uint64_t v2 = v1;
  *(void *)(v1 + 2192) = v3;
  *(void *)(v1 + 2200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 1856);
    uint64_t v5 = *(void *)(v2 + 1832);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v4, (void (*)(void))type metadata accessor for OmniSearchOptions);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 1856);
    uint64_t v5 = *(void *)(v2 + 1832);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v6, (void (*)(void))type metadata accessor for OmniSearchOptions);
  }
  outlined destroy of EagerResolutionService?(v5, &demangling cache variable for type metadata for StructuredQueryEntity?);
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  unint64_t v0;
  unsigned char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(void);
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(void);
  uint64_t v57;
  void (*v58)(void);
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint8_t *v78;
  os_signpost_type_t v79;
  os_signpost_id_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  Swift::Bool v84;
  NSObject *v85;
  uint8_t *v86;
  os_signpost_type_t v87;
  os_signpost_id_t v88;
  void (*v89)(uint64_t, uint64_t);
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t);
  void *v116;
  void *v117;
  uint64_t result;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t (*v129)(uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int EnumTagSinglePayload;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  unsigned char *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t (*v188)(uint64_t);
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  os_log_type_t v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211[5];
  unint64_t v212;
  uint64_t v213;

  long long v212 = v0;
  uint64_t v1 = *(unsigned char **)(v0 + 2192);
  uint64_t v2 = __swift_destroy_boxed_opaque_existential_1Tm(v0 + 1304);
  uint64_t v3 = *(void *)(*(void *)v1 + 120);
  uint64_t v4 = *(void *)v1 + 120;
  *(void *)(v0 + 2208) = v3;
  *(void *)(v0 + 2216) = v4 & 0xFFFFFFFFFFFFLL | 0x62DD000000000000;
  uint64_t v5 = ((uint64_t (*)(uint64_t))v3)(v2);
  if (v1[40])
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 2192);
    uint64_t v6 = *(void *)(v8 + 48);
    uint64_t v7 = *(void *)(v8 + 56);
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = *(void *)(v0 + 2200);
  *(void *)(v0 + 1248) = &type metadata for EntityCardBuilder;
  *(void *)(v0 + 1256) = &protocol witness table for EntityCardBuilder;
  uint64_t v10 = Array<A>.createValidEntities(cardBuilder:inAppSearchString:)(v0 + 1224, v6, v7, v5);
  *(void *)(v0 + 2224) = v10;
  if (!v9)
  {
    uint64_t v13 = v10;
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 1224);
    swift_bridgeObjectRelease();
    if (one-time initialization token for stextension != -1) {
      goto LABEL_98;
    }
    while (1)
    {
      long long v187 = v0 + 416;
      uint64_t v178 = v0 + 672;
      uint64_t v180 = v0 + 288;
      uint64_t v181 = v0 + 800;
      long long v185 = v0 + 160;
      long long v186 = (uint64_t *)(v0 + 928);
      uint64_t v179 = (uint64_t *)(v0 + 1056);
      long long v182 = v0 + 544;
      long long v183 = (void *)(v0 + 1184);
      uint64_t v190 = (void *)(v0 + 1264);
      long long v189 = v0 + 2288;
      uint64_t v14 = type metadata accessor for Logger();
      uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logging.stextension);
      *(void *)(v0 + 2232) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v207 = v15;
      uint64_t v16 = (void *)Logger.logObject.getter();
      uint64_t v17 = static os_log_type_t.info.getter();
      long long v209 = v0;
      long long v188 = (uint64_t (*)(uint64_t))v3;
      if (OUTLINED_FUNCTION_51_1(v17))
      {
        uint64_t v18 = (void *)(v0 + 1488);
        uint64_t v19 = OUTLINED_FUNCTION_83_2();
        *(_DWORD *)uint64_t v19 = 134218240;
        *(void *)(v0 + 1464) = *(void *)(v13 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2048;
        uint64_t v4 = v19 + 14;
        uint64_t v20 = *(void *)(v5 + 16);
        swift_bridgeObjectRelease();
        void *v18 = v20;
        uint64_t v0 = v209;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_96_3(&dword_257DC6000, v21, v22, "SearchTool creating %ld valid entities from %ld SearchResults.");
        OUTLINED_FUNCTION_34();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }

      uint64_t v193 = (uint64_t *)(v0 + 1480);
      long long v184 = (unsigned char *)(v0 + 2291);
      uint64_t v23 = *(void *)(v0 + 1800);
      uint64_t v192 = *(void *)(v0 + 1752);
      uint64_t v24 = *(void *)(v13 + 16);
      swift_bridgeObjectRetain();
      uint64_t v3 = 0;
      long long v195 = v13;
      uint64_t v191 = v23;
      uint64_t v204 = v24;
      while (1)
      {
        if (v3 == v24)
        {
          OUTLINED_FUNCTION_32(*(void *)(v0 + 1816), v25, v26, *(void *)(v0 + 1800));
          uint64_t v27 = v24;
        }
        else
        {
          if (v3 >= *(void *)(v13 + 16))
          {
            __break(1u);
            goto LABEL_66;
          }
          uint64_t v28 = *(unint64_t **)(v0 + 1816);
          uint64_t v27 = v3 + 1;
          uint64_t v29 = *(void *)(v0 + 1808) + *(int *)(v23 + 48);
          _s10OmniSearch22AssistantSystemContextVWOcTm_0(v13+ ((*(unsigned __int8 *)(v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80))+ *(void *)(v192 + 72) * v3, v29, (void (*)(void))type metadata accessor for SearchEntity);
          uint64_t v30 = (uint64_t)v28 + *(int *)(v23 + 48);
          *uint64_t v28 = v3;
          outlined init with take of AssistantSystemContext(v29, v30, (void (*)(void))type metadata accessor for SearchEntity);
          OUTLINED_FUNCTION_74_5((uint64_t)v28);
        }
        uint64_t v31 = *(void *)(v0 + 1824);
        uint64_t v32 = *(void *)(v0 + 1800);
        outlined init with take of EagerResolutionService?(*(void *)(v0 + 1816), v31, &demangling cache variable for type metadata for (offset: Int, element: SearchEntity)?);
        OUTLINED_FUNCTION_53_2(v31, 1, v32);
        if (v120) {
          break;
        }
        long long v208 = v27;
        uint64_t v33 = *(uint64_t **)(v0 + 1824);
        uint64_t v34 = *(void *)(v0 + 1792);
        uint64_t v35 = *(void *)(v0 + 1784);
        os_log_type_t v36 = *(void *)(v0 + 1768);
        uint64_t v4 = *v33;
        outlined init with take of AssistantSystemContext((uint64_t)v33 + *(int *)(v23 + 48), v34, (void (*)(void))type metadata accessor for SearchEntity);
        _s10OmniSearch22AssistantSystemContextVWOcTm_0(v34, v35, (void (*)(void))type metadata accessor for SearchEntity);
        uint64_t v37 = OUTLINED_FUNCTION_148();
        _s10OmniSearch22AssistantSystemContextVWOcTm_0(v37, v38, (void (*)(void))type metadata accessor for SearchEntity);
        _s10OmniSearch22AssistantSystemContextVWOcTm_0(v34, v36, (void (*)(void))type metadata accessor for SearchEntity);
        uint64_t v39 = Logger.logObject.getter();
        uint64_t v40 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v39, v40))
        {
          long long v199 = v40;
          uint64_t v202 = v39;
          os_log_type_t v41 = *(void *)(v0 + 1784);
          uint64_t v42 = swift_slowAlloc();
          long long v197 = swift_slowAlloc();
          v211[0] = v197;
          *(_DWORD *)uint64_t v42 = 134218754;
          *(void *)(v0 + 1512) = v4;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v42 + 12) = 2080;
          EntityProperty.wrappedValue.getter();
          SearchResultType.rawValue.getter();
          OUTLINED_FUNCTION_16_1();
          v43();
          uint64_t v44 = OUTLINED_FUNCTION_19_0();
          *(void *)(v0 + 1520) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v41, (void (*)(void))type metadata accessor for SearchEntity);
          *(_WORD *)(v42 + 22) = 2080;
          uint64_t v47 = SearchEntity.card.getter();
          if (v47)
          {
            uint64_t v48 = (void *)v47;
            uint64_t v49 = SFCard.cardDetails.getter();
            uint64_t v51 = v50;
          }
          else
          {
            uint64_t v49 = 0;
            uint64_t v51 = 0xE000000000000000;
          }
          long long v196 = *(void *)(v0 + 1792);
          uint64_t v4 = *(void *)(v0 + 1776);
          uint64_t v57 = *(void *)(v0 + 1768);
          *(void *)(v209 + 1496) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, v211);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v4, (void (*)(void))type metadata accessor for SearchEntity);
          *(_WORD *)(v42 + 32) = 2080;
          SearchEntity.displayRepresentation.getter();
          DisplayRepresentation.title.getter();
          OUTLINED_FUNCTION_16_1();
          v58();
          uint64_t v0 = v209;
          uint64_t v59 = String.init<A>(describing:)();
          *(void *)(v209 + 1472) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v211);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v57, (void (*)(void))type metadata accessor for SearchEntity);
          _os_log_impl(&dword_257DC6000, v39, v199, "Result %ld---%s---Card: %s---%s\n", (uint8_t *)v42, 0x2Au);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_34();
          OUTLINED_FUNCTION_34();

          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v196, (void (*)(void))type metadata accessor for SearchEntity);
          uint64_t v13 = v195;
          uint64_t v23 = v191;
        }
        else
        {
          long long v52 = *(void *)(v0 + 1784);
          long long v53 = *(void *)(v0 + 1776);
          int v54 = *(void *)(v0 + 1768);

          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v54, (void (*)(void))type metadata accessor for SearchEntity);
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v53, (void (*)(void))type metadata accessor for SearchEntity);
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v52, (void (*)(void))type metadata accessor for SearchEntity);
          uint64_t v55 = OUTLINED_FUNCTION_208();
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v55, v56);
        }
        uint64_t v24 = v204;
        uint64_t v3 = v208;
      }
      uint64_t v61 = *(void *)(v0 + 2192);
      uint64_t v62 = *(void *)(v0 + 1960);
      uint64_t v63 = *(void *)(v0 + 1536);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 1480) = v13;
      long long v198 = v61;
      uint64_t v64 = *(void *)(v61 + 24);
      uint64_t v65 = *(void *)(v61 + 32);
      *(void *)(v0 + 1416) = v64;
      *(void *)(v0 + 1424) = v65;
      uint64_t v66 = *(void *)(v63 + 24);
      _s10OmniSearch22AssistantSystemContextVWOcTm_0(v63, v62, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
      uint64_t v67 = *(void *)(v0 + 1960);
      if (!v66) {
        swift_bridgeObjectRetain();
      }
      long long v208 = *(void *)(v0 + 2136);
      uint64_t v68 = *(void **)(v209 + 1672);
      *(_DWORD *)(v209 + 2284) = *(_DWORD *)(*(void *)(v209 + 1664) + 48);
      swift_bridgeObjectRetain_n();
      outlined copy of ResultsDialog.RenderOption(v64, v65);
      swift_bridgeObjectRetain();
      _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v67, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
      SearchToolIntentController.buildDialogData(from:renderOption:query:isQuestionQuery:forceUseCAT:systemContext:)();
      uint64_t v70 = v69;
      uint64_t v72 = v71;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of OmniSearchResponseRenderOption(v64, v65);
      *uint64_t v68 = v70;
      v68[1] = v72;
      uint64_t v4 = v209;
      char v73 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      static os_signpost_type_t.end.getter();
      if (OUTLINED_FUNCTION_60_0())
      {
        uint64_t v74 = *(void *)(v209 + 1904);
        uint64_t v75 = *(void *)(v209 + 1880);
        uint64_t v76 = *(void *)(v209 + 1872);
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v75 + 88))(v74, v76) == *MEMORY[0x263F90238])
        {
          uint64_t v77 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(void, void))(*(void *)(v209 + 1880) + 8))(*(void *)(v209 + 1904), *(void *)(v209 + 1872));
          uint64_t v77 = "";
        }
        uint64_t v78 = (uint8_t *)OUTLINED_FUNCTION_55();
        *(_WORD *)uint64_t v78 = 0;
        OSSignpostID.rawValue.getter();
        OUTLINED_FUNCTION_186();
        _os_signpost_emit_with_name_impl(&dword_257DC6000, v73, v79, v80, "SearchTool.E2ESearch", v77, v78, 2u);
        OUTLINED_FUNCTION_34();
      }
      uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v209 + 2144);
      uint64_t v82 = *(void *)(v209 + 2016);
      long long v83 = *(void *)(v209 + 1976);

      v81(v82, v83);
      uint64_t v84 = OmniSearchResponse.needsDisambiguation()();
      uint64_t v3 = MEMORY[0x263F8EE78];
      if (!v84) {
        break;
      }
      OSSignposter.logHandle.getter();
      OSSignpostID.init(log:)();
      uint64_t v85 = OSSignposter.logHandle.getter();
      static os_signpost_type_t.begin.getter();
      if (OUTLINED_FUNCTION_60_0())
      {
        uint64_t v86 = (uint8_t *)OUTLINED_FUNCTION_55();
        *(_WORD *)uint64_t v86 = 0;
        OSSignpostID.rawValue.getter();
        OUTLINED_FUNCTION_186();
        _os_signpost_emit_with_name_impl(&dword_257DC6000, v85, v87, v88, "SearchTool.Disambiguation", "", v86, 2u);
        OUTLINED_FUNCTION_34();
      }
      uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v209 + 2144);
      uint64_t v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v209 + 2112);
      uint64_t v91 = *(void *)(v209 + 2032);
      uint64_t v92 = *(void *)(v209 + 2008);
      uint64_t v93 = *(void *)(v209 + 1976);

      v90(v91, v92, v93);
      swift_allocObject();
      *(void *)(v209 + 2240) = OSSignpostIntervalState.init(id:isOpen:)();
      v89(v92, v93);
      uint64_t v94 = *(void *)(v198 + 32);
      if (v94 < 4)
      {
        uint64_t v95 = 0xEA00000000003F65;
        OUTLINED_FUNCTION_114_5();
LABEL_57:
        *(void *)(v4 + 2248) = v95;
        uint64_t v116 = (void *)(*(void *)(v4 + 1536) + *(int *)(*(void *)(v4 + 1920) + 56));
        __swift_project_boxed_opaque_existential_1(v116, v116[3]);
        OUTLINED_FUNCTION_19_0();
        default argument 2 of DisambiguationRequestable.resolveDisambiguation(_:dialogString:limit:)();
        uint64_t v117 = (void *)swift_task_alloc();
        *(void *)(v4 + 2256) = v117;
        *uint64_t v117 = v4;
        v117[1] = SearchToolIntentController.perform(request:);
        return DisambiguationRequestable.resolveDisambiguation(_:dialogString:limit:)();
      }
      uint64_t v98 = *(void *)(v198 + 24);
      uint64_t v99 = *(void *)(v209 + 1952);
      uint64_t v100 = *(void *)(v209 + 1536);
      outlined init with copy of ExtractionRule(*(void *)(v209 + 1544) + 56, (uint64_t)v190);
      long long v197 = *(void *)(v209 + 1296);
      long long v200 = *(void *)(v209 + 1288);
      uint64_t v202 = __swift_project_boxed_opaque_existential_1(v190, v200);
      uint64_t v102 = *(void *)(v100 + 16);
      uint64_t v101 = *(void *)(v100 + 24);
      _s10OmniSearch22AssistantSystemContextVWOcTm_0(v100, v99, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
      uint64_t v0 = *(void *)(v209 + 1952);
      if (v101)
      {
        uint64_t v194 = v101;
      }
      else
      {
        uint64_t v102 = *(void *)v0;
        uint64_t v194 = *(void *)(v0 + 8);
        swift_bridgeObjectRetain();
      }
      long long v196 = v102;
      long long v208 = v98;
      uint64_t v205 = v94;
      outlined copy of ResultsDialog.RenderOption(v98, v94);
      swift_bridgeObjectRetain();
      uint64_t v103 = _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v0, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
      uint64_t v5 = v188(v103);
      v211[0] = v3;
      uint64_t v104 = *(void *)(v5 + 16);
      if (!v104)
      {
LABEL_56:
        swift_bridgeObjectRelease();
        uint64_t v115 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t))(v197 + 16);
        uint64_t v95 = v205;
        outlined copy of ResultsDialog.RenderOption(v208, v205);
        v115(v196, v194, v3, v208, v205, MEMORY[0x263F8EE78], 1, v189, v200, v197);
        outlined consume of OmniSearchResponseRenderOption(v208, v205);
        swift_release();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v190);
        goto LABEL_57;
      }
      uint64_t v13 = 0;
      uint64_t v105 = *(void *)(v209 + 1624);
      while (v13 < *(void *)(v5 + 16))
      {
        uint64_t v106 = *(void *)(v4 + 1656);
        uint64_t v107 = (*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
        uint64_t v108 = v4;
        uint64_t v109 = *(void *)(v105 + 72);
        _s10OmniSearch22AssistantSystemContextVWOcTm_0(v5 + v107 + v109 * v13, v106, (void (*)(void))type metadata accessor for SearchResult);
        if (one-time initialization token for supportedTypes != -1) {
          swift_once();
        }
        uint64_t v0 = static AnswerSynthesisController.supportedTypes;
        SearchResultItem.type.getter((char *)&v210);
        specialized Set.contains(_:)();
        uint64_t v111 = v110;
        uint64_t v112 = *(void *)(v108 + 1656);
        if (v111)
        {
          outlined init with take of AssistantSystemContext(v112, *(void *)(v108 + 1648), (void (*)(void))type metadata accessor for SearchResult);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v3 = v211[0];
          }
          uint64_t v0 = *(void *)(v3 + 16);
          uint64_t v113 = *(void *)(v3 + 24);
          if (v0 >= v113 >> 1)
          {
            OUTLINED_FUNCTION_51_5(v113);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v3 = v211[0];
          }
          uint64_t v114 = *(void *)(v209 + 1648);
          *(void *)(v3 + 16) = v0 + 1;
          outlined init with take of AssistantSystemContext(v114, v3 + v107 + v0 * v109, (void (*)(void))type metadata accessor for SearchResult);
        }
        else
        {
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v112, (void (*)(void))type metadata accessor for SearchResult);
        }
        ++v13;
        uint64_t v4 = v209;
        if (v104 == v13) {
          goto LABEL_56;
        }
      }
      __break(1u);
LABEL_98:
      swift_once();
    }
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(*(void *)(v209 + 2192) + 40) == 1 && *(void *)(*v193 + 16) == 1)
    {
      uint64_t v96 = *(void *)(v209 + 1744);
      uint64_t v97 = *(void *)(v209 + 1584);
      specialized Collection.first.getter(*v193, v97);
      OUTLINED_FUNCTION_53_2(v97, 1, v96);
      if (v120)
      {
        outlined destroy of EagerResolutionService?(*(void *)(v209 + 1584), &demangling cache variable for type metadata for SearchEntity?);
      }
      else
      {
        uint64_t v119 = *(void *)(v209 + 1760);
        outlined init with take of AssistantSystemContext(*(void *)(v209 + 1584), v119, (void (*)(void))type metadata accessor for SearchEntity);
        EntityProperty.wrappedValue.getter();
        outlined init with take of EagerResolutionService?(v185, v187, &demangling cache variable for type metadata for AnswerMetadata?);
        OUTLINED_FUNCTION_89_1(v187);
        OUTLINED_FUNCTION_62_4(v186);
        if (v120
          || (outlined init with take of EagerResolutionService?(v187, v182, &demangling cache variable for type metadata for AnswerMetadata?), EntityProperty.wrappedValue.getter(), outlined release of AnswerMetadata?(v187), (uint64_t v121 = *(void *)(v209 + 1440)) == 0))
        {
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(*(void *)(v209 + 1760), (void (*)(void))type metadata accessor for SearchEntity);
        }
        else
        {
          uint64_t v122 = *(void *)(v209 + 1432);
          uint64_t v123 = *(void *)(v209 + 1936);
          uint64_t v124 = *(void *)(v209 + 1536);
          outlined init with copy of ExtractionRule(*(void *)(v209 + 1544) + 56, (uint64_t)v183);
          uint64_t v202 = *(NSObject **)(v209 + 1216);
          uint64_t v204 = *(void *)(v209 + 1208);
          uint64_t v125 = __swift_project_boxed_opaque_existential_1(v183, v204);
          uint64_t v127 = *(void *)(v124 + 16);
          unsigned int v126 = *(void *)(v124 + 24);
          _s10OmniSearch22AssistantSystemContextVWOcTm_0(v124, v123, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
          long long v196 = v122;
          long long v197 = v121;
          uint64_t v207 = (uint64_t)v125;
          long long v208 = v119;
          if (v126)
          {
            long long v128 = *(uint64_t **)(v209 + 1936);
            long long v195 = v126;
            goto LABEL_67;
          }
LABEL_66:
          long long v128 = *(uint64_t **)(v4 + 1936);
          uint64_t v127 = *v128;
          long long v195 = v128[1];
          swift_bridgeObjectRetain();
LABEL_67:
          long long v201 = v127;
          uint64_t v129 = *(uint64_t (**)(uint64_t))(v4 + 2208);
          swift_bridgeObjectRetain();
          uint64_t v130 = _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v128, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
          uint64_t result = v129(v130);
          uint64_t v131 = result;
          long long v210 = v3;
          uint64_t v132 = *(void *)(result + 16);
          if (v132)
          {
            uint64_t v133 = 0;
            uint64_t v134 = *(void *)(v4 + 1624);
            while (v133 < *(void *)(v131 + 16))
            {
              uint64_t v135 = (*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80);
              uint64_t v136 = *(void *)(v134 + 72);
              _s10OmniSearch22AssistantSystemContextVWOcTm_0(v131 + v135 + v136 * v133, *(void *)(v4 + 1640), (void (*)(void))type metadata accessor for SearchResult);
              if (one-time initialization token for supportedTypes != -1) {
                swift_once();
              }
              SearchResultItem.type.getter((char *)v211);
              specialized Set.contains(_:)();
              char v138 = v137;
              uint64_t v139 = *(void *)(v4 + 1640);
              if (v138)
              {
                outlined init with take of AssistantSystemContext(v139, *(void *)(v4 + 1632), (void (*)(void))type metadata accessor for SearchResult);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  OUTLINED_FUNCTION_104_5();
                  uint64_t v3 = v210;
                }
                uint64_t v140 = *(void *)(v3 + 16);
                if (v140 >= *(void *)(v3 + 24) >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  uint64_t v3 = v210;
                }
                uint64_t v141 = *(void *)(v209 + 1632);
                *(void *)(v3 + 16) = v140 + 1;
                uint64_t v4 = v209;
                uint64_t result = outlined init with take of AssistantSystemContext(v141, v3 + v135 + v140 * v136, (void (*)(void))type metadata accessor for SearchResult);
              }
              else
              {
                uint64_t result = _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v139, (void (*)(void))type metadata accessor for SearchResult);
              }
              if (v132 == ++v133) {
                goto LABEL_80;
              }
            }
            __break(1u);
            return result;
          }
LABEL_80:
          swift_bridgeObjectRelease();
          EntityProperty.wrappedValue.getter();
          OUTLINED_FUNCTION_89_1(v181);
          OUTLINED_FUNCTION_89_1(v180);
          OUTLINED_FUNCTION_62_4(v179);
          if (v120)
          {
            uint64_t v142 = MEMORY[0x263F8EE78];
          }
          else
          {
            uint64_t v142 = *(void *)(v4 + 872);
            outlined init with take of EagerResolutionService?(v181, v178, &demangling cache variable for type metadata for AnswerMetadata?);
            swift_bridgeObjectRetain();
            outlined release of AnswerMetadata?(v178);
          }
          LOBYTE(v83) = 0;
          ((void (*)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, void, unint64_t, uint64_t, NSObject *))v202[2].isa)(v201, v195, v3, v196, v197, v142, 0, v189, v204, v202);
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(*(void *)(v4 + 1760), (void (*)(void))type metadata accessor for SearchEntity);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v183);
        }
      }
    }
    if (*(unsigned char *)(*(void *)(v4 + 2192) + 41) == 1)
    {
      uint64_t v143 = *(void *)(v4 + 1744);
      long long v144 = *(void *)(v4 + 1576);
      specialized Collection.first.getter(*(void *)(v4 + 1480), v144);
      if (__swift_getEnumTagSinglePayload(v144, 1, v143) == 1)
      {
        outlined destroy of EagerResolutionService?(*(void *)(v4 + 1576), &demangling cache variable for type metadata for SearchEntity?);
      }
      else
      {
        long long v145 = *(void *)(v4 + 1568);
        long long v83 = *(void *)(v4 + 1552);
        *(unsigned char *)(v4 + 2289) = 1;
        EntityProperty.wrappedValue.setter();
        EntityProperty.wrappedValue.getter();
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v145, 1, v83);
        long long v147 = *(void *)(v4 + 1568);
        if (EnumTagSinglePayload)
        {
          outlined destroy of EagerResolutionService?(*(void *)(v4 + 1568), (uint64_t *)&demangling cache variable for type metadata for SearchAppEntity?);
        }
        else
        {
          long long v148 = *(void *)(v4 + 1560);
          _s10OmniSearch22AssistantSystemContextVWOcTm_0(*(void *)(v4 + 1568), v148, (void (*)(void))type metadata accessor for SearchAppEntity);
          outlined destroy of EagerResolutionService?(v147, (uint64_t *)&demangling cache variable for type metadata for SearchAppEntity?);
          EntityProperty.wrappedValue.getter();
          *(unsigned char *)(v4 + 2290) = *v184;
          EntityProperty.wrappedValue.setter();
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v148, (void (*)(void))type metadata accessor for SearchAppEntity);
        }
        _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(*(void *)(v4 + 1576), (void (*)(void))type metadata accessor for SearchEntity);
      }
    }
    long long v149 = Logger.logObject.getter();
    long long v150 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_51_1(v150))
    {
      uint64_t v151 = *(void *)(v4 + 1744);
      uint64_t v152 = OUTLINED_FUNCTION_83_2();
      v211[0] = OUTLINED_FUNCTION_13_1();
      *(_DWORD *)uint64_t v152 = 134218243;
      OUTLINED_FUNCTION_0_1();
      *(void *)(v4 + 1456) = *(void *)(*(void *)(v4 + 1480) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v152 + 12) = 2085;
      uint64_t v153 = swift_bridgeObjectRetain();
      uint64_t v154 = MEMORY[0x25A2C7E60](v153, v151);
      long long v156 = v155;
      swift_bridgeObjectRelease();
      *(void *)(v209 + 1448) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v154, v156, v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v4 = v209;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257DC6000, v149, (os_log_type_t)v83, "SearchTool Intent perform() returns %ld results:\n%{sensitive}s", (uint8_t *)v152, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }

    long long v157 = v4;
    OUTLINED_FUNCTION_110_4();
    long long v158 = *(void *)(v4 + 2096);
    long long v159 = *(void *)(v4 + 2080);
    OUTLINED_FUNCTION_44_13();
    long long v160 = *(void **)(v4 + 1528);
    uint64_t v203 = v163;
    uint64_t v206 = v162 + v161;
    uint64_t v166 = v164[15];
    uint64_t v165 = v164[16];
    __swift_project_boxed_opaque_existential_1(v164 + 12, v166);
    OUTLINED_FUNCTION_0_1();
    uint64_t v167 = *(void *)(v4 + 1480);
    long long v168 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v165 + 16);
    swift_bridgeObjectRetain();
    v168(v195, v159, v196, v158, v167, v166, v165);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    SearchToolIntentController.buildAttributionData(for:systemContext:)();
    long long v170 = v169;
    long long v172 = v171;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v203, (void (*)(void))type metadata accessor for OmniSearchOptions);
    _s10OmniSearch22AssistantSystemContextVWOcTm_0(v206, v207, (void (*)(void))type metadata accessor for DialogData);
    long long v173 = v207 + *(int *)(v208 + 36);
    outlined consume of Data?(*(void *)v173, *(void *)(v173 + 8));
    *(void *)long long v173 = v170;
    *(void *)(v173 + 8) = v172;
    long long v174 = *(void *)(v157 + 1480);
    uint64_t v175 = *(void *)v209;
    uint64_t v176 = *(void *)(v209 + 8);
    OUTLINED_FUNCTION_105_5();
    _s10OmniSearch22AssistantSystemContextVWOcTm_0(v207, (uint64_t)v160 + v177, (void (*)(void))type metadata accessor for DialogData);
    *long long v160 = v174;
    v160[1] = v175;
    v160[2] = v176;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v175, v176);
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v207, (void (*)(void))type metadata accessor for DialogData);
    outlined destroy of EagerResolutionService?(v209, &demangling cache variable for type metadata for (snippetData: Data, dialogData: DialogData));
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_14();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_86();
    goto LABEL_94;
  }
  uint64_t v11 = *(void *)(v0 + 1864);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 1224);
  _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v11, (void (*)(void))type metadata accessor for OmniSearchOptions);
  OUTLINED_FUNCTION_87_5();
  OUTLINED_FUNCTION_84_4();
  OUTLINED_FUNCTION_127_2();
  OUTLINED_FUNCTION_125_3();
  OUTLINED_FUNCTION_124_3();
  OUTLINED_FUNCTION_123_3();
  OUTLINED_FUNCTION_121_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13();
LABEL_94:
  return v12();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_27_0();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  NSObject *v5 = v4;
  NSObject *v5 = *v1;
  *(void *)(v4 + 2264) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(v4 + 2272) = v3;
  }
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_signpost_type_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t);
  void (*v23)(void);
  os_signpost_id_t v24;
  uint64_t *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t result;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _WORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int EnumTagSinglePayload;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t (*v110)(void);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  _OWORD v124[2];
  uint64_t v125;
  uint64_t v126;

  uint64_t v125 = v0;
  uint64_t v1 = *(void *)(v0 + 2272);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1480) = v1;
  uint64_t v2 = (void *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_24_2(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_130_0(v4);
    OUTLINED_FUNCTION_50_11(&dword_257DC6000, v5, v6, "Construct CAT dialog for PQA use case after disambiguation");
    OUTLINED_FUNCTION_34();
  }
  uint64_t v7 = *(void *)(v0 + 2192);
  uint64_t v8 = *(void *)(v0 + 1944);
  uint64_t v9 = *(void *)(v0 + 1536);

  if (*(unsigned char *)(v7 + 41)) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 2;
  }
  *(void *)&v124[0] = 0;
  *((void *)&v124[0] + 1) = v10;
  uint64_t v11 = *(void *)(v9 + 24);
  _s10OmniSearch22AssistantSystemContextVWOcTm_0(v9, v8, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
  uint64_t v122 = (void *)v10;
  uint64_t v12 = *(void *)(v0 + 1944);
  if (!v11) {
    swift_bridgeObjectRetain();
  }
  uint64_t v120 = *(void *)(v0 + 2000);
  uint64_t v121 = *(void *)(v0 + 2240);
  uint64_t v13 = *(void *)(v0 + 1672);
  uint64_t v14 = *(void *)(v0 + 1616);
  uint64_t v116 = v13 + *(int *)(v0 + 2284);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v12, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
  SearchToolIntentController.buildDialogData(from:renderOption:query:isQuestionQuery:forceUseCAT:systemContext:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of OmniSearchResponseRenderOption(0, (uint64_t)v122);
  outlined consume of Data._Representation(*(void *)v13, *(void *)(v13 + 8));
  *(void *)uint64_t v13 = v16;
  *(void *)(v13 + 8) = v18;
  outlined assign with take of DialogData(v14, v116);
  uint64_t v19 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  uint64_t v20 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v21 = OUTLINED_FUNCTION_20_1();
    if (v22(v21) != *MEMORY[0x263F90238])
    {
      OUTLINED_FUNCTION_39_9();
      v23();
    }
    *(_WORD *)OUTLINED_FUNCTION_55() = 0;
    uint64_t v24 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_129(&dword_257DC6000, v19, v20, v24, "SearchTool.Disambiguation");
    OUTLINED_FUNCTION_34();
  }
  uint64_t v25 = (uint64_t *)(v0 + 1480);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 2144);
  uint64_t v27 = *(void *)(v0 + 2000);
  uint64_t v28 = *(void *)(v0 + 1976);

  v26(v27, v28);
  swift_release();
  if (*(unsigned char *)(*(void *)(v0 + 2192) + 40) != 1 || *(void *)(*v25 + 16) != 1) {
    goto LABEL_47;
  }
  uint64_t v29 = *(void *)(v0 + 2264);
  uint64_t v30 = *(void *)(v0 + 1744);
  specialized Collection.first.getter(*v25, *(void *)(v0 + 1584));
  uint64_t v31 = OUTLINED_FUNCTION_82_4();
  OUTLINED_FUNCTION_53_2(v31, v32, v30);
  if (v33)
  {
    outlined destroy of EagerResolutionService?(*(void *)(v0 + 1584), &demangling cache variable for type metadata for SearchEntity?);
LABEL_47:
    if (*(unsigned char *)(*(void *)(v0 + 2192) + 41) == 1)
    {
      char v71 = *(void *)(v0 + 1744);
      uint64_t v72 = *(void *)(v0 + 1576);
      specialized Collection.first.getter(*(void *)(v0 + 1480), v72);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v72, 1, v71);
      uint64_t v19 = *(NSObject **)(v0 + 1576);
      if (EnumTagSinglePayload == 1)
      {
        outlined destroy of EagerResolutionService?(*(void *)(v0 + 1576), &demangling cache variable for type metadata for SearchEntity?);
      }
      else
      {
        uint64_t v74 = *(void *)(v0 + 1552);
        *(unsigned char *)(v0 + 2289) = 1;
        EntityProperty.wrappedValue.setter();
        EntityProperty.wrappedValue.getter();
        uint64_t v75 = OUTLINED_FUNCTION_82_4();
        uint64_t v77 = __swift_getEnumTagSinglePayload(v75, v76, v74);
        uint64_t v78 = *(void *)(v0 + 1568);
        if (v77)
        {
          outlined destroy of EagerResolutionService?(*(void *)(v0 + 1568), (uint64_t *)&demangling cache variable for type metadata for SearchAppEntity?);
        }
        else
        {
          uint64_t v79 = *(void *)(v0 + 1560);
          _s10OmniSearch22AssistantSystemContextVWOcTm_0(*(void *)(v0 + 1568), v79, (void (*)(void))type metadata accessor for SearchAppEntity);
          outlined destroy of EagerResolutionService?(v78, (uint64_t *)&demangling cache variable for type metadata for SearchAppEntity?);
          EntityProperty.wrappedValue.getter();
          *(unsigned char *)(v0 + 2290) = *(unsigned char *)(v0 + 2291);
          EntityProperty.wrappedValue.setter();
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v79, (void (*)(void))type metadata accessor for SearchAppEntity);
        }
        _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(*(void *)(v0 + 1576), (void (*)(void))type metadata accessor for SearchEntity);
      }
    }
    uint64_t v80 = Logger.logObject.getter();
    uint64_t v81 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_51_1(v81))
    {
      uint64_t v122 = (void *)(v0 + 1448);
      uint64_t v82 = *(void *)(v0 + 1744);
      long long v83 = OUTLINED_FUNCTION_83_2();
      *(void *)&v124[0] = OUTLINED_FUNCTION_13_1();
      *(_DWORD *)long long v83 = 134218243;
      OUTLINED_FUNCTION_0_1();
      *(void *)(v0 + 1456) = *(void *)(*(void *)(v0 + 1480) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v83 + 12) = 2085;
      uint64_t v84 = swift_bridgeObjectRetain();
      uint64_t v85 = MEMORY[0x25A2C7E60](v84, v82);
      uint64_t v87 = v86;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 1448) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v87, (uint64_t *)v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257DC6000, v80, (os_log_type_t)v19, "SearchTool Intent perform() returns %ld results:\n%{sensitive}s", (uint8_t *)v83, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }

    OUTLINED_FUNCTION_110_4();
    uint64_t v88 = *(void *)(v0 + 2096);
    uint64_t v89 = *(void *)(v0 + 2080);
    OUTLINED_FUNCTION_44_13();
    uint64_t v90 = *(void **)(v0 + 1528);
    uint64_t v117 = v93;
    uint64_t v119 = v92 + v91;
    uint64_t v95 = v94[15];
    uint64_t v96 = v94[16];
    __swift_project_boxed_opaque_existential_1(v94 + 12, v95);
    OUTLINED_FUNCTION_0_1();
    uint64_t v97 = *(void *)(v0 + 1480);
    uint64_t v98 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 16);
    swift_bridgeObjectRetain();
    v98(v113, v89, v114, v88, v97, v95, v96);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    SearchToolIntentController.buildAttributionData(for:systemContext:)();
    uint64_t v100 = v99;
    uint64_t v102 = v101;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v117, (void (*)(void))type metadata accessor for OmniSearchOptions);
    _s10OmniSearch22AssistantSystemContextVWOcTm_0(v119, v120, (void (*)(void))type metadata accessor for DialogData);
    uint64_t v103 = v120 + *(int *)(v121 + 36);
    outlined consume of Data?(*(void *)v103, *(void *)(v103 + 8));
    *(void *)uint64_t v103 = v100;
    *(void *)(v103 + 8) = v102;
    uint64_t v104 = *(void *)(v0 + 1480);
    uint64_t v105 = *v122;
    uint64_t v106 = v122[1];
    OUTLINED_FUNCTION_105_5();
    _s10OmniSearch22AssistantSystemContextVWOcTm_0(v120, (uint64_t)v90 + v107, (void (*)(void))type metadata accessor for DialogData);
    void *v90 = v104;
    v90[1] = v105;
    v90[2] = v106;
    swift_bridgeObjectRetain();
    uint64_t v108 = OUTLINED_FUNCTION_117_2();
    outlined copy of Data._Representation(v108, v109);
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v120, (void (*)(void))type metadata accessor for DialogData);
    outlined destroy of EagerResolutionService?((uint64_t)v122, &demangling cache variable for type metadata for (snippetData: Data, dialogData: DialogData));
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_13();
    OUTLINED_FUNCTION_17_14();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_86();
    return v110();
  }
  outlined init with take of AssistantSystemContext(*(void *)(v0 + 1584), *(void *)(v0 + 1760), (void (*)(void))type metadata accessor for SearchEntity);
  EntityProperty.wrappedValue.getter();
  outlined init with take of EagerResolutionService?(v0 + 160, v0 + 416, &demangling cache variable for type metadata for AnswerMetadata?);
  outlined init with take of EagerResolutionService?(v0 + 416, v0 + 928, &demangling cache variable for type metadata for AnswerMetadata?);
  OUTLINED_FUNCTION_62_4((uint64_t *)(v0 + 928));
  if (v33
    || (outlined init with take of EagerResolutionService?(v0 + 416, v0 + 544, &demangling cache variable for type metadata for AnswerMetadata?), EntityProperty.wrappedValue.getter(), outlined release of AnswerMetadata?(v0 + 416), !*(void *)(v0 + 1440)))
  {
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(*(void *)(v0 + 1760), (void (*)(void))type metadata accessor for SearchEntity);
    goto LABEL_47;
  }
  uint64_t v118 = *(uint8_t **)(v0 + 1440);
  uint64_t v34 = *(void *)(v0 + 1432);
  uint64_t v35 = *(void *)(v0 + 1936);
  os_log_type_t v36 = *(void *)(v0 + 1536);
  outlined init with copy of ExtractionRule(*(void *)(v0 + 1544) + 56, v0 + 1184);
  uint64_t v113 = *(void *)(v0 + 1216);
  uint64_t v114 = *(void *)(v0 + 1208);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 1184), v114);
  uint64_t v37 = *(void *)(v36 + 24);
  uint64_t v121 = *(void *)(v36 + 16);
  _s10OmniSearch22AssistantSystemContextVWOcTm_0(v36, v35, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
  uint64_t v120 = v29;
  uint64_t v112 = v0 + 1184;
  uint64_t v115 = v34;
  uint64_t v38 = *(uint64_t **)(v0 + 1936);
  if (v37)
  {
    uint64_t v111 = v37;
  }
  else
  {
    uint64_t v121 = *v38;
    uint64_t v111 = v38[1];
    swift_bridgeObjectRetain();
  }
  uint64_t v39 = *(uint64_t (**)(uint64_t))(v0 + 2208);
  swift_bridgeObjectRetain();
  uint64_t v40 = _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v38, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
  uint64_t result = v39(v40);
  uint64_t v42 = (void *)result;
  uint64_t v43 = MEMORY[0x263F8EE78];
  uint64_t v123 = MEMORY[0x263F8EE78];
  uint64_t v44 = *(void *)(result + 16);
  if (!v44)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    EntityProperty.wrappedValue.getter();
    outlined init with take of EagerResolutionService?(v0 + 800, v0 + 288, &demangling cache variable for type metadata for AnswerMetadata?);
    outlined init with take of EagerResolutionService?(v0 + 288, v0 + 1056, &demangling cache variable for type metadata for AnswerMetadata?);
    OUTLINED_FUNCTION_62_4((uint64_t *)(v0 + 1056));
    if (v33)
    {
      uint64_t v55 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v55 = *(void *)(v0 + 872);
      outlined init with take of EagerResolutionService?(v0 + 800, v0 + 672, &demangling cache variable for type metadata for AnswerMetadata?);
      swift_bridgeObjectRetain();
      outlined release of AnswerMetadata?(v0 + 672);
    }
    LOBYTE(v19) = v120;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, uint64_t, void, uint64_t, uint64_t, uint64_t))(v113 + 16))(v121, v111, v43, v115, v118, v55, 0, v0 + 2288, v114, v113);
    if (v120)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm(v112);
      uint64_t v56 = Logger.logObject.getter();
      uint64_t v57 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_51_1(v57))
      {
        uint64_t v58 = (_WORD *)OUTLINED_FUNCTION_55();
        OUTLINED_FUNCTION_119_3(v58);
        _os_log_impl(&dword_257DC6000, v56, (os_log_type_t)v120, "Hallucination detection rejected LLM-generated result dialog, falling back to CAT", v118, 2u);
        OUTLINED_FUNCTION_34();
      }
      uint64_t v59 = *(void *)(v0 + 1928);
      uint64_t v60 = *(void *)(v0 + 1536);

      uint64_t v19 = *(NSObject **)(v0 + 1480);
      v124[0] = xmmword_25866B100;
      uint64_t v61 = *(void *)(v60 + 16);
      uint64_t v62 = *(void *)(v60 + 24);
      _s10OmniSearch22AssistantSystemContextVWOcTm_0(v60, v59, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
      uint64_t v63 = *(uint64_t **)(v0 + 1928);
      if (v62)
      {
        uint64_t v121 = v61;
      }
      else
      {
        uint64_t v121 = *v63;
        swift_bridgeObjectRetain();
      }
      uint64_t v64 = *(void *)(v0 + 1760);
      uint64_t v65 = *(void *)(v0 + 1672);
      uint64_t v66 = *(void *)(v0 + 1600);
      uint64_t v122 = (void *)(v65 + *(int *)(v0 + 2284));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v63, (void (*)(void))type metadata accessor for SearchToolIntentRequest);
      SearchToolIntentController.buildDialogData(from:renderOption:query:isQuestionQuery:forceUseCAT:systemContext:)();
      uint64_t v68 = v67;
      uint64_t v70 = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v64, (void (*)(void))type metadata accessor for SearchEntity);
      outlined consume of Data._Representation(*(void *)v65, *(void *)(v65 + 8));
      *(void *)uint64_t v65 = v68;
      *(void *)(v65 + 8) = v70;
      outlined assign with take of DialogData(v66, (uint64_t)v122);
    }
    else
    {
      _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(*(void *)(v0 + 1760), (void (*)(void))type metadata accessor for SearchEntity);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm(v112);
    }
    goto LABEL_47;
  }
  long long v45 = 0;
  uint64_t v46 = *(void *)(v0 + 1624);
  uint64_t v122 = (void *)result;
  while (v45 < v42[2])
  {
    uint64_t v47 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    uint64_t v48 = *(void *)(v46 + 72);
    _s10OmniSearch22AssistantSystemContextVWOcTm_0((uint64_t)v42 + v47 + v48 * v45, *(void *)(v0 + 1640), (void (*)(void))type metadata accessor for SearchResult);
    if (one-time initialization token for supportedTypes != -1) {
      swift_once();
    }
    SearchResultItem.type.getter((char *)v124);
    specialized Set.contains(_:)();
    uint64_t v50 = v49;
    uint64_t v51 = *(void *)(v0 + 1640);
    if (v50)
    {
      long long v52 = v44;
      outlined init with take of AssistantSystemContext(v51, *(void *)(v0 + 1632), (void (*)(void))type metadata accessor for SearchResult);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_104_5();
        uint64_t v43 = v123;
      }
      long long v53 = *(void *)(v43 + 16);
      if (v53 >= *(void *)(v43 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v43 = v123;
      }
      int v54 = *(void *)(v0 + 1632);
      *(void *)(v43 + 16) = v53 + 1;
      uint64_t result = outlined init with take of AssistantSystemContext(v54, v43 + v47 + v53 * v48, (void (*)(void))type metadata accessor for SearchResult);
      uint64_t v44 = v52;
      uint64_t v42 = v122;
    }
    else
    {
      uint64_t result = _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v51, (void (*)(void))type metadata accessor for SearchResult);
    }
    if (v44 == ++v45) {
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[233];
  swift_release();
  _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v1, (void (*)(void))type metadata accessor for OmniSearchOptions);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 163));
  OUTLINED_FUNCTION_19_15(v0[275]);
  OUTLINED_FUNCTION_87_5();
  OUTLINED_FUNCTION_84_4();
  OUTLINED_FUNCTION_127_2();
  OUTLINED_FUNCTION_125_3();
  OUTLINED_FUNCTION_124_3();
  OUTLINED_FUNCTION_123_3();
  OUTLINED_FUNCTION_121_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t);
  void (*v4)(void);
  os_signpost_type_t v5;
  os_signpost_id_t v6;
  NSObject *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  uint64_t v1 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  static os_signpost_type_t.end.getter();
  if (OUTLINED_FUNCTION_60_0())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v2 = OUTLINED_FUNCTION_20_1();
    if (v3(v2) != *MEMORY[0x263F90238])
    {
      OUTLINED_FUNCTION_39_9();
      v4();
    }
    *(_WORD *)OUTLINED_FUNCTION_55() = 0;
    OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_129(&dword_257DC6000, v1, v5, v6, "SearchTool.Disambiguation");
    OUTLINED_FUNCTION_34();
  }
  uint64_t v7 = v1;
  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[268];
  uint64_t v9 = v0[249];
  uint64_t v10 = v0[247];
  uint64_t v11 = v0[233];
  uint64_t v12 = v0[209];

  v8(v9, v10);
  swift_release();
  swift_release();
  swift_release();
  _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v11, (void (*)(void))type metadata accessor for OmniSearchOptions);
  outlined destroy of EagerResolutionService?(v12, &demangling cache variable for type metadata for (snippetData: Data, dialogData: DialogData));
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_19_15(v0[283]);
  OUTLINED_FUNCTION_87_5();
  OUTLINED_FUNCTION_84_4();
  OUTLINED_FUNCTION_127_2();
  OUTLINED_FUNCTION_125_3();
  OUTLINED_FUNCTION_124_3();
  OUTLINED_FUNCTION_123_3();
  OUTLINED_FUNCTION_121_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t Array<A>.createValidEntities(cardBuilder:inAppSearchString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v78 = a3;
  uint64_t v77 = a2;
  uint64_t v7 = type metadata accessor for String.Encoding();
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_184_0();
  uint64_t v82 = v9;
  uint64_t v10 = OUTLINED_FUNCTION_26_8();
  uint64_t v11 = type metadata accessor for SearchEntity(v10);
  uint64_t v12 = OUTLINED_FUNCTION_12_0(v11);
  uint64_t v74 = v13;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_27_15();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v71 - v15;
  uint64_t v87 = type metadata accessor for SearchResult(0);
  OUTLINED_FUNCTION_0_10();
  uint64_t v18 = v17;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_185_0();
  uint64_t v88 = v20;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)v71 - v22;
  uint64_t v24 = *(void *)(a4 + 16);
  if (!v24) {
    return MEMORY[0x263F8EE78];
  }
  outlined init with copy of ExtractionRule(a1, (uint64_t)&v99);
  type metadata accessor for SearchEntityBuilder();
  uint64_t inited = swift_initStackObject();
  uint64_t v72 = inited + 16;
  outlined init with take of SageSearchClient(&v99, inited + 16);
  uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0, MEMORY[0x263F8EE78]);
  uint64_t v76 = a4 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  uint64_t v75 = *(void *)(v18 + 72);
  v71[1] = a4;
  swift_bridgeObjectRetain();
  uint64_t v25 = 0;
  *(void *)&long long v26 = 136315394;
  long long v84 = v26;
  uint64_t v83 = MEMORY[0x263F8EE58] + 8;
  uint64_t v27 = v88;
  uint64_t v86 = v4;
  uint64_t v85 = v16;
  uint64_t v73 = v24;
  uint64_t v95 = v23;
  do
  {
    uint64_t v81 = v25;
    _s10OmniSearch22AssistantSystemContextVWOcTm_0(v76 + v75 * v25, (uint64_t)v23, (void (*)(void))type metadata accessor for SearchResult);
    LOBYTE(v97) = 0;
    uint64_t v28 = *(void *)(SearchEntityBuilder.makeSearchEntities(searchResult:option:searchString:)((uint64_t)v23, (char *)&v97, v77, v78)+ 16);
    if (v28)
    {
      OUTLINED_FUNCTION_46_8();
      uint64_t v80 = v29;
      uint64_t v89 = v30;
      uint64_t v31 = v29 + v30;
      uint64_t v33 = *(void *)(v32 + 72);
      uint64_t v94 = v33;
      do
      {
        _s10OmniSearch22AssistantSystemContextVWOcTm_0(v31, (uint64_t)v16, (void (*)(void))type metadata accessor for SearchEntity);
        SearchEntity.validateParameters()();
        if (v34)
        {
          if (one-time initialization token for stextension != -1) {
            swift_once();
          }
          uint64_t v35 = type metadata accessor for Logger();
          __swift_project_value_buffer(v35, (uint64_t)static Logging.stextension);
          _s10OmniSearch22AssistantSystemContextVWOcTm_0((uint64_t)v95, v27, (void (*)(void))type metadata accessor for SearchResult);
          id v36 = v34;
          id v37 = v34;
          uint64_t v38 = Logger.logObject.getter();
          int v39 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v38, (os_log_type_t)v39))
          {
            int v92 = v39;
            uint64_t v40 = swift_slowAlloc();
            uint64_t v91 = (void *)swift_slowAlloc();
            uint64_t v93 = swift_slowAlloc();
            uint64_t v97 = v93;
            *(_DWORD *)uint64_t v40 = v84;
            if (one-time initialization token for iso8601PrettyPrinted != -1) {
              swift_once();
            }
            _s10OmniSearch0B6ResultVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SearchResult and conformance SearchResult, (void (*)(uint64_t))type metadata accessor for SearchResult);
            uint64_t v44 = dispatch thunk of JSONEncoder.encode<A>(_:)();
            unint64_t v46 = v45;
            uint64_t v90 = 0;
            static String.Encoding.utf8.getter();
            uint64_t v47 = String.init(data:encoding:)();
            if (v48)
            {
              uint64_t v49 = v47;
              unint64_t v50 = v48;
              outlined consume of Data._Representation(v44, v46);
            }
            else
            {
              outlined consume of Data._Representation(v44, v46);
              uint64_t v49 = 0;
              unint64_t v50 = 0xE000000000000000;
            }
            *(void *)(v40 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v97);
            swift_bridgeObjectRelease();
            uint64_t v27 = v88;
            _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v88, (void (*)(void))type metadata accessor for SearchResult);
            *(_WORD *)(v40 + 12) = 2112;
            id v51 = v34;
            uint64_t v52 = _swift_stdlib_bridgeErrorToNSError();
            *(void *)(v40 + 14) = v52;
            void *v91 = v52;

            _os_log_impl(&dword_257DC6000, v38, (os_log_type_t)v92, "Failed to construct valid entity from result: %s, error: %@", (uint8_t *)v40, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_34();
            swift_arrayDestroy();
            OUTLINED_FUNCTION_34();
            OUTLINED_FUNCTION_34();

            uint64_t v16 = v85;
            _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v85, (void (*)(void))type metadata accessor for SearchEntity);
            uint64_t v4 = v86;
          }
          else
          {

            _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v27, (void (*)(void))type metadata accessor for SearchResult);
            _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v16, (void (*)(void))type metadata accessor for SearchEntity);
          }
          uint64_t v33 = v94;
        }
        else
        {
          _s10OmniSearch22AssistantSystemContextVWOcTm_0((uint64_t)v16, v4, (void (*)(void))type metadata accessor for SearchEntity);
          uint64_t v41 = v96;
          unint64_t v43 = *(void *)(v96 + 16);
          unint64_t v42 = *(void *)(v96 + 24);
          if (v43 >= v42 >> 1)
          {
            char v53 = OUTLINED_FUNCTION_51_5(v42);
            uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53, v43 + 1, 1, v54);
          }
          *(void *)(v41 + 16) = v43 + 1;
          uint64_t v96 = v41;
          outlined init with take of AssistantSystemContext(v4, v41 + v89 + v43 * v33, (void (*)(void))type metadata accessor for SearchEntity);
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v16, (void (*)(void))type metadata accessor for SearchEntity);
        }
        v31 += v33;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
      uint64_t v24 = v73;
      uint64_t v23 = v95;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v25 = v81 + 1;
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v23, (void (*)(void))type metadata accessor for SearchResult);
  }
  while (v25 != v24);
  swift_bridgeObjectRelease();
  if (*(void *)(v96 + 16))
  {
    swift_setDeallocating();
    __swift_destroy_boxed_opaque_existential_1Tm(v72);
    return v96;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v97 = 0;
    unint64_t v98 = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    uint64_t v100 = v24;
    v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    v57._object = (void *)0x80000002586807F0;
    v57._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v57);
    uint64_t v58 = v97;
    unint64_t v59 = v98;
    if (one-time initialization token for stextension != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logging.stextension);
    swift_bridgeObjectRetain_n();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (_DWORD *)swift_slowAlloc();
      uint64_t v97 = swift_slowAlloc();
      _DWORD *v63 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_99_4();
      _os_log_impl(v64, v65, v66, v67, v68, v69);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_34();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type SearchToolError and conformance SearchToolError();
    swift_allocError();
    *uint64_t v70 = v58;
    v70[1] = v59;
    swift_willThrow();
    swift_setDeallocating();
    return __swift_destroy_boxed_opaque_existential_1Tm(v72);
  }
}

Swift::Bool __swiftcall OmniSearchResponse.needsDisambiguation()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v0 + 120);
  unint64_t v3 = *(void *)(v2() + 16);
  swift_bridgeObjectRelease();
  int v4 = *(unsigned __int8 *)(v1 + 41);
  if (*(unsigned char *)(v1 + 40) != 1)
  {
    if (v3 < 2 || v4 == 0)
    {
      BOOL v6 = 0;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  BOOL v6 = v3 > 1 && *(void *)(v1 + 32) != 1;
  if (v3 >= 2 && v4 != 0) {
LABEL_20:
  }
    BOOL v6 = 1;
LABEL_21:
  if (one-time initialization token for stextension != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logging.stextension);
  swift_retain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v17 = v2;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = OUTLINED_FUNCTION_13_1();
    *(_DWORD *)uint64_t v12 = 136316162;
    if (v6) {
      uint64_t v13 = 0x656465656E207369;
    }
    else {
      uint64_t v13 = 0x64657070696B73;
    }
    os_log_type_t type = v11;
    if (v6) {
      unint64_t v14 = 0xE900000000000064;
    }
    else {
      unint64_t v14 = 0xE700000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v12 + 18) = 1024;
    uint64_t v15 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 24) = 2048;
    ((uint64_t (*)(uint64_t))v17)(v15);
    swift_release();
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v12 + 34) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_257DC6000, v10, type, "SearchTool disambiguation %s:\n    isQuestionQuery: %{BOOL}d\n    isOpenQuery: %{BOOL}d\n    count: %ld\n    isContentSearch: %{BOOL}d", (uint8_t *)v12, 0x28u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {

    swift_release_n();
  }
  return v6;
}

uint64_t DisambiguationRequestable.resolveDisambiguation(_:dialogString:limit:)()
{
  OUTLINED_FUNCTION_27();
  v1[79] = v0;
  v1[78] = v2;
  v1[77] = v3;
  v1[76] = v4;
  v1[75] = v5;
  v1[74] = v6;
  v1[73] = v7;
  uint64_t v8 = type metadata accessor for DialogData(0);
  v1[80] = v8;
  OUTLINED_FUNCTION_81(v8);
  v1[81] = OUTLINED_FUNCTION_49_1();
  uint64_t v9 = type metadata accessor for SearchEntity(0);
  v1[82] = v9;
  OUTLINED_FUNCTION_12_0(v9);
  v1[83] = v10;
  v1[84] = OUTLINED_FUNCTION_50_0();
  v1[85] = swift_task_alloc();
  v1[86] = swift_task_alloc();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  char v22;
  Swift::Bool v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t (*v64)(uint64_t, Swift::Int, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;

  uint64_t v1 = v0[73];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    os_log_type_t v62 = (uint64_t)(v0 + 18);
    uint64_t v63 = v0 + 2;
    uint64_t v3 = (uint64_t)(v0 + 34);
    unint64_t v59 = (uint64_t)(v0 + 50);
    uint64_t v4 = v0[86];
    uint64_t v5 = v0[83];
    uint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v7 = v1 + v6;
    uint64_t v8 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    uint64_t v60 = v8;
    uint64_t v61 = v6;
    os_log_t v65 = v2 - 1;
    uint64_t v9 = MEMORY[0x263F8EE80];
    uint64_t v10 = v4;
    while (1)
    {
      _s10OmniSearch22AssistantSystemContextVWOcTm_0(v7, v10, (void (*)(void))type metadata accessor for SearchEntity);
      EntityProperty.wrappedValue.getter();
      outlined init with take of EagerResolutionService?(v3, v62, &demangling cache variable for type metadata for AnswerMetadata?);
      outlined init with take of EagerResolutionService?(v62, (uint64_t)v63, &demangling cache variable for type metadata for AnswerMetadata?);
      OUTLINED_FUNCTION_62_4(v63);
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v12 = v0[47];
        uint64_t v13 = v0[48];
        outlined init with take of EagerResolutionService?(v3, v59, &demangling cache variable for type metadata for AnswerMetadata?);
        swift_bridgeObjectRetain();
        outlined release of AnswerMetadata?(v59);
      }
      _s10OmniSearch22AssistantSystemContextVWOcTm_0(v0[86], v0[85], (void (*)(void))type metadata accessor for SearchEntity);
      if (!v13)
      {
        EntityProperty.wrappedValue.getter();
        uint64_t v12 = v0[66];
        uint64_t v13 = v0[67];
      }
      unint64_t v14 = v0[86];
      _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v0[85], (void (*)(void))type metadata accessor for SearchEntity);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchEntity>);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_258661700;
      _s10OmniSearch22AssistantSystemContextVWOcTm_0(v14, v15 + v61, (void (*)(void))type metadata accessor for SearchEntity);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = (void *)v9;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
      uint64_t v19 = *(void *)(v9 + 16);
      uint64_t v20 = (v18 & 1) == 0;
      uint64_t v9 = v19 + v20;
      if (__OFADD__(v19, v20))
      {
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      uint64_t v21 = v17;
      uint64_t v22 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [SearchEntity]>);
      uint64_t v23 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
      uint64_t v9 = (Swift::Int)v67;
      if (v23)
      {
        uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
        if ((v22 & 1) != (v25 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        uint64_t v21 = v24;
      }
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        v67[(v21 >> 6) + 8] |= 1 << v21;
        long long v26 = (uint64_t *)(v67[6] + 16 * v21);
        uint64_t *v26 = v12;
        v26[1] = v13;
        *(void *)(v67[7] + 8 * v21) = MEMORY[0x263F8EE78];
        uint64_t v27 = v67[2];
        uint64_t v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28) {
          goto LABEL_30;
        }
        v67[2] = v29;
        swift_bridgeObjectRetain();
      }
      uint64_t v30 = v0[86];
      specialized Array.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v30, (void (*)(void))type metadata accessor for SearchEntity);
      if (!v65)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      uint64_t v10 = v0[86];
      v7 += v60;
      --v65;
      uint64_t v3 = (uint64_t)(v0 + 34);
    }
  }
  uint64_t v9 = MEMORY[0x263F8EE80];
LABEL_19:
  v0[87] = v9;
  uint64_t v31 = swift_bridgeObjectRetain();
  specialized Sequence.compactMap<A>(_:)(v31);
  swift_bridgeObjectRelease();
  uint64_t v32 = OUTLINED_FUNCTION_148();
  uint64_t v34 = specialized Collection.prefix(_:)(v32, v33);
  uint64_t v9 = specialized ArraySlice._copyToContiguousArray()(v34, v35, v36, v37);
  v0[88] = v9;
  if (one-time initialization token for stextension != -1) {
LABEL_31:
  }
    swift_once();
  uint64_t v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logging.stextension);
  swift_retain();
  int v39 = (void *)Logger.logObject.getter();
  uint64_t v40 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_51_1(v40))
  {
    uint64_t v41 = v0[76];
    unint64_t v42 = OUTLINED_FUNCTION_83_2();
    *(_DWORD *)unint64_t v42 = 134218240;
    v0[71] = *(void *)(v9 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v42 + 12) = 2048;
    v0[72] = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_96_3(&dword_257DC6000, v43, v44, "Disambiguating %ld results (limit=%ld)");
    OUTLINED_FUNCTION_34();
  }
  else
  {
    swift_release();
  }

  unint64_t v45 = (void *)v0[81];
  unint64_t v46 = (int *)v0[80];
  os_log_type_t v66 = v0[78];
  uint64_t v47 = v0[75];
  unint64_t v48 = v0[74];
  uint64_t v49 = type metadata accessor for URL();
  OUTLINED_FUNCTION_25_7(v49);
  unint64_t v50 = type metadata accessor for _SpeakableString();
  OUTLINED_FUNCTION_25_7(v50);
  id v51 = v46[9];
  *unint64_t v45 = 0;
  v45[1] = 0;
  *(void *)((char *)v45 + v46[6]) = 0;
  uint64_t v52 = (void *)((char *)v45 + v46[7]);
  *uint64_t v52 = v48;
  v52[1] = v47;
  *(_OWORD *)((char *)v45 + v51) = xmmword_258665BD0;
  uint64_t v64 = (uint64_t (*)(uint64_t, Swift::Int, uint64_t, uint64_t, uint64_t))(*(void *)(v66 + 8)
                                                                               + **(int **)(v66 + 8));
  swift_bridgeObjectRetain();
  char v53 = (void *)swift_task_alloc();
  v0[89] = v53;
  *char v53 = v0;
  v53[1] = DisambiguationRequestable.resolveDisambiguation(_:dialogString:limit:);
  uint64_t v54 = v0[84];
  uint64_t v55 = v0[81];
  Swift::String v56 = v0[78];
  Swift::String v57 = v0[77];
  return v64(v54, v9, v55, v57, v56);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 720) = v0;
  swift_task_dealloc();
  _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(*(void *)(v2 + 648), (void (*)(void))type metadata accessor for DialogData);
  if (v0) {
    swift_bridgeObjectRelease();
  }
  swift_release();
  OUTLINED_FUNCTION_26();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_27_0();
  uint64_t v1 = v0[90];
  v0[68] = SearchEntity.groupingId.getter();
  v0[69] = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchEntity]);
  OUTLINED_FUNCTION_117_2();
  Dictionary.subscript.getter();
  if (v1)
  {
    uint64_t v3 = v0[84];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v3, (void (*)(void))type metadata accessor for SearchEntity);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_13();
    return v4();
  }
  else
  {
    uint64_t v6 = v0[84];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v6, (void (*)(void))type metadata accessor for SearchEntity);
    uint64_t v7 = v0[70];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
    return v8(v7);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13();
  return v0();
}

#error "25838D088: call analysis failed (funcsize=315)"

void SearchToolIntentController.buildDialogData(from:renderOption:query:isQuestionQuery:forceUseCAT:systemContext:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v225 = v1;
  uint64_t v226 = v2;
  int v213 = v3;
  LODWORD(v214) = v4;
  uint64_t v228 = v5;
  uint64_t v7 = v6;
  uint64_t v231 = v8;
  uint64_t v10 = v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogData?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_184_0();
  uint64_t v223 = v13;
  uint64_t v14 = type metadata accessor for LocalizedStringResource();
  uint64_t v15 = OUTLINED_FUNCTION_81(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_185_0();
  v211[2] = v16;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_27_10();
  v211[1] = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
  uint64_t v20 = OUTLINED_FUNCTION_81(v19);
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_184_0();
  uint64_t v216 = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchEntity?);
  uint64_t v23 = OUTLINED_FUNCTION_81(v22);
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_185_0();
  uint64_t v220 = v24;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v211 - v26;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, speakableString: _SpeakableString)?);
  uint64_t v29 = OUTLINED_FUNCTION_81(v28);
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_13_12();
  uint64_t v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, speakableString: _SpeakableString));
  OUTLINED_FUNCTION_1_0();
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_185_0();
  uint64_t v215 = v31;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_27_10();
  uint64_t v217 = v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v35 = OUTLINED_FUNCTION_81(v34);
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_184_0();
  uint64_t v222 = v36;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RGPluginModel?);
  uint64_t v38 = OUTLINED_FUNCTION_81(v37);
  MEMORY[0x270FA5388](v38);
  OUTLINED_FUNCTION_185_0();
  v211[0] = v39;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v40);
  unint64_t v42 = (void *)((char *)v211 - v41);
  uint64_t v212 = *v7;
  uint64_t v219 = v7[1];
  if (one-time initialization token for stextension != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v227 = __swift_project_value_buffer(v43, (uint64_t)static Logging.stextension);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v218 = (void *)v10;
    unint64_t v46 = (uint8_t *)OUTLINED_FUNCTION_14_1();
    v237[0] = OUTLINED_FUNCTION_13_1();
    *(_DWORD *)unint64_t v46 = 136315138;
    if (one-time initialization token for catTemplateDirectoryURL != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for URL();
    __swift_project_value_buffer(v47, (uint64_t)static SearchToolIntentController.catTemplateDirectoryURL);
    uint64_t v48 = URL.path.getter();
    v243[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v237);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257DC6000, v44, v45, "Building dialog using templates at %s", v46, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();

    uint64_t v10 = (uint64_t)v218;
  }
  else
  {
  }
  uint64_t v50 = v231;
  specialized static EntityCardBuilding.cardForEntities(_:)();
  uint64_t v52 = v51;
  SFCard.snippetPluginModel.getter(v42);
  uint64_t v53 = type metadata accessor for RGPluginModel();
  OUTLINED_FUNCTION_53_2((uint64_t)v42, 1, v53);
  if (v80)
  {
    outlined destroy of EagerResolutionService?((uint64_t)v42, &demangling cache variable for type metadata for RGPluginModel?);
LABEL_12:
    uint64_t v54 = 0;
    unint64_t v230 = 0xC000000000000000;
    goto LABEL_13;
  }
  _s10OmniSearch0B6ResultVACSEAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RGPluginModel and conformance RGPluginModel, MEMORY[0x263F4C1E0]);
  uint64_t v54 = SnippetPluginModel.data.getter();
  unint64_t v56 = v55;
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_16_1();
  v57();
  unint64_t v230 = v56;
  if (v56 >> 60 == 15) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v58 = *(void *)(v50 + 16);
  uint64_t v224 = v52;
  uint64_t v229 = v54;
  if (!v58)
  {
    uint64_t v63 = (void *)v10;
    uint64_t v64 = (void *)Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_51_1(v65))
    {
      os_log_type_t v66 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_67_0(v66);
      OUTLINED_FUNCTION_56(&dword_257DC6000, v67, v68, "No results. SearchTool will generate static dialog text");
      OUTLINED_FUNCTION_34();
    }

    uint64_t v69 = v225;
    if (one-time initialization token for catTemplateDirectoryURL != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for URL();
    __swift_project_value_buffer(v70, (uint64_t)static SearchToolIntentController.catTemplateDirectoryURL);
    OUTLINED_FUNCTION_1_0();
    uint64_t v71 = OUTLINED_FUNCTION_21_16();
    v72(v71);
    OUTLINED_FUNCTION_34_13();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, _IntentValue & Sendable)>);
    uint64_t v73 = (uint64_t *)swift_allocObject();
    OUTLINED_FUNCTION_47_9((__n128 *)v73, (__n128)xmmword_258661700)[4].n128_u64[1] = MEMORY[0x263F8D310];
    v73[10] = lazy protocol witness table accessor for type String and conformance String();
    v73[6] = v228;
    v73[7] = v69;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IntentValue & Sendable);
    uint64_t v74 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_106_5();
    uint64_t v75 = type metadata accessor for _SpeakableString();
    OUTLINED_FUNCTION_25_7(v75);
    uint64_t v76 = *((int *)v73 + 9);
    void *v63 = 0xD000000000000017;
    v63[1] = 0x80000002586808D0;
    outlined init with take of EagerResolutionService?(v53, (uint64_t)v63 + *((int *)v73 + 5), &demangling cache variable for type metadata for URL?);
    *(void *)((char *)v63 + *((int *)v73 + 6)) = v74;
    uint64_t v77 = (void *)((char *)v63 + *((int *)v73 + 7));
    *uint64_t v77 = 0;
    v77[1] = 0;
    *(_OWORD *)((char *)v63 + v76) = xmmword_258665BD0;
    uint64_t v78 = v223;
    uint64_t v10 = (uint64_t)v63;
    goto LABEL_71;
  }
  specialized Collection.first.getter(v50, (uint64_t)v27);
  uint64_t v59 = type metadata accessor for SearchEntity(0);
  OUTLINED_FUNCTION_53_2((uint64_t)v27, 1, v59);
  if (v80)
  {
    outlined destroy of EagerResolutionService?((uint64_t)v27, &demangling cache variable for type metadata for SearchEntity?);
    OUTLINED_FUNCTION_46_1();
    __swift_storeEnumTagSinglePayload(v60, v61, v62, v221);
  }
  else
  {
    SearchEntity.globalPassthroughResults(removeWebSearchPunchout:)();
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v27, (void (*)(void))type metadata accessor for SearchEntity);
    uint64_t v79 = v221;
    OUTLINED_FUNCTION_53_2(v0, 1, v221);
    if (!v80)
    {
LABEL_35:
      uint64_t v218 = (void *)v10;
      uint64_t v88 = v217;
      int v89 = v217 + *(_DWORD *)(v79 + 48);
      uint64_t v90 = *(void *)v0;
      unint64_t v91 = *(void *)(v0 + 8);
      *uint64_t v217 = v90;
      v88[1] = v91;
      type metadata accessor for _SpeakableString();
      OUTLINED_FUNCTION_30_2();
      uint64_t v93 = v92;
      uint64_t v95 = v94;
      uint64_t v219 = *(void *)(v92 + 32);
      uint64_t v220 = v92 + 32;
      OUTLINED_FUNCTION_58_1();
      v96();
      uint64_t v97 = v90;
      outlined copy of Data._Representation(v90, v91);
      unint64_t v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_26_15(v99))
      {
        uint64_t v100 = (uint8_t *)OUTLINED_FUNCTION_55();
        *(_WORD *)uint64_t v100 = 0;
        _os_log_impl(&dword_257DC6000, v98, (os_log_type_t)v89, "Passing through global snippet and dialog", v100, 2u);
        OUTLINED_FUNCTION_34();
      }
      outlined consume of Data._Representation(v229, v230);

      uint64_t v101 = v215;
      *uint64_t v215 = v97;
      v101[1] = v91;
      uint64_t v102 = *(void (**)(uint64_t))(v93 + 16);
      uint64_t v103 = OUTLINED_FUNCTION_80_5();
      v102(v103);
      unint64_t v214 = v91;
      outlined copy of Data._Representation(v97, v91);
      uint64_t v104 = OUTLINED_FUNCTION_148();
      v105(v104);
      uint64_t v106 = type metadata accessor for URL();
      uint64_t v107 = v222;
      OUTLINED_FUNCTION_32(v222, v108, v109, v106);
      *uint64_t v101 = v97;
      v101[1] = v91;
      uint64_t v110 = OUTLINED_FUNCTION_80_5();
      v102(v110);
      outlined destroy of EagerResolutionService?((uint64_t)v217, &demangling cache variable for type metadata for (snippetModel: Data, speakableString: _SpeakableString));
      outlined consume of Data._Representation(*v101, v101[1]);
      uint64_t v111 = v216;
      OUTLINED_FUNCTION_58_1();
      v112();
      __swift_storeEnumTagSinglePayload(v111, 0, 1, v95);
      uint64_t v73 = (uint64_t *)type metadata accessor for DialogData(0);
      uint64_t v113 = *((int *)v73 + 9);
      uint64_t v10 = (uint64_t)v218;
      *uint64_t v218 = 0;
      *(void *)(v10 + 8) = 0;
      outlined init with take of EagerResolutionService?(v107, v10 + *((int *)v73 + 5), &demangling cache variable for type metadata for URL?);
      *(void *)(v10 + *((int *)v73 + 6)) = 0;
      uint64_t v114 = (void *)(v10 + *((int *)v73 + 7));
      *uint64_t v114 = 0;
      v114[1] = 0;
      outlined init with take of EagerResolutionService?(v111, v10 + *((int *)v73 + 8), &demangling cache variable for type metadata for _SpeakableString?);
      *(_OWORD *)(v10 + v113) = xmmword_258665BD0;
      uint64_t v229 = v97;
      unint64_t v230 = v214;
      goto LABEL_38;
    }
  }
  outlined destroy of EagerResolutionService?(v0, &demangling cache variable for type metadata for (snippetModel: Data, speakableString: _SpeakableString)?);
  uint64_t v81 = v220;
  specialized Collection.first.getter(v50, v220);
  OUTLINED_FUNCTION_53_2(v81, 1, v59);
  if (v80)
  {
    outlined destroy of EagerResolutionService?(v81, &demangling cache variable for type metadata for SearchEntity?);
    goto LABEL_42;
  }
  EntityProperty.wrappedValue.getter();
  outlined init with take of EagerResolutionService?((uint64_t)v237, (uint64_t)v242, &demangling cache variable for type metadata for AnswerMetadata?);
  _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v81, (void (*)(void))type metadata accessor for SearchEntity);
  outlined init with take of EagerResolutionService?((uint64_t)v242, (uint64_t)v243, &demangling cache variable for type metadata for AnswerMetadata?);
  OUTLINED_FUNCTION_62_4(v243);
  if (v82)
  {
LABEL_42:
    swift_bridgeObjectRetain();
    uint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.debug.getter();
    BOOL v117 = OUTLINED_FUNCTION_51_1(v116);
    uint64_t v118 = v50;
    uint64_t v78 = v223;
    uint64_t v119 = v226;
    if (v117)
    {
      uint64_t v120 = (uint8_t *)OUTLINED_FUNCTION_14_1();
      *(_DWORD *)uint64_t v120 = 134217984;
      v237[0] = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257DC6000, v115, (os_log_type_t)v52, "%ld results. SearchTool will synthesize model data & dialog", v120, 0xCu);
      OUTLINED_FUNCTION_34();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v121 = v228;
    uint64_t v122 = v219;
    uint64_t v123 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10OmniSearch0E6EntityVG_AF0E9CATEntityVs5NeverOTg504_s10d209Search0B20ToolIntentControllerC15buildDialogData33_12E9D6AD9B7C26936623555213C26B094from12renderOption5query15isQuestionQuery11forceUseCAT13systemContext10Foundation0H0V07snippetH0_AA0gH0V06dialogH0tSayAA0B6f66VG_AA0ab14ResponseRenderR0OSSS2bAA22AssistantSystemContextVtFAA0B9G57VATcfu4_33_449143660f8ab50c5df8c7dc2c7d5ba9ATA_Tf3nnnpk_nTf1cn_n(v118);
    uint64_t v124 = v225;
    switch(v122)
    {
      case 0:
        goto LABEL_52;
      case 1:
        uint64_t v125 = (void *)Logger.logObject.getter();
        os_log_type_t v126 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_63_5(v126))
        {
          *(_WORD *)OUTLINED_FUNCTION_55() = 0;
          OUTLINED_FUNCTION_50_12(&dword_257DC6000, v127, v128, "Construct CAT dialog for PCS use case");
          OUTLINED_FUNCTION_34();
        }

        if (one-time initialization token for catTemplateDirectoryURL != -1) {
          swift_once();
        }
        uint64_t v129 = type metadata accessor for URL();
        __swift_project_value_buffer(v129, (uint64_t)static SearchToolIntentController.catTemplateDirectoryURL);
        OUTLINED_FUNCTION_1_0();
        uint64_t v130 = OUTLINED_FUNCTION_21_16();
        v131(v130);
        OUTLINED_FUNCTION_34_13();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, _IntentValue & Sendable)>);
        uint64_t v73 = (uint64_t *)swift_allocObject();
        *((_OWORD *)v73 + 1) = xmmword_258661D70;
        v73[4] = 0xD000000000000011;
        v73[5] = 0x8000000258680910;
        v73[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchCATEntity]);
        unint64_t v132 = lazy protocol witness table accessor for type [SearchCATEntity] and conformance <A> [A]();
        OUTLINED_FUNCTION_24_17(v132);
        uint64_t v133 = MEMORY[0x263F8D4F8];
        v73[16] = MEMORY[0x263F8D4F8];
        unint64_t v134 = lazy protocol witness table accessor for type Bool and conformance Bool();
        unint64_t v135 = v134;
        *((unsigned char *)v73 + 104) = v213 & 1;
        goto LABEL_62;
      case 2:
        long long v146 = (void *)Logger.logObject.getter();
        os_log_type_t v147 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_63_5(v147))
        {
          *(_WORD *)OUTLINED_FUNCTION_55() = 0;
          OUTLINED_FUNCTION_50_12(&dword_257DC6000, v148, v149, "Construct CAT dialog for PQA fallback use case");
          OUTLINED_FUNCTION_34();
        }

        if (one-time initialization token for catTemplateDirectoryURL != -1) {
          swift_once();
        }
        uint64_t v150 = type metadata accessor for URL();
        __swift_project_value_buffer(v150, (uint64_t)static SearchToolIntentController.catTemplateDirectoryURL);
        OUTLINED_FUNCTION_1_0();
        uint64_t v151 = OUTLINED_FUNCTION_21_16();
        v152(v151);
        OUTLINED_FUNCTION_34_13();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, _IntentValue & Sendable)>);
        uint64_t v73 = (uint64_t *)swift_allocObject();
        *((_OWORD *)v73 + 1) = xmmword_258661D70;
        v73[4] = 0xD000000000000011;
        v73[5] = 0x8000000258680910;
        v73[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchCATEntity]);
        unint64_t v153 = lazy protocol witness table accessor for type [SearchCATEntity] and conformance <A> [A]();
        OUTLINED_FUNCTION_24_17(v153);
        uint64_t v133 = MEMORY[0x263F8D4F8];
        v73[16] = MEMORY[0x263F8D4F8];
        unint64_t v134 = lazy protocol witness table accessor for type Bool and conformance Bool();
        unint64_t v135 = v134;
        *((unsigned char *)v73 + 104) = 1;
LABEL_62:
        v73[17] = v134;
        v73[18] = 0xD000000000000013;
        v73[19] = 0x8000000258680950;
        swift_bridgeObjectRetain();
        SearchToolIntentController.isHomogenousResults(searchCATEntities:)();
        char v155 = v154;
        swift_bridgeObjectRelease();
        v73[23] = v133;
        v73[24] = v135;
        *((unsigned char *)v73 + 160) = v155 & 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IntentValue & Sendable);
        Dictionary.init(dictionaryLiteral:)();
        uint64_t v156 = OUTLINED_FUNCTION_25_15();
        __swift_storeEnumTagSinglePayload(v123, 1, 1, v156);
        uint64_t v157 = *((int *)v73 + 9);
        OUTLINED_FUNCTION_42_9(0xD000000000000015);
        outlined init with take of EagerResolutionService?(v119, v158, &demangling cache variable for type metadata for URL?);
        OUTLINED_FUNCTION_52_8();
        *(_OWORD *)(v10 + v157) = xmmword_258665BD0;
        break;
      case 3:
        swift_bridgeObjectRelease();
        long long v159 = (void *)Logger.logObject.getter();
        os_log_type_t v160 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_51_1(v160))
        {
          long long v161 = (_WORD *)OUTLINED_FUNCTION_55();
          OUTLINED_FUNCTION_67_0(v161);
          OUTLINED_FUNCTION_56(&dword_257DC6000, v162, v163, "Search results are present but render option is noAnswer");
          uint64_t v121 = v228;
          OUTLINED_FUNCTION_34();
        }

        if (one-time initialization token for catTemplateDirectoryURL != -1) {
          swift_once();
        }
        uint64_t v164 = type metadata accessor for URL();
        __swift_project_value_buffer(v164, (uint64_t)static SearchToolIntentController.catTemplateDirectoryURL);
        OUTLINED_FUNCTION_1_0();
        uint64_t v165 = v222;
        OUTLINED_FUNCTION_51_2();
        v166();
        uint64_t v167 = OUTLINED_FUNCTION_85_5();
        __swift_storeEnumTagSinglePayload(v167, v168, v169, v170);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, _IntentValue & Sendable)>);
        uint64_t v73 = (uint64_t *)swift_allocObject();
        long long v171 = OUTLINED_FUNCTION_47_9((__n128 *)v73, (__n128)xmmword_258661700);
        uint64_t v172 = MEMORY[0x263F8D310];
        v171[4].n128_u64[1] = MEMORY[0x263F8D310];
        v73[10] = lazy protocol witness table accessor for type String and conformance String();
        v73[6] = v121;
        v73[7] = v124;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IntentValue & Sendable);
        Dictionary.init(dictionaryLiteral:)();
        uint64_t v173 = OUTLINED_FUNCTION_25_15();
        __swift_storeEnumTagSinglePayload(v172, 1, 1, v173);
        uint64_t v174 = *((int *)v73 + 9);
        OUTLINED_FUNCTION_42_9(0xD000000000000017);
        outlined init with take of EagerResolutionService?(v165, v175, &demangling cache variable for type metadata for URL?);
        outlined consume of Data._Representation(v229, v230);
        uint64_t v229 = 0;
        *(void *)(v10 + *((int *)v73 + 6)) = v121;
        uint64_t v176 = (void *)(v10 + *((int *)v73 + 7));
        *uint64_t v176 = 0;
        v176[1] = 0;
        *(_OWORD *)(v10 + v174) = xmmword_258665BD0;
        unint64_t v230 = 0xC000000000000000;
        break;
      default:
        if (v214)
        {
LABEL_52:
          uint64_t v136 = (void *)Logger.logObject.getter();
          os_log_type_t v137 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_63_5(v137))
          {
            *(_WORD *)OUTLINED_FUNCTION_55() = 0;
            OUTLINED_FUNCTION_50_12(&dword_257DC6000, v138, v139, "Construct CAT dialog for PQA disambiguation");
            OUTLINED_FUNCTION_34();
          }

          if (one-time initialization token for catTemplateDirectoryURL != -1) {
            swift_once();
          }
          uint64_t v140 = type metadata accessor for URL();
          __swift_project_value_buffer(v140, (uint64_t)static SearchToolIntentController.catTemplateDirectoryURL);
          OUTLINED_FUNCTION_1_0();
          uint64_t v141 = OUTLINED_FUNCTION_21_16();
          v142(v141);
          OUTLINED_FUNCTION_34_13();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, _IntentValue & Sendable)>);
          uint64_t v73 = (uint64_t *)swift_allocObject();
          *((_OWORD *)v73 + 1) = xmmword_258661700;
          v73[4] = 0xD000000000000011;
          v73[5] = 0x8000000258680910;
          v73[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchCATEntity]);
          v73[10] = lazy protocol witness table accessor for type [SearchCATEntity] and conformance <A> [A]();
          v73[6] = v123;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IntentValue & Sendable);
          Dictionary.init(dictionaryLiteral:)();
          uint64_t v143 = OUTLINED_FUNCTION_25_15();
          OUTLINED_FUNCTION_25_7(v143);
          uint64_t v144 = *((int *)v73 + 9);
          OUTLINED_FUNCTION_42_9(0xD00000000000001BLL);
          outlined init with take of EagerResolutionService?(v119, v145, &demangling cache variable for type metadata for URL?);
          OUTLINED_FUNCTION_52_8();
          *(_OWORD *)(v10 + v144) = xmmword_258665BD0;
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v177 = (void *)Logger.logObject.getter();
          os_log_type_t v178 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_51_1(v178))
          {
            uint64_t v179 = (_WORD *)OUTLINED_FUNCTION_55();
            OUTLINED_FUNCTION_67_0(v179);
            OUTLINED_FUNCTION_56(&dword_257DC6000, v180, v181, "Use disambiguation dialog from AS");
            OUTLINED_FUNCTION_34();
          }

          uint64_t v73 = (uint64_t *)type metadata accessor for DialogData(0);
          uint64_t v182 = type metadata accessor for URL();
          OUTLINED_FUNCTION_25_7(v182);
          uint64_t v183 = type metadata accessor for _SpeakableString();
          OUTLINED_FUNCTION_25_7(v183);
          OUTLINED_FUNCTION_60_6();
          *long long v184 = v212;
          v184[1] = v122;
          *(_OWORD *)(v10 + v185) = xmmword_258665BD0;
          swift_bridgeObjectRetain();
        }
        break;
    }
    goto LABEL_71;
  }
  uint64_t v83 = *(void *)(v59 - 8);
  unint64_t v84 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
  swift_bridgeObjectRetain();
  uint64_t v85 = *(void *)(v83 + 72);
  unint64_t v86 = v84 + 64;
  uint64_t v0 = 1;
  uint64_t v52 = &demangling cache variable for type metadata for AnswerMetadata?;
  while (1)
  {
    EntityProperty.wrappedValue.getter();
    outlined init with take of EagerResolutionService?((uint64_t)&v239, (uint64_t)v240, &demangling cache variable for type metadata for AnswerMetadata?);
    outlined init with take of EagerResolutionService?((uint64_t)v240, (uint64_t)v241, &demangling cache variable for type metadata for AnswerMetadata?);
    OUTLINED_FUNCTION_62_4(v241);
    if (v80)
    {
      uint64_t v52 = v237;
      outlined init with take of EagerResolutionService?((uint64_t)v240, (uint64_t)v237, &demangling cache variable for type metadata for AnswerMetadata?);
      outlined init with take of EagerResolutionService?((uint64_t)v242, (uint64_t)&v238, &demangling cache variable for type metadata for AnswerMetadata?);
      outlined retain of AnswerMetadata((uint64_t)v243);
      outlined release of (AnswerMetadata?, AnswerMetadata?)((uint64_t)v237);
      goto LABEL_40;
    }
    outlined init with take of EagerResolutionService?((uint64_t)v240, (uint64_t)v235, &demangling cache variable for type metadata for AnswerMetadata?);
    memcpy(v234, v243, sizeof(v234));
    outlined init with take of EagerResolutionService?((uint64_t)v240, (uint64_t)v236, &demangling cache variable for type metadata for AnswerMetadata?);
    outlined retain of AnswerMetadata((uint64_t)v236);
    uint64_t v79 = static AnswerMetadata.== infix(_:_:)(v235, v234);
    memcpy(v237, v235, sizeof(v237));
    outlined release of AnswerMetadata((uint64_t)v237);
    outlined release of AnswerMetadata?((uint64_t)v240);
    if ((v79 & 1) == 0) {
      goto LABEL_40;
    }
    if (v58 == v0) {
      break;
    }
    v86 += v85;
    if (__OFADD__(v0++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRelease();
  outlined retain of AnswerMetadata((uint64_t)v243);
  EntityProperty.wrappedValue.getter();
  outlined release of AnswerMetadata?((uint64_t)v242);
  uint64_t v52 = (uint64_t *)v235[1];
  if (!v235[1]) {
    goto LABEL_41;
  }
  if (v214)
  {
LABEL_40:
    swift_bridgeObjectRelease();
LABEL_41:
    outlined release of AnswerMetadata?((uint64_t)v242);
    goto LABEL_42;
  }
  uint64_t v186 = v235[0];
  swift_bridgeObjectRetain_n();
  long long v187 = (void *)Logger.logObject.getter();
  os_log_type_t v188 = static os_log_type_t.debug.getter();
  BOOL v189 = OUTLINED_FUNCTION_26_15(v188);
  uint64_t v212 = v186;
  if (v189)
  {
    uint64_t v190 = (_DWORD *)OUTLINED_FUNCTION_14_1();
    v235[0] = OUTLINED_FUNCTION_13_1();
    *uint64_t v190 = 136315138;
    uint64_t v227 = (uint64_t)(v190 + 1);
    swift_bridgeObjectRetain();
    v234[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v186, (unint64_t)v52, v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_94_6(&dword_257DC6000, v191, v192, "Passing through AS-generated dialog: \"%s\"");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v193 = (uint64_t *)v211[0];
  specialized EntityCardBuilding.cardForSearchResults(_:)();
  long long v195 = v194;
  if (!v194) {
    goto LABEL_84;
  }
  SFCard.snippetPluginModel.getter(v193);
  OUTLINED_FUNCTION_53_2((uint64_t)v193, 1, v53);
  if (v80)
  {
    outlined destroy of EagerResolutionService?((uint64_t)v193, &demangling cache variable for type metadata for RGPluginModel?);
LABEL_84:
    uint64_t v227 = 0;
    unint64_t v196 = 0xC000000000000000;
    goto LABEL_91;
  }
  _s10OmniSearch0B6ResultVACSEAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RGPluginModel and conformance RGPluginModel, MEMORY[0x263F4C1E0]);
  uint64_t v197 = SnippetPluginModel.data.getter();
  unint64_t v199 = v198;
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_16_1();
  v200();
  if (v199 >> 60 == 15) {
    uint64_t v201 = 0;
  }
  else {
    uint64_t v201 = v197;
  }
  uint64_t v227 = v201;
  if (v199 >> 60 == 15) {
    unint64_t v196 = 0xC000000000000000;
  }
  else {
    unint64_t v196 = v199;
  }
LABEL_91:
  outlined consume of Data._Representation(v229, v230);
  v235[0] = v212;
  v235[1] = (uint64_t)v52;
  v234[0] = 10794;
  v234[1] = 0xE200000000000000;
  uint64_t v232 = 0;
  unint64_t v233 = 0xE000000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v73 = v235;
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  LocalizedStringResource.init(stringLiteral:)();
  swift_bridgeObjectRetain();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_106_5();
  uint64_t v203 = v10 + v202;
  _SpeakableString.init(spoken:printed:)();

  outlined release of AnswerMetadata?((uint64_t)v242);
  uint64_t v204 = v10 + SHIDWORD(v235[2]);
  uint64_t v205 = type metadata accessor for URL();
  OUTLINED_FUNCTION_32(v204, v206, v207, v205);
  uint64_t v208 = type metadata accessor for _SpeakableString();
  __swift_storeEnumTagSinglePayload(v203, 0, 1, v208);
  OUTLINED_FUNCTION_60_6();
  void *v209 = 0;
  v209[1] = 0;
  *(_OWORD *)(v10 + v210) = xmmword_258665BD0;
  uint64_t v229 = v227;
  unint64_t v230 = v196;
LABEL_38:
  uint64_t v78 = v223;
LABEL_71:
  SearchToolIntentController.checkForRGOverride(query:response:results:systemContext:)();

  swift_bridgeObjectRelease();
  type metadata accessor for DialogData(0);
  OUTLINED_FUNCTION_53_2(v78, 1, (uint64_t)v73);
  if (v80)
  {
    outlined destroy of EagerResolutionService?(v78, &demangling cache variable for type metadata for DialogData?);
  }
  else
  {
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v10, (void (*)(void))type metadata accessor for DialogData);
    outlined init with take of AssistantSystemContext(v78, v10, (void (*)(void))type metadata accessor for DialogData);
  }
  OUTLINED_FUNCTION_119_0();
}

void SearchEntity.globalPassthroughResults(removeWebSearchPunchout:)()
{
  OUTLINED_FUNCTION_104_0();
  int v225 = v2;
  uint64_t v222 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RGPluginModel?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_184_0();
  uint64_t v205 = v6;
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_185_0();
  uint64_t v203 = v9;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_27_10();
  uint64_t v215 = v11;
  uint64_t v207 = type metadata accessor for _SpeakableString();
  OUTLINED_FUNCTION_0_10();
  uint64_t v206 = v12;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_184_0();
  uint64_t v204 = v14;
  OUTLINED_FUNCTION_26_8();
  uint64_t v221 = type metadata accessor for SearchGlobalEntity();
  OUTLINED_FUNCTION_0_10();
  uint64_t v202 = v15;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_184_0();
  uint64_t v18 = OUTLINED_FUNCTION_122_2(v17);
  uint64_t v217 = type metadata accessor for SearchEntity(v18);
  OUTLINED_FUNCTION_1_0();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_184_0();
  uint64_t v210 = v20;
  OUTLINED_FUNCTION_26_8();
  uint64_t v214 = type metadata accessor for Searchfoundation_Card();
  OUTLINED_FUNCTION_0_10();
  uint64_t v209 = v21;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_185_0();
  uint64_t v212 = v23;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_27_10();
  uint64_t v208 = v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  uint64_t v27 = OUTLINED_FUNCTION_81(v26);
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_184_0();
  uint64_t v218 = v28;
  OUTLINED_FUNCTION_26_8();
  uint64_t v228 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  OUTLINED_FUNCTION_0_10();
  uint64_t v216 = v29;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_184_0();
  uint64_t v227 = v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
  uint64_t v33 = OUTLINED_FUNCTION_81(v32);
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_185_0();
  uint64_t v226 = v34;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_27_10();
  uint64_t v211 = v36;
  OUTLINED_FUNCTION_26_8();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  OUTLINED_FUNCTION_0_10();
  uint64_t v219 = v38;
  uint64_t v220 = v37;
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_185_0();
  uint64_t v223 = v39;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v40);
  uint64_t v224 = (char *)&v192 - v41;
  OUTLINED_FUNCTION_113_1();
  uint64_t v43 = MEMORY[0x270FA5388](v42);
  os_log_type_t v45 = (char *)&v192 - v44;
  MEMORY[0x270FA5388](v43);
  uint64_t v47 = (char *)&v192 - v46;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchGlobalEntity?);
  uint64_t v49 = OUTLINED_FUNCTION_81(v48);
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_27_15();
  MEMORY[0x270FA5388](v50);
  uint64_t v52 = (char *)&v192 - v51;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlobalDialog?);
  uint64_t v54 = OUTLINED_FUNCTION_81(v53);
  MEMORY[0x270FA5388](v54);
  OUTLINED_FUNCTION_15();
  uint64_t v57 = v56 - v55;
  uint64_t v58 = type metadata accessor for GlobalDialog();
  OUTLINED_FUNCTION_0_10();
  uint64_t v60 = v59;
  MEMORY[0x270FA5388](v61);
  OUTLINED_FUNCTION_15();
  uint64_t v64 = v63 - v62;
  EntityProperty.wrappedValue.getter();
  uint64_t v65 = OUTLINED_FUNCTION_82_4();
  if (!__swift_getEnumTagSinglePayload(v65, v66, v67))
  {
    int v213 = v45;
    uint64_t v195 = v1;
    uint64_t v197 = v0;
    uint64_t v198 = v64;
    uint64_t v199 = v60;
    unint64_t v196 = v47;
    SearchGlobalEntity.dialog.getter();
    outlined destroy of EagerResolutionService?((uint64_t)v52, &demangling cache variable for type metadata for SearchGlobalEntity?);
    OUTLINED_FUNCTION_53_2(v57, 1, v58);
    if (v71) {
      goto LABEL_5;
    }
    uint64_t v76 = v199;
    uint64_t v77 = v198;
    OUTLINED_FUNCTION_58_1();
    v78();
    _s10OmniSearch0B6ResultVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SearchEntity and conformance SearchEntity, (void (*)(uint64_t))type metadata accessor for SearchEntity);
    unint64_t v79 = ExperienceProviding.experiences.getter();
    unint64_t v80 = v79;
    if (v79 >> 62) {
      uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v81 = *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v82 = v220;
    uint64_t v83 = (uint64_t)v218;
    if (v81)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v80 & 0xC000000000000001) == 0, v80);
      if ((v80 & 0xC000000000000001) != 0) {
        id v84 = (id)MEMORY[0x25A2C8550](0, v80);
      }
      else {
        id v84 = *(id *)(v80 + 32);
      }
      uint64_t v85 = v84;
      swift_bridgeObjectRelease();
      type metadata accessor for GenericExperience();
      uint64_t v86 = swift_dynamicCastClass();
      uint64_t v87 = v214;
      if (v86)
      {
        uint64_t v194 = v58;
        uint64_t v88 = GenericExperience.components.getter();
        uint64_t v89 = *(void *)(v88 + 16);
        if (v89)
        {
          uint64_t v193 = v85;
          uint64_t v90 = v216 + 16;
          uint64_t v218 = *(void (**)(uint64_t, unint64_t, uint64_t))(v216 + 16);
          unint64_t v91 = (*(unsigned __int8 *)(v216 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80);
          uint64_t v192 = v88;
          unint64_t v92 = v88 + v91;
          uint64_t v217 = *(void *)(v216 + 72);
          int v200 = *MEMORY[0x263F5CF08];
          uint64_t v93 = (void (**)(uint64_t))(v219 + 32);
          v216 += 8;
          uint64_t v94 = MEMORY[0x263F8EE78];
          char v95 = v225;
          uint64_t v96 = v227;
          do
          {
            uint64_t v97 = v90;
            v218(v96, v92, v228);
            Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
            uint64_t v98 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
            OUTLINED_FUNCTION_53_2(v83, 1, v98);
            if (v71)
            {
              outlined destroy of EagerResolutionService?(v83, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
              uint64_t v99 = 1;
            }
            else
            {
              OUTLINED_FUNCTION_0_10();
              uint64_t v102 = v101;
              int v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 88))(v83, v98);
              if (v103 == v200)
              {
                (*(void (**)(uint64_t, uint64_t))(v102 + 96))(v83, v98);
                uint64_t v104 = *v93;
                OUTLINED_FUNCTION_117_2();
                OUTLINED_FUNCTION_43_13();
                v104(v105);
                OUTLINED_FUNCTION_43_13();
                v104(v106);
                uint64_t v99 = 0;
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v83, v98);
                uint64_t v99 = 1;
              }
              char v95 = v225;
            }
            uint64_t v107 = v226;
            __swift_storeEnumTagSinglePayload(v226, v99, 1, v82);
            uint64_t v96 = v227;
            OUTLINED_FUNCTION_16_1();
            v109(v108);
            OUTLINED_FUNCTION_53_2(v107, 1, v82);
            if (v71)
            {
              outlined destroy of EagerResolutionService?(v107, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
            }
            else
            {
              uint64_t v110 = *v93;
              OUTLINED_FUNCTION_19_0();
              OUTLINED_FUNCTION_43_13();
              v110(v111);
              OUTLINED_FUNCTION_43_13();
              v110(v112);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                char v117 = OUTLINED_FUNCTION_115();
                uint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v117, v118, v119, v94);
              }
              unint64_t v115 = *(void *)(v94 + 16);
              unint64_t v114 = *(void *)(v94 + 24);
              if (v115 >= v114 >> 1)
              {
                char v120 = OUTLINED_FUNCTION_51_5(v114);
                uint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v120, v115 + 1, 1, v94);
              }
              *(void *)(v94 + 16) = v115 + 1;
              OUTLINED_FUNCTION_46_8();
              uint64_t v82 = v220;
              OUTLINED_FUNCTION_43_13();
              v110(v116);
              char v95 = v225;
              uint64_t v96 = v227;
            }
            v92 += v217;
            --v89;
            uint64_t v90 = v97;
          }
          while (v89);
          swift_bridgeObjectRelease();
          uint64_t v121 = v222;
          uint64_t v87 = v214;
          uint64_t v85 = v193;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v94 = MEMORY[0x263F8EE78];
          char v95 = v225;
          uint64_t v121 = v222;
        }
        uint64_t v122 = v211;
        specialized Collection.first.getter(v94, v211);
        swift_bridgeObjectRelease();
        uint64_t v123 = OUTLINED_FUNCTION_82_4();
        OUTLINED_FUNCTION_53_2(v123, v124, v82);
        uint64_t v125 = v212;
        if (v71)
        {
          OUTLINED_FUNCTION_16_1();
          v127(v126);

          outlined destroy of EagerResolutionService?(v122, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent?);
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, speakableString: _SpeakableString));
          uint64_t v75 = v121;
          goto LABEL_7;
        }
        uint64_t v128 = v121;
        OUTLINED_FUNCTION_58_1();
        v130(v129);
        uint64_t v131 = v208;
        static GlobalSearchResponseProcessor.makeCard(layoutSnippet:)();
        uint64_t v132 = v210;
        _s10OmniSearch22AssistantSystemContextVWOcTm_0(v197, v210, (void (*)(void))type metadata accessor for SearchEntity);
        if ((v95 & 1) == 0)
        {
          _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v132, (void (*)(void))type metadata accessor for SearchEntity);
          uint64_t v133 = v209;
          uint64_t v139 = v128;
          uint64_t v140 = v131;
          goto LABEL_55;
        }
        uint64_t v133 = v209;
        if (one-time initialization token for webDomains != -1) {
          swift_once();
        }
        uint64_t v134 = static GlobalSearchClient.webDomains;
        uint64_t v135 = v195;
        EntityProperty.wrappedValue.getter();
        uint64_t v136 = v221;
        if (__swift_getEnumTagSinglePayload(v135, 1, v221))
        {
          outlined destroy of EagerResolutionService?(v135, &demangling cache variable for type metadata for SearchGlobalEntity?);
        }
        else
        {
          uint64_t v141 = v202;
          uint64_t v142 = v135;
          uint64_t v143 = v201;
          OUTLINED_FUNCTION_64_0();
          v145(v144);
          outlined destroy of EagerResolutionService?(v142, &demangling cache variable for type metadata for SearchGlobalEntity?);
          uint64_t v146 = SearchGlobalEntity.domain.getter();
          uint64_t v147 = v136;
          uint64_t v137 = v146;
          uint64_t v138 = v148;
          (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v143, v147);
          uint64_t v133 = v209;
          if (v138)
          {
LABEL_49:
            uint64_t v140 = v131;
            specialized Set.contains(_:)(v137, v138, v134);
            char v150 = v149;
            swift_bridgeObjectRelease();
            uint64_t v151 = _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v210, (void (*)(void))type metadata accessor for SearchEntity);
            uint64_t v139 = v222;
            if (v150)
            {
              MEMORY[0x270FA5388](v151);
              *(&v192 - 2) = v131;
              _s10OmniSearch0B6ResultVACSEAAWlTm_0(&lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card, MEMORY[0x263F5CB50]);
              static Message.with(_:)();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v133 + 40))(v131, v125, v87);
              if (one-time initialization token for stextension != -1) {
                swift_once();
              }
              uint64_t v152 = type metadata accessor for Logger();
              unint64_t v153 = (void *)OUTLINED_FUNCTION_43_1(v152, (uint64_t)static Logging.stextension);
              os_log_type_t v154 = static os_log_type_t.info.getter();
              BOOL v155 = OUTLINED_FUNCTION_51_1(v154);
              uint64_t v87 = v214;
              if (v155)
              {
                uint64_t v156 = (_WORD *)OUTLINED_FUNCTION_55();
                OUTLINED_FUNCTION_67_0(v156);
                OUTLINED_FUNCTION_56(&dword_257DC6000, v157, v158, "Stripped web search punchout button");
                OUTLINED_FUNCTION_34();
              }

              uint64_t v139 = v222;
            }
LABEL_55:
            id v159 = static GlobalSearchResponseProcessor.makeSFCard(card:)();
            if (!v159)
            {

              OUTLINED_FUNCTION_16_1();
              v171(v170);
              OUTLINED_FUNCTION_16_1();
              v173(v172);
              uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, speakableString: _SpeakableString));
              OUTLINED_FUNCTION_32(v139, v175, v176, v174);
              (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v140, v87);
              goto LABEL_8;
            }
            os_log_type_t v160 = v159;
            long long v161 = (void *)v139;
            GlobalDialog.speak.getter();
            LocalizedStringResource.init(stringLiteral:)();
            GlobalDialog.print.getter();
            LocalizedStringResource.init(stringLiteral:)();
            uint64_t v162 = v204;
            _SpeakableString.init(spoken:printed:)();
            uint64_t v163 = v205;
            SFCard.snippetPluginModel.getter(v205);
            uint64_t v164 = type metadata accessor for RGPluginModel();
            OUTLINED_FUNCTION_53_2((uint64_t)v163, 1, v164);
            if (v71)
            {

              OUTLINED_FUNCTION_16_1();
              v166(v165);
              OUTLINED_FUNCTION_16_1();
              v168(v167);
              outlined destroy of EagerResolutionService?((uint64_t)v163, &demangling cache variable for type metadata for RGPluginModel?);
              uint64_t v169 = v206;
            }
            else
            {
              _s10OmniSearch0B6ResultVACSEAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RGPluginModel and conformance RGPluginModel, MEMORY[0x263F4C1E0]);
              uint64_t v177 = SnippetPluginModel.data.getter();
              unint64_t v179 = v178;

              OUTLINED_FUNCTION_16_1();
              v181(v180);
              OUTLINED_FUNCTION_16_1();
              v183(v182);
              OUTLINED_FUNCTION_1_0();
              OUTLINED_FUNCTION_16_1();
              v185(v184);
              uint64_t v169 = v206;
              if (v179 >> 60 != 15)
              {
                BOOL v189 = (char *)v161
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, speakableString: _SpeakableString))
                              + 48);
                *long long v161 = v177;
                v161[1] = v179;
                (*(void (**)(char *, uint64_t, uint64_t))(v169 + 32))(v189, v162, v207);
                OUTLINED_FUNCTION_74_5((uint64_t)v161);
                OUTLINED_FUNCTION_71_5();
                goto LABEL_63;
              }
            }
            (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v162, v207);
            uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, speakableString: _SpeakableString));
            OUTLINED_FUNCTION_32((uint64_t)v161, v187, v188, v186);
            OUTLINED_FUNCTION_71_5();
LABEL_63:
            OUTLINED_FUNCTION_16_1();
            v191(v190);
            goto LABEL_8;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v137 = 0;
        uint64_t v138 = 0xE000000000000000;
        goto LABEL_49;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v77, v58);
    goto LABEL_6;
  }
  outlined destroy of EagerResolutionService?((uint64_t)v52, &demangling cache variable for type metadata for SearchGlobalEntity?);
  OUTLINED_FUNCTION_46_1();
  __swift_storeEnumTagSinglePayload(v68, v69, v70, v58);
LABEL_5:
  outlined destroy of EagerResolutionService?(v57, &demangling cache variable for type metadata for GlobalDialog?);
LABEL_6:
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (snippetModel: Data, speakableString: _SpeakableString));
  uint64_t v75 = v222;
LABEL_7:
  OUTLINED_FUNCTION_32(v75, v72, v73, v74);
LABEL_8:
  OUTLINED_FUNCTION_119_0();
}

void SearchToolIntentController.checkForRGOverride(query:response:results:systemContext:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v225 = v0;
  uint64_t v221 = v1;
  uint64_t v228 = v2;
  uint64_t v229 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v230 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_184_0();
  uint64_t v205 = v11;
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  uint64_t v13 = OUTLINED_FUNCTION_81(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_185_0();
  uint64_t v208 = v14;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_27_10();
  OUTLINED_FUNCTION_122_2(v16);
  uint64_t v17 = type metadata accessor for _SpeakableString();
  OUTLINED_FUNCTION_0_10();
  uint64_t v210 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_184_0();
  uint64_t v209 = v20;
  OUTLINED_FUNCTION_26_8();
  uint64_t v207 = type metadata accessor for ResponseDialog();
  OUTLINED_FUNCTION_0_10();
  uint64_t v214 = v21;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_185_0();
  uint64_t v206 = v23;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_27_10();
  uint64_t v213 = v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseOverrideDialog?);
  uint64_t v27 = OUTLINED_FUNCTION_81(v26);
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_184_0();
  uint64_t v222 = v28;
  OUTLINED_FUNCTION_26_8();
  uint64_t v227 = type metadata accessor for ResponseOverrideDialog();
  OUTLINED_FUNCTION_0_10();
  uint64_t v30 = v29;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_185_0();
  uint64_t v204 = v32;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v33);
  uint64_t v212 = (char *)&v193 - v34;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v35);
  uint64_t v215 = (char *)&v193 - v36;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_27_10();
  uint64_t v216 = v38;
  uint64_t v39 = type metadata accessor for SearchEntity(0);
  OUTLINED_FUNCTION_0_10();
  uint64_t v217 = v40;
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = (char *)&v193 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for ResponseOverride();
  OUTLINED_FUNCTION_0_10();
  uint64_t v46 = v45;
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_185_0();
  uint64_t v211 = v48;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_27_10();
  uint64_t v224 = v50;
  OUTLINED_FUNCTION_26_8();
  type metadata accessor for ResponseOverrideInput();
  OUTLINED_FUNCTION_0_10();
  uint64_t v219 = v52;
  uint64_t v220 = v51;
  MEMORY[0x270FA5388](v51);
  OUTLINED_FUNCTION_184_0();
  uint64_t v218 = v53;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseOverride?);
  uint64_t v55 = OUTLINED_FUNCTION_81(v54);
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_185_0();
  uint64_t v226 = v56;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v57);
  OUTLINED_FUNCTION_27_10();
  uint64_t v223 = v58;
  OUTLINED_FUNCTION_26_8();
  uint64_t v59 = type metadata accessor for Locale();
  uint64_t v60 = OUTLINED_FUNCTION_81(v59);
  MEMORY[0x270FA5388](v60);
  OUTLINED_FUNCTION_16();
  type metadata accessor for FeatureFlagService();
  swift_initStackObject();
  if (!FeatureFlagService.isEnabled(_:)(OmniSearch_FeatureFlagService_FeatureFlag_responseOverride))
  {
    if (one-time initialization token for stextension != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    uint64_t v75 = OUTLINED_FUNCTION_43_1(v74, (uint64_t)static Logging.stextension);
    os_log_type_t v76 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (_WORD *)OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_130_0(v77);
      OUTLINED_FUNCTION_99_3(&dword_257DC6000, v78, v79, "Response override FF is disabled, skipping checks");
      OUTLINED_FUNCTION_34();
    }

    OUTLINED_FUNCTION_107_5();
    goto LABEL_32;
  }
  uint64_t v202 = v7;
  uint64_t v203 = v5;
  uint64_t v197 = v17;
  if (one-time initialization token for stextension != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v62 = __swift_project_value_buffer(v61, (uint64_t)static Logging.stextension);
  uint64_t v63 = v229;
  swift_bridgeObjectRetain_n();
  unint64_t v64 = v228;
  swift_bridgeObjectRetain_n();
  uint64_t v201 = v62;
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  BOOL v67 = os_log_type_enabled(v65, v66);
  uint64_t v200 = v30;
  uint64_t v198 = v44;
  uint64_t v199 = v46;
  if (v67)
  {
    uint64_t v68 = OUTLINED_FUNCTION_83_2();
    v232[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v202, v64, v232);
    OUTLINED_FUNCTION_79_4(v69);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v68 + 12) = 2080;
    v231[0] = v203;
    v231[1] = v63;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v70 = String.init<A>(describing:)();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v232);
    OUTLINED_FUNCTION_79_4(v72);
    swift_bridgeObjectRelease_n();
    uint64_t v73 = v227;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257DC6000, v65, v66, "Checking for response override with query %s and response %s", (uint8_t *)v68, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v73 = v227;
  }
  uint64_t v80 = (uint64_t)v226;
  if (!*(void *)(v225 + *(int *)(type metadata accessor for AssistantSystemContext(0) + 20) + 8))
  {
    type metadata accessor for NSUserDefaults();
    static NSUserDefaults.fallbackLocale.getter();
  }
  swift_bridgeObjectRetain();
  Locale.init(identifier:)();
  type metadata accessor for ResponseOverrideMatcher();
  swift_allocObject();
  uint64_t v81 = ResponseOverrideMatcher.init(locale:)();
  uint64_t v82 = one-time initialization token for deviceClass;
  swift_retain();
  if (v82 != -1) {
    swift_once();
  }
  uint64_t v83 = MobileGestalt.DeviceClass.rawValue.getter(static MobileGestalt.deviceClass);
  uint64_t v225 = v84;
  uint64_t v196 = static MobileGestalt.deviceType.getter();
  uint64_t v195 = v85;
  uint64_t v86 = v221;
  uint64_t v87 = *(void *)(v221 + 16);
  if (v87)
  {
    uint64_t v193 = v83;
    uint64_t v194 = v81;
    v231[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_46_8();
    uint64_t v89 = v86 + v88;
    uint64_t v91 = *(void *)(v90 + 72);
    uint64_t v92 = v231[0];
    do
    {
      _s10OmniSearch22AssistantSystemContextVWOcTm_0(v89, (uint64_t)v43, (void (*)(void))type metadata accessor for SearchEntity);
      uint64_t v93 = &v43[*(int *)(v39 + 88)];
      uint64_t v94 = *(void *)v93;
      uint64_t v95 = *((void *)v93 + 1);
      swift_bridgeObjectRetain();
      _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v43, (void (*)(void))type metadata accessor for SearchEntity);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_115();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v92 = v231[0];
      }
      unint64_t v97 = *(void *)(v92 + 16);
      unint64_t v96 = *(void *)(v92 + 24);
      if (v97 >= v96 >> 1)
      {
        OUTLINED_FUNCTION_51_5(v96);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v92 = v231[0];
      }
      *(void *)(v92 + 16) = v97 + 1;
      uint64_t v98 = v92 + 16 * v97;
      *(void *)(v98 + 32) = v94;
      *(void *)(v98 + 40) = v95;
      v89 += v91;
      --v87;
    }
    while (v87);
    uint64_t v80 = (uint64_t)v226;
    uint64_t v73 = v227;
    uint64_t v81 = v194;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ResponseOverrideInput.init(utterance:response:interfaceIdiom:deviceType:customEntityDescriptions:)();
  uint64_t v99 = v223;
  dispatch thunk of ResponseOverrideMatcher.match(_:)();
  swift_release();
  OUTLINED_FUNCTION_16_1();
  v100();
  outlined init with copy of StructuredQueryEntity?(v99, v80, &demangling cache variable for type metadata for ResponseOverride?);
  OUTLINED_FUNCTION_53_2(v80, 1, v198);
  uint64_t v101 = v199;
  uint64_t v102 = v222;
  if (v106)
  {
    outlined destroy of EagerResolutionService?(v99, &demangling cache variable for type metadata for ResponseOverride?);
    swift_release();
    uint64_t v103 = v80;
    uint64_t v104 = &demangling cache variable for type metadata for ResponseOverride?;
LABEL_30:
    outlined destroy of EagerResolutionService?(v103, v104);
LABEL_31:
    OUTLINED_FUNCTION_107_5();
LABEL_32:
    OUTLINED_FUNCTION_46_1();
    goto LABEL_33;
  }
  OUTLINED_FUNCTION_58_1();
  v105();
  ResponseOverride.dialog.getter();
  OUTLINED_FUNCTION_53_2(v102, 1, v73);
  if (v106)
  {
    swift_release();
    uint64_t v107 = OUTLINED_FUNCTION_208();
    v108(v107);
    outlined destroy of EagerResolutionService?(v99, &demangling cache variable for type metadata for ResponseOverride?);
    uint64_t v104 = &demangling cache variable for type metadata for ResponseOverrideDialog?;
    uint64_t v103 = v102;
    goto LABEL_30;
  }
  uint64_t v194 = v81;
  OUTLINED_FUNCTION_58_1();
  v113();
  OUTLINED_FUNCTION_64_0();
  v114();
  unint64_t v115 = OUTLINED_FUNCTION_120_4();
  os_log_type_t v116 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v115, v116))
  {
    uint64_t v118 = (uint8_t *)OUTLINED_FUNCTION_14_1();
    v231[0] = OUTLINED_FUNCTION_13_1();
    *(_DWORD *)uint64_t v118 = 136315138;
    uint64_t v119 = ResponseOverride.identifier.getter();
    uint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v120, v231);
    OUTLINED_FUNCTION_86_4(v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v122 = OUTLINED_FUNCTION_69_6(v199);
    v123(v122);
    _os_log_impl(&dword_257DC6000, v115, v116, "Response override with identifier %s matched, ignoring all other dialogs", v118, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_34();
    OUTLINED_FUNCTION_34();
  }
  else
  {
    uint64_t v124 = OUTLINED_FUNCTION_69_6(v101);
    v125(v124);
  }

  uint64_t v126 = (uint64_t *)v215;
  uint64_t v127 = v212;
  uint64_t v128 = v200;
  uint64_t v129 = *(void (**)(void))(v200 + 16);
  uint64_t v130 = v216;
  OUTLINED_FUNCTION_109_3();
  v129();
  int v131 = (*(uint64_t (**)(uint64_t *, uint64_t))(v128 + 88))(v126, v73);
  if (v131 == *MEMORY[0x263F4CAF8])
  {
    uint64_t v132 = OUTLINED_FUNCTION_55_8();
    v133(v132);
    uint64_t v134 = v207;
    OUTLINED_FUNCTION_58_1();
    v135();
    ResponseDialog.fullSpeak.getter();
    uint64_t v137 = v136;
    uint64_t v138 = v206;
    OUTLINED_FUNCTION_64_0();
    v139();
    uint64_t v140 = v197;
    if (!v137) {
      ResponseDialog.fullPrint.getter();
    }
    uint64_t v141 = *(void (**)(uint64_t, uint64_t))(v214 + 8);
    v141(v138, v134);
    OUTLINED_FUNCTION_79_0();
    LocalizedStringResource.init(stringLiteral:)();
    uint64_t v142 = v213;
    ResponseDialog.fullPrint.getter();
    LocalizedStringResource.init(stringLiteral:)();
    _SpeakableString.init(spoken:printed:)();
    OUTLINED_FUNCTION_75_3();
    v141(v142, v134);
    OUTLINED_FUNCTION_16_1();
    v143();
    uint64_t v144 = OUTLINED_FUNCTION_7_19();
    v145(v144);
    outlined destroy of EagerResolutionService?(v223, &demangling cache variable for type metadata for ResponseOverride?);
    uint64_t v146 = (int *)type metadata accessor for DialogData(0);
    uint64_t v147 = v230;
    uint64_t v148 = (uint64_t)v230 + v146[5];
    uint64_t v149 = type metadata accessor for URL();
    OUTLINED_FUNCTION_32(v148, v150, v151, v149);
    uint64_t v152 = (uint64_t)v147 + v146[8];
    uint64_t v153 = OUTLINED_FUNCTION_208();
    v154(v153);
    __swift_storeEnumTagSinglePayload(v152, 0, 1, v140);
    uint64_t v155 = v146[9];
    *uint64_t v147 = 0;
    v147[1] = 0;
    *(void *)((char *)v147 + v146[6]) = 0;
    uint64_t v156 = (void *)((char *)v147 + v146[7]);
    *uint64_t v156 = 0;
    v156[1] = 0;
    *(_OWORD *)((char *)v147 + v155) = xmmword_258665BD0;
    uint64_t v109 = (uint64_t)v147;
    uint64_t v110 = 0;
    uint64_t v111 = 1;
    uint64_t v112 = (uint64_t)v146;
    goto LABEL_33;
  }
  if (v131 != *MEMORY[0x263F4CB08])
  {
    if (v131 == *MEMORY[0x263F4CB00])
    {
      uint64_t v176 = OUTLINED_FUNCTION_120_4();
      os_log_type_t v177 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v176, v177))
      {
        unint64_t v178 = (_WORD *)OUTLINED_FUNCTION_55();
        OUTLINED_FUNCTION_130_0(v178);
        OUTLINED_FUNCTION_99_3(&dword_257DC6000, v179, v180, "Unexpected fallback type ResponseOverrideDialog");
        OUTLINED_FUNCTION_34();
      }

      OUTLINED_FUNCTION_75_3();
      OUTLINED_FUNCTION_16_1();
      v181();
      uint64_t v182 = OUTLINED_FUNCTION_7_19();
      v183(v182);
      outlined destroy of EagerResolutionService?(v223, &demangling cache variable for type metadata for ResponseOverride?);
    }
    else
    {
      OUTLINED_FUNCTION_109_3();
      v129();
      uint64_t v184 = OUTLINED_FUNCTION_120_4();
      os_log_type_t v185 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v184, v185))
      {
        uint64_t v186 = (uint8_t *)OUTLINED_FUNCTION_14_1();
        uint64_t v228 = OUTLINED_FUNCTION_13_1();
        v231[0] = v228;
        *(_DWORD *)uint64_t v186 = 136315138;
        uint64_t v226 = v186 + 4;
        ((void (*)(uint64_t, char *, uint64_t))v129)(v204, v127, v73);
        uint64_t v187 = String.init<A>(describing:)();
        uint64_t v189 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v187, v188, v231);
        OUTLINED_FUNCTION_86_4(v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v190 = *(void (**)(void))(v200 + 8);
        OUTLINED_FUNCTION_82_0();
        v190();
        _os_log_impl(&dword_257DC6000, v184, v185, "Unknown ResponseOverrideDialog type %s", v186, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_34();
        OUTLINED_FUNCTION_34();

        OUTLINED_FUNCTION_75_3();
        OUTLINED_FUNCTION_82_0();
        v190();
      }
      else
      {

        OUTLINED_FUNCTION_75_3();
        uint64_t v190 = *(void (**)(void))(v200 + 8);
        ((void (*)(char *, uint64_t))v190)(v127, v73);
        ((void (*)(uint64_t, uint64_t))v190)(v130, v73);
      }
      uint64_t v191 = OUTLINED_FUNCTION_7_19();
      v192(v191);
      outlined destroy of EagerResolutionService?(v223, &demangling cache variable for type metadata for ResponseOverride?);
      ((void (*)(char *, uint64_t))v190)(v215, v73);
    }
    goto LABEL_31;
  }
  uint64_t v157 = OUTLINED_FUNCTION_55_8();
  v158(v157);
  uint64_t v159 = *v126;
  uint64_t v160 = v126[1];
  uint64_t v161 = v128;
  if (one-time initialization token for catTemplateDirectoryURL != -1) {
    swift_once();
  }
  uint64_t v162 = type metadata accessor for URL();
  __swift_project_value_buffer(v162, (uint64_t)static SearchToolIntentController.catTemplateDirectoryURL);
  OUTLINED_FUNCTION_1_0();
  uint64_t v163 = v205;
  OUTLINED_FUNCTION_51_2();
  v164();
  OUTLINED_FUNCTION_74_5(v163);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IntentValue & Sendable);
  uint64_t v165 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_75_3();
  uint64_t v167 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
  uint64_t v166 = (int *)(v161 + 8);
  v167(v130, v73);
  uint64_t v168 = OUTLINED_FUNCTION_7_19();
  v169(v168);
  outlined destroy of EagerResolutionService?(v223, &demangling cache variable for type metadata for ResponseOverride?);
  OUTLINED_FUNCTION_106_5();
  uint64_t v170 = v230;
  OUTLINED_FUNCTION_46_1();
  __swift_storeEnumTagSinglePayload(v171, v172, v173, v197);
  uint64_t v174 = v166[9];
  *uint64_t v170 = v159;
  v170[1] = v160;
  outlined init with take of EagerResolutionService?(v163, (uint64_t)v170 + v166[5], &demangling cache variable for type metadata for URL?);
  *(void *)((char *)v170 + v166[6]) = v165;
  uint64_t v175 = (void *)((char *)v170 + v166[7]);
  *uint64_t v175 = 0;
  v175[1] = 0;
  *(_OWORD *)((char *)v170 + v174) = xmmword_258665BD0;
  uint64_t v109 = OUTLINED_FUNCTION_85_5();
LABEL_33:
  __swift_storeEnumTagSinglePayload(v109, v110, v111, v112);
  OUTLINED_FUNCTION_119_0();
}

void SearchToolIntentController.buildAttributionData(for:systemContext:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchResult?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SearchEntity(0);
  OUTLINED_FUNCTION_0_10();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  uint64_t v12 = v11 - v10;
  type metadata accessor for FeatureFlagService();
  swift_initStackObject();
  if (FeatureFlagService.isEnabled(_:)(OmniSearch_FeatureFlagService_FeatureFlag_attributionUI))
  {
    uint64_t v13 = *(void *)(v1 + 16);
    if (v13)
    {
      uint64_t v14 = v1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      uint64_t v15 = *(void *)(v8 + 72);
      v32[1] = v1;
      swift_bridgeObjectRetain();
      uint64_t v16 = v13 - 1;
      uint64_t v34 = v15;
      uint64_t v35 = MEMORY[0x263F8EE78];
      uint64_t v33 = v6;
      while (1)
      {
        _s10OmniSearch22AssistantSystemContextVWOcTm_0(v14, v12, (void (*)(void))type metadata accessor for SearchEntity);
        EntityProperty.wrappedValue.getter();
        outlined init with take of EagerResolutionService?((uint64_t)&v36, (uint64_t)v37, &demangling cache variable for type metadata for AnswerMetadata?);
        outlined release of AnswerMetadata?((uint64_t)v37);
        outlined init with take of EagerResolutionService?((uint64_t)v37, (uint64_t)v38, &demangling cache variable for type metadata for AnswerMetadata?);
        OUTLINED_FUNCTION_62_4(v38);
        if (v17) {
          goto LABEL_8;
        }
        outlined init with copy of StructuredQueryEntity?(v12 + *(int *)(v6 + 84), (uint64_t)v5, &demangling cache variable for type metadata for SearchResult?);
        uint64_t v18 = type metadata accessor for SearchResult(0);
        OUTLINED_FUNCTION_53_2((uint64_t)v5, 1, v18);
        if (v17) {
          break;
        }
        id v19 = *(id *)&v5[*(int *)(v18 + 20)];
        _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v5, (void (*)(void))type metadata accessor for SearchResult);
        uint64_t v20 = outlined bridged method (ob) of @objc CSSearchableItem.bundleID.getter(v19);
        uint64_t v22 = v21;
        _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v12, (void (*)(void))type metadata accessor for SearchEntity);
        if (v22)
        {
          uint64_t v23 = v35;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_115();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v23 = v29;
          }
          uint64_t v24 = v23;
          unint64_t v25 = *(void *)(v23 + 16);
          uint64_t v26 = v24;
          unint64_t v27 = *(void *)(v24 + 24);
          if (v25 >= v27 >> 1)
          {
            OUTLINED_FUNCTION_51_5(v27);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v26 = v30;
          }
          uint64_t v35 = v26;
          *(void *)(v26 + 16) = v25 + 1;
          unint64_t v28 = v26 + 16 * v25;
          *(void *)(v28 + 32) = v20;
          *(void *)(v28 + 40) = v22;
          uint64_t v6 = v33;
        }
        uint64_t v15 = v34;
        if (!v16)
        {
LABEL_19:
          swift_bridgeObjectRelease();
          uint64_t v31 = v35;
          goto LABEL_21;
        }
LABEL_17:
        --v16;
        v14 += v15;
      }
      outlined destroy of EagerResolutionService?((uint64_t)v5, &demangling cache variable for type metadata for SearchResult?);
LABEL_8:
      _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v12, (void (*)(void))type metadata accessor for SearchEntity);
      if (!v16) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    uint64_t v31 = MEMORY[0x263F8EE78];
LABEL_21:
    v38[0] = v31;
    lazy protocol witness table accessor for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel();
    SnippetPluginModel.data.getter();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_148();
  OUTLINED_FUNCTION_119_0();
}

void SearchToolIntentController.isHomogenousResults(searchCATEntities:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCATEntity?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_27_15();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = *(void *)(v2 + 16);
  if (v8 != 1)
  {
    specialized Collection.first.getter(v2, (uint64_t)&v27 - v6);
    uint64_t v9 = type metadata accessor for SearchCATEntity();
    OUTLINED_FUNCTION_53_2((uint64_t)v7, 1, v9);
    if (!v17)
    {
      EntityProperty.wrappedValue.getter();
      uint64_t v11 = v27;
      unint64_t v10 = v28;
      _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v7, (void (*)(void))type metadata accessor for SearchCATEntity);
      uint64_t v12 = HIBYTE(v10) & 0xF;
      if ((v10 & 0x2000000000000000) == 0) {
        uint64_t v12 = v11 & 0xFFFFFFFFFFFFLL;
      }
      if (v12)
      {
        if (v8)
        {
          OUTLINED_FUNCTION_30_15();
          unint64_t v14 = v2 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
          uint64_t v16 = *(void *)(v15 + 72);
          swift_bridgeObjectRetain();
          do
          {
            EntityProperty.wrappedValue.getter();
            BOOL v17 = v27 == v11 && v28 == v10;
            if (v17)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v18 = OUTLINED_FUNCTION_95_4();
              swift_bridgeObjectRelease();
              if ((v18 & 1) == 0) {
                goto LABEL_37;
              }
            }
            v14 += v16;
            --v8;
          }
          while (v8);
LABEL_33:
          swift_bridgeObjectRelease();
        }
        goto LABEL_35;
      }
LABEL_38:
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
    outlined destroy of EagerResolutionService?((uint64_t)v7, &demangling cache variable for type metadata for SearchCATEntity?);
    specialized Collection.first.getter(v2, v0);
    OUTLINED_FUNCTION_53_2(v0, 1, v9);
    if (v17)
    {
      outlined destroy of EagerResolutionService?(v0, &demangling cache variable for type metadata for SearchCATEntity?);
    }
    else
    {
      EntityProperty.wrappedValue.getter();
      uint64_t v20 = v27;
      unint64_t v19 = v28;
      _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v0, (void (*)(void))type metadata accessor for SearchCATEntity);
      if (v19)
      {
        if (!v8)
        {
LABEL_35:
          swift_bridgeObjectRelease();
          goto LABEL_39;
        }
        OUTLINED_FUNCTION_30_15();
        unint64_t v22 = v2 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
        uint64_t v24 = *(void *)(v23 + 72);
        swift_bridgeObjectRetain();
        while (1)
        {
          EntityProperty.wrappedValue.getter();
          if (!v28) {
            break;
          }
          if (v27 == v20 && v28 == v19)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v26 = OUTLINED_FUNCTION_95_4();
            swift_bridgeObjectRelease();
            if ((v26 & 1) == 0) {
              break;
            }
          }
          v22 += v24;
          if (!--v8) {
            goto LABEL_33;
          }
        }
LABEL_37:
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
    }
  }
LABEL_39:
  OUTLINED_FUNCTION_119_0();
}

uint64_t SearchToolIntentController.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  return v0;
}

uint64_t SearchToolIntentController.__deallocating_deinit()
{
  SearchToolIntentController.deinit();
  return MEMORY[0x270FA0228](v0, 136, 7);
}

uint64_t protocol witness for SearchToolIntentControllerProtocol.perform(request:) in conformance SearchToolIntentController(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 112)
                                                + **(int **)(**(void **)v2 + 112));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = AnswerSynthesisModelServer.synthesizeWithOverride_runnable(_:bindings:);
  return v8(a1, a2);
}

uint64_t SearchEntity.groupingId.getter()
{
  uint64_t v2 = v0;
  type metadata accessor for SearchEntity(0);
  OUTLINED_FUNCTION_1_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_16();
  EntityProperty.wrappedValue.getter();
  outlined init with take of EagerResolutionService?((uint64_t)v8, (uint64_t)v9, &demangling cache variable for type metadata for AnswerMetadata?);
  outlined init with take of EagerResolutionService?((uint64_t)v9, (uint64_t)v10, &demangling cache variable for type metadata for AnswerMetadata?);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  if (getEnumTag for DataFilter.FilterResult(v10) != 1)
  {
    uint64_t v4 = v8[13];
    uint64_t v5 = v8[14];
    outlined init with take of EagerResolutionService?((uint64_t)v8, (uint64_t)v7, &demangling cache variable for type metadata for AnswerMetadata?);
    swift_bridgeObjectRetain();
    outlined release of AnswerMetadata?((uint64_t)v7);
  }
  _s10OmniSearch22AssistantSystemContextVWOcTm_0(v2, v1, (void (*)(void))type metadata accessor for SearchEntity);
  if (!v5)
  {
    EntityProperty.wrappedValue.getter();
    uint64_t v4 = v8[0];
  }
  _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(v1, (void (*)(void))type metadata accessor for SearchEntity);
  return v4;
}

uint64_t closure #2 in SearchEntity.globalPassthroughResults(removeWebSearchPunchout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v18 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v17 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Searchfoundation_Card();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  _s10OmniSearch0B6ResultVACSEAAWlTm_0(&lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card, MEMORY[0x263F5CB50]);
  uint64_t v10 = Message.serializedData(partial:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v13 = v10;
  unint64_t v14 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  uint64_t v15 = v17;
  BinaryDecodingOptions.init()();
  Message.merge(serializedData:extensions:partial:options:)();
  outlined consume of Data._Representation(v13, v14);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v4);
  outlined destroy of EagerResolutionService?((uint64_t)v19, &demangling cache variable for type metadata for ExtensionMap?);
  uint64_t v16 = Searchfoundation_Card.cardSections.getter();
  specialized Sequence.dropLast(_:)(1, v16);
  return Searchfoundation_Card.cardSections.setter();
}

void specialized Sequence.dropLast(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Searchfoundation_CardSection();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v29 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v23 - v7;
  if (a1 < 0) {
    goto LABEL_30;
  }
  if (a1)
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
    uint64_t v10 = *(void *)(a2 + 16);
    if (!v10)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v31 = v8 + 16;
    unint64_t v32 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v13 = a2 + v32;
    uint64_t v14 = *(void *)(v8 + 72);
    unint64_t v28 = (void (**)(unint64_t, char *, uint64_t))(v8 + 32);
    uint64_t v23 = (void (**)(unint64_t, char *, uint64_t))(v8 + 40);
    uint64_t v26 = v10 - 1;
    uint64_t v15 = MEMORY[0x263F8EE78];
    uint64_t v24 = a2;
    uint64_t v25 = a1;
    uint64_t v27 = (char *)&v23 - v7;
    while (1)
    {
      v30(v9, v13, v4);
      unint64_t v16 = *(void *)(v15 + 16);
      if ((uint64_t)v16 >= a1)
      {
        if (v12 >= v16) {
          goto LABEL_28;
        }
        v30(v29, v15 + v32 + v14 * v12, v4);
        uint64_t v19 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v19 = v34;
        }
        unint64_t v20 = *(void *)(v19 + 16);
        if (v20 >= *(void *)(v19 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v19 = v34;
        }
        *(void *)(v19 + 16) = v20 + 1;
        (*v28)(v19 + v32 + v20 * v14, v29, v4);
        uint64_t v34 = v19;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v33 = v15;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
          uint64_t v15 = v22;
          uint64_t v33 = v22;
        }
        a2 = v24;
        a1 = v25;
        uint64_t v9 = v27;
        if (v12 >= *(void *)(v15 + 16)) {
          goto LABEL_29;
        }
        (*v23)(v15 + v32 + v14 * v12, v27, v4);
        uint64_t v15 = v33;
        if ((uint64_t)++v12 >= a1)
        {
          if (v26 == v11) {
            goto LABEL_26;
          }
          unint64_t v12 = 0;
          goto LABEL_24;
        }
      }
      else
      {
        char v17 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v33 = v15;
        if ((v17 & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          a1 = v25;
          uint64_t v15 = v33;
        }
        unint64_t v18 = *(void *)(v15 + 16);
        if (v18 >= *(void *)(v15 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          a1 = v25;
          uint64_t v15 = v33;
        }
        *(void *)(v15 + 16) = v18 + 1;
        uint64_t v9 = v27;
        (*v28)(v15 + v32 + v18 * v14, v27, v4);
      }
      if (v26 == v11) {
        goto LABEL_26;
      }
LABEL_24:
      ++v11;
      v13 += v14;
      if (v11 >= *(void *)(a2 + 16))
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        return;
      }
    }
  }
}

uint64_t static SearchToolClientType.typeDisplayRepresentation.getter()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolClientType.typeDisplayRepresentation);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_51_2();
  return v1();
}

uint64_t static SearchToolClientType.typeDisplayRepresentation.setter(uint64_t a1)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchToolClientType.typeDisplayRepresentation);
  swift_beginAccess();
  OUTLINED_FUNCTION_30_2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  uint64_t v5 = OUTLINED_FUNCTION_79_0();
  return v6(v5);
}

uint64_t (*static SearchToolClientType.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static SearchToolClientType.typeDisplayRepresentation);
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t static SearchToolClientType.caseDisplayRepresentations.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v1 = OUTLINED_FUNCTION_81(v0);
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_1_0();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(SearchToolClientType, DisplayRepresentation)>);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SearchToolClientType, DisplayRepresentation));
  OUTLINED_FUNCTION_12_0(v9);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_258661700;
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_46_1();
  __swift_storeEnumTagSinglePayload(v10, v11, v12, v7);
  uint64_t v13 = type metadata accessor for DisplayRepresentation.Image();
  OUTLINED_FUNCTION_32(v4, v14, v15, v13);
  DisplayRepresentation.init(title:subtitle:image:)();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type SearchToolClientType and conformance SearchToolClientType();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t SearchToolClientType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SearchToolClientType.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void *static SearchToolClientType.allCases.getter()
{
  return &outlined read-only object #0 of static SearchToolClientType.allCases.getter;
}

unint64_t SearchToolClientType.rawValue.getter()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SearchToolClientType@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  return SearchToolClientType.init(rawValue:)(*a1, a2);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SearchToolClientType@<X0>(void *a1@<X8>)
{
  unint64_t result = SearchToolClientType.rawValue.getter();
  *a1 = 0xD000000000000012;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance SearchToolClientType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchToolClientType and conformance SearchToolClientType();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SearchToolClientType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchToolClientType and conformance SearchToolClientType();
  return MEMORY[0x270EE1C28](a1, v2);
}

void protocol witness for static CaseIterable.allCases.getter in conformance SearchToolClientType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SearchToolClientType.allCases.getter;
}

uint64_t *specialized SearchToolIntentController.init(omniSearchService:hallucinationMitigator:metricsLogger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a4[5] = a5;
  a4[6] = a8;
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm(a4 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1Tm, a1, a5);
  a4[10] = a7;
  a4[11] = a10;
  unint64_t v18 = __swift_allocate_boxed_opaque_existential_1Tm(a4 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(v18, a2, a7);
  a4[15] = a6;
  a4[16] = a9;
  uint64_t v19 = __swift_allocate_boxed_opaque_existential_1Tm(a4 + 12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(v19, a3, a6);
  return a4;
}

uint64_t type metadata accessor for AssistantSystemContext(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for AssistantSystemContext);
}

uint64_t type metadata accessor for SearchToolIntentRequest(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for SearchToolIntentRequest);
}

uint64_t *outlined retain of SearchContext?(uint64_t *a1)
{
  return a1;
}

uint64_t type metadata accessor for DialogData(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for DialogData);
}

uint64_t type metadata accessor for SearchToolIntentResponse(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for SearchToolIntentResponse);
}

uint64_t _s10OmniSearch22AssistantSystemContextVWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_51_2();
  v4();
  return a2;
}

uint64_t outlined init with take of AssistantSystemContext(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_0();
  uint64_t v4 = OUTLINED_FUNCTION_211();
  v5(v4);
  return a2;
}

uint64_t _s10OmniSearch0B17ToolIntentRequestVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_16_1();
  v3();
  return a1;
}

uint64_t outlined consume of OmniSearchResponseRenderOption(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of AnswerMetadata?(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of DialogData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DialogData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in SearchEntity.globalPassthroughResults(removeWebSearchPunchout:)(uint64_t a1)
{
  return closure #2 in SearchEntity.globalPassthroughResults(removeWebSearchPunchout:)(a1, *(void *)(v1 + 16));
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in SearchToolClientType()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SearchToolClientType()
{
  return lazy protocol witness table accessor for type [SFResultSection] and conformance [A](&lazy protocol witness table cache variable for type [SearchToolClientType] and conformance [A], &demangling cache variable for type metadata for [SearchToolClientType]);
}

uint64_t dispatch thunk of SearchToolIntentControllerProtocol.perform(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_26_1(v8);
  *uint64_t v9 = v10;
  v9[1] = AnswerSynthesisModelServer.synthesizeWithTemplate_runnable(_:bindings:);
  return v12(a1, a2, a3, a4);
}

void *initializeBufferWithCopyOfBuffer for SearchToolIntentRequest(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t Entity = (int *)type metadata accessor for StructuredQueryEntity(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, (uint64_t)Entity))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = type metadata accessor for DisplayRepresentation();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v10, v11, v15);
      *(void *)&v10[Entity[5]] = *(void *)&v11[Entity[5]];
      *(void *)&v10[Entity[6]] = *(void *)&v11[Entity[6]];
      *(void *)&v10[Entity[7]] = *(void *)&v11[Entity[7]];
      *(void *)&v10[Entity[8]] = *(void *)&v11[Entity[8]];
      *(void *)&v10[Entity[9]] = *(void *)&v11[Entity[9]];
      *(void *)&v10[Entity[10]] = *(void *)&v11[Entity[10]];
      *(void *)&v10[Entity[11]] = *(void *)&v11[Entity[11]];
      *(void *)&v10[Entity[12]] = *(void *)&v11[Entity[12]];
      *(void *)&v10[Entity[13]] = *(void *)&v11[Entity[13]];
      *(void *)&v10[Entity[14]] = *(void *)&v11[Entity[14]];
      *(void *)&v10[Entity[15]] = *(void *)&v11[Entity[15]];
      *(void *)&v10[Entity[16]] = *(void *)&v11[Entity[16]];
      *(void *)&v10[Entity[17]] = *(void *)&v11[Entity[17]];
      *(void *)&v10[Entity[18]] = *(void *)&v11[Entity[18]];
      *(void *)&v10[Entity[19]] = *(void *)&v11[Entity[19]];
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, (uint64_t)Entity);
    }
    uint64_t v16 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    char v17 = (void *)((char *)v4 + v16);
    unint64_t v18 = (void *)((char *)a2 + v16);
    uint64_t v19 = *(void *)((char *)a2 + v16);
    swift_bridgeObjectRetain();
    if (v19)
    {
      uint64_t v20 = v18[1];
      uint64_t v21 = v18[2];
      void *v17 = v19;
      v17[1] = v20;
      uint64_t v22 = v18[3];
      uint64_t v23 = v18[4];
      v17[2] = v21;
      v17[3] = v22;
      uint64_t v24 = v18[5];
      uint64_t v55 = v18[6];
      v17[4] = v23;
      v17[5] = v24;
      uint64_t v25 = v18[7];
      uint64_t v56 = v18[8];
      v17[6] = v55;
      v17[7] = v25;
      uint64_t v26 = v18[9];
      uint64_t v57 = v18[10];
      v17[8] = v56;
      v17[9] = v26;
      uint64_t v27 = v18[11];
      uint64_t v58 = v18[12];
      v17[10] = v57;
      v17[11] = v27;
      uint64_t v28 = v18[14];
      uint64_t v59 = v18[13];
      v17[12] = v58;
      v17[13] = v59;
      uint64_t v29 = v18[15];
      uint64_t v60 = v18[16];
      v17[14] = v28;
      v17[15] = v29;
      uint64_t v30 = v18[17];
      v17[16] = v60;
      v17[17] = v30;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      memcpy(v17, v18, 0x90uLL);
    }
    uint64_t v31 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *((unsigned char *)v4 + v31) = *((unsigned char *)a2 + v31);
    uint64_t v32 = a3[12];
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *(void *)((char *)v4 + v32) = *(void *)((char *)a2 + v32);
    uint64_t v33 = a3[13];
    uint64_t v34 = (char *)v4 + v33;
    uint64_t v35 = (char *)a2 + v33;
    uint64_t v36 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v35, 1, v36))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
      memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
      __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v36);
    }
    uint64_t v38 = type metadata accessor for AssistantSystemContext(0);
    uint64_t v39 = *(int *)(v38 + 20);
    uint64_t v40 = &v34[v39];
    uint64_t v41 = &v35[v39];
    uint64_t v43 = *(void *)v41;
    uint64_t v42 = *((void *)v41 + 1);
    *(void *)uint64_t v40 = v43;
    *((void *)v40 + 1) = v42;
    uint64_t v44 = *(int *)(v38 + 24);
    uint64_t v45 = &v34[v44];
    uint64_t v46 = &v35[v44];
    uint64_t v47 = *((void *)v46 + 1);
    *(void *)uint64_t v45 = *(void *)v46;
    *((void *)v45 + 1) = v47;
    uint64_t v48 = a3[14];
    uint64_t v49 = (char *)v4 + v48;
    uint64_t v50 = (char *)a2 + v48;
    long long v51 = *(_OWORD *)(v50 + 24);
    *(_OWORD *)((char *)v4 + v48 + 24) = v51;
    uint64_t v52 = v51;
    uint64_t v53 = **(void (***)(char *, char *, uint64_t))(v51 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53(v49, v50, v52);
  }
  return v4;
}

uint64_t destroy for SearchToolIntentRequest(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t Entity = type metadata accessor for StructuredQueryEntity(0);
  if (!__swift_getEnumTagSinglePayload(v4, 1, Entity))
  {
    uint64_t v6 = type metadata accessor for DisplayRepresentation();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[8]))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[13];
  uint64_t v8 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
  if (!__swift_getEnumTagSinglePayload(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  type metadata accessor for AssistantSystemContext(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[14];
  return __swift_destroy_boxed_opaque_existential_1Tm(v9);
}

void *initializeWithCopy for SearchToolIntentRequest(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t Entity = (int *)type metadata accessor for StructuredQueryEntity(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v59 = v3;
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, (uint64_t)Entity))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for DisplayRepresentation();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
    *(void *)&v9[Entity[5]] = *(void *)&v10[Entity[5]];
    *(void *)&v9[Entity[6]] = *(void *)&v10[Entity[6]];
    *(void *)&v9[Entity[7]] = *(void *)&v10[Entity[7]];
    *(void *)&v9[Entity[8]] = *(void *)&v10[Entity[8]];
    *(void *)&v9[Entity[9]] = *(void *)&v10[Entity[9]];
    *(void *)&v9[Entity[10]] = *(void *)&v10[Entity[10]];
    *(void *)&v9[Entity[11]] = *(void *)&v10[Entity[11]];
    *(void *)&v9[Entity[12]] = *(void *)&v10[Entity[12]];
    *(void *)&v9[Entity[13]] = *(void *)&v10[Entity[13]];
    *(void *)&v9[Entity[14]] = *(void *)&v10[Entity[14]];
    *(void *)&v9[Entity[15]] = *(void *)&v10[Entity[15]];
    *(void *)&v9[Entity[16]] = *(void *)&v10[Entity[16]];
    *(void *)&v9[Entity[17]] = *(void *)&v10[Entity[17]];
    *(void *)&v9[Entity[18]] = *(void *)&v10[Entity[18]];
    *(void *)&v9[Entity[19]] = *(void *)&v10[Entity[19]];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, (uint64_t)Entity);
  }
  uint64_t v14 = v3[8];
  *(void *)((char *)a1 + v3[7]) = *(void *)((char *)a2 + v3[7]);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *(void *)((char *)a2 + v14);
  swift_bridgeObjectRetain();
  if (v17)
  {
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    void *v15 = v17;
    v15[1] = v18;
    uint64_t v21 = v16[3];
    uint64_t v20 = v16[4];
    v15[2] = v19;
    v15[3] = v21;
    uint64_t v23 = v16[5];
    uint64_t v22 = v16[6];
    v15[4] = v20;
    v15[5] = v23;
    uint64_t v24 = v16[8];
    uint64_t v54 = v16[7];
    v15[6] = v22;
    v15[7] = v54;
    uint64_t v25 = v16[10];
    uint64_t v55 = v16[9];
    v15[8] = v24;
    v15[9] = v55;
    uint64_t v26 = v16[12];
    uint64_t v56 = v16[11];
    v15[10] = v25;
    v15[11] = v56;
    uint64_t v27 = v16[13];
    uint64_t v57 = v16[14];
    v15[12] = v26;
    v15[13] = v27;
    uint64_t v58 = v16[15];
    uint64_t v28 = v16[16];
    uint64_t v29 = v16[17];
    v15[14] = v57;
    v15[15] = v58;
    v15[16] = v28;
    v15[17] = v29;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v3 = v59;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    memcpy(v15, v16, 0x90uLL);
  }
  uint64_t v30 = v3[10];
  *(void *)((char *)a1 + v3[9]) = *(void *)((char *)a2 + v3[9]);
  *((unsigned char *)a1 + v30) = *((unsigned char *)a2 + v30);
  uint64_t v31 = v3[12];
  *((unsigned char *)a1 + v3[11]) = *((unsigned char *)a2 + v3[11]);
  *(void *)((char *)a1 + v31) = *(void *)((char *)a2 + v31);
  uint64_t v32 = v3[13];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
    __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v35);
  }
  uint64_t v37 = type metadata accessor for AssistantSystemContext(0);
  uint64_t v38 = *(int *)(v37 + 20);
  uint64_t v39 = &v33[v38];
  uint64_t v40 = &v34[v38];
  uint64_t v42 = *(void *)v40;
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)uint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  uint64_t v43 = *(int *)(v37 + 24);
  uint64_t v44 = &v33[v43];
  uint64_t v45 = &v34[v43];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = v3[14];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  long long v50 = *(_OWORD *)(v49 + 24);
  *(_OWORD *)((char *)a1 + v47 + 24) = v50;
  uint64_t v51 = v50;
  uint64_t v52 = **(void (***)(char *, char *, uint64_t))(v50 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v52(v48, v49, v51);
  return a1;
}

void *assignWithCopy for SearchToolIntentRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t Entity = (int *)type metadata accessor for StructuredQueryEntity(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)Entity);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)Entity);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      uint64_t v12 = type metadata accessor for DisplayRepresentation();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v7, v8, v12);
      *(void *)&v7[Entity[5]] = *(void *)&v8[Entity[5]];
      *(void *)&v7[Entity[6]] = *(void *)&v8[Entity[6]];
      *(void *)&v7[Entity[7]] = *(void *)&v8[Entity[7]];
      *(void *)&v7[Entity[8]] = *(void *)&v8[Entity[8]];
      *(void *)&v7[Entity[9]] = *(void *)&v8[Entity[9]];
      *(void *)&v7[Entity[10]] = *(void *)&v8[Entity[10]];
      *(void *)&v7[Entity[11]] = *(void *)&v8[Entity[11]];
      *(void *)&v7[Entity[12]] = *(void *)&v8[Entity[12]];
      *(void *)&v7[Entity[13]] = *(void *)&v8[Entity[13]];
      *(void *)&v7[Entity[14]] = *(void *)&v8[Entity[14]];
      *(void *)&v7[Entity[15]] = *(void *)&v8[Entity[15]];
      *(void *)&v7[Entity[16]] = *(void *)&v8[Entity[16]];
      *(void *)&v7[Entity[17]] = *(void *)&v8[Entity[17]];
      *(void *)&v7[Entity[18]] = *(void *)&v8[Entity[18]];
      *(void *)&v7[Entity[19]] = *(void *)&v8[Entity[19]];
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)Entity);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v7, (void (*)(void))type metadata accessor for StructuredQueryEntity);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v34 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24))(v7, v8, v34);
  *(void *)&v7[Entity[5]] = *(void *)&v8[Entity[5]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[6]] = *(void *)&v8[Entity[6]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[7]] = *(void *)&v8[Entity[7]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[8]] = *(void *)&v8[Entity[8]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[9]] = *(void *)&v8[Entity[9]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[10]] = *(void *)&v8[Entity[10]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[11]] = *(void *)&v8[Entity[11]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[12]] = *(void *)&v8[Entity[12]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[13]] = *(void *)&v8[Entity[13]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[14]] = *(void *)&v8[Entity[14]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[15]] = *(void *)&v8[Entity[15]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[16]] = *(void *)&v8[Entity[16]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[17]] = *(void *)&v8[Entity[17]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[18]] = *(void *)&v8[Entity[18]];
  swift_retain();
  swift_release();
  *(void *)&v7[Entity[19]] = *(void *)&v8[Entity[19]];
  swift_retain();
  swift_release();
LABEL_7:
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *(void *)((char *)a2 + v14);
  if (*(void *)((char *)a1 + v14))
  {
    if (v17)
    {
      void *v15 = v17;
      swift_retain();
      swift_release();
      v15[1] = v16[1];
      swift_retain();
      swift_release();
      v15[2] = v16[2];
      swift_retain();
      swift_release();
      v15[3] = v16[3];
      swift_retain();
      swift_release();
      v15[4] = v16[4];
      swift_retain();
      swift_release();
      v15[5] = v16[5];
      swift_retain();
      swift_release();
      v15[6] = v16[6];
      swift_retain();
      swift_release();
      v15[7] = v16[7];
      swift_retain();
      swift_release();
      v15[8] = v16[8];
      swift_retain();
      swift_release();
      v15[9] = v16[9];
      swift_retain();
      swift_release();
      v15[10] = v16[10];
      swift_retain();
      swift_release();
      v15[11] = v16[11];
      swift_retain();
      swift_release();
      v15[12] = v16[12];
      swift_retain();
      swift_release();
      v15[13] = v16[13];
      swift_retain();
      swift_release();
      v15[14] = v16[14];
      swift_retain();
      swift_release();
      v15[15] = v16[15];
      swift_retain();
      swift_release();
      v15[16] = v16[16];
      swift_retain();
      swift_release();
      v15[17] = v16[17];
      swift_retain();
      swift_release();
      goto LABEL_14;
    }
    outlined destroy of SearchContext((uint64_t)a1 + v14);
  }
  else if (v17)
  {
    void *v15 = v17;
    v15[1] = v16[1];
    v15[2] = v16[2];
    v15[3] = v16[3];
    v15[4] = v16[4];
    v15[5] = v16[5];
    v15[6] = v16[6];
    v15[7] = v16[7];
    v15[8] = v16[8];
    v15[9] = v16[9];
    v15[10] = v16[10];
    v15[11] = v16[11];
    v15[12] = v16[12];
    v15[13] = v16[13];
    v15[14] = v16[14];
    v15[15] = v16[15];
    v15[16] = v16[16];
    v15[17] = v16[17];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_14;
  }
  memcpy(v15, v16, 0x90uLL);
LABEL_14:
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[13];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v21);
  int v23 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21);
  if (!v22)
  {
    uint64_t v24 = *(void *)(v21 - 8);
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 24))(v19, v20, v21);
      goto LABEL_20;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v21);
    goto LABEL_19;
  }
  if (v23)
  {
LABEL_19:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
LABEL_20:
  uint64_t v26 = type metadata accessor for AssistantSystemContext(0);
  uint64_t v27 = *(int *)(v26 + 20);
  uint64_t v28 = &v19[v27];
  uint64_t v29 = &v20[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(v26 + 24);
  uint64_t v31 = &v19[v30];
  uint64_t v32 = &v20[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((void *)((char *)a1 + a3[14]), (void *)((char *)a2 + a3[14]));
  return a1;
}

uint64_t outlined destroy of SearchContext(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for SearchToolIntentRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t Entity = (int *)type metadata accessor for StructuredQueryEntity(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)Entity))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for DisplayRepresentation();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v8, v9, v12);
    *(void *)&v8[Entity[5]] = *(void *)&v9[Entity[5]];
    *(void *)&v8[Entity[6]] = *(void *)&v9[Entity[6]];
    *(void *)&v8[Entity[7]] = *(void *)&v9[Entity[7]];
    *(void *)&v8[Entity[8]] = *(void *)&v9[Entity[8]];
    *(void *)&v8[Entity[9]] = *(void *)&v9[Entity[9]];
    *(void *)&v8[Entity[10]] = *(void *)&v9[Entity[10]];
    *(void *)&v8[Entity[11]] = *(void *)&v9[Entity[11]];
    *(void *)&v8[Entity[12]] = *(void *)&v9[Entity[12]];
    *(void *)&v8[Entity[13]] = *(void *)&v9[Entity[13]];
    *(void *)&v8[Entity[14]] = *(void *)&v9[Entity[14]];
    *(void *)&v8[Entity[15]] = *(void *)&v9[Entity[15]];
    *(void *)&v8[Entity[16]] = *(void *)&v9[Entity[16]];
    *(void *)&v8[Entity[17]] = *(void *)&v9[Entity[17]];
    *(void *)&v8[Entity[18]] = *(void *)&v9[Entity[18]];
    *(void *)&v8[Entity[19]] = *(void *)&v9[Entity[19]];
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, (uint64_t)Entity);
  }
  uint64_t v13 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  memcpy((char *)a1 + v13, (char *)a2 + v13, 0x90uLL);
  uint64_t v14 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  uint64_t v15 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  uint64_t v16 = a3[13];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  }
  uint64_t v21 = type metadata accessor for AssistantSystemContext(0);
  *(_OWORD *)&v17[*(int *)(v21 + 20)] = *(_OWORD *)&v18[*(int *)(v21 + 20)];
  *(_OWORD *)&v17[*(int *)(v21 + 24)] = *(_OWORD *)&v18[*(int *)(v21 + 24)];
  uint64_t v22 = a3[14];
  int v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  *((void *)v23 + 4) = *((void *)v24 + 4);
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)int v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  return a1;
}

void *assignWithTake for SearchToolIntentRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t Entity = (int *)type metadata accessor for StructuredQueryEntity(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)Entity);
  int v13 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, (uint64_t)Entity);
  if (EnumTagSinglePayload)
  {
    if (!v13)
    {
      uint64_t v14 = type metadata accessor for DisplayRepresentation();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v9, v10, v14);
      *(void *)&v9[Entity[5]] = *(void *)&v10[Entity[5]];
      *(void *)&v9[Entity[6]] = *(void *)&v10[Entity[6]];
      *(void *)&v9[Entity[7]] = *(void *)&v10[Entity[7]];
      *(void *)&v9[Entity[8]] = *(void *)&v10[Entity[8]];
      *(void *)&v9[Entity[9]] = *(void *)&v10[Entity[9]];
      *(void *)&v9[Entity[10]] = *(void *)&v10[Entity[10]];
      *(void *)&v9[Entity[11]] = *(void *)&v10[Entity[11]];
      *(void *)&v9[Entity[12]] = *(void *)&v10[Entity[12]];
      *(void *)&v9[Entity[13]] = *(void *)&v10[Entity[13]];
      *(void *)&v9[Entity[14]] = *(void *)&v10[Entity[14]];
      *(void *)&v9[Entity[15]] = *(void *)&v10[Entity[15]];
      *(void *)&v9[Entity[16]] = *(void *)&v10[Entity[16]];
      *(void *)&v9[Entity[17]] = *(void *)&v10[Entity[17]];
      *(void *)&v9[Entity[18]] = *(void *)&v10[Entity[18]];
      *(void *)&v9[Entity[19]] = *(void *)&v10[Entity[19]];
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, (uint64_t)Entity);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    _s10OmniSearch0B17ToolIntentRequestVWOhTm_0((uint64_t)v9, (void (*)(void))type metadata accessor for StructuredQueryEntity);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v44 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 40))(v9, v10, v44);
  *(void *)&v9[Entity[5]] = *(void *)&v10[Entity[5]];
  swift_release();
  *(void *)&v9[Entity[6]] = *(void *)&v10[Entity[6]];
  swift_release();
  *(void *)&v9[Entity[7]] = *(void *)&v10[Entity[7]];
  swift_release();
  *(void *)&v9[Entity[8]] = *(void *)&v10[Entity[8]];
  swift_release();
  *(void *)&v9[Entity[9]] = *(void *)&v10[Entity[9]];
  swift_release();
  *(void *)&v9[Entity[10]] = *(void *)&v10[Entity[10]];
  swift_release();
  *(void *)&v9[Entity[11]] = *(void *)&v10[Entity[11]];
  swift_release();
  *(void *)&v9[Entity[12]] = *(void *)&v10[Entity[12]];
  swift_release();
  *(void *)&v9[Entity[13]] = *(void *)&v10[Entity[13]];
  swift_release();
  *(void *)&v9[Entity[14]] = *(void *)&v10[Entity[14]];
  swift_release();
  *(void *)&v9[Entity[15]] = *(void *)&v10[Entity[15]];
  swift_release();
  *(void *)&v9[Entity[16]] = *(void *)&v10[Entity[16]];
  swift_release();
  *(void *)&v9[Entity[17]] = *(void *)&v10[Entity[17]];
  swift_release();
  *(void *)&v9[Entity[18]] = *(void *)&v10[Entity[18]];
  swift_release();
  *(void *)&v9[Entity[19]] = *(void *)&v10[Entity[19]];
  swift_release();
LABEL_7:
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  if (*(void *)((char *)a1 + v16))
  {
    if (*v18)
    {
      void *v17 = *v18;
      swift_release();
      v17[1] = v18[1];
      swift_release();
      v17[2] = v18[2];
      swift_release();
      v17[3] = v18[3];
      swift_release();
      v17[4] = v18[4];
      swift_release();
      v17[5] = v18[5];
      swift_release();
      v17[6] = v18[6];
      swift_release();
      v17[7] = v18[7];
      swift_release();
      v17[8] = v18[8];
      swift_release();
      v17[9] = v18[9];
      swift_release();
      v17[10] = v18[10];
      swift_release();
      v17[11] = v18[11];
      swift_release();
      v17[12] = v18[12];
      swift_release();
      v17[13] = v18[13];
      swift_release();
      v17[14] = v18[14];
      swift_release();
      v17[15] = v18[15];
      swift_release();
      v17[16] = v18[16];
      swift_release();
      v17[17] = v18[17];
      swift_release();
      goto LABEL_12;
    }
    outlined destroy of SearchContext((uint64_t)v17);
  }
  memcpy(v17, v18, 0x90uLL);
LABEL_12:
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *((unsigned char *)a1 + v19) = *((unsigned char *)a2 + v19);
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[13];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
  int v24 = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v23);
  int v25 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23);
  if (!v24)
  {
    uint64_t v26 = *(void *)(v23 - 8);
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v21, v22, v23);
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v23);
    goto LABEL_17;
  }
  if (v25)
  {
LABEL_17:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
LABEL_18:
  uint64_t v28 = type metadata accessor for AssistantSystemContext(0);
  uint64_t v29 = *(int *)(v28 + 20);
  uint64_t v30 = &v21[v29];
  uint64_t v31 = &v22[v29];
  uint64_t v33 = *(void *)v31;
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = *(int *)(v28 + 24);
  uint64_t v35 = &v21[v34];
  uint64_t v36 = &v22[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[14];
  uint64_t v40 = (char *)a1 + v39;
  uint64_t v41 = (char *)a2 + v39;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1 + v39);
  long long v42 = *((_OWORD *)v41 + 1);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *((_OWORD *)v40 + 1) = v42;
  *((void *)v40 + 4) = *((void *)v41 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchToolIntentRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_258394C4C);
}

uint64_t sub_258394C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return OUTLINED_FUNCTION_65_1(*(void *)(a1 + 8));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(int *)(a3 + 24);
  }
  else
  {
    uint64_t v9 = type metadata accessor for AssistantSystemContext(0);
    uint64_t v10 = *(int *)(a3 + 52);
  }
  return __swift_getEnumTagSinglePayload(a1 + v10, a2, v9);
}

uint64_t storeEnumTagSinglePayload for SearchToolIntentRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_258394D08);
}

void sub_258394D08()
{
  OUTLINED_FUNCTION_71_1();
  if (v4)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    uint64_t v5 = v3;
    int v6 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructuredQueryEntity?);
    OUTLINED_FUNCTION_30_2();
    if (*(_DWORD *)(v7 + 84) == v6)
    {
      uint64_t v8 = *(int *)(v5 + 24);
    }
    else
    {
      type metadata accessor for AssistantSystemContext(0);
      uint64_t v8 = *(int *)(v5 + 52);
    }
    uint64_t v9 = OUTLINED_FUNCTION_95_0(v8);
    __swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
  }
}

void type metadata completion function for SearchToolIntentRequest()
{
  type metadata accessor for StructuredQueryEntity?(319, (unint64_t *)&lazy cache variable for type metadata for StructuredQueryEntity?, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AssistantSystemContext(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AssistantSystemContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (uint64_t *)((char *)a1 + v10);
    int v13 = (uint64_t *)((char *)a2 + v10);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = (uint64_t *)((char *)a1 + v11);
    uint64_t v16 = (uint64_t *)((char *)a2 + v11);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AssistantSystemContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for AssistantSystemContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  int v13 = &a1[v9];
  uint64_t v14 = &a2[v9];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)int v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for AssistantSystemContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  int v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for AssistantSystemContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  return a1;
}

char *assignWithTake for AssistantSystemContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  int v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssistantSystemContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2583955F0);
}

uint64_t sub_2583955F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return OUTLINED_FUNCTION_53_8(*(void *)(a1 + *(int *)(a3 + 20) + 8));
  }
  return __swift_getEnumTagSinglePayload(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for AssistantSystemContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_258395690);
}

void sub_258395690(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
}

void type metadata completion function for AssistantSystemContext()
{
  type metadata accessor for StructuredQueryEntity?(319, (unint64_t *)&lazy cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?, MEMORY[0x263EFBB88]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DialogData(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    uint64_t *v4 = *a2;
    char v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[8];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for _SpeakableString();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
      memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
    }
    uint64_t v23 = a3[9];
    int v24 = (char *)v4 + v23;
    int v25 = (char *)a2 + v23;
    unint64_t v26 = *((void *)v25 + 1);
    if (v26 >> 60 == 15)
    {
      *(_OWORD *)int v24 = *(_OWORD *)v25;
    }
    else
    {
      uint64_t v27 = *(void *)v25;
      outlined copy of Data._Representation(*(void *)v25, *((void *)v25 + 1));
      *(void *)int v24 = v27;
      *((void *)v24 + 1) = v26;
    }
  }
  return v4;
}

uint64_t destroy for DialogData(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for _SpeakableString();
  uint64_t result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v9 = (uint64_t *)(a1 + a2[9]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15)
  {
    uint64_t v11 = *v9;
    return outlined consume of Data._Representation(v11, v10);
  }
  return result;
}

void *initializeWithCopy for DialogData(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for _SpeakableString();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  }
  uint64_t v21 = a3[9];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  unint64_t v24 = *((void *)v23 + 1);
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  }
  else
  {
    uint64_t v25 = *(void *)v23;
    outlined copy of Data._Representation(*(void *)v23, *((void *)v23 + 1));
    *(void *)uint64_t v22 = v25;
    *((void *)v22 + 1) = v24;
  }
  return a1;
}

void *assignWithCopy for DialogData(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for _SpeakableString();
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v20);
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v23 = *(void *)(v20 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v20);
LABEL_12:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
    memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v18, v19, v20);
LABEL_13:
  uint64_t v25 = a3[9];
  unint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  unint64_t v28 = *(void *)((char *)a2 + v25 + 8);
  if (*(void *)((char *)a1 + v25 + 8) >> 60 != 15)
  {
    if (v28 >> 60 != 15)
    {
      uint64_t v30 = *v27;
      outlined copy of Data._Representation(v30, v28);
      uint64_t v31 = *v26;
      unint64_t v32 = v26[1];
      uint64_t *v26 = v30;
      v26[1] = v28;
      outlined consume of Data._Representation(v31, v32);
      return a1;
    }
    outlined destroy of Data((uint64_t)v26);
    goto LABEL_18;
  }
  if (v28 >> 60 == 15)
  {
LABEL_18:
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
    return a1;
  }
  uint64_t v29 = *v27;
  outlined copy of Data._Representation(v29, v28);
  uint64_t *v26 = v29;
  v26[1] = v28;
  return a1;
}

_OWORD *initializeWithTake for DialogData(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for _SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  return a1;
}

void *assignWithTake for DialogData(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  int v21 = (char *)a1 + v20;
  int v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for _SpeakableString();
  int v24 = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v23);
  int v25 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v26 = *(void *)(v23 - 8);
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v23);
LABEL_12:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v21, v22, v23);
LABEL_13:
  uint64_t v28 = a3[9];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  unint64_t v31 = *(void *)((char *)a1 + v28 + 8);
  if (v31 >> 60 != 15)
  {
    unint64_t v32 = v30[1];
    if (v32 >> 60 != 15)
    {
      uint64_t v33 = *v29;
      *uint64_t v29 = *v30;
      v29[1] = v32;
      outlined consume of Data._Representation(v33, v31);
      return a1;
    }
    outlined destroy of Data((uint64_t)v29);
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2583965BC);
}

uint64_t sub_2583965BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646) {
    return OUTLINED_FUNCTION_53_8(*(void *)(a1 + 8));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(int *)(a3 + 20);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
    uint64_t v10 = *(int *)(a3 + 32);
  }
  return __swift_getEnumTagSinglePayload(a1 + v10, a2, v9);
}

uint64_t storeEnumTagSinglePayload for DialogData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25839667C);
}

uint64_t sub_25839667C(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_30_2();
    if (*(_DWORD *)(v6 + 84) == a3)
    {
      uint64_t v7 = *(int *)(a4 + 20);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
      uint64_t v7 = *(int *)(a4 + 32);
    }
    uint64_t v8 = OUTLINED_FUNCTION_95_0(v7);
    return __swift_storeEnumTagSinglePayload(v8, v9, v10, v11);
  }
  return result;
}

void type metadata completion function for DialogData()
{
  type metadata accessor for StructuredQueryEntity?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for StructuredQueryEntity?(319, &lazy cache variable for type metadata for _SpeakableString?, MEMORY[0x263EFB9F8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for StructuredQueryEntity?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchToolIntentResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    unint64_t v9 = a2[2];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    a1[1] = v8;
    a1[2] = v9;
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (uint64_t *)((char *)a1 + v10);
    int v12 = (char *)a2 + v10;
    uint64_t v13 = *(uint64_t *)((char *)a2 + v10 + 8);
    *uint64_t v11 = *(uint64_t *)((char *)a2 + v10);
    v11[1] = v13;
    uint64_t v14 = (int *)type metadata accessor for DialogData(0);
    uint64_t v15 = v14[5];
    uint64_t v16 = (char *)v11 + v15;
    uint64_t v17 = &v12[v15];
    uint64_t v18 = type metadata accessor for URL();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
    }
    *(void *)((char *)v11 + v14[6]) = *(void *)&v12[v14[6]];
    uint64_t v20 = v14[7];
    int v21 = (void *)((char *)v11 + v20);
    int v22 = &v12[v20];
    uint64_t v23 = *((void *)v22 + 1);
    void *v21 = *(void *)v22;
    v21[1] = v23;
    uint64_t v24 = v14[8];
    int v25 = (char *)v11 + v24;
    uint64_t v26 = &v12[v24];
    uint64_t v27 = type metadata accessor for _SpeakableString();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
      memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
    }
    uint64_t v29 = v14[9];
    uint64_t v30 = (char *)v11 + v29;
    unint64_t v31 = &v12[v29];
    unint64_t v32 = *((void *)v31 + 1);
    if (v32 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    }
    else
    {
      uint64_t v33 = *(void *)v31;
      outlined copy of Data._Representation(*(void *)v31, *((void *)v31 + 1));
      *(void *)uint64_t v30 = v33;
      *((void *)v30 + 1) = v32;
    }
  }
  return a1;
}

uint64_t destroy for SearchToolIntentResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for DialogData(0);
  uint64_t v6 = v4 + v5[5];
  uint64_t v7 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v4 + v5[8];
  uint64_t v9 = type metadata accessor for _SpeakableString();
  uint64_t result = __swift_getEnumTagSinglePayload(v8, 1, v9);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v11 = (uint64_t *)(v4 + v5[9]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15)
  {
    uint64_t v13 = *v11;
    return outlined consume of Data._Representation(v13, v12);
  }
  return result;
}

void *initializeWithCopy for SearchToolIntentResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  unint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = *(void *)((char *)a2 + v8 + 8);
  *uint64_t v9 = *(void *)((char *)a2 + v8);
  v9[1] = v11;
  unint64_t v12 = (int *)type metadata accessor for DialogData(0);
  uint64_t v13 = v12[5];
  uint64_t v14 = (char *)v9 + v13;
  uint64_t v15 = &v10[v13];
  uint64_t v16 = type metadata accessor for URL();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  *(void *)((char *)v9 + v12[6]) = *(void *)&v10[v12[6]];
  uint64_t v18 = v12[7];
  uint64_t v19 = (void *)((char *)v9 + v18);
  uint64_t v20 = &v10[v18];
  uint64_t v21 = *((void *)v20 + 1);
  *uint64_t v19 = *(void *)v20;
  v19[1] = v21;
  uint64_t v22 = v12[8];
  uint64_t v23 = (char *)v9 + v22;
  uint64_t v24 = &v10[v22];
  uint64_t v25 = type metadata accessor for _SpeakableString();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v25);
  }
  uint64_t v27 = v12[9];
  uint64_t v28 = (char *)v9 + v27;
  uint64_t v29 = &v10[v27];
  unint64_t v30 = *((void *)v29 + 1);
  if (v30 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  }
  else
  {
    uint64_t v31 = *(void *)v29;
    outlined copy of Data._Representation(*(void *)v29, *((void *)v29 + 1));
    *(void *)uint64_t v28 = v31;
    *((void *)v28 + 1) = v30;
  }
  return a1;
}

void *assignWithCopy for SearchToolIntentResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  unint64_t v12 = (char *)a2 + v10;
  *uint64_t v11 = *(void *)((char *)a2 + v10);
  v11[1] = *(void *)((char *)a2 + v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = (int *)type metadata accessor for DialogData(0);
  uint64_t v14 = v13[5];
  uint64_t v15 = (char *)v11 + v14;
  uint64_t v16 = &v12[v14];
  uint64_t v17 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v17);
  int v19 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17);
  if (EnumTagSinglePayload)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v20 = *(void *)(v17 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v17);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v15, v16, v17);
LABEL_7:
  *(void *)((char *)v11 + v13[6]) = *(void *)&v12[v13[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = v13[7];
  uint64_t v23 = (void *)((char *)v11 + v22);
  uint64_t v24 = &v12[v22];
  *uint64_t v23 = *(void *)v24;
  v23[1] = *((void *)v24 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v13[8];
  uint64_t v26 = (char *)v11 + v25;
  uint64_t v27 = &v12[v25];
  uint64_t v28 = type metadata accessor for _SpeakableString();
  int v29 = __swift_getEnumTagSinglePayload((uint64_t)v26, 1, v28);
  int v30 = __swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v31 = *(void *)(v28 - 8);
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v28);
LABEL_12:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
    memcpy(v26, v27, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v26, v27, v28);
LABEL_13:
  uint64_t v33 = v13[9];
  uint64_t v34 = (void *)((char *)v11 + v33);
  uint64_t v35 = (uint64_t *)&v12[v33];
  unint64_t v36 = *(void *)&v12[v33 + 8];
  if (*(void *)((char *)v11 + v33 + 8) >> 60 != 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v38 = *v35;
      outlined copy of Data._Representation(v38, v36);
      uint64_t v39 = *v34;
      unint64_t v40 = v34[1];
      *uint64_t v34 = v38;
      v34[1] = v36;
      outlined consume of Data._Representation(v39, v40);
      return a1;
    }
    outlined destroy of Data((uint64_t)v34);
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
LABEL_18:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    return a1;
  }
  uint64_t v37 = *v35;
  outlined copy of Data._Representation(v37, v36);
  *uint64_t v34 = v37;
  v34[1] = v36;
  return a1;
}

uint64_t initializeWithTake for SearchToolIntentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + v4) = *(_OWORD *)(a2 + v4);
  unint64_t v7 = (int *)type metadata accessor for DialogData(0);
  uint64_t v8 = v7[5];
  unint64_t v9 = (void *)(v5 + v8);
  uint64_t v10 = (const void *)(v6 + v8);
  uint64_t v11 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  *(void *)(v5 + v7[6]) = *(void *)(v6 + v7[6]);
  *(_OWORD *)(v5 + v7[7]) = *(_OWORD *)(v6 + v7[7]);
  uint64_t v13 = v7[8];
  uint64_t v14 = (void *)(v5 + v13);
  uint64_t v15 = (const void *)(v6 + v13);
  uint64_t v16 = type metadata accessor for _SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  *(_OWORD *)(v5 + v7[9]) = *(_OWORD *)(v6 + v7[9]);
  return a1;
}

void *assignWithTake for SearchToolIntentResponse(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(int *)(a3 + 24);
  unint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8 + 8);
  *unint64_t v9 = *(void *)(a2 + v8);
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for DialogData(0);
  uint64_t v13 = v12[5];
  uint64_t v14 = (char *)v9 + v13;
  uint64_t v15 = (const void *)(v10 + v13);
  uint64_t v16 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v16);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16);
  if (EnumTagSinglePayload)
  {
    if (!v18)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v19 = *(void *)(v16 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v16);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, const void *, uint64_t))(v19 + 40))(v14, v15, v16);
LABEL_7:
  *(void *)((char *)v9 + v12[6]) = *(void *)(v10 + v12[6]);
  swift_bridgeObjectRelease();
  uint64_t v21 = v12[7];
  uint64_t v22 = (void *)((char *)v9 + v21);
  uint64_t v23 = (uint64_t *)(v10 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  void *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = v12[8];
  uint64_t v27 = (char *)v9 + v26;
  uint64_t v28 = (const void *)(v10 + v26);
  uint64_t v29 = type metadata accessor for _SpeakableString();
  int v30 = __swift_getEnumTagSinglePayload((uint64_t)v27, 1, v29);
  int v31 = __swift_getEnumTagSinglePayload((uint64_t)v28, 1, v29);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
      __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v29);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v32 = *(void *)(v29 - 8);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v29);
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SpeakableString?);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, const void *, uint64_t))(v32 + 40))(v27, v28, v29);
LABEL_13:
  uint64_t v34 = v12[9];
  uint64_t v35 = (void *)((char *)v9 + v34);
  unint64_t v36 = (uint64_t *)(v10 + v34);
  unint64_t v37 = *(void *)((char *)v9 + v34 + 8);
  if (v37 >> 60 != 15)
  {
    unint64_t v38 = v36[1];
    if (v38 >> 60 != 15)
    {
      uint64_t v39 = *v35;
      *uint64_t v35 = *v36;
      v35[1] = v38;
      outlined consume of Data._Representation(v39, v37);
      return a1;
    }
    outlined destroy of Data((uint64_t)v35);
  }
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchToolIntentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2583977D4);
}

uint64_t sub_2583977D4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return OUTLINED_FUNCTION_65_1(*a1);
  }
  uint64_t v7 = type metadata accessor for DialogData(0);
  uint64_t v8 = (uint64_t)a1 + *(int *)(a3 + 24);
  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for SearchToolIntentResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_258397864);
}

void sub_258397864()
{
  OUTLINED_FUNCTION_71_1();
  if (v3)
  {
    *unint64_t v1 = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    OUTLINED_FUNCTION_107_5();
    uint64_t v5 = OUTLINED_FUNCTION_95_0(*(int *)(v4 + 24));
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
}

uint64_t type metadata completion function for SearchToolIntentResponse()
{
  uint64_t result = type metadata accessor for DialogData(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SearchToolIntentController()
{
  return self;
}

uint64_t method lookup function for SearchToolIntentController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SearchToolIntentController);
}

uint64_t dispatch thunk of SearchToolIntentController.__allocating_init(omniSearchService:hallucinationMitigator:metricsLogger:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SearchToolIntentController.perform(request:)()
{
  OUTLINED_FUNCTION_27_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v0 + 112) + **(int **)(*(void *)v0 + 112));
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_26_1(v5);
  *uint64_t v6 = v7;
  v6[1] = AnswerSynthesisModelServer.synthesizeWithOverride_runnable(_:bindings:);
  return v9(v4, v2);
}

uint64_t dispatch thunk of DisambiguationRequestable.requestDisambiguation(among:dialogData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + **(int **)(a5 + 8));
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_26_1(v10);
  *uint64_t v11 = v12;
  v11[1] = AnswerSynthesisModelServer.synthesizeWithTemplate_runnable(_:bindings:);
  return v14(a1, a2, a3, a4, a5);
}

unsigned char *storeEnumTagSinglePayload for SearchToolClientType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x258397C74);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchToolClientType()
{
  return &type metadata for SearchToolClientType;
}

uint64_t sub_258397CAC()
{
  return lazy protocol witness table accessor for type [SFResultSection] and conformance [A](&lazy protocol witness table cache variable for type [SearchEntity] and conformance [A], &demangling cache variable for type metadata for [SearchEntity]);
}

uint64_t sub_258397CD4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter(*a1, a2);
}

unint64_t lazy protocol witness table accessor for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel;
  if (!lazy protocol witness table cache variable for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel;
  if (!lazy protocol witness table cache variable for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel;
  if (!lazy protocol witness table cache variable for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolSnippetPluginModel and conformance SearchToolSnippetPluginModel);
  }
  return result;
}

uint64_t outlined init with copy of StructuredQueryEntity?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_51_2();
  v4();
  return a2;
}

unint64_t lazy protocol witness table accessor for type [SearchCATEntity] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SearchCATEntity] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SearchCATEntity] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchCATEntity]);
    _s10OmniSearch0B6ResultVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SearchCATEntity] and conformance <A> [A]);
  }
  return result;
}

uint64_t _s10OmniSearch0B6ResultVACSEAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_7_19()
{
  return *(void *)(v0 - 192);
}

uint64_t OUTLINED_FUNCTION_17_14()
{
  uint64_t v3 = v0[205];
  *(void *)(v1 - 200) = v0[206];
  *(void *)(v1 - 192) = v3;
  uint64_t v4 = v0[202];
  *(void *)(v1 - 184) = v0[204];
  *(void *)(v1 - 176) = v4;
  uint64_t v5 = v0[200];
  *(void *)(v1 - 168) = v0[201];
  *(void *)(v1 - 160) = v5;
  uint64_t v6 = v0[197];
  *(void *)(v1 - 152) = v0[198];
  *(void *)(v1 - 144) = v6;
  uint64_t v7 = v0[195];
  *(void *)(v1 - 136) = v0[196];
  *(void *)(v1 - 128) = v7;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_19_15@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 88) = a1;
  return *(void *)(v1 + 2064);
}

uint64_t OUTLINED_FUNCTION_21_16()
{
  return *(void *)(v0 + 104);
}

uint64_t OUTLINED_FUNCTION_24_17(uint64_t result)
{
  v1[6] = v2;
  v1[10] = result;
  v1[11] = 0x6974736575517369;
  v1[12] = 0xEF79726575516E6FLL;
  return result;
}

uint64_t OUTLINED_FUNCTION_25_15()
{
  type metadata accessor for DialogData(0);
  return type metadata accessor for _SpeakableString();
}

uint64_t OUTLINED_FUNCTION_31_13()
{
  return *(void *)(v0 + 2064);
}

uint64_t OUTLINED_FUNCTION_34_13()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

char *OUTLINED_FUNCTION_35_12@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

char *OUTLINED_FUNCTION_36_12@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

char *OUTLINED_FUNCTION_37_13@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_42_9(uint64_t a1@<X8>)
{
  *uint64_t v2 = a1;
  v2[1] = (v1 - 32) | 0x8000000000000000;
}

void OUTLINED_FUNCTION_44_13()
{
  *(void *)(v2 - 192) = v1[259];
  *(void *)(v2 - 184) = v0;
  uint64_t v3 = v1[209];
  *(void *)(v2 - 144) = v1[201];
  *(void *)(v2 - 136) = v1[199];
  *(void *)(v2 - 128) = v3;
}

__n128 *OUTLINED_FUNCTION_47_9(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x7265755172657375;
  result[2].n128_u64[1] = 0xE900000000000079;
  return result;
}

void OUTLINED_FUNCTION_50_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_52_8()
{
  *(void *)(v2 + *(int *)(v0 + 24)) = v1;
  uint64_t v3 = (void *)(v2 + *(int *)(v0 + 28));
  *uint64_t v3 = 0;
  v3[1] = 0;
}

uint64_t OUTLINED_FUNCTION_53_8@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  int v1 = a1 - 1;
  if (v1 < 0) {
    int v1 = -1;
  }
  return (v1 + 1);
}

uint64_t OUTLINED_FUNCTION_55_8()
{
  return v0;
}

void OUTLINED_FUNCTION_60_6()
{
  *int v1 = 0;
  v1[1] = 0;
  *(void *)((char *)v1 + *(int *)(v0 + 24)) = 0;
}

uint64_t OUTLINED_FUNCTION_62_6(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

BOOL OUTLINED_FUNCTION_63_5(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_69_6@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = v1;
  *(void *)(v2 - 152) = *(void *)(a1 + 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_71_5()
{
  return *(void *)(v0 - 272);
}

uint64_t OUTLINED_FUNCTION_74_5(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_75_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_76_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_79_4(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_80_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_83_2()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_85_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_86_4(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t OUTLINED_FUNCTION_89_1(uint64_t a1)
{
  return outlined init with take of EagerResolutionService?(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_92_5()
{
  return type metadata accessor for SearchToolIntentRequest(0);
}

void OUTLINED_FUNCTION_94_6(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_95_4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_96_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

void OUTLINED_FUNCTION_104_5()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_105_5()
{
  return type metadata accessor for SearchToolIntentResponse(0);
}

uint64_t OUTLINED_FUNCTION_106_5()
{
  return type metadata accessor for DialogData(0);
}

uint64_t OUTLINED_FUNCTION_107_5()
{
  return type metadata accessor for DialogData(0);
}

void OUTLINED_FUNCTION_110_4()
{
  uint64_t v2 = *(void *)(v0 + 2136);
  *(void *)(v1 - 176) = *(void *)(v0 + 2192);
  *(void *)(v1 - 168) = v2;
}

uint64_t OUTLINED_FUNCTION_113_5()
{
  uint64_t v3 = *(void *)(v0 + 24);
  *(void *)(v1 - 104) = *(void *)(v0 + 32);
  return __swift_mutable_project_boxed_opaque_existential_1(v0, v3);
}

uint64_t OUTLINED_FUNCTION_117_2()
{
  return v0;
}

_WORD *OUTLINED_FUNCTION_119_3(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_120_4()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_122_2@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 328) = a1;
  return 0;
}

uint64_t static StructuredQueryEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static StructuredQueryEntity.typeDisplayRepresentation, a1);
}

uint64_t StructuredQueryEntity.isQuestion.getter()
{
  type metadata accessor for StructuredQueryEntity(0);
  OUTLINED_FUNCTION_58_2();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for StructuredQueryEntity(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for StructuredQueryEntity);
}

uint64_t StructuredQueryEntity.isQuestion.setter()
{
  return OUTLINED_FUNCTION_40_10();
}

uint64_t (*StructuredQueryEntity.isQuestion.modify())()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$isQuestion.getter()
{
  return StructuredQueryEntity.$isQuestion.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_84_5();
  v1(v0);
  OUTLINED_FUNCTION_58_2();
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.returnType.getter()
{
  type metadata accessor for StructuredQueryEntity(0);
  OUTLINED_FUNCTION_19_6();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for StructuredQueryEntity.returnType : StructuredQueryEntity()
{
  return StructuredQueryEntity.returnType.setter();
}

uint64_t StructuredQueryEntity.returnType.setter()
{
  return OUTLINED_FUNCTION_35_13();
}

uint64_t (*StructuredQueryEntity.returnType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$returnType.getter()
{
  return StructuredQueryEntity.$returnType.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_84_5();
  v1(v0);
  OUTLINED_FUNCTION_19_6();
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.objectType.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

uint64_t key path getter for StructuredQueryEntity.objectType : StructuredQueryEntity@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = StructuredQueryEntity.objectType.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for StructuredQueryEntity.objectType : StructuredQueryEntity()
{
  return StructuredQueryEntity.objectType.setter();
}

uint64_t StructuredQueryEntity.objectType.setter()
{
  return OUTLINED_FUNCTION_40_10();
}

uint64_t (*StructuredQueryEntity.objectType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$objectType.getter()
{
  return StructuredQueryEntity.$objectType.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_84_5();
  v1(v0);
  OUTLINED_FUNCTION_17_7();
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.utType.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

uint64_t key path getter for StructuredQueryEntity.utType : StructuredQueryEntity@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = StructuredQueryEntity.utType.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for StructuredQueryEntity.utType : StructuredQueryEntity()
{
  return StructuredQueryEntity.utType.setter();
}

uint64_t StructuredQueryEntity.utType.setter()
{
  return OUTLINED_FUNCTION_40_10();
}

uint64_t (*StructuredQueryEntity.utType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$utType.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.sortOrder.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

uint64_t key path getter for StructuredQueryEntity.sortOrder : StructuredQueryEntity@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = StructuredQueryEntity.sortOrder.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for StructuredQueryEntity.sortOrder : StructuredQueryEntity()
{
  return StructuredQueryEntity.sortOrder.setter();
}

uint64_t StructuredQueryEntity.sortOrder.setter()
{
  return OUTLINED_FUNCTION_40_10();
}

uint64_t (*StructuredQueryEntity.sortOrder.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$sortOrder.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.temporalReference.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

uint64_t key path getter for StructuredQueryEntity.temporalReference : StructuredQueryEntity@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = StructuredQueryEntity.temporalReference.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for StructuredQueryEntity.temporalReference : StructuredQueryEntity()
{
  return StructuredQueryEntity.temporalReference.setter();
}

uint64_t StructuredQueryEntity.temporalReference.setter()
{
  return OUTLINED_FUNCTION_40_10();
}

uint64_t (*StructuredQueryEntity.temporalReference.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$temporalReference.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.appEntityStatus.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

uint64_t key path getter for StructuredQueryEntity.appEntityStatus : StructuredQueryEntity@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = StructuredQueryEntity.appEntityStatus.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for StructuredQueryEntity.appEntityStatus : StructuredQueryEntity()
{
  return StructuredQueryEntity.appEntityStatus.setter();
}

uint64_t StructuredQueryEntity.appEntityStatus.setter()
{
  return OUTLINED_FUNCTION_40_10();
}

uint64_t (*StructuredQueryEntity.appEntityStatus.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$appEntityStatus.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.searchTerms.getter()
{
  type metadata accessor for StructuredQueryEntity(0);
  OUTLINED_FUNCTION_65_6();
  return v1;
}

uint64_t key path setter for StructuredQueryEntity.searchTerms : StructuredQueryEntity()
{
  return StructuredQueryEntity.searchTerms.setter();
}

uint64_t StructuredQueryEntity.searchTerms.setter()
{
  return OUTLINED_FUNCTION_35_13();
}

uint64_t (*StructuredQueryEntity.searchTerms.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$searchTerms.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.location.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

uint64_t StructuredQueryEntity.location.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationQueryEntity?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_70_6();
  OUTLINED_FUNCTION_110_5();
  EntityProperty.wrappedValue.setter();
  return outlined destroy of SearchResult?(a1, &demangling cache variable for type metadata for LocationQueryEntity?);
}

uint64_t (*StructuredQueryEntity.location.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$location.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.time.getter()
{
  type metadata accessor for StructuredQueryEntity(0);
  OUTLINED_FUNCTION_65_6();
  return v1;
}

uint64_t key path setter for StructuredQueryEntity.time : StructuredQueryEntity()
{
  return StructuredQueryEntity.time.setter();
}

uint64_t StructuredQueryEntity.time.setter()
{
  return OUTLINED_FUNCTION_35_13();
}

uint64_t (*StructuredQueryEntity.time.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$time.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.person.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

uint64_t key path setter for StructuredQueryEntity.location : StructuredQueryEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_15();
  uint64_t v13 = v12 - v11;
  outlined init with copy of PQAVerificationModelProtocol?(a1, v12 - v11, a5);
  return a6(v13);
}

uint64_t StructuredQueryEntity.person.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonQueryEntity?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_70_6();
  OUTLINED_FUNCTION_110_5();
  EntityProperty.wrappedValue.setter();
  return outlined destroy of SearchResult?(a1, &demangling cache variable for type metadata for PersonQueryEntity?);
}

uint64_t (*StructuredQueryEntity.person.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$person.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.tagName.getter()
{
  type metadata accessor for StructuredQueryEntity(0);
  OUTLINED_FUNCTION_65_6();
  return v1;
}

uint64_t key path setter for StructuredQueryEntity.tagName : StructuredQueryEntity()
{
  return StructuredQueryEntity.tagName.setter();
}

uint64_t StructuredQueryEntity.tagName.setter()
{
  return OUTLINED_FUNCTION_35_13();
}

uint64_t (*StructuredQueryEntity.tagName.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$tagName.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.flagColor.getter()
{
  type metadata accessor for StructuredQueryEntity(0);
  OUTLINED_FUNCTION_65_6();
  return v1;
}

uint64_t key path setter for StructuredQueryEntity.flagColor : StructuredQueryEntity()
{
  return StructuredQueryEntity.flagColor.setter();
}

uint64_t StructuredQueryEntity.flagColor.setter()
{
  return OUTLINED_FUNCTION_35_13();
}

uint64_t (*StructuredQueryEntity.flagColor.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$flagColor.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.mediaType.getter()
{
  type metadata accessor for StructuredQueryEntity(0);
  OUTLINED_FUNCTION_65_6();
  return v1;
}

uint64_t key path setter for StructuredQueryEntity.mediaType : StructuredQueryEntity()
{
  return StructuredQueryEntity.mediaType.setter();
}

uint64_t StructuredQueryEntity.mediaType.setter()
{
  return OUTLINED_FUNCTION_35_13();
}

uint64_t (*StructuredQueryEntity.mediaType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$mediaType.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t StructuredQueryEntity.sourceDocumentUtType.getter()
{
  type metadata accessor for StructuredQueryEntity(0);
  OUTLINED_FUNCTION_65_6();
  return v1;
}

uint64_t key path setter for StructuredQueryEntity.sourceDocumentUtType : StructuredQueryEntity()
{
  return StructuredQueryEntity.sourceDocumentUtType.setter();
}

uint64_t StructuredQueryEntity.sourceDocumentUtType.setter()
{
  return OUTLINED_FUNCTION_35_13();
}

uint64_t (*StructuredQueryEntity.sourceDocumentUtType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_13_22((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t StructuredQueryEntity.$sourceDocumentUtType.getter()
{
  return EntityProperty.projectedValue.getter();
}

void StructuredQueryEntity.init()()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_12_7();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_19_12();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_50_6();
  uint64_t v8 = OUTLINED_FUNCTION_27_14();
  OUTLINED_FUNCTION_16_16(v8);
  uint64_t Entity = (int *)type metadata accessor for StructuredQueryEntity(0);
  uint64_t v10 = Entity[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Bool>);
  OUTLINED_FUNCTION_20_13();
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(v2 + v10) = MEMORY[0x25A2C4910](v0);
  uint64_t v11 = Entity[6];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[ReturnType]?>);
  OUTLINED_FUNCTION_20_13();
  OUTLINED_FUNCTION_230();
  lazy protocol witness table accessor for type ReturnType and conformance ReturnType();
  OUTLINED_FUNCTION_92_2();
  *(void *)(v2 + v11) = v12;
  uint64_t v13 = Entity[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<ObjectType?>);
  OUTLINED_FUNCTION_20_13();
  OUTLINED_FUNCTION_230();
  lazy protocol witness table accessor for type ObjectType and conformance ObjectType();
  OUTLINED_FUNCTION_92_2();
  *(void *)(v2 + v13) = v14;
  uint64_t v15 = Entity[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<EntityUTType?>);
  OUTLINED_FUNCTION_20_13();
  LocalizedStringResource.init(stringLiteral:)();
  unint64_t v16 = lazy protocol witness table accessor for type EntityUTType and conformance EntityUTType();
  *(void *)(v2 + v15) = MEMORY[0x25A2C4880](v0, v16);
  uint64_t v17 = Entity[9];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<SortOrder?>);
  LocalizedStringResource.init(stringLiteral:)();
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  OUTLINED_FUNCTION_92_2();
  *(void *)(v2 + v17) = v18;
  uint64_t v19 = Entity[10];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<TemporalReference?>);
  OUTLINED_FUNCTION_50_6();
  lazy protocol witness table accessor for type TemporalReference and conformance TemporalReference();
  OUTLINED_FUNCTION_92_2();
  *(void *)(v2 + v19) = v20;
  uint64_t v21 = Entity[11];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<AppEntityStatus?>);
  OUTLINED_FUNCTION_81_5();
  lazy protocol witness table accessor for type AppEntityStatus and conformance AppEntityStatus();
  OUTLINED_FUNCTION_92_2();
  *(void *)(v2 + v21) = v22;
  uint64_t v23 = Entity[12];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]>);
  OUTLINED_FUNCTION_20_13();
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(v2 + v23) = MEMORY[0x25A2C4900](v0);
  uint64_t v24 = Entity[13];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<LocationQueryEntity?>);
  OUTLINED_FUNCTION_20_13();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v25 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
  *(void *)(v2 + v24) = MEMORY[0x25A2C4890](v0, v25);
  uint64_t v26 = Entity[14];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]?>);
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(v2 + v26) = MEMORY[0x25A2C4900](v0);
  uint64_t v27 = Entity[15];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<PersonQueryEntity?>);
  OUTLINED_FUNCTION_20_13();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v28 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
  *(void *)(v2 + v27) = MEMORY[0x25A2C4890](v0, v28);
  uint64_t v29 = Entity[16];
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(v2 + v29) = MEMORY[0x25A2C4900](v0);
  uint64_t v30 = Entity[17];
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(v2 + v30) = MEMORY[0x25A2C4900](v0);
  uint64_t v31 = Entity[18];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[MediaType]?>);
  OUTLINED_FUNCTION_20_13();
  LocalizedStringResource.init(stringLiteral:)();
  lazy protocol witness table accessor for type MediaType and conformance MediaType();
  OUTLINED_FUNCTION_92_2();
  *(void *)(v2 + v31) = v32;
  uint64_t v33 = Entity[19];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[EntityUTType]?>);
  OUTLINED_FUNCTION_50_6();
  *(void *)(v2 + v33) = MEMORY[0x25A2C4880](v0, v16);
  EntityProperty.wrappedValue.setter();
  EntityProperty.wrappedValue.setter();
  OUTLINED_FUNCTION_119_0();
}

unint64_t lazy protocol witness table accessor for type ReturnType and conformance ReturnType()
{
  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReturnType and conformance ReturnType;
  if (!lazy protocol witness table cache variable for type ReturnType and conformance ReturnType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReturnType and conformance ReturnType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ObjectType and conformance ObjectType()
{
  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObjectType and conformance ObjectType;
  if (!lazy protocol witness table cache variable for type ObjectType and conformance ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectType and conformance ObjectType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EntityUTType and conformance EntityUTType()
{
  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType;
  if (!lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityUTType and conformance EntityUTType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SortOrder and conformance SortOrder()
{
  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TemporalReference and conformance TemporalReference()
{
  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference;
  if (!lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalReference and conformance TemporalReference);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AppEntityStatus and conformance AppEntityStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus;
  if (!lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppEntityStatus and conformance AppEntityStatus);
  }
  return result;
}

uint64_t type metadata accessor for LocationQueryEntity(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for LocationQueryEntity);
}

uint64_t lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PersonQueryEntity(uint64_t a1)
{
  return type metadata accessor for ResultsDialog(a1, (uint64_t *)&type metadata singleton initialization cache for PersonQueryEntity);
}

unint64_t lazy protocol witness table accessor for type MediaType and conformance MediaType()
{
  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MediaType and conformance MediaType;
  if (!lazy protocol witness table cache variable for type MediaType and conformance MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MediaType and conformance MediaType);
  }
  return result;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance StructuredQueryEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance StructuredQueryEntity()
{
  lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
  return UUID.init()();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance StructuredQueryEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance StructuredQueryEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t static LocationQueryEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static LocationQueryEntity.typeDisplayRepresentation, a1);
}

uint64_t LocationQueryEntity.unspecified.getter()
{
  type metadata accessor for LocationQueryEntity(0);
  OUTLINED_FUNCTION_58_2();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t LocationQueryEntity.unspecified.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*LocationQueryEntity.unspecified.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_90_3((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t LocationQueryEntity.$unspecified.getter()
{
  return StructuredQueryEntity.$isQuestion.getter();
}

uint64_t LocationQueryEntity.arrival.getter()
{
  type metadata accessor for LocationQueryEntity(0);
  OUTLINED_FUNCTION_19_6();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t LocationQueryEntity.arrival.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*LocationQueryEntity.arrival.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_90_3((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t LocationQueryEntity.$arrival.getter()
{
  return StructuredQueryEntity.$returnType.getter();
}

uint64_t LocationQueryEntity.departure.getter()
{
  type metadata accessor for LocationQueryEntity(0);
  OUTLINED_FUNCTION_17_7();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for LocationQueryEntity.unspecified : LocationQueryEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t LocationQueryEntity.departure.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*LocationQueryEntity.departure.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_90_3((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t LocationQueryEntity.$departure.getter()
{
  return StructuredQueryEntity.$objectType.getter();
}

uint64_t LocationQueryEntity.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_12_7();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_19_12();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_80_6();
  uint64_t v8 = OUTLINED_FUNCTION_27_14();
  OUTLINED_FUNCTION_16_16(v8);
  uint64_t Entity = (int *)type metadata accessor for LocationQueryEntity(0);
  uint64_t v10 = Entity[5];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  OUTLINED_FUNCTION_32_11();
  *(void *)(a1 + v10) = MEMORY[0x25A2C4900](v1);
  uint64_t v11 = Entity[6];
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v11) = MEMORY[0x25A2C4900](v1);
  uint64_t v12 = Entity[7];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t result = MEMORY[0x25A2C4900](v1);
  *(void *)(a1 + v12) = result;
  return result;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance LocationQueryEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance LocationQueryEntity()
{
  lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
  return UUID.init()();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance LocationQueryEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance LocationQueryEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t static PersonQueryEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static PersonQueryEntity.typeDisplayRepresentation, a1);
}

uint64_t PersonQueryEntity.unspecified.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

double key path getter for PersonQueryEntity.unspecified : PersonQueryEntity@<D0>(_OWORD *a1@<X8>)
{
  PersonQueryEntity.unspecified.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t PersonQueryEntity.unspecified.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*PersonQueryEntity.unspecified.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_89_2((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonQueryEntity.$unspecified.getter()
{
  return StructuredQueryEntity.$isQuestion.getter();
}

uint64_t PersonQueryEntity.sender.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

double key path getter for PersonQueryEntity.sender : PersonQueryEntity@<D0>(_OWORD *a1@<X8>)
{
  PersonQueryEntity.sender.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t PersonQueryEntity.sender.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*PersonQueryEntity.sender.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_89_2((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonQueryEntity.$sender.getter()
{
  return StructuredQueryEntity.$returnType.getter();
}

uint64_t PersonQueryEntity.receiver.getter()
{
  return OUTLINED_FUNCTION_24_15();
}

double key path getter for PersonQueryEntity.receiver : PersonQueryEntity@<D0>(_OWORD *a1@<X8>)
{
  PersonQueryEntity.receiver.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for PersonQueryEntity.unspecified : PersonQueryEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *))
{
  uint64_t v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  outlined copy of Person?(v8[0]);
  return a5(v8);
}

uint64_t PersonQueryEntity.receiver.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*PersonQueryEntity.receiver.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_89_2((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t PersonQueryEntity.$receiver.getter()
{
  return StructuredQueryEntity.$objectType.getter();
}

uint64_t PersonQueryEntity.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_12_7();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_19_12();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_81_5();
  uint64_t v8 = OUTLINED_FUNCTION_27_14();
  OUTLINED_FUNCTION_16_16(v8);
  uint64_t Entity = (int *)type metadata accessor for PersonQueryEntity(0);
  uint64_t v10 = Entity[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Person?>);
  OUTLINED_FUNCTION_32_11();
  unint64_t v11 = lazy protocol witness table accessor for type Person and conformance Person();
  *(void *)(a1 + v10) = MEMORY[0x25A2C4890](v1, v11);
  uint64_t v12 = Entity[6];
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v12) = MEMORY[0x25A2C4890](v1, v11);
  uint64_t v13 = Entity[7];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t result = MEMORY[0x25A2C4890](v1, v11);
  *(void *)(a1 + v13) = result;
  return result;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance PersonQueryEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance PersonQueryEntity()
{
  lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
  return UUID.init()();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance PersonQueryEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance PersonQueryEntity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t static ObjectType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static ObjectType.typeDisplayRepresentation, a1);
}

void static ObjectType.caseDisplayRepresentations.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_17_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ObjectType, DisplayRepresentation)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ObjectType, DisplayRepresentation));
  OUTLINED_FUNCTION_18_14();
  uint64_t v10 = *(void *)(v9 + 72);
  OUTLINED_FUNCTION_46_9();
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_7_20(v12, (__n128)xmmword_25866B690);
  OUTLINED_FUNCTION_105_6();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v11 = OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_33_11();
  OUTLINED_FUNCTION_45_9();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 2 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_16_17();
  OUTLINED_FUNCTION_105_6();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_30_16();
  OUTLINED_FUNCTION_105_6();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_24_18();
  OUTLINED_FUNCTION_105_6();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(6);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_19_16();
  OUTLINED_FUNCTION_73_3();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_29_15();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  *(unsigned char *)(v2 + 9 * v10) = 9;
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v11);
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type ObjectType and conformance ObjectType();
  OUTLINED_FUNCTION_95_5();
  OUTLINED_FUNCTION_119_0();
}

OmniSearch::ObjectType_optional __swiftcall ObjectType.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_59_8();
  v4._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ObjectType.init(rawValue:), v4);
  result.value = OUTLINED_FUNCTION_44_11();
  char v6 = 10;
  if (v3 < 0xA) {
    char v6 = v3;
  }
  *uint64_t v2 = v6;
  return result;
}

void *static ObjectType.allCases.getter()
{
  return &outlined read-only object #0 of static ObjectType.allCases.getter;
}

uint64_t ObjectType.rawValue.getter()
{
  uint64_t result = 0x746E657665;
  switch(*v0)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_55_9();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_93_5();
      break;
    case 3:
      uint64_t result = 0x736552746E657665;
      break;
    case 4:
      uint64_t result = 0x746F48746E657665;
      break;
    case 5:
      uint64_t result = 0x696C46746E657665;
      break;
    case 6:
      uint64_t result = 0x7372655064726163;
      break;
    case 7:
      uint64_t result = OUTLINED_FUNCTION_74_6(1953458288);
      break;
    case 8:
      uint64_t result = OUTLINED_FUNCTION_28_11();
      break;
    case 9:
      uint64_t result = 0x616964656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ObjectType()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ObjectType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ObjectType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ObjectType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::ObjectType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ObjectType(Swift::String *a1)
{
  return ObjectType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ObjectType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ObjectType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance ObjectType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ObjectType and conformance ObjectType();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance ObjectType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ObjectType and conformance ObjectType();
  return MEMORY[0x270EE1C28](a1, v2);
}

void protocol witness for static CaseIterable.allCases.getter in conformance ObjectType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ObjectType.allCases.getter;
}

uint64_t static SortOrder.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static SortOrder.typeDisplayRepresentation, a1);
}

void static SortOrder.caseDisplayRepresentations.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_17_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(SortOrder, DisplayRepresentation)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SortOrder, DisplayRepresentation));
  OUTLINED_FUNCTION_18_14();
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = (__n128 *)OUTLINED_FUNCTION_34_14();
  OUTLINED_FUNCTION_7_20(v11, (__n128)xmmword_258661D70);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_1_16();
  *(unsigned char *)(v2 + v10) = 1;
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 2 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v12);
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  OUTLINED_FUNCTION_107_6();
  OUTLINED_FUNCTION_119_0();
}

OmniSearch::SortOrder_optional __swiftcall SortOrder.init(rawValue:)(Swift::String rawValue)
{
  return (OmniSearch::SortOrder_optional)SortOrder.init(rawValue:)();
}

void *static SortOrder.allCases.getter()
{
  return &outlined read-only object #0 of static SortOrder.allCases.getter;
}

uint64_t SortOrder.rawValue.getter()
{
  uint64_t v1 = 1954047342;
  if (*v0 != 1) {
    uint64_t v1 = 0x7473726966;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1953718636;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SortOrder(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SortOrder()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SortOrder(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SortOrder(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

OmniSearch::SortOrder_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SortOrder(Swift::String *a1)
{
  return SortOrder.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SortOrder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SortOrder.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance SortOrder(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SortOrder(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  return MEMORY[0x270EE1C28](a1, v2);
}

void protocol witness for static CaseIterable.allCases.getter in conformance SortOrder(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SortOrder.allCases.getter;
}

uint64_t static TemporalReference.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static TemporalReference.typeDisplayRepresentation, a1);
}

void static TemporalReference.caseDisplayRepresentations.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_17_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(TemporalReference, DisplayRepresentation)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TemporalReference, DisplayRepresentation));
  OUTLINED_FUNCTION_18_14();
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = (__n128 *)OUTLINED_FUNCTION_34_14();
  OUTLINED_FUNCTION_7_20(v11, (__n128)xmmword_258661D70);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 2 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v12);
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type TemporalReference and conformance TemporalReference();
  OUTLINED_FUNCTION_107_6();
  OUTLINED_FUNCTION_119_0();
}

OmniSearch::TemporalReference_optional __swiftcall TemporalReference.init(rawValue:)(Swift::String rawValue)
{
  return (OmniSearch::TemporalReference_optional)SortOrder.init(rawValue:)();
}

void *static TemporalReference.allCases.getter()
{
  return &outlined read-only object #0 of static TemporalReference.allCases.getter;
}

uint64_t TemporalReference.rawValue.getter()
{
  uint64_t v1 = 1953718640;
  if (*v0 != 1) {
    uint64_t v1 = 0x6669636570736E75;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x657275747566;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TemporalReference(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TemporalReference()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TemporalReference(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance TemporalReference(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

OmniSearch::TemporalReference_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TemporalReference(Swift::String *a1)
{
  return TemporalReference.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TemporalReference@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TemporalReference.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance TemporalReference(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TemporalReference and conformance TemporalReference();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance TemporalReference(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TemporalReference and conformance TemporalReference();
  return MEMORY[0x270EE1C28](a1, v2);
}

void protocol witness for static CaseIterable.allCases.getter in conformance TemporalReference(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static TemporalReference.allCases.getter;
}

uint64_t Person.name.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for Person.name : Person@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Person.name.getter();
  *a1 = result;
  return result;
}

uint64_t Person.name.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*Person.name.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t Person.$name.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t Person.contactHandleType.getter()
{
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for Person.contactHandleType : Person@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Person.contactHandleType.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for Person.name : Person(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t Person.contactHandleType.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t (*Person.contactHandleType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  *uint64_t v0 = v1;
  v1[4] = EntityProperty.wrappedValue.modify();
  return MemoryCreationQUResult.version.modify;
}

uint64_t Person.$contactHandleType.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t static Person.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Person.typeDisplayRepresentation);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static Person.typeDisplayRepresentation.setter(uint64_t a1)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Person.typeDisplayRepresentation);
  swift_beginAccess();
  OUTLINED_FUNCTION_30_2();
  uint64_t v5 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v2);
}

uint64_t (*static Person.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static Person.typeDisplayRepresentation);
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

void Person.displayRepresentation.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = (void *)0xEE006E6F73726550;
  uint64_t v3 = 0x206E776F6E6B6E55;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_16();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = OUTLINED_FUNCTION_19_12();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_97_1();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.getter();
  swift_release();
  swift_release();
  if (v16)
  {
    if (v16[2])
    {
      uint64_t v3 = v16[4];
      uint64_t v2 = (void *)v16[5];
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
  }
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v12);
  v13._countAndFlagsBits = v3;
  v13._object = v2;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v14);
  LocalizedStringResource.init(stringInterpolation:)();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v8);
  uint64_t v15 = type metadata accessor for DisplayRepresentation.Image();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v15);
  DisplayRepresentation.init(title:subtitle:image:)();
  OUTLINED_FUNCTION_119_0();
}

void Person.init()(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]?>);
  OUTLINED_FUNCTION_20_13();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v5 = MEMORY[0x25A2C4900](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[ContactHandleType]?>);
  OUTLINED_FUNCTION_80_6();
  lazy protocol witness table accessor for type ContactHandleType and conformance ContactHandleType();
  OUTLINED_FUNCTION_92_2();
  *a1 = v5;
  a1[1] = v6;
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance Person(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Person and conformance Person();
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance Person()
{
  lazy protocol witness table accessor for type Person and conformance Person();
  return UUID.init()();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance Person(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Person and conformance Person();
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance Person(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Person and conformance Person();
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t static ContactHandleType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static ContactHandleType.typeDisplayRepresentation, a1);
}

void static ContactHandleType.caseDisplayRepresentations.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_17_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ContactHandleType, DisplayRepresentation)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ContactHandleType, DisplayRepresentation));
  OUTLINED_FUNCTION_18_14();
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = (__n128 *)OUTLINED_FUNCTION_34_14();
  OUTLINED_FUNCTION_7_20(v11, (__n128)xmmword_258661D70);
  OUTLINED_FUNCTION_68_6();
  uint64_t v12 = OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  *(unsigned char *)(v2 + 2 * v10) = 2;
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v12);
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type ContactHandleType and conformance ContactHandleType();
  OUTLINED_FUNCTION_107_6();
  OUTLINED_FUNCTION_119_0();
}

OmniSearch::ContactHandleType_optional __swiftcall ContactHandleType.init(rawValue:)(Swift::String rawValue)
{
  return (OmniSearch::ContactHandleType_optional)SortOrder.init(rawValue:)();
}

uint64_t SortOrder.init(rawValue:)()
{
  OUTLINED_FUNCTION_59_8();
  v4._rawValue = v3;
  v5._object = v0;
  _findStringSwitchCase(cases:string:)(v4, v5);
  uint64_t result = OUTLINED_FUNCTION_44_11();
  char v7 = 3;
  if (v2 < 3) {
    char v7 = v2;
  }
  *uint64_t v1 = v7;
  return result;
}

void *static ContactHandleType.allCases.getter()
{
  return &outlined read-only object #0 of static ContactHandleType.allCases.getter;
}

uint64_t ContactHandleType.rawValue.getter()
{
  uint64_t v1 = 0x6C69616D65;
  if (*v0 != 1) {
    uint64_t v1 = 0x656D697465636166;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656E6F6870;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactHandleType(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContactHandleType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactHandleType(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactHandleType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::ContactHandleType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactHandleType(Swift::String *a1)
{
  return ContactHandleType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactHandleType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactHandleType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance ContactHandleType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactHandleType and conformance ContactHandleType();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance ContactHandleType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContactHandleType and conformance ContactHandleType();
  return MEMORY[0x270EE1C28](a1, v2);
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactHandleType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactHandleType.allCases.getter;
}

uint64_t static MediaType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static MediaType.typeDisplayRepresentation, a1);
}

void static MediaType.caseDisplayRepresentations.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_17_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MediaType, DisplayRepresentation)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MediaType, DisplayRepresentation));
  OUTLINED_FUNCTION_18_14();
  uint64_t v10 = *(void *)(v9 + 72);
  OUTLINED_FUNCTION_46_9();
  uint64_t v11 = (__n128 *)OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_7_20(v11, (__n128)xmmword_258661C80);
  OUTLINED_FUNCTION_104_6();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + v10));
  OUTLINED_FUNCTION_94_7();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 2 * v10));
  OUTLINED_FUNCTION_103_5();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 3 * v10));
  OUTLINED_FUNCTION_73_3();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 4 * v10));
  OUTLINED_FUNCTION_51_10();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v12);
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type MediaType and conformance MediaType();
  OUTLINED_FUNCTION_107_6();
  OUTLINED_FUNCTION_119_0();
}

OmniSearch::MediaType_optional __swiftcall MediaType.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_59_8();
  v4._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MediaType.init(rawValue:), v4);
  result.value = OUTLINED_FUNCTION_44_11();
  char v6 = 5;
  if (v3 < 5) {
    char v6 = v3;
  }
  *uint64_t v2 = v6;
  return result;
}

void *static MediaType.allCases.getter()
{
  return &outlined read-only object #0 of static MediaType.allCases.getter;
}

unint64_t MediaType.rawValue.getter()
{
  unint64_t result = 0x68736E6565726373;
  switch(*v0)
  {
    case 1:
      unint64_t result = OUTLINED_FUNCTION_71_6();
      break;
    case 2:
      unint64_t result = OUTLINED_FUNCTION_54_7();
      break;
    case 3:
      unint64_t result = OUTLINED_FUNCTION_74_6(1836018803);
      break;
    case 4:
      unint64_t result = 0x566C616974617073;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MediaType(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MediaType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MediaType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MediaType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::MediaType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance MediaType(Swift::String *a1)
{
  return MediaType.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MediaType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MediaType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance MediaType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MediaType and conformance MediaType();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance MediaType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MediaType and conformance MediaType();
  return MEMORY[0x270EE1C28](a1, v2);
}

void protocol witness for static CaseIterable.allCases.getter in conformance MediaType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static MediaType.allCases.getter;
}

uint64_t static AppEntityStatus.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static AppEntityStatus.typeDisplayRepresentation, a1);
}

void static AppEntityStatus.caseDisplayRepresentations.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_17_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AppEntityStatus, DisplayRepresentation)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AppEntityStatus, DisplayRepresentation));
  OUTLINED_FUNCTION_18_14();
  uint64_t v10 = *(void *)(v9 + 72);
  OUTLINED_FUNCTION_46_9();
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_7_20(v12, (__n128)xmmword_258662FF0);
  OUTLINED_FUNCTION_99_5();
  uint64_t v11 = OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_33_11();
  OUTLINED_FUNCTION_98_5();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 2 * v10));
  OUTLINED_FUNCTION_96_4();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 3 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 4 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_24_18();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_67_6(6);
  OUTLINED_FUNCTION_96_4();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 7 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 8 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  *(unsigned char *)(v2 + 9 * v10) = 9;
  OUTLINED_FUNCTION_96_4();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(10);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_36_13(11);
  OUTLINED_FUNCTION_99_5();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_36_13(12);
  OUTLINED_FUNCTION_96_4();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(13);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(14);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 15 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 16 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 17 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(18);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(19);
  OUTLINED_FUNCTION_99_5();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(20);
  OUTLINED_FUNCTION_68_6();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_44_14(21);
  OUTLINED_FUNCTION_99_5();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v11);
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type AppEntityStatus and conformance AppEntityStatus();
  OUTLINED_FUNCTION_95_5();
  OUTLINED_FUNCTION_119_0();
}

OmniSearch::AppEntityStatus_optional __swiftcall AppEntityStatus.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 4;
  switch(v3)
  {
    case 0:
      goto LABEL_6;
    case 1:
      char v5 = 1;
      goto LABEL_6;
    case 2:
      char v5 = 2;
      goto LABEL_6;
    case 3:
      char v5 = 3;
LABEL_6:
      char v6 = v5;
      break;
    case 4:
      break;
    case 5:
      char v6 = 5;
      break;
    case 6:
      char v6 = 6;
      break;
    case 7:
      char v6 = 7;
      break;
    case 8:
      char v6 = 8;
      break;
    case 9:
      char v6 = 9;
      break;
    case 10:
      char v6 = 10;
      break;
    case 11:
      char v6 = 11;
      break;
    case 12:
      char v6 = 12;
      break;
    case 13:
      char v6 = 13;
      break;
    case 14:
      char v6 = 14;
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    default:
      char v6 = 22;
      break;
  }
  *uint64_t v2 = v6;
  return result;
}

void *static AppEntityStatus.allCases.getter()
{
  return &outlined read-only object #0 of static AppEntityStatus.allCases.getter;
}

uint64_t AppEntityStatus.rawValue.getter()
{
  uint64_t result = 0x6465766968637261;
  switch(*v0)
  {
    case 1:
      return 0x6B72616D6B6F6F62;
    case 2:
      uint64_t v2 = 1634038371;
      goto LABEL_12;
    case 3:
      return 0x7466617264;
    case 4:
      uint64_t v3 = 1953064037;
      goto LABEL_21;
    case 5:
      return 0x657469726F766166;
    case 6:
      unint64_t v4 = 0x656767616C66;
      return v4 & 0xFFFFFFFFFFFFLL | 0x64000000000000;
    case 7:
      return 0x6564726177726F66;
    case 8:
      return 1802401130;
    case 9:
      uint64_t v2 = 1852404336;
LABEL_12:
      unint64_t v4 = v2 & 0xFFFF0000FFFFFFFFLL | 0x657400000000;
      return v4 & 0xFFFFFFFFFFFFLL | 0x64000000000000;
    case 0xA:
      return 1684104562;
    case 0xB:
      uint64_t v5 = 0x766965636572;
      goto LABEL_25;
    case 0xC:
      unint64_t v4 = 0x65696C706572;
      return v4 & 0xFFFFFFFFFFFFLL | 0x64000000000000;
    case 0xD:
      return 0x6465766173;
    case 0xE:
      return 1953391987;
    case 0xF:
      uint64_t v3 = 1918986355;
      goto LABEL_21;
    case 0x10:
      uint64_t v3 = 1734828404;
LABEL_21:
      uint64_t result = v3 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
      break;
    case 0x11:
      uint64_t result = 0x6873617274;
      break;
    case 0x12:
      uint64_t result = 0x646165726E75;
      break;
    case 0x13:
      uint64_t v5 = 0x747065636361;
LABEL_25:
      uint64_t result = v5 & 0xFFFFFFFFFFFFLL | 0x6465000000000000;
      break;
    case 0x14:
      uint64_t result = OUTLINED_FUNCTION_106_6(1652121965);
      break;
    case 0x15:
      uint64_t result = 0x64656E696C636564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppEntityStatus(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AppEntityStatus()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AppEntityStatus(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AppEntityStatus()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::AppEntityStatus_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AppEntityStatus(Swift::String *a1)
{
  return AppEntityStatus.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AppEntityStatus@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AppEntityStatus.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance AppEntityStatus(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AppEntityStatus and conformance AppEntityStatus();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance AppEntityStatus(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AppEntityStatus and conformance AppEntityStatus();
  return MEMORY[0x270EE1C28](a1, v2);
}

void protocol witness for static CaseIterable.allCases.getter in conformance AppEntityStatus(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static AppEntityStatus.allCases.getter;
}

uint64_t static EntityUTType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static EntityUTType.typeDisplayRepresentation, a1);
}

void static EntityUTType.caseDisplayRepresentations.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_17_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(EntityUTType, DisplayRepresentation)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityUTType, DisplayRepresentation));
  OUTLINED_FUNCTION_18_14();
  uint64_t v10 = *(void *)(v9 + 72);
  OUTLINED_FUNCTION_46_9();
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_7_20(v12, (__n128)xmmword_25866B6A0);
  OUTLINED_FUNCTION_98_5();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v11 = OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_33_11();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_20_15();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_16_17();
  OUTLINED_FUNCTION_92_6();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_30_16();
  OUTLINED_FUNCTION_45_9();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_24_18();
  OUTLINED_FUNCTION_50_13();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(6);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 7 * v10));
  OUTLINED_FUNCTION_68_6();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 8 * v10));
  OUTLINED_FUNCTION_73_3();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 9 * v10));
  OUTLINED_FUNCTION_68_6();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(10);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_44_14(11);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v11);
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type EntityUTType and conformance EntityUTType();
  OUTLINED_FUNCTION_95_5();
  OUTLINED_FUNCTION_119_0();
}

OmniSearch::EntityUTType_optional __swiftcall EntityUTType.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_59_8();
  v4._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of EntityUTType.init(rawValue:), v4);
  result.value = OUTLINED_FUNCTION_44_11();
  char v6 = 12;
  if (v3 < 0xC) {
    char v6 = v3;
  }
  *uint64_t v2 = v6;
  return result;
}

void *static EntityUTType.allCases.getter()
{
  return &outlined read-only object #0 of static EntityUTType.allCases.getter;
}

unint64_t EntityUTType.rawValue.getter()
{
  unint64_t result = 0x6B72616D6B6F6F62;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6873646165727073;
      break;
    case 2:
      unint64_t result = 0x61746E6573657270;
      break;
    case 3:
      unint64_t result = 0x6567617373656DLL;
      break;
    case 4:
      unint64_t result = OUTLINED_FUNCTION_55_9();
      break;
    case 5:
      unint64_t result = OUTLINED_FUNCTION_28_11();
      break;
    case 6:
      unint64_t result = 0x73654D6C69616D65;
      break;
    case 7:
      unint64_t result = OUTLINED_FUNCTION_106_6(1734438249);
      break;
    case 8:
      unint64_t result = OUTLINED_FUNCTION_74_6(1768191329);
      break;
    case 9:
      unint64_t result = OUTLINED_FUNCTION_106_6(1769369453);
      break;
    case 0xA:
      unint64_t result = 6710384;
      break;
    case 0xB:
      unint64_t result = 7367034;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EntityUTType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EntityUTType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EntityUTType(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EntityUTType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::EntityUTType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance EntityUTType(Swift::String *a1)
{
  return EntityUTType.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance EntityUTType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = EntityUTType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance EntityUTType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EntityUTType and conformance EntityUTType();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance EntityUTType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EntityUTType and conformance EntityUTType();
  return MEMORY[0x270EE1C28](a1, v2);
}

void protocol witness for static CaseIterable.allCases.getter in conformance EntityUTType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static EntityUTType.allCases.getter;
}

uint64_t static ReturnType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static SearchPropertyRequest.typeDisplayRepresentation.getter(&one-time initialization token for typeDisplayRepresentation, (uint64_t)static ReturnType.typeDisplayRepresentation, a1);
}

void static ReturnType.caseDisplayRepresentations.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_17_1();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_44_6();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ReturnType, DisplayRepresentation)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ReturnType, DisplayRepresentation));
  OUTLINED_FUNCTION_18_14();
  uint64_t v10 = *(void *)(v9 + 72);
  OUTLINED_FUNCTION_46_9();
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_7_20(v12, (__n128)xmmword_25866B6B0);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v11 = OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_33_11();
  OUTLINED_FUNCTION_50_13();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_20_15();
  OUTLINED_FUNCTION_73_3();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_16_17();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_30_16();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 5 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_23_11(6);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_19_16();
  OUTLINED_FUNCTION_92_6();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_29_15();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 9 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_36_13(10);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(11);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(12);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_23_11(13);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(14);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 15 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  *(unsigned char *)(v2 + 16 * v10) = 16;
  OUTLINED_FUNCTION_68_6();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 17 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(18);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(19);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(20);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(21);
  OUTLINED_FUNCTION_45_9();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(22);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(23);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(24);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(25);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(26);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_23_11(27);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(28);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(29);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(30);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 31 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  *(unsigned char *)(v2 + 32 * v10) = 32;
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_116_4((unsigned char *)(v2 + 33 * v10));
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(34);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(35);
  OUTLINED_FUNCTION_68_6();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(36);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_23_11(37);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_67_6(38);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(39);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_23_11(40);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_23_11(41);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_66_5(42);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(43);
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_23_11(44);
  OUTLINED_FUNCTION_104_6();
  LocalizedStringResource.init(stringLiteral:)();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(45);
  OUTLINED_FUNCTION_94_7();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_66_5(46);
  OUTLINED_FUNCTION_103_5();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_3_21(47);
  OUTLINED_FUNCTION_73_3();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_44_14(48);
  OUTLINED_FUNCTION_51_10();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v11);
  OUTLINED_FUNCTION_24_8();
  type metadata accessor for DisplayRepresentation();
  lazy protocol witness table accessor for type ReturnType and conformance ReturnType();
  OUTLINED_FUNCTION_95_5();
  OUTLINED_FUNCTION_119_0();
}

OmniSearch::ReturnType_optional __swiftcall ReturnType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 31;
  switch(v3)
  {
    case 0:
      goto LABEL_32;
    case 1:
      char v5 = 1;
      goto LABEL_32;
    case 2:
      char v5 = 2;
      goto LABEL_32;
    case 3:
      char v5 = 3;
      goto LABEL_32;
    case 4:
      char v5 = 4;
      goto LABEL_32;
    case 5:
      char v5 = 5;
      goto LABEL_32;
    case 6:
      char v5 = 6;
      goto LABEL_32;
    case 7:
      char v5 = 7;
      goto LABEL_32;
    case 8:
      char v5 = 8;
      goto LABEL_32;
    case 9:
      char v5 = 9;
      goto LABEL_32;
    case 10:
      char v5 = 10;
      goto LABEL_32;
    case 11:
      char v5 = 11;
      goto LABEL_32;
    case 12:
      char v5 = 12;
      goto LABEL_32;
    case 13:
      char v5 = 13;
      goto LABEL_32;
    case 14:
      char v5 = 14;
      goto LABEL_32;
    case 15:
      char v5 = 15;
      goto LABEL_32;
    case 16:
      char v5 = 16;
      goto LABEL_32;
    case 17:
      char v5 = 17;
      goto LABEL_32;
    case 18:
      char v5 = 18;
      goto LABEL_32;
    case 19:
      char v5 = 19;
      goto LABEL_32;
    case 20:
      char v5 = 20;
      goto LABEL_32;
    case 21:
      char v5 = 21;
      goto LABEL_32;
    case 22:
      char v5 = 22;
      goto LABEL_32;
    case 23:
      char v5 = 23;
      goto LABEL_32;
    case 24:
      char v5 = 24;
      goto LABEL_32;
    case 25:
      char v5 = 25;
      goto LABEL_32;
    case 26:
      char v5 = 26;
      goto LABEL_32;
    case 27:
      char v5 = 27;
      goto LABEL_32;
    case 28:
      char v5 = 28;
      goto LABEL_32;
    case 29:
      char v5 = 29;
      goto LABEL_32;
    case 30:
      char v5 = 30;
LABEL_32:
      char v6 = v5;
      break;
    case 31:
      break;
    case 32:
      char v6 = 32;
      break;
    case 33:
      char v6 = 33;
      break;
    case 34:
      char v6 = 34;
      break;
    case 35:
      char v6 = 35;
      break;
    case 36:
      char v6 = 36;
      break;
    case 37:
      char v6 = 37;
      break;
    case 38:
      char v6 = 38;
      break;
    case 39:
      char v6 = 39;
      break;
    case 40:
      char v6 = 40;
      break;
    case 41:
      char v6 = 41;
      break;
    case 42:
      char v6 = 42;
      break;
    case 43:
      char v6 = 43;
      break;
    case 44:
      char v6 = 44;
      break;
    case 45:
      char v6 = 45;
      break;
    case 46:
      char v6 = 46;
      break;
    case 47:
      char v6 = 47;
      break;
    case 48:
      char v6 = 48;
      break;
    default:
      char v6 = 49;
      break;
  }
  *uint64_t v2 = v6;
  return result;
}

void *static ReturnType.allCases.getter()
{
  return &outlined read-only object #0 of static ReturnType.allCases.getter;
}

uint64_t ReturnType.rawValue.getter()
{
  uint64_t result = 1818845549;
  switch(*v0)
  {
    case 1:
      return OUTLINED_FUNCTION_28_11();
    case 2:
      return OUTLINED_FUNCTION_74_6(1953458288);
    case 3:
      uint64_t v2 = 0x416F746F6870;
      return v2 & 0xFFFFFFFFFFFFLL | 0x626C000000000000;
    case 4:
      return 0x79726F6D656DLL;
    case 5:
      return 1702129518;
    case 6:
      return 0x6C6F665F65746F6ELL;
    case 7:
      uint64_t v3 = 0x67617373656DLL;
      return v3 & 0xFFFFFFFFFFFFLL | 0x65000000000000;
    case 8:
      return 0x61737265766E6F63;
    case 9:
    case 0xA:
      return 0x7265646E696D6572;
    case 0xB:
      return 0x746E656D75636F64;
    case 0xC:
      uint64_t v3 = 0x746F6E79656BLL;
      return v3 & 0xFFFFFFFFFFFFLL | 0x65000000000000;
    case 0xD:
      return 0x6C69467365676170;
    case 0xE:
      return 0x46737265626D756ELL;
    case 0xF:
      return 0x69616D6563696F76;
    case 0x10:
      return OUTLINED_FUNCTION_106_6(1852794992);
    case 0x11:
      return 0x6C616E72756F6ALL;
    case 0x12:
      return 0x6D654D6563696F76;
    case 0x13:
      return 1802398060;
    case 0x14:
      return 0x6D726F6665657266;
    case 0x15:
      uint64_t v4 = 0x6361746E6F63;
      goto LABEL_32;
    case 0x16:
      return OUTLINED_FUNCTION_93_5();
    case 0x17:
      return 0x74656C6C6177;
    case 0x18:
      return 1735290739;
    case 0x19:
      return 0x747369747261;
    case 0x1A:
      return 0x6D75626C61;
    case 0x1B:
      uint64_t v2 = 0x41636973756DLL;
      return v2 & 0xFFFFFFFFFFFFLL | 0x626C000000000000;
    case 0x1C:
      return 0x7473696C79616C70;
    case 0x1D:
      uint64_t v4 = 0x736163646F70;
LABEL_32:
      uint64_t result = v4 & 0xFFFFFFFFFFFFLL | 0x74000000000000;
      break;
    case 0x1E:
      uint64_t result = 2003789939;
      break;
    case 0x1F:
      uint64_t result = 0x6174536F69646172;
      break;
    case 0x20:
      uint64_t result = 1937204590;
      break;
    case 0x21:
      uint64_t result = 0x73736572646461;
      break;
    case 0x22:
      uint64_t result = 0x646956636973756DLL;
      break;
    case 0x23:
      uint64_t result = OUTLINED_FUNCTION_106_6(1769369453);
      break;
    case 0x24:
      uint64_t result = 0x6C65746F68;
      break;
    case 0x25:
      uint64_t result = 0x6172756174736572;
      break;
    case 0x26:
      uint64_t result = 0x746867696C66;
      break;
    case 0x27:
      uint64_t result = 0x685374656B636974;
      break;
    case 0x28:
      uint64_t result = 0x725474656B636974;
      break;
    case 0x29:
      uint64_t result = 0x61436C61746E6572;
      break;
    case 0x2A:
      uint64_t result = 0x7974726170;
      break;
    case 0x2B:
      uint64_t result = 0x6D746E696F707061;
      break;
    case 0x2C:
      uint64_t result = 0x68736E6565726373;
      break;
    case 0x2D:
      uint64_t result = OUTLINED_FUNCTION_71_6();
      break;
    case 0x2E:
      uint64_t result = OUTLINED_FUNCTION_54_7();
      break;
    case 0x2F:
      uint64_t result = OUTLINED_FUNCTION_74_6(1836018803);
      break;
    case 0x30:
      uint64_t result = 0x566C616974617073;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReturnType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ReturnType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ReturnType(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReturnType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

OmniSearch::ReturnType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ReturnType(Swift::String *a1)
{
  return ReturnType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ReturnType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ReturnType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance ReturnType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReturnType and conformance ReturnType();
  return MEMORY[0x270EE0C40](a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance ReturnType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReturnType and conformance ReturnType();
  return MEMORY[0x270EE1C28](a1, v2);
}

void protocol witness for static CaseIterable.allCases.getter in conformance ReturnType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ReturnType.allCases.getter;
}

void StructuredQueryEntity.description.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = v1;
  unint64_t v4 = 0xD000000000000011;
  uint64_t v5 = type metadata accessor for CharacterSet();
  uint64_t v122 = *(void *)(v5 - 8);
  uint64_t v123 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  unint64_t v120 = (char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v119 = (char *)&v112 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v121 = (char *)&v112 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonQueryEntity?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  Swift::String v14 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Entity = type metadata accessor for PersonQueryEntity(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_97_1();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationQueryEntity?);
  uint64_t v17 = OUTLINED_FUNCTION_81(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_15();
  uint64_t v118 = v19 - v18;
  uint64_t v124 = type metadata accessor for LocationQueryEntity(0);
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_17_1();
  v130._uint64_t countAndFlagsBits = 0;
  v130._object = (void *)0xE000000000000000;
  uint64_t v21 = type metadata accessor for StructuredQueryEntity(0);
  OUTLINED_FUNCTION_58_2();
  EntityProperty.wrappedValue.getter();
  if (LOBYTE(v129._countAndFlagsBits) == 1)
  {
    v22._uint64_t countAndFlagsBits = 0xD000000000000012;
    v22._object = (void *)0x8000000258680A70;
    String.append(_:)(v22);
  }
  OUTLINED_FUNCTION_38_9();
  uint64_t countAndFlagsBits = v129._countAndFlagsBits;
  uint64_t v117 = v0;
  if (v129._countAndFlagsBits)
  {
    if (*(void *)(v129._countAndFlagsBits + 16))
    {
      unint64_t v114 = v2;
      OUTLINED_FUNCTION_101_5();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_77_5(0x6E7275746572);
      uint64_t v24 = *(void *)(countAndFlagsBits + 16);
      if (v24)
      {
        uint64_t v113 = v14;
        uint64_t v115 = v21;
        uint64_t v116 = v1;
        uint64_t v128 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = 0;
        uint64_t v26 = v128;
        uint64_t v126 = *(void *)(v128 + 16);
        uint64_t v27 = 16 * v126;
        do
        {
          uint64_t v28 = v24;
          unint64_t v29 = v126 + v25;
          char v127 = *(unsigned char *)(countAndFlagsBits + v25 + 32);
          uint64_t v30 = ReturnType.rawValue.getter();
          uint64_t v32 = v31;
          uint64_t v128 = v26;
          if (v29 >= *(void *)(v26 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v26 = v128;
          }
          ++v25;
          *(void *)(v26 + 16) = v29 + 1;
          uint64_t v33 = v26 + v27;
          *(void *)(v33 + 32) = v30;
          *(void *)(v33 + 40) = v32;
          v27 += 16;
          uint64_t v24 = v28;
        }
        while (v28 != v25);
        swift_bridgeObjectRelease();
        unint64_t v4 = 0xD000000000000011;
        uint64_t v21 = v115;
        uint64_t v3 = v116;
        Swift::String v14 = v113;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = MEMORY[0x263F8EE78];
      }
      uint64_t v128 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      uint64_t v34 = OUTLINED_FUNCTION_15_18();
      unint64_t v36 = v35;
      swift_bridgeObjectRelease();
      v37._uint64_t countAndFlagsBits = v34;
      v37._object = v36;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_27_16();
      OUTLINED_FUNCTION_12_20();
      swift_bridgeObjectRelease();
      unint64_t v2 = v114;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  OUTLINED_FUNCTION_38_9();
  int countAndFlagsBits_low = LOBYTE(v129._countAndFlagsBits);
  if (LOBYTE(v129._countAndFlagsBits) != 10)
  {
    OUTLINED_FUNCTION_101_5();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_77_5(0x7463656A626FLL);
    unint64_t v39 = 0xE500000000000000;
    uint64_t v40 = 0x746E657665;
    switch(countAndFlagsBits_low)
    {
      case 1:
        unint64_t v39 = 0xE700000000000000;
        uint64_t v40 = 0x746361746E6F63;
        break;
      case 2:
        unint64_t v39 = 0xE400000000000000;
        uint64_t v40 = 1685217635;
        break;
      case 3:
        unint64_t v39 = 0xEF746E6172756174;
        uint64_t v40 = 0x736552746E657665;
        break;
      case 4:
        uint64_t v40 = 0x746F48746E657665;
        unint64_t v39 = 0xEA00000000006C65;
        break;
      case 5:
        unint64_t v39 = 0xEB00000000746867;
        uint64_t v40 = 0x696C46746E657665;
        break;
      case 6:
        unint64_t v39 = 0xEE0064496C616E6FLL;
        uint64_t v40 = 0x7372655064726163;
        break;
      case 7:
        uint64_t v40 = 0x6F746F6870;
        break;
      case 8:
        uint64_t v40 = 0x7261646E656C6163;
        unint64_t v39 = 0xED0000746E657645;
        break;
      case 9:
        uint64_t v40 = 0x616964656DLL;
        break;
      default:
        break;
    }
    unint64_t v41 = v39;
    String.append(_:)(*(Swift::String *)&v40);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_38_9();
  char v42 = v129._countAndFlagsBits;
  if (LOBYTE(v129._countAndFlagsBits) != 12)
  {
    v129._uint64_t countAndFlagsBits = 0x203A657079547475;
    v129._object = (void *)0xE800000000000000;
    LOBYTE(v128) = v42;
    v43._uint64_t countAndFlagsBits = EntityUTType.rawValue.getter();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  uint64_t v44 = (char *)0xEB00000000203A65;
  OUTLINED_FUNCTION_38_9();
  int v45 = LOBYTE(v129._countAndFlagsBits);
  if (LOBYTE(v129._countAndFlagsBits) != 3)
  {
    v129._uint64_t countAndFlagsBits = 0x6564724F74726F73;
    v129._object = (void *)0xEB00000000203A72;
    unint64_t v46 = 0xE400000000000000;
    uint64_t v47 = 1954047342;
    if (v45 != 1)
    {
      uint64_t v47 = 0x7473726966;
      unint64_t v46 = 0xE500000000000000;
    }
    if (v45) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = 1953718636;
    }
    if (v45) {
      unint64_t v49 = v46;
    }
    else {
      unint64_t v49 = 0xE400000000000000;
    }
    unint64_t v50 = v49;
    String.append(_:)(*(Swift::String *)&v48);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_38_9();
  int v51 = LOBYTE(v129._countAndFlagsBits);
  if (LOBYTE(v129._countAndFlagsBits) != 3)
  {
    OUTLINED_FUNCTION_79_5();
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v129._uint64_t countAndFlagsBits = 0xD000000000000013;
    v129._object = (void *)0x8000000258680A50;
    uint64_t v52 = 1953718640;
    unint64_t v53 = 0xE400000000000000;
    if (v51 != 1)
    {
      uint64_t v52 = 0x6669636570736E75;
      unint64_t v53 = 0xEB00000000646569;
    }
    if (v51) {
      uint64_t v54 = v52;
    }
    else {
      uint64_t v54 = 0x657275747566;
    }
    if (v51) {
      unint64_t v55 = v53;
    }
    else {
      unint64_t v55 = 0xE600000000000000;
    }
    unint64_t v56 = v55;
    String.append(_:)(*(Swift::String *)&v54);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_38_9();
  char v57 = v129._countAndFlagsBits;
  if (LOBYTE(v129._countAndFlagsBits) != 22)
  {
    OUTLINED_FUNCTION_79_5();
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v129._uint64_t countAndFlagsBits = 0xD000000000000011;
    v129._object = (void *)0x8000000258680A30;
    LOBYTE(v128) = v57;
    v58._uint64_t countAndFlagsBits = AppEntityStatus.rawValue.getter();
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  EntityProperty.wrappedValue.getter();
  uint64_t v59 = *(void *)(v129._countAndFlagsBits + 16);
  swift_bridgeObjectRelease();
  if (v59)
  {
    OUTLINED_FUNCTION_100_6();
    swift_bridgeObjectRelease();
    strcpy((char *)&v129, "searchTerms: ");
    HIWORD(v129._object) = -4864;
    EntityProperty.wrappedValue.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    uint64_t v60 = OUTLINED_FUNCTION_15_18();
    uint64_t v62 = v61;
    swift_bridgeObjectRelease();
    v63._uint64_t countAndFlagsBits = v60;
    v63._object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  uint64_t v64 = v118;
  EntityProperty.wrappedValue.getter();
  if (__swift_getEnumTagSinglePayload(v64, 1, v124) == 1)
  {
    outlined destroy of SearchResult?(v64, &demangling cache variable for type metadata for LocationQueryEntity?);
  }
  else
  {
    uint64_t v65 = v14;
    uint64_t v66 = v117;
    outlined init with take of PersonQueryEntity(v64, v117, (void (*)(void))type metadata accessor for LocationQueryEntity);
    EntityProperty.wrappedValue.getter();
    object = v129._object;
    if (v129._object)
    {
      uint64_t v68 = v129._countAndFlagsBits;
      OUTLINED_FUNCTION_100_6();
      swift_bridgeObjectRelease();
      strcpy((char *)&v129, "unspecified: ");
      HIWORD(v129._object) = -4864;
      v69._uint64_t countAndFlagsBits = v68;
      v69._object = object;
      String.append(_:)(v69);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_27_16();
      OUTLINED_FUNCTION_12_20();
      swift_bridgeObjectRelease();
    }
    EntityProperty.wrappedValue.getter();
    uint64_t v70 = v129._object;
    if (v129._object)
    {
      v71._uint64_t countAndFlagsBits = v129._countAndFlagsBits;
      v129._uint64_t countAndFlagsBits = 0x3A6C617669727261;
      v129._object = (void *)0xE900000000000020;
      v71._object = v70;
      String.append(_:)(v71);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_27_16();
      OUTLINED_FUNCTION_12_20();
      swift_bridgeObjectRelease();
    }
    EntityProperty.wrappedValue.getter();
    uint64_t v72 = v129._object;
    Swift::String v14 = v65;
    if (v129._object)
    {
      v73._uint64_t countAndFlagsBits = v129._countAndFlagsBits;
      v129._uint64_t countAndFlagsBits = 0x7275747261706564;
      v129._object = (void *)0xEB00000000203A65;
      v73._object = v72;
      String.append(_:)(v73);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_27_16();
      OUTLINED_FUNCTION_12_20();
      swift_bridgeObjectRelease();
    }
    outlined destroy of PersonQueryEntity(v66, (void (*)(void))type metadata accessor for LocationQueryEntity);
  }
  OUTLINED_FUNCTION_38_9();
  uint64_t v74 = v129._countAndFlagsBits;
  if (v129._countAndFlagsBits)
  {
    v129._uint64_t countAndFlagsBits = 0x203A656D6974;
    v129._object = (void *)0xE600000000000000;
    uint64_t v128 = v74;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_15_18();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_56_6();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  EntityProperty.wrappedValue.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, Entity) == 1)
  {
    outlined destroy of SearchResult?((uint64_t)v14, &demangling cache variable for type metadata for PersonQueryEntity?);
  }
  else
  {
    uint64_t v75 = (void *)0xEB00000000646569;
    uint64_t v76 = 0x6669636570736E55;
    outlined init with take of PersonQueryEntity((uint64_t)v14, (uint64_t)v2, (void (*)(void))type metadata accessor for PersonQueryEntity);
    EntityProperty.wrappedValue.getter();
    if (v129._countAndFlagsBits)
    {
      uint64_t v76 = (uint64_t)v2;
      unint64_t v4 = v21;
      OUTLINED_FUNCTION_102_2(0x6E6F73726570);
      swift_retain();
      EntityProperty.wrappedValue.getter();
      OUTLINED_FUNCTION_69_7();
      if (v128)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
        uint64_t v21 = OUTLINED_FUNCTION_78_5();
        unint64_t v2 = v77;
        swift_bridgeObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_57_6();
      }
      v78._uint64_t countAndFlagsBits = v21;
      v78._object = v2;
      String.append(_:)(v78);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_27_16();
      uint64_t v44 = (char *)v129._object;
      String.append(_:)(v129);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_69_7();
      OUTLINED_FUNCTION_37_14();
    }
    EntityProperty.wrappedValue.getter();
    if (v129._countAndFlagsBits)
    {
      uint64_t v76 = (uint64_t)v2;
      unint64_t v4 = v21;
      OUTLINED_FUNCTION_102_2(0x7265646E6573);
      swift_retain();
      EntityProperty.wrappedValue.getter();
      OUTLINED_FUNCTION_69_7();
      if (v128)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
        uint64_t v21 = OUTLINED_FUNCTION_78_5();
        unint64_t v2 = v79;
        swift_bridgeObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_57_6();
      }
      v80._uint64_t countAndFlagsBits = v21;
      v80._object = v2;
      String.append(_:)(v80);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_27_16();
      uint64_t v44 = (char *)v129._object;
      String.append(_:)(v129);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_69_7();
      OUTLINED_FUNCTION_37_14();
    }
    EntityProperty.wrappedValue.getter();
    if (v129._countAndFlagsBits)
    {
      v129._uint64_t countAndFlagsBits = 0x7265766965636572;
      v129._object = (void *)0xEA0000000000203ALL;
      swift_retain();
      swift_retain();
      EntityProperty.wrappedValue.getter();
      OUTLINED_FUNCTION_69_7();
      if (v128)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
        uint64_t v76 = OUTLINED_FUNCTION_15_18();
        uint64_t v75 = v81;
        swift_bridgeObjectRelease();
      }
      uint64_t v44 = (char *)0xEB00000000203A65;
      v82._uint64_t countAndFlagsBits = v76;
      v82._object = v75;
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_27_16();
      OUTLINED_FUNCTION_12_20();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_69_7();
    }
    outlined destroy of PersonQueryEntity((uint64_t)v2, (void (*)(void))type metadata accessor for PersonQueryEntity);
  }
  OUTLINED_FUNCTION_38_9();
  uint64_t v83 = v129._countAndFlagsBits;
  if (v129._countAndFlagsBits)
  {
    v129._uint64_t countAndFlagsBits = 0x3A656D614E676174;
    v129._object = (void *)0xE900000000000020;
    uint64_t v128 = v83;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_15_18();
    OUTLINED_FUNCTION_91_5();
    OUTLINED_FUNCTION_56_6();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_38_9();
  uint64_t v84 = v129._countAndFlagsBits;
  if (v129._countAndFlagsBits)
  {
    v129._uint64_t countAndFlagsBits = 0x6F6C6F4367616C66;
    v129._object = v44 + 13;
    uint64_t v128 = v84;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_15_18();
    OUTLINED_FUNCTION_91_5();
    OUTLINED_FUNCTION_56_6();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_38_9();
  uint64_t v85 = v129._countAndFlagsBits;
  if (v129._countAndFlagsBits)
  {
    v129._uint64_t countAndFlagsBits = 0x707954616964656DLL;
    v129._object = v44;
    uint64_t v86 = *(void *)(v85 + 16);
    if (v86)
    {
      uint64_t v115 = v21;
      uint64_t v116 = v3;
      OUTLINED_FUNCTION_76_5(MEMORY[0x263F8EE78]);
      uint64_t v87 = 0;
      uint64_t v88 = v128;
      do
      {
        unint64_t v89 = 0xEA0000000000746FLL;
        uint64_t v90 = 0x68736E6565726373;
        switch(*(unsigned char *)(v85 + v87 + 32))
        {
          case 1:
            unint64_t v89 = 0xE600000000000000;
            uint64_t v90 = 0x6569666C6573;
            break;
          case 2:
            unint64_t v89 = 0xE800000000000000;
            uint64_t v90 = 0x616D61726F6E6170;
            break;
          case 3:
            unint64_t v89 = 0xE500000000000000;
            uint64_t v90 = 0x6F6D6F6C73;
            break;
          case 4:
            unint64_t v89 = 0xEC0000006F656469;
            uint64_t v90 = 0x566C616974617073;
            break;
          default:
            break;
        }
        uint64_t v128 = v88;
        unint64_t v91 = *(void *)(v88 + 16);
        if (v91 >= *(void *)(v88 + 24) >> 1)
        {
          OUTLINED_FUNCTION_72_4();
          uint64_t v88 = v128;
        }
        ++v87;
        *(void *)(v88 + 16) = v91 + 1;
        uint64_t v92 = v88 + 16 * v91;
        *(void *)(v92 + 32) = v90;
        *(void *)(v92 + 40) = v89;
      }
      while (v86 != v87);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000011;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v88 = MEMORY[0x263F8EE78];
    }
    uint64_t v128 = v88;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_15_18();
    OUTLINED_FUNCTION_91_5();
    OUTLINED_FUNCTION_56_6();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_38_9();
  uint64_t v93 = v129._countAndFlagsBits;
  if (v129._countAndFlagsBits)
  {
    OUTLINED_FUNCTION_79_5();
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v129._uint64_t countAndFlagsBits = v4 + 3;
    v129._object = (void *)0x8000000258680A10;
    uint64_t v94 = *(void *)(v93 + 16);
    if (v94)
    {
      OUTLINED_FUNCTION_76_5(MEMORY[0x263F8EE78]);
      uint64_t v95 = 0;
      uint64_t v96 = v128;
      do
      {
        unint64_t v97 = 0xE800000000000000;
        unint64_t v98 = 0x6B72616D6B6F6F62;
        switch(*(unsigned char *)(v93 + v95 + 32))
        {
          case 1:
            unint64_t v98 = 0x6873646165727073;
            unint64_t v97 = 0xEB00000000746565;
            break;
          case 2:
            unint64_t v97 = 0xEC0000006E6F6974;
            unint64_t v98 = 0x61746E6573657270;
            break;
          case 3:
            unint64_t v97 = 0xE700000000000000;
            unint64_t v98 = 0x6567617373656DLL;
            break;
          case 4:
            unint64_t v97 = 0xE700000000000000;
            unint64_t v98 = 0x746361746E6F63;
            break;
          case 5:
            unint64_t v98 = 0x7261646E656C6163;
            unint64_t v97 = 0xED0000746E657645;
            break;
          case 6:
            unint64_t v97 = 0xEC00000065676173;
            unint64_t v98 = 0x73654D6C69616D65;
            break;
          case 7:
            unint64_t v97 = 0xE500000000000000;
            uint64_t v99 = 1734438249;
            goto LABEL_111;
          case 8:
            unint64_t v97 = 0xE500000000000000;
            unint64_t v98 = 0x6F69647561;
            break;
          case 9:
            unint64_t v97 = 0xE500000000000000;
            uint64_t v99 = 1769369453;
LABEL_111:
            unint64_t v98 = v99 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
            break;
          case 0xA:
            unint64_t v97 = 0xE300000000000000;
            unint64_t v98 = 6710384;
            break;
          case 0xB:
            unint64_t v97 = 0xE300000000000000;
            unint64_t v98 = 7367034;
            break;
          default:
            break;
        }
        uint64_t v128 = v96;
        unint64_t v100 = *(void *)(v96 + 16);
        if (v100 >= *(void *)(v96 + 24) >> 1)
        {
          OUTLINED_FUNCTION_72_4();
          uint64_t v96 = v128;
        }
        ++v95;
        *(void *)(v96 + 16) = v100 + 1;
        uint64_t v101 = v96 + 16 * v100;
        *(void *)(v101 + 32) = v98;
        *(void *)(v101 + 40) = v97;
      }
      while (v94 != v95);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v96 = MEMORY[0x263F8EE78];
    }
    uint64_t v128 = v96;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    uint64_t v102 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v104 = v103;
    swift_bridgeObjectRelease();
    v105._uint64_t countAndFlagsBits = v102;
    v105._object = v104;
    String.append(_:)(v105);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_16();
    OUTLINED_FUNCTION_12_20();
    swift_bridgeObjectRelease();
  }
  Swift::String v129 = v130;
  static CharacterSet.whitespacesAndNewlines.getter();
  CharacterSet.init(charactersIn:)();
  CharacterSet.union(_:)();
  char v106 = *(void (**)(void))(v122 + 8);
  OUTLINED_FUNCTION_75_4();
  v106();
  OUTLINED_FUNCTION_75_4();
  v106();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v107 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v109 = v108;
  OUTLINED_FUNCTION_75_4();
  v106();
  swift_bridgeObjectRelease();
  v129._uint64_t countAndFlagsBits = 60;
  v129._object = (void *)0xE100000000000000;
  v110._uint64_t countAndFlagsBits = v107;
  v110._object = v109;
  String.append(_:)(v110);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v111._uint64_t countAndFlagsBits = 62;
  v111._object = (void *)0xE100000000000000;
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_119_0();
}

unint64_t lazy protocol witness table accessor for type Person and conformance Person()
{
  unint64_t result = lazy protocol witness table cache variable for type Person and conformance Person;
  if (!lazy protocol witness table cache variable for type Person and conformance Person)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Person and conformance Person);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Person and conformance Person;
  if (!lazy protocol witness table cache variable for type Person and conformance Person)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Person and conformance Person);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Person and conformance Person;
  if (!lazy protocol witness table cache variable for type Person and conformance Person)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Person and conformance Person);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Person and conformance Person;
  if (!lazy protocol witness table cache variable for type Person and conformance Person)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Person and conformance Person);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Person and conformance Person;
  if (!lazy protocol witness table cache variable for type Person and conformance Person)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Person and conformance Person);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Person and conformance Person;
  if (!lazy protocol witness table cache variable for type Person and conformance Person)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Person and conformance Person);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Person and conformance Person;
  if (!lazy protocol witness table cache variable for type Person and conformance Person)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Person and conformance Person);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Person and conformance Person;
  if (!lazy protocol witness table cache variable for type Person and conformance Person)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Person and conformance Person);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Person and conformance Person;
  if (!lazy protocol witness table cache variable for type Person and conformance Person)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Person and conformance Person);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Person and conformance Person;
  if (!lazy protocol witness table cache variable for type Person and conformance Person)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Person and conformance Person);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactHandleType and conformance ContactHandleType()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType;
  if (!lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactHandleType and conformance ContactHandleType);
  }
  return result;
}

uint64_t outlined consume of Person?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of PersonQueryEntity(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined destroy of PersonQueryEntity(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t base witness table accessor for AppEntity in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
}

uint64_t base witness table accessor for AppValue in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
}

uint64_t base witness table accessor for DisplayRepresentable in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
}

uint64_t base witness table accessor for Identifiable in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<StructuredQueryEntity> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<StructuredQueryEntity>);
}

uint64_t base witness table accessor for PersistentlyIdentifiable in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
}

uint64_t base witness table accessor for TypeDisplayRepresentable in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
}

uint64_t base witness table accessor for _IntentValue in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
}

uint64_t base witness table accessor for InstanceDisplayRepresentable in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<StructuredQueryEntity> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<StructuredQueryEntity>);
}

uint64_t base witness table accessor for CustomLocalizedStringResourceConvertible in StructuredQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type StructuredQueryEntity and conformance StructuredQueryEntity, (void (*)(uint64_t))type metadata accessor for StructuredQueryEntity);
}

uint64_t base witness table accessor for AppEntity in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
}

uint64_t base witness table accessor for AppValue in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
}

uint64_t base witness table accessor for DisplayRepresentable in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
}

uint64_t base witness table accessor for Identifiable in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<LocationQueryEntity> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<LocationQueryEntity>);
}

uint64_t base witness table accessor for PersistentlyIdentifiable in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
}

uint64_t base witness table accessor for TypeDisplayRepresentable in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
}

uint64_t base witness table accessor for _IntentValue in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
}

uint64_t base witness table accessor for InstanceDisplayRepresentable in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<LocationQueryEntity> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<LocationQueryEntity>);
}

uint64_t base witness table accessor for CustomLocalizedStringResourceConvertible in LocationQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type LocationQueryEntity and conformance LocationQueryEntity, (void (*)(uint64_t))type metadata accessor for LocationQueryEntity);
}

uint64_t base witness table accessor for AppEntity in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
}

uint64_t base witness table accessor for AppValue in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
}

uint64_t base witness table accessor for DisplayRepresentable in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
}

uint64_t base witness table accessor for Identifiable in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<PersonQueryEntity> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<PersonQueryEntity>);
}

uint64_t base witness table accessor for PersistentlyIdentifiable in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
}

uint64_t base witness table accessor for TypeDisplayRepresentable in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
}

uint64_t base witness table accessor for _IntentValue in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
}

uint64_t base witness table accessor for InstanceDisplayRepresentable in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<PersonQueryEntity> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<PersonQueryEntity>);
}

uint64_t base witness table accessor for CustomLocalizedStringResourceConvertible in PersonQueryEntity()
{
  return lazy protocol witness table accessor for type LocationQueryEntity and conformance LocationQueryEntity(&lazy protocol witness table cache variable for type PersonQueryEntity and conformance PersonQueryEntity, (void (*)(uint64_t))type metadata accessor for PersonQueryEntity);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ObjectType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ObjectType(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type ObjectType and conformance ObjectType);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ObjectType()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [ObjectType] and conformance [A], &demangling cache variable for type metadata for [ObjectType]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in SortOrder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ObjectType(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type SortOrder and conformance SortOrder);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SortOrder()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [SortOrder] and conformance [A], &demangling cache variable for type metadata for [SortOrder]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in TemporalReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ObjectType(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type TemporalReference and conformance TemporalReference);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TemporalReference()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [TemporalReference] and conformance [A], &demangling cache variable for type metadata for [TemporalReference]);
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in Person()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<Person> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<Person>);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in Person()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<Person> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<Person>);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ContactHandleType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ObjectType(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type ContactHandleType and conformance ContactHandleType);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ContactHandleType()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [ContactHandleType] and conformance [A], &demangling cache variable for type metadata for [ContactHandleType]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in MediaType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ObjectType(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type MediaType and conformance MediaType);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in MediaType()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [MediaType] and conformance [A], &demangling cache variable for type metadata for [MediaType]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in AppEntityStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ObjectType(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type AppEntityStatus and conformance AppEntityStatus);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AppEntityStatus()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [AppEntityStatus] and conformance [A], &demangling cache variable for type metadata for [AppEntityStatus]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in EntityUTType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ObjectType(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type EntityUTType and conformance EntityUTType);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in EntityUTType()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [EntityUTType] and conformance [A], &demangling cache variable for type metadata for [EntityUTType]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ReturnType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ObjectType(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type ReturnType and conformance ReturnType);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in ObjectType(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ReturnType()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [ReturnType] and conformance [A], &demangling cache variable for type metadata for [ReturnType]);
}

uint64_t sub_2583A2F88()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = StructuredQueryEntity.isQuestion.getter();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_2583A2FB4()
{
  return StructuredQueryEntity.isQuestion.setter();
}

uint64_t sub_2583A2FDC()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = StructuredQueryEntity.returnType.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2583A3030()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = StructuredQueryEntity.searchTerms.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2583A305C()
{
  return StructuredQueryEntity.location.getter();
}

uint64_t sub_2583A3080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for StructuredQueryEntity.location : StructuredQueryEntity(a1, a2, a3, a4, &demangling cache variable for type metadata for LocationQueryEntity?, StructuredQueryEntity.location.setter);
}

uint64_t sub_2583A30B4()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = StructuredQueryEntity.time.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2583A30E0()
{
  return StructuredQueryEntity.person.getter();
}

uint64_t sub_2583A3104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for StructuredQueryEntity.location : StructuredQueryEntity(a1, a2, a3, a4, &demangling cache variable for type metadata for PersonQueryEntity?, StructuredQueryEntity.person.setter);
}

uint64_t sub_2583A3138()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = StructuredQueryEntity.tagName.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2583A3164()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = StructuredQueryEntity.flagColor.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2583A3190()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = StructuredQueryEntity.mediaType.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2583A31BC()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = StructuredQueryEntity.sourceDocumentUtType.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2583A31E8()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = LocationQueryEntity.unspecified.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A3210(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for LocationQueryEntity.unspecified : LocationQueryEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))LocationQueryEntity.unspecified.setter);
}

uint64_t sub_2583A323C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = LocationQueryEntity.arrival.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A3264(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for LocationQueryEntity.unspecified : LocationQueryEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))LocationQueryEntity.arrival.setter);
}

uint64_t sub_2583A3290()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = LocationQueryEntity.departure.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A32B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for LocationQueryEntity.unspecified : LocationQueryEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))LocationQueryEntity.departure.setter);
}

uint64_t sub_2583A32E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonQueryEntity.unspecified : PersonQueryEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))PersonQueryEntity.unspecified.setter);
}

uint64_t sub_2583A3318(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonQueryEntity.unspecified : PersonQueryEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))PersonQueryEntity.sender.setter);
}

uint64_t sub_2583A3348(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonQueryEntity.unspecified : PersonQueryEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))PersonQueryEntity.receiver.setter);
}

uint64_t sub_2583A3378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Person.name : Person(a1, a2, a3, a4, (uint64_t (*)(uint64_t))Person.name.setter);
}

uint64_t sub_2583A33A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Person.name : Person(a1, a2, a3, a4, (uint64_t (*)(uint64_t))Person.contactHandleType.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for StructuredQueryEntity(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    unint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for DisplayRepresentation();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v10 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)v4 + v10) = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[12];
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(uint64_t *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    uint64_t v12 = a3[14];
    *(uint64_t *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *(uint64_t *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    uint64_t v13 = a3[16];
    *(uint64_t *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    *(uint64_t *)((char *)v4 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[18];
    *(uint64_t *)((char *)v4 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + a3[19]) = *(uint64_t *)((char *)a2 + a3[19]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for StructuredQueryEntity(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for StructuredQueryEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StructuredQueryEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for StructuredQueryEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithTake for StructuredQueryEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_release();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_release();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_release();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_release();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_release();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_release();
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  swift_release();
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_release();
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for StructuredQueryEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for StructuredQueryEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t type metadata completion function for StructuredQueryEntity()
{
  uint64_t result = type metadata accessor for DisplayRepresentation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocationQueryEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_0);
}

uint64_t storeEnumTagSinglePayload for LocationQueryEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_0);
}

void *initializeBufferWithCopyOfBuffer for LocationQueryEntity(void *a1, uint64_t *a2)
{
  OUTLINED_FUNCTION_30_2();
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = v11;
    a1 = (void *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    uint64_t v7 = v4;
    type metadata accessor for DisplayRepresentation();
    OUTLINED_FUNCTION_7_2();
    uint64_t v8 = OUTLINED_FUNCTION_210();
    v9(v8);
    uint64_t v10 = v7[6];
    *(void *)((char *)a1 + v7[5]) = *(uint64_t *)((char *)a2 + v7[5]);
    *(void *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    *(void *)((char *)a1 + v7[7]) = *(uint64_t *)((char *)a2 + v7[7]);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t destroy for LocationQueryEntity(uint64_t a1)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_7_2();
  (*(void (**)(uint64_t))(v2 + 8))(a1);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for LocationQueryEntity()
{
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_7_2();
  uint64_t v3 = OUTLINED_FUNCTION_78_1();
  v4(v3);
  uint64_t v5 = v0[6];
  *(void *)(v2 + v0[5]) = *(void *)(v1 + v0[5]);
  *(void *)(v2 + v5) = *(void *)(v1 + v5);
  *(void *)(v2 + v0[7]) = *(void *)(v1 + v0[7]);
  swift_retain();
  swift_retain();
  swift_retain();
  return v2;
}

uint64_t assignWithCopy for LocationQueryEntity()
{
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_7_2();
  uint64_t v3 = OUTLINED_FUNCTION_78_1();
  v4(v3);
  *(void *)(v2 + v0[5]) = *(void *)(v1 + v0[5]);
  swift_retain();
  swift_release();
  *(void *)(v2 + v0[6]) = *(void *)(v1 + v0[6]);
  swift_retain();
  swift_release();
  *(void *)(v2 + v0[7]) = *(void *)(v1 + v0[7]);
  swift_retain();
  swift_release();
  return v2;
}

uint64_t initializeWithTake for LocationQueryEntity()
{
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_7_2();
  uint64_t v3 = OUTLINED_FUNCTION_78_1();
  v4(v3);
  uint64_t v5 = v0[6];
  *(void *)(v2 + v0[5]) = *(void *)(v1 + v0[5]);
  *(void *)(v2 + v5) = *(void *)(v1 + v5);
  *(void *)(v2 + v0[7]) = *(void *)(v1 + v0[7]);
  return v2;
}

uint64_t assignWithTake for LocationQueryEntity()
{
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_7_2();
  uint64_t v2 = OUTLINED_FUNCTION_78_1();
  v3(v2);
  OUTLINED_FUNCTION_83_3(v0[5]);
  OUTLINED_FUNCTION_83_3(v0[6]);
  OUTLINED_FUNCTION_83_3(v0[7]);
  return v1;
}

uint64_t getEnumTagSinglePayload for PersonQueryEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2583A41E0);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PersonQueryEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2583A4288);
}

void __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t getEnumTagSinglePayload for ObjectType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ObjectType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2583A446CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void type metadata accessor for ObjectType()
{
}

void type metadata accessor for SortOrder()
{
}

void type metadata accessor for TemporalReference()
{
}

void type metadata accessor for Person()
{
}

unsigned char *storeEnumTagSinglePayload for SortOrder(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2583A4594);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for ContactHandleType()
{
}

unsigned char *storeEnumTagSinglePayload for MediaType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2583A4694);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for MediaType()
{
}

uint64_t getEnumTagSinglePayload for AppEntityStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEB)
  {
    if (a2 + 21 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 21) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 22;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v5 = v6 - 22;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AppEntityStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    *uint64_t result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2583A481CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 21;
        break;
    }
  }
  return result;
}

void type metadata accessor for AppEntityStatus()
{
}

uint64_t getEnumTagSinglePayload for EntityUTType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for EntityUTType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2583A49A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

void type metadata accessor for EntityUTType()
{
}

uint64_t getEnumTagSinglePayload for ReturnType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xD0)
  {
    if (a2 + 48 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 48) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 49;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x31;
  int v5 = v6 - 49;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReturnType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 48 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 48) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xCF)
  {
    unsigned int v6 = ((a2 - 208) >> 8) + 1;
    *uint64_t result = a2 + 48;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2583A4B2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 48;
        break;
    }
  }
  return result;
}

void type metadata accessor for ReturnType()
{
}

uint64_t outlined copy of Person?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_16()
{
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
  return DisplayRepresentation.init(title:subtitle:image:)();
}

void OUTLINED_FUNCTION_3_21(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + v1 * a1) = a1;
}

__n128 *OUTLINED_FUNCTION_7_20(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result->n128_u8[v2] = 0;
  return result;
}

void OUTLINED_FUNCTION_12_20()
{
  uint64_t v2 = *(void *)(v0 - 120);
  uint64_t v3 = *(void *)(v0 - 112);
  String.append(_:)(*(Swift::String *)&v2);
}

uint64_t OUTLINED_FUNCTION_13_22(uint64_t a1)
{
  *uint64_t v1 = a1;
  return type metadata accessor for StructuredQueryEntity(0);
}

uint64_t OUTLINED_FUNCTION_15_18()
{
  return BidirectionalCollection<>.joined(separator:)();
}

void OUTLINED_FUNCTION_16_17()
{
  *(unsigned char *)(v1 + 3 * v0) = 3;
}

void OUTLINED_FUNCTION_19_16()
{
  *(unsigned char *)(v1 + 7 * v0) = 7;
}

void OUTLINED_FUNCTION_20_15()
{
  *(unsigned char *)(v1 + 2 * v0) = 2;
}

void OUTLINED_FUNCTION_23_11(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + v1 * a1) = a1;
}

void OUTLINED_FUNCTION_24_18()
{
  *(unsigned char *)(v1 + 5 * v0) = 5;
}

void OUTLINED_FUNCTION_27_16()
{
  uint64_t v1 = 8236;
  unint64_t v2 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_28_11()
{
  return 0x7261646E656C6163;
}

void OUTLINED_FUNCTION_29_15()
{
  *(unsigned char *)(v1 + 8 * v0) = 8;
}

void OUTLINED_FUNCTION_30_16()
{
  *(unsigned char *)(v1 + 4 * v0) = 4;
}

uint64_t OUTLINED_FUNCTION_32_11()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void OUTLINED_FUNCTION_33_11()
{
  *(unsigned char *)(v2 + v1) = v0;
}

uint64_t OUTLINED_FUNCTION_34_14()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_35_13()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_36_13@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + v1 * a1) = a1;
  return 25938;
}

uint64_t OUTLINED_FUNCTION_38_9()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t OUTLINED_FUNCTION_40_10()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_41_12()
{
  return type metadata accessor for DisplayRepresentation();
}

void OUTLINED_FUNCTION_44_14(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + v1 * a1) = a1;
}

uint64_t OUTLINED_FUNCTION_45_9()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_50_13()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_51_10()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_52_9()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_54_7()
{
  return 0x616D61726F6E6170;
}

uint64_t OUTLINED_FUNCTION_55_9()
{
  return 0x746361746E6F63;
}

void OUTLINED_FUNCTION_56_6()
{
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_61_6()
{
  return type metadata accessor for StructuredQueryEntity(0);
}

uint64_t OUTLINED_FUNCTION_64_5()
{
  return type metadata accessor for StructuredQueryEntity(0);
}

uint64_t OUTLINED_FUNCTION_65_6()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t OUTLINED_FUNCTION_66_5@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + v1 * a1) = a1;
  return 24912;
}

uint64_t OUTLINED_FUNCTION_67_6@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + v1 * a1) = a1;
  return 27718;
}

uint64_t OUTLINED_FUNCTION_68_6()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_69_7()
{
  return outlined consume of Person?(v0);
}

uint64_t OUTLINED_FUNCTION_70_6()
{
  return type metadata accessor for StructuredQueryEntity(0);
}

uint64_t OUTLINED_FUNCTION_71_6()
{
  return 0x6569666C6573;
}

void OUTLINED_FUNCTION_72_4()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_73_3()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

unint64_t OUTLINED_FUNCTION_74_6(uint64_t a1)
{
  return a1 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000;
}

void OUTLINED_FUNCTION_76_5(uint64_t a1@<X8>)
{
  *(void *)(v1 - 128) = a1;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_77_5(uint64_t a1@<X8>)
{
  *(void *)(v1 - 120) = a1 & 0xFFFFFFFFFFFFLL | 0x7954000000000000;
  *(void *)(v1 - 112) = 0xEC000000203A6570;
}

uint64_t OUTLINED_FUNCTION_78_5()
{
  return BidirectionalCollection<>.joined(separator:)();
}

void OUTLINED_FUNCTION_79_5()
{
  *(void *)(v0 - 120) = 0;
  *(void *)(v0 - 112) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_80_6()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_81_5()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_83_3@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) = *(void *)(v1 + a1);
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_84_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_85_6()
{
  return type metadata accessor for LocationQueryEntity(0);
}

uint64_t OUTLINED_FUNCTION_87_6()
{
  return type metadata accessor for StructuredQueryEntity(0);
}

uint64_t OUTLINED_FUNCTION_89_2(uint64_t a1)
{
  *uint64_t v1 = a1;
  return type metadata accessor for PersonQueryEntity(0);
}

uint64_t OUTLINED_FUNCTION_90_3(uint64_t a1)
{
  *uint64_t v1 = a1;
  return type metadata accessor for LocationQueryEntity(0);
}

uint64_t OUTLINED_FUNCTION_91_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_92_6()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_93_5()
{
  return 1685217635;
}

uint64_t OUTLINED_FUNCTION_94_7()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_95_5()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_96_4()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_98_5()
{
  return 0x6B72616D6B6F6F42;
}

uint64_t OUTLINED_FUNCTION_99_5()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

void OUTLINED_FUNCTION_100_6()
{
  *(void *)(v0 - 120) = 0;
  *(void *)(v0 - 112) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
}

void OUTLINED_FUNCTION_101_5()
{
  *(void *)(v0 - 120) = 0;
  *(void *)(v0 - 112) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
}

uint64_t OUTLINED_FUNCTION_102_2@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 120) = a1 & 0xFFFFFFFFFFFFLL | 0x203A000000000000;
  *(void *)(v1 - 112) = 0xE800000000000000;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_103_5()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_104_6()
{
  return 0x68736E6565726353;
}

uint64_t OUTLINED_FUNCTION_105_6()
{
  return 1852143173;
}

unint64_t OUTLINED_FUNCTION_106_6(uint64_t a1)
{
  return a1 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
}

uint64_t OUTLINED_FUNCTION_107_6()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_110_5()
{
  return outlined init with copy of PQAVerificationModelProtocol?(v0, v2, v1);
}

void CardDisplayable.card.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (id)a1;
  if (a1) {
    a1 = SFCard.data.getter();
  }
  else {
    unint64_t v5 = 0xF000000000000000;
  }
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a3 + 40))(a1, v5, a2, a3);
}

void (*protocol witness for CardSetable.card.modify in conformance IdCardEntity(id *a1))(id *a1, char a2)
{
  a1[1] = v1;
  *a1 = specialized CardDisplayable.card.getter();
  return protocol witness for CardSetable.card.modify in conformance IdCardEntity;
}

void protocol witness for CardSetable.card.modify in conformance IdCardEntity(id *a1, char a2)
{
  if (a2)
  {
    id v2 = *a1;
    specialized CardDisplayable.card.setter();
  }
  else
  {
    specialized CardDisplayable.card.setter();
  }
}

void (*CardDisplayable.card.modify(id *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = (id)a3;
  a1[3] = v3;
  a1[1] = (id)a2;
  *a1 = CardDisplayable.card.getter(a2, a3);
  return CardDisplayable.card.modify;
}

void CardDisplayable.card.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = (void *)*a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    id v5 = v4;
    CardDisplayable.card.setter((uint64_t)v4, v3, v2);
  }
  else
  {
    CardDisplayable.card.setter(*a1, v3, v2);
  }
}

uint64_t CardDisplayable.displayRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_184_0();
  uint64_t v38 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_184_0();
  uint64_t v37 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RGPluginModel?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t *)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v17 = type metadata accessor for LocalizedStringResource();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  unint64_t v39 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  Swift::String v22 = (char *)&v37 - v21;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v23);
  v24._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v25);
  LocalizedStringResource.init(stringInterpolation:)();
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) + 8) + 8))(a1);
  if (v26)
  {
    uint64_t v27 = (void *)v26;
    SFCard.snippetPluginModel.getter(v14);

    uint64_t v28 = type metadata accessor for RGPluginModel();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v28) == 1)
    {
      outlined destroy of RGPluginModel?((uint64_t)v14);
    }
    else
    {
      lazy protocol witness table accessor for type RGPluginModel and conformance RGPluginModel();
      SnippetPluginModel.data.getter();
      unint64_t v30 = v29;
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v28 - 8) + 8))(v14, v28);
      if (v30 >> 60 != 15)
      {
        uint64_t v35 = OUTLINED_FUNCTION_3_22();
        v36(v35);
        static RGPluginModel.bundleName.getter();
        DisplayRepresentation.init(title:snippetPluginModelData:bundleIdentifier:)();
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v17);
      }
    }
  }
  uint64_t v31 = OUTLINED_FUNCTION_3_22();
  v32(v31);
  __swift_storeEnumTagSinglePayload(v37, 1, 1, v17);
  uint64_t v33 = type metadata accessor for DisplayRepresentation.Image();
  __swift_storeEnumTagSinglePayload(v38, 1, 1, v33);
  DisplayRepresentation.init(title:subtitle:image:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v17);
}

id specialized CardDisplayable.card.getter()
{
  return OUTLINED_FUNCTION_0_11();
}

{
  type metadata accessor for SFCard();
  return OUTLINED_FUNCTION_0_11();
}

{
  type metadata accessor for SFCard();
  return OUTLINED_FUNCTION_0_11();
}

{
  type metadata accessor for SFCard();
  return OUTLINED_FUNCTION_0_11();
}

{
  type metadata accessor for SFCard();
  return OUTLINED_FUNCTION_0_11();
}

{
  type metadata accessor for SFCard();
  return OUTLINED_FUNCTION_0_11();
}

{
  type metadata accessor for SFCard();
  return OUTLINED_FUNCTION_0_11();
}

{
  type metadata accessor for SFCard();
  return OUTLINED_FUNCTION_0_11();
}

{
  type metadata accessor for SFCard();
  return OUTLINED_FUNCTION_0_11();
}

{
  type metadata accessor for SFCard();
  return OUTLINED_FUNCTION_0_11();
}

id specialized CardDisplayable.card.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return SFCard.init(data:)(a2, a3);
}

id CardDisplayable.card.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SFCard();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  return SFCard.init(data:)(v4, v5);
}

void (*protocol witness for CardSetable.card.modify in conformance PersonalCardEntity())()
{
  uint64_t v2 = malloc(0xC8uLL);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_7((uint64_t)v2);
  v3[24] = v0;
  memcpy(v3, v0, 0xB8uLL);
  *(void *)(v1 + 184) = specialized CardDisplayable.card.getter();
  return protocol witness for CardSetable.card.modify in conformance PersonalCardEntity;
}

void protocol witness for CardSetable.card.modify in conformance PersonalCardEntity()
{
  OUTLINED_FUNCTION_2_9();
  uint64_t v4 = *(void **)(v1 + 184);
  uint64_t v3 = (id *)(v1 + 184);
  uint64_t v2 = v4;
  if (v5)
  {
    id v6 = v2;
    specialized CardDisplayable.card.setter();
  }
  else
  {
    specialized CardDisplayable.card.setter();
  }
  free(v0);
}

id protocol witness for CardRepresentable.card.getter in conformance PersonalCardEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_21(a1, a2, a3, a4, a5, a6, a7, a8, v11, v12);
  memcpy(v8, v9, 0xB8uLL);
  return specialized CardDisplayable.card.getter();
}

void (*protocol witness for CardSetable.card.modify in conformance BusinessCardEntity())()
{
  uint64_t v2 = malloc(0x68uLL);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_7((uint64_t)v2);
  v3[12] = v0;
  memcpy(v3, v0, 0x58uLL);
  *(void *)(v1 + 88) = specialized CardDisplayable.card.getter();
  return protocol witness for CardSetable.card.modify in conformance BusinessCardEntity;
}

void protocol witness for CardSetable.card.modify in conformance BusinessCardEntity()
{
  OUTLINED_FUNCTION_2_9();
  uint64_t v4 = *(void **)(v1 + 88);
  uint64_t v3 = (id *)(v1 + 88);
  uint64_t v2 = v4;
  if (v5)
  {
    id v6 = v2;
    specialized CardDisplayable.card.setter();
  }
  else
  {
    specialized CardDisplayable.card.setter();
  }
  free(v0);
}

id protocol witness for CardRepresentable.card.getter in conformance BusinessCardEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_21(a1, a2, a3, a4, a5, a6, a7, a8, v11, v12);
  memcpy(v8, v9, 0x58uLL);
  return specialized CardDisplayable.card.getter();
}

void (*protocol witness for CardSetable.card.modify in conformance EventEntity())()
{
  uint64_t v2 = malloc(0x60uLL);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_7((uint64_t)v2);
  v3[11] = v0;
  memcpy(v3, v0, 0x50uLL);
  *(void *)(v1 + 80) = specialized CardDisplayable.card.getter();
  return protocol witness for CardSetable.card.modify in conformance EventEntity;
}

void protocol witness for CardSetable.card.modify in conformance EventEntity()
{
  OUTLINED_FUNCTION_2_9();
  uint64_t v4 = *(void **)(v1 + 80);
  uint64_t v3 = (id *)(v1 + 80);
  uint64_t v2 = v4;
  if (v5)
  {
    id v6 = v2;
    specialized CardDisplayable.card.setter();
  }
  else
  {
    specialized CardDisplayable.card.setter();
  }
  free(v0);
}

id protocol witness for CardRepresentable.card.getter in conformance EventEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_4_19(a1, a2, a3, a4, a5, a6, a7, a8, v11);
  memcpy(v8, v9, 0x50uLL);
  return specialized CardDisplayable.card.getter();
}

void (*protocol witness for CardSetable.card.modify in conformance FlightReservationEntity())()
{
  uint64_t v2 = malloc(0xE0uLL);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_7((uint64_t)v2);
  v3[27] = v0;
  memcpy(v3, v0, 0xD0uLL);
  *(void *)(v1 + 208) = specialized CardDisplayable.card.getter();
  return protocol witness for CardSetable.card.modify in conformance FlightReservationEntity;
}

void protocol witness for CardSetable.card.modify in conformance FlightReservationEntity()
{
  OUTLINED_FUNCTION_2_9();
  uint64_t v4 = *(void **)(v1 + 208);
  uint64_t v3 = (id *)(v1 + 208);
  uint64_t v2 = v4;
  if (v5)
  {
    id v6 = v2;
    specialized CardDisplayable.card.setter();
  }
  else
  {
    specialized CardDisplayable.card.setter();
  }
  free(v0);
}

id protocol witness for CardRepresentable.card.getter in conformance FlightReservationEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_4_19(a1, a2, a3, a4, a5, a6, a7, a8, v11);
  memcpy(v8, v9, 0xD0uLL);
  return specialized CardDisplayable.card.getter();
}

void (*protocol witness for CardSetable.card.modify in conformance HotelReservationEntity())()
{
  uint64_t v2 = malloc(0x88uLL);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_7((uint64_t)v2);
  v3[16] = v0;
  memcpy(v3, v0, 0x78uLL);
  *(void *)(v1 + 120) = specialized CardDisplayable.card.getter();
  return protocol witness for CardSetable.card.modify in conformance HotelReservationEntity;
}

void protocol witness for CardSetable.card.modify in conformance HotelReservationEntity()
{
  OUTLINED_FUNCTION_2_9();
  uint64_t v4 = *(void **)(v1 + 120);
  uint64_t v3 = (id *)(v1 + 120);
  uint64_t v2 = v4;
  if (v5)
  {
    id v6 = v2;
    specialized CardDisplayable.card.setter();
  }
  else
  {
    specialized CardDisplayable.card.setter();
  }
  free(v0);
}

id protocol witness for CardRepresentable.card.getter in conformance HotelReservationEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_21(a1, a2, a3, a4, a5, a6, a7, a8, v11, v12);
  memcpy(v8, v9, 0x78uLL);
  return specialized CardDisplayable.card.getter();
}

void (*protocol witness for CardSetable.card.modify in conformance RestaurantReservationEntity())()
{
  uint64_t v2 = malloc(0x70uLL);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_7((uint64_t)v2);
  v3[13] = v0;
  memcpy(v3, v0, 0x60uLL);
  *(void *)(v1 + 96) = specialized CardDisplayable.card.getter();
  return protocol witness for CardSetable.card.modify in conformance RestaurantReservationEntity;
}

void protocol witness for CardSetable.card.modify in conformance RestaurantReservationEntity()
{
  OUTLINED_FUNCTION_2_9();
  uint64_t v4 = *(void **)(v1 + 96);
  uint64_t v3 = (id *)(v1 + 96);
  uint64_t v2 = v4;
  if (v5)
  {
    id v6 = v2;
    specialized CardDisplayable.card.setter();
  }
  else
  {
    specialized CardDisplayable.card.setter();
  }
  free(v0);
}

id protocol witness for CardRepresentable.card.getter in conformance RestaurantReservationEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_4_19(a1, a2, a3, a4, a5, a6, a7, a8, v11);
  memcpy(v8, v9, 0x60uLL);
  return specialized CardDisplayable.card.getter();
}

void (*protocol witness for CardSetable.card.modify in conformance TicketedTransportationEntity())()
{
  uint64_t v2 = malloc(0x78uLL);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_7((uint64_t)v2);
  v3[14] = v0;
  memcpy(v3, v0, 0x68uLL);
  *(void *)(v1 + 104) = specialized CardDisplayable.card.getter();
  return protocol witness for CardSetable.card.modify in conformance TicketedTransportationEntity;
}

void protocol witness for CardSetable.card.modify in conformance TicketedTransportationEntity()
{
  OUTLINED_FUNCTION_2_9();
  uint64_t v4 = *(void **)(v1 + 104);
  uint64_t v3 = (id *)(v1 + 104);
  uint64_t v2 = v4;
  if (v5)
  {
    id v6 = v2;
    specialized CardDisplayable.card.setter();
  }
  else
  {
    specialized CardDisplayable.card.setter();
  }
  free(v0);
}

id protocol witness for CardRepresentable.card.getter in conformance TicketedTransportationEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_21(a1, a2, a3, a4, a5, a6, a7, a8, v11, v12);
  memcpy(v8, v9, 0x68uLL);
  return specialized CardDisplayable.card.getter();
}

void (*protocol witness for CardSetable.card.modify in conformance VehicleReservationEntity())()
{
  uint64_t v2 = malloc(0xA0uLL);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_7((uint64_t)v2);
  v3[19] = v0;
  memcpy(v3, v0, 0x90uLL);
  *(void *)(v1 + 144) = specialized CardDisplayable.card.getter();
  return protocol witness for CardSetable.card.modify in conformance VehicleReservationEntity;
}

void protocol witness for CardSetable.card.modify in conformance VehicleReservationEntity()
{
  OUTLINED_FUNCTION_2_9();
  uint64_t v4 = *(void **)(v1 + 144);
  uint64_t v3 = (id *)(v1 + 144);
  uint64_t v2 = v4;
  if (v5)
  {
    id v6 = v2;
    specialized CardDisplayable.card.setter();
  }
  else
  {
    specialized CardDisplayable.card.setter();
  }
  free(v0);
}

id protocol witness for CardRepresentable.card.getter in conformance VehicleReservationEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_4_19(a1, a2, a3, a4, a5, a6, a7, a8, v11);
  memcpy(v8, v9, 0x90uLL);
  return specialized CardDisplayable.card.getter();
}

void (*protocol witness for CardSetable.card.modify in conformance TicketedShowEntity())(uint64_t a1, char a2)
{
  uint64_t v1 = malloc(0x90uLL);
  OUTLINED_FUNCTION_5_14(v1);
  *(void *)(v0 + 128) = specialized CardDisplayable.card.getter();
  return protocol witness for CardSetable.card.modify in conformance TicketedShowEntity;
}

void protocol witness for CardSetable.card.modify in conformance TicketedShowEntity(uint64_t a1, char a2)
{
}

void protocol witness for CardSetable.card.modify in conformance TicketedShowEntity(uint64_t a1, char a2, void (*a3)(id))
{
  uint64_t v4 = *(void **)a1;
  id v6 = (id *)(*(void *)a1 + 128);
  id v5 = *v6;
  if (a2)
  {
    id v7 = v5;
    a3(v5);
  }
  else
  {
    a3(*(id *)(*(void *)a1 + 128));
  }
  free(v4);
}

id protocol witness for CardRepresentable.card.getter in conformance GenericEventEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_4_19(a1, a2, a3, a4, a5, a6, a7, a8, v11);
  memcpy(v8, v9, 0x80uLL);
  return specialized CardDisplayable.card.getter();
}

void (*protocol witness for CardSetable.card.modify in conformance MediaEntity(id *a1))(id *a1, char a2)
{
  a1[1] = v1;
  *a1 = specialized CardDisplayable.card.getter(*v1, v1[1], v1[2]);
  return protocol witness for CardSetable.card.modify in conformance MediaEntity;
}

void protocol witness for CardSetable.card.modify in conformance MediaEntity(id *a1, char a2)
{
  if (a2)
  {
    id v2 = *a1;
    specialized CardDisplayable.card.setter();
  }
  else
  {
    specialized CardDisplayable.card.setter();
  }
}

id protocol witness for CardRepresentable.card.getter in conformance MediaEntity()
{
  return specialized CardDisplayable.card.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

id key path getter for CardDisplayable.card : <A>A@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  id result = CardDisplayable.card.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

void key path setter for CardDisplayable.card : <A>A(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 16);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  id v6 = *a1;
  id v7 = *a1;
  CardDisplayable.card.setter((uint64_t)v6, v4, v5);
}

uint64_t sub_2583A6814()
{
  return 16;
}

__n128 sub_2583A6820(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of CardRepresentable.card.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CardSetable.card.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CardSetable.card.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CardDisplayable.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CardDisplayable.cardData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CardDisplayable.cardData.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CardDisplayable.cardData.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

id OUTLINED_FUNCTION_0_11()
{
  outlined copy of Data?(v1, v0);
  return SFCard.init(data:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_3_22()
{
  return *(void *)(v0 - 96);
}

uint64_t *OUTLINED_FUNCTION_4_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

void *OUTLINED_FUNCTION_5_14(void *a1)
{
  *uint64_t v1 = a1;
  a1[17] = v2;
  return memcpy(a1, v2, 0x80uLL);
}

char *OUTLINED_FUNCTION_7_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t SearchCATEntity.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  id v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_6_7();
  uint64_t v9 = type metadata accessor for LocalizedStringResource();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v10);
  char v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringResource.init(stringLiteral:)();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v9);
  uint64_t v13 = type metadata accessor for DisplayRepresentation.Image();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v13);
  DisplayRepresentation.init(title:subtitle:image:)();
  uint64_t v14 = (int *)type metadata accessor for SearchCATEntity();
  uint64_t v15 = v14[5];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EntityProperty<String?>);
  OUTLINED_FUNCTION_17_15();
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v15) = MEMORY[0x25A2C4900](v12);
  uint64_t v16 = v14[6];
  OUTLINED_FUNCTION_17_15();
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v16) = MEMORY[0x25A2C4900](v12);
  uint64_t v17 = v14[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<Date?>);
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v17) = MEMORY[0x25A2C48F0](v12);
  uint64_t v18 = v14[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<[String]?>);
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v18) = MEMORY[0x25A2C4900](v12);
  uint64_t v19 = v14[9];
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v19) = MEMORY[0x25A2C4900](v12);
  uint64_t v20 = v14[10];
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v20) = MEMORY[0x25A2C4900](v12);
  uint64_t v21 = v14[11];
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v21) = MEMORY[0x25A2C4900](v12);
  uint64_t v22 = v14[12];
  OUTLINED_FUNCTION_18_20();
  *(void *)(a1 + v22) = MEMORY[0x25A2C4900](v12);
  uint64_t v23 = v14[13];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityProperty<String>);
  OUTLINED_FUNCTION_18_20();
  *(void *)(a1 + v23) = MEMORY[0x25A2C4900](v12);
  uint64_t v24 = v14[14];
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a1 + v24) = MEMORY[0x25A2C4900](v12);
  v26[0] = 0;
  v26[1] = 0xE000000000000000;
  return EntityProperty.wrappedValue.setter();
}

uint64_t type metadata accessor for SearchCATEntity()
{
  uint64_t result = type metadata singleton initialization cache for SearchCATEntity;
  if (!type metadata singleton initialization cache for SearchCATEntity) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SearchCATEntity.documentSource.setter()
{
  return OUTLINED_FUNCTION_3_23();
}

uint64_t SearchCATEntity.title.setter()
{
  return OUTLINED_FUNCTION_3_23();
}

uint64_t SearchCATEntity.sentFrom.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t SearchCATEntity.contentCreationDate.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_6_7();
  type metadata accessor for SearchCATEntity();
  outlined init with copy of Date?(a1, v1);
  EntityProperty.wrappedValue.setter();
  return outlined destroy of SearchResult?(a1, &demangling cache variable for type metadata for Date?);
}

uint64_t SearchCATEntity.fullSearchEntityDescription.setter()
{
  return OUTLINED_FUNCTION_3_23();
}

uint64_t SearchCATEntity.supportSearchEntityDescription.setter()
{
  return OUTLINED_FUNCTION_3_23();
}

uint64_t SearchCATEntity.resultSourceDialogDisplayName.setter()
{
  return OUTLINED_FUNCTION_3_23();
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SearchCATEntity.answer.setter()
{
  return OUTLINED_FUNCTION_3_23();
}

uint64_t SearchCATEntity.resultSourceDialogDisplayName.getter()
{
  type metadata accessor for SearchCATEntity();
  OUTLINED_FUNCTION_11_18();
  return v1;
}

uint64_t SearchCATEntity.documentSource.getter()
{
  type metadata accessor for SearchCATEntity();
  OUTLINED_FUNCTION_11_18();
  return v1;
}

uint64_t SearchCATEntity.sentFrom.getter()
{
  type metadata accessor for SearchCATEntity();
  EntityProperty.wrappedValue.getter();
  return v1;
}

uint64_t SearchCATEntity.typeDisplayRepresentation.unsafeMutableAddressor()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  return __swift_project_value_buffer(v0, (uint64_t)static SearchCATEntity.typeDisplayRepresentation);
}

uint64_t static SearchCATEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchCATEntity.typeDisplayRepresentation);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static SearchCATEntity.typeDisplayRepresentation.setter(uint64_t a1)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchCATEntity.typeDisplayRepresentation);
  swift_beginAccess();
  OUTLINED_FUNCTION_30_2();
  uint64_t v5 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v2);
}

uint64_t (*static SearchCATEntity.typeDisplayRepresentation.modify())()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  __swift_project_value_buffer(v0, (uint64_t)static SearchCATEntity.typeDisplayRepresentation);
  swift_beginAccess();
  return protocol witness for _ClientInfoProtocol.trackingConfig.modify in conformance AnswerSynthesisModelOnDevice._ClientInfo;
}

uint64_t SearchCATEntity.displayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_7_2();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t (*SearchCATEntity.documentSource.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_0_12((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchCATEntity.$documentSource.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchCATEntity.title.getter()
{
  type metadata accessor for SearchCATEntity();
  OUTLINED_FUNCTION_11_18();
  return v1;
}

uint64_t (*SearchCATEntity.title.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_0_12((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchCATEntity.$title.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchCATEntity.contentCreationDate.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t key path setter for SearchCATEntity.contentCreationDate : SearchCATEntity(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Date?(a1, (uint64_t)v4);
  return SearchCATEntity.contentCreationDate.setter((uint64_t)v4);
}

uint64_t (*SearchCATEntity.contentCreationDate.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_0_12((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchCATEntity.$contentCreationDate.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t key path setter for SearchCATEntity.sentFrom : SearchCATEntity()
{
  return SearchCATEntity.sentFrom.setter();
}

uint64_t (*SearchCATEntity.sentFrom.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_0_12((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchCATEntity.$sentFrom.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchCATEntity.answer.getter()
{
  type metadata accessor for SearchCATEntity();
  OUTLINED_FUNCTION_11_18();
  return v1;
}

uint64_t (*SearchCATEntity.answer.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_0_12((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchCATEntity.$answer.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchCATEntity.resultType.getter()
{
  type metadata accessor for SearchCATEntity();
  OUTLINED_FUNCTION_11_18();
  return v1;
}

uint64_t SearchCATEntity.resultType.setter()
{
  return OUTLINED_FUNCTION_3_23();
}

uint64_t (*SearchCATEntity.resultType.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_0_12((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchCATEntity.$resultType.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchCATEntity.fullSearchEntityDescription.getter()
{
  type metadata accessor for SearchCATEntity();
  OUTLINED_FUNCTION_11_18();
  return v1;
}

uint64_t (*SearchCATEntity.fullSearchEntityDescription.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_0_12((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchCATEntity.$fullSearchEntityDescription.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchCATEntity.supportSearchEntityDescription.getter()
{
  type metadata accessor for SearchCATEntity();
  OUTLINED_FUNCTION_11_18();
  return v1;
}

uint64_t (*SearchCATEntity.supportSearchEntityDescription.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_0_12((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchCATEntity.$supportSearchEntityDescription.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t key path setter for SearchCATEntity.resultSourceDialogDisplayName : SearchCATEntity()
{
  return SearchCATEntity.resultSourceDialogDisplayName.setter();
}

uint64_t (*SearchCATEntity.resultSourceDialogDisplayName.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_0_12((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchCATEntity.$resultSourceDialogDisplayName.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t SearchCATEntity.fullContent.getter()
{
  type metadata accessor for SearchCATEntity();
  OUTLINED_FUNCTION_11_18();
  return v1;
}

uint64_t key path setter for SearchCATEntity.documentSource : SearchCATEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t SearchCATEntity.fullContent.setter()
{
  return OUTLINED_FUNCTION_3_23();
}

uint64_t (*SearchCATEntity.fullContent.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_9();
  OUTLINED_FUNCTION_0_12((uint64_t)v1);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_22_11();
  return MemoryCreationQUResult.version.modify;
}

uint64_t SearchCATEntity.$fullContent.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t protocol witness for static AppEntity.defaultQuery.getter in conformance SearchCATEntity(uint64_t a1)
{
  uint64_t v2 = _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
  return MEMORY[0x270EE09F0](a1, v2);
}

uint64_t protocol witness for Identifiable.id.getter in conformance SearchCATEntity()
{
  _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
  return UUID.init()();
}

uint64_t protocol witness for static TypeDisplayRepresentable.typeDisplayRepresentation.getter in conformance SearchCATEntity@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SearchCATEntity.typeDisplayRepresentation);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance SearchCATEntity(uint64_t a1)
{
  uint64_t v2 = _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
  return MEMORY[0x270EE0C68](a1, v2);
}

uint64_t protocol witness for InstanceDisplayRepresentable.displayRepresentation.getter in conformance SearchCATEntity@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DisplayRepresentation();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance SearchCATEntity(uint64_t a1)
{
  uint64_t v2 = _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
  return MEMORY[0x270EE1D98](a1, v2);
}

uint64_t static SearchCATEntity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v126 = type metadata accessor for Date();
  uint64_t v120 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126);
  OUTLINED_FUNCTION_184_0();
  uint64_t v119 = v4;
  uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, Date?));
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_184_0();
  uint64_t v125 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_185_0();
  uint64_t v121 = v9;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_43_4();
  uint64_t v123 = v11;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v12);
  uint64_t v124 = (uint64_t)&v119 - v13;
  uint64_t v14 = type metadata accessor for SearchCATEntity();
  OUTLINED_FUNCTION_7_2();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_185_0();
  uint64_t v132 = v16;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_43_4();
  uint64_t v129 = v18;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_43_4();
  uint64_t v140 = v20;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_43_4();
  uint64_t v133 = v22;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_43_4();
  uint64_t v134 = v24;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_43_4();
  uint64_t v128 = v26;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_43_4();
  uint64_t v141 = v28;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_43_4();
  uint64_t v135 = v30;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_43_4();
  uint64_t v136 = v32;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_43_4();
  uint64_t v139 = v34;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_43_4();
  uint64_t v137 = v36;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_43_4();
  uint64_t v138 = v38;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_43_4();
  uint64_t v130 = v40;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_43_4();
  uint64_t v131 = v42;
  OUTLINED_FUNCTION_113_1();
  uint64_t v44 = MEMORY[0x270FA5388](v43);
  unint64_t v46 = (char *)&v119 - v45;
  uint64_t v47 = MEMORY[0x270FA5388](v44);
  unint64_t v49 = (char *)&v119 - v48;
  uint64_t v50 = MEMORY[0x270FA5388](v47);
  uint64_t v52 = (char *)&v119 - v51;
  MEMORY[0x270FA5388](v50);
  uint64_t v54 = (char *)&v119 - v53;
  EntityProperty.wrappedValue.getter();
  uint64_t v55 = v142;
  uint64_t v56 = v143;
  uint64_t v127 = v14;
  EntityProperty.wrappedValue.getter();
  if (!v56)
  {
    if (!v143)
    {
LABEL_31:
      outlined init with copy of SearchCATEntity(a1, (uint64_t)v54);
      OUTLINED_FUNCTION_12_21();
      goto LABEL_32;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    outlined init with copy of SearchCATEntity(a1, (uint64_t)v54);
    OUTLINED_FUNCTION_12_21();
    goto LABEL_11;
  }
  if (!v143) {
    goto LABEL_10;
  }
  if (v55 == v142 && v56 == v143)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v55 = OUTLINED_FUNCTION_22_17();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of SearchCATEntity(a1, (uint64_t)v54);
  OUTLINED_FUNCTION_12_21();
  if ((v55 & 1) == 0)
  {
LABEL_11:
    outlined destroy of SearchCATEntity((uint64_t)v52);
    outlined destroy of SearchCATEntity((uint64_t)v54);
    goto LABEL_12;
  }
LABEL_32:
  EntityProperty.wrappedValue.getter();
  uint64_t v55 = v142;
  uint64_t v73 = v143;
  EntityProperty.wrappedValue.getter();
  uint64_t v74 = v143;
  if (!v73)
  {
    outlined destroy of SearchCATEntity((uint64_t)v52);
    outlined destroy of SearchCATEntity((uint64_t)v54);
    if (!v74)
    {
LABEL_44:
      outlined init with copy of SearchCATEntity(a1, (uint64_t)v49);
      outlined init with copy of SearchCATEntity(a2, (uint64_t)v46);
      uint64_t v58 = v141;
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v59 = v140;
    uint64_t v58 = v141;
    outlined init with copy of SearchCATEntity(a1, (uint64_t)v49);
    outlined init with copy of SearchCATEntity(a2, (uint64_t)v46);
LABEL_13:
    outlined destroy of SearchCATEntity((uint64_t)v46);
    outlined destroy of SearchCATEntity((uint64_t)v49);
LABEL_14:
    uint64_t v60 = v131;
    uint64_t v61 = v132;
    uint64_t v62 = v130;
    outlined init with copy of SearchCATEntity(a1, v131);
    OUTLINED_FUNCTION_21_17();
LABEL_15:
    outlined destroy of SearchCATEntity(v62);
    outlined destroy of SearchCATEntity(v60);
LABEL_16:
    OUTLINED_FUNCTION_19_17();
    OUTLINED_FUNCTION_16_18();
    uint64_t v63 = v139;
LABEL_17:
    uint64_t v64 = v59;
    outlined destroy of SearchCATEntity((uint64_t)v46);
    outlined destroy of SearchCATEntity(v55);
LABEL_18:
    outlined init with copy of SearchCATEntity(a1, v63);
    OUTLINED_FUNCTION_15_19();
    uint64_t v65 = v134;
    uint64_t v66 = v135;
LABEL_19:
    outlined destroy of SearchCATEntity(v59);
    outlined destroy of SearchCATEntity(v63);
    uint64_t v67 = v64;
LABEL_20:
    uint64_t v68 = v61;
    uint64_t v69 = v128;
    goto LABEL_21;
  }
  if (!v143)
  {
    swift_bridgeObjectRetain();
    outlined destroy of SearchCATEntity((uint64_t)v52);
    outlined destroy of SearchCATEntity((uint64_t)v54);
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  if (v55 == v142 && v73 == v143)
  {
    swift_bridgeObjectRelease();
    outlined destroy of SearchCATEntity((uint64_t)v52);
    outlined destroy of SearchCATEntity((uint64_t)v54);
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  uint64_t v55 = OUTLINED_FUNCTION_22_17();
  swift_bridgeObjectRelease();
  outlined destroy of SearchCATEntity((uint64_t)v52);
  outlined destroy of SearchCATEntity((uint64_t)v54);
  swift_bridgeObjectRelease();
  outlined init with copy of SearchCATEntity(a1, (uint64_t)v49);
  outlined init with copy of SearchCATEntity(a2, (uint64_t)v46);
  uint64_t v59 = v140;
  uint64_t v58 = v141;
  if ((v55 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_45:
  uint64_t v76 = v124;
  EntityProperty.wrappedValue.getter();
  uint64_t v77 = v123;
  EntityProperty.wrappedValue.getter();
  uint64_t v78 = v125;
  uint64_t v79 = v125 + *(int *)(v122 + 48);
  outlined init with copy of Date?(v76, v125);
  outlined init with copy of Date?(v77, v79);
  if (__swift_getEnumTagSinglePayload(v78, 1, v126) == 1)
  {
    uint64_t v55 = (uint64_t)&demangling cache variable for type metadata for Date?;
    outlined destroy of SearchResult?(v77, &demangling cache variable for type metadata for Date?);
    outlined destroy of SearchResult?(v76, &demangling cache variable for type metadata for Date?);
    outlined destroy of SearchCATEntity((uint64_t)v46);
    outlined destroy of SearchCATEntity((uint64_t)v49);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v79, 1, v126);
    uint64_t v59 = v140;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of SearchResult?(v125, &demangling cache variable for type metadata for Date?);
      uint64_t v60 = v131;
      outlined init with copy of SearchCATEntity(a1, v131);
      uint64_t v62 = v130;
      outlined init with copy of SearchCATEntity(a2, v130);
      uint64_t v61 = v132;
      goto LABEL_52;
    }
    goto LABEL_50;
  }
  uint64_t v81 = v121;
  outlined init with copy of Date?(v78, v121);
  uint64_t v82 = v126;
  if (__swift_getEnumTagSinglePayload(v79, 1, v126) == 1)
  {
    uint64_t v55 = (uint64_t)&demangling cache variable for type metadata for Date?;
    outlined destroy of SearchResult?(v123, &demangling cache variable for type metadata for Date?);
    outlined destroy of SearchResult?(v124, &demangling cache variable for type metadata for Date?);
    outlined destroy of SearchCATEntity((uint64_t)v46);
    outlined destroy of SearchCATEntity((uint64_t)v49);
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v81, v82);
    uint64_t v59 = v140;
LABEL_50:
    outlined destroy of SearchResult?(v125, &demangling cache variable for type metadata for (Date?, Date?));
    goto LABEL_14;
  }
  uint64_t v83 = v120;
  uint64_t v55 = v119;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 32))(v119, v79, v82);
  _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  LODWORD(v122) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
  v84(v55, v82);
  outlined destroy of SearchResult?(v123, &demangling cache variable for type metadata for Date?);
  outlined destroy of SearchResult?(v124, &demangling cache variable for type metadata for Date?);
  outlined destroy of SearchCATEntity((uint64_t)v46);
  outlined destroy of SearchCATEntity((uint64_t)v49);
  v84(v81, v82);
  uint64_t v58 = v141;
  outlined destroy of SearchResult?(v125, &demangling cache variable for type metadata for Date?);
  uint64_t v60 = v131;
  outlined init with copy of SearchCATEntity(a1, v131);
  uint64_t v62 = v130;
  outlined init with copy of SearchCATEntity(a2, v130);
  uint64_t v61 = v132;
  uint64_t v59 = v140;
  if ((v122 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_52:
  EntityProperty.wrappedValue.getter();
  uint64_t v85 = v142;
  EntityProperty.wrappedValue.getter();
  uint64_t v55 = v142;
  if (!v85)
  {
    outlined destroy of SearchCATEntity(v62);
    outlined destroy of SearchCATEntity(v60);
    if (!v55)
    {
      OUTLINED_FUNCTION_19_17();
      OUTLINED_FUNCTION_16_18();
      goto LABEL_61;
    }
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  if (!v142)
  {
    swift_bridgeObjectRetain();
    outlined destroy of SearchCATEntity(v62);
    outlined destroy of SearchCATEntity(v60);
    swift_bridgeObjectRelease_n();
LABEL_59:
    uint64_t v58 = v141;
    goto LABEL_16;
  }
  char v86 = specialized static Array<A>.== infix(_:_:)(v85, v142);
  swift_bridgeObjectRelease();
  outlined destroy of SearchCATEntity(v62);
  outlined destroy of SearchCATEntity(v60);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_19_17();
  OUTLINED_FUNCTION_16_18();
  uint64_t v58 = v141;
  uint64_t v63 = v139;
  if ((v86 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_61:
  EntityProperty.wrappedValue.getter();
  uint64_t v87 = v55;
  uint64_t v89 = v142;
  uint64_t v88 = v143;
  EntityProperty.wrappedValue.getter();
  uint64_t v90 = v143;
  if (!v88)
  {
    outlined destroy of SearchCATEntity((uint64_t)v46);
    outlined destroy of SearchCATEntity(v87);
    uint64_t v58 = v141;
    if (!v90)
    {
LABEL_74:
      uint64_t v64 = v59;
      uint64_t v63 = v139;
      outlined init with copy of SearchCATEntity(a1, v139);
      OUTLINED_FUNCTION_15_19();
      goto LABEL_75;
    }
    uint64_t v64 = v59;
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
  uint64_t v58 = v141;
  if (!v143)
  {
    uint64_t v64 = v59;
    swift_bridgeObjectRetain();
    outlined destroy of SearchCATEntity(v137);
    outlined destroy of SearchCATEntity(v138);
    OUTLINED_FUNCTION_153();
LABEL_72:
    uint64_t v63 = v139;
    goto LABEL_18;
  }
  if (v89 == v142 && v88 == v143)
  {
    swift_bridgeObjectRelease();
    outlined destroy of SearchCATEntity(v137);
    outlined destroy of SearchCATEntity(v138);
    swift_bridgeObjectRelease();
    goto LABEL_74;
  }
  uint64_t v64 = v59;
  char v92 = OUTLINED_FUNCTION_0();
  swift_bridgeObjectRelease();
  outlined destroy of SearchCATEntity(v137);
  outlined destroy of SearchCATEntity(v138);
  swift_bridgeObjectRelease();
  uint64_t v63 = v139;
  outlined init with copy of SearchCATEntity(a1, v139);
  OUTLINED_FUNCTION_15_19();
  uint64_t v65 = v134;
  uint64_t v66 = v135;
  if ((v92 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_75:
  EntityProperty.wrappedValue.getter();
  uint64_t v94 = v142;
  uint64_t v93 = v143;
  EntityProperty.wrappedValue.getter();
  uint64_t v95 = v143;
  if (!v93)
  {
    outlined destroy of SearchCATEntity(v59);
    outlined destroy of SearchCATEntity(v63);
    uint64_t v58 = v141;
    uint64_t v67 = v64;
    uint64_t v68 = v61;
    uint64_t v69 = v128;
    if (!v95)
    {
LABEL_87:
      uint64_t v66 = v135;
      outlined init with copy of SearchCATEntity(a1, v135);
      OUTLINED_FUNCTION_12_21();
      goto LABEL_88;
    }
    swift_bridgeObjectRelease();
    uint64_t v65 = v134;
    uint64_t v66 = v135;
LABEL_21:
    outlined init with copy of SearchCATEntity(a1, v66);
    OUTLINED_FUNCTION_12_21();
LABEL_22:
    outlined destroy of SearchCATEntity(v58);
    outlined destroy of SearchCATEntity(v66);
LABEL_23:
    outlined init with copy of SearchCATEntity(a1, v69);
    outlined init with copy of SearchCATEntity(a2, v65);
LABEL_24:
    outlined destroy of SearchCATEntity(v65);
    outlined destroy of SearchCATEntity(v69);
    goto LABEL_25;
  }
  uint64_t v58 = v141;
  uint64_t v67 = v64;
  if (!v143)
  {
    swift_bridgeObjectRetain();
    outlined destroy of SearchCATEntity(v136);
    outlined destroy of SearchCATEntity(v139);
    OUTLINED_FUNCTION_153();
    uint64_t v65 = v134;
    uint64_t v66 = v135;
    goto LABEL_20;
  }
  BOOL v96 = v94 == v142 && v93 == v143;
  uint64_t v68 = v61;
  if (v96)
  {
    swift_bridgeObjectRelease();
    outlined destroy of SearchCATEntity(v136);
    outlined destroy of SearchCATEntity(v139);
    swift_bridgeObjectRelease();
    uint64_t v69 = v128;
    goto LABEL_87;
  }
  char v97 = OUTLINED_FUNCTION_0();
  swift_bridgeObjectRelease();
  outlined destroy of SearchCATEntity(v136);
  outlined destroy of SearchCATEntity(v139);
  swift_bridgeObjectRelease();
  uint64_t v66 = v135;
  outlined init with copy of SearchCATEntity(a1, v135);
  OUTLINED_FUNCTION_12_21();
  uint64_t v65 = v134;
  uint64_t v69 = v128;
  if ((v97 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_88:
  uint64_t v98 = v66;
  EntityProperty.wrappedValue.getter();
  uint64_t v100 = v142;
  uint64_t v99 = v143;
  uint64_t v101 = v141;
  EntityProperty.wrappedValue.getter();
  uint64_t v102 = v143;
  if (!v99)
  {
    outlined destroy of SearchCATEntity(v101);
    outlined destroy of SearchCATEntity(v98);
    if (!v102)
    {
LABEL_101:
      outlined init with copy of SearchCATEntity(a1, v69);
      uint64_t v65 = v134;
      outlined init with copy of SearchCATEntity(a2, v134);
      goto LABEL_102;
    }
    swift_bridgeObjectRelease();
    goto LABEL_99;
  }
  if (!v143)
  {
    swift_bridgeObjectRetain();
    outlined destroy of SearchCATEntity(v101);
    outlined destroy of SearchCATEntity(v135);
    OUTLINED_FUNCTION_153();
LABEL_99:
    uint64_t v65 = v134;
    goto LABEL_23;
  }
  if (v100 == v142 && v99 == v143)
  {
    swift_bridgeObjectRelease();
    outlined destroy of SearchCATEntity(v101);
    outlined destroy of SearchCATEntity(v135);
    swift_bridgeObjectRelease();
    goto LABEL_101;
  }
  char v104 = OUTLINED_FUNCTION_0();
  swift_bridgeObjectRelease();
  outlined destroy of SearchCATEntity(v101);
  outlined destroy of SearchCATEntity(v135);
  swift_bridgeObjectRelease();
  outlined init with copy of SearchCATEntity(a1, v69);
  uint64_t v65 = v134;
  outlined init with copy of SearchCATEntity(a2, v134);
  if ((v104 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_102:
  uint64_t v105 = v65;
  EntityProperty.wrappedValue.getter();
  uint64_t v107 = v142;
  uint64_t v106 = v143;
  EntityProperty.wrappedValue.getter();
  uint64_t v108 = v143;
  if (!v106)
  {
    outlined destroy of SearchCATEntity(v105);
    outlined destroy of SearchCATEntity(v69);
    if (!v108)
    {
LABEL_114:
      uint64_t v70 = v133;
      outlined init with copy of SearchCATEntity(a1, v133);
      outlined init with copy of SearchCATEntity(a2, v67);
      goto LABEL_115;
    }
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v70 = v133;
    outlined init with copy of SearchCATEntity(a1, v133);
    outlined init with copy of SearchCATEntity(a2, v67);
LABEL_26:
    outlined destroy of SearchCATEntity(v67);
    outlined destroy of SearchCATEntity(v70);
    OUTLINED_FUNCTION_20_16();
    OUTLINED_FUNCTION_21_17();
    goto LABEL_27;
  }
  if (!v143)
  {
    swift_bridgeObjectRetain();
    outlined destroy of SearchCATEntity(v134);
    outlined destroy of SearchCATEntity(v69);
    OUTLINED_FUNCTION_153();
    goto LABEL_25;
  }
  if (v107 == v142 && v106 == v143)
  {
    swift_bridgeObjectRelease();
    outlined destroy of SearchCATEntity(v134);
    outlined destroy of SearchCATEntity(v69);
    swift_bridgeObjectRelease();
    goto LABEL_114;
  }
  char v110 = OUTLINED_FUNCTION_0();
  swift_bridgeObjectRelease();
  outlined destroy of SearchCATEntity(v134);
  outlined destroy of SearchCATEntity(v69);
  swift_bridgeObjectRelease();
  uint64_t v70 = v133;
  outlined init with copy of SearchCATEntity(a1, v133);
  outlined init with copy of SearchCATEntity(a2, v67);
  if ((v110 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_115:
  EntityProperty.wrappedValue.getter();
  uint64_t v112 = v142;
  uint64_t v111 = v143;
  EntityProperty.wrappedValue.getter();
  if (v112 == v142 && v111 == v143)
  {
    OUTLINED_FUNCTION_153();
    outlined destroy of SearchCATEntity(v67);
    outlined destroy of SearchCATEntity(v70);
    OUTLINED_FUNCTION_20_16();
    OUTLINED_FUNCTION_21_17();
    goto LABEL_122;
  }
  char v114 = OUTLINED_FUNCTION_0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of SearchCATEntity(v67);
  outlined destroy of SearchCATEntity(v70);
  OUTLINED_FUNCTION_20_16();
  OUTLINED_FUNCTION_21_17();
  if ((v114 & 1) == 0)
  {
LABEL_27:
    outlined destroy of SearchCATEntity(v68);
    outlined destroy of SearchCATEntity(a1);
LABEL_28:
    char v71 = 0;
    return v71 & 1;
  }
LABEL_122:
  EntityProperty.wrappedValue.getter();
  uint64_t v116 = v142;
  uint64_t v115 = v143;
  EntityProperty.wrappedValue.getter();
  uint64_t v117 = v143;
  if (!v115)
  {
    outlined destroy of SearchCATEntity(v68);
    outlined destroy of SearchCATEntity(a1);
    if (!v117)
    {
      char v71 = 1;
      return v71 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  if (!v143)
  {
    swift_bridgeObjectRetain();
    outlined destroy of SearchCATEntity(v68);
    outlined destroy of SearchCATEntity(a1);
    OUTLINED_FUNCTION_153();
    goto LABEL_28;
  }
  if (v116 == v142 && v115 == v143) {
    char v71 = 1;
  }
  else {
    char v71 = OUTLINED_FUNCTION_0();
  }
  swift_bridgeObjectRelease();
  outlined destroy of SearchCATEntity(v68);
  outlined destroy of SearchCATEntity(a1);
  swift_bridgeObjectRelease();
  return v71 & 1;
}

uint64_t outlined init with copy of SearchCATEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchCATEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SearchCATEntity(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchCATEntity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for AppEntity in SearchCATEntity()
{
  return _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
}

uint64_t base witness table accessor for AppValue in SearchCATEntity()
{
  return _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
}

uint64_t base witness table accessor for DisplayRepresentable in SearchCATEntity()
{
  return _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
}

uint64_t base witness table accessor for Identifiable in SearchCATEntity()
{
  return _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
}

uint64_t associated type witness table accessor for AppEntity.DefaultQuery : EntityQuery in SearchCATEntity()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type _TransientAppEntityQuery<SearchCATEntity> and conformance _TransientAppEntityQuery<A>, &demangling cache variable for type metadata for _TransientAppEntityQuery<SearchCATEntity>);
}

uint64_t base witness table accessor for PersistentlyIdentifiable in SearchCATEntity()
{
  return _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
}

uint64_t base witness table accessor for TypeDisplayRepresentable in SearchCATEntity()
{
  return _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
}

uint64_t base witness table accessor for _IntentValue in SearchCATEntity()
{
  return _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
}

uint64_t base witness table accessor for InstanceDisplayRepresentable in SearchCATEntity()
{
  return _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in SearchCATEntity()
{
  return _s10Foundation4DateVACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in SearchCATEntity()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyResolverSpecification<SearchCATEntity> and conformance EmptyResolverSpecification<A>, &demangling cache variable for type metadata for EmptyResolverSpecification<SearchCATEntity>);
}

uint64_t base witness table accessor for CustomLocalizedStringResourceConvertible in SearchCATEntity()
{
  return _s10Foundation4DateVACSQAAWlTm_0(&lazy protocol witness table cache variable for type SearchCATEntity and conformance SearchCATEntity, (void (*)(uint64_t))type metadata accessor for SearchCATEntity);
}

uint64_t sub_2583A93DC()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchCATEntity.documentSource.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A9404(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchCATEntity.documentSource : SearchCATEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchCATEntity.documentSource.setter);
}

uint64_t sub_2583A9430()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchCATEntity.title.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A9458(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchCATEntity.documentSource : SearchCATEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchCATEntity.title.setter);
}

uint64_t sub_2583A9484()
{
  return SearchCATEntity.contentCreationDate.getter();
}

uint64_t sub_2583A94AC()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchCATEntity.sentFrom.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2583A94D8()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchCATEntity.answer.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A9500(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchCATEntity.documentSource : SearchCATEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchCATEntity.answer.setter);
}

uint64_t sub_2583A952C()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchCATEntity.resultType.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A9554(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchCATEntity.documentSource : SearchCATEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchCATEntity.resultType.setter);
}

uint64_t sub_2583A9580()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchCATEntity.fullSearchEntityDescription.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A95A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchCATEntity.documentSource : SearchCATEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchCATEntity.fullSearchEntityDescription.setter);
}

uint64_t sub_2583A95D4()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchCATEntity.supportSearchEntityDescription.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A95FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchCATEntity.documentSource : SearchCATEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchCATEntity.supportSearchEntityDescription.setter);
}

uint64_t sub_2583A9628()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchCATEntity.resultSourceDialogDisplayName.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A9654()
{
  OUTLINED_FUNCTION_13_7();
  uint64_t result = SearchCATEntity.fullContent.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2583A967C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SearchCATEntity.documentSource : SearchCATEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))SearchCATEntity.fullContent.setter);
}

uint64_t dispatch thunk of SearchCATEntityConvertible.asCATEntity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchCATEntity(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for DisplayRepresentation();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v10 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)v4 + v10) = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[12];
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(uint64_t *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    uint64_t v12 = a3[14];
    *(uint64_t *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *(uint64_t *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SearchCATEntity(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SearchCATEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SearchCATEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SearchCATEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for SearchCATEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_release();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_release();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_release();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCATEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2583A9E00);
}

uint64_t sub_2583A9E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SearchCATEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2583A9EA4);
}

void sub_2583A9EA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for DisplayRepresentation();
  OUTLINED_FUNCTION_30_2();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for SearchCATEntity()
{
  uint64_t result = type metadata accessor for DisplayRepresentation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s10Foundation4DateVACSQAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_12(uint64_t a1)
{
  *unint64_t v1 = a1;
  return type metadata accessor for SearchCATEntity();
}

uint64_t OUTLINED_FUNCTION_3_23()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t OUTLINED_FUNCTION_4_20()
{
  return type metadata accessor for SearchCATEntity();
}

uint64_t OUTLINED_FUNCTION_11_18()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t OUTLINED_FUNCTION_12_21()
{
  return outlined init with copy of SearchCATEntity(v0, v1);
}

uint64_t OUTLINED_FUNCTION_15_19()
{
  uint64_t v3 = *(void *)(v1 - 152);
  return outlined init with copy of SearchCATEntity(v0, v3);
}

uint64_t OUTLINED_FUNCTION_16_18()
{
  uint64_t v3 = *(void *)(v1 - 144);
  return outlined init with copy of SearchCATEntity(v0, v3);
}

uint64_t OUTLINED_FUNCTION_17_15()
{
  return 0x746E656D75636F64;
}

uint64_t OUTLINED_FUNCTION_18_20()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_19_17()
{
  uint64_t v3 = *(void *)(v1 - 136);
  return outlined init with copy of SearchCATEntity(v0, v3);
}

uint64_t OUTLINED_FUNCTION_20_16()
{
  uint64_t v3 = *(void *)(v1 - 208);
  return outlined init with copy of SearchCATEntity(v0, v3);
}

uint64_t OUTLINED_FUNCTION_21_17()
{
  return outlined init with copy of SearchCATEntity(v0, v1);
}

uint64_t OUTLINED_FUNCTION_22_17()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL static AceService.SnippetOption.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AceService.SnippetOption.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AceService.SnippetOption.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AceService.__allocating_init()()
{
  OUTLINED_FUNCTION_10_20();
  uint64_t v0 = swift_allocObject();
  AceService.init()();
  return v0;
}

uint64_t AceService.init()()
{
  *(void *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F285E0]), sel_init);
  *(void *)(v0 + 24) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F284A0]), sel_init);
  return v0;
}

void AceService.addViews(for:dialog:)()
{
  OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_20_17(v2);
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_7_22();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_14_10();
  uint64_t v27 = MEMORY[0x263F8EE78];
  if (v0)
  {
    v26[0] = v1;
    v26[1] = v0;
    static CharacterSet.whitespacesAndNewlines.getter();
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.trimmingCharacters(in:)();
    uint64_t v7 = OUTLINED_FUNCTION_5_15();
    v8(v7);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_16();
    if (v11) {
      uint64_t v9 = v10;
    }
    if (v9)
    {
      OUTLINED_FUNCTION_19_18(objc_msgSend(objc_allocWithZone(MEMORY[0x263F64EF0]), sel_init));
      OUTLINED_FUNCTION_18_21(v26);

      uint64_t v0 = v26;
      MEMORY[0x25A2C7E10]();
      OUTLINED_FUNCTION_13_23();
      if (v12) {
        OUTLINED_FUNCTION_4_21();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  id v13 = closure #1 in AceService.addViews(for:dialog:)();
  MEMORY[0x25A2C7E10]();
  OUTLINED_FUNCTION_12_22();
  if (v12) {
    OUTLINED_FUNCTION_4_21();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64ED8]), sel_init);
  outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(v27, v14);
  id v15 = v14;
  OUTLINED_FUNCTION_14_20();
  UUID.uuidString.getter();
  uint64_t v16 = *(uint64_t (**)(uint64_t))(v4 + 8);
  uint64_t v17 = OUTLINED_FUNCTION_1_17();
  uint64_t v18 = v16(v17);
  OUTLINED_FUNCTION_6_19(v18, v19, v20, (SEL *)&selRef_setAceId_);

  uint64_t v21 = v0;
  OUTLINED_FUNCTION_14_20();
  UUID.uuidString.getter();
  uint64_t v22 = OUTLINED_FUNCTION_1_17();
  uint64_t v23 = v16(v22);
  OUTLINED_FUNCTION_6_19(v23, v24, v25, (SEL *)&selRef_setRefId_);

  OUTLINED_FUNCTION_119_0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  id v14;
  id v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void v26[2];
  uint64_t v27;

  OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_20_17(v2);
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_7_22();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_14_10();
  uint64_t v27 = MEMORY[0x263F8EE78];
  if (v0)
  {
    v26[0] = v1;
    v26[1] = v0;
    static CharacterSet.whitespacesAndNewlines.getter();
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.trimmingCharacters(in:)();
    uint64_t v7 = OUTLINED_FUNCTION_5_15();
    v8(v7);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_16();
    if (v11) {
      uint64_t v9 = v10;
    }
    if (v9)
    {
      OUTLINED_FUNCTION_19_18(objc_msgSend(objc_allocWithZone(MEMORY[0x263F64EF0]), sel_init));
      OUTLINED_FUNCTION_18_21(v26);

      uint64_t v0 = v26;
      MEMORY[0x25A2C7E10]();
      OUTLINED_FUNCTION_13_23();
      if (v12) {
        OUTLINED_FUNCTION_4_21();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  id v13 = closure #1 in AceService.addViews(for:dialog:)();
  MEMORY[0x25A2C7E10]();
  OUTLINED_FUNCTION_12_22();
  if (v12) {
    OUTLINED_FUNCTION_4_21();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64ED8]), sel_init);
  outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(v27, v14);
  id v15 = v14;
  OUTLINED_FUNCTION_14_20();
  UUID.uuidString.getter();
  uint64_t v16 = *(uint64_t (**)(uint64_t))(v4 + 8);
  uint64_t v17 = OUTLINED_FUNCTION_1_17();
  uint64_t v18 = v16(v17);
  OUTLINED_FUNCTION_6_19(v18, v19, v20, (SEL *)&selRef_setAceId_);

  uint64_t v21 = v0;
  OUTLINED_FUNCTION_14_20();
  UUID.uuidString.getter();
  uint64_t v22 = OUTLINED_FUNCTION_1_17();
  uint64_t v23 = v16(v22);
  OUTLINED_FUNCTION_6_19(v23, v24, v25, (SEL *)&selRef_setRefId_);

  OUTLINED_FUNCTION_119_0();
}

id closure #1 in AceService.addViews(for:dialog:)()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F65048]), sel_init);
  type metadata accessor for Response();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Response and conformance Response, MEMORY[0x263F77258]);
  uint64_t v5 = ProtobufBuilder.serializedData()();
  outlined bridged method (mbnn) of @objc SAUIVisualResponseSnippet.modelData.setter(v5, v6, v4);
  id v7 = v4;
  UUID.init()();
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v8, v10, v7, (SEL *)&selRef_setAceId_);

  return v7;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for SACardSnippet);
  id v4 = (void *)static SACardSnippet.makeFromCard(card:shouldGenerateAceId:)();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v5, v6, v4, (SEL *)&selRef_setItemType_);
  id v7 = v4;
  UUID.init()();
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v8, v10, v7, (SEL *)&selRef_setAceId_);

  return v7;
}

id AceService.addPlugInViews(snippetPluginModel:dialog:responseMode:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(a1, v10);
  return specialized AceService.addPlugInViews(snippetPluginModel:dialog:responseMode:)((uint64_t)v12, a2, a3, a4, a5, v5, v10, v11);
}

void AceService.sendResponse(_:dialog:mode:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = v0;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_1();
  uint64_t v44 = v3;
  uint64_t v45 = v2;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_184_0();
  uint64_t v43 = v4;
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_1();
  uint64_t v41 = v6;
  uint64_t v42 = v5;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_24(v7, v36);
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_1();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_15();
  id v14 = (void *)(v13 - v12);
  uint64_t v39 = type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_1();
  uint64_t v16 = v15;
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v36 - v21;
  AceService.addViews(for:dialog:)();
  id v38 = v23;
  id v24 = objc_msgSend(v23, sel_dictionary);
  if (v24)
  {
    uint64_t v25 = v24;
    v46[0] = 0;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

    uint64_t v26 = v46[0];
  }
  else
  {
    uint64_t v26 = 0;
  }
  objc_msgSend(*(id *)(v1 + 16), sel_startUIRequest_, 0);
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v37 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  *id v14 = 750;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v14, *MEMORY[0x263F8F000], v8);
  MEMORY[0x25A2C76F0](v20, v14);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v14, v8);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v28 = v39;
  v27(v20, v39);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v1;
  *(void *)(v29 + 24) = v26;
  v46[4] = partial apply for closure #1 in AceService.sendResponse(_:dialog:mode:);
  v46[5] = v29;
  v46[0] = MEMORY[0x263EF8330];
  v46[1] = 1107296256;
  v46[2] = thunk for @escaping @callee_guaranteed () -> ();
  v46[3] = &block_descriptor_4;
  uint64_t v30 = _Block_copy(v46);
  swift_retain();
  swift_release();
  uint64_t v31 = v40;
  static DispatchQoS.unspecified.getter();
  v46[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v32 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v33 = (void *)v37;
  MEMORY[0x25A2C8280](v22, v31, v32, v30);
  _Block_release(v30);

  OUTLINED_FUNCTION_16_1();
  v34();
  OUTLINED_FUNCTION_16_1();
  v35();
  v27(v22, v28);
  OUTLINED_FUNCTION_119_0();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void AceService.sendCard(_:dialog:mode:option:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v65 = v0;
  uint64_t v2 = v1;
  id v55 = v3;
  uint64_t v53 = v4;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_1();
  uint64_t v63 = v6;
  uint64_t v64 = v5;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_24(v7, v51);
  uint64_t v62 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_1();
  uint64_t v60 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_184_0();
  uint64_t v59 = v10;
  uint64_t v54 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_1();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_15();
  uint64_t v16 = (void *)(v15 - v14);
  type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_1();
  uint64_t v57 = v18;
  uint64_t v58 = v17;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v56 = (char *)&v51 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RGPluginModel?);
  MEMORY[0x270FA5388](v23 - 8);
  OUTLINED_FUNCTION_15();
  uint64_t v26 = (uint64_t *)(v25 - v24);
  uint64_t v27 = type metadata accessor for RGPluginModel();
  OUTLINED_FUNCTION_1();
  uint64_t v29 = v28;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_15();
  uint64_t v33 = v32 - v31;
  char v34 = *v2;
  id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64ED8]), sel_init);
  if (v34) {
    goto LABEL_4;
  }
  uint64_t v52 = v12;
  SFCard.snippetPluginModel.getter(v26);
  if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27) == 1)
  {
    outlined destroy of RGPluginModel?((uint64_t)v26);
    uint64_t v12 = v52;
LABEL_4:
    AceService.addViews(for:dialog:)();
    id v37 = v36;

    goto LABEL_6;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v29 + 32))(v33, v26, v27);
  id v37 = specialized AceService.addPlugInViews(snippetPluginModel:dialog:responseMode:)(v33, 0, 0, 0, 0);

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v33, v27);
  uint64_t v12 = v52;
LABEL_6:
  id v38 = objc_msgSend(v37, sel_dictionary);
  id v55 = v37;
  if (v38)
  {
    v66[0] = 0;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

    id v38 = (id)v66[0];
  }
  uint64_t v39 = v65;
  objc_msgSend(*(id *)(v65 + 16), sel_startUIRequest_, 0);
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v53 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  *uint64_t v16 = 750;
  uint64_t v40 = v54;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v16, *MEMORY[0x263F8F000], v54);
  uint64_t v41 = v56;
  MEMORY[0x25A2C76F0](v21, v16);
  (*(void (**)(void *, uint64_t))(v12 + 8))(v16, v40);
  uint64_t v42 = v58;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v57 + 8);
  v43(v21, v58);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v39;
  *(void *)(v44 + 24) = v38;
  v66[4] = partial apply for closure #1 in AceService.sendCard(_:dialog:mode:option:);
  v66[5] = v44;
  v66[0] = MEMORY[0x263EF8330];
  v66[1] = 1107296256;
  v66[2] = thunk for @escaping @callee_guaranteed () -> ();
  v66[3] = &block_descriptor_6;
  uint64_t v45 = _Block_copy(v66);
  swift_retain();
  swift_release();
  uint64_t v46 = v59;
  static DispatchQoS.unspecified.getter();
  v66[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v47 = v61;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v48 = (void *)v53;
  MEMORY[0x25A2C8280](v41, v46, v47, v45);
  _Block_release(v45);

  OUTLINED_FUNCTION_16_1();
  v49();
  OUTLINED_FUNCTION_16_1();
  v50();
  v43(v41, v42);
  OUTLINED_FUNCTION_119_0();
}

void closure #1 in AceService.sendResponse(_:dialog:mode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (a2) {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  objc_msgSend(v2, sel_broadcastCommandDictionary_);
}

uint64_t AceService.deinit()
{
  return v0;
}

uint64_t AceService.__deallocating_deinit()
{
  AceService.deinit();
  uint64_t v0 = OUTLINED_FUNCTION_10_20();
  return MEMORY[0x270FA0228](v0, v1, v2);
}

void outlined bridged method (mbnn) of @objc SAUIVisualResponseSnippet.modelData.setter(uint64_t a1, unint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(a1, a2);
  objc_msgSend(a3, sel_setModelData_, isa);
}

void outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(uint64_t a1, void *a2)
{
  type metadata accessor for NSUserDefaults(0, &lazy cache variable for type metadata for SAAceView);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setViews_, isa);
}

void outlined bridged method (mbgnn) of @objc SAUIAssistantUtteranceView.text.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x25A2C7AB0]();
  objc_msgSend(a3, sel_setText_, v4);
}

void outlined bridged method (mbgnn) of @objc SAAceView.speakableText.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x25A2C7AB0]();
  objc_msgSend(a3, sel_setSpeakableText_, v4);
}

void outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6 = (id)MEMORY[0x25A2C7AB0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, *a4, v6);
}

id specialized AceService.addPlugInViews(snippetPluginModel:dialog:responseMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DeviceIdiom();
  uint64_t v12 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for RGPluginModel();
  v37[3] = v15;
  v37[4] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type RGPluginModel and conformance RGPluginModel, MEMORY[0x263F4C1E0]);
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm(v37);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(boxed_opaque_existential_1Tm, a1, v15);
  uint64_t v36 = MEMORY[0x263F8EE78];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!a3) {
      goto LABEL_9;
    }
  }
  else if (!a3)
  {
    goto LABEL_9;
  }
  uint64_t v17 = (void *)MEMORY[0x25A2C6C70](a2, a3, a2, a3);
  if (v17)
  {
    id v18 = v17;
    MEMORY[0x25A2C7E10]();
    if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
LABEL_9:
  id v19 = (id)AFCurrentUserInterfaceIdiom();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  DeviceIdiom.init(aceValue:)();
  uint64_t v20 = (void *)static ResponseRenderingUtil.makeSnippetView(responseMode:deviceIdiom:snippetPluginModel:)();
  swift_bridgeObjectRelease();
  if (v20)
  {
    id v21 = v20;
    MEMORY[0x25A2C7E10]();
    if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64ED8]), sel_init);
  outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(v36, v22);
  id v23 = v22;
  UUID.init()();
  uint64_t v24 = UUID.uuidString.getter();
  uint64_t v26 = v25;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v28 = v35;
  v27(v11, v35);
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v24, v26, v23, (SEL *)&selRef_setAceId_);

  id v29 = v23;
  UUID.init()();
  uint64_t v30 = UUID.uuidString.getter();
  uint64_t v32 = v31;
  v27(v11, v28);
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v30, v32, v29, (SEL *)&selRef_setRefId_);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v34);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
  return v29;
}

id specialized AceService.addPlugInViews(snippetPluginModel:dialog:responseMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DeviceIdiom();
  uint64_t v39 = *(void *)(v17 - 8);
  uint64_t v40 = v17;
  MEMORY[0x270FA5388](v17);
  id v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[3] = a7;
  v43[4] = a8;
  boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm(v43);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(boxed_opaque_existential_1Tm, a1, a7);
  uint64_t v42 = MEMORY[0x263F8EE78];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!a3) {
      goto LABEL_9;
    }
  }
  else if (!a3)
  {
    goto LABEL_9;
  }
  id v21 = (void *)MEMORY[0x25A2C6C70](a2, a3, a2, a3);
  if (v21)
  {
    id v22 = v21;
    MEMORY[0x25A2C7E10]();
    if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
LABEL_9:
  id v23 = (id)AFCurrentUserInterfaceIdiom();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  DeviceIdiom.init(aceValue:)();
  uint64_t v24 = (void *)static ResponseRenderingUtil.makeSnippetView(responseMode:deviceIdiom:snippetPluginModel:)();
  swift_bridgeObjectRelease();
  if (v24)
  {
    id v25 = v24;
    MEMORY[0x25A2C7E10]();
    if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64ED8]), sel_init);
  outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(v42, v26);
  id v27 = v26;
  UUID.init()();
  uint64_t v28 = UUID.uuidString.getter();
  uint64_t v30 = v29;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v32 = v41;
  v31(v16, v41);
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v28, v30, v27, (SEL *)&selRef_setAceId_);

  id v33 = v27;
  UUID.init()();
  uint64_t v34 = UUID.uuidString.getter();
  uint64_t v36 = v35;
  v31(v16, v32);
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v34, v36, v33, (SEL *)&selRef_setRefId_);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v40);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v43);
  return v33;
}

void partial apply for closure #1 in AceService.sendResponse(_:dialog:mode:)()
{
  closure #1 in AceService.sendResponse(_:dialog:mode:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_10_20();
  return MEMORY[0x270FA0238](v0, v1, v2);
}

unint64_t lazy protocol witness table accessor for type AceService.SnippetOption and conformance AceService.SnippetOption()
{
  unint64_t result = lazy protocol witness table cache variable for type AceService.SnippetOption and conformance AceService.SnippetOption;
  if (!lazy protocol witness table cache variable for type AceService.SnippetOption and conformance AceService.SnippetOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AceService.SnippetOption and conformance AceService.SnippetOption);
  }
  return result;
}

uint64_t type metadata accessor for AceService()
{
  return self;
}

uint64_t method lookup function for AceService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AceService);
}

uint64_t dispatch thunk of AceService.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

unsigned char *storeEnumTagSinglePayload for AceService.SnippetOption(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2583AC154);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AceService.SnippetOption()
{
  return &type metadata for AceService.SnippetOption;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_24@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_4_21()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_5_15()
{
  return v0;
}

void OUTLINED_FUNCTION_6_19(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v4, v6, v5, a4);
}

uint64_t OUTLINED_FUNCTION_7_22()
{
  return type metadata accessor for CharacterSet();
}

uint64_t OUTLINED_FUNCTION_10_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_20()
{
  return UUID.init()();
}

void OUTLINED_FUNCTION_18_21(void *a1)
{
  outlined bridged method (mbgnn) of @objc SAAceView.speakableText.setter(v2, v1, a1);
}

void OUTLINED_FUNCTION_19_18(void *a1)
{
  outlined bridged method (mbgnn) of @objc SAUIAssistantUtteranceView.text.setter(v2, v1, a1);
}

uint64_t OUTLINED_FUNCTION_20_17(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return type metadata accessor for UUID();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateVG_SSs5NeverOTg5(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v6 = v18;
    uint64_t v8 = *(void *)(type metadata accessor for Date() - 8);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v15 = *(void *)(v8 + 72);
    while (1)
    {
      a1(v17, v9);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v17[0];
      uint64_t v11 = v17[1];
      uint64_t v18 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      if (v12 >= *(void *)(v6 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v6 = v18;
      }
      *(void *)(v6 + 16) = v12 + 1;
      uint64_t v13 = v6 + 16 * v12;
      *(void *)(v13 + 32) = v10;
      *(void *)(v13 + 40) = v11;
      v9 += v15;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

OmniSearch::LLMFormatter::StringInterpolation __swiftcall LLMFormatter.StringInterpolation.init(literalCapacity:interpolationCount:)(Swift::Int literalCapacity, Swift::Int interpolationCount)
{
  Swift::Int v2 = 10 * interpolationCount;
  if ((unsigned __int128)(interpolationCount * (__int128)10) >> 64 != (10 * interpolationCount) >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  BOOL v3 = __OFADD__(literalCapacity, v2);
  literalCapacity += v2;
  if (v3)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  MEMORY[0x25A2C7B90](literalCapacity);
  literalCapacity = 0;
  interpolationCount = 0xE000000000000000;
LABEL_6:
  result.resolvedOutput._object = (void *)interpolationCount;
  result.resolvedOutput._uint64_t countAndFlagsBits = literalCapacity;
  return result;
}

uint64_t LLMFormatter.StringInterpolation.appendInterpolation(_:)(uint64_t a1)
{
  outlined init with copy of CustomStringConvertible?(a1, (uint64_t)&v10, &demangling cache variable for type metadata for CustomStringConvertible?);
  if (!v11) {
    return outlined destroy of SamplingStrategy?((uint64_t)&v10, &demangling cache variable for type metadata for CustomStringConvertible?);
  }
  outlined init with take of SageSearchClient(&v10, (uint64_t)v12);
  uint64_t v1 = v14;
  __swift_project_boxed_opaque_existential_1(v12, v13);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    __swift_project_boxed_opaque_existential_1(v12, v13);
    OUTLINED_FUNCTION_0_10();
    MEMORY[0x270FA5388](v6);
    OUTLINED_FUNCTION_59_0();
    (*(void (**)(uint64_t))(v7 + 16))(v1);
    v8._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
}

void LLMFormatter.sanitized.getter()
{
  OUTLINED_FUNCTION_104_0();
  type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_0_10();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextSanitizer>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_258663010;
  *(void *)(inited + 32) = 0x2B5DAF80E209205BLL;
  *(void *)(inited + 40) = 0xA800000000000000;
  *(void *)(inited + 48) = 32;
  *(void *)(inited + 56) = 0xE100000000000000;
  *(void *)(inited + 64) = 1024;
  type metadata accessor for NSUserDefaults();
  uint64_t v2 = static NSUserDefaults.llmPromptLineBreak.getter();
  *(void *)(inited + 72) = 4091452;
  *(void *)(inited + 80) = 0xE300000000000000;
  *(void *)(inited + 88) = v2;
  *(void *)(inited + 96) = v3;
  *(void *)(inited + 104) = 2;
  uint64_t v4 = static NSUserDefaults.llmPromptLineBreak.getter();
  *(void *)(inited + 112) = 10;
  *(void *)(inited + 120) = 0xE100000000000000;
  *(void *)(inited + 128) = v4;
  *(void *)(inited + 136) = v5;
  *(void *)(inited + 144) = 2;
  uint64_t v6 = static NSUserDefaults.llmPromptLineBreak.getter();
  *(void *)(inited + 152) = 28252;
  *(void *)(inited + 160) = 0xE200000000000000;
  *(void *)(inited + 168) = v6;
  *(void *)(inited + 176) = v7;
  *(void *)(inited + 184) = 2;
  BOOL v8 = *(void *)(inited + 32) == *(void *)(inited + 48) && *(void *)(inited + 40) == *(void *)(inited + 56);
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    lazy protocol witness table accessor for type String and conformance String();
    OUTLINED_FUNCTION_3_25();
    OUTLINED_FUNCTION_5_16();
  }
  BOOL v9 = *(void *)(inited + 72) == *(void *)(inited + 88) && *(void *)(inited + 80) == *(void *)(inited + 96);
  if (!v9 && (OUTLINED_FUNCTION_12_23() & 1) == 0)
  {
    OUTLINED_FUNCTION_2_10();
    OUTLINED_FUNCTION_3_25();
    OUTLINED_FUNCTION_5_16();
    OUTLINED_FUNCTION_18_22();
  }
  BOOL v10 = *(void *)(inited + 112) == *(void *)(inited + 128) && *(void *)(inited + 120) == *(void *)(inited + 136);
  if (!v10 && (OUTLINED_FUNCTION_12_23() & 1) == 0)
  {
    OUTLINED_FUNCTION_2_10();
    OUTLINED_FUNCTION_3_25();
    OUTLINED_FUNCTION_5_16();
    OUTLINED_FUNCTION_18_22();
  }
  BOOL v11 = *(void *)(inited + 152) == *(void *)(inited + 168) && *(void *)(inited + 160) == *(void *)(inited + 176);
  if (!v11 && (OUTLINED_FUNCTION_12_23() & 1) == 0)
  {
    OUTLINED_FUNCTION_2_10();
    OUTLINED_FUNCTION_3_25();
    OUTLINED_FUNCTION_5_16();
    OUTLINED_FUNCTION_18_22();
  }
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  static CharacterSet.whitespaces.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.trimmingCharacters(in:)();
  OUTLINED_FUNCTION_11_19();
  v15(v12, v13, v14);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_119_0();
}

void static LLMFormatter.dateTimeFormatter.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v79 = v1;
  uint64_t v77 = type metadata accessor for Date.FormatStyle.Symbol.TimeZone.Width();
  OUTLINED_FUNCTION_0_10();
  uint64_t v75 = v2;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_21_18(v4, v74[0]);
  uint64_t v78 = type metadata accessor for Date.FormatStyle.Symbol.TimeZone();
  OUTLINED_FUNCTION_0_10();
  uint64_t v76 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_184_0();
  v74[28] = v7;
  OUTLINED_FUNCTION_26_8();
  type metadata accessor for Date.FormatStyle.Symbol.Minute();
  OUTLINED_FUNCTION_0_10();
  v74[26] = v9;
  v74[27] = v8;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_184_0();
  v74[25] = v10;
  OUTLINED_FUNCTION_26_8();
  type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle();
  OUTLINED_FUNCTION_0_10();
  v74[23] = v12;
  v74[24] = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_184_0();
  v74[20] = v13;
  OUTLINED_FUNCTION_26_8();
  type metadata accessor for Date.FormatStyle.Symbol.Hour();
  OUTLINED_FUNCTION_0_10();
  v74[21] = v15;
  v74[22] = v14;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_184_0();
  v74[19] = v16;
  OUTLINED_FUNCTION_26_8();
  type metadata accessor for Date.FormatStyle.Symbol.Year();
  OUTLINED_FUNCTION_0_10();
  v74[17] = v18;
  v74[18] = v17;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_184_0();
  v74[16] = v19;
  type metadata accessor for Date.FormatStyle.Symbol.Month();
  OUTLINED_FUNCTION_0_10();
  v74[14] = v21;
  v74[15] = v20;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v22);
  v74[12] = type metadata accessor for Date.FormatStyle.Symbol.Day();
  OUTLINED_FUNCTION_0_10();
  v74[11] = v23;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v25);
  v74[9] = type metadata accessor for Date.FormatStyle.Symbol.Weekday();
  OUTLINED_FUNCTION_0_10();
  v74[8] = v26;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v28);
  uint64_t v29 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v30 = OUTLINED_FUNCTION_81(v29);
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_184_0();
  OUTLINED_FUNCTION_22_13(v31);
  uint64_t v32 = type metadata accessor for TimeZone();
  uint64_t v33 = OUTLINED_FUNCTION_81(v32);
  MEMORY[0x270FA5388](v33);
  uint64_t v34 = OUTLINED_FUNCTION_26_16();
  uint64_t v35 = OUTLINED_FUNCTION_81(v34);
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_7_11();
  uint64_t v36 = type metadata accessor for Locale();
  uint64_t v37 = OUTLINED_FUNCTION_81(v36);
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_25_16();
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date.FormatStyle.TimeStyle?);
  uint64_t v39 = OUTLINED_FUNCTION_81(v38);
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_21_7();
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date.FormatStyle.DateStyle?);
  uint64_t v41 = OUTLINED_FUNCTION_81(v40);
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_15();
  uint64_t v44 = v43 - v42;
  v74[2] = type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_0_10();
  uint64_t v46 = v45;
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_24_19();
  uint64_t v49 = MEMORY[0x270FA5388](v48);
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_38_10();
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v51);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v52);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v53);
  OUTLINED_FUNCTION_22_13((uint64_t)v74 - v54);
  uint64_t v55 = type metadata accessor for Date.FormatStyle.DateStyle();
  __swift_storeEnumTagSinglePayload(v44, 1, 1, v55);
  uint64_t v56 = type metadata accessor for Date.FormatStyle.TimeStyle();
  OUTLINED_FUNCTION_9_14(v0, v57, v58, v56);
  static Calendar.autoupdatingCurrent.getter();
  uint64_t v59 = static TimeZone.autoupdatingCurrent.getter();
  MEMORY[0x25A2C4F90](v59);
  uint64_t v60 = Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)();
  MEMORY[0x25A2C51E0](v60);
  Date.FormatStyle.weekday(_:)();
  OUTLINED_FUNCTION_16_1();
  v61();
  uint64_t v62 = *(uint64_t (**)(void))(v46 + 8);
  OUTLINED_FUNCTION_11_19();
  uint64_t v63 = v62();
  MEMORY[0x25A2C5120](v63);
  Date.FormatStyle.day(_:)();
  OUTLINED_FUNCTION_16_1();
  v64();
  OUTLINED_FUNCTION_11_19();
  uint64_t v65 = v62();
  MEMORY[0x25A2C51A0](v65);
  Date.FormatStyle.month(_:)();
  OUTLINED_FUNCTION_16_1();
  v66();
  OUTLINED_FUNCTION_11_19();
  v62();
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
  Date.FormatStyle.year(_:)();
  OUTLINED_FUNCTION_16_1();
  v67();
  OUTLINED_FUNCTION_11_19();
  v62();
  static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter();
  static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)();
  OUTLINED_FUNCTION_16_1();
  v68();
  Date.FormatStyle.hour(_:)();
  OUTLINED_FUNCTION_16_1();
  v69();
  OUTLINED_FUNCTION_11_19();
  uint64_t v70 = v62();
  MEMORY[0x25A2C51C0](v70);
  Date.FormatStyle.minute(_:)();
  OUTLINED_FUNCTION_16_1();
  v71();
  OUTLINED_FUNCTION_11_19();
  v62();
  (*(void (**)(uint64_t, void, uint64_t))(v75 + 104))(v74[29], *MEMORY[0x263F071C0], v77);
  static Date.FormatStyle.Symbol.TimeZone.specificName(_:)();
  OUTLINED_FUNCTION_16_1();
  v72();
  Date.FormatStyle.timeZone(_:)();
  OUTLINED_FUNCTION_16_1();
  v73();
  OUTLINED_FUNCTION_11_19();
  v62();
  OUTLINED_FUNCTION_119_0();
}

uint64_t LLMFormatter.StringInterpolation.resolvedOutput.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*LLMFormatter.StringInterpolation.resolvedOutput.modify())()
{
  return destructiveProjectEnumData for AnswerSynthesisController.AnswerSynthesisModelType;
}

uint64_t LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  outlined init with copy of CustomStringConvertible?(a3, (uint64_t)&v25, &demangling cache variable for type metadata for CustomStringConvertible?);
  if (!v26) {
    return outlined destroy of SamplingStrategy?((uint64_t)&v25, &demangling cache variable for type metadata for CustomStringConvertible?);
  }
  outlined init with take of SageSearchClient(&v25, (uint64_t)v27);
  uint64_t v7 = v29;
  __swift_project_boxed_opaque_existential_1(v27, v28);
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    __swift_project_boxed_opaque_existential_1(v27, v28);
    OUTLINED_FUNCTION_0_10();
    MEMORY[0x270FA5388](v12);
    OUTLINED_FUNCTION_13_12();
    (*(void (**)(uint64_t))(v13 + 16))(v7);
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v16 = v15;
    *(void *)&long long v25 = a1;
    *((void *)&v25 + 1) = a2;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_17_17();
    v17._uint64_t countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    OUTLINED_FUNCTION_23_12(v25);
    swift_bridgeObjectRelease();
    uint64_t v18 = specialized BidirectionalCollection.last.getter(v14, (unint64_t)v16);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if (!v20) {
      goto LABEL_11;
    }
    if (v18 == 46 && v20 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
LABEL_11:
        if ((a4 & 1) == 0)
        {
          v23._uint64_t countAndFlagsBits = 46;
          v23._object = (void *)0xE100000000000000;
          String.append(_:)(v23);
        }
      }
    }
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
}

Swift::Void __swiftcall LLMFormatter.StringInterpolation.appendInterpolation(_:separator:)(Swift::OpaquePointer _, Swift::String separator)
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v5 = v2 + 32;
    swift_bridgeObjectRetain();
    uint64_t v6 = MEMORY[0x263F8EE78];
    do
    {
      outlined init with copy of CustomStringConvertible?(v5, (uint64_t)v29, &demangling cache variable for type metadata for CustomStringConvertible?);
      outlined init with take of CustomStringConvertible?((uint64_t)v29, (uint64_t)&v26);
      if (v27)
      {
        outlined init with take of SageSearchClient(&v26, (uint64_t)v28);
        outlined init with take of SageSearchClient(v28, (uint64_t)&v26);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_10_21();
          uint64_t v6 = v8;
        }
        unint64_t v7 = *(void *)(v6 + 16);
        if (v7 >= *(void *)(v6 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v6 = v9;
        }
        *(void *)(v6 + 16) = v7 + 1;
        outlined init with take of SageSearchClient(&v26, v6 + 40 * v7 + 32);
      }
      else
      {
        outlined destroy of SamplingStrategy?((uint64_t)&v26, &demangling cache variable for type metadata for CustomStringConvertible?);
      }
      v5 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  uint64_t v10 = *(void *)(v6 + 16);
  if (v10)
  {
    *(void *)&v28[0] = v4;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v11 = v6 + 32;
    do
    {
      outlined init with copy of CustomStringConvertible(v11, (uint64_t)v29);
      __swift_project_boxed_opaque_existential_1(v29, v29[3]);
      OUTLINED_FUNCTION_0_10();
      MEMORY[0x270FA5388](v12);
      OUTLINED_FUNCTION_15();
      (*(void (**)(uint64_t))(v15 + 16))(v14 - v13);
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t v18 = v17;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
      uint64_t v19 = *(void *)&v28[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v19 = *(void *)&v28[0];
      }
      unint64_t v20 = *(void *)(v19 + 16);
      if (v20 >= *(void *)(v19 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v19 = *(void *)&v28[0];
      }
      *(void *)(v19 + 16) = v20 + 1;
      uint64_t v21 = v19 + 16 * v20;
      *(void *)(v21 + 32) = v16;
      *(void *)(v21 + 40) = v18;
      v11 += 40;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v29[0] = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v24 = v23;
    swift_release();
    v25._uint64_t countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_119_0();
}

Swift::Void __swiftcall LLMFormatter.StringInterpolation.appendInterpolation(_:ifAll:)(Swift::String _, Swift::OpaquePointer ifAll)
{
  OUTLINED_FUNCTION_30_17();
  if (v5)
  {
    uint64_t v18 = v4;
    uint64_t v6 = (uint64_t)v3._rawValue + 32;
    swift_bridgeObjectRetain();
    uint64_t v7 = MEMORY[0x263F8EE78];
    do
    {
      outlined init with copy of CustomStringConvertible?(v6, (uint64_t)v22, &demangling cache variable for type metadata for CustomStringConvertible?);
      outlined init with take of CustomStringConvertible?((uint64_t)v22, (uint64_t)&v19);
      if (v20)
      {
        outlined init with take of SageSearchClient(&v19, (uint64_t)v21);
        outlined init with take of SageSearchClient(v21, (uint64_t)&v19);
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          OUTLINED_FUNCTION_10_21();
          uint64_t v7 = isUniquelyReferenced_nonNull_native;
        }
        if (*(void *)(v7 + 16) >= *(void *)(v7 + 24) >> 1)
        {
          OUTLINED_FUNCTION_27_17();
          uint64_t v7 = isUniquelyReferenced_nonNull_native;
        }
        OUTLINED_FUNCTION_35_14(isUniquelyReferenced_nonNull_native, v9, v10, v11, v12, v13, v14, v15, v18, v19);
      }
      else
      {
        outlined destroy of SamplingStrategy?((uint64_t)&v19, &demangling cache variable for type metadata for CustomStringConvertible?);
      }
      v6 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v4 = v18;
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  uint64_t v16 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v16)
  {
    v22[0] = v4;
    v22[1] = v2;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_17_17();
    OUTLINED_FUNCTION_23_12(v22[0]);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 8236;
    v17._object = (void *)0xE200000000000000;
    LLMFormatter.StringInterpolation.appendInterpolation(_:separator:)(v3, v17);
    OUTLINED_FUNCTION_31_14();
  }
}

Swift::Void __swiftcall LLMFormatter.StringInterpolation.appendInterpolation(_:startNewLinesIf:)(Swift::String _, Swift::OpaquePointer startNewLinesIf)
{
  OUTLINED_FUNCTION_30_17();
  if (v5)
  {
    uint64_t v22 = v4;
    uint64_t v6 = (uint64_t)v3._rawValue + 32;
    swift_bridgeObjectRetain();
    uint64_t v7 = MEMORY[0x263F8EE78];
    do
    {
      outlined init with copy of CustomStringConvertible?(v6, (uint64_t)v26, &demangling cache variable for type metadata for CustomStringConvertible?);
      outlined init with take of CustomStringConvertible?((uint64_t)v26, (uint64_t)&v23);
      if (v24)
      {
        outlined init with take of SageSearchClient(&v23, (uint64_t)v25);
        outlined init with take of SageSearchClient(v25, (uint64_t)&v23);
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          OUTLINED_FUNCTION_10_21();
          uint64_t v7 = isUniquelyReferenced_nonNull_native;
        }
        if (*(void *)(v7 + 16) >= *(void *)(v7 + 24) >> 1)
        {
          OUTLINED_FUNCTION_27_17();
          uint64_t v7 = isUniquelyReferenced_nonNull_native;
        }
        OUTLINED_FUNCTION_35_14(isUniquelyReferenced_nonNull_native, v9, v10, v11, v12, v13, v14, v15, v22, v23);
      }
      else
      {
        outlined destroy of SamplingStrategy?((uint64_t)&v23, &demangling cache variable for type metadata for CustomStringConvertible?);
      }
      v6 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v4 = v22;
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  uint64_t v16 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v16)
  {
    v26[0]._uint64_t countAndFlagsBits = v4;
    v26[0]._object = v2;
    type metadata accessor for NSUserDefaults();
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = static NSUserDefaults.llmPromptLineBreak.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    String.append(_:)(v26[0]);
    swift_bridgeObjectRelease();
    uint64_t v18 = static NSUserDefaults.llmPromptLineBreak.getter();
    uint64_t v20 = v19;
    v21._uint64_t countAndFlagsBits = v18;
    v21._object = v20;
    LLMFormatter.StringInterpolation.appendInterpolation(_:separator:)(v3, v21);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(Swift::String _, Swift::OpaquePointer_optional names)
{
  if (names.value._rawValue)
  {
    rawValue = names.value._rawValue;
    if (*((void *)names.value._rawValue + 2))
    {
      Swift::String v6 = _;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_17_17();
      OUTLINED_FUNCTION_23_12(v6._countAndFlagsBits);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v3 = OUTLINED_FUNCTION_28_12();
      OUTLINED_FUNCTION_37_15(v3, v4, MEMORY[0x263F8D310], v5, (uint64_t)rawValue, (uint64_t)v6._object, v7, v8, v9);
      outlined destroy of SamplingStrategy?((uint64_t)&v6, &demangling cache variable for type metadata for CustomStringConvertible?);
      OUTLINED_FUNCTION_31_14();
    }
  }
}

Swift::Void __swiftcall LLMFormatter.StringInterpolation.appendInterpolation(names:)(Swift::OpaquePointer_optional names)
{
  if (names.value._rawValue)
  {
    if (*((void *)names.value._rawValue + 2))
    {
      v4[0] = (uint64_t)names.value._rawValue;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v1 = OUTLINED_FUNCTION_28_12();
      OUTLINED_FUNCTION_37_15(v1, v2, MEMORY[0x263F8D310], v3, v4[0], v4[1], v4[2], v4[3], v4[4]);
      outlined destroy of SamplingStrategy?((uint64_t)v4, &demangling cache variable for type metadata for CustomStringConvertible?);
    }
  }
}

Swift::Void __swiftcall LLMFormatter.StringInterpolation.appendInterpolation(_:names:countToShow:suffix:)(Swift::String _, Swift::OpaquePointer_optional names, Swift::Int countToShow, Swift::String suffix)
{
  if (names.value._rawValue)
  {
    rawValue = names.value._rawValue;
    if (*((void *)names.value._rawValue + 2))
    {
      uint64_t countAndFlagsBits = suffix._countAndFlagsBits;
      Swift::Bool is_nil = names.is_nil;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_17_17();
      String.append(_:)(_);
      swift_bridgeObjectRelease();
      v9.value._rawValue = rawValue;
      v9.Swift::Bool is_nil = is_nil;
      uint64_t v10 = countAndFlagsBits;
      LLMFormatter.StringInterpolation.appendInterpolation(names:countToShow:suffix:)(v9, countToShow, *(Swift::String *)&v10);
    }
  }
}

Swift::Void __swiftcall LLMFormatter.StringInterpolation.appendInterpolation(names:countToShow:suffix:)(Swift::OpaquePointer_optional names, Swift::Int countToShow, Swift::String suffix)
{
  if (!names.value._rawValue) {
    return;
  }
  rawValue = names.value._rawValue;
  unint64_t v4 = *((void *)names.value._rawValue + 2);
  if (!v4) {
    return;
  }
  unint64_t countAndFlagsBits = suffix._countAndFlagsBits;
  if (*(uint64_t *)&names.is_nil <= 1) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = *(void *)&names.is_nil;
  }
  uint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(0, v7);
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized Sequence.compactMap<A>(_:)((uint64_t)v8, (uint64_t)rawValue);
  swift_release();
  if (*(void *)(v9 + 16))
  {
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  specialized _ArrayBuffer._consumeAndCreateNew()();
  uint64_t v9 = v27;
LABEL_8:
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = v10 - 1;
    uint64_t v12 = v9 + 16 * v11;
    uint64_t v14 = *(void *)(v12 + 32);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v9 + 16) = v11;
    if (v11)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v15 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v17 = v16;
      swift_bridgeObjectRelease();
      v18._unint64_t countAndFlagsBits = v14;
      v18._object = v13;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v19._unint64_t countAndFlagsBits = 0x20646E6120;
      v19._object = (void *)0xE500000000000000;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v20 = v15;
      uint64_t v21 = v17;
      if (v7 < v4)
      {
        v22._unint64_t countAndFlagsBits = 0x6C6120746520;
        v22._object = (void *)0xE600000000000000;
        String.append(_:)(v22);
        uint64_t v20 = v15;
        uint64_t v21 = v17;
      }
      uint64_t v23 = v21;
      String.append(_:)(*(Swift::String *)&v20);
    }
    else
    {
      swift_bridgeObjectRelease();
      v24._unint64_t countAndFlagsBits = v14;
      v24._object = v13;
      String.append(_:)(v24);
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = HIBYTE(countAndFlagsBits) & 0xF;
    if ((countAndFlagsBits & 0x2000000000000000) == 0) {
      uint64_t v25 = countToShow & 0xFFFFFFFFFFFFLL;
    }
    if (!v25)
    {
      v26._unint64_t countAndFlagsBits = countToShow;
      v26._object = (void *)countAndFlagsBits;
      String.append(_:)(v26);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t LLMFormatter.StringInterpolation.appendInterpolation(date:formatStyle:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v4 = OUTLINED_FUNCTION_81(v3);
  MEMORY[0x270FA5388](v4);
  Swift::String v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_10();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_59_0();
  outlined init with copy of CustomStringConvertible?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    uint64_t v11 = &demangling cache variable for type metadata for Date?;
    uint64_t v12 = v6;
  }
  else
  {
    OUTLINED_FUNCTION_58_1();
    v13();
    uint64_t v17 = MEMORY[0x263F8D310];
    uint64_t v18 = MEMORY[0x263F8D378];
    type metadata accessor for Date.FormatStyle();
    lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
    Date.formatted<A>(_:)();
    LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)v16);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v7);
    uint64_t v11 = &demangling cache variable for type metadata for CustomStringConvertible?;
    uint64_t v12 = v16;
  }
  return outlined destroy of SamplingStrategy?((uint64_t)v12, v11);
}

void LLMFormatter.StringInterpolation.appendInterpolation(_:date:formatStyle:)()
{
}

{
  LLMFormatter.StringInterpolation.appendInterpolation(_:date:formatStyle:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t (*v2)(void);
  uint64_t (*v3)(void);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(void);
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_104_0();
  uint64_t v27 = v0;
  uint64_t v28 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(v4);
  uint64_t v13 = OUTLINED_FUNCTION_81(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_95_1();
  uint64_t v16 = v14 - v15;
  MEMORY[0x270FA5388](v17);
  Swift::String v19 = (char *)&v27 - v18;
  uint64_t v20 = v3(0);
  OUTLINED_FUNCTION_0_10();
  Swift::String v22 = v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v27 - v24;
  outlined init with copy of CustomStringConvertible?(v7, (uint64_t)v19, v5);
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20) == 1)
  {
    outlined destroy of SamplingStrategy?((uint64_t)v19, v5);
  }
  else
  {
    OUTLINED_FUNCTION_58_1();
    v26();
    uint64_t v29 = v11;
    uint64_t v30 = v9;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_17_17();
    OUTLINED_FUNCTION_23_12(v29);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v16, v25, v20);
    __swift_storeEnumTagSinglePayload(v16, 0, 1, v20);
    v28(v16, v27);
    outlined destroy of SamplingStrategy?(v16, v5);
    OUTLINED_FUNCTION_31_14();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v20);
  }
  OUTLINED_FUNCTION_119_0();
}

void LLMFormatter.StringInterpolation.appendInterpolation(_:dates:formatStyle:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    if (*(void *)(a3 + 16))
    {
      v9._unint64_t countAndFlagsBits = a1;
      v9._object = a2;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_17_17();
      String.append(_:)(v9);
      uint64_t v6 = swift_bridgeObjectRelease();
      MEMORY[0x270FA5388](v6);
      uint64_t v8[2] = a4;
      v9._unint64_t countAndFlagsBits = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateVG_SSs5NeverOTg5((void (*)(void *__return_ptr, uint64_t))partial apply for closure #1 in LLMFormatter.StringInterpolation.appendInterpolation(_:dates:formatStyle:), (uint64_t)v8, a3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_23_12(v7);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_31_14();
    }
  }
}

uint64_t closure #1 in LLMFormatter.StringInterpolation.appendInterpolation(_:dates:formatStyle:)()
{
  return Date.formatted<A>(_:)();
}

void LLMFormatter.StringInterpolation.appendInterpolation(_:date:timeIsUnknown:)()
{
}

{
  LLMFormatter.StringInterpolation.appendInterpolation(_:date:timeIsUnknown:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t, uint64_t, uint64_t);
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_0_10();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_13_12();
  if (v4) {
    static LLMFormatter.dateOnlyFormatter.getter();
  }
  else {
    static LLMFormatter.dateTimeFormatter.getter();
  }
  v2(v10, v8, v6, v0);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0, v11);
  OUTLINED_FUNCTION_119_0();
}

void static LLMFormatter.dateOnlyFormatter.getter()
{
  OUTLINED_FUNCTION_104_0();
  v48[14] = v2;
  v48[15] = type metadata accessor for Date.FormatStyle.Symbol.Year();
  OUTLINED_FUNCTION_0_10();
  v48[13] = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_184_0();
  v48[12] = v5;
  type metadata accessor for Date.FormatStyle.Symbol.Month();
  OUTLINED_FUNCTION_0_10();
  v48[10] = v7;
  v48[11] = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_21_18(v8, v48[0]);
  type metadata accessor for Date.FormatStyle.Symbol.Day();
  OUTLINED_FUNCTION_0_10();
  v48[7] = v10;
  v48[8] = v9;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_20_18(v11, v48[0]);
  type metadata accessor for Date.FormatStyle.Symbol.Weekday();
  OUTLINED_FUNCTION_0_10();
  v48[4] = v13;
  v48[5] = v12;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_184_0();
  v48[3] = v14;
  uint64_t v15 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_184_0();
  v48[2] = v17;
  uint64_t v18 = type metadata accessor for TimeZone();
  uint64_t v19 = OUTLINED_FUNCTION_81(v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v20 = OUTLINED_FUNCTION_26_16();
  uint64_t v21 = OUTLINED_FUNCTION_81(v20);
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_7_11();
  uint64_t v22 = type metadata accessor for Locale();
  uint64_t v23 = OUTLINED_FUNCTION_81(v22);
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_25_16();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date.FormatStyle.TimeStyle?);
  uint64_t v25 = OUTLINED_FUNCTION_81(v24);
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_13_12();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date.FormatStyle.DateStyle?);
  uint64_t v27 = OUTLINED_FUNCTION_81(v26);
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_21_7();
  v48[1] = type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_0_10();
  uint64_t v29 = v28;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_24_19();
  uint64_t v32 = MEMORY[0x270FA5388](v31);
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_38_10();
  MEMORY[0x270FA5388](v33);
  v48[0] = (uint64_t)v48 - v34;
  uint64_t v35 = type metadata accessor for Date.FormatStyle.DateStyle();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v35);
  uint64_t v36 = type metadata accessor for Date.FormatStyle.TimeStyle();
  OUTLINED_FUNCTION_9_14(v0, v37, v38, v36);
  static Calendar.autoupdatingCurrent.getter();
  uint64_t v39 = static TimeZone.autoupdatingCurrent.getter();
  MEMORY[0x25A2C4F90](v39);
  uint64_t v40 = Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)();
  MEMORY[0x25A2C51E0](v40);
  Date.FormatStyle.weekday(_:)();
  OUTLINED_FUNCTION_16_1();
  v41();
  uint64_t v42 = *(uint64_t (**)(void))(v29 + 8);
  OUTLINED_FUNCTION_16_19();
  uint64_t v43 = v42();
  MEMORY[0x25A2C5120](v43);
  Date.FormatStyle.day(_:)();
  OUTLINED_FUNCTION_16_1();
  v44();
  OUTLINED_FUNCTION_16_19();
  uint64_t v45 = v42();
  MEMORY[0x25A2C51A0](v45);
  Date.FormatStyle.month(_:)();
  OUTLINED_FUNCTION_16_1();
  v46();
  OUTLINED_FUNCTION_16_19();
  v42();
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
  Date.FormatStyle.year(_:)();
  OUTLINED_FUNCTION_16_1();
  v47();
  OUTLINED_FUNCTION_16_19();
  v42();
  OUTLINED_FUNCTION_119_0();
}

void LLMFormatter.StringInterpolation.appendInterpolation(date:formatStyle:)()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v52 = v0;
  uint64_t v49 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_20_18(v7, v44);
  uint64_t v51 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_0_10();
  uint64_t v48 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_95_1();
  uint64_t v47 = v10 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v46 = (char *)&v44 - v13;
  OUTLINED_FUNCTION_26_8();
  uint64_t v14 = type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_0_10();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_184_0();
  uint64_t v54 = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v20 = OUTLINED_FUNCTION_81(v19);
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_95_1();
  uint64_t v23 = v21 - v22;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v44 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v28 = OUTLINED_FUNCTION_81(v27);
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_59_0();
  uint64_t v29 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_10();
  uint64_t v53 = v30;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_15();
  outlined init with copy of CustomStringConvertible?(v4, (uint64_t)v26, &demangling cache variable for type metadata for DateComponents?);
  uint64_t v32 = type metadata accessor for DateComponents();
  if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v32) != 1)
  {
    uint64_t v44 = v16;
    uint64_t v45 = v14;
    DateComponents.date.getter();
    uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8);
    v33(v26, v32);
    if (__swift_getEnumTagSinglePayload(v1, 1, v29) == 1) {
      goto LABEL_4;
    }
    OUTLINED_FUNCTION_58_1();
    v36();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v54, v49, v45);
    outlined init with copy of CustomStringConvertible?(v4, v23, &demangling cache variable for type metadata for DateComponents?);
    if (__swift_getEnumTagSinglePayload(v23, 1, v32) == 1)
    {
      outlined destroy of SamplingStrategy?(v23, &demangling cache variable for type metadata for DateComponents?);
      uint64_t v37 = v50;
      __swift_storeEnumTagSinglePayload(v50, 1, 1, v51);
    }
    else
    {
      uint64_t v37 = v50;
      DateComponents.timeZone.getter();
      v33((char *)v23, v32);
      uint64_t v38 = v51;
      if (__swift_getEnumTagSinglePayload(v37, 1, v51) != 1)
      {
        uint64_t v39 = v48;
        uint64_t v40 = v46;
        OUTLINED_FUNCTION_58_1();
        v41();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v47, v40, v38);
        Date.FormatStyle.timeZone.setter();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
        goto LABEL_10;
      }
    }
    outlined destroy of SamplingStrategy?(v37, &demangling cache variable for type metadata for TimeZone?);
LABEL_10:
    v55[3] = MEMORY[0x263F8D310];
    v55[4] = MEMORY[0x263F8D378];
    lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
    Date.formatted<A>(_:)();
    LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)v55);
    OUTLINED_FUNCTION_11_19();
    v42();
    OUTLINED_FUNCTION_16_1();
    v43();
    uint64_t v34 = &demangling cache variable for type metadata for CustomStringConvertible?;
    uint64_t v35 = v55;
    goto LABEL_11;
  }
  outlined destroy of SamplingStrategy?((uint64_t)v26, &demangling cache variable for type metadata for DateComponents?);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v29);
LABEL_4:
  uint64_t v34 = &demangling cache variable for type metadata for Date?;
  uint64_t v35 = (void *)v1;
LABEL_11:
  outlined destroy of SamplingStrategy?((uint64_t)v35, v34);
  OUTLINED_FUNCTION_119_0();
}

Swift::Void __swiftcall LLMFormatter.StringInterpolation.appendInterpolation(_:dictionary:)(Swift::String _, Swift::OpaquePointer_optional dictionary)
{
  if (dictionary.value._rawValue)
  {
    Swift::String v26 = _;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_17_17();
    OUTLINED_FUNCTION_23_12(v26._countAndFlagsBits);
    swift_bridgeObjectRelease();
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = (uint64_t)v3;
    specialized MutableCollection<>.sort(by:)(&v26._countAndFlagsBits);
    uint64_t countAndFlagsBits = v26._countAndFlagsBits;
    uint64_t v5 = *(void *)(v26._countAndFlagsBits + 16);
    if (v5)
    {
      swift_retain();
      uint64_t v6 = (void **)(countAndFlagsBits + 56);
      uint64_t v7 = MEMORY[0x263F8EE78];
      do
      {
        unint64_t v8 = (unint64_t)*(v6 - 2);
        uint64_t v9 = HIBYTE(v8) & 0xF;
        if ((v8 & 0x2000000000000000) == 0) {
          uint64_t v9 = (unint64_t)*(v6 - 3) & 0xFFFFFFFFFFFFLL;
        }
        if (v9)
        {
          uint64_t v11 = (uint64_t)*(v6 - 1);
          uint64_t v10 = *v6;
          uint64_t v12 = ((unint64_t)*v6 >> 56) & 0xF;
          if (((unint64_t)*v6 & 0x2000000000000000) == 0) {
            uint64_t v12 = v11 & 0xFFFFFFFFFFFFLL;
          }
          if (v12)
          {
            v26._uint64_t countAndFlagsBits = (uint64_t)*(v6 - 3);
            v26._object = (void *)v8;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            v13._uint64_t countAndFlagsBits = 58;
            v13._object = (void *)0xE100000000000000;
            String.append(_:)(v13);
            v14._uint64_t countAndFlagsBits = v11;
            v14._object = v10;
            String.append(_:)(v14);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v15 = v26._countAndFlagsBits;
            object = v26._object;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v7 = v19;
            }
            unint64_t v17 = *(void *)(v7 + 16);
            if (v17 >= *(void *)(v7 + 24) >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v7 = v20;
            }
            *(void *)(v7 + 16) = v17 + 1;
            uint64_t v18 = v7 + 16 * v17;
            *(void *)(v18 + 32) = v15;
            *(void *)(v18 + 40) = object;
          }
        }
        v6 += 4;
        --v5;
      }
      while (v5);
      swift_release();
    }
    else
    {
      uint64_t v7 = MEMORY[0x263F8EE78];
    }
    swift_release();
    uint64_t v29 = v7;
    type metadata accessor for NSUserDefaults();
    v26._uint64_t countAndFlagsBits = static NSUserDefaults.llmPromptLineBreak.getter();
    v26._object = v21;
    v22._uint64_t countAndFlagsBits = static NSUserDefaults.llmPromptLineBreak.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = MEMORY[0x263F8D310];
    uint64_t v28 = MEMORY[0x263F8D378];
    v26._uint64_t countAndFlagsBits = v23;
    v26._object = v25;
    LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v26);
    outlined destroy of SamplingStrategy?((uint64_t)&v26, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_31_14();
  }
}

uint64_t protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance LLMFormatter.StringInterpolation@<X0>(Swift::Int a1@<X0>, Swift::Int a2@<X1>, OmniSearch::LLMFormatter::StringInterpolation *a3@<X8>)
{
  OmniSearch::LLMFormatter::StringInterpolation v5 = LLMFormatter.StringInterpolation.init(literalCapacity:interpolationCount:)(a1, a2);
  uint64_t result = v5.resolvedOutput._countAndFlagsBits;
  *a3 = v5;
  return result;
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance LLMFormatter.StringInterpolation(Swift::String *a1)
{
}

uint64_t LLMFormatter.description.getter(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance LLMFormatter@<X0>(Swift::String *a1@<X0>, OmniSearch::LLMFormatter *a2@<X8>)
{
  OmniSearch::LLMFormatter v4 = LLMFormatter.init(stringLiteral:)(*a1);
  uint64_t result = v4.description._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LLMFormatter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  swift_arrayDestroy();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for CustomStringConvertible?);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for [String]);
}

{
  uint64_t v0;
  uint64_t vars8;

  swift_arrayDestroy();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t outlined init with take of CustomStringConvertible?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  swift_arrayDestroy();
  return MEMORY[0x270FA0228](v1, 32, 7);
}

uint64_t outlined init with copy of CustomStringConvertible(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    type metadata accessor for Date.FormatStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

uint64_t partial apply for closure #1 in LLMFormatter.StringInterpolation.appendInterpolation(_:dates:formatStyle:)()
{
  return closure #1 in LLMFormatter.StringInterpolation.appendInterpolation(_:dates:formatStyle:)();
}

uint64_t outlined init with copy of CustomStringConvertible?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t associated type witness table accessor for StringInterpolationProtocol.StringLiteralType : _ExpressibleByBuiltinStringLiteral in LLMFormatter.StringInterpolation()
{
  return MEMORY[0x263F8D388];
}

unint64_t lazy protocol witness table accessor for type LLMFormatter and conformance LLMFormatter()
{
  unint64_t result = lazy protocol witness table cache variable for type LLMFormatter and conformance LLMFormatter;
  if (!lazy protocol witness table cache variable for type LLMFormatter and conformance LLMFormatter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LLMFormatter and conformance LLMFormatter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LLMFormatter and conformance LLMFormatter;
  if (!lazy protocol witness table cache variable for type LLMFormatter and conformance LLMFormatter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LLMFormatter and conformance LLMFormatter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LLMFormatter and conformance LLMFormatter;
  if (!lazy protocol witness table cache variable for type LLMFormatter and conformance LLMFormatter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LLMFormatter and conformance LLMFormatter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LLMFormatter.StringInterpolation and conformance LLMFormatter.StringInterpolation()
{
  unint64_t result = lazy protocol witness table cache variable for type LLMFormatter.StringInterpolation and conformance LLMFormatter.StringInterpolation;
  if (!lazy protocol witness table cache variable for type LLMFormatter.StringInterpolation and conformance LLMFormatter.StringInterpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LLMFormatter.StringInterpolation and conformance LLMFormatter.StringInterpolation);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in LLMFormatter()
{
  return MEMORY[0x263F8D398];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in LLMFormatter()
{
  return MEMORY[0x263F8D390];
}

ValueMetadata *type metadata accessor for LLMFormatter()
{
  return &type metadata for LLMFormatter;
}

void *initializeBufferWithCopyOfBuffer for LLMFormatter.StringInterpolation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for LLMFormatter.StringInterpolation()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for LLMFormatter(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for LLMFormatter.StringInterpolation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LLMFormatter(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LLMFormatter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LLMFormatter.StringInterpolation()
{
  return &type metadata for LLMFormatter.StringInterpolation;
}

void *initializeWithCopy for TextSanitizer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TextSanitizer(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

void *assignWithTake for TextSanitizer(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

void *type metadata accessor for TextSanitizer()
{
  return &unk_2706AC1D8;
}

unint64_t OUTLINED_FUNCTION_2_10()
{
  *(void *)(v6 - 296) = v3;
  *(void *)(v6 - 288) = v2;
  *(void *)(v6 - 312) = v0;
  *(void *)(v6 - 304) = v1;
  *(void *)(v6 - 328) = v4;
  *(void *)(v6 - 320) = v5;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_3_25()
{
  return v0 - 312;
}

uint64_t OUTLINED_FUNCTION_5_16()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_9_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_storeEnumTagSinglePayload(a1, 1, 1, a4);
  return Locale.init(identifier:)();
}

void OUTLINED_FUNCTION_10_21()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_12_23()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_17_17()
{
  uint64_t v1 = 32;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_18_22()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_20_18@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_21_18@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

void OUTLINED_FUNCTION_23_12(uint64_t a1)
{
  uint64_t v3 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_26_16()
{
  return type metadata accessor for Calendar();
}

void OUTLINED_FUNCTION_27_17()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_28_12()
{
  return BidirectionalCollection<>.joined(separator:)();
}

void OUTLINED_FUNCTION_31_14()
{
  uint64_t v1 = 46;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_35_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10)
{
  *(void *)(v11 + 16) = v12;
  return outlined init with take of SageSearchClient(&a10, v11 + v10 * v13 + 32);
}

uint64_t OUTLINED_FUNCTION_37_15@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  a8 = a3;
  a9 = v9;
  a5 = a1;
  a6 = a2;
  return LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&a5);
}

uint64_t SearchResultItem.llmConsumableDescription.getter()
{
  SearchResultItem.associatedValue.getter((uint64_t)v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v2;
}

uint64_t specialized EnumeratedSequence.Iterator.next()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Photo));
  uint64_t result = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  unint64_t v7 = v1[1];
  unint64_t v9 = *(void *)(*v1 + 16);
  if (v7 == v9)
  {
    return __swift_storeEnumTagSinglePayload((uint64_t)a1, 1, 1, v3);
  }
  else
  {
    if (v7 >= v9)
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = *(void *)(type metadata accessor for Photo(0) - 8);
      uint64_t v11 = v8
          + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
          + *(void *)(v10 + 72) * v7;
      v1[1] = v7 + 1;
      uint64_t v12 = (uint64_t)&v6[*(int *)(v3 + 48)];
      uint64_t v13 = v1[2];
      uint64_t result = outlined init with copy of MobileSMSDocument(v11, v12, (void (*)(void))type metadata accessor for Photo);
      if (!__OFADD__(v13, 1))
      {
        v1[2] = v13 + 1;
        uint64_t v14 = (uint64_t)a1 + *(int *)(v3 + 48);
        *a1 = v13;
        outlined init with take of Photo(v12, v14);
        return __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v3);
      }
    }
    __break(1u);
  }
  return result;
}

char *specialized EnumeratedSequence.Iterator.next()()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  if ((unint64_t)*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v1 == v3) {
    return 0;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v1, (v2 & 0xC000000000000001) == 0, v2);
  if ((v2 & 0xC000000000000001) != 0) {
    uint64_t result = (char *)MEMORY[0x25A2C8550](v1, v2);
  }
  else {
    uint64_t result = (char *)*(id *)(v2 + 8 * v1 + 32);
  }
  if (__OFADD__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    v0[1] = v1 + 1;
    uint64_t result = (char *)v0[2];
    if (!__OFADD__(result, 1))
    {
      v0[2] = (uint64_t)(result + 1);
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v4 += 16;
      *(void *)(v2 + 16) = v6 + 1;
      outlined init with take of SearchContext?((uint64_t)v8, v2 + 40 * v6 + 32, &demangling cache variable for type metadata for CustomStringConvertible?);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized _arrayForceCast<A, B>(_:)()
{
  OUTLINED_FUNCTION_104_0();
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v3)
  {
LABEL_14:
    OUTLINED_FUNCTION_119_0();
    return;
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v17;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x25A2C8550](v4, v2);
      }
      else {
        id v6 = *(id *)(v2 + 8 * v4 + 32);
      }
      id v7 = v6;
      uint64_t v8 = type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for IMSPIMessage);
      uint64_t v15 = v8;
      uint64_t v16 = &protocol witness table for IMSPIMessage;
      v14[0] = v7;
      uint64_t v17 = v5;
      unint64_t v9 = *(void *)(v5 + 16);
      if (v9 >= *(void *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v10 = v15;
        uint64_t v11 = v16;
      }
      else
      {
        uint64_t v10 = v8;
        uint64_t v11 = &protocol witness table for IMSPIMessage;
      }
      ++v4;
      uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v10);
      MEMORY[0x270FA5388](v12);
      OUTLINED_FUNCTION_97_1();
      (*(void (**)(uint64_t))(v13 + 16))(v0);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v0, &v17, v10, (uint64_t)v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
      uint64_t v5 = v17;
    }
    while (v3 != v4);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t Answer.llmConsumableDescription.getter()
{
  MEMORY[0x25A2C7B90](47);
  v0._uint64_t countAndFlagsBits = 0x6577736E61206E41;
  v0._object = (void *)0xEB00000000203A72;
  String.append(_:)(v0);
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = OUTLINED_FUNCTION_135_2(v1);
  OUTLINED_FUNCTION_136_1(v2);
  OUTLINED_FUNCTION_58_7((uint64_t)" with metadata: ");
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String : String] and conformance [A : B], &demangling cache variable for type metadata for [String : String]);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = OUTLINED_FUNCTION_135_2(v3);
  OUTLINED_FUNCTION_136_1(v4);
  OUTLINED_FUNCTION_85_7();
  OUTLINED_FUNCTION_3_26();
  return OUTLINED_FUNCTION_148();
}

void EmailDocument.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_185_0();
  uint64_t v136 = v6;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v132 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_185_0();
  uint64_t v134 = v12;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v13);
  uint64_t v135 = (char *)&v132 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_185_0();
  uint64_t v137 = v17;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v18);
  uint64_t v133 = (char *)&v132 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
  uint64_t v21 = OUTLINED_FUNCTION_81(v20);
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_3_18();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v132 - v23;
  type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_13_12();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v27 = OUTLINED_FUNCTION_81(v26);
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_14_10();
  type metadata accessor for NSUserDefaults(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  if ((static NSUserDefaults.sendInstantAnswerDocToAS.getter() & 1) == 0)
  {
    v140[0] = 0;
    v140[1] = 0xE000000000000000;
    MEMORY[0x25A2C7B90](126);
    OUTLINED_FUNCTION_67_7();
    OUTLINED_FUNCTION_116_5(v39, v40, v145);
    OUTLINED_FUNCTION_17_17();
    uint64_t v41 = (int *)type metadata accessor for EmailDocument(0);
    uint64_t v42 = (char *)v0 + v41[12];
    uint64_t v43 = type metadata accessor for Date();
    OUTLINED_FUNCTION_1_0();
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v2, v42, v43);
    uint64_t v45 = OUTLINED_FUNCTION_5_13();
    __swift_storeEnumTagSinglePayload(v45, v46, v47, v43);
    static LLMFormatter.dateTimeFormatter.getter();
    OUTLINED_FUNCTION_96_5();
    OUTLINED_FUNCTION_112_4();
    v48();
    outlined destroy of CustomStringConvertible?(v2, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_17_17();
    uint64_t v49 = v3[5];
    uint64_t v50 = MEMORY[0x263F8D310];
    uint64_t v51 = MEMORY[0x263F8D378];
    if (v49)
    {
      uint64_t v52 = v3[4];
      v140[3] = MEMORY[0x263F8D310];
      v140[4] = MEMORY[0x263F8D378];
      v140[0] = v52;
      v140[1] = v49;
    }
    else
    {
      OUTLINED_FUNCTION_25_17();
    }
    uint64_t v56 = (uint64_t)v137;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_55_10(0x3A7463656A627553, v57, (uint64_t)v140);
    outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    uint64_t v58 = v3[7];
    if (v58)
    {
      uint64_t v59 = v3[6];
      v140[3] = v50;
      v140[4] = v51;
      v140[0] = v59;
      v140[1] = v58;
    }
    else
    {
      OUTLINED_FUNCTION_25_17();
    }
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_92_7();
    outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    uint64_t v62 = OUTLINED_FUNCTION_130_2(v41[20]);
    if (v62)
    {
      uint64_t v64 = *v63;
      v140[3] = v50;
      v140[4] = v51;
      v140[0] = v64;
      v140[1] = v62;
    }
    else
    {
      OUTLINED_FUNCTION_25_17();
    }
    uint64_t v70 = swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_5_17(v70, v71, (uint64_t)v140);
    outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    uint64_t v72 = (uint64_t *)((char *)v3 + v41[19]);
    if (*v72)
    {
      uint64_t v73 = OUTLINED_FUNCTION_81_6((uint64_t)v72);
      OUTLINED_FUNCTION_131_2(v73, v74);
    }
    else
    {
      OUTLINED_FUNCTION_25_17();
    }
    OUTLINED_FUNCTION_30_18(23, 0x8000000258680C00, (uint64_t)v140);
    outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    outlined init with copy of EagerResolutionService?((uint64_t)v3 + v41[21], v1, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    uint64_t v77 = type metadata accessor for PartialExtractedAttributes(0);
    OUTLINED_FUNCTION_11_20(v1, v78, v77);
    if (v79)
    {
      outlined destroy of CustomStringConvertible?(v1, &demangling cache variable for type metadata for PartialExtractedAttributes?);
      OUTLINED_FUNCTION_49_10();
    }
    else
    {
      specialized PartialExtractedAttributesSearchItem.llmConsumableDescription.getter();
      OUTLINED_FUNCTION_131_2(v80, v81);
      uint64_t v82 = outlined destroy of PreExtractedSharedLink(v1, (void (*)(void))type metadata accessor for PartialExtractedAttributes);
    }
    uint64_t v84 = v136;
    uint64_t v85 = v134;
    OUTLINED_FUNCTION_5_17(v82, v83, (uint64_t)v140);
    outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    outlined init with copy of EagerResolutionService?((uint64_t)v3 + v41[22], v56, &demangling cache variable for type metadata for PreExtractedCard?);
    uint64_t v86 = type metadata accessor for PreExtractedCard(0);
    OUTLINED_FUNCTION_11_20(v56, v87, v86);
    if (v79)
    {
      outlined destroy of CustomStringConvertible?(v56, &demangling cache variable for type metadata for PreExtractedCard?);
      OUTLINED_FUNCTION_49_10();
    }
    else
    {
      PreExtractedCard.llmConsumableDescription.getter();
      OUTLINED_FUNCTION_131_2(v88, v89);
      uint64_t v90 = outlined destroy of PreExtractedSharedLink(v56, (void (*)(void))type metadata accessor for PreExtractedCard);
    }
    OUTLINED_FUNCTION_5_17(v90, v91, (uint64_t)v140);
    outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    outlined init with copy of EagerResolutionService?((uint64_t)v3 + v41[23], v85, &demangling cache variable for type metadata for PreExtractedContact?);
    uint64_t v92 = type metadata accessor for PreExtractedContact(0);
    OUTLINED_FUNCTION_11_20(v85, v93, v92);
    if (v79)
    {
      outlined destroy of CustomStringConvertible?(v85, &demangling cache variable for type metadata for PreExtractedContact?);
      OUTLINED_FUNCTION_49_10();
    }
    else
    {
      PreExtractedContact.llmConsumableDescription.getter();
      OUTLINED_FUNCTION_131_2(v94, v95);
      uint64_t v96 = outlined destroy of PreExtractedSharedLink(v85, (void (*)(void))type metadata accessor for PreExtractedContact);
    }
    OUTLINED_FUNCTION_5_17(v96, v97, (uint64_t)v140);
    outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    outlined init with copy of EagerResolutionService?((uint64_t)v3 + v41[24], v84, &demangling cache variable for type metadata for PreExtractedSharedLink?);
    uint64_t v98 = type metadata accessor for PreExtractedSharedLink(0);
    OUTLINED_FUNCTION_11_20(v84, v99, v98);
    if (v79)
    {
      uint64_t v102 = outlined destroy of CustomStringConvertible?(v84, &demangling cache variable for type metadata for PreExtractedSharedLink?);
      long long v141 = 0u;
      long long v142 = 0u;
      uint64_t v143 = 0;
    }
    else
    {
      PreExtractedSharedLink.llmConsumableDescription.getter();
      *((void *)&v142 + 1) = v50;
      uint64_t v143 = v51;
      *(void *)&long long v141 = v100;
      *((void *)&v141 + 1) = v101;
      uint64_t v102 = outlined destroy of PreExtractedSharedLink(v84, (void (*)(void))type metadata accessor for PreExtractedSharedLink);
    }
    OUTLINED_FUNCTION_5_17(v102, v103, (uint64_t)&v141);
    outlined destroy of CustomStringConvertible?((uint64_t)&v141, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    outlined init with take of SearchContext?((uint64_t)v3 + v41[25], (uint64_t)v139, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    outlined init with take of SearchContext?((uint64_t)v139, (uint64_t)v140, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
    uint64_t Enum = getEnumTag for SearchToolError((uint64_t)v140);
    if (Enum == 1) {
      goto LABEL_56;
    }
    memcpy(v138, v140, sizeof(v138));
    PreExtractedBreadcrumb.llmConsumableDescription.getter();
    v138[3] = v50;
    v138[4] = v51;
LABEL_58:
    v138[0] = Enum;
    v138[1] = v105;
    goto LABEL_59;
  }
  uint64_t v137 = v9;
  v140[0] = 0;
  v140[1] = 0xE000000000000000;
  MEMORY[0x25A2C7B90](137);
  OUTLINED_FUNCTION_67_7();
  OUTLINED_FUNCTION_116_5(v28, v29, v144);
  OUTLINED_FUNCTION_17_17();
  uint64_t v30 = (int *)type metadata accessor for EmailDocument(0);
  uint64_t v31 = (char *)v0 + v30[12];
  uint64_t v32 = type metadata accessor for Date();
  OUTLINED_FUNCTION_1_0();
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v2, v31, v32);
  uint64_t v34 = OUTLINED_FUNCTION_5_13();
  __swift_storeEnumTagSinglePayload(v34, v35, v36, v32);
  static LLMFormatter.dateTimeFormatter.getter();
  OUTLINED_FUNCTION_96_5();
  OUTLINED_FUNCTION_112_4();
  v37();
  outlined destroy of CustomStringConvertible?(v2, &demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_17_17();
  uint64_t v38 = v3[5];
  if (v38) {
    OUTLINED_FUNCTION_132_2(v38, v3[4]);
  }
  else {
    OUTLINED_FUNCTION_25_17();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_55_10(0x3A7463656A627553, v53, (uint64_t)v140);
  outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  uint64_t v54 = v3[7];
  uint64_t v55 = (uint64_t)v137;
  if (v54) {
    OUTLINED_FUNCTION_132_2(v54, v3[6]);
  }
  else {
    OUTLINED_FUNCTION_25_17();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_92_7();
  outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  uint64_t v60 = OUTLINED_FUNCTION_130_2(v30[20]);
  if (v60) {
    OUTLINED_FUNCTION_132_2(v60, *v61);
  }
  else {
    OUTLINED_FUNCTION_25_17();
  }
  uint64_t v65 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_5_17(v65, v66, (uint64_t)v140);
  outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  uint64_t v67 = (uint64_t *)((char *)v3 + v30[19]);
  if (*v67)
  {
    uint64_t v68 = OUTLINED_FUNCTION_81_6((uint64_t)v67);
    OUTLINED_FUNCTION_129_2(v68, v69, MEMORY[0x263F8D310]);
  }
  else
  {
    OUTLINED_FUNCTION_25_17();
  }
  OUTLINED_FUNCTION_30_18(23, 0x8000000258680C00, (uint64_t)v140);
  outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  uint64_t v75 = OUTLINED_FUNCTION_130_2(v30[18]);
  if (v75) {
    OUTLINED_FUNCTION_132_2(v75, *v76);
  }
  else {
    OUTLINED_FUNCTION_25_17();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(0xD000000000000018, 0x8000000258680C20, (uint64_t)v140, 0);
  outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  outlined init with copy of EagerResolutionService?((uint64_t)v3 + v30[21], (uint64_t)v24, &demangling cache variable for type metadata for PartialExtractedAttributes?);
  uint64_t v106 = type metadata accessor for PartialExtractedAttributes(0);
  OUTLINED_FUNCTION_11_20((uint64_t)v24, v107, v106);
  if (v79)
  {
    outlined destroy of CustomStringConvertible?((uint64_t)v24, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    OUTLINED_FUNCTION_49_10();
  }
  else
  {
    specialized PartialExtractedAttributesSearchItem.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_129_2(v108, v109, MEMORY[0x263F8D310]);
    uint64_t v110 = outlined destroy of PreExtractedSharedLink((uint64_t)v24, (void (*)(void))type metadata accessor for PartialExtractedAttributes);
  }
  uint64_t v112 = (uint64_t)v135;
  uint64_t v113 = (uint64_t)v133;
  OUTLINED_FUNCTION_5_17(v110, v111, (uint64_t)v140);
  outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  outlined init with copy of EagerResolutionService?((uint64_t)v3 + v30[22], v113, &demangling cache variable for type metadata for PreExtractedCard?);
  uint64_t v114 = type metadata accessor for PreExtractedCard(0);
  OUTLINED_FUNCTION_11_20(v113, v115, v114);
  if (v79)
  {
    outlined destroy of CustomStringConvertible?(v113, &demangling cache variable for type metadata for PreExtractedCard?);
    OUTLINED_FUNCTION_49_10();
  }
  else
  {
    PreExtractedCard.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_129_2(v116, v117, MEMORY[0x263F8D310]);
    uint64_t v118 = outlined destroy of PreExtractedSharedLink(v113, (void (*)(void))type metadata accessor for PreExtractedCard);
  }
  OUTLINED_FUNCTION_5_17(v118, v119, (uint64_t)v140);
  outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  outlined init with copy of EagerResolutionService?((uint64_t)v3 + v30[23], v112, &demangling cache variable for type metadata for PreExtractedContact?);
  uint64_t v120 = type metadata accessor for PreExtractedContact(0);
  OUTLINED_FUNCTION_11_20(v112, v121, v120);
  if (v79)
  {
    outlined destroy of CustomStringConvertible?(v112, &demangling cache variable for type metadata for PreExtractedContact?);
    OUTLINED_FUNCTION_49_10();
  }
  else
  {
    PreExtractedContact.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_129_2(v122, v123, MEMORY[0x263F8D310]);
    uint64_t v124 = outlined destroy of PreExtractedSharedLink(v112, (void (*)(void))type metadata accessor for PreExtractedContact);
  }
  OUTLINED_FUNCTION_5_17(v124, v125, (uint64_t)v140);
  outlined destroy of CustomStringConvertible?((uint64_t)v140, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  outlined init with copy of EagerResolutionService?((uint64_t)v3 + v30[24], v55, &demangling cache variable for type metadata for PreExtractedSharedLink?);
  uint64_t v126 = type metadata accessor for PreExtractedSharedLink(0);
  OUTLINED_FUNCTION_11_20(v55, v127, v126);
  if (v79)
  {
    uint64_t v130 = outlined destroy of CustomStringConvertible?(v55, &demangling cache variable for type metadata for PreExtractedSharedLink?);
    long long v141 = 0u;
    long long v142 = 0u;
    uint64_t v143 = 0;
  }
  else
  {
    PreExtractedSharedLink.llmConsumableDescription.getter();
    *((void *)&v142 + 1) = MEMORY[0x263F8D310];
    uint64_t v143 = MEMORY[0x263F8D378];
    *(void *)&long long v141 = v128;
    *((void *)&v141 + 1) = v129;
    uint64_t v130 = outlined destroy of PreExtractedSharedLink(v55, (void (*)(void))type metadata accessor for PreExtractedSharedLink);
  }
  OUTLINED_FUNCTION_5_17(v130, v131, (uint64_t)&v141);
  outlined destroy of CustomStringConvertible?((uint64_t)&v141, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  outlined init with take of SearchContext?((uint64_t)v3 + v30[25], (uint64_t)v139, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  outlined init with take of SearchContext?((uint64_t)v139, (uint64_t)v140, &demangling cache variable for type metadata for PreExtractedBreadcrumb?);
  uint64_t Enum = getEnumTag for SearchToolError((uint64_t)v140);
  if (Enum != 1)
  {
    memcpy(v138, v140, sizeof(v138));
    PreExtractedBreadcrumb.llmConsumableDescription.getter();
    v138[3] = MEMORY[0x263F8D310];
    v138[4] = MEMORY[0x263F8D378];
    goto LABEL_58;
  }
LABEL_56:
  memset(v138, 0, 40);
LABEL_59:
  OUTLINED_FUNCTION_5_17(Enum, v105, (uint64_t)v138);
  outlined destroy of CustomStringConvertible?((uint64_t)v138, &demangling cache variable for type metadata for CustomStringConvertible?);
  LLMFormatter.sanitized.getter();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void specialized PartialExtractedAttributesSearchItem.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_17_1();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
  uint64_t v8 = OUTLINED_FUNCTION_81(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_59_0();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_39();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
  uint64_t v12 = OUTLINED_FUNCTION_81(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_13_12();
  OUTLINED_FUNCTION_125_4();
  OUTLINED_FUNCTION_39_10();
  uint64_t v13 = (int *)type metadata accessor for PartialExtractedAttributes(0);
  outlined init with copy of EagerResolutionService?(v1 + v13[9], v4, &demangling cache variable for type metadata for Party?);
  uint64_t v14 = type metadata accessor for Party(0);
  if (__swift_getEnumTagSinglePayload(v4, 1, v14) == 1)
  {
    outlined destroy of CustomStringConvertible?(v4, &demangling cache variable for type metadata for Party?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    Party.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_121_3(v17, v18);
    uint64_t v15 = outlined destroy of PreExtractedSharedLink(v4, (void (*)(void))type metadata accessor for Party);
  }
  OUTLINED_FUNCTION_5_17(v15, v16, (uint64_t)v38);
  outlined destroy of CustomStringConvertible?((uint64_t)v38, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  outlined init with copy of EagerResolutionService?(v1 + v13[11], v3, (uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
  uint64_t v19 = type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_11_20(v3, v20, v19);
  if (v21)
  {
    outlined destroy of CustomStringConvertible?(v3, (uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    FlightReservation.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_121_3(v22, v23);
    uint64_t v24 = outlined destroy of PreExtractedSharedLink(v3, (void (*)(void))type metadata accessor for FlightReservation);
  }
  OUTLINED_FUNCTION_5_17(v24, v25, (uint64_t)v38);
  outlined destroy of CustomStringConvertible?((uint64_t)v38, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  outlined init with copy of EagerResolutionService?(v1 + v13[12], v2, &demangling cache variable for type metadata for HotelReservation?);
  uint64_t v26 = type metadata accessor for HotelReservation(0);
  OUTLINED_FUNCTION_11_20(v2, v27, v26);
  if (v21)
  {
    outlined destroy of CustomStringConvertible?(v2, &demangling cache variable for type metadata for HotelReservation?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    HotelReservation.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_121_3(v28, v29);
    uint64_t v30 = outlined destroy of PreExtractedSharedLink(v2, (void (*)(void))type metadata accessor for HotelReservation);
  }
  OUTLINED_FUNCTION_5_17(v30, v31, (uint64_t)v38);
  outlined destroy of CustomStringConvertible?((uint64_t)v38, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  outlined init with copy of EagerResolutionService?(v1 + v13[13], v0, (uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
  uint64_t v32 = type metadata accessor for RestaurantReservation(0);
  OUTLINED_FUNCTION_11_20(v0, v33, v32);
  if (v21)
  {
    outlined destroy of CustomStringConvertible?(v0, (uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    RestaurantReservation.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_121_3(v34, v35);
    uint64_t v36 = outlined destroy of PreExtractedSharedLink(v0, (void (*)(void))type metadata accessor for RestaurantReservation);
  }
  OUTLINED_FUNCTION_5_17(v36, v37, (uint64_t)v38);
  outlined destroy of CustomStringConvertible?((uint64_t)v38, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void PartialExtractedAttributesSearchItem.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
  uint64_t v5 = OUTLINED_FUNCTION_81(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_17_1();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HotelReservation?);
  uint64_t v7 = OUTLINED_FUNCTION_81(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_39();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_13_12();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Party?);
  uint64_t v11 = OUTLINED_FUNCTION_81(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_14_10();
  OUTLINED_FUNCTION_125_4();
  OUTLINED_FUNCTION_39_10();
  uint64_t v12 = OUTLINED_FUNCTION_54_8();
  v13(v12);
  uint64_t v14 = type metadata accessor for Party(0);
  if (__swift_getEnumTagSinglePayload(v3, 1, v14) == 1)
  {
    outlined destroy of CustomStringConvertible?(v3, &demangling cache variable for type metadata for Party?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    Party.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_120_5(v17, v18);
    uint64_t v15 = outlined destroy of PreExtractedSharedLink(v3, (void (*)(void))type metadata accessor for Party);
  }
  OUTLINED_FUNCTION_5_17(v15, v16, (uint64_t)v44);
  outlined destroy of CustomStringConvertible?((uint64_t)v44, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  uint64_t v19 = OUTLINED_FUNCTION_54_8();
  v20(v19);
  uint64_t v21 = type metadata accessor for FlightReservation(0);
  OUTLINED_FUNCTION_11_20(v2, v22, v21);
  if (v23)
  {
    outlined destroy of CustomStringConvertible?(v2, (uint64_t *)&demangling cache variable for type metadata for FlightReservation?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    FlightReservation.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_120_5(v24, v25);
    uint64_t v26 = outlined destroy of PreExtractedSharedLink(v2, (void (*)(void))type metadata accessor for FlightReservation);
  }
  OUTLINED_FUNCTION_5_17(v26, v27, (uint64_t)v44);
  outlined destroy of CustomStringConvertible?((uint64_t)v44, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  uint64_t v28 = OUTLINED_FUNCTION_54_8();
  v29(v28);
  uint64_t v30 = type metadata accessor for HotelReservation(0);
  OUTLINED_FUNCTION_11_20(v1, v31, v30);
  if (v23)
  {
    outlined destroy of CustomStringConvertible?(v1, &demangling cache variable for type metadata for HotelReservation?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    HotelReservation.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_120_5(v32, v33);
    uint64_t v34 = outlined destroy of PreExtractedSharedLink(v1, (void (*)(void))type metadata accessor for HotelReservation);
  }
  OUTLINED_FUNCTION_5_17(v34, v35, (uint64_t)v44);
  outlined destroy of CustomStringConvertible?((uint64_t)v44, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  uint64_t v36 = OUTLINED_FUNCTION_54_8();
  v37(v36);
  uint64_t v38 = type metadata accessor for RestaurantReservation(0);
  OUTLINED_FUNCTION_11_20(v0, v39, v38);
  if (v23)
  {
    outlined destroy of CustomStringConvertible?(v0, (uint64_t *)&demangling cache variable for type metadata for RestaurantReservation?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    RestaurantReservation.llmConsumableDescription.getter();
    OUTLINED_FUNCTION_120_5(v40, v41);
    uint64_t v42 = outlined destroy of PreExtractedSharedLink(v0, (void (*)(void))type metadata accessor for RestaurantReservation);
  }
  OUTLINED_FUNCTION_5_17(v42, v43, (uint64_t)v44);
  outlined destroy of CustomStringConvertible?((uint64_t)v44, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void PreExtractedCard.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v45 = type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_15_20();
  MEMORY[0x25A2C7B90](200);
  uint64_t v50 = v46;
  uint64_t v51 = v47;
  PreExtractedCard.Keys.llmPrompt.getter(0);
  OUTLINED_FUNCTION_97_3();
  uint64_t v8 = v0[3];
  if (v8) {
    OUTLINED_FUNCTION_20_19(v8, v0[2]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(v2, v1, (uint64_t)&v46, 0);
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(1);
  OUTLINED_FUNCTION_97_3();
  uint64_t v9 = v0[5];
  if (v9) {
    OUTLINED_FUNCTION_20_19(v9, v0[4]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_53_9();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(2);
  OUTLINED_FUNCTION_97_3();
  uint64_t v10 = v0[7];
  if (v10) {
    OUTLINED_FUNCTION_20_19(v10, v0[6]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_53_9();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(3);
  OUTLINED_FUNCTION_97_3();
  uint64_t v11 = v0[9];
  if (v11) {
    OUTLINED_FUNCTION_20_19(v11, v0[8]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_53_9();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(4);
  OUTLINED_FUNCTION_97_3();
  uint64_t v12 = v0[11];
  if (v12) {
    OUTLINED_FUNCTION_20_19(v12, v0[10]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_53_9();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(5);
  uint64_t v13 = (int *)type metadata accessor for PreExtractedCard(0);
  OUTLINED_FUNCTION_95_6();
  OUTLINED_FUNCTION_36_14();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v15 = v45;
  v14(v7, v45);
  PreExtractedCard.Keys.llmPrompt.getter(6);
  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_95_6();
  OUTLINED_FUNCTION_36_14();
  swift_bridgeObjectRelease();
  v14(v7, v15);
  PreExtractedCard.Keys.llmPrompt.getter(7);
  OUTLINED_FUNCTION_42_7();
  uint64_t v16 = OUTLINED_FUNCTION_4_22(v13[12]);
  uint64_t v44 = v17;
  if (v16)
  {
    uint64_t v18 = *v17;
    uint64_t v19 = MEMORY[0x263F8D310];
    uint64_t v48 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_37_16(v16, v18);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
    uint64_t v19 = MEMORY[0x263F8D310];
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_11();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(8);
  OUTLINED_FUNCTION_42_7();
  uint64_t v20 = OUTLINED_FUNCTION_4_22(v13[13]);
  if (v20)
  {
    uint64_t v22 = *v21;
    uint64_t v48 = v19;
    OUTLINED_FUNCTION_37_16(v20, v22);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_11();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(9);
  OUTLINED_FUNCTION_42_7();
  uint64_t v23 = OUTLINED_FUNCTION_4_22(v13[14]);
  if (v23)
  {
    uint64_t v25 = *v24;
    uint64_t v48 = v19;
    OUTLINED_FUNCTION_37_16(v23, v25);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_11();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(10);
  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_95_6();
  OUTLINED_FUNCTION_36_14();
  swift_bridgeObjectRelease();
  v14(v7, v45);
  PreExtractedCard.Keys.llmPrompt.getter(11);
  uint64_t v26 = OUTLINED_FUNCTION_4_22(v13[16]);
  if (v26)
  {
    uint64_t v28 = *v27;
    uint64_t v48 = MEMORY[0x263F8D310];
    uint64_t v49 = MEMORY[0x263F8D378];
    uint64_t v46 = v28;
    uint64_t v47 = v26;
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17_18();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(12);
  uint64_t v29 = OUTLINED_FUNCTION_4_22(v13[17]);
  if (v29) {
    OUTLINED_FUNCTION_18_23(v29, v30);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17_18();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(13);
  uint64_t v31 = OUTLINED_FUNCTION_4_22(v13[18]);
  if (v31) {
    OUTLINED_FUNCTION_18_23(v31, v32);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17_18();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(14);
  uint64_t v33 = OUTLINED_FUNCTION_4_22(v13[19]);
  if (v33) {
    OUTLINED_FUNCTION_18_23(v33, v34);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17_18();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(15);
  OUTLINED_FUNCTION_94_8();
  uint64_t v35 = OUTLINED_FUNCTION_4_22(v13[20]);
  if (v35) {
    OUTLINED_FUNCTION_18_23(v35, v36);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17_18();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(16);
  OUTLINED_FUNCTION_94_8();
  uint64_t v37 = OUTLINED_FUNCTION_4_22(v13[21]);
  if (v37) {
    OUTLINED_FUNCTION_18_23(v37, v38);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17_18();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(17);
  OUTLINED_FUNCTION_94_8();
  uint64_t v39 = OUTLINED_FUNCTION_4_22(v13[22]);
  if (v39) {
    OUTLINED_FUNCTION_18_23(v39, v40);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17_18();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(7);
  OUTLINED_FUNCTION_94_8();
  uint64_t v41 = v44[1];
  if (v41) {
    OUTLINED_FUNCTION_18_23(v41, v44);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17_18();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedCard.Keys.llmPrompt.getter(18);
  OUTLINED_FUNCTION_94_8();
  uint64_t v42 = OUTLINED_FUNCTION_4_22(v13[23]);
  if (v42) {
    OUTLINED_FUNCTION_18_23(v42, v43);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17_18();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)&v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void PreExtractedContact.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15_20();
  MEMORY[0x25A2C7B90](150);
  uint64_t v30 = v28[0];
  uint64_t v31 = v28[1];
  PreExtractedContact.Keys.llmPrompt.getter(0);
  OUTLINED_FUNCTION_118_3();
  uint64_t v6 = *(void *)(v0 + 24);
  if (v6) {
    OUTLINED_FUNCTION_20_19(v6, *(void *)(v0 + 16));
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(v2, v1, (uint64_t)v28, 0);
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v28, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedContact.Keys.llmPrompt.getter(1);
  OUTLINED_FUNCTION_118_3();
  uint64_t v7 = *(void *)(v0 + 40);
  if (v7) {
    OUTLINED_FUNCTION_20_19(v7, *(void *)(v0 + 32));
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_73_4();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v28, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedContact.Keys.llmPrompt.getter(2);
  OUTLINED_FUNCTION_118_3();
  uint64_t v8 = *(void *)(v0 + 56);
  if (v8) {
    OUTLINED_FUNCTION_20_19(v8, *(void *)(v0 + 48));
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_73_4();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v28, &demangling cache variable for type metadata for CustomStringConvertible?);
  v9._uint64_t countAndFlagsBits = PreExtractedContact.Keys.llmPrompt.getter(3);
  v32.value._rawValue = *(void **)(v0 + 64);
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v9, v32);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = PreExtractedContact.Keys.llmPrompt.getter(4);
  v33.value._rawValue = *(void **)(v0 + 72);
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v10, v33);
  swift_bridgeObjectRelease();
  PreExtractedContact.Keys.llmPrompt.getter(5);
  OUTLINED_FUNCTION_118_3();
  uint64_t v11 = *(void *)(v0 + 88);
  if (v11) {
    OUTLINED_FUNCTION_20_19(v11, *(void *)(v0 + 80));
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_73_4();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v28, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedContact.Keys.llmPrompt.getter(6);
  uint64_t v12 = (int *)type metadata accessor for PreExtractedContact(0);
  static LLMFormatter.dateTimeFormatter.getter();
  OUTLINED_FUNCTION_126_2();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void (**)(void))(v4 + 8);
  OUTLINED_FUNCTION_111_0();
  v13();
  PreExtractedContact.Keys.llmPrompt.getter(7);
  OUTLINED_FUNCTION_42_7();
  uint64_t v14 = OUTLINED_FUNCTION_4_22(v12[12]);
  if (v14)
  {
    uint64_t v16 = *v15;
    uint64_t v29 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_37_16(v14, v16);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_11();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v28, &demangling cache variable for type metadata for CustomStringConvertible?);
  v17._uint64_t countAndFlagsBits = PreExtractedContact.Keys.llmPrompt.getter(8);
  v34.value._rawValue = *(void **)(v0 + v12[13]);
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v17, v34);
  swift_bridgeObjectRelease();
  PreExtractedContact.Keys.llmPrompt.getter(9);
  OUTLINED_FUNCTION_83_4();
  static LLMFormatter.dateTimeFormatter.getter();
  OUTLINED_FUNCTION_126_2();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_111_0();
  v13();
  v18._uint64_t countAndFlagsBits = PreExtractedContact.Keys.llmPrompt.getter(10);
  v35.value._rawValue = *(void **)(v0 + v12[15]);
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v18, v35);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = PreExtractedContact.Keys.llmPrompt.getter(11);
  v36.value._rawValue = *(void **)(v0 + v12[16]);
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v19, v36);
  swift_bridgeObjectRelease();
  uint64_t v20 = PreExtractedContact.Keys.llmPrompt.getter(12);
  uint64_t v22 = v21;
  uint64_t v23 = OUTLINED_FUNCTION_4_22(v12[17]);
  if (v23)
  {
    uint64_t v25 = *v24;
    uint64_t v29 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_37_16(v23, v25);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(v20, v22, (uint64_t)v28, 0);
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v28, &demangling cache variable for type metadata for CustomStringConvertible?);
  v26._uint64_t countAndFlagsBits = PreExtractedContact.Keys.llmPrompt.getter(13);
  v37.value._rawValue = *(void **)(v0 + v12[18]);
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v26, v37);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = PreExtractedContact.Keys.llmPrompt.getter(14);
  v38.value._rawValue = *(void **)(v0 + v12[19]);
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v27, v38);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void PreExtractedSharedLink.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = v0;
  v45[1] = type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_18_8();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_15_20();
  MEMORY[0x25A2C7B90](174);
  OUTLINED_FUNCTION_39_10();
  OUTLINED_FUNCTION_74_7();
  v9._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v9);
  PreExtractedSharedLink.Keys.llmPrompt.getter(0);
  uint64_t v10 = v0[3];
  uint64_t v11 = MEMORY[0x263F8D310];
  if (v10) {
    OUTLINED_FUNCTION_47_10(v10, v0[2]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_71_7();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(1);
  uint64_t v12 = v0[5];
  if (v12) {
    OUTLINED_FUNCTION_47_10(v12, v0[4]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_71_7();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(2);
  uint64_t v13 = v0[7];
  if (v13) {
    OUTLINED_FUNCTION_47_10(v13, v0[6]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_71_7();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v14 = PreExtractedSharedLink.Keys.llmPrompt.getter(3);
  uint64_t v16 = v15;
  Swift::String v17 = (int *)type metadata accessor for PreExtractedSharedLink(0);
  outlined init with copy of EagerResolutionService?((uint64_t)v0 + v17[8], (uint64_t)v8, &demangling cache variable for type metadata for URL?);
  uint64_t v18 = type metadata accessor for URL();
  OUTLINED_FUNCTION_53_2((uint64_t)v8, 1, v18);
  if (v19)
  {
    outlined destroy of CustomStringConvertible?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    uint64_t v47 = v18;
    uint64_t v20 = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_90_4(v20);
    OUTLINED_FUNCTION_1_0();
    (*(void (**)(void))(v21 + 32))();
  }
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(v14, v16, (uint64_t)v46, 1);
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(4);
  OUTLINED_FUNCTION_42_7();
  uint64_t v22 = OUTLINED_FUNCTION_4_22(v17[9]);
  if (v22) {
    OUTLINED_FUNCTION_46_10(v22, v23);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_70_7();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(5);
  OUTLINED_FUNCTION_42_7();
  uint64_t v24 = OUTLINED_FUNCTION_4_22(v17[10]);
  if (v24) {
    OUTLINED_FUNCTION_46_10(v24, v25);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_70_7();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(6);
  OUTLINED_FUNCTION_42_7();
  uint64_t v26 = OUTLINED_FUNCTION_4_22(v17[11]);
  if (v26)
  {
    uint64_t v28 = *v27;
    uint64_t v47 = v11;
    OUTLINED_FUNCTION_37_16(v26, v28);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_70_7();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(7);
  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_95_6();
  OUTLINED_FUNCTION_36_14();
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void (**)(void))(v3 + 8);
  OUTLINED_FUNCTION_112_4();
  v29();
  PreExtractedSharedLink.Keys.llmPrompt.getter(8);
  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_95_6();
  OUTLINED_FUNCTION_36_14();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_112_4();
  v29();
  uint64_t v30 = PreExtractedSharedLink.Keys.llmPrompt.getter(9);
  uint64_t v32 = v31;
  Swift::OpaquePointer_optional v33 = (char *)v1 + v17[14];
  if (v33[8])
  {
    OUTLINED_FUNCTION_0_13();
  }
  else
  {
    uint64_t v34 = *(void *)v33;
    uint64_t v47 = MEMORY[0x263F8D538];
    uint64_t v48 = MEMORY[0x263F8D5A8];
    v46[0] = v34;
  }
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(v30, v32, (uint64_t)v46, 0);
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(10);
  OUTLINED_FUNCTION_94_8();
  uint64_t v35 = OUTLINED_FUNCTION_4_22(v17[15]);
  if (v35) {
    OUTLINED_FUNCTION_18_23(v35, v36);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34_15();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(11);
  uint64_t v37 = OUTLINED_FUNCTION_4_22(v17[16]);
  if (v37) {
    OUTLINED_FUNCTION_18_23(v37, v38);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34_15();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(12);
  uint64_t v39 = OUTLINED_FUNCTION_4_22(v17[17]);
  if (v39) {
    OUTLINED_FUNCTION_18_23(v39, v40);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34_15();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(13);
  uint64_t v41 = OUTLINED_FUNCTION_4_22(v17[18]);
  if (v41) {
    OUTLINED_FUNCTION_18_23(v41, v42);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34_15();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  PreExtractedSharedLink.Keys.llmPrompt.getter(14);
  uint64_t v43 = OUTLINED_FUNCTION_4_22(v17[19]);
  if (v43) {
    OUTLINED_FUNCTION_18_23(v43, v44);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34_15();
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v46, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void PreExtractedBreadcrumb.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_97_1();
  uint64_t v4 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v6 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v26 = (void *)v0[6];
  Swift::String v27 = (void *)v0[7];
  uint64_t v28 = (void *)v0[8];
  uint64_t v29 = (void *)v0[9];
  uint64_t v30 = (void *)v0[10];
  uint64_t v31 = (void *)v0[11];
  uint64_t v32 = (void *)v0[12];
  Swift::OpaquePointer_optional v33 = (void *)v0[13];
  uint64_t v34 = (void *)v0[14];
  uint64_t v35 = (void *)v0[15];
  Swift::OpaquePointer_optional v36 = (void *)v0[16];
  uint64_t v37 = (void *)v0[17];
  MEMORY[0x25A2C7B90](160);
  uint64_t v7 = PreExtractedBreadcrumb.Keys.llmPrompt.getter(0);
  Swift::String v9 = v8;
  static LLMFormatter.dateTimeFormatter.getter();
  LLMFormatter.StringInterpolation.appendInterpolation(_:dates:formatStyle:)(v7, v9, v4, v1);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_112_4();
  v10();
  v11._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(1);
  v38.value._rawValue = v3;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v11, v38);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(2);
  v39.value._rawValue = v6;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v12, v39);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(3);
  v40.value._rawValue = v5;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v13, v40);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(4);
  v41.value._rawValue = v26;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v14, v41);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(5);
  v42.value._rawValue = v27;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v15, v42);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(6);
  v43.value._rawValue = v28;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v16, v43);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(7);
  v44.value._rawValue = v29;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v17, v44);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(8);
  v45.value._rawValue = v30;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v18, v45);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(9);
  v46.value._rawValue = v31;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v19, v46);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(10);
  v47.value._rawValue = v32;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v20, v47);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(11);
  v48.value._rawValue = v33;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v21, v48);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(12);
  v49.value._rawValue = v34;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v22, v49);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(13);
  v50.value._rawValue = v35;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v23, v50);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(14);
  v51.value._rawValue = v36;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v24, v51);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = PreExtractedBreadcrumb.Keys.llmPrompt.getter(15);
  v52.value._rawValue = v37;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v25, v52);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void Party.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = OUTLINED_FUNCTION_81(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_89_3();
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_18();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_15_20();
  MEMORY[0x25A2C7B90](84);
  OUTLINED_FUNCTION_105_7();
  v8._uint64_t countAndFlagsBits = 0x6564207974726150;
  v8._object = (void *)0xEE003A736C696174;
  String.append(_:)(v8);
  uint64_t v9 = v1[27];
  uint64_t v10 = MEMORY[0x263F8D310];
  uint64_t v11 = MEMORY[0x263F8D378];
  if (v9)
  {
    uint64_t v12 = v1[26];
    uint64_t v35 = MEMORY[0x263F8D310];
    uint64_t v36 = MEMORY[0x263F8D378];
    uint64_t v33 = v12;
    uint64_t v34 = v9;
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_42_10(0x746E65766520, v13, (uint64_t)&v33);
  outlined destroy of CustomStringConvertible?((uint64_t)&v33, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v14 = v1[13];
  if (v14)
  {
    uint64_t v15 = v1[12];
    uint64_t v35 = v10;
    uint64_t v36 = v11;
    uint64_t v33 = v15;
    uint64_t v34 = v14;
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_23_13();
  outlined destroy of CustomStringConvertible?((uint64_t)&v33, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v16 = v1[29];
  if (v16)
  {
    uint64_t v17 = v1[28];
    uint64_t v35 = v10;
    uint64_t v36 = v11;
    uint64_t v33 = v17;
    uint64_t v34 = v16;
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_56_7();
  outlined destroy of CustomStringConvertible?((uint64_t)&v33, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v18 = v1[31];
  if (v18)
  {
    uint64_t v19 = v1[30];
    uint64_t v35 = v10;
    uint64_t v36 = v11;
    uint64_t v20 = v11;
    uint64_t v33 = v19;
    uint64_t v34 = v18;
  }
  else
  {
    uint64_t v20 = v11;
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_55_10(0x3A73736572646120, v21, (uint64_t)&v33);
  outlined destroy of CustomStringConvertible?((uint64_t)&v33, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v22 = type metadata accessor for Party(0);
  OUTLINED_FUNCTION_38_11();
  if (v23) {
    static LLMFormatter.dateOnlyFormatter.getter();
  }
  else {
    static LLMFormatter.dateTimeFormatter.getter();
  }
  OUTLINED_FUNCTION_60_7();
  Swift::String v24 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  OUTLINED_FUNCTION_111_0();
  v24(v25, v26);
  OUTLINED_FUNCTION_38_11();
  if (v23) {
    static LLMFormatter.dateOnlyFormatter.getter();
  }
  else {
    static LLMFormatter.dateTimeFormatter.getter();
  }
  OUTLINED_FUNCTION_66_6();
  OUTLINED_FUNCTION_111_0();
  v24(v27, v28);
  outlined init with copy of EagerResolutionService?((uint64_t)v1 + *(int *)(v22 + 104), v0, &demangling cache variable for type metadata for URL?);
  uint64_t v29 = type metadata accessor for URL();
  OUTLINED_FUNCTION_53_2(v0, 1, v29);
  if (v23)
  {
    outlined destroy of CustomStringConvertible?(v0, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    uint64_t v30 = URL.absoluteString.getter();
    uint64_t v35 = MEMORY[0x263F8D310];
    uint64_t v36 = v20;
    uint64_t v33 = v30;
    uint64_t v34 = v31;
    OUTLINED_FUNCTION_1_0();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v0, v29);
  }
  OUTLINED_FUNCTION_52_10();
  outlined destroy of CustomStringConvertible?((uint64_t)&v33, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void FlightReservation.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = v0;
  uint64_t v111 = type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_185_0();
  uint64_t v108 = v5;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v6);
  Swift::String v8 = (char *)&v107 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v10 = OUTLINED_FUNCTION_81(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_185_0();
  uint64_t v110 = v11;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v107 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v16 = OUTLINED_FUNCTION_81(v15);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v107 - v20;
  OUTLINED_FUNCTION_15_20();
  MEMORY[0x25A2C7B90](287);
  OUTLINED_FUNCTION_39_10();
  OUTLINED_FUNCTION_35_15(0xD00000000000001BLL, (uint64_t)"flight reservation details:");
  uint64_t v22 = *(void *)(v0 + 112);
  uint64_t v112 = v3;
  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 104);
    uint64_t v115 = MEMORY[0x263F8D310];
    uint64_t v116 = MEMORY[0x263F8D378];
    uint64_t v113 = v23;
    uint64_t v114 = v22;
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_59_9();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(v24, v25, v26, 0);
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v27 = (int *)type metadata accessor for FlightReservation(0);
  outlined init with copy of EagerResolutionService?(v0 + v27[13], (uint64_t)v21, &demangling cache variable for type metadata for URL?);
  uint64_t v28 = type metadata accessor for URL();
  OUTLINED_FUNCTION_53_2((uint64_t)v21, 1, v28);
  if (v29)
  {
    outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    uint64_t v115 = v28;
    uint64_t v30 = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_90_4(v30);
    OUTLINED_FUNCTION_1_0();
    (*(void (**)(void))(v31 + 32))();
  }
  uint64_t v32 = OUTLINED_FUNCTION_98_6();
  OUTLINED_FUNCTION_77_6(v32 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000, 0x3A6C725520, v33);
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  outlined init with copy of EagerResolutionService?(v0 + v27[14], (uint64_t)v19, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_53_2((uint64_t)v19, 1, v28);
  if (v29)
  {
    outlined destroy of CustomStringConvertible?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_10_22();
  }
  else
  {
    uint64_t v115 = v28;
    uint64_t v34 = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_90_4(v34);
    OUTLINED_FUNCTION_1_0();
    (*(void (**)(void))(v35 + 32))();
  }
  OUTLINED_FUNCTION_59_9();
  uint64_t v109 = v36;
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(v36, v37, v38, 0);
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v39 = OUTLINED_FUNCTION_4_22(v27[15]);
  if (v39) {
    OUTLINED_FUNCTION_21_19(v39, v40);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  uint64_t v41 = OUTLINED_FUNCTION_99_6();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(v41, 0xE90000000000003ALL, v42, 0);
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v43 = OUTLINED_FUNCTION_4_22(v27[16]);
  if (v43) {
    OUTLINED_FUNCTION_21_19(v43, v44);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  uint64_t v45 = OUTLINED_FUNCTION_99_6();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(v45, 0xEE003A65646F6320, v46, 0);
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v47 = OUTLINED_FUNCTION_4_22(v27[17]);
  if (v47) {
    OUTLINED_FUNCTION_21_19(v47, v48);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_103_6((uint64_t)" flight designator: ");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v49 = OUTLINED_FUNCTION_4_22(v27[21]);
  if (v49) {
    OUTLINED_FUNCTION_21_19(v49, v50);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_24(0xD00000000000001BLL, (uint64_t)" departure airport address:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v51 = OUTLINED_FUNCTION_4_22(v27[23]);
  if (v51) {
    OUTLINED_FUNCTION_21_19(v51, v52);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_30_18(24, 0x8000000258680D00, (uint64_t)&v113);
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v53 = OUTLINED_FUNCTION_4_22(v27[25]);
  if (v53) {
    OUTLINED_FUNCTION_21_19(v53, v54);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_24(0xD00000000000001BLL, (uint64_t)" departure airport country:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v55 = OUTLINED_FUNCTION_4_22(v27[27]);
  if (v55) {
    OUTLINED_FUNCTION_21_19(v55, v56);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_24(0xD00000000000001CLL, (uint64_t)" departure airport locality:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v57 = OUTLINED_FUNCTION_4_22(v27[29]);
  if (v57) {
    OUTLINED_FUNCTION_21_19(v57, v58);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_30_18(24, 0x8000000258680D60, (uint64_t)&v113);
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v59 = OUTLINED_FUNCTION_4_22(v27[31]);
  if (v59) {
    OUTLINED_FUNCTION_21_19(v59, v60);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_24(0xD00000000000001ALL, (uint64_t)" departure airport region:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v61 = OUTLINED_FUNCTION_4_22(v27[36]);
  if (v61) {
    OUTLINED_FUNCTION_21_19(v61, v62);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_103_6((uint64_t)" departure terminal:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v63 = v0 + v27[18];
  uint64_t v64 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_1_0();
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
  v66(v14, v63, v64);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v64);
  OUTLINED_FUNCTION_114_6();
  if (v29) {
    static LLMFormatter.dateOnlyFormatter.getter();
  }
  else {
    static LLMFormatter.dateTimeFormatter.getter();
  }
  uint64_t v67 = v112;
  OUTLINED_FUNCTION_74_7();
  LLMFormatter.StringInterpolation.appendInterpolation(_:date:formatStyle:)();
  uint64_t v68 = v67 + 8;
  uint64_t v69 = *(void (**)(char *, uint64_t))(v67 + 8);
  uint64_t v112 = v68;
  v69(v8, v111);
  outlined destroy of CustomStringConvertible?((uint64_t)v14, &demangling cache variable for type metadata for DateComponents?);
  uint64_t v70 = OUTLINED_FUNCTION_4_22(v27[20]);
  if (v70)
  {
    uint64_t v72 = *v71;
    uint64_t v115 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_37_16(v70, v72);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_24(0xD000000000000019, (uint64_t)" arrival airport address:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v73 = OUTLINED_FUNCTION_4_22(v27[22]);
  if (v73)
  {
    uint64_t v75 = *v74;
    uint64_t v115 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_37_16(v73, v75);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_104_7((uint64_t)" arrival airport code:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v76 = OUTLINED_FUNCTION_4_22(v27[24]);
  if (v76)
  {
    uint64_t v78 = *v77;
    uint64_t v115 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_37_16(v76, v78);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_24(0xD000000000000019, (uint64_t)" arrival airport country:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v79 = OUTLINED_FUNCTION_4_22(v27[26]);
  if (v79)
  {
    uint64_t v81 = *v80;
    uint64_t v115 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_37_16(v79, v81);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_24(0xD00000000000001ALL, (uint64_t)" arrival airport locality:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v82 = OUTLINED_FUNCTION_4_22(v27[28]);
  if (v82)
  {
    uint64_t v84 = *v83;
    uint64_t v115 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_37_16(v82, v84);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_104_7((uint64_t)" arrival airport name:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v85 = OUTLINED_FUNCTION_4_22(v27[30]);
  if (v85)
  {
    uint64_t v87 = *v86;
    uint64_t v115 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_37_16(v85, v87);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  uint64_t v88 = v110;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_30_18(24, 0x8000000258680E80, (uint64_t)&v113);
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v89 = OUTLINED_FUNCTION_4_22(v27[35]);
  if (v89)
  {
    uint64_t v91 = *v90;
    uint64_t v115 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_37_16(v89, v91);
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_59_9();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(v109, v92, v93, 0);
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  v66((char *)v88, v1 + v27[19], v64);
  uint64_t v94 = OUTLINED_FUNCTION_5_13();
  __swift_storeEnumTagSinglePayload(v94, v95, v96, v64);
  OUTLINED_FUNCTION_114_6();
  uint64_t v97 = v108;
  if (v29) {
    static LLMFormatter.dateOnlyFormatter.getter();
  }
  else {
    static LLMFormatter.dateTimeFormatter.getter();
  }
  uint64_t v98 = MEMORY[0x263F8D310];
  uint64_t v99 = MEMORY[0x263F8D378];
  LLMFormatter.StringInterpolation.appendInterpolation(_:date:formatStyle:)();
  v69(v97, v111);
  outlined destroy of CustomStringConvertible?(v88, &demangling cache variable for type metadata for DateComponents?);
  uint64_t v100 = OUTLINED_FUNCTION_4_22(v27[32]);
  if (v100)
  {
    uint64_t v102 = *v101;
    uint64_t v115 = v98;
    uint64_t v116 = v99;
    uint64_t v113 = v102;
    uint64_t v114 = v100;
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_24(0xD000000000000015, (uint64_t)" confirmation number:");
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  v117.value._rawValue = *(void **)(v1 + v27[33]);
  v103._uint64_t countAndFlagsBits = 0xD000000000000011;
  v103._object = (void *)0x8000000258680EE0;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v103, v117);
  OUTLINED_FUNCTION_177_0();
  v104._uint64_t countAndFlagsBits = 0xD000000000000018;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v104, v118);
  uint64_t v105 = *(void *)(v1 + 88);
  if (v105)
  {
    uint64_t v106 = *(void *)(v1 + 80);
    uint64_t v115 = v98;
    uint64_t v116 = v99;
    uint64_t v113 = v106;
    uint64_t v114 = v105;
  }
  else
  {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_33_12();
  outlined destroy of CustomStringConvertible?((uint64_t)&v113, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void HotelReservation.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_1();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_18();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_15_20();
  MEMORY[0x25A2C7B90](116);
  OUTLINED_FUNCTION_39_10();
  OUTLINED_FUNCTION_35_15(0xD00000000000001ALL, (uint64_t)"hotel reservation details:");
  uint64_t v5 = (int *)type metadata accessor for HotelReservation(0);
  uint64_t v6 = OUTLINED_FUNCTION_4_22(v5[16]);
  if (v6) {
    OUTLINED_FUNCTION_46_10(v6, v7);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_42_10(0x6C65746F6820, v8, (uint64_t)v21);
  outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_114_6();
  if (v9) {
    static LLMFormatter.dateOnlyFormatter.getter();
  }
  else {
    static LLMFormatter.dateTimeFormatter.getter();
  }
  OUTLINED_FUNCTION_98_6();
  LLMFormatter.StringInterpolation.appendInterpolation(_:date:formatStyle:)();
  uint64_t v10 = *(void (**)(void))(v2 + 8);
  OUTLINED_FUNCTION_30();
  v10();
  OUTLINED_FUNCTION_114_6();
  if (v9) {
    static LLMFormatter.dateOnlyFormatter.getter();
  }
  else {
    static LLMFormatter.dateTimeFormatter.getter();
  }
  OUTLINED_FUNCTION_98_6();
  LLMFormatter.StringInterpolation.appendInterpolation(_:date:formatStyle:)();
  OUTLINED_FUNCTION_30();
  v10();
  uint64_t v11 = (char *)v0 + v5[29];
  if (v11[8])
  {
    OUTLINED_FUNCTION_0_13();
  }
  else
  {
    uint64_t v12 = *(void *)v11;
    v21[3] = MEMORY[0x263F8D6C8];
    v21[4] = MEMORY[0x263F8D738];
    v21[0] = v12;
  }
  OUTLINED_FUNCTION_13_24(0xD000000000000017, (uint64_t)" length of reservation:");
  outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v13 = OUTLINED_FUNCTION_4_22(v5[19]);
  if (v13) {
    OUTLINED_FUNCTION_46_10(v13, v14);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_6_20();
  outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v15 = OUTLINED_FUNCTION_4_22(v5[18]);
  if (v15) {
    OUTLINED_FUNCTION_46_10(v15, v16);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(0x6E20656E6F687020, 0xEE003A7265626D75, (uint64_t)v21, 0);
  outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v17 = v0[16];
  if (v17) {
    OUTLINED_FUNCTION_47_10(v17, v0[15]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_57_7();
  outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v18 = OUTLINED_FUNCTION_4_22(v5[17]);
  if (v18) {
    OUTLINED_FUNCTION_46_10(v18, v19);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_30_18(17, 0x8000000258680F60, (uint64_t)v21);
  outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v20 = v0[11];
  if (v20) {
    OUTLINED_FUNCTION_47_10(v20, v0[10]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_33_12();
  outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void RestaurantReservation.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  type metadata accessor for Date.FormatStyle();
  OUTLINED_FUNCTION_1();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_15_20();
  MEMORY[0x25A2C7B90](101);
  OUTLINED_FUNCTION_39_10();
  OUTLINED_FUNCTION_35_15(0xD00000000000001FLL, (uint64_t)"restaurant reservation details:");
  uint64_t v2 = (int *)type metadata accessor for RestaurantReservation(0);
  uint64_t v3 = OUTLINED_FUNCTION_4_22(v2[16]);
  if (v3) {
    OUTLINED_FUNCTION_20_19(v3, *v4);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_59_9();
  OUTLINED_FUNCTION_30_18(18, v5, v6);
  outlined destroy of CustomStringConvertible?((uint64_t)v17, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v7 = v0[16];
  if (v7) {
    OUTLINED_FUNCTION_20_19(v7, v0[15]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_57_7();
  outlined destroy of CustomStringConvertible?((uint64_t)v17, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v8 = OUTLINED_FUNCTION_4_22(v2[15]);
  if (v8) {
    OUTLINED_FUNCTION_20_19(v8, *v9);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(0x7320797472617020, 0xEC0000003A657A69, (uint64_t)v17, 0);
  outlined destroy of CustomStringConvertible?((uint64_t)v17, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_114_6();
  if (v10) {
    static LLMFormatter.dateOnlyFormatter.getter();
  }
  else {
    static LLMFormatter.dateTimeFormatter.getter();
  }
  LLMFormatter.StringInterpolation.appendInterpolation(_:date:formatStyle:)();
  OUTLINED_FUNCTION_111_0();
  v11();
  uint64_t v12 = OUTLINED_FUNCTION_4_22(v2[18]);
  if (v12) {
    OUTLINED_FUNCTION_20_19(v12, *v13);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_6_20();
  outlined destroy of CustomStringConvertible?((uint64_t)v17, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v14 = OUTLINED_FUNCTION_4_22(v2[17]);
  if (v14) {
    OUTLINED_FUNCTION_20_19(v14, *v15);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_72_5();
  outlined destroy of CustomStringConvertible?((uint64_t)v17, &demangling cache variable for type metadata for CustomStringConvertible?);
  uint64_t v16 = v0[11];
  if (v16) {
    OUTLINED_FUNCTION_20_19(v16, v0[10]);
  }
  else {
    OUTLINED_FUNCTION_0_13();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_33_12();
  outlined destroy of CustomStringConvertible?((uint64_t)v17, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

uint64_t outlined destroy of CustomStringConvertible?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_1_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void CalendarEvent.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_127_3();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_44_15();
  uint64_t v32 = 0;
  *(void *)&long long v33 = v5;
  MEMORY[0x25A2C7B90](103);
  uint64_t v35 = 0;
  uint64_t v36 = v33;
  OUTLINED_FUNCTION_177_0();
  v6._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CustomStringConvertible?>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_258661D60;
  if (v0[3])
  {
    uint64_t v8 = v0[2];
    uint64_t v9 = MEMORY[0x263F8D378];
    uint64_t v10 = v0[3];
    uint64_t v11 = MEMORY[0x263F8D310];
  }
  else
  {
    OUTLINED_FUNCTION_78_6();
    *(void *)(inited + 48) = 0;
  }
  *(void *)(inited + 32) = v8;
  *(void *)(inited + 40) = v10;
  *(void *)(inited + 56) = v11;
  *(void *)(inited + 64) = v9;
  uint64_t v12 = v0[5];
  if (v12)
  {
    uint64_t v13 = v1[4];
    uint64_t v14 = MEMORY[0x263F8D378];
    uint64_t v15 = MEMORY[0x263F8D310];
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    *(void *)(inited + 88) = 0;
  }
  uint64_t v16 = MEMORY[0x263F8D310];
  uint64_t v17 = MEMORY[0x263F8D378];
  *(void *)(inited + 72) = v13;
  *(void *)(inited + 80) = v12;
  *(void *)(inited + 96) = v15;
  *(void *)(inited + 104) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  LLMFormatter.StringInterpolation.appendInterpolation(_:ifAll:)(v18, (Swift::OpaquePointer)inited);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  OUTLINED_FUNCTION_17_17();
  uint64_t v19 = (int *)type metadata accessor for CalendarEvent(0);
  uint64_t v20 = OUTLINED_FUNCTION_4_22(v19[9]);
  if (v20)
  {
    uint64_t v22 = *v21;
    *(void *)&long long v34 = v16;
    *((void *)&v34 + 1) = v17;
    uint64_t v32 = v22;
    *(void *)&long long v33 = v20;
  }
  else
  {
    OUTLINED_FUNCTION_106_7();
  }
  swift_bridgeObjectRetain();
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(21, 0x8000000258680FE0, (uint64_t)&v32, 0);
  outlined destroy of CustomStringConvertible?((uint64_t)&v32, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  static LLMFormatter.dateTimeFormatter.getter();
  LLMFormatter.StringInterpolation.appendInterpolation(_:date:formatStyle:)();
  uint64_t v23 = *(void (**)(void))(v3 + 8);
  OUTLINED_FUNCTION_30();
  v23();
  OUTLINED_FUNCTION_17_17();
  static LLMFormatter.dateTimeFormatter.getter();
  LLMFormatter.StringInterpolation.appendInterpolation(_:date:formatStyle:)();
  OUTLINED_FUNCTION_30();
  v23();
  OUTLINED_FUNCTION_17_17();
  v37.value._rawValue = *(void **)((char *)v1 + v19[10]);
  v24._uint64_t countAndFlagsBits = 0x6572632073277449;
  v24._object = (void *)0xEF79622064657461;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v24, v37);
  OUTLINED_FUNCTION_17_17();
  v38.value._rawValue = *(void **)((char *)v1 + v19[11]);
  v25._uint64_t countAndFlagsBits = 0x6E65697069636552;
  v25._object = (void *)0xEE00657261207374;
  LLMFormatter.StringInterpolation.appendInterpolation(_:names:)(v25, v38);
  OUTLINED_FUNCTION_17_17();
  uint64_t v26 = OUTLINED_FUNCTION_4_22(v19[12]);
  if (v26)
  {
    uint64_t v28 = *v27;
    *(void *)&long long v34 = v16;
    *((void *)&v34 + 1) = v17;
    uint64_t v32 = v28;
    *(void *)&long long v33 = v26;
  }
  else
  {
    OUTLINED_FUNCTION_106_7();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_77_6(0x6F6E20746E657645, 0x203A736574, (uint64_t)&v32);
  outlined destroy of CustomStringConvertible?((uint64_t)&v32, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_17_17();
  char v29 = (char *)v1 + v19[13];
  if (*(void *)v29)
  {
    uint64_t v32 = *(void *)v29;
    long long v33 = *(_OWORD *)(v29 + 8);
    long long v34 = *(_OWORD *)(v29 + 24);
    uint64_t v30 = DataDetectorResults.description.getter();
    *(void *)&long long v34 = v16;
    *((void *)&v34 + 1) = v17;
    uint64_t v32 = v30;
    *(void *)&long long v33 = v31;
  }
  else
  {
    OUTLINED_FUNCTION_106_7();
  }
  LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(0xD000000000000017, 0x8000000258680C00, (uint64_t)&v32, 0);
  outlined destroy of CustomStringConvertible?((uint64_t)&v32, &demangling cache variable for type metadata for CustomStringConvertible?);
  OUTLINED_FUNCTION_119_4();
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_119_0();
}

void MobileSMSDocument.llmConsumableDescription.getter()
{
  OUTLINED_FUNCTION_104_0();
  uint64_t v5 = type metadata accessor for Photo(0);
  uint64_t v6 = OUTLINED_FUNCTION_81(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_184_0();
  uint64_t v134 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Photo)?);
  uint64_t v9 = OUTLINED_FUNCTION_81(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_185_0();
  uint64_t v133 = v10;
  OUTLINED_FUNCTION_113_1();
  MEMORY[0x270FA5388](v11);
  uint64_t v138 = (char *)&v130 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedSharedLink?);
  uint64_t v14 = OUTLINED_FUNCTION_81(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_184_0();
  uint64_t v135 = v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedContact?);
  uint64_t v17 = OUTLINED_FUNCTION_81(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_184_0();
  uint64_t v137 = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreExtractedCard?);
  uint64_t v20 = OUTLINED_FUNCTION_81(v19);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialExtractedAttributes?);
  uint64_t v24 = OUTLINED_FUNCTION_81(v23);
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_18_8();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v26 = OUTLINED_FUNCTION_81(v25);
  MEMORY[0x270FA5388](v26);
  uint64_t v27 = OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_1();
  uint64_t v136 = v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v30 = OUTLINED_FUNCTION_22_15();
  uint64_t v31 = type metadata accessor for MobileSMSDocument(v30);
  OUTLINED_FUNCTION_1();
  uint64_t v33 = v32;
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_14_10();
  uint64_t v36 = *(void *)&v0[*(int *)(v35 + 64)];
  uint64_t v37 = *(void *)(v36 + 16);
  if (v37)
  {
    uint64_t v138 = v0;
    uint64_t v38 = v36;
    uint64_t v141 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v39 = *(unsigned __int8 *)(v33 + 80);
    uint64_t v137 = v38;
    uint64_t v40 = v38 + ((v39 + 32) & ~v39);
    uint64_t v41 = *(void *)(v33 + 72);
    uint64_t v42 = (void *)v141;
    do
    {
      uint64_t v43 = outlined init with copy of MobileSMSDocument(v40, v4, (void (*)(void))type metadata accessor for MobileSMSDocument);
      uint64_t v44 = MobileSMSDocument.llmConsumableDescription.getter(v43);
      uint64_t v46 = v45;
      outlined destroy of PreExtractedSharedLink(v4, (void (*)(void))type metadata accessor for MobileSMSDocument);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_117_3();
        uint64_t v42 = (void *)v141;
      }
      unint64_t v47 = v42[2];
      if (v47 >= v42[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v42 = (void *)v141;
      }
      v42[2] = v47 + 1;
      Swift::OpaquePointer_optional v48 = &v42[2 * v47];
      v48[4] = v44;
      v48[5] = v46;
      v40 += v41;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
    uint64_t v49 = v42[2];
    if (v49)
    {
      Swift::OpaquePointer_optional v50 = v42 + 5;
      uint64_t v51 = MEMORY[0x263F8EE78];
      do
      {
        uint64_t v53 = *(v50 - 1);
        uint64_t v52 = *v50;
        uint64_t v54 = HIBYTE(*v50) & 0xF;
        if ((*v50 & 0x2000000000000000) == 0) {
          uint64_t v54 = v53 & 0xFFFFFFFFFFFFLL;
        }
        if (v54)
        {
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v141 = v51;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            OUTLINED_FUNCTION_117_3();
            uint64_t v51 = v141;
          }
          unint64_t v56 = *(void *)(v51 + 16);
          if (v56 >= *(void *)(v51 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v51 = v141;
          }
          *(void *)(v51 + 16) = v56 + 1;
          uint64_t v57 = v51 + 16 * v56;
          *(void *)(v57 + 32) = v53;
          *(void *)(v57 + 40) = v52;
        }
        v50 += 2;
        --v49;
      }
      while (v49);
    }
    else
    {
      uint64_t v51 = MEMORY[0x263F8EE78];
    }
    swift_release();
    OUTLINED_FUNCTION_15_20();
    MEMORY[0x25A2C7B90](35);
    uint64_t v144 = v141;
    uint64_t v145 = v142;
    v69._uint64_t countAndFlagsBits = 0x67617373656D2041;
    v69._object = (void *)0xEF20746168632065;
    String.append(_:)(v69);
    uint64_t v70 = MobileSMSDocument.displayChatName.getter();
    OUTLINED_FUNCTION_91_6(v70, v71, MEMORY[0x263F8D310]);
    LLMFormatter.StringInterpolation.appendInterpolation(_:)((uint64_t)&v141);
    outlined destroy of CustomStringConvertible?((uint64_t)&v141, &demangling cache variable for type metadata for CustomStringConvertible?);
    uint64_t v72 = specialized _arrayForceCast<A, B>(_:)(v51);
    swift_release();
    v73._uint64_t countAndFlagsBits = 58;
    v73._object = (void *)0xE100000000000000;
    LLMFormatter.StringInterpolation.appendInterpolation(_:startNewLinesIf:)(v73, (Swift::OpaquePointer)v72);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_119_4();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v131 = v1;
    uint64_t v132 = v2;
    uint64_t v58 = v137;
    uint64_t v59 = (uint64_t *)v138;
    OUTLINED_FUNCTION_124_4();
    uint64_t v144 = v141;
    uint64_t v145 = v142;
    uint64_t v60 = (int *)v31;
    uint64_t v61 = (uint64_t)&v0[*(int *)(v31 + 40)];
    static LLMFormatter.dateTimeFormatter.getter();
    LLMFormatter.StringInterpolation.appendInterpolation(date:formatStyle:)(v61);
    (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v3, v27);
    uint64_t v62 = (void *)*((void *)v0 + 8);
    uint64_t v63 = v0;
    if (v62[2])
    {
      v64._uint64_t countAndFlagsBits = 2105388;
      v64._object = (void *)0xE300000000000000;
      String.append(_:)(v64);
      v146.value._rawValue = v62;
      v146.Swift::Bool is_nil = 3;
      v65._uint64_t countAndFlagsBits = 0xE000000000000000;
      LLMFormatter.StringInterpolation.appendInterpolation(names:countToShow:suffix:)(v146, 0, v65);
    }
    uint64_t v66 = *((void *)v0 + 7);
    uint64_t v67 = v59;
    if (v66)
    {
      uint64_t v68 = *((void *)v0 + 6);
      *(void *)&long long v143 = MEMORY[0x263F8D310];
      *((void *)&v143 + 1) = MEMORY[0x263F8D378];
      uint64_t v141 = v68;
      *(void *)&long long v142 = v66;
    }
    else
    {
      OUTLINED_FUNCTION_0_13();
    }
    uint64_t v74 = v60;
    swift_bridgeObjectRetain();
    LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(58, 0xE100000000000000, (uint64_t)&v141, 0);
    outlined destroy of CustomStringConvertible?((uint64_t)&v141, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    uint64_t v75 = v131;
    outlined init with copy of EagerResolutionService?((uint64_t)v63 + v60[11], v131, &demangling cache variable for type metadata for URL?);
    uint64_t v76 = type metadata accessor for URL();
    OUTLINED_FUNCTION_53_2(v75, 1, v76);
    uint64_t v77 = v132;
    if (v78)
    {
      outlined destroy of CustomStringConvertible?(v75, &demangling cache variable for type metadata for URL?);
      OUTLINED_FUNCTION_10_22();
    }
    else
    {
      *(void *)&long long v143 = v76;
      uint64_t v79 = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      OUTLINED_FUNCTION_90_4(v79);
      OUTLINED_FUNCTION_1_0();
      (*(void (**)(void))(v80 + 32))();
    }
    uint64_t v81 = v135;
    LLMFormatter.StringInterpolation.appendInterpolation(_:if:skipLastDot:)(0x55746E65746E6F43, 0xEB000000003A4C52, (uint64_t)&v141, 0);
    outlined destroy of CustomStringConvertible?((uint64_t)&v141, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    uint64_t v82 = (char *)v63 + v74[17];
    if (*(void *)v82)
    {
      uint64_t v141 = *(void *)v82;
      long long v142 = *(_OWORD *)(v82 + 8);
      long long v143 = *(_OWORD *)(v82 + 24);
      uint64_t v83 = DataDetectorResults.description.getter();
      OUTLINED_FUNCTION_91_6(v83, v84, MEMORY[0x263F8D310]);
    }
    else
    {
      OUTLINED_FUNCTION_0_13();
    }
    OUTLINED_FUNCTION_102_3(0xD000000000000016, (uint64_t)"Data detector results:");
    outlined destroy of CustomStringConvertible?((uint64_t)&v141, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    outlined init with copy of EagerResolutionService?((uint64_t)v63 + v74[19], v77, &demangling cache variable for type metadata for PartialExtractedAttributes?);
    uint64_t v85 = type metadata accessor for PartialExtractedAttributes(0);
    OUTLINED_FUNCTION_11_20(v77, v86, v85);
    if (v78)
    {
      outlined destroy of CustomStringConvertible?(v77, &demangling cache variable for type metadata for PartialExtractedAttributes?);
      OUTLINED_FUNCTION_10_22();
    }
    else
    {
      specialized PartialExtractedAttributesSearchItem.llmConsumableDescription.getter();
      OUTLINED_FUNCTION_91_6(v87, v88, MEMORY[0x263F8D310]);
      uint64_t v89 = outlined destroy of PreExtractedSharedLink(v77, (void (*)(void))type metadata accessor for PartialExtractedAttributes);
    }
    OUTLINED_FUNCTION_5_17(v89, v90, (uint64_t)&v141);
    outlined destroy of CustomStringConvertible?((uint64_t)&v141, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    outlined init with copy of EagerResolutionService?((uint64_t)v63 + v74[20], (uint64_t)v22, &demangling cache variable for type metadata for PreExtractedCard?);
    uint64_t v91 = type metadata accessor for PreExtractedCard(0);
    OUTLINED_FUNCTION_11_20((uint64_t)v22, v92, v91);
    if (v78)
    {
      outlined destroy of CustomStringConvertible?((uint64_t)v22, &demangling cache variable for type metadata for PreExtractedCard?);
      OUTLINED_FUNCTION_10_22();
    }
    else
    {
      PreExtractedCard.llmConsumableDescription.getter();
      OUTLINED_FUNCTION_91_6(v93, v94, MEMORY[0x263F8D310]);
      uint64_t v95 = outlined destroy of PreExtractedSharedLink((uint64_t)v22, (void (*)(void))type metadata accessor for PreExtractedCard);
    }
    OUTLINED_FUNCTION_5_17(v95, v96, (uint64_t)&v141);
    outlined destroy of CustomStringConvertible?((uint64_t)&v141, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    outlined init with copy of EagerResolutionService?((uint64_t)v63 + v74[21], v58, &demangling cache variable for type metadata for PreExtractedContact?);
    uint64_t v97 = type metadata accessor for PreExtractedContact(0);
    OUTLINED_FUNCTION_11_20(v58, v98, v97);
    if (v78)
    {
      outlined destroy of CustomStringConvertible?(v58, &demangling cache variable for type metadata for PreExtractedContact?);
      OUTLINED_FUNCTION_10_22();
    }
    else
    {
      PreExtractedContact.llmConsumableDescription.getter();
      OUTLINED_FUNCTION_91_6(v99, v100, MEMORY[0x263F8D310]);
      uint64_t v101 = outlined destroy of PreExtractedSharedLink(v58, (void (*)(void))type metadata accessor for PreExtractedContact);
    }
    OUTLINED_FUNCTION_5_17(v101, v102, (uint64_t)&v141);
    outlined destroy of CustomStringConvertible?((uint64_t)&v141, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_17_17();
    outlined init with copy of EagerResolutionService?((uint64_t)v63 + v74[22], v81, &demangling cache variable for type metadata for PreExtractedSharedLink?);
    uint64_t v103 = type metadata accessor for PreExtractedSharedLink(0);
    OUTLINED_FUNCTION_11_20(v81, v104, v103);
    if (v78)
    {
      outlined destroy of CustomStringConvertible?(v81, &demangling cache variable for type metadata for PreExtractedSharedLink?);
      OUTLINED_FUNCTION_10_22();
    }
    else
    {
      PreExtractedSharedLink.llmConsumableDescription.getter();
      OUTLINED_FUNCTION_91_6(v105, v106, MEMORY[0x263F8D310]);
      uint64_t v107 = outlined destroy of PreExtractedSharedLink(v81, (void (*)(void))type metadata accessor for PreExtractedSharedLink);
    }
    OUTLINED_FUNCTION_5_17(v107, v108, (uint64_t)&v141);
    outlined destroy of CustomStringConvertible?((uint64_t)&v141, &demangling cache variable for type metadata for CustomStringConvertible?);
    OUTLINED_FUNCTION_119_4();
    uint64_t v110 = v109;
    uint64_t v112 = v111;
    swift_bridgeObjectRelease();
    uint64_t v144 = v110;
    uint64_t v145 = v112;
    uint64_t v113 = *(void *)((char *)v63 + v74[12]);
    if (*(void *)(v113 + 16))
    {
      uint64_t v141 = 0;
      *(void *)&long long v142 = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      uint64_t v141 = 0xD000000000000011;
      *(void *)&long long v142 = 0x8000000258681020;
      v140._uint64_t countAndFlagsBits = *(void *)(v113 + 16);
      v114._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v114);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_177_0();
      v115._uint64_t countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v115);
      v116._uint64_t countAndFlagsBits = v141;
      v116._object = (void *)v142;
      String.append(_:)(v116);
      swift_bridgeObjectRelease();
      long long v142 = 0uLL;
      uint64_t v141 = v113;
      swift_bridgeObjectRetain();
      Swift::OpaquePointer_optional v117 = v133;
      specialized EnumeratedSequence.Iterator.next()(v133);
      outlined init with take of SearchContext?((uint64_t)v117, (uint64_t)v67, &demangling cache variable for type metadata for (offset: Int, element: Photo)?);
      uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Photo));
      OUTLINED_FUNCTION_53_2((uint64_t)v67, 1, v118);
      uint64_t v119 = v134;
      while (!v78)
      {
        uint64_t v120 = *v67;
        outlined init with take of Photo((uint64_t)v67 + *(int *)(v118 + 48), v119);
        uint64_t v139 = v120;
        v140._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        v140._object = v121;
        v122._uint64_t countAndFlagsBits = 8250;
        v122._object = (void *)0xE200000000000000;
        String.append(_:)(v122);
        uint64_t countAndFlagsBits = v140._countAndFlagsBits;
        object = v140._object;
        Photo.llmConsumableDescription.getter();
        uint64_t v126 = v125;
        uint64_t v128 = v127;
        v140._uint64_t countAndFlagsBits = countAndFlagsBits;
        v140._object = object;
        swift_bridgeObjectRetain();
        v129._uint64_t countAndFlagsBits = v126;
        v129._object = v128;
        String.append(_:)(v129);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        String.append(_:)(v140);
        swift_bridgeObjectRelease();
        outlined destroy of PreExtractedSharedLink(v119, (void (*)(void))type metadata accessor for Photo);
        specialized EnumeratedSequence.Iterator.next()(v117);
        outlined init with take of SearchContext?((uint64_t)v117, (uint64_t)v67, &demangling cache variable for type metadata for (offset: Int, element: Photo)?);
        uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Photo));
        OUTLINED_FUNCTION_53_2((uint64_t)v67, 1, v118);
      }
      swift_bridgeObjectRelease();
    }
  }
  OUTLINED_FUNCTION_119_0();
}